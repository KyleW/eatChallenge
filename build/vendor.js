!function(e,t,n){"use strict";function r(e,t){return t=t||Error,function(){var n,r,i=2,o=arguments,a=o[0],s="["+(e?e+":":"")+a+"] ",u=o[1];for(s+=u.replace(/\{\d+\}/g,function(e){var t=+e.slice(1,-1),n=t+i;return n<o.length?ye(o[n]):e}),s+="\nhttp://errors.angularjs.org/1.4.8/"+(e?e+"/":"")+a,r=i,n="?";r<o.length;r++,n="&")s+=n+"p"+(r-i)+"="+encodeURIComponent(ye(o[r]));return new t(s)}}function i(e){if(null==e||O(e))return!1;if(Ur(e)||S(e)||Mr&&e instanceof Mr)return!0;var t="length"in Object(e)&&e.length;return E(t)&&(t>=0&&t-1 in e||"function"==typeof e.item)}function o(e,t,n){var r,a;if(e)if(A(e))for(r in e)"prototype"==r||"length"==r||"name"==r||e.hasOwnProperty&&!e.hasOwnProperty(r)||t.call(n,e[r],r,e);else if(Ur(e)||i(e)){var s="object"!=typeof e;for(r=0,a=e.length;a>r;r++)(s||r in e)&&t.call(n,e[r],r,e)}else if(e.forEach&&e.forEach!==o)e.forEach(t,n,e);else if(x(e))for(r in e)t.call(n,e[r],r,e);else if("function"==typeof e.hasOwnProperty)for(r in e)e.hasOwnProperty(r)&&t.call(n,e[r],r,e);else for(r in e)Er.call(e,r)&&t.call(n,e[r],r,e);return e}function a(e,t,n){for(var r=Object.keys(e).sort(),i=0;i<r.length;i++)t.call(n,e[r[i]],r[i]);return r}function s(e){return function(t,n){e(n,t)}}function u(){return++Fr}function c(e,t){t?e.$$hashKey=t:delete e.$$hashKey}function l(e,t,n){for(var r=e.$$hashKey,i=0,o=t.length;o>i;++i){var a=t[i];if(b(a)||A(a))for(var s=Object.keys(a),u=0,f=s.length;f>u;u++){var h=s[u],p=a[h];n&&b(p)?C(p)?e[h]=new Date(p.valueOf()):k(p)?e[h]=new RegExp(p):p.nodeName?e[h]=p.cloneNode(!0):D(p)?e[h]=p.clone():(b(e[h])||(e[h]=Ur(p)?[]:{}),l(e[h],[p],!0)):e[h]=p}}return c(e,r),e}function f(e){return l(e,Vr.call(arguments,1),!1)}function h(e){return l(e,Vr.call(arguments,1),!0)}function p(e){return parseInt(e,10)}function d(e,t){return f(Object.create(e),t)}function $(){}function v(e){return e}function m(e){return function(){return e}}function g(e){return A(e.toString)&&e.toString!==Ir}function y(e){return"undefined"==typeof e}function w(e){return"undefined"!=typeof e}function b(e){return null!==e&&"object"==typeof e}function x(e){return null!==e&&"object"==typeof e&&!Dr(e)}function S(e){return"string"==typeof e}function E(e){return"number"==typeof e}function C(e){return"[object Date]"===Ir.call(e)}function A(e){return"function"==typeof e}function k(e){return"[object RegExp]"===Ir.call(e)}function O(e){return e&&e.window===e}function M(e){return e&&e.$evalAsync&&e.$watch}function T(e){return"[object File]"===Ir.call(e)}function j(e){return"[object FormData]"===Ir.call(e)}function V(e){return"[object Blob]"===Ir.call(e)}function N(e){return"boolean"==typeof e}function P(e){return e&&A(e.then)}function I(e){return e&&E(e.length)&&Hr.test(Ir.call(e))}function D(e){return!(!e||!(e.nodeName||e.prop&&e.attr&&e.find))}function q(e){var t,n={},r=e.split(",");for(t=0;t<r.length;t++)n[r[t]]=!0;return n}function R(e){return Sr(e.nodeName||e[0]&&e[0].nodeName)}function F(e,t){var n=e.indexOf(t);return n>=0&&e.splice(n,1),n}function _(e,t){function n(e,t){var n,i=t.$$hashKey;if(Ur(e))for(var o=0,a=e.length;a>o;o++)t.push(r(e[o]));else if(x(e))for(n in e)t[n]=r(e[n]);else if(e&&"function"==typeof e.hasOwnProperty)for(n in e)e.hasOwnProperty(n)&&(t[n]=r(e[n]));else for(n in e)Er.call(e,n)&&(t[n]=r(e[n]));return c(t,i),t}function r(e){if(!b(e))return e;var t=i.indexOf(e);if(-1!==t)return a[t];if(O(e)||M(e))throw qr("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");var r,o=!1;return Ur(e)?(r=[],o=!0):I(e)?r=new e.constructor(e):C(e)?r=new Date(e.getTime()):k(e)?(r=new RegExp(e.source,e.toString().match(/[^\/]*$/)[0]),r.lastIndex=e.lastIndex):A(e.cloneNode)?r=e.cloneNode(!0):(r=Object.create(Dr(e)),o=!0),i.push(e),a.push(r),o?n(e,r):r}var i=[],a=[];if(t){if(I(t))throw qr("cpta","Can't copy! TypedArray destination cannot be mutated.");if(e===t)throw qr("cpi","Can't copy! Source and destination are identical.");return Ur(t)?t.length=0:o(t,function(e,n){"$$hashKey"!==n&&delete t[n]}),i.push(e),a.push(t),n(e,t)}return r(e)}function U(e,t){if(Ur(e)){t=t||[];for(var n=0,r=e.length;r>n;n++)t[n]=e[n]}else if(b(e)){t=t||{};for(var i in e)("$"!==i.charAt(0)||"$"!==i.charAt(1))&&(t[i]=e[i])}return t||e}function H(e,t){if(e===t)return!0;if(null===e||null===t)return!1;if(e!==e&&t!==t)return!0;var n,r,i,o=typeof e,a=typeof t;if(o==a&&"object"==o){if(!Ur(e)){if(C(e))return C(t)?H(e.getTime(),t.getTime()):!1;if(k(e))return k(t)?e.toString()==t.toString():!1;if(M(e)||M(t)||O(e)||O(t)||Ur(t)||C(t)||k(t))return!1;i=ve();for(r in e)if("$"!==r.charAt(0)&&!A(e[r])){if(!H(e[r],t[r]))return!1;i[r]=!0}for(r in t)if(!(r in i)&&"$"!==r.charAt(0)&&w(t[r])&&!A(t[r]))return!1;return!0}if(!Ur(t))return!1;if((n=e.length)==t.length){for(r=0;n>r;r++)if(!H(e[r],t[r]))return!1;return!0}}return!1}function B(e,t,n){return e.concat(Vr.call(t,n))}function L(e,t){return Vr.call(e,t||0)}function z(e,t){var n=arguments.length>2?L(arguments,2):[];return!A(t)||t instanceof RegExp?t:n.length?function(){return arguments.length?t.apply(e,B(n,arguments,0)):t.apply(e,n)}:function(){return arguments.length?t.apply(e,arguments):t.call(e)}}function W(e,r){var i=r;return"string"==typeof e&&"$"===e.charAt(0)&&"$"===e.charAt(1)?i=n:O(r)?i="$WINDOW":r&&t===r?i="$DOCUMENT":M(r)&&(i="$SCOPE"),i}function G(e,t){return"undefined"==typeof e?n:(E(t)||(t=t?2:null),JSON.stringify(e,W,t))}function Y(e){return S(e)?JSON.parse(e):e}function J(e,t){var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return isNaN(n)?t:n}function K(e,t){return e=new Date(e.getTime()),e.setMinutes(e.getMinutes()+t),e}function Z(e,t,n){n=n?-1:1;var r=J(t,e.getTimezoneOffset());return K(e,n*(r-e.getTimezoneOffset()))}function X(e){e=Mr(e).clone();try{e.empty()}catch(t){}var n=Mr("<div>").append(e).html();try{return e[0].nodeType===Xr?Sr(n):n.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(e,t){return"<"+Sr(t)})}catch(t){return Sr(n)}}function Q(e){try{return decodeURIComponent(e)}catch(t){}}function ee(e){var t={};return o((e||"").split("&"),function(e){var n,r,i;e&&(r=e=e.replace(/\+/g,"%20"),n=e.indexOf("="),-1!==n&&(r=e.substring(0,n),i=e.substring(n+1)),r=Q(r),w(r)&&(i=w(i)?Q(i):!0,Er.call(t,r)?Ur(t[r])?t[r].push(i):t[r]=[t[r],i]:t[r]=i))}),t}function te(e){var t=[];return o(e,function(e,n){Ur(e)?o(e,function(e){t.push(re(n,!0)+(e===!0?"":"="+re(e,!0)))}):t.push(re(n,!0)+(e===!0?"":"="+re(e,!0)))}),t.length?t.join("&"):""}function ne(e){return re(e,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function re(e,t){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,t?"%20":"+")}function ie(e,t){var n,r,i=Gr.length;for(r=0;i>r;++r)if(n=Gr[r]+t,S(n=e.getAttribute(n)))return n;return null}function oe(e,t){var n,r,i={};o(Gr,function(t){var i=t+"app";!n&&e.hasAttribute&&e.hasAttribute(i)&&(n=e,r=e.getAttribute(i))}),o(Gr,function(t){var i,o=t+"app";!n&&(i=e.querySelector("["+o.replace(":","\\:")+"]"))&&(n=i,r=i.getAttribute(o))}),n&&(i.strictDi=null!==ie(n,"strict-di"),t(n,r?[r]:[],i))}function ae(n,r,i){b(i)||(i={});var a={strictDi:!1};i=f(a,i);var s=function(){if(n=Mr(n),n.injector()){var e=n[0]===t?"document":X(n);throw qr("btstrpd","App Already Bootstrapped with this Element '{0}'",e.replace(/</,"&lt;").replace(/>/,"&gt;"))}r=r||[],r.unshift(["$provide",function(e){e.value("$rootElement",n)}]),i.debugInfoEnabled&&r.push(["$compileProvider",function(e){e.debugInfoEnabled(!0)}]),r.unshift("ng");var o=et(r,i.strictDi);return o.invoke(["$rootScope","$rootElement","$compile","$injector",function(e,t,n,r){e.$apply(function(){t.data("$injector",r),n(t)(e)})}]),o},u=/^NG_ENABLE_DEBUG_INFO!/,c=/^NG_DEFER_BOOTSTRAP!/;return e&&u.test(e.name)&&(i.debugInfoEnabled=!0,e.name=e.name.replace(u,"")),e&&!c.test(e.name)?s():(e.name=e.name.replace(c,""),Rr.resumeBootstrap=function(e){return o(e,function(e){r.push(e)}),s()},void(A(Rr.resumeDeferredBootstrap)&&Rr.resumeDeferredBootstrap()))}function se(){e.name="NG_ENABLE_DEBUG_INFO!"+e.name,e.location.reload()}function ue(e){var t=Rr.element(e).injector();if(!t)throw qr("test","no injector found for element argument to getTestability");return t.get("$$testability")}function ce(e,t){return t=t||"_",e.replace(Yr,function(e,n){return(n?t:"")+e.toLowerCase()})}function le(){var t;if(!Jr){var r=Wr();Tr=y(r)?e.jQuery:r?e[r]:n,Tr&&Tr.fn.on?(Mr=Tr,f(Tr.fn,{scope:mi.scope,isolateScope:mi.isolateScope,controller:mi.controller,injector:mi.injector,inheritedData:mi.inheritedData}),t=Tr.cleanData,Tr.cleanData=function(e){var n;if(_r)_r=!1;else for(var r,i=0;null!=(r=e[i]);i++)n=Tr._data(r,"events"),n&&n.$destroy&&Tr(r).triggerHandler("$destroy");t(e)}):Mr=Oe,Rr.element=Mr,Jr=!0}}function fe(e,t,n){if(!e)throw qr("areq","Argument '{0}' is {1}",t||"?",n||"required");return e}function he(e,t,n){return n&&Ur(e)&&(e=e[e.length-1]),fe(A(e),t,"not a function, got "+(e&&"object"==typeof e?e.constructor.name||"Object":typeof e)),e}function pe(e,t){if("hasOwnProperty"===e)throw qr("badname","hasOwnProperty is not a valid {0} name",t)}function de(e,t,n){if(!t)return e;for(var r,i=t.split("."),o=e,a=i.length,s=0;a>s;s++)r=i[s],e&&(e=(o=e)[r]);return!n&&A(e)?z(o,e):e}function $e(e){for(var t,n=e[0],r=e[e.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(t||e[i]!==n)&&(t||(t=Mr(Vr.call(e,0,i))),t.push(n));return t||e}function ve(){return Object.create(null)}function me(e){function t(e,t,n){return e[t]||(e[t]=n())}var n=r("$injector"),i=r("ng"),o=t(e,"angular",Object);return o.$$minErr=o.$$minErr||r,t(o,"module",function(){var e={};return function(r,o,a){var s=function(e,t){if("hasOwnProperty"===e)throw i("badname","hasOwnProperty is not a valid {0} name",t)};return s(r,"module"),o&&e.hasOwnProperty(r)&&(e[r]=null),t(e,r,function(){function e(e,t,n,r){return r||(r=i),function(){return r[n||"push"]([e,t,arguments]),l}}function t(e,t){return function(n,o){return o&&A(o)&&(o.$$moduleName=r),i.push([e,t,arguments]),l}}if(!o)throw n("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",r);var i=[],s=[],u=[],c=e("$injector","invoke","push",s),l={_invokeQueue:i,_configBlocks:s,_runBlocks:u,requires:o,name:r,provider:t("$provide","provider"),factory:t("$provide","factory"),service:t("$provide","service"),value:e("$provide","value"),constant:e("$provide","constant","unshift"),decorator:t("$provide","decorator"),animation:t("$animateProvider","register"),filter:t("$filterProvider","register"),controller:t("$controllerProvider","register"),directive:t("$compileProvider","directive"),config:c,run:function(e){return u.push(e),this}};return a&&c(a),l})}})}function ge(e){var t=[];return JSON.stringify(e,function(e,n){if(n=W(e,n),b(n)){if(t.indexOf(n)>=0)return"...";t.push(n)}return n})}function ye(e){return"function"==typeof e?e.toString().replace(/ \{[\s\S]*$/,""):y(e)?"undefined":"string"!=typeof e?ge(e):e}function we(t){f(t,{bootstrap:ae,copy:_,extend:f,merge:h,equals:H,element:Mr,forEach:o,injector:et,noop:$,bind:z,toJson:G,fromJson:Y,identity:v,isUndefined:y,isDefined:w,isString:S,isFunction:A,isObject:b,isNumber:E,isElement:D,isArray:Ur,version:ni,isDate:C,lowercase:Sr,uppercase:Cr,callbacks:{counter:0},getTestability:ue,$$minErr:r,$$csp:zr,reloadWithDebugInfo:se}),(jr=me(e))("ng",["ngLocale"],["$provide",function(e){e.provider({$$sanitizeUri:yn}),e.provider("$compile",lt).directive({a:go,input:Io,textarea:Io,form:So,script:ka,select:Ta,style:Va,option:ja,ngBind:Ro,ngBindHtml:_o,ngBindTemplate:Fo,ngClass:Ho,ngClassEven:Lo,ngClassOdd:Bo,ngCloak:zo,ngController:Wo,ngForm:Eo,ngHide:ba,ngIf:Jo,ngInclude:Ko,ngInit:Xo,ngNonBindable:ha,ngPluralize:va,ngRepeat:ma,ngShow:wa,ngStyle:xa,ngSwitch:Sa,ngSwitchWhen:Ea,ngSwitchDefault:Ca,ngOptions:$a,ngTransclude:Aa,ngModel:ca,ngList:Qo,ngChange:Uo,pattern:Pa,ngPattern:Pa,required:Na,ngRequired:Na,minlength:Da,ngMinlength:Da,maxlength:Ia,ngMaxlength:Ia,ngValue:qo,ngModelOptions:fa}).directive({ngInclude:Zo}).directive(yo).directive(Go),e.provider({$anchorScroll:tt,$animate:Vi,$animateCss:Ni,$$animateQueue:ji,$$AnimateRunner:Ti,$browser:st,$cacheFactory:ut,$controller:$t,$document:vt,$exceptionHandler:mt,$filter:Nn,$$forceReflow:Ri,$interpolate:jt,$interval:Vt,$http:kt,$httpParamSerializer:yt,$httpParamSerializerJQLike:wt,$httpBackend:Mt,$xhrFactory:Ot,$location:Wt,$log:Gt,$parse:pn,$rootScope:gn,$q:dn,$$q:$n,$sce:Sn,$sceDelegate:xn,$sniffer:En,$templateCache:ct,$templateRequest:Cn,$$testability:An,$timeout:kn,$window:Tn,$$rAF:mn,$$jqLite:Je,$$HashMap:bi,$$cookieReader:Vn})}])}function be(){return++ii}function xe(e){return e.replace(si,function(e,t,n,r){return r?n.toUpperCase():n}).replace(ui,"Moz$1")}function Se(e){return!hi.test(e)}function Ee(e){var t=e.nodeType;return t===Kr||!t||t===ei}function Ce(e){for(var t in ri[e.ng339])return!0;return!1}function Ae(e,t){var n,r,i,a,s=t.createDocumentFragment(),u=[];if(Se(e))u.push(t.createTextNode(e));else{for(n=n||s.appendChild(t.createElement("div")),r=(pi.exec(e)||["",""])[1].toLowerCase(),i=$i[r]||$i._default,n.innerHTML=i[1]+e.replace(di,"<$1></$2>")+i[2],a=i[0];a--;)n=n.lastChild;u=B(u,n.childNodes),n=s.firstChild,n.textContent=""}return s.textContent="",s.innerHTML="",o(u,function(e){s.appendChild(e)}),s}function ke(e,n){n=n||t;var r;return(r=fi.exec(e))?[n.createElement(r[1])]:(r=Ae(e,n))?r.childNodes:[]}function Oe(e){if(e instanceof Oe)return e;var t;if(S(e)&&(e=Br(e),t=!0),!(this instanceof Oe)){if(t&&"<"!=e.charAt(0))throw li("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new Oe(e)}t?Re(this,ke(e)):Re(this,e)}function Me(e){return e.cloneNode(!0)}function Te(e,t){if(t||Ve(e),e.querySelectorAll)for(var n=e.querySelectorAll("*"),r=0,i=n.length;i>r;r++)Ve(n[r])}function je(e,t,n,r){if(w(r))throw li("offargs","jqLite#off() does not support the `selector` argument");var i=Ne(e),a=i&&i.events,s=i&&i.handle;if(s)if(t){var u=function(t){var r=a[t];w(n)&&F(r||[],n),w(n)&&r&&r.length>0||(ai(e,t,s),delete a[t])};o(t.split(" "),function(e){u(e),ci[e]&&u(ci[e])})}else for(t in a)"$destroy"!==t&&ai(e,t,s),delete a[t]}function Ve(e,t){var r=e.ng339,i=r&&ri[r];if(i){if(t)return void delete i.data[t];i.handle&&(i.events.$destroy&&i.handle({},"$destroy"),je(e)),delete ri[r],e.ng339=n}}function Ne(e,t){var r=e.ng339,i=r&&ri[r];return t&&!i&&(e.ng339=r=be(),i=ri[r]={events:{},data:{},handle:n}),i}function Pe(e,t,n){if(Ee(e)){var r=w(n),i=!r&&t&&!b(t),o=!t,a=Ne(e,!i),s=a&&a.data;if(r)s[t]=n;else{if(o)return s;if(i)return s&&s[t];f(s,t)}}}function Ie(e,t){return e.getAttribute?(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+t+" ")>-1:!1}function De(e,t){t&&e.setAttribute&&o(t.split(" "),function(t){e.setAttribute("class",Br((" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+Br(t)+" "," ")))})}function qe(e,t){if(t&&e.setAttribute){var n=(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");o(t.split(" "),function(e){e=Br(e),-1===n.indexOf(" "+e+" ")&&(n+=e+" ")}),e.setAttribute("class",Br(n))}}function Re(e,t){if(t)if(t.nodeType)e[e.length++]=t;else{var n=t.length;if("number"==typeof n&&t.window!==t){if(n)for(var r=0;n>r;r++)e[e.length++]=t[r]}else e[e.length++]=t}}function Fe(e,t){return _e(e,"$"+(t||"ngController")+"Controller")}function _e(e,t,n){e.nodeType==ei&&(e=e.documentElement);for(var r=Ur(t)?t:[t];e;){for(var i=0,o=r.length;o>i;i++)if(w(n=Mr.data(e,r[i])))return n;e=e.parentNode||e.nodeType===ti&&e.host}}function Ue(e){for(Te(e,!0);e.firstChild;)e.removeChild(e.firstChild)}function He(e,t){t||Te(e);var n=e.parentNode;n&&n.removeChild(e)}function Be(t,n){n=n||e,"complete"===n.document.readyState?n.setTimeout(t):Mr(n).on("load",t)}function Le(e,t){var n=gi[t.toLowerCase()];return n&&yi[R(e)]&&n}function ze(e){return wi[e]}function We(e,t){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=t[r||n.type],o=i?i.length:0;if(o){if(y(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return n.immediatePropagationStopped===!0};var s=i.specialHandlerWrapper||Ge;o>1&&(i=U(i));for(var u=0;o>u;u++)n.isImmediatePropagationStopped()||s(e,n,i[u])}};return n.elem=e,n}function Ge(e,t,n){n.call(e,t)}function Ye(e,t,n){var r=t.relatedTarget;(!r||r!==e&&!vi.call(e,r))&&n.call(e,t)}function Je(){this.$get=function(){return f(Oe,{hasClass:function(e,t){return e.attr&&(e=e[0]),Ie(e,t)},addClass:function(e,t){return e.attr&&(e=e[0]),qe(e,t)},removeClass:function(e,t){return e.attr&&(e=e[0]),De(e,t)}})}}function Ke(e,t){var n=e&&e.$$hashKey;if(n)return"function"==typeof n&&(n=e.$$hashKey()),n;var r=typeof e;return n="function"==r||"object"==r&&null!==e?e.$$hashKey=r+":"+(t||u)():r+":"+e}function Ze(e,t){if(t){var n=0;this.nextUid=function(){return++n}}o(e,this.put,this)}function Xe(e){var t=e.toString().replace(Ci,""),n=t.match(xi);return n?"function("+(n[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function Qe(e,t,n){var r,i,a,s;if("function"==typeof e){if(!(r=e.$inject)){if(r=[],e.length){if(t)throw S(n)&&n||(n=e.name||Xe(e)),Ai("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);i=e.toString().replace(Ci,""),a=i.match(xi),o(a[1].split(Si),function(e){e.replace(Ei,function(e,t,n){r.push(n)})})}e.$inject=r}}else Ur(e)?(s=e.length-1,he(e[s],"fn"),r=e.slice(0,s)):he(e,"fn",!0);return r}function et(e,t){function r(e){return function(t,n){return b(t)?void o(t,s(e)):e(t,n)}}function i(e,t){if(pe(e,"service"),(A(t)||Ur(t))&&(t=E.instantiate(t)),!t.$get)throw Ai("pget","Provider '{0}' must define $get factory method.",e);return x[e+v]=t}function a(e,t){return function(){var n=k.invoke(t,this);if(y(n))throw Ai("undef","Provider '{0}' must return a value from $get factory method.",e);return n}}function u(e,t,n){return i(e,{$get:n!==!1?a(e,t):t})}function c(e,t){return u(e,["$injector",function(e){return e.instantiate(t)}])}function l(e,t){return u(e,m(t),!1)}function f(e,t){pe(e,"constant"),x[e]=t,C[e]=t}function h(e,t){var n=E.get(e+v),r=n.$get;n.$get=function(){var e=k.invoke(r,n);return k.invoke(t,null,{$delegate:e})}}function p(e){fe(y(e)||Ur(e),"modulesToLoad","not an array");var t,n=[];return o(e,function(e){function r(e){var t,n;for(t=0,n=e.length;n>t;t++){var r=e[t],i=E.get(r[0]);i[r[1]].apply(i,r[2])}}if(!w.get(e)){w.put(e,!0);try{S(e)?(t=jr(e),n=n.concat(p(t.requires)).concat(t._runBlocks),r(t._invokeQueue),r(t._configBlocks)):A(e)?n.push(E.invoke(e)):Ur(e)?n.push(E.invoke(e)):he(e,"module")}catch(i){throw Ur(e)&&(e=e[e.length-1]),i.message&&i.stack&&-1==i.stack.indexOf(i.message)&&(i=i.message+"\n"+i.stack),Ai("modulerr","Failed to instantiate module {0} due to:\n{1}",e,i.stack||i.message||i)}}}),n}function d(e,n){function r(t,r){if(e.hasOwnProperty(t)){if(e[t]===$)throw Ai("cdep","Circular dependency found: {0}",t+" <- "+g.join(" <- "));return e[t]}try{return g.unshift(t),e[t]=$,e[t]=n(t,r)}catch(i){throw e[t]===$&&delete e[t],i}finally{g.shift()}}function i(e,n,i,o){"string"==typeof i&&(o=i,i=null);var a,s,u,c=[],l=et.$$annotate(e,t,o);for(s=0,a=l.length;a>s;s++){if(u=l[s],"string"!=typeof u)throw Ai("itkn","Incorrect injection token! Expected service name as string, got {0}",u);c.push(i&&i.hasOwnProperty(u)?i[u]:r(u,o))}return Ur(e)&&(e=e[a]),e.apply(n,c)}function o(e,t,n){var r=Object.create((Ur(e)?e[e.length-1]:e).prototype||null),o=i(e,r,t,n);return b(o)||A(o)?o:r}return{invoke:i,instantiate:o,get:r,annotate:et.$$annotate,has:function(t){return x.hasOwnProperty(t+v)||e.hasOwnProperty(t)}}}t=t===!0;var $={},v="Provider",g=[],w=new Ze([],!0),x={$provide:{provider:r(i),factory:r(u),service:r(c),value:r(l),constant:r(f),decorator:h}},E=x.$injector=d(x,function(e,t){throw Rr.isString(t)&&g.push(t),Ai("unpr","Unknown provider: {0}",g.join(" <- "))}),C={},k=C.$injector=d(C,function(e,t){var r=E.get(e+v,t);return k.invoke(r.$get,r,n,e)});return o(p(e),function(e){e&&k.invoke(e)}),k}function tt(){var e=!0;this.disableAutoScrolling=function(){e=!1},this.$get=["$window","$location","$rootScope",function(t,n,r){function i(e){var t=null;return Array.prototype.some.call(e,function(e){return"a"===R(e)?(t=e,!0):void 0}),t}function o(){var e=s.yOffset;if(A(e))e=e();else if(D(e)){var n=e[0],r=t.getComputedStyle(n);e="fixed"!==r.position?0:n.getBoundingClientRect().bottom}else E(e)||(e=0);return e}function a(e){if(e){e.scrollIntoView();var n=o();if(n){var r=e.getBoundingClientRect().top;t.scrollBy(0,r-n)}}else t.scrollTo(0,0)}function s(e){e=S(e)?e:n.hash();var t;e?(t=u.getElementById(e))?a(t):(t=i(u.getElementsByName(e)))?a(t):"top"===e&&a(null):a(null)}var u=t.document;return e&&r.$watch(function(){return n.hash()},function(e,t){(e!==t||""!==e)&&Be(function(){r.$evalAsync(s)})}),s}]}function nt(e,t){return e||t?e?t?(Ur(e)&&(e=e.join(" ")),Ur(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function rt(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.nodeType===Oi)return n}}function it(e){S(e)&&(e=e.split(" "));var t=ve();return o(e,function(e){e.length&&(t[e]=!0)}),t}function ot(e){return b(e)?e:{}}function at(e,t,n,r){function i(e){try{e.apply(null,L(arguments,1))}finally{if(g--,0===g)for(;w.length;)try{w.pop()()}catch(t){n.error(t)}}}function a(e){var t=e.indexOf("#");return-1===t?"":e.substr(t)}function s(){C=null,c(),l()}function u(){try{return p.state}catch(e){}}function c(){b=u(),b=y(b)?null:b,H(b,O)&&(b=O),O=b}function l(){(S!==f.url()||x!==b)&&(S=f.url(),x=b,o(A,function(e){e(f.url(),b)}))}var f=this,h=(t[0],e.location),p=e.history,d=e.setTimeout,v=e.clearTimeout,m={};f.isMock=!1;var g=0,w=[];f.$$completeOutstandingRequest=i,f.$$incOutstandingRequestCount=function(){g++},f.notifyWhenNoOutstandingRequests=function(e){0===g?e():w.push(e)};var b,x,S=h.href,E=t.find("base"),C=null;c(),x=b,f.url=function(t,n,i){if(y(i)&&(i=null),h!==e.location&&(h=e.location),p!==e.history&&(p=e.history),t){var o=x===i;if(S===t&&(!r.history||o))return f;var s=S&&qt(S)===qt(t);return S=t,x=i,!r.history||s&&o?((!s||C)&&(C=t),n?h.replace(t):s?h.hash=a(t):h.href=t,h.href!==t&&(C=t)):(p[n?"replaceState":"pushState"](i,"",t),c(),x=b),f}return C||h.href.replace(/%27/g,"'")},f.state=function(){return b};var A=[],k=!1,O=null;f.onUrlChange=function(t){return k||(r.history&&Mr(e).on("popstate",s),Mr(e).on("hashchange",s),k=!0),A.push(t),t},f.$$applicationDestroyed=function(){Mr(e).off("hashchange popstate",s)},f.$$checkUrlChange=l,f.baseHref=function(){var e=E.attr("href");return e?e.replace(/^(https?\:)?\/\/[^\/]*/,""):""},f.defer=function(e,t){var n;return g++,n=d(function(){delete m[n],i(e)},t||0),m[n]=!0,n},f.defer.cancel=function(e){return m[e]?(delete m[e],v(e),i($),!0):!1}}function st(){this.$get=["$window","$log","$sniffer","$document",function(e,t,n,r){return new at(e,r,t,n)}]}function ut(){this.$get=function(){function e(e,n){function i(e){e!=h&&(p?p==e&&(p=e.n):p=e,o(e.n,e.p),o(e,h),h=e,h.n=null)}function o(e,t){e!=t&&(e&&(e.p=t),t&&(t.n=e))}if(e in t)throw r("$cacheFactory")("iid","CacheId '{0}' is already taken!",e);var a=0,s=f({},n,{id:e}),u=ve(),c=n&&n.capacity||Number.MAX_VALUE,l=ve(),h=null,p=null;return t[e]={put:function(e,t){if(!y(t)){if(c<Number.MAX_VALUE){var n=l[e]||(l[e]={key:e});i(n)}return e in u||a++,u[e]=t,a>c&&this.remove(p.key),t}},get:function(e){if(c<Number.MAX_VALUE){var t=l[e];if(!t)return;i(t)}return u[e]},remove:function(e){if(c<Number.MAX_VALUE){var t=l[e];if(!t)return;t==h&&(h=t.p),t==p&&(p=t.n),o(t.n,t.p),delete l[e]}e in u&&(delete u[e],a--)},removeAll:function(){u=ve(),a=0,l=ve(),h=p=null},destroy:function(){u=null,s=null,l=null,delete t[e]},info:function(){return f({},s,{size:a})}}}var t={};return e.info=function(){var e={};return o(t,function(t,n){e[n]=t.info()}),e},e.get=function(e){return t[e]},e}}function ct(){this.$get=["$cacheFactory",function(e){return e("templates")}]}function lt(e,r){function i(e,t,n){var r=/^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/,i={};return o(e,function(e,o){var a=e.match(r);if(!a)throw Pi("iscp","Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}",t,o,e,n?"controller bindings definition":"isolate scope definition");i[o]={mode:a[1][0],collection:"*"===a[2],optional:"?"===a[3],attrName:a[4]||o}}),i}function a(e,t){var n={isolateScope:null,bindToController:null};if(b(e.scope)&&(e.bindToController===!0?(n.bindToController=i(e.scope,t,!0),n.isolateScope={}):n.isolateScope=i(e.scope,t,!1)),b(e.bindToController)&&(n.bindToController=i(e.bindToController,t,!0)),b(n.bindToController)){var r=e.controller,o=e.controllerAs;if(!r)throw Pi("noctrl","Cannot bind to controller without directive '{0}'s controller.",t);if(!dt(r,o))throw Pi("noident","Cannot bind to controller without identifier for directive '{0}'.",t)}return n}function u(e){var t=e.charAt(0);if(!t||t!==Sr(t))throw Pi("baddir","Directive name '{0}' is invalid. The first character must be a lowercase letter",e);if(e!==e.trim())throw Pi("baddir","Directive name '{0}' is invalid. The name should not contain leading or trailing whitespaces",e)}var c={},l="Directive",h=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,p=/(([\w\-]+)(?:\:([^;]+))?;?)/,g=q("ngSrc,ngSrcset,src,srcset"),x=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,E=/^(on[a-z]+|formaction)$/;this.directive=function k(t,n){return pe(t,"directive"),S(t)?(u(t),fe(n,"directiveFactory"),c.hasOwnProperty(t)||(c[t]=[],e.factory(t+l,["$injector","$exceptionHandler",function(e,n){var r=[];return o(c[t],function(i,o){try{var s=e.invoke(i);A(s)?s={compile:m(s)}:!s.compile&&s.link&&(s.compile=m(s.link)),s.priority=s.priority||0,s.index=o,s.name=s.name||t,s.require=s.require||s.controller&&s.name,s.restrict=s.restrict||"EA";var u=s.$$bindings=a(s,s.name);b(u.isolateScope)&&(s.$$isolateBindings=u.isolateScope),s.$$moduleName=i.$$moduleName,r.push(s)}catch(c){n(c)}}),r}])),c[t].push(n)):o(t,s(k)),this},this.aHrefSanitizationWhitelist=function(e){return w(e)?(r.aHrefSanitizationWhitelist(e),this):r.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(e){return w(e)?(r.imgSrcSanitizationWhitelist(e),this):r.imgSrcSanitizationWhitelist()};var C=!0;this.debugInfoEnabled=function(e){return w(e)?(C=e,this):C},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$document","$sce","$animate","$$sanitizeUri",function(e,r,i,a,s,u,m,w,k,O,T){function j(e,t){try{e.addClass(t)}catch(n){}}function V(e,t,n,r,i){e instanceof Mr||(e=Mr(e)),o(e,function(t,n){t.nodeType==Xr&&t.nodeValue.match(/\S+/)&&(e[n]=Mr(t).wrap("<span></span>").parent()[0])});var a=P(e,t,e,n,r,i);V.$$addScopeClass(e);var s=null;return function(t,n,r){fe(t,"scope"),i&&i.needsNewScope&&(t=t.$parent.$new()),r=r||{};var o=r.parentBoundTranscludeFn,u=r.transcludeControllers,c=r.futureParentElement;o&&o.$$boundTransclude&&(o=o.$$boundTransclude),s||(s=N(c));var l;if(l="html"!==s?Mr(Q(s,Mr("<div>").append(e).html())):n?mi.clone.call(e):e,u)for(var f in u)l.data("$"+f+"Controller",u[f].instance);return V.$$addScopeInfo(l,t),n&&n(l,t),a&&a(t,l,l,o),l}}function N(e){var t=e&&e[0];return t&&"foreignobject"!==R(t)&&t.toString().match(/SVG/)?"svg":"html"}function P(e,t,r,i,o,a){function s(e,r,i,o){var a,s,u,c,l,f,h,p,v;if(d){var m=r.length;for(v=new Array(m),l=0;l<$.length;l+=3)h=$[l],v[h]=r[h]}else v=r;for(l=0,f=$.length;f>l;)u=v[$[l++]],a=$[l++],s=$[l++],a?(a.scope?(c=e.$new(),V.$$addScopeInfo(Mr(u),c)):c=e,p=a.transcludeOnThisElement?I(e,a.transclude,o):!a.templateOnThisElement&&o?o:!o&&t?I(e,t):null,a(s,c,u,i,p)):s&&s(e,u.childNodes,n,o)}for(var u,c,l,f,h,p,d,$=[],v=0;v<e.length;v++)u=new ae,c=D(e[v],[],u,0===v?i:n,o),l=c.length?U(c,e[v],u,t,r,null,[],[],a):null,l&&l.scope&&V.$$addScopeClass(u.$$element),h=l&&l.terminal||!(f=e[v].childNodes)||!f.length?null:P(f,l?(l.transcludeOnThisElement||!l.templateOnThisElement)&&l.transclude:t),(l||h)&&($.push(v,l,h),p=!0,d=d||l),a=null;return p?s:null}function I(e,t,n){var r=function(r,i,o,a,s){return r||(r=e.$new(!1,s),r.$$transcluded=!0),t(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})};return r}function D(e,t,n,r,i){var o,a,s=e.nodeType,u=n.$attr;switch(s){case Kr:z(t,ft(R(e)),"E",r,i);for(var c,l,f,d,$,v,m=e.attributes,g=0,y=m&&m.length;y>g;g++){var w=!1,x=!1;c=m[g],l=c.name,$=Br(c.value),d=ft(l),(v=he.test(d))&&(l=l.replace(Ii,"").substr(8).replace(/_(.)/g,function(e,t){return t.toUpperCase()}));var E=d.match(pe);E&&W(E[1])&&(w=l,x=l.substr(0,l.length-5)+"end",l=l.substr(0,l.length-6)),f=ft(l.toLowerCase()),u[f]=l,(v||!n.hasOwnProperty(f))&&(n[f]=$,Le(e,f)&&(n[f]=!0)),te(e,t,$,f,v),z(t,f,"A",r,i,w,x)}if(a=e.className,b(a)&&(a=a.animVal),S(a)&&""!==a)for(;o=p.exec(a);)f=ft(o[2]),z(t,f,"C",r,i)&&(n[f]=Br(o[3])),a=a.substr(o.index+o[0].length);break;case Xr:if(11===Or)for(;e.parentNode&&e.nextSibling&&e.nextSibling.nodeType===Xr;)e.nodeValue=e.nodeValue+e.nextSibling.nodeValue,e.parentNode.removeChild(e.nextSibling);Z(t,e.nodeValue);break;case Qr:try{o=h.exec(e.nodeValue),o&&(f=ft(o[1]),z(t,f,"M",r,i)&&(n[f]=Br(o[2])))}catch(C){}}return t.sort(J),t}function q(e,t,n){var r=[],i=0;if(t&&e.hasAttribute&&e.hasAttribute(t)){do{if(!e)throw Pi("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",t,n);e.nodeType==Kr&&(e.hasAttribute(t)&&i++,e.hasAttribute(n)&&i--),r.push(e),e=e.nextSibling}while(i>0)}else r.push(e);return Mr(r)}function _(e,t,n){return function(r,i,o,a,s){return i=q(i[0],t,n),e(r,i,o,a,s)}}function U(e,r,o,a,s,c,l,f,h){function p(e,t,n,r){e&&(n&&(e=_(e,n,r)),e.require=m.require,e.directiveName=g,(T===m||m.$$isolateScope)&&(e=re(e,{isolateScope:!0})),l.push(e)),t&&(n&&(t=_(t,n,r)),t.require=m.require,t.directiveName=g,(T===m||m.$$isolateScope)&&(t=re(t,{isolateScope:!0})),f.push(t))}function d(e,t,n,r){var i;if(S(t)){var o=t.match(x),a=t.substring(o[0].length),s=o[1]||o[3],u="?"===o[2];if("^^"===s?n=n.parent():(i=r&&r[a],i=i&&i.instance),!i){var c="$"+a+"Controller";i=s?n.inheritedData(c):n.data(c)}if(!i&&!u)throw Pi("ctreq","Controller '{0}', required by directive '{1}', can't be found!",a,e)}else if(Ur(t)){i=[];for(var l=0,f=t.length;f>l;l++)i[l]=d(e,t[l],n,r)}return i||null}function $(e,t,n,r,i,o){var a=ve();for(var s in r){var c=r[s],l={$scope:c===T||c.$$isolateScope?i:o,$element:e,$attrs:t,$transclude:n},f=c.controller;"@"==f&&(f=t[c.name]);var h=u(f,l,!0,c.controllerAs);a[c.name]=h,R||e.data("$"+c.name+"Controller",h.instance)}return a}function v(e,t,i,a,s){function u(e,t,r){var i;return M(e)||(r=t,t=e,e=n),R&&(i=v),r||(r=R?g.parent():g),s(e,t,i,r,N)}var c,h,p,v,m,g,y,w,b;r===i?(y=o,g=o.$$element):(g=Mr(i),y=new ae(g,o)),p=t,T?h=t.$new(!0):k&&(p=t.$parent),s&&(m=u,m.$$boundTransclude=s),O&&(v=$(g,y,m,O,h,t)),T&&(V.$$addScopeInfo(g,h,!0,!(j&&(j===T||j===T.$$originalDirective))),V.$$addScopeClass(g,!0),h.$$isolateBindings=T.$$isolateBindings,w=oe(t,y,h,h.$$isolateBindings,T),w&&h.$on("$destroy",w));for(var x in v){var S=O[x],E=v[x],C=S.$$bindings.bindToController;E.identifier&&C&&(b=oe(p,y,E.instance,C,S));var A=E();A!==E.instance&&(E.instance=A,g.data("$"+S.name+"Controller",A),b&&b(),b=oe(p,y,E.instance,C,S))}for(z=0,W=l.length;W>z;z++)c=l[z],ie(c,c.isolateScope?h:t,g,y,c.require&&d(c.directiveName,c.require,g,v),m);var N=t;for(T&&(T.template||null===T.templateUrl)&&(N=h),e&&e(N,i.childNodes,n,s),z=f.length-1;z>=0;z--)c=f[z],ie(c,c.isolateScope?h:t,g,y,c.require&&d(c.directiveName,c.require,g,v),m)}h=h||{};for(var m,g,y,w,E,C=-Number.MAX_VALUE,k=h.newScopeDirective,O=h.controllerDirectives,T=h.newIsolateScopeDirective,j=h.templateDirective,N=h.nonTlbTranscludeDirective,P=!1,I=!1,R=h.hasElementTranscludeDirective,F=o.$$element=Mr(r),U=c,H=a,z=0,W=e.length;W>z;z++){m=e[z];var J=m.$$start,Z=m.$$end;if(J&&(F=q(r,J,Z)),y=n,C>m.priority)break;if((E=m.scope)&&(m.templateUrl||(b(E)?(K("new/isolated scope",T||k,m,F),T=m):K("new/isolated scope",T,m,F)),
k=k||m),g=m.name,!m.templateUrl&&m.controller&&(E=m.controller,O=O||ve(),K("'"+g+"' controller",O[g],m,F),O[g]=m),(E=m.transclude)&&(P=!0,m.$$tlb||(K("transclusion",N,m,F),N=m),"element"==E?(R=!0,C=m.priority,y=F,F=o.$$element=Mr(t.createComment(" "+g+": "+o[g]+" ")),r=F[0],ne(s,L(y),r),H=V(y,a,C,U&&U.name,{nonTlbTranscludeDirective:N})):(y=Mr(Me(r)).contents(),F.empty(),H=V(y,a,n,n,{needsNewScope:m.$$isolateScope||m.$$newScope}))),m.template)if(I=!0,K("template",j,m,F),j=m,E=A(m.template)?m.template(F,o):m.template,E=le(E),m.replace){if(U=m,y=Se(E)?[]:pt(Q(m.templateNamespace,Br(E))),r=y[0],1!=y.length||r.nodeType!==Kr)throw Pi("tplrt","Template for directive '{0}' must have exactly one root element. {1}",g,"");ne(s,F,r);var ee={$attr:{}},te=D(r,[],ee),se=e.splice(z+1,e.length-(z+1));(T||k)&&B(te,T,k),e=e.concat(te).concat(se),G(o,ee),W=e.length}else F.html(E);if(m.templateUrl)I=!0,K("template",j,m,F),j=m,m.replace&&(U=m),v=Y(e.splice(z,e.length-z),F,o,s,P&&H,l,f,{controllerDirectives:O,newScopeDirective:k!==m&&k,newIsolateScopeDirective:T,templateDirective:j,nonTlbTranscludeDirective:N}),W=e.length;else if(m.compile)try{w=m.compile(F,o,H),A(w)?p(null,w,J,Z):w&&p(w.pre,w.post,J,Z)}catch(ue){i(ue,X(F))}m.terminal&&(v.terminal=!0,C=Math.max(C,m.priority))}return v.scope=k&&k.scope===!0,v.transcludeOnThisElement=P,v.templateOnThisElement=I,v.transclude=H,h.hasElementTranscludeDirective=R,v}function B(e,t,n){for(var r=0,i=e.length;i>r;r++)e[r]=d(e[r],{$$isolateScope:t,$$newScope:n})}function z(t,n,r,o,a,s,u){if(n===a)return null;var f=null;if(c.hasOwnProperty(n))for(var h,p=e.get(n+l),$=0,v=p.length;v>$;$++)try{h=p[$],(y(o)||o>h.priority)&&-1!=h.restrict.indexOf(r)&&(s&&(h=d(h,{$$start:s,$$end:u})),t.push(h),f=h)}catch(m){i(m)}return f}function W(t){if(c.hasOwnProperty(t))for(var n,r=e.get(t+l),i=0,o=r.length;o>i;i++)if(n=r[i],n.multiElement)return!0;return!1}function G(e,t){var n=t.$attr,r=e.$attr,i=e.$$element;o(e,function(r,i){"$"!=i.charAt(0)&&(t[i]&&t[i]!==r&&(r+=("style"===i?";":" ")+t[i]),e.$set(i,r,!0,n[i]))}),o(t,function(t,o){"class"==o?(j(i,t),e["class"]=(e["class"]?e["class"]+" ":"")+t):"style"==o?(i.attr("style",i.attr("style")+";"+t),e.style=(e.style?e.style+";":"")+t):"$"==o.charAt(0)||e.hasOwnProperty(o)||(e[o]=t,r[o]=n[o])})}function Y(e,t,n,r,i,s,u,c){var l,f,h=[],p=t[0],$=e.shift(),v=d($,{templateUrl:null,transclude:null,replace:null,$$originalDirective:$}),m=A($.templateUrl)?$.templateUrl(t,n):$.templateUrl,g=$.templateNamespace;return t.empty(),a(m).then(function(a){var d,y,w,x;if(a=le(a),$.replace){if(w=Se(a)?[]:pt(Q(g,Br(a))),d=w[0],1!=w.length||d.nodeType!==Kr)throw Pi("tplrt","Template for directive '{0}' must have exactly one root element. {1}",$.name,m);y={$attr:{}},ne(r,t,d);var S=D(d,[],y);b($.scope)&&B(S,!0),e=S.concat(e),G(n,y)}else d=p,t.html(a);for(e.unshift(v),l=U(e,d,n,i,t,$,s,u,c),o(r,function(e,n){e==d&&(r[n]=t[0])}),f=P(t[0].childNodes,i);h.length;){var E=h.shift(),C=h.shift(),A=h.shift(),k=h.shift(),O=t[0];if(!E.$$destroyed){if(C!==p){var M=C.className;c.hasElementTranscludeDirective&&$.replace||(O=Me(d)),ne(A,Mr(C),O),j(Mr(O),M)}x=l.transcludeOnThisElement?I(E,l.transclude,k):k,l(f,E,O,r,x)}}h=null}),function(e,t,n,r,i){var o=i;t.$$destroyed||(h?h.push(t,n,r,o):(l.transcludeOnThisElement&&(o=I(t,l.transclude,i)),l(f,t,n,r,o)))}}function J(e,t){var n=t.priority-e.priority;return 0!==n?n:e.name!==t.name?e.name<t.name?-1:1:e.index-t.index}function K(e,t,n,r){function i(e){return e?" (module: "+e+")":""}if(t)throw Pi("multidir","Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}",t.name,i(t.$$moduleName),n.name,i(n.$$moduleName),e,X(r))}function Z(e,t){var n=r(t,!0);n&&e.push({priority:0,compile:function(e){var t=e.parent(),r=!!t.length;return r&&V.$$addBindingClass(t),function(e,t){var i=t.parent();r||V.$$addBindingClass(i),V.$$addBindingInfo(i,n.expressions),e.$watch(n,function(e){t[0].nodeValue=e})}}})}function Q(e,n){switch(e=Sr(e||"html")){case"svg":case"math":var r=t.createElement("div");return r.innerHTML="<"+e+">"+n+"</"+e+">",r.childNodes[0].childNodes;default:return n}}function ee(e,t){if("srcdoc"==t)return k.HTML;var n=R(e);return"xlinkHref"==t||"form"==n&&"action"==t||"img"!=n&&("src"==t||"ngSrc"==t)?k.RESOURCE_URL:void 0}function te(e,t,n,i,o){var a=ee(e,i);o=g[i]||o;var s=r(n,!0,a,o);if(s){if("multiple"===i&&"select"===R(e))throw Pi("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",X(e));t.push({priority:100,compile:function(){return{pre:function(e,t,u){var c=u.$$observers||(u.$$observers=ve());if(E.test(i))throw Pi("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");var l=u[i];l!==n&&(s=l&&r(l,!0,a,o),n=l),s&&(u[i]=s(e),(c[i]||(c[i]=[])).$$inter=!0,(u.$$observers&&u.$$observers[i].$$scope||e).$watch(s,function(e,t){"class"===i&&e!=t?u.$updateClass(e,t):u.$set(i,e)}))}}}})}}function ne(e,n,r){var i,o,a=n[0],s=n.length,u=a.parentNode;if(e)for(i=0,o=e.length;o>i;i++)if(e[i]==a){e[i++]=r;for(var c=i,l=c+s-1,f=e.length;f>c;c++,l++)f>l?e[c]=e[l]:delete e[c];e.length-=s-1,e.context===a&&(e.context=r);break}u&&u.replaceChild(r,a);var h=t.createDocumentFragment();h.appendChild(a),Mr.hasData(a)&&(Mr.data(r,Mr.data(a)),Tr?(_r=!0,Tr.cleanData([a])):delete Mr.cache[a[Mr.expando]]);for(var p=1,d=n.length;d>p;p++){var $=n[p];Mr($).remove(),h.appendChild($),delete n[p]}n[0]=r,n.length=1}function re(e,t){return f(function(){return e.apply(null,arguments)},e,t)}function ie(e,t,n,r,o,a){try{e(t,n,r,o,a)}catch(s){i(s,X(n))}}function oe(e,t,n,i,a){var u=[];return o(i,function(i,o){var c,l,f,h,p=i.attrName,d=i.optional,v=i.mode;switch(v){case"@":d||Er.call(t,p)||(n[o]=t[p]=void 0),t.$observe(p,function(e){S(e)&&(n[o]=e)}),t.$$observers[p].$$scope=e,S(t[p])&&(n[o]=r(t[p])(e));break;case"=":if(!Er.call(t,p)){if(d)break;t[p]=void 0}if(d&&!t[p])break;l=s(t[p]),h=l.literal?H:function(e,t){return e===t||e!==e&&t!==t},f=l.assign||function(){throw c=n[o]=l(e),Pi("nonassign","Expression '{0}' used with directive '{1}' is non-assignable!",t[p],a.name)},c=n[o]=l(e);var m=function(t){return h(t,n[o])||(h(t,c)?f(e,t=n[o]):n[o]=t),c=t};m.$stateful=!0;var g;g=i.collection?e.$watchCollection(t[p],m):e.$watch(s(t[p],m),null,l.literal),u.push(g);break;case"&":if(l=t.hasOwnProperty(p)?s(t[p]):$,l===$&&d)break;n[o]=function(t){return l(e,t)}}}),u.length&&function(){for(var e=0,t=u.length;t>e;++e)u[e]()}}var ae=function(e,t){if(t){var n,r,i,o=Object.keys(t);for(n=0,r=o.length;r>n;n++)i=o[n],this[i]=t[i]}else this.$attr={};this.$$element=e};ae.prototype={$normalize:ft,$addClass:function(e){e&&e.length>0&&O.addClass(this.$$element,e)},$removeClass:function(e){e&&e.length>0&&O.removeClass(this.$$element,e)},$updateClass:function(e,t){var n=ht(e,t);n&&n.length&&O.addClass(this.$$element,n);var r=ht(t,e);r&&r.length&&O.removeClass(this.$$element,r)},$set:function(e,t,n,r){var a,s=this.$$element[0],u=Le(s,e),c=ze(e),l=e;if(u?(this.$$element.prop(e,t),r=u):c&&(this[c]=t,l=c),this[e]=t,r?this.$attr[e]=r:(r=this.$attr[e],r||(this.$attr[e]=r=ce(e,"-"))),a=R(this.$$element),"a"===a&&"href"===e||"img"===a&&"src"===e)this[e]=t=T(t,"src"===e);else if("img"===a&&"srcset"===e){for(var f="",h=Br(t),p=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,d=/\s/.test(h)?p:/(,)/,$=h.split(d),v=Math.floor($.length/2),m=0;v>m;m++){var g=2*m;f+=T(Br($[g]),!0),f+=" "+Br($[g+1])}var w=Br($[2*m]).split(/\s/);f+=T(Br(w[0]),!0),2===w.length&&(f+=" "+Br(w[1])),this[e]=t=f}n!==!1&&(null===t||y(t)?this.$$element.removeAttr(r):this.$$element.attr(r,t));var b=this.$$observers;b&&o(b[l],function(e){try{e(t)}catch(n){i(n)}})},$observe:function(e,t){var n=this,r=n.$$observers||(n.$$observers=ve()),i=r[e]||(r[e]=[]);return i.push(t),m.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(e)||y(n[e])||t(n[e])}),function(){F(i,t)}}};var se=r.startSymbol(),ue=r.endSymbol(),le="{{"==se||"}}"==ue?v:function(e){return e.replace(/\{\{/g,se).replace(/}}/g,ue)},he=/^ngAttr[A-Z]/,pe=/^(.+)Start$/;return V.$$addBindingInfo=C?function(e,t){var n=e.data("$binding")||[];Ur(t)?n=n.concat(t):n.push(t),e.data("$binding",n)}:$,V.$$addBindingClass=C?function(e){j(e,"ng-binding")}:$,V.$$addScopeInfo=C?function(e,t,n,r){var i=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";e.data(i,t)}:$,V.$$addScopeClass=C?function(e,t){j(e,t?"ng-isolate-scope":"ng-scope")}:$,V}]}function ft(e){return xe(e.replace(Ii,""))}function ht(e,t){var n="",r=e.split(/\s+/),i=t.split(/\s+/);e:for(var o=0;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a==i[s])continue e;n+=(n.length>0?" ":"")+a}return n}function pt(e){e=Mr(e);var t=e.length;if(1>=t)return e;for(;t--;){var n=e[t];n.nodeType===Qr&&Nr.call(e,t,1)}return e}function dt(e,t){if(t&&S(t))return t;if(S(e)){var n=qi.exec(e);if(n)return n[3]}}function $t(){var e={},t=!1;this.register=function(t,n){pe(t,"controller"),b(t)?f(e,t):e[t]=n},this.allowGlobals=function(){t=!0},this.$get=["$injector","$window",function(i,o){function a(e,t,n,i){if(!e||!b(e.$scope))throw r("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",i,t);e.$scope[t]=n}return function(r,s,u,c){var l,h,p,d;if(u=u===!0,c&&S(c)&&(d=c),S(r)){if(h=r.match(qi),!h)throw Di("ctrlfmt","Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.",r);p=h[1],d=d||h[3],r=e.hasOwnProperty(p)?e[p]:de(s.$scope,p,!0)||(t?de(o,p,!0):n),he(r,p,!0)}if(u){var $=(Ur(r)?r[r.length-1]:r).prototype;l=Object.create($||null),d&&a(s,d,l,p||r.name);var v;return v=f(function(){var e=i.invoke(r,l,s,p);return e!==l&&(b(e)||A(e))&&(l=e,d&&a(s,d,l,p||r.name)),l},{instance:l,identifier:d})}return l=i.instantiate(r,s,p),d&&a(s,d,l,p||r.name),l}}]}function vt(){this.$get=["$window",function(e){return Mr(e.document)}]}function mt(){this.$get=["$log",function(e){return function(t,n){e.error.apply(e,arguments)}}]}function gt(e){return b(e)?C(e)?e.toISOString():G(e):e}function yt(){this.$get=function(){return function(e){if(!e)return"";var t=[];return a(e,function(e,n){null===e||y(e)||(Ur(e)?o(e,function(e,r){t.push(re(n)+"="+re(gt(e)))}):t.push(re(n)+"="+re(gt(e))))}),t.join("&")}}}function wt(){this.$get=function(){return function(e){function t(e,r,i){null===e||y(e)||(Ur(e)?o(e,function(e,n){t(e,r+"["+(b(e)?n:"")+"]")}):b(e)&&!C(e)?a(e,function(e,n){t(e,r+(i?"":"[")+n+(i?"":"]"))}):n.push(re(r)+"="+re(gt(e))))}if(!e)return"";var n=[];return t(e,"",!0),n.join("&")}}}function bt(e,t){if(S(e)){var n=e.replace(Bi,"").trim();if(n){var r=t("Content-Type");(r&&0===r.indexOf(Fi)||xt(n))&&(e=Y(n))}}return e}function xt(e){var t=e.match(Ui);return t&&Hi[t[0]].test(e)}function St(e){function t(e,t){e&&(r[e]=r[e]?r[e]+", "+t:t)}var n,r=ve();return S(e)?o(e.split("\n"),function(e){n=e.indexOf(":"),t(Sr(Br(e.substr(0,n))),Br(e.substr(n+1)))}):b(e)&&o(e,function(e,n){t(Sr(n),Br(e))}),r}function Et(e){var t;return function(n){if(t||(t=St(e)),n){var r=t[Sr(n)];return void 0===r&&(r=null),r}return t}}function Ct(e,t,n,r){return A(r)?r(e,t,n):(o(r,function(r){e=r(e,t,n)}),e)}function At(e){return e>=200&&300>e}function kt(){var e=this.defaults={transformResponse:[bt],transformRequest:[function(e){return!b(e)||T(e)||V(e)||j(e)?e:G(e)}],headers:{common:{Accept:"application/json, text/plain, */*"},post:U(_i),put:U(_i),patch:U(_i)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer"},t=!1;this.useApplyAsync=function(e){return w(e)?(t=!!e,this):t};var i=!0;this.useLegacyPromiseExtensions=function(e){return w(e)?(i=!!e,this):i};var a=this.interceptors=[];this.$get=["$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector",function(s,u,c,l,h,p){function d(t){function a(e){var t=f({},e);return t.data=Ct(e.data,e.headers,e.status,c.transformResponse),At(e.status)?t:h.reject(t)}function s(e,t){var n,r={};return o(e,function(e,i){A(e)?(n=e(t),null!=n&&(r[i]=n)):r[i]=e}),r}function u(t){var n,r,i,o=e.headers,a=f({},t.headers);o=f({},o.common,o[Sr(t.method)]);e:for(n in o){r=Sr(n);for(i in a)if(Sr(i)===r)continue e;a[n]=o[n]}return s(a,U(t))}if(!Rr.isObject(t))throw r("$http")("badreq","Http request configuration must be an object.  Received: {0}",t);var c=f({method:"get",transformRequest:e.transformRequest,transformResponse:e.transformResponse,paramSerializer:e.paramSerializer},t);c.headers=u(t),c.method=Cr(c.method),c.paramSerializer=S(c.paramSerializer)?p.get(c.paramSerializer):c.paramSerializer;var l=function(t){var r=t.headers,i=Ct(t.data,Et(r),n,t.transformRequest);return y(i)&&o(r,function(e,t){"content-type"===Sr(t)&&delete r[t]}),y(t.withCredentials)&&!y(e.withCredentials)&&(t.withCredentials=e.withCredentials),m(t,i).then(a,a)},d=[l,n],$=h.when(c);for(o(E,function(e){(e.request||e.requestError)&&d.unshift(e.request,e.requestError),(e.response||e.responseError)&&d.push(e.response,e.responseError)});d.length;){var v=d.shift(),g=d.shift();$=$.then(v,g)}return i?($.success=function(e){return he(e,"fn"),$.then(function(t){e(t.data,t.status,t.headers,c)}),$},$.error=function(e){return he(e,"fn"),$.then(null,function(t){e(t.data,t.status,t.headers,c)}),$}):($.success=zi("success"),$.error=zi("error")),$}function $(e){o(arguments,function(e){d[e]=function(t,n){return d(f({},n||{},{method:e,url:t}))}})}function v(e){o(arguments,function(e){d[e]=function(t,n,r){return d(f({},r||{},{method:e,url:t,data:n}))}})}function m(r,i){function o(e,n,r,i){function o(){a(n,e,r,i)}p&&(At(e)?p.put(E,[e,n,St(r),i]):p.remove(E)),t?l.$applyAsync(o):(o(),l.$$phase||l.$apply())}function a(e,t,n,i){t=t>=-1?t:0,(At(t)?v.resolve:v.reject)({data:e,status:t,headers:Et(n),config:r,statusText:i})}function c(e){a(e.data,e.status,U(e.headers()),e.statusText)}function f(){var e=d.pendingRequests.indexOf(r);-1!==e&&d.pendingRequests.splice(e,1)}var p,$,v=h.defer(),m=v.promise,S=r.headers,E=g(r.url,r.paramSerializer(r.params));if(d.pendingRequests.push(r),m.then(f,f),!r.cache&&!e.cache||r.cache===!1||"GET"!==r.method&&"JSONP"!==r.method||(p=b(r.cache)?r.cache:b(e.cache)?e.cache:x),p&&($=p.get(E),w($)?P($)?$.then(c,c):Ur($)?a($[1],$[0],U($[2]),$[3]):a($,200,{},"OK"):p.put(E,m)),y($)){var C=Mn(r.url)?u()[r.xsrfCookieName||e.xsrfCookieName]:n;C&&(S[r.xsrfHeaderName||e.xsrfHeaderName]=C),s(r.method,E,i,o,S,r.timeout,r.withCredentials,r.responseType)}return m}function g(e,t){return t.length>0&&(e+=(-1==e.indexOf("?")?"?":"&")+t),e}var x=c("$http");e.paramSerializer=S(e.paramSerializer)?p.get(e.paramSerializer):e.paramSerializer;var E=[];return o(a,function(e){E.unshift(S(e)?p.get(e):p.invoke(e))}),d.pendingRequests=[],$("get","delete","head","jsonp"),v("post","put","patch"),d.defaults=e,d}]}function Ot(){this.$get=function(){return function(){return new e.XMLHttpRequest}}}function Mt(){this.$get=["$browser","$window","$document","$xhrFactory",function(e,t,n,r){return Tt(e,r,e.defer,t.angular.callbacks,n[0])}]}function Tt(e,t,n,r,i){function a(e,t,n){var o=i.createElement("script"),a=null;return o.type="text/javascript",o.src=e,o.async=!0,a=function(e){ai(o,"load",a),ai(o,"error",a),i.body.removeChild(o),o=null;var s=-1,u="unknown";e&&("load"!==e.type||r[t].called||(e={type:"error"}),u=e.type,s="error"===e.type?404:200),n&&n(s,u)},oi(o,"load",a),oi(o,"error",a),i.body.appendChild(o),a}return function(i,s,u,c,l,f,h,p){function d(){g&&g(),b&&b.abort()}function v(t,r,i,o,a){w(E)&&n.cancel(E),g=b=null,t(r,i,o,a),e.$$completeOutstandingRequest($)}if(e.$$incOutstandingRequestCount(),s=s||e.url(),"jsonp"==Sr(i)){var m="_"+(r.counter++).toString(36);r[m]=function(e){r[m].data=e,r[m].called=!0};var g=a(s.replace("JSON_CALLBACK","angular.callbacks."+m),m,function(e,t){v(c,e,r[m].data,"",t),r[m]=$})}else{var b=t(i,s);b.open(i,s,!0),o(l,function(e,t){w(e)&&b.setRequestHeader(t,e)}),b.onload=function(){var e=b.statusText||"",t="response"in b?b.response:b.responseText,n=1223===b.status?204:b.status;0===n&&(n=t?200:"file"==On(s).protocol?404:0),v(c,n,t,b.getAllResponseHeaders(),e)};var x=function(){v(c,-1,null,null,"")};if(b.onerror=x,b.onabort=x,h&&(b.withCredentials=!0),p)try{b.responseType=p}catch(S){if("json"!==p)throw S}b.send(y(u)?null:u)}if(f>0)var E=n(d,f);else P(f)&&f.then(d)}}function jt(){var e="{{",t="}}";this.startSymbol=function(t){return t?(e=t,this):e},this.endSymbol=function(e){return e?(t=e,this):t},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(e){return"\\\\\\"+e}function a(n){return n.replace(h,e).replace(p,t)}function s(e){if(null==e)return"";switch(typeof e){case"string":break;case"number":e=""+e;break;default:e=G(e)}return e}function u(o,u,h,p){function d(e){try{return e=O(e),p&&!w(e)?e:s(e)}catch(t){r(Wi.interr(o,t))}}p=!!p;for(var $,v,m,g=0,b=[],x=[],S=o.length,E=[],C=[];S>g;){if(-1==($=o.indexOf(e,g))||-1==(v=o.indexOf(t,$+c))){g!==S&&E.push(a(o.substring(g)));break}g!==$&&E.push(a(o.substring(g,$))),m=o.substring($+c,v),b.push(m),x.push(n(m,d)),g=v+l,C.push(E.length),E.push("")}if(h&&E.length>1&&Wi.throwNoconcat(o),!u||b.length){var k=function(e){for(var t=0,n=b.length;n>t;t++){if(p&&y(e[t]))return;E[C[t]]=e[t]}return E.join("")},O=function(e){return h?i.getTrusted(h,e):i.valueOf(e)};return f(function(e){var t=0,n=b.length,i=new Array(n);try{for(;n>t;t++)i[t]=x[t](e);return k(i)}catch(a){r(Wi.interr(o,a))}},{exp:o,expressions:b,$$watchDelegate:function(e,t){var n;return e.$watchGroup(x,function(r,i){var o=k(r);A(t)&&t.call(this,o,r!==i?n:o,e),n=o})}})}}var c=e.length,l=t.length,h=new RegExp(e.replace(/./g,o),"g"),p=new RegExp(t.replace(/./g,o),"g");return u.startSymbol=function(){return e},u.endSymbol=function(){return t},u}]}function Vt(){this.$get=["$rootScope","$window","$q","$$q",function(e,t,n,r){function i(i,a,s,u){var c=arguments.length>4,l=c?L(arguments,4):[],f=t.setInterval,h=t.clearInterval,p=0,d=w(u)&&!u,$=(d?r:n).defer(),v=$.promise;return s=w(s)?s:0,v.then(null,null,c?function(){i.apply(null,l)}:i),v.$$intervalId=f(function(){$.notify(p++),s>0&&p>=s&&($.resolve(p),h(v.$$intervalId),delete o[v.$$intervalId]),d||e.$apply()},a),o[v.$$intervalId]=$,v}var o={};return i.cancel=function(e){return e&&e.$$intervalId in o?(o[e.$$intervalId].reject("canceled"),t.clearInterval(e.$$intervalId),delete o[e.$$intervalId],!0):!1},i}]}function Nt(e){for(var t=e.split("/"),n=t.length;n--;)t[n]=ne(t[n]);return t.join("/")}function Pt(e,t){var n=On(e);t.$$protocol=n.protocol,t.$$host=n.hostname,t.$$port=p(n.port)||Yi[n.protocol]||null}function It(e,t){var n="/"!==e.charAt(0);n&&(e="/"+e);var r=On(e);t.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),t.$$search=ee(r.search),t.$$hash=decodeURIComponent(r.hash),t.$$path&&"/"!=t.$$path.charAt(0)&&(t.$$path="/"+t.$$path)}function Dt(e,t){return 0===t.indexOf(e)?t.substr(e.length):void 0}function qt(e){var t=e.indexOf("#");return-1==t?e:e.substr(0,t)}function Rt(e){return e.replace(/(#.+)|#$/,"$1")}function Ft(e){return e.substr(0,qt(e).lastIndexOf("/")+1)}function _t(e){return e.substring(0,e.indexOf("/",e.indexOf("//")+2))}function Ut(e,t,n){this.$$html5=!0,n=n||"",Pt(e,this),this.$$parse=function(e){var n=Dt(t,e);if(!S(n))throw Ji("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',e,t);It(n,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var e=te(this.$$search),n=this.$$hash?"#"+ne(this.$$hash):"";this.$$url=Nt(this.$$path)+(e?"?"+e:"")+n,this.$$absUrl=t+this.$$url.substr(1)},this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a,s;return w(o=Dt(e,r))?(a=o,s=w(o=Dt(n,o))?t+(Dt("/",o)||o):e+a):w(o=Dt(t,r))?s=t+o:t==r+"/"&&(s=t),s&&this.$$parse(s),!!s}}function Ht(e,t,n){Pt(e,this),this.$$parse=function(r){function i(e,t,n){var r,i=/^\/[A-Z]:(\/.*)/;return 0===t.indexOf(n)&&(t=t.replace(n,"")),i.exec(t)?e:(r=i.exec(e),r?r[1]:e)}var o,a=Dt(e,r)||Dt(t,r);y(a)||"#"!==a.charAt(0)?this.$$html5?o=a:(o="",y(a)&&(e=r,this.replace())):(o=Dt(n,a),y(o)&&(o=a)),It(o,this),this.$$path=i(this.$$path,o,e),this.$$compose()},this.$$compose=function(){var t=te(this.$$search),r=this.$$hash?"#"+ne(this.$$hash):"";this.$$url=Nt(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+(this.$$url?n+this.$$url:"")},this.$$parseLinkUrl=function(t,n){return qt(e)==qt(t)?(this.$$parse(t),!0):!1}}function Bt(e,t,n){this.$$html5=!0,Ht.apply(this,arguments),this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return e==qt(r)?o=r:(a=Dt(t,r))?o=e+n+a:t===r+"/"&&(o=t),o&&this.$$parse(o),!!o},this.$$compose=function(){var t=te(this.$$search),r=this.$$hash?"#"+ne(this.$$hash):"";this.$$url=Nt(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+n+this.$$url}}function Lt(e){return function(){return this[e]}}function zt(e,t){return function(n){return y(n)?this[e]:(this[e]=t(n),this.$$compose(),this)}}function Wt(){var e="",t={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(t){return w(t)?(e=t,this):e},this.html5Mode=function(e){return N(e)?(t.enabled=e,this):b(e)?(N(e.enabled)&&(t.enabled=e.enabled),N(e.requireBase)&&(t.requireBase=e.requireBase),N(e.rewriteLinks)&&(t.rewriteLinks=e.rewriteLinks),this):t},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){function s(e,t,n){var i=c.url(),o=c.$$state;try{r.url(e,t,n),c.$$state=r.state()}catch(a){throw c.url(i),c.$$state=o,a}}function u(e,t){n.$broadcast("$locationChangeSuccess",c.absUrl(),e,c.$$state,t)}var c,l,f,h=r.baseHref(),p=r.url();if(t.enabled){if(!h&&t.requireBase)throw Ji("nobase","$location in HTML5 mode requires a <base> tag to be present!");f=_t(p)+(h||"/"),l=i.history?Ut:Bt}else f=qt(p),l=Ht;var d=Ft(f);c=new l(f,d,"#"+e),c.$$parseLinkUrl(p,p),c.$$state=r.state();var $=/^\s*(javascript|mailto):/i;o.on("click",function(e){if(t.rewriteLinks&&!e.ctrlKey&&!e.metaKey&&!e.shiftKey&&2!=e.which&&2!=e.button){for(var i=Mr(e.target);"a"!==R(i[0]);)if(i[0]===o[0]||!(i=i.parent())[0])return;var s=i.prop("href"),u=i.attr("href")||i.attr("xlink:href");b(s)&&"[object SVGAnimatedString]"===s.toString()&&(s=On(s.animVal).href),$.test(s)||!s||i.attr("target")||e.isDefaultPrevented()||c.$$parseLinkUrl(s,u)&&(e.preventDefault(),c.absUrl()!=r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}),Rt(c.absUrl())!=Rt(p)&&r.url(c.absUrl(),!0);var v=!0;return r.onUrlChange(function(e,t){return y(Dt(d,e))?void(a.location.href=e):(n.$evalAsync(function(){var r,i=c.absUrl(),o=c.$$state;e=Rt(e),c.$$parse(e),c.$$state=t,r=n.$broadcast("$locationChangeStart",e,i,t,o).defaultPrevented,c.absUrl()===e&&(r?(c.$$parse(i),c.$$state=o,s(i,!1,o)):(v=!1,u(i,o)))}),void(n.$$phase||n.$digest()))}),n.$watch(function(){var e=Rt(r.url()),t=Rt(c.absUrl()),o=r.state(),a=c.$$replace,l=e!==t||c.$$html5&&i.history&&o!==c.$$state;(v||l)&&(v=!1,n.$evalAsync(function(){var t=c.absUrl(),r=n.$broadcast("$locationChangeStart",t,e,c.$$state,o).defaultPrevented;c.absUrl()===t&&(r?(c.$$parse(e),c.$$state=o):(l&&s(t,a,o===c.$$state?null:c.$$state),u(e,o)))})),c.$$replace=!1}),c}]}function Gt(){var e=!0,t=this;this.debugEnabled=function(t){return w(t)?(e=t,this):e},this.$get=["$window",function(n){function r(e){return e instanceof Error&&(e.stack?e=e.message&&-1===e.stack.indexOf(e.message)?"Error: "+e.message+"\n"+e.stack:e.stack:e.sourceURL&&(e=e.message+"\n"+e.sourceURL+":"+e.line)),e}function i(e){var t=n.console||{},i=t[e]||t.log||$,a=!1;try{a=!!i.apply}catch(s){}return a?function(){var e=[];return o(arguments,function(t){e.push(r(t))}),i.apply(t,e)}:function(e,t){i(e,null==t?"":t)}}return{log:i("log"),info:i("info"),warn:i("warn"),error:i("error"),debug:function(){var n=i("debug");return function(){e&&n.apply(t,arguments)}}()}}]}function Yt(e,t){if("__defineGetter__"===e||"__defineSetter__"===e||"__lookupGetter__"===e||"__lookupSetter__"===e||"__proto__"===e)throw Zi("isecfld","Attempting to access a disallowed field in Angular expressions! Expression: {0}",t);return e}function Jt(e,t){if(e+="",!S(e))throw Zi("iseccst","Cannot convert object to primitive value! Expression: {0}",t);return e}function Kt(e,t){if(e){if(e.constructor===e)throw Zi("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e.window===e)throw Zi("isecwindow","Referencing the Window in Angular expressions is disallowed! Expression: {0}",t);if(e.children&&(e.nodeName||e.prop&&e.attr&&e.find))throw Zi("isecdom","Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}",t);if(e===Object)throw Zi("isecobj","Referencing Object in Angular expressions is disallowed! Expression: {0}",t)}return e}function Zt(e,t){if(e){if(e.constructor===e)throw Zi("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e===Xi||e===Qi||e===eo)throw Zi("isecff","Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}",t)}}function Xt(e,t){if(e&&(e===0..constructor||e===(!1).constructor||e==="".constructor||e==={}.constructor||e===[].constructor||e===Function.constructor))throw Zi("isecaf","Assigning to a constructor is disallowed! Expression: {0}",t)}function Qt(e,t){return"undefined"!=typeof e?e:t}function en(e,t){return"undefined"==typeof e?t:"undefined"==typeof t?e:e+t}function tn(e,t){var n=e(t);return!n.$stateful}function nn(e,t){var n,r;switch(e.type){case io.Program:n=!0,o(e.body,function(e){nn(e.expression,t),n=n&&e.expression.constant}),e.constant=n;break;case io.Literal:e.constant=!0,e.toWatch=[];break;case io.UnaryExpression:nn(e.argument,t),e.constant=e.argument.constant,e.toWatch=e.argument.toWatch;break;case io.BinaryExpression:nn(e.left,t),nn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.left.toWatch.concat(e.right.toWatch);break;case io.LogicalExpression:nn(e.left,t),nn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.constant?[]:[e];break;case io.ConditionalExpression:nn(e.test,t),nn(e.alternate,t),nn(e.consequent,t),e.constant=e.test.constant&&e.alternate.constant&&e.consequent.constant,e.toWatch=e.constant?[]:[e];break;case io.Identifier:e.constant=!1,e.toWatch=[e];break;case io.MemberExpression:nn(e.object,t),e.computed&&nn(e.property,t),e.constant=e.object.constant&&(!e.computed||e.property.constant),e.toWatch=[e];break;case io.CallExpression:n=e.filter?tn(t,e.callee.name):!1,r=[],o(e.arguments,function(e){nn(e,t),n=n&&e.constant,e.constant||r.push.apply(r,e.toWatch)}),e.constant=n,e.toWatch=e.filter&&tn(t,e.callee.name)?r:[e];break;case io.AssignmentExpression:nn(e.left,t),nn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=[e];break;case io.ArrayExpression:n=!0,r=[],o(e.elements,function(e){nn(e,t),n=n&&e.constant,e.constant||r.push.apply(r,e.toWatch)}),e.constant=n,e.toWatch=r;break;case io.ObjectExpression:n=!0,r=[],o(e.properties,function(e){nn(e.value,t),n=n&&e.value.constant,e.value.constant||r.push.apply(r,e.value.toWatch)}),e.constant=n,e.toWatch=r;break;case io.ThisExpression:e.constant=!1,e.toWatch=[]}}function rn(e){if(1==e.length){var t=e[0].expression,r=t.toWatch;return 1!==r.length?r:r[0]!==t?r:n}}function on(e){return e.type===io.Identifier||e.type===io.MemberExpression}function an(e){return 1===e.body.length&&on(e.body[0].expression)?{type:io.AssignmentExpression,left:e.body[0].expression,right:{type:io.NGValueParameter},operator:"="}:void 0}function sn(e){return 0===e.body.length||1===e.body.length&&(e.body[0].expression.type===io.Literal||e.body[0].expression.type===io.ArrayExpression||e.body[0].expression.type===io.ObjectExpression)}function un(e){return e.constant}function cn(e,t){this.astBuilder=e,this.$filter=t}function ln(e,t){this.astBuilder=e,this.$filter=t}function fn(e){return"constructor"==e}function hn(e){return A(e.valueOf)?e.valueOf():ao.call(e)}function pn(){var e=ve(),t=ve();this.$get=["$filter",function(r){function i(e,t){return null==e||null==t?e===t:"object"==typeof e&&(e=hn(e),"object"==typeof e)?!1:e===t||e!==e&&t!==t}function a(e,t,r,o,a){var s,u=o.inputs;if(1===u.length){var c=i;return u=u[0],e.$watch(function(e){var t=u(e);return i(t,c)||(s=o(e,n,n,[t]),c=t&&hn(t)),s},t,r,a)}for(var l=[],f=[],h=0,p=u.length;p>h;h++)l[h]=i,f[h]=null;return e.$watch(function(e){for(var t=!1,r=0,a=u.length;a>r;r++){var c=u[r](e);(t||(t=!i(c,l[r])))&&(f[r]=c,l[r]=c&&hn(c))}return t&&(s=o(e,n,n,f)),s},t,r,a)}function s(e,t,n,r){var i,o;return i=e.$watch(function(e){return r(e)},function(e,n,r){o=e,A(t)&&t.apply(this,arguments),w(e)&&r.$$postDigest(function(){w(o)&&i()})},n)}function u(e,t,n,r){function i(e){var t=!0;return o(e,function(e){w(e)||(t=!1)}),t}var a,s;return a=e.$watch(function(e){return r(e)},function(e,n,r){s=e,A(t)&&t.call(this,e,n,r),i(e)&&r.$$postDigest(function(){i(s)&&a()})},n)}function c(e,t,n,r){var i;return i=e.$watch(function(e){return r(e)},function(e,n,r){A(t)&&t.apply(this,arguments),i()},n)}function l(e,t){if(!t)return e;var n=e.$$watchDelegate,r=!1,i=n!==u&&n!==s,o=i?function(n,i,o,a){var s=r&&a?a[0]:e(n,i,o,a);return t(s,n,i)}:function(n,r,i,o){var a=e(n,r,i,o),s=t(a,n,r);return w(a)?s:a};return e.$$watchDelegate&&e.$$watchDelegate!==a?o.$$watchDelegate=e.$$watchDelegate:t.$stateful||(o.$$watchDelegate=a,r=!e.inputs,o.inputs=e.inputs?e.inputs:[e]),o}var f=zr().noUnsafeEval,h={csp:f,expensiveChecks:!1},p={csp:f,expensiveChecks:!0};return function(n,i,o){var f,d,v;switch(typeof n){case"string":n=n.trim(),v=n;var m=o?t:e;if(f=m[v],!f){":"===n.charAt(0)&&":"===n.charAt(1)&&(d=!0,n=n.substring(2));var g=o?p:h,y=new ro(g),w=new oo(y,r,g);f=w.parse(n),f.constant?f.$$watchDelegate=c:d?f.$$watchDelegate=f.literal?u:s:f.inputs&&(f.$$watchDelegate=a),m[v]=f}return l(f,i);case"function":return l(n,i);default:return $}}}]}function dn(){this.$get=["$rootScope","$exceptionHandler",function(e,t){return vn(function(t){e.$evalAsync(t)},t)}]}function $n(){this.$get=["$browser","$exceptionHandler",function(e,t){return vn(function(t){e.defer(t)},t)}]}function vn(e,t){function i(e,t,n){function r(t){return function(n){i||(i=!0,t.call(e,n))}}var i=!1;return[r(t),r(n)]}function a(){this.$$state={status:0}}function s(e,t){return function(n){t.call(e,n)}}function u(e){var r,i,o;o=e.pending,e.processScheduled=!1,e.pending=n;for(var a=0,s=o.length;s>a;++a){i=o[a][0],r=o[a][e.status];try{A(r)?i.resolve(r(e.value)):1===e.status?i.resolve(e.value):i.reject(e.value)}catch(u){i.reject(u),t(u)}}}function c(t){!t.processScheduled&&t.pending&&(t.processScheduled=!0,e(function(){u(t)}))}function l(){this.promise=new a,this.resolve=s(this,this.resolve),this.reject=s(this,this.reject),this.notify=s(this,this.notify)}function h(e){var t=new l,n=0,r=Ur(e)?[]:{};return o(e,function(e,i){n++,g(e).then(function(e){r.hasOwnProperty(i)||(r[i]=e,--n||t.resolve(r))},function(e){r.hasOwnProperty(i)||t.reject(e)})}),0===n&&t.resolve(r),t.promise}var p=r("$q",TypeError),d=function(){return new l};f(a.prototype,{then:function(e,t,n){if(y(e)&&y(t)&&y(n))return this;var r=new l;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,e,t,n]),this.$$state.status>0&&c(this.$$state),r.promise},"catch":function(e){return this.then(null,e)},"finally":function(e,t){return this.then(function(t){return m(t,!0,e)},function(t){return m(t,!1,e)},t)}}),f(l.prototype,{resolve:function(e){this.promise.$$state.status||(e===this.promise?this.$$reject(p("qcycle","Expected promise to be resolved with value other than itself '{0}'",e)):this.$$resolve(e))},$$resolve:function(e){var n,r;r=i(this,this.$$resolve,this.$$reject);try{(b(e)||A(e))&&(n=e&&e.then),A(n)?(this.promise.$$state.status=-1,n.call(e,r[0],r[1],this.notify)):(this.promise.$$state.value=e,this.promise.$$state.status=1,c(this.promise.$$state))}catch(o){r[1](o),t(o)}},reject:function(e){this.promise.$$state.status||this.$$reject(e)},$$reject:function(e){this.promise.$$state.value=e,this.promise.$$state.status=2,c(this.promise.$$state)},notify:function(n){var r=this.promise.$$state.pending;this.promise.$$state.status<=0&&r&&r.length&&e(function(){for(var e,i,o=0,a=r.length;a>o;o++){i=r[o][0],e=r[o][3];try{i.notify(A(e)?e(n):n);
}catch(s){t(s)}}})}});var $=function(e){var t=new l;return t.reject(e),t.promise},v=function(e,t){var n=new l;return t?n.resolve(e):n.reject(e),n.promise},m=function(e,t,n){var r=null;try{A(n)&&(r=n())}catch(i){return v(i,!1)}return P(r)?r.then(function(){return v(e,t)},function(e){return v(e,!1)}):v(e,t)},g=function(e,t,n,r){var i=new l;return i.resolve(e),i.promise.then(t,n,r)},w=g,x=function S(e){function t(e){r.resolve(e)}function n(e){r.reject(e)}if(!A(e))throw p("norslvr","Expected resolverFn, got '{0}'",e);if(!(this instanceof S))return new S(e);var r=new l;return e(t,n),r.promise};return x.defer=d,x.reject=$,x.when=g,x.resolve=w,x.all=h,x}function mn(){this.$get=["$window","$timeout",function(e,t){var n=e.requestAnimationFrame||e.webkitRequestAnimationFrame,r=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(e){var t=n(e);return function(){r(t)}}:function(e){var n=t(e,16.66,!1);return function(){t.cancel(n)}};return o.supported=i,o}]}function gn(){function e(e){function t(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=u(),this.$$ChildScope=null}return t.prototype=e,t}var t=10,n=r("$rootScope"),a=null,s=null;this.digestTtl=function(e){return arguments.length&&(t=e),t},this.$get=["$injector","$exceptionHandler","$parse","$browser",function(r,c,l,f){function h(e){e.currentScope.$$destroyed=!0}function p(e){9===Or&&(e.$$childHead&&p(e.$$childHead),e.$$nextSibling&&p(e.$$nextSibling)),e.$parent=e.$$nextSibling=e.$$prevSibling=e.$$childHead=e.$$childTail=e.$root=e.$$watchers=null}function d(){this.$id=u(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function v(e){if(C.$$phase)throw n("inprog","{0} already in progress",C.$$phase);C.$$phase=e}function m(){C.$$phase=null}function g(e,t){do e.$$watchersCount+=t;while(e=e.$parent)}function w(e,t,n){do e.$$listenerCount[n]-=t,0===e.$$listenerCount[n]&&delete e.$$listenerCount[n];while(e=e.$parent)}function x(){}function S(){for(;M.length;)try{M.shift()()}catch(e){c(e)}s=null}function E(){null===s&&(s=f.defer(function(){C.$apply(S)}))}d.prototype={constructor:d,$new:function(t,n){var r;return n=n||this,t?(r=new d,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=e(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(t||n!=this)&&r.$on("$destroy",h),r},$watch:function(e,t,n,r){var i=l(e);if(i.$$watchDelegate)return i.$$watchDelegate(this,t,n,i,e);var o=this,s=o.$$watchers,u={fn:t,last:x,get:i,exp:r||e,eq:!!n};return a=null,A(t)||(u.fn=$),s||(s=o.$$watchers=[]),s.unshift(u),g(this,1),function(){F(s,u)>=0&&g(o,-1),a=null}},$watchGroup:function(e,t){function n(){u=!1,c?(c=!1,t(i,i,s)):t(i,r,s)}var r=new Array(e.length),i=new Array(e.length),a=[],s=this,u=!1,c=!0;if(!e.length){var l=!0;return s.$evalAsync(function(){l&&t(i,i,s)}),function(){l=!1}}return 1===e.length?this.$watch(e[0],function(e,n,o){i[0]=e,r[0]=n,t(i,e===n?i:r,o)}):(o(e,function(e,t){var o=s.$watch(e,function(e,o){i[t]=e,r[t]=o,u||(u=!0,s.$evalAsync(n))});a.push(o)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(e,t){function n(e){o=e;var t,n,r,s,u;if(!y(o)){if(b(o))if(i(o)){a!==p&&(a=p,v=a.length=0,f++),t=o.length,v!==t&&(f++,a.length=v=t);for(var c=0;t>c;c++)u=a[c],s=o[c],r=u!==u&&s!==s,r||u===s||(f++,a[c]=s)}else{a!==d&&(a=d={},v=0,f++),t=0;for(n in o)Er.call(o,n)&&(t++,s=o[n],u=a[n],n in a?(r=u!==u&&s!==s,r||u===s||(f++,a[n]=s)):(v++,a[n]=s,f++));if(v>t){f++;for(n in a)Er.call(o,n)||(v--,delete a[n])}}else a!==o&&(a=o,f++);return f}}function r(){if($?($=!1,t(o,o,u)):t(o,s,u),c)if(b(o))if(i(o)){s=new Array(o.length);for(var e=0;e<o.length;e++)s[e]=o[e]}else{s={};for(var n in o)Er.call(o,n)&&(s[n]=o[n])}else s=o}n.$stateful=!0;var o,a,s,u=this,c=t.length>1,f=0,h=l(e,n),p=[],d={},$=!0,v=0;return this.$watch(h,r)},$digest:function(){var e,r,i,o,u,l,h,p,d,$,g=t,y=this,w=[];v("$digest"),f.$$checkUrlChange(),this===C&&null!==s&&(f.defer.cancel(s),S()),a=null;do{for(l=!1,p=y;k.length;){try{$=k.shift(),$.scope.$eval($.expression,$.locals)}catch(b){c(b)}a=null}e:do{if(o=p.$$watchers)for(u=o.length;u--;)try{if(e=o[u])if((r=e.get(p))===(i=e.last)||(e.eq?H(r,i):"number"==typeof r&&"number"==typeof i&&isNaN(r)&&isNaN(i))){if(e===a){l=!1;break e}}else l=!0,a=e,e.last=e.eq?_(r,null):r,e.fn(r,i===x?r:i,p),5>g&&(d=4-g,w[d]||(w[d]=[]),w[d].push({msg:A(e.exp)?"fn: "+(e.exp.name||e.exp.toString()):e.exp,newVal:r,oldVal:i}))}catch(b){c(b)}if(!(h=p.$$watchersCount&&p.$$childHead||p!==y&&p.$$nextSibling))for(;p!==y&&!(h=p.$$nextSibling);)p=p.$parent}while(p=h);if((l||k.length)&&!g--)throw m(),n("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",t,w)}while(l||k.length);for(m();O.length;)try{O.shift()()}catch(b){c(b)}},$destroy:function(){if(!this.$$destroyed){var e=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===C&&f.$$applicationDestroyed(),g(this,-this.$$watchersCount);for(var t in this.$$listenerCount)w(this,this.$$listenerCount[t],t);e&&e.$$childHead==this&&(e.$$childHead=this.$$nextSibling),e&&e.$$childTail==this&&(e.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=$,this.$on=this.$watch=this.$watchGroup=function(){return $},this.$$listeners={},this.$$nextSibling=null,p(this)}},$eval:function(e,t){return l(e)(this,t)},$evalAsync:function(e,t){C.$$phase||k.length||f.defer(function(){k.length&&C.$digest()}),k.push({scope:this,expression:e,locals:t})},$$postDigest:function(e){O.push(e)},$apply:function(e){try{v("$apply");try{return this.$eval(e)}finally{m()}}catch(t){c(t)}finally{try{C.$digest()}catch(t){throw c(t),t}}},$applyAsync:function(e){function t(){n.$eval(e)}var n=this;e&&M.push(t),E()},$on:function(e,t){var n=this.$$listeners[e];n||(this.$$listeners[e]=n=[]),n.push(t);var r=this;do r.$$listenerCount[e]||(r.$$listenerCount[e]=0),r.$$listenerCount[e]++;while(r=r.$parent);var i=this;return function(){var r=n.indexOf(t);-1!==r&&(n[r]=null,w(i,1,e))}},$emit:function(e,t){var n,r,i,o=[],a=this,s=!1,u={name:e,targetScope:a,stopPropagation:function(){s=!0},preventDefault:function(){u.defaultPrevented=!0},defaultPrevented:!1},l=B([u],arguments,1);do{for(n=a.$$listeners[e]||o,u.currentScope=a,r=0,i=n.length;i>r;r++)if(n[r])try{n[r].apply(null,l)}catch(f){c(f)}else n.splice(r,1),r--,i--;if(s)return u.currentScope=null,u;a=a.$parent}while(a);return u.currentScope=null,u},$broadcast:function(e,t){var n=this,r=n,i=n,o={name:e,targetScope:n,preventDefault:function(){o.defaultPrevented=!0},defaultPrevented:!1};if(!n.$$listenerCount[e])return o;for(var a,s,u,l=B([o],arguments,1);r=i;){for(o.currentScope=r,a=r.$$listeners[e]||[],s=0,u=a.length;u>s;s++)if(a[s])try{a[s].apply(null,l)}catch(f){c(f)}else a.splice(s,1),s--,u--;if(!(i=r.$$listenerCount[e]&&r.$$childHead||r!==n&&r.$$nextSibling))for(;r!==n&&!(i=r.$$nextSibling);)r=r.$parent}return o.currentScope=null,o}};var C=new d,k=C.$$asyncQueue=[],O=C.$$postDigestQueue=[],M=C.$$applyAsyncQueue=[];return C}]}function yn(){var e=/^\s*(https?|ftp|mailto|tel|file):/,t=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(t){return w(t)?(e=t,this):e},this.imgSrcSanitizationWhitelist=function(e){return w(e)?(t=e,this):t},this.$get=function(){return function(n,r){var i,o=r?t:e;return i=On(n).href,""===i||i.match(o)?n:"unsafe:"+i}}}function wn(e){if("self"===e)return e;if(S(e)){if(e.indexOf("***")>-1)throw so("iwcard","Illegal sequence *** in string matcher.  String: {0}",e);return e=Lr(e).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*"),new RegExp("^"+e+"$")}if(k(e))return new RegExp("^"+e.source+"$");throw so("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}function bn(e){var t=[];return w(e)&&o(e,function(e){t.push(wn(e))}),t}function xn(){this.SCE_CONTEXTS=uo;var e=["self"],t=[];this.resourceUrlWhitelist=function(t){return arguments.length&&(e=bn(t)),e},this.resourceUrlBlacklist=function(e){return arguments.length&&(t=bn(e)),t},this.$get=["$injector",function(n){function r(e,t){return"self"===e?Mn(t):!!e.exec(t.href)}function i(n){var i,o,a=On(n.toString()),s=!1;for(i=0,o=e.length;o>i;i++)if(r(e[i],a)){s=!0;break}if(s)for(i=0,o=t.length;o>i;i++)if(r(t[i],a)){s=!1;break}return s}function o(e){var t=function(e){this.$$unwrapTrustedValue=function(){return e}};return e&&(t.prototype=new e),t.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},t.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},t}function a(e,t){var n=f.hasOwnProperty(e)?f[e]:null;if(!n)throw so("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",e,t);if(null===t||y(t)||""===t)return t;if("string"!=typeof t)throw so("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",e);return new n(t)}function s(e){return e instanceof l?e.$$unwrapTrustedValue():e}function u(e,t){if(null===t||y(t)||""===t)return t;var n=f.hasOwnProperty(e)?f[e]:null;if(n&&t instanceof n)return t.$$unwrapTrustedValue();if(e===uo.RESOURCE_URL){if(i(t))return t;throw so("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",t.toString())}if(e===uo.HTML)return c(t);throw so("unsafe","Attempting to use an unsafe value in a safe context.")}var c=function(e){throw so("unsafe","Attempting to use an unsafe value in a safe context.")};n.has("$sanitize")&&(c=n.get("$sanitize"));var l=o(),f={};return f[uo.HTML]=o(l),f[uo.CSS]=o(l),f[uo.URL]=o(l),f[uo.JS]=o(l),f[uo.RESOURCE_URL]=o(f[uo.URL]),{trustAs:a,getTrusted:u,valueOf:s}}]}function Sn(){var e=!0;this.enabled=function(t){return arguments.length&&(e=!!t),e},this.$get=["$parse","$sceDelegate",function(t,n){if(e&&8>Or)throw so("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var r=U(uo);r.isEnabled=function(){return e},r.trustAs=n.trustAs,r.getTrusted=n.getTrusted,r.valueOf=n.valueOf,e||(r.trustAs=r.getTrusted=function(e,t){return t},r.valueOf=v),r.parseAs=function(e,n){var i=t(n);return i.literal&&i.constant?i:t(n,function(t){return r.getTrusted(e,t)})};var i=r.parseAs,a=r.getTrusted,s=r.trustAs;return o(uo,function(e,t){var n=Sr(t);r[xe("parse_as_"+n)]=function(t){return i(e,t)},r[xe("get_trusted_"+n)]=function(t){return a(e,t)},r[xe("trust_as_"+n)]=function(t){return s(e,t)}}),r}]}function En(){this.$get=["$window","$document",function(e,t){var n,r,i={},o=p((/android (\d+)/.exec(Sr((e.navigator||{}).userAgent))||[])[1]),a=/Boxee/i.test((e.navigator||{}).userAgent),s=t[0]||{},u=/^(Moz|webkit|ms)(?=[A-Z])/,c=s.body&&s.body.style,l=!1,f=!1;if(c){for(var h in c)if(r=u.exec(h)){n=r[0],n=n.substr(0,1).toUpperCase()+n.substr(1);break}n||(n="WebkitOpacity"in c&&"webkit"),l=!!("transition"in c||n+"Transition"in c),f=!!("animation"in c||n+"Animation"in c),!o||l&&f||(l=S(c.webkitTransition),f=S(c.webkitAnimation))}return{history:!(!e.history||!e.history.pushState||4>o||a),hasEvent:function(e){if("input"===e&&11>=Or)return!1;if(y(i[e])){var t=s.createElement("div");i[e]="on"+e in t}return i[e]},csp:zr(),vendorPrefix:n,transitions:l,animations:f,android:o}}]}function Cn(){this.$get=["$templateCache","$http","$q","$sce",function(e,t,n,r){function i(o,a){function s(e){if(!a)throw Pi("tpload","Failed to load template: {0} (HTTP status: {1} {2})",o,e.status,e.statusText);return n.reject(e)}i.totalPendingRequests++,S(o)&&e.get(o)||(o=r.getTrustedResourceUrl(o));var u=t.defaults&&t.defaults.transformResponse;Ur(u)?u=u.filter(function(e){return e!==bt}):u===bt&&(u=null);var c={cache:e,transformResponse:u};return t.get(o,c)["finally"](function(){i.totalPendingRequests--}).then(function(t){return e.put(o,t.data),t.data},s)}return i.totalPendingRequests=0,i}]}function An(){this.$get=["$rootScope","$browser","$location",function(e,t,n){var r={};return r.findBindings=function(e,t,n){var r=e.getElementsByClassName("ng-binding"),i=[];return o(r,function(e){var r=Rr.element(e).data("$binding");r&&o(r,function(r){if(n){var o=new RegExp("(^|\\s)"+Lr(t)+"(\\s|\\||$)");o.test(r)&&i.push(e)}else-1!=r.indexOf(t)&&i.push(e)})}),i},r.findModels=function(e,t,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=n?"=":"*=",a="["+r[i]+"model"+o+'"'+t+'"]',s=e.querySelectorAll(a);if(s.length)return s}},r.getLocation=function(){return n.url()},r.setLocation=function(t){t!==n.url()&&(n.url(t),e.$digest())},r.whenStable=function(e){t.notifyWhenNoOutstandingRequests(e)},r}]}function kn(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(e,t,n,r,i){function o(o,s,u){A(o)||(u=s,s=o,o=$);var c,l=L(arguments,3),f=w(u)&&!u,h=(f?r:n).defer(),p=h.promise;return c=t.defer(function(){try{h.resolve(o.apply(null,l))}catch(t){h.reject(t),i(t)}finally{delete a[p.$$timeoutId]}f||e.$apply()},s),p.$$timeoutId=c,a[c]=h,p}var a={};return o.cancel=function(e){return e&&e.$$timeoutId in a?(a[e.$$timeoutId].reject("canceled"),delete a[e.$$timeoutId],t.defer.cancel(e.$$timeoutId)):!1},o}]}function On(e){var t=e;return Or&&(co.setAttribute("href",t),t=co.href),co.setAttribute("href",t),{href:co.href,protocol:co.protocol?co.protocol.replace(/:$/,""):"",host:co.host,search:co.search?co.search.replace(/^\?/,""):"",hash:co.hash?co.hash.replace(/^#/,""):"",hostname:co.hostname,port:co.port,pathname:"/"===co.pathname.charAt(0)?co.pathname:"/"+co.pathname}}function Mn(e){var t=S(e)?On(e):e;return t.protocol===lo.protocol&&t.host===lo.host}function Tn(){this.$get=m(e)}function jn(e){function t(e){try{return decodeURIComponent(e)}catch(t){return e}}var n=e[0]||{},r={},i="";return function(){var e,o,a,s,u,c=n.cookie||"";if(c!==i)for(i=c,e=i.split("; "),r={},a=0;a<e.length;a++)o=e[a],s=o.indexOf("="),s>0&&(u=t(o.substring(0,s)),y(r[u])&&(r[u]=t(o.substring(s+1))));return r}}function Vn(){this.$get=jn}function Nn(e){function t(r,i){if(b(r)){var a={};return o(r,function(e,n){a[n]=t(n,e)}),a}return e.factory(r+n,i)}var n="Filter";this.register=t,this.$get=["$injector",function(e){return function(t){return e.get(t+n)}}],t("currency",Rn),t("date",Zn),t("filter",Pn),t("json",Xn),t("limitTo",Qn),t("lowercase",vo),t("number",Fn),t("orderBy",er),t("uppercase",mo)}function Pn(){return function(e,t,n){if(!i(e)){if(null==e)return e;throw r("filter")("notarray","Expected array but received: {0}",e)}var o,a,s=qn(t);switch(s){case"function":o=t;break;case"boolean":case"null":case"number":case"string":a=!0;case"object":o=In(t,n,a);break;default:return e}return Array.prototype.filter.call(e,o)}}function In(e,t,n){var r,i=b(e)&&"$"in e;return t===!0?t=H:A(t)||(t=function(e,t){return y(e)?!1:null===e||null===t?e===t:b(t)||b(e)&&!g(e)?!1:(e=Sr(""+e),t=Sr(""+t),-1!==e.indexOf(t))}),r=function(r){return i&&!b(r)?Dn(r,e.$,t,!1):Dn(r,e,t,n)}}function Dn(e,t,n,r,i){var o=qn(e),a=qn(t);if("string"===a&&"!"===t.charAt(0))return!Dn(e,t.substring(1),n,r);if(Ur(e))return e.some(function(e){return Dn(e,t,n,r)});switch(o){case"object":var s;if(r){for(s in e)if("$"!==s.charAt(0)&&Dn(e[s],t,n,!0))return!0;return i?!1:Dn(e,t,n,!1)}if("object"===a){for(s in t){var u=t[s];if(!A(u)&&!y(u)){var c="$"===s,l=c?e:e[s];if(!Dn(l,u,n,c,c))return!1}}return!0}return n(e,t);case"function":return!1;default:return n(e,t)}}function qn(e){return null===e?"null":typeof e}function Rn(e){var t=e.NUMBER_FORMATS;return function(e,n,r){return y(n)&&(n=t.CURRENCY_SYM),y(r)&&(r=t.PATTERNS[1].maxFrac),null==e?e:_n(e,t.PATTERNS[1],t.GROUP_SEP,t.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function Fn(e){var t=e.NUMBER_FORMATS;return function(e,n){return null==e?e:_n(e,t.PATTERNS[0],t.GROUP_SEP,t.DECIMAL_SEP,n)}}function _n(e,t,n,r,i){if(b(e))return"";var o=0>e;e=Math.abs(e);var a=e===1/0;if(!a&&!isFinite(e))return"";var s=e+"",u="",c=!1,l=[];if(a&&(u="∞"),!a&&-1!==s.indexOf("e")){var f=s.match(/([\d\.]+)e(-?)(\d+)/);f&&"-"==f[2]&&f[3]>i+1?e=0:(u=s,c=!0)}if(a||c)i>0&&1>e&&(u=e.toFixed(i),e=parseFloat(u),u=u.replace(fo,r));else{var h=(s.split(fo)[1]||"").length;y(i)&&(i=Math.min(Math.max(t.minFrac,h),t.maxFrac)),e=+(Math.round(+(e.toString()+"e"+i)).toString()+"e"+-i);var p=(""+e).split(fo),d=p[0];p=p[1]||"";var $,v=0,m=t.lgSize,g=t.gSize;if(d.length>=m+g)for(v=d.length-m,$=0;v>$;$++)(v-$)%g===0&&0!==$&&(u+=n),u+=d.charAt($);for($=v;$<d.length;$++)(d.length-$)%m===0&&0!==$&&(u+=n),u+=d.charAt($);for(;p.length<i;)p+="0";i&&"0"!==i&&(u+=r+p.substr(0,i))}return 0===e&&(o=!1),l.push(o?t.negPre:t.posPre,u,o?t.negSuf:t.posSuf),l.join("")}function Un(e,t,n){var r="";for(0>e&&(r="-",e=-e),e=""+e;e.length<t;)e="0"+e;return n&&(e=e.substr(e.length-t)),r+e}function Hn(e,t,n,r){return n=n||0,function(i){var o=i["get"+e]();return(n>0||o>-n)&&(o+=n),0===o&&-12==n&&(o=12),Un(o,t,r)}}function Bn(e,t){return function(n,r){var i=n["get"+e](),o=Cr(t?"SHORT"+e:e);return r[o][i]}}function Ln(e,t,n){var r=-1*n,i=r>=0?"+":"";return i+=Un(Math[r>0?"floor":"ceil"](r/60),2)+Un(Math.abs(r%60),2)}function zn(e){var t=new Date(e,0,1).getDay();return new Date(e,0,(4>=t?5:12)-t)}function Wn(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate()+(4-e.getDay()))}function Gn(e){return function(t){var n=zn(t.getFullYear()),r=Wn(t),i=+r-+n,o=1+Math.round(i/6048e5);return Un(o,e)}}function Yn(e,t){return e.getHours()<12?t.AMPMS[0]:t.AMPMS[1]}function Jn(e,t){return e.getFullYear()<=0?t.ERAS[0]:t.ERAS[1]}function Kn(e,t){return e.getFullYear()<=0?t.ERANAMES[0]:t.ERANAMES[1]}function Zn(e){function t(e){var t;if(t=e.match(n)){var r=new Date(0),i=0,o=0,a=t[8]?r.setUTCFullYear:r.setFullYear,s=t[8]?r.setUTCHours:r.setHours;t[9]&&(i=p(t[9]+t[10]),o=p(t[9]+t[11])),a.call(r,p(t[1]),p(t[2])-1,p(t[3]));var u=p(t[4]||0)-i,c=p(t[5]||0)-o,l=p(t[6]||0),f=Math.round(1e3*parseFloat("0."+(t[7]||0)));return s.call(r,u,c,l,f),r}return e}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,r,i){var a,s,u="",c=[];if(r=r||"mediumDate",r=e.DATETIME_FORMATS[r]||r,S(n)&&(n=$o.test(n)?p(n):t(n)),E(n)&&(n=new Date(n)),!C(n)||!isFinite(n.getTime()))return n;for(;r;)s=po.exec(r),s?(c=B(c,s,1),r=c.pop()):(c.push(r),r=null);var l=n.getTimezoneOffset();return i&&(l=J(i,n.getTimezoneOffset()),n=Z(n,i,!0)),o(c,function(t){a=ho[t],u+=a?a(n,e.DATETIME_FORMATS,l):t.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),u}}function Xn(){return function(e,t){return y(t)&&(t=2),G(e,t)}}function Qn(){return function(e,t,n){return t=Math.abs(Number(t))===1/0?Number(t):p(t),isNaN(t)?e:(E(e)&&(e=e.toString()),Ur(e)||S(e)?(n=!n||isNaN(n)?0:p(n),n=0>n?Math.max(0,e.length+n):n,t>=0?e.slice(n,n+t):0===n?e.slice(t,e.length):e.slice(Math.max(0,n+t),n)):e)}}function er(e){function t(t,n){return n=n?-1:1,t.map(function(t){var r=1,i=v;if(A(t))i=t;else if(S(t)&&(("+"==t.charAt(0)||"-"==t.charAt(0))&&(r="-"==t.charAt(0)?-1:1,t=t.substring(1)),""!==t&&(i=e(t),i.constant))){var o=i();i=function(e){return e[o]}}return{get:i,descending:r*n}})}function n(e){switch(typeof e){case"number":case"boolean":case"string":return!0;default:return!1}}function r(e,t){return"function"==typeof e.valueOf&&(e=e.valueOf(),n(e))?e:g(e)&&(e=e.toString(),n(e))?e:t}function o(e,t){var n=typeof e;return null===e?(n="string",e="null"):"string"===n?e=e.toLowerCase():"object"===n&&(e=r(e,t)),{value:e,type:n}}function a(e,t){var n=0;return e.type===t.type?e.value!==t.value&&(n=e.value<t.value?-1:1):n=e.type<t.type?-1:1,n}return function(e,n,r){function s(e,t){return{value:e,predicateValues:c.map(function(n){return o(n.get(e),t)})}}function u(e,t){for(var n=0,r=0,i=c.length;i>r&&!(n=a(e.predicateValues[r],t.predicateValues[r])*c[r].descending);++r);return n}if(!i(e))return e;Ur(n)||(n=[n]),0===n.length&&(n=["+"]);var c=t(n,r);c.push({get:function(){return{}},descending:r?-1:1});var l=Array.prototype.map.call(e,s);return l.sort(u),e=l.map(function(e){return e.value})}}function tr(e){return A(e)&&(e={link:e}),e.restrict=e.restrict||"AC",m(e)}function nr(e,t){e.$name=t}function rr(e,t,r,i,a){var s=this,u=[];s.$error={},s.$$success={},s.$pending=n,s.$name=a(t.name||t.ngForm||"")(r),s.$dirty=!1,s.$pristine=!0,s.$valid=!0,s.$invalid=!1,s.$submitted=!1,s.$$parentForm=wo,s.$rollbackViewValue=function(){o(u,function(e){e.$rollbackViewValue()})},s.$commitViewValue=function(){o(u,function(e){e.$commitViewValue()})},s.$addControl=function(e){pe(e.$name,"input"),u.push(e),e.$name&&(s[e.$name]=e),e.$$parentForm=s},s.$$renameControl=function(e,t){var n=e.$name;s[n]===e&&delete s[n],s[t]=e,e.$name=t},s.$removeControl=function(e){e.$name&&s[e.$name]===e&&delete s[e.$name],o(s.$pending,function(t,n){s.$setValidity(n,null,e)}),o(s.$error,function(t,n){s.$setValidity(n,null,e)}),o(s.$$success,function(t,n){s.$setValidity(n,null,e)}),F(u,e),e.$$parentForm=wo},gr({ctrl:this,$element:e,set:function(e,t,n){var r=e[t];if(r){var i=r.indexOf(n);-1===i&&r.push(n)}else e[t]=[n]},unset:function(e,t,n){var r=e[t];r&&(F(r,n),0===r.length&&delete e[t])},$animate:i}),s.$setDirty=function(){i.removeClass(e,na),i.addClass(e,ra),s.$dirty=!0,s.$pristine=!1,s.$$parentForm.$setDirty()},s.$setPristine=function(){i.setClass(e,na,ra+" "+bo),s.$dirty=!1,s.$pristine=!0,s.$submitted=!1,o(u,function(e){e.$setPristine()})},s.$setUntouched=function(){o(u,function(e){e.$setUntouched()})},s.$setSubmitted=function(){i.addClass(e,bo),s.$submitted=!0,s.$$parentForm.$setSubmitted()}}function ir(e){e.$formatters.push(function(t){return e.$isEmpty(t)?t:t.toString()})}function or(e,t,n,r,i,o){ar(e,t,n,r,i,o),ir(r)}function ar(e,t,n,r,i,o){var a=Sr(t[0].type);if(!i.android){var s=!1;t.on("compositionstart",function(e){s=!0}),t.on("compositionend",function(){s=!1,u()})}var u=function(e){if(c&&(o.defer.cancel(c),c=null),!s){var i=t.val(),u=e&&e.type;"password"===a||n.ngTrim&&"false"===n.ngTrim||(i=Br(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,u)}};if(i.hasEvent("input"))t.on("input",u);else{var c,l=function(e,t,n){c||(c=o.defer(function(){c=null,t&&t.value===n||u(e)}))};t.on("keydown",function(e){var t=e.keyCode;91===t||t>15&&19>t||t>=37&&40>=t||l(e,this,this.value)}),i.hasEvent("paste")&&t.on("paste cut",l)}t.on("change",u),r.$render=function(){var e=r.$isEmpty(r.$viewValue)?"":r.$viewValue;t.val()!==e&&t.val(e)}}function sr(e,t){if(C(e))return e;if(S(e)){jo.lastIndex=0;var n=jo.exec(e);if(n){var r=+n[1],i=+n[2],o=0,a=0,s=0,u=0,c=zn(r),l=7*(i-1);return t&&(o=t.getHours(),a=t.getMinutes(),s=t.getSeconds(),u=t.getMilliseconds()),new Date(r,0,c.getDate()+l,o,a,s,u)}}return NaN}function ur(e,t){return function(n,r){var i,a;if(C(n))return n;if(S(n)){if('"'==n.charAt(0)&&'"'==n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),Co.test(n))return new Date(n);if(e.lastIndex=0,i=e.exec(n))return i.shift(),a=r?{yyyy:r.getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),HH:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds(),sss:r.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},o(i,function(e,n){n<t.length&&(a[t[n]]=+e)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return NaN}}function cr(e,t,r,i){return function(o,a,s,u,c,l,f){function h(e){return e&&!(e.getTime&&e.getTime()!==e.getTime())}function p(e){return w(e)&&!C(e)?r(e)||n:e}lr(o,a,s,u),ar(o,a,s,u,c,l);var d,$=u&&u.$options&&u.$options.timezone;if(u.$$parserName=e,u.$parsers.push(function(e){if(u.$isEmpty(e))return null;if(t.test(e)){var i=r(e,d);return $&&(i=Z(i,$)),i}return n}),u.$formatters.push(function(e){if(e&&!C(e))throw sa("datefmt","Expected `{0}` to be a date",e);return h(e)?(d=e,d&&$&&(d=Z(d,$,!0)),f("date")(e,i,$)):(d=null,"")}),w(s.min)||s.ngMin){var v;u.$validators.min=function(e){return!h(e)||y(v)||r(e)>=v},s.$observe("min",function(e){v=p(e),u.$validate()})}if(w(s.max)||s.ngMax){var m;u.$validators.max=function(e){return!h(e)||y(m)||r(e)<=m},s.$observe("max",function(e){m=p(e),u.$validate()})}}}function lr(e,t,r,i){var o=t[0],a=i.$$hasNativeValidators=b(o.validity);a&&i.$parsers.push(function(e){var r=t.prop(xr)||{};return r.badInput&&!r.typeMismatch?n:e})}function fr(e,t,r,i,o,a){if(lr(e,t,r,i),ar(e,t,r,i,o,a),i.$$parserName="number",i.$parsers.push(function(e){return i.$isEmpty(e)?null:Oo.test(e)?parseFloat(e):n}),i.$formatters.push(function(e){if(!i.$isEmpty(e)){if(!E(e))throw sa("numfmt","Expected `{0}` to be a number",e);e=e.toString()}return e}),w(r.min)||r.ngMin){var s;i.$validators.min=function(e){return i.$isEmpty(e)||y(s)||e>=s},r.$observe("min",function(e){w(e)&&!E(e)&&(e=parseFloat(e,10)),s=E(e)&&!isNaN(e)?e:n,i.$validate()})}if(w(r.max)||r.ngMax){var u;i.$validators.max=function(e){return i.$isEmpty(e)||y(u)||u>=e},r.$observe("max",function(e){w(e)&&!E(e)&&(e=parseFloat(e,10)),u=E(e)&&!isNaN(e)?e:n,i.$validate()})}}function hr(e,t,n,r,i,o){ar(e,t,n,r,i,o),ir(r),r.$$parserName="url",r.$validators.url=function(e,t){var n=e||t;return r.$isEmpty(n)||Ao.test(n)}}function pr(e,t,n,r,i,o){ar(e,t,n,r,i,o),ir(r),r.$$parserName="email",r.$validators.email=function(e,t){var n=e||t;return r.$isEmpty(n)||ko.test(n)}}function dr(e,t,n,r){y(n.name)&&t.attr("name",u());var i=function(e){t[0].checked&&r.$setViewValue(n.value,e&&e.type)};t.on("click",i),r.$render=function(){var e=n.value;t[0].checked=e==r.$viewValue},n.$observe("value",r.$render)}function $r(e,t,n,r,i){var o;if(w(r)){if(o=e(r),!o.constant)throw sa("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,r);return o(t)}return i}function vr(e,t,n,r,i,o,a,s){var u=$r(s,e,"ngTrueValue",n.ngTrueValue,!0),c=$r(s,e,"ngFalseValue",n.ngFalseValue,!1),l=function(e){r.$setViewValue(t[0].checked,e&&e.type)};t.on("click",l),r.$render=function(){t[0].checked=r.$viewValue},r.$isEmpty=function(e){return e===!1},r.$formatters.push(function(e){return H(e,u)}),r.$parsers.push(function(e){return e?u:c})}function mr(e,t){return e="ngClass"+e,["$animate",function(n){function r(e,t){var n=[];e:for(var r=0;r<e.length;r++){for(var i=e[r],o=0;o<t.length;o++)if(i==t[o])continue e;n.push(i)}return n}function i(e){var t=[];return Ur(e)?(o(e,function(e){t=t.concat(i(e))}),t):S(e)?e.split(" "):b(e)?(o(e,function(e,n){e&&(t=t.concat(n.split(" ")))}),t):e}return{restrict:"AC",link:function(a,s,u){function c(e){var t=f(e,1);u.$addClass(t)}function l(e){var t=f(e,-1);u.$removeClass(t)}function f(e,t){var n=s.data("$classCounts")||ve(),r=[];return o(e,function(e){(t>0||n[e])&&(n[e]=(n[e]||0)+t,n[e]===+(t>0)&&r.push(e))}),s.data("$classCounts",n),r.join(" ")}function h(e,t){var i=r(t,e),o=r(e,t);i=f(i,1),o=f(o,-1),i&&i.length&&n.addClass(s,i),o&&o.length&&n.removeClass(s,o)}function p(e){if(t===!0||a.$index%2===t){var n=i(e||[]);if(d){if(!H(e,d)){var r=i(d);h(r,n)}}else c(n)}d=U(e)}var d;a.$watch(u[e],p,!0),u.$observe("class",function(t){p(a.$eval(u[e]))}),"ngClass"!==e&&a.$watch("$index",function(n,r){var o=1&n;if(o!==(1&r)){var s=i(a.$eval(u[e]));o===t?c(s):l(s)}})}}}]}function gr(e){function t(e,t,u){y(t)?r("$pending",e,u):i("$pending",e,u),N(t)?t?(f(s.$error,e,u),l(s.$$success,e,u)):(l(s.$error,e,u),f(s.$$success,e,u)):(f(s.$error,e,u),f(s.$$success,e,u)),s.$pending?(o(aa,!0),s.$valid=s.$invalid=n,a("",null)):(o(aa,!1),s.$valid=yr(s.$error),s.$invalid=!s.$valid,a("",s.$valid));var c;c=s.$pending&&s.$pending[e]?n:s.$error[e]?!1:s.$$success[e]?!0:null,a(e,c),s.$$parentForm.$setValidity(e,c,s)}function r(e,t,n){s[e]||(s[e]={}),l(s[e],t,n)}function i(e,t,r){s[e]&&f(s[e],t,r),yr(s[e])&&(s[e]=n)}function o(e,t){t&&!c[e]?(h.addClass(u,e),c[e]=!0):!t&&c[e]&&(h.removeClass(u,e),c[e]=!1)}function a(e,t){e=e?"-"+ce(e,"-"):"",o(ea+e,t===!0),o(ta+e,t===!1)}var s=e.ctrl,u=e.$element,c={},l=e.set,f=e.unset,h=e.$animate;c[ta]=!(c[ea]=u.hasClass(ea)),s.$setValidity=t}function yr(e){if(e)for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}function wr(e){e[0].hasAttribute("selected")&&(e[0].selected=!0)}var br=/^\/(.+)\/([a-z]*)$/,xr="validity",Sr=function(e){return S(e)?e.toLowerCase():e},Er=Object.prototype.hasOwnProperty,Cr=function(e){return S(e)?e.toUpperCase():e},Ar=function(e){return S(e)?e.replace(/[A-Z]/g,function(e){return String.fromCharCode(32|e.charCodeAt(0))}):e},kr=function(e){return S(e)?e.replace(/[a-z]/g,function(e){return String.fromCharCode(-33&e.charCodeAt(0))}):e};"i"!=="I".toLowerCase()&&(Sr=Ar,Cr=kr);var Or,Mr,Tr,jr,Vr=[].slice,Nr=[].splice,Pr=[].push,Ir=Object.prototype.toString,Dr=Object.getPrototypeOf,qr=r("ng"),Rr=e.angular||(e.angular={}),Fr=0;Or=t.documentMode,$.$inject=[],v.$inject=[];var _r,Ur=Array.isArray,Hr=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/,Br=function(e){return S(e)?e.trim():e},Lr=function(e){return e.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},zr=function(){function e(){try{return new Function(""),!1}catch(e){return!0}}if(!w(zr.rules)){var n=t.querySelector("[ng-csp]")||t.querySelector("[data-ng-csp]");if(n){var r=n.getAttribute("ng-csp")||n.getAttribute("data-ng-csp");zr.rules={noUnsafeEval:!r||-1!==r.indexOf("no-unsafe-eval"),noInlineStyle:!r||-1!==r.indexOf("no-inline-style")}}else zr.rules={noUnsafeEval:e(),noInlineStyle:!1}}return zr.rules},Wr=function(){if(w(Wr.name_))return Wr.name_;var e,n,r,i,o=Gr.length;for(n=0;o>n;++n)if(r=Gr[n],e=t.querySelector("["+r.replace(":","\\:")+"jq]")){i=e.getAttribute(r+"jq");break}return Wr.name_=i},Gr=["ng-","data-ng-","ng:","x-ng-"],Yr=/[A-Z]/g,Jr=!1,Kr=1,Zr=2,Xr=3,Qr=8,ei=9,ti=11,ni={full:"1.4.8",major:1,minor:4,dot:8,codeName:"ice-manipulation"};Oe.expando="ng339";var ri=Oe.cache={},ii=1,oi=function(e,t,n){e.addEventListener(t,n,!1)},ai=function(e,t,n){e.removeEventListener(t,n,!1)};Oe._data=function(e){return this.cache[e[this.expando]]||{}};var si=/([\:\-\_]+(.))/g,ui=/^moz([A-Z])/,ci={mouseleave:"mouseout",mouseenter:"mouseover"},li=r("jqLite"),fi=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,hi=/<|&#?\w+;/,pi=/<([\w:-]+)/,di=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,$i={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};$i.optgroup=$i.option,$i.tbody=$i.tfoot=$i.colgroup=$i.caption=$i.thead,$i.th=$i.td;var vi=Node.prototype.contains||function(e){return!!(16&this.compareDocumentPosition(e))},mi=Oe.prototype={ready:function(n){function r(){i||(i=!0,n())}var i=!1;"complete"===t.readyState?setTimeout(r):(this.on("DOMContentLoaded",r),Oe(e).on("load",r))},toString:function(){var e=[];return o(this,function(t){e.push(""+t)}),"["+e.join(", ")+"]"},eq:function(e){return Mr(e>=0?this[e]:this[this.length+e])},length:0,push:Pr,sort:[].sort,splice:[].splice},gi={};o("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(e){gi[Sr(e)]=e});var yi={};o("input,select,option,textarea,button,form,details".split(","),function(e){yi[e]=!0});var wi={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};o({data:Pe,removeData:Ve,hasData:Ce},function(e,t){Oe[t]=e}),o({data:Pe,inheritedData:_e,scope:function(e){return Mr.data(e,"$scope")||_e(e.parentNode||e,["$isolateScope","$scope"])},isolateScope:function(e){return Mr.data(e,"$isolateScope")||Mr.data(e,"$isolateScopeNoTemplate")},controller:Fe,injector:function(e){return _e(e,"$injector")},removeAttr:function(e,t){e.removeAttribute(t)},hasClass:Ie,css:function(e,t,n){return t=xe(t),w(n)?void(e.style[t]=n):e.style[t];
},attr:function(e,t,r){var i=e.nodeType;if(i!==Xr&&i!==Zr&&i!==Qr){var o=Sr(t);if(gi[o]){if(!w(r))return e[t]||(e.attributes.getNamedItem(t)||$).specified?o:n;r?(e[t]=!0,e.setAttribute(t,o)):(e[t]=!1,e.removeAttribute(o))}else if(w(r))e.setAttribute(t,r);else if(e.getAttribute){var a=e.getAttribute(t,2);return null===a?n:a}}},prop:function(e,t,n){return w(n)?void(e[t]=n):e[t]},text:function(){function e(e,t){if(y(t)){var n=e.nodeType;return n===Kr||n===Xr?e.textContent:""}e.textContent=t}return e.$dv="",e}(),val:function(e,t){if(y(t)){if(e.multiple&&"select"===R(e)){var n=[];return o(e.options,function(e){e.selected&&n.push(e.value||e.text)}),0===n.length?null:n}return e.value}e.value=t},html:function(e,t){return y(t)?e.innerHTML:(Te(e,!0),void(e.innerHTML=t))},empty:Ue},function(e,t){Oe.prototype[t]=function(t,n){var r,i,o=this.length;if(e!==Ue&&y(2==e.length&&e!==Ie&&e!==Fe?t:n)){if(b(t)){for(r=0;o>r;r++)if(e===Pe)e(this[r],t);else for(i in t)e(this[r],i,t[i]);return this}for(var a=e.$dv,s=y(a)?Math.min(o,1):o,u=0;s>u;u++){var c=e(this[u],t,n);a=a?a+c:c}return a}for(r=0;o>r;r++)e(this[r],t,n);return this}}),o({removeData:Ve,on:function(e,t,r,i){if(w(i))throw li("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");if(Ee(e)){var o=Ne(e,!0),a=o.events,s=o.handle;s||(s=o.handle=We(e,a));for(var u=t.indexOf(" ")>=0?t.split(" "):[t],c=u.length,l=function(t,n,i){var o=a[t];o||(o=a[t]=[],o.specialHandlerWrapper=n,"$destroy"===t||i||oi(e,t,s)),o.push(r)};c--;)t=u[c],ci[t]?(l(ci[t],Ye),l(t,n,!0)):l(t)}},off:je,one:function(e,t,n){e=Mr(e),e.on(t,function r(){e.off(t,n),e.off(t,r)}),e.on(t,n)},replaceWith:function(e,t){var n,r=e.parentNode;Te(e),o(new Oe(t),function(t){n?r.insertBefore(t,n.nextSibling):r.replaceChild(t,e),n=t})},children:function(e){var t=[];return o(e.childNodes,function(e){e.nodeType===Kr&&t.push(e)}),t},contents:function(e){return e.contentDocument||e.childNodes||[]},append:function(e,t){var n=e.nodeType;if(n===Kr||n===ti){t=new Oe(t);for(var r=0,i=t.length;i>r;r++){var o=t[r];e.appendChild(o)}}},prepend:function(e,t){if(e.nodeType===Kr){var n=e.firstChild;o(new Oe(t),function(t){e.insertBefore(t,n)})}},wrap:function(e,t){t=Mr(t).eq(0).clone()[0];var n=e.parentNode;n&&n.replaceChild(t,e),t.appendChild(e)},remove:He,detach:function(e){He(e,!0)},after:function(e,t){var n=e,r=e.parentNode;t=new Oe(t);for(var i=0,o=t.length;o>i;i++){var a=t[i];r.insertBefore(a,n.nextSibling),n=a}},addClass:qe,removeClass:De,toggleClass:function(e,t,n){t&&o(t.split(" "),function(t){var r=n;y(r)&&(r=!Ie(e,t)),(r?qe:De)(e,t)})},parent:function(e){var t=e.parentNode;return t&&t.nodeType!==ti?t:null},next:function(e){return e.nextElementSibling},find:function(e,t){return e.getElementsByTagName?e.getElementsByTagName(t):[]},clone:Me,triggerHandler:function(e,t,n){var r,i,a,s=t.type||t,u=Ne(e),c=u&&u.events,l=c&&c[s];l&&(r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return this.defaultPrevented===!0},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return this.immediatePropagationStopped===!0},stopPropagation:$,type:s,target:e},t.type&&(r=f(r,t)),i=U(l),a=n?[r].concat(n):[r],o(i,function(t){r.isImmediatePropagationStopped()||t.apply(e,a)}))}},function(e,t){Oe.prototype[t]=function(t,n,r){for(var i,o=0,a=this.length;a>o;o++)y(i)?(i=e(this[o],t,n,r),w(i)&&(i=Mr(i))):Re(i,e(this[o],t,n,r));return w(i)?i:this},Oe.prototype.bind=Oe.prototype.on,Oe.prototype.unbind=Oe.prototype.off}),Ze.prototype={put:function(e,t){this[Ke(e,this.nextUid)]=t},get:function(e){return this[Ke(e,this.nextUid)]},remove:function(e){var t=this[e=Ke(e,this.nextUid)];return delete this[e],t}};var bi=[function(){this.$get=[function(){return Ze}]}],xi=/^[^\(]*\(\s*([^\)]*)\)/m,Si=/,/,Ei=/^\s*(_?)(\S+?)\1\s*$/,Ci=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Ai=r("$injector");et.$$annotate=Qe;var ki=r("$animate"),Oi=1,Mi="ng-animate",Ti=function(){this.$get=["$q","$$rAF",function(e,t){function n(){}return n.all=$,n.chain=$,n.prototype={end:$,cancel:$,resume:$,pause:$,complete:$,then:function(n,r){return e(function(e){t(function(){e()})}).then(n,r)}},n}]},ji=function(){var e=new Ze,t=[];this.$get=["$$AnimateRunner","$rootScope",function(n,r){function i(e,t,n){var r=!1;return t&&(t=S(t)?t.split(" "):Ur(t)?t:[],o(t,function(t){t&&(r=!0,e[t]=n)})),r}function a(){o(t,function(t){var n=e.get(t);if(n){var r=it(t.attr("class")),i="",a="";o(n,function(e,t){var n=!!r[t];e!==n&&(e?i+=(i.length?" ":"")+t:a+=(a.length?" ":"")+t)}),o(t,function(e){i&&qe(e,i),a&&De(e,a)}),e.remove(t)}}),t.length=0}function s(n,o,s){var u=e.get(n)||{},c=i(u,o,!0),l=i(u,s,!1);(c||l)&&(e.put(n,u),t.push(n),1===t.length&&r.$$postDigest(a))}return{enabled:$,on:$,off:$,pin:$,push:function(e,t,r,i){return i&&i(),r=r||{},r.from&&e.css(r.from),r.to&&e.css(r.to),(r.addClass||r.removeClass)&&s(e,r.addClass,r.removeClass),new n}}}]},Vi=["$provide",function(e){var t=this;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw ki("notcsel","Expecting class selector starting with '.' got '{0}'.",n);var i=n+"-animation";t.$$registeredAnimations[n.substr(1)]=i,e.factory(i,r)},this.classNameFilter=function(e){if(1===arguments.length&&(this.$$classNameFilter=e instanceof RegExp?e:null,this.$$classNameFilter)){var t=new RegExp("(\\s+|\\/)"+Mi+"(\\s+|\\/)");if(t.test(this.$$classNameFilter.toString()))throw ki("nongcls",'$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',Mi)}return this.$$classNameFilter},this.$get=["$$animateQueue",function(e){function t(e,t,n){if(n){var r=rt(n);!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(e):t.prepend(e)}return{on:e.on,off:e.off,pin:e.pin,enabled:e.enabled,cancel:function(e){e.end&&e.end()},enter:function(n,r,i,o){return r=r&&Mr(r),i=i&&Mr(i),r=r||i.parent(),t(n,r,i),e.push(n,"enter",ot(o))},move:function(n,r,i,o){return r=r&&Mr(r),i=i&&Mr(i),r=r||i.parent(),t(n,r,i),e.push(n,"move",ot(o))},leave:function(t,n){return e.push(t,"leave",ot(n),function(){t.remove()})},addClass:function(t,n,r){return r=ot(r),r.addClass=nt(r.addclass,n),e.push(t,"addClass",r)},removeClass:function(t,n,r){return r=ot(r),r.removeClass=nt(r.removeClass,n),e.push(t,"removeClass",r)},setClass:function(t,n,r,i){return i=ot(i),i.addClass=nt(i.addClass,n),i.removeClass=nt(i.removeClass,r),e.push(t,"setClass",i)},animate:function(t,n,r,i,o){return o=ot(o),o.from=o.from?f(o.from,n):n,o.to=o.to?f(o.to,r):r,i=i||"ng-inline-animate",o.tempClasses=nt(o.tempClasses,i),e.push(t,"animate",o)}}}]}],Ni=function(){this.$get=["$$rAF","$q",function(e,t){var n=function(){};return n.prototype={done:function(e){this.defer&&this.defer[e===!0?"reject":"resolve"]()},end:function(){this.done()},cancel:function(){this.done(!0)},getPromise:function(){return this.defer||(this.defer=t.defer()),this.defer.promise},then:function(e,t){return this.getPromise().then(e,t)},"catch":function(e){return this.getPromise()["catch"](e)},"finally":function(e){return this.getPromise()["finally"](e)}},function(t,r){function i(){return e(function(){o(),a||s.done(),a=!0}),s}function o(){r.addClass&&(t.addClass(r.addClass),r.addClass=null),r.removeClass&&(t.removeClass(r.removeClass),r.removeClass=null),r.to&&(t.css(r.to),r.to=null)}r.cleanupStyles&&(r.from=r.to=null),r.from&&(t.css(r.from),r.from=null);var a,s=new n;return{start:i,end:i}}}]},Pi=r("$compile");lt.$inject=["$provide","$$sanitizeUriProvider"];var Ii=/^((?:x|data)[\:\-_])/i,Di=r("$controller"),qi=/^(\S+)(\s+as\s+(\w+))?$/,Ri=function(){this.$get=["$document",function(e){return function(t){return t?!t.nodeType&&t instanceof Mr&&(t=t[0]):t=e[0].body,t.offsetWidth+1}}]},Fi="application/json",_i={"Content-Type":Fi+";charset=utf-8"},Ui=/^\[|^\{(?!\{)/,Hi={"[":/]$/,"{":/}$/},Bi=/^\)\]\}',?\n/,Li=r("$http"),zi=function(e){return function(){throw Li("legacy","The method `{0}` on the promise returned from `$http` has been disabled.",e)}},Wi=Rr.$interpolateMinErr=r("$interpolate");Wi.throwNoconcat=function(e){throw Wi("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",e)},Wi.interr=function(e,t){return Wi("interr","Can't interpolate: {0}\n{1}",e,t.toString())};var Gi=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,Yi={http:80,https:443,ftp:21},Ji=r("$location"),Ki={$$html5:!1,$$replace:!1,absUrl:Lt("$$absUrl"),url:function(e){if(y(e))return this.$$url;var t=Gi.exec(e);return(t[1]||""===e)&&this.path(decodeURIComponent(t[1])),(t[2]||t[1]||""===e)&&this.search(t[3]||""),this.hash(t[5]||""),this},protocol:Lt("$$protocol"),host:Lt("$$host"),port:Lt("$$port"),path:zt("$$path",function(e){return e=null!==e?e.toString():"","/"==e.charAt(0)?e:"/"+e}),search:function(e,t){switch(arguments.length){case 0:return this.$$search;case 1:if(S(e)||E(e))e=e.toString(),this.$$search=ee(e);else{if(!b(e))throw Ji("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");e=_(e,{}),o(e,function(t,n){null==t&&delete e[n]}),this.$$search=e}break;default:y(t)||null===t?delete this.$$search[e]:this.$$search[e]=t}return this.$$compose(),this},hash:zt("$$hash",function(e){return null!==e?e.toString():""}),replace:function(){return this.$$replace=!0,this}};o([Bt,Ht,Ut],function(e){e.prototype=Object.create(Ki),e.prototype.state=function(t){if(!arguments.length)return this.$$state;if(e!==Ut||!this.$$html5)throw Ji("nostate","History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");return this.$$state=y(t)?null:t,this}});var Zi=r("$parse"),Xi=Function.prototype.call,Qi=Function.prototype.apply,eo=Function.prototype.bind,to=ve();o("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(e){to[e]=!0});var no={n:"\n",f:"\f",r:"\r",t:"	",v:"\x0B","'":"'",'"':'"'},ro=function(e){this.options=e};ro.prototype={constructor:ro,lex:function(e){for(this.text=e,this.index=0,this.tokens=[];this.index<this.text.length;){var t=this.text.charAt(this.index);if('"'===t||"'"===t)this.readString(t);else if(this.isNumber(t)||"."===t&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdent(t))this.readIdent();else if(this.is(t,"(){}[].,;:?"))this.tokens.push({index:this.index,text:t}),this.index++;else if(this.isWhitespace(t))this.index++;else{var n=t+this.peek(),r=n+this.peek(2),i=to[t],o=to[n],a=to[r];if(i||o||a){var s=a?r:o?n:t;this.tokens.push({index:this.index,text:s,operator:!0}),this.index+=s.length}else this.throwError("Unexpected next character ",this.index,this.index+1)}}return this.tokens},is:function(e,t){return-1!==t.indexOf(e)},peek:function(e){var t=e||1;return this.index+t<this.text.length?this.text.charAt(this.index+t):!1},isNumber:function(e){return e>="0"&&"9">=e&&"string"==typeof e},isWhitespace:function(e){return" "===e||"\r"===e||"	"===e||"\n"===e||"\x0B"===e||" "===e},isIdent:function(e){return e>="a"&&"z">=e||e>="A"&&"Z">=e||"_"===e||"$"===e},isExpOperator:function(e){return"-"===e||"+"===e||this.isNumber(e)},throwError:function(e,t,n){n=n||this.index;var r=w(t)?"s "+t+"-"+this.index+" ["+this.text.substring(t,n)+"]":" "+n;throw Zi("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",e,r,this.text)},readNumber:function(){for(var e="",t=this.index;this.index<this.text.length;){var n=Sr(this.text.charAt(this.index));if("."==n||this.isNumber(n))e+=n;else{var r=this.peek();if("e"==n&&this.isExpOperator(r))e+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"==e.charAt(e.length-1))e+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!=e.charAt(e.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:t,text:e,constant:!0,value:Number(e)})},readIdent:function(){for(var e=this.index;this.index<this.text.length;){var t=this.text.charAt(this.index);if(!this.isIdent(t)&&!this.isNumber(t))break;this.index++}this.tokens.push({index:e,text:this.text.slice(e,this.index),identifier:!0})},readString:function(e){var t=this.index;this.index++;for(var n="",r=e,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index);if(r+=o,i){if("u"===o){var a=this.text.substring(this.index+1,this.index+5);a.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+a+"]"),this.index+=4,n+=String.fromCharCode(parseInt(a,16))}else{var s=no[o];n+=s||o}i=!1}else if("\\"===o)i=!0;else{if(o===e)return this.index++,void this.tokens.push({index:t,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",t)}};var io=function(e,t){this.lexer=e,this.options=t};io.Program="Program",io.ExpressionStatement="ExpressionStatement",io.AssignmentExpression="AssignmentExpression",io.ConditionalExpression="ConditionalExpression",io.LogicalExpression="LogicalExpression",io.BinaryExpression="BinaryExpression",io.UnaryExpression="UnaryExpression",io.CallExpression="CallExpression",io.MemberExpression="MemberExpression",io.Identifier="Identifier",io.Literal="Literal",io.ArrayExpression="ArrayExpression",io.Property="Property",io.ObjectExpression="ObjectExpression",io.ThisExpression="ThisExpression",io.NGValueParameter="NGValueParameter",io.prototype={ast:function(e){this.text=e,this.tokens=this.lexer.lex(e);var t=this.program();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),t},program:function(){for(var e=[];;)if(this.tokens.length>0&&!this.peek("}",")",";","]")&&e.push(this.expressionStatement()),!this.expect(";"))return{type:io.Program,body:e}},expressionStatement:function(){return{type:io.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var e,t=this.expression();e=this.expect("|");)t=this.filter(t);return t},expression:function(){return this.assignment()},assignment:function(){var e=this.ternary();return this.expect("=")&&(e={type:io.AssignmentExpression,left:e,right:this.assignment(),operator:"="}),e},ternary:function(){var e,t,n=this.logicalOR();return this.expect("?")&&(e=this.expression(),this.consume(":"))?(t=this.expression(),{type:io.ConditionalExpression,test:n,alternate:e,consequent:t}):n},logicalOR:function(){for(var e=this.logicalAND();this.expect("||");)e={type:io.LogicalExpression,operator:"||",left:e,right:this.logicalAND()};return e},logicalAND:function(){for(var e=this.equality();this.expect("&&");)e={type:io.LogicalExpression,operator:"&&",left:e,right:this.equality()};return e},equality:function(){for(var e,t=this.relational();e=this.expect("==","!=","===","!==");)t={type:io.BinaryExpression,operator:e.text,left:t,right:this.relational()};return t},relational:function(){for(var e,t=this.additive();e=this.expect("<",">","<=",">=");)t={type:io.BinaryExpression,operator:e.text,left:t,right:this.additive()};return t},additive:function(){for(var e,t=this.multiplicative();e=this.expect("+","-");)t={type:io.BinaryExpression,operator:e.text,left:t,right:this.multiplicative()};return t},multiplicative:function(){for(var e,t=this.unary();e=this.expect("*","/","%");)t={type:io.BinaryExpression,operator:e.text,left:t,right:this.unary()};return t},unary:function(){var e;return(e=this.expect("+","-","!"))?{type:io.UnaryExpression,operator:e.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var e;this.expect("(")?(e=this.filterChain(),this.consume(")")):this.expect("[")?e=this.arrayDeclaration():this.expect("{")?e=this.object():this.constants.hasOwnProperty(this.peek().text)?e=_(this.constants[this.consume().text]):this.peek().identifier?e=this.identifier():this.peek().constant?e=this.constant():this.throwError("not a primary expression",this.peek());for(var t;t=this.expect("(","[",".");)"("===t.text?(e={type:io.CallExpression,callee:e,arguments:this.parseArguments()},this.consume(")")):"["===t.text?(e={type:io.MemberExpression,object:e,property:this.expression(),computed:!0},this.consume("]")):"."===t.text?e={type:io.MemberExpression,object:e,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return e},filter:function(e){for(var t=[e],n={type:io.CallExpression,callee:this.identifier(),arguments:t,filter:!0};this.expect(":");)t.push(this.expression());return n},parseArguments:function(){var e=[];if(")"!==this.peekToken().text)do e.push(this.expression());while(this.expect(","));return e},identifier:function(){var e=this.consume();return e.identifier||this.throwError("is not a valid identifier",e),{type:io.Identifier,name:e.text}},constant:function(){return{type:io.Literal,value:this.consume().value}},arrayDeclaration:function(){var e=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;e.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:io.ArrayExpression,elements:e}},object:function(){var e,t=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;e={type:io.Property,kind:"init"},this.peek().constant?e.key=this.constant():this.peek().identifier?e.key=this.identifier():this.throwError("invalid key",this.peek()),this.consume(":"),e.value=this.expression(),t.push(e)}while(this.expect(","));return this.consume("}"),{type:io.ObjectExpression,properties:t}},throwError:function(e,t){throw Zi("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",t.text,e,t.index+1,this.text,this.text.substring(t.index))},consume:function(e){if(0===this.tokens.length)throw Zi("ueoe","Unexpected end of expression: {0}",this.text);var t=this.expect(e);return t||this.throwError("is unexpected, expecting ["+e+"]",this.peek()),t},peekToken:function(){if(0===this.tokens.length)throw Zi("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(e,t,n,r){return this.peekAhead(0,e,t,n,r)},peekAhead:function(e,t,n,r,i){if(this.tokens.length>e){var o=this.tokens[e],a=o.text;if(a===t||a===n||a===r||a===i||!t&&!n&&!r&&!i)return o}return!1},expect:function(e,t,n,r){var i=this.peek(e,t,n,r);return i?(this.tokens.shift(),i):!1},constants:{"true":{type:io.Literal,value:!0},"false":{type:io.Literal,value:!1},"null":{type:io.Literal,value:null},undefined:{type:io.Literal,value:n},"this":{type:io.ThisExpression}}},cn.prototype={compile:function(e,t){var r=this,i=this.astBuilder.ast(e);this.state={nextId:0,filters:{},expensiveChecks:t,fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},nn(i,r.$filter);var a,s="";if(this.stage="assign",a=an(i)){this.state.computing="assign";var u=this.nextId();this.recurse(a,u),this.return_(u),s="fn.assign="+this.generateFunction("assign","s,v,l")}var c=rn(i.body);r.stage="inputs",o(c,function(e,t){var n="fn"+t;r.state[n]={vars:[],body:[],own:{}},r.state.computing=n;var i=r.nextId();r.recurse(e,i),r.return_(i),r.state.inputs.push(n),e.watchId=t}),this.state.computing="fn",this.stage="main",this.recurse(i);var l='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+s+this.watchFns()+"return fn;",f=new Function("$filter","ensureSafeMemberName","ensureSafeObject","ensureSafeFunction","getStringValue","ensureSafeAssignContext","ifDefined","plus","text",l)(this.$filter,Yt,Kt,Zt,Jt,Xt,Qt,en,e);return this.state=this.stage=n,f.literal=sn(i),f.constant=un(i),f},USE:"use",STRICT:"strict",watchFns:function(){var e=[],t=this.state.inputs,n=this;return o(t,function(t){e.push("var "+t+"="+n.generateFunction(t,"s"))}),t.length&&e.push("fn.inputs=["+t.join(",")+"];"),e.join("")},generateFunction:function(e,t){return"function("+t+"){"+this.varsPrefix(e)+this.body(e)+"};"},filterPrefix:function(){var e=[],t=this;return o(this.state.filters,function(n,r){e.push(n+"=$filter("+t.escape(r)+")")}),e.length?"var "+e.join(",")+";":""},varsPrefix:function(e){return this.state[e].vars.length?"var "+this.state[e].vars.join(",")+";":""},body:function(e){return this.state[e].body.join("")},recurse:function(e,t,r,i,a,s){var u,c,l,f,h=this;if(i=i||$,!s&&w(e.watchId))return t=t||this.nextId(),void this.if_("i",this.lazyAssign(t,this.computedMember("i",e.watchId)),this.lazyRecurse(e,t,r,i,a,!0));switch(e.type){case io.Program:o(e.body,function(t,r){h.recurse(t.expression,n,n,function(e){c=e}),r!==e.body.length-1?h.current().body.push(c,";"):h.return_(c)});break;case io.Literal:f=this.escape(e.value),this.assign(t,f),i(f);break;case io.UnaryExpression:this.recurse(e.argument,n,n,function(e){c=e}),f=e.operator+"("+this.ifDefined(c,0)+")",this.assign(t,f),i(f);break;case io.BinaryExpression:this.recurse(e.left,n,n,function(e){u=e}),this.recurse(e.right,n,n,function(e){c=e}),f="+"===e.operator?this.plus(u,c):"-"===e.operator?this.ifDefined(u,0)+e.operator+this.ifDefined(c,0):"("+u+")"+e.operator+"("+c+")",this.assign(t,f),i(f);break;case io.LogicalExpression:t=t||this.nextId(),h.recurse(e.left,t),h.if_("&&"===e.operator?t:h.not(t),h.lazyRecurse(e.right,t)),i(t);break;case io.ConditionalExpression:t=t||this.nextId(),h.recurse(e.test,t),h.if_(t,h.lazyRecurse(e.alternate,t),h.lazyRecurse(e.consequent,t)),i(t);break;case io.Identifier:t=t||this.nextId(),r&&(r.context="inputs"===h.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",e.name)+"?l:s"),r.computed=!1,r.name=e.name),Yt(e.name),h.if_("inputs"===h.stage||h.not(h.getHasOwnProperty("l",e.name)),function(){h.if_("inputs"===h.stage||"s",function(){a&&1!==a&&h.if_(h.not(h.nonComputedMember("s",e.name)),h.lazyAssign(h.nonComputedMember("s",e.name),"{}")),h.assign(t,h.nonComputedMember("s",e.name))})},t&&h.lazyAssign(t,h.nonComputedMember("l",e.name))),(h.state.expensiveChecks||fn(e.name))&&h.addEnsureSafeObject(t),i(t);break;case io.MemberExpression:u=r&&(r.context=this.nextId())||this.nextId(),t=t||this.nextId(),h.recurse(e.object,u,n,function(){h.if_(h.notNull(u),function(){e.computed?(c=h.nextId(),h.recurse(e.property,c),h.getStringValue(c),h.addEnsureSafeMemberName(c),a&&1!==a&&h.if_(h.not(h.computedMember(u,c)),h.lazyAssign(h.computedMember(u,c),"{}")),f=h.ensureSafeObject(h.computedMember(u,c)),h.assign(t,f),r&&(r.computed=!0,r.name=c)):(Yt(e.property.name),a&&1!==a&&h.if_(h.not(h.nonComputedMember(u,e.property.name)),h.lazyAssign(h.nonComputedMember(u,e.property.name),"{}")),f=h.nonComputedMember(u,e.property.name),(h.state.expensiveChecks||fn(e.property.name))&&(f=h.ensureSafeObject(f)),h.assign(t,f),r&&(r.computed=!1,r.name=e.property.name))},function(){h.assign(t,"undefined")}),i(t)},!!a);break;case io.CallExpression:t=t||this.nextId(),e.filter?(c=h.filter(e.callee.name),l=[],o(e.arguments,function(e){var t=h.nextId();h.recurse(e,t),l.push(t)}),f=c+"("+l.join(",")+")",h.assign(t,f),i(t)):(c=h.nextId(),u={},l=[],h.recurse(e.callee,c,u,function(){h.if_(h.notNull(c),function(){h.addEnsureSafeFunction(c),o(e.arguments,function(e){h.recurse(e,h.nextId(),n,function(e){l.push(h.ensureSafeObject(e))})}),u.name?(h.state.expensiveChecks||h.addEnsureSafeObject(u.context),f=h.member(u.context,u.name,u.computed)+"("+l.join(",")+")"):f=c+"("+l.join(",")+")",f=h.ensureSafeObject(f),h.assign(t,f)},function(){h.assign(t,"undefined")}),i(t)}));break;case io.AssignmentExpression:if(c=this.nextId(),u={},!on(e.left))throw Zi("lval","Trying to assing a value to a non l-value");this.recurse(e.left,n,u,function(){h.if_(h.notNull(u.context),function(){h.recurse(e.right,c),h.addEnsureSafeObject(h.member(u.context,u.name,u.computed)),h.addEnsureSafeAssignContext(u.context),f=h.member(u.context,u.name,u.computed)+e.operator+c,h.assign(t,f),i(t||f)})},1);break;case io.ArrayExpression:l=[],o(e.elements,function(e){h.recurse(e,h.nextId(),n,function(e){l.push(e)})}),f="["+l.join(",")+"]",this.assign(t,f),i(f);break;case io.ObjectExpression:l=[],o(e.properties,function(e){h.recurse(e.value,h.nextId(),n,function(t){l.push(h.escape(e.key.type===io.Identifier?e.key.name:""+e.key.value)+":"+t)})}),f="{"+l.join(",")+"}",this.assign(t,f),i(f);break;case io.ThisExpression:this.assign(t,"s"),i("s");break;case io.NGValueParameter:this.assign(t,"v"),i("v")}},getHasOwnProperty:function(e,t){var n=e+"."+t,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,e+"&&("+this.escape(t)+" in "+e+")")),r[n]},assign:function(e,t){return e?(this.current().body.push(e,"=",t,";"),e):void 0},filter:function(e){return this.state.filters.hasOwnProperty(e)||(this.state.filters[e]=this.nextId(!0)),this.state.filters[e]},ifDefined:function(e,t){return"ifDefined("+e+","+this.escape(t)+")"},plus:function(e,t){return"plus("+e+","+t+")"},return_:function(e){this.current().body.push("return ",e,";")},if_:function(e,t,n){if(e===!0)t();else{var r=this.current().body;r.push("if(",e,"){"),t(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(e){return"!("+e+")"},notNull:function(e){return e+"!=null"},nonComputedMember:function(e,t){return e+"."+t},computedMember:function(e,t){return e+"["+t+"]"},member:function(e,t,n){return n?this.computedMember(e,t):this.nonComputedMember(e,t)},addEnsureSafeObject:function(e){this.current().body.push(this.ensureSafeObject(e),";")},addEnsureSafeMemberName:function(e){this.current().body.push(this.ensureSafeMemberName(e),";")},addEnsureSafeFunction:function(e){this.current().body.push(this.ensureSafeFunction(e),";")},addEnsureSafeAssignContext:function(e){this.current().body.push(this.ensureSafeAssignContext(e),";")},ensureSafeObject:function(e){return"ensureSafeObject("+e+",text)"},ensureSafeMemberName:function(e){return"ensureSafeMemberName("+e+",text)"},ensureSafeFunction:function(e){return"ensureSafeFunction("+e+",text)"},getStringValue:function(e){this.assign(e,"getStringValue("+e+",text)")},ensureSafeAssignContext:function(e){return"ensureSafeAssignContext("+e+",text)"},lazyRecurse:function(e,t,n,r,i,o){var a=this;return function(){a.recurse(e,t,n,r,i,o)}},lazyAssign:function(e,t){var n=this;return function(){n.assign(e,t)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)},escape:function(e){if(S(e))return"'"+e.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(E(e))return e.toString();if(e===!0)return"true";if(e===!1)return"false";if(null===e)return"null";if("undefined"==typeof e)return"undefined";throw Zi("esc","IMPOSSIBLE")},nextId:function(e,t){var n="v"+this.state.nextId++;return e||this.current().vars.push(n+(t?"="+t:"")),n},current:function(){return this.state[this.state.computing]}},ln.prototype={compile:function(e,t){var n=this,r=this.astBuilder.ast(e);this.expression=e,this.expensiveChecks=t,nn(r,n.$filter);var i,a;(i=an(r))&&(a=this.recurse(i));var s,u=rn(r.body);u&&(s=[],o(u,function(e,t){var r=n.recurse(e);e.input=r,s.push(r),e.watchId=t}));var c=[];o(r.body,function(e){c.push(n.recurse(e.expression))});var l=0===r.body.length?function(){}:1===r.body.length?c[0]:function(e,t){var n;return o(c,function(r){n=r(e,t)}),n};return a&&(l.assign=function(e,t,n){return a(e,n,t)}),s&&(l.inputs=s),l.literal=sn(r),l.constant=un(r),l},recurse:function(e,t,r){var i,a,s,u=this;if(e.input)return this.inputs(e.input,e.watchId);switch(e.type){case io.Literal:return this.value(e.value,t);case io.UnaryExpression:return a=this.recurse(e.argument),this["unary"+e.operator](a,t);case io.BinaryExpression:return i=this.recurse(e.left),a=this.recurse(e.right),this["binary"+e.operator](i,a,t);case io.LogicalExpression:return i=this.recurse(e.left),a=this.recurse(e.right),this["binary"+e.operator](i,a,t);case io.ConditionalExpression:return this["ternary?:"](this.recurse(e.test),this.recurse(e.alternate),this.recurse(e.consequent),t);case io.Identifier:return Yt(e.name,u.expression),u.identifier(e.name,u.expensiveChecks||fn(e.name),t,r,u.expression);case io.MemberExpression:return i=this.recurse(e.object,!1,!!r),e.computed||(Yt(e.property.name,u.expression),a=e.property.name),e.computed&&(a=this.recurse(e.property)),e.computed?this.computedMember(i,a,t,r,u.expression):this.nonComputedMember(i,a,u.expensiveChecks,t,r,u.expression);case io.CallExpression:return s=[],o(e.arguments,function(e){s.push(u.recurse(e))}),e.filter&&(a=this.$filter(e.callee.name)),e.filter||(a=this.recurse(e.callee,!0)),e.filter?function(e,r,i,o){for(var u=[],c=0;c<s.length;++c)u.push(s[c](e,r,i,o));var l=a.apply(n,u,o);return t?{context:n,name:n,value:l}:l}:function(e,n,r,i){var o,c=a(e,n,r,i);if(null!=c.value){Kt(c.context,u.expression),Zt(c.value,u.expression);for(var l=[],f=0;f<s.length;++f)l.push(Kt(s[f](e,n,r,i),u.expression));o=Kt(c.value.apply(c.context,l),u.expression)}return t?{value:o}:o};case io.AssignmentExpression:return i=this.recurse(e.left,!0,1),a=this.recurse(e.right),function(e,n,r,o){var s=i(e,n,r,o),c=a(e,n,r,o);return Kt(s.value,u.expression),Xt(s.context),s.context[s.name]=c,t?{value:c}:c};case io.ArrayExpression:return s=[],o(e.elements,function(e){s.push(u.recurse(e))}),function(e,n,r,i){for(var o=[],a=0;a<s.length;++a)o.push(s[a](e,n,r,i));return t?{value:o}:o};case io.ObjectExpression:return s=[],o(e.properties,function(e){s.push({key:e.key.type===io.Identifier?e.key.name:""+e.key.value,value:u.recurse(e.value)})}),function(e,n,r,i){for(var o={},a=0;a<s.length;++a)o[s[a].key]=s[a].value(e,n,r,i);return t?{value:o}:o};case io.ThisExpression:return function(e){return t?{value:e}:e};case io.NGValueParameter:return function(e,n,r,i){return t?{value:r}:r}}},"unary+":function(e,t){return function(n,r,i,o){var a=e(n,r,i,o);return a=w(a)?+a:0,t?{value:a}:a}},"unary-":function(e,t){return function(n,r,i,o){var a=e(n,r,i,o);return a=w(a)?-a:0,t?{value:a}:a}},"unary!":function(e,t){return function(n,r,i,o){var a=!e(n,r,i,o);return t?{value:a}:a}},"binary+":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a),u=t(r,i,o,a),c=en(s,u);return n?{value:c}:c}},"binary-":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a),u=t(r,i,o,a),c=(w(s)?s:0)-(w(u)?u:0);return n?{value:c}:c}},"binary*":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)*t(r,i,o,a);return n?{value:s}:s}},"binary/":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)/t(r,i,o,a);return n?{value:s}:s}},"binary%":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)%t(r,i,o,a);return n?{value:s}:s}},"binary===":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)===t(r,i,o,a);return n?{value:s}:s}},"binary!==":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)!==t(r,i,o,a);return n?{value:s}:s}},"binary==":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)==t(r,i,o,a);return n?{value:s}:s}},"binary!=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)!=t(r,i,o,a);return n?{value:s}:s}},"binary<":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)<t(r,i,o,a);return n?{value:s}:s}},"binary>":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)>t(r,i,o,a);return n?{value:s}:s}},"binary<=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)<=t(r,i,o,a);return n?{value:s}:s}},"binary>=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)>=t(r,i,o,a);return n?{value:s}:s}},"binary&&":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)&&t(r,i,o,a);return n?{value:s}:s}},"binary||":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)||t(r,i,o,a);return n?{value:s}:s}},"ternary?:":function(e,t,n,r){return function(i,o,a,s){var u=e(i,o,a,s)?t(i,o,a,s):n(i,o,a,s);return r?{value:u}:u}},value:function(e,t){return function(){return t?{context:n,name:n,value:e}:e}},identifier:function(e,t,r,i,o){return function(a,s,u,c){var l=s&&e in s?s:a;i&&1!==i&&l&&!l[e]&&(l[e]={});var f=l?l[e]:n;return t&&Kt(f,o),r?{context:l,name:e,value:f}:f}},computedMember:function(e,t,n,r,i){return function(o,a,s,u){var c,l,f=e(o,a,s,u);return null!=f&&(c=t(o,a,s,u),c=Jt(c),Yt(c,i),r&&1!==r&&f&&!f[c]&&(f[c]={}),l=f[c],Kt(l,i)),n?{context:f,name:c,value:l}:l}},nonComputedMember:function(e,t,r,i,o,a){return function(s,u,c,l){var f=e(s,u,c,l);o&&1!==o&&f&&!f[t]&&(f[t]={});var h=null!=f?f[t]:n;return(r||fn(t))&&Kt(h,a),i?{context:f,name:t,value:h}:h}},inputs:function(e,t){
return function(n,r,i,o){return o?o[t]:e(n,r,i)}}};var oo=function(e,t,n){this.lexer=e,this.$filter=t,this.options=n,this.ast=new io(this.lexer),this.astCompiler=n.csp?new ln(this.ast,t):new cn(this.ast,t)};oo.prototype={constructor:oo,parse:function(e){return this.astCompiler.compile(e,this.options.expensiveChecks)}};var ao=(ve(),ve(),Object.prototype.valueOf),so=r("$sce"),uo={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Pi=r("$compile"),co=t.createElement("a"),lo=On(e.location.href);jn.$inject=["$document"],Nn.$inject=["$provide"],Rn.$inject=["$locale"],Fn.$inject=["$locale"];var fo=".",ho={yyyy:Hn("FullYear",4),yy:Hn("FullYear",2,0,!0),y:Hn("FullYear",1),MMMM:Bn("Month"),MMM:Bn("Month",!0),MM:Hn("Month",2,1),M:Hn("Month",1,1),dd:Hn("Date",2),d:Hn("Date",1),HH:Hn("Hours",2),H:Hn("Hours",1),hh:Hn("Hours",2,-12),h:Hn("Hours",1,-12),mm:Hn("Minutes",2),m:Hn("Minutes",1),ss:Hn("Seconds",2),s:Hn("Seconds",1),sss:Hn("Milliseconds",3),EEEE:Bn("Day"),EEE:Bn("Day",!0),a:Yn,Z:Ln,ww:Gn(2),w:Gn(1),G:Jn,GG:Jn,GGG:Jn,GGGG:Kn},po=/((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,$o=/^\-?\d+$/;Zn.$inject=["$locale"];var vo=m(Sr),mo=m(Cr);er.$inject=["$parse"];var go=m({restrict:"E",compile:function(e,t){return t.href||t.xlinkHref?void 0:function(e,t){if("a"===t[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===Ir.call(t.prop("href"))?"xlink:href":"href";t.on("click",function(e){t.attr(n)||e.preventDefault()})}}}}),yo={};o(gi,function(e,t){function n(e,n,i){e.$watch(i[r],function(e){i.$set(t,!!e)})}if("multiple"!=e){var r=ft("ng-"+t),i=n;"checked"===e&&(i=function(e,t,i){i.ngModel!==i[r]&&n(e,t,i)}),yo[r]=function(){return{restrict:"A",priority:100,link:i}}}}),o(wi,function(e,t){yo[t]=function(){return{priority:100,link:function(e,n,r){if("ngPattern"===t&&"/"==r.ngPattern.charAt(0)){var i=r.ngPattern.match(br);if(i)return void r.$set("ngPattern",new RegExp(i[1],i[2]))}e.$watch(r[t],function(e){r.$set(t,e)})}}}}),o(["src","srcset","href"],function(e){var t=ft("ng-"+e);yo[t]=function(){return{priority:99,link:function(n,r,i){var o=e,a=e;"href"===e&&"[object SVGAnimatedString]"===Ir.call(r.prop("href"))&&(a="xlinkHref",i.$attr[a]="xlink:href",o=null),i.$observe(t,function(t){return t?(i.$set(a,t),void(Or&&o&&r.prop(o,i[a]))):void("href"===e&&i.$set(a,null))})}}}});var wo={$addControl:$,$$renameControl:nr,$removeControl:$,$setValidity:$,$setDirty:$,$setPristine:$,$setSubmitted:$},bo="ng-submitted";rr.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var xo=function(e){return["$timeout","$parse",function(t,r){function i(e){return""===e?r('this[""]').assign:r(e).assign||$}var o={name:"form",restrict:e?"EAC":"E",require:["form","^^?form"],controller:rr,compile:function(r,o){r.addClass(na).addClass(ea);var a=o.name?"name":e&&o.ngForm?"ngForm":!1;return{pre:function(e,r,o,s){var u=s[0];if(!("action"in o)){var c=function(t){e.$apply(function(){u.$commitViewValue(),u.$setSubmitted()}),t.preventDefault()};oi(r[0],"submit",c),r.on("$destroy",function(){t(function(){ai(r[0],"submit",c)},0,!1)})}var l=s[1]||u.$$parentForm;l.$addControl(u);var h=a?i(u.$name):$;a&&(h(e,u),o.$observe(a,function(t){u.$name!==t&&(h(e,n),u.$$parentForm.$$renameControl(u,t),(h=i(u.$name))(e,u))})),r.on("$destroy",function(){u.$$parentForm.$removeControl(u),h(e,n),f(u,wo)})}}}};return o}]},So=xo(),Eo=xo(!0),Co=/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,Ao=/^[A-Za-z][A-Za-z\d.+-]*:\/*(?:\w+(?::\w+)?@)?[^\s/]+(?::\d+)?(?:\/[\w#!:.?+=&%@\-/]*)?$/,ko=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,Oo=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,Mo=/^(\d{4})-(\d{2})-(\d{2})$/,To=/^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,jo=/^(\d{4})-W(\d\d)$/,Vo=/^(\d{4})-(\d\d)$/,No=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Po={text:or,date:cr("date",Mo,ur(Mo,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":cr("datetimelocal",To,ur(To,["yyyy","MM","dd","HH","mm","ss","sss"]),"yyyy-MM-ddTHH:mm:ss.sss"),time:cr("time",No,ur(No,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:cr("week",jo,sr,"yyyy-Www"),month:cr("month",Vo,ur(Vo,["yyyy","MM"]),"yyyy-MM"),number:fr,url:hr,email:pr,radio:dr,checkbox:vr,hidden:$,button:$,submit:$,reset:$,file:$},Io=["$browser","$sniffer","$filter","$parse",function(e,t,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,s){s[0]&&(Po[Sr(a.type)]||Po.text)(i,o,a,s[0],t,e,n,r)}}}}],Do=/^(true|false|\d+)$/,qo=function(){return{restrict:"A",priority:100,compile:function(e,t){return Do.test(t.ngValue)?function(e,t,n){n.$set("value",e.$eval(n.ngValue))}:function(e,t,n){e.$watch(n.ngValue,function(e){n.$set("value",e)})}}}},Ro=["$compile",function(e){return{restrict:"AC",compile:function(t){return e.$$addBindingClass(t),function(t,n,r){e.$$addBindingInfo(n,r.ngBind),n=n[0],t.$watch(r.ngBind,function(e){n.textContent=y(e)?"":e})}}}}],Fo=["$interpolate","$compile",function(e,t){return{compile:function(n){return t.$$addBindingClass(n),function(n,r,i){var o=e(r.attr(i.$attr.ngBindTemplate));t.$$addBindingInfo(r,o.expressions),r=r[0],i.$observe("ngBindTemplate",function(e){r.textContent=y(e)?"":e})}}}}],_o=["$sce","$parse","$compile",function(e,t,n){return{restrict:"A",compile:function(r,i){var o=t(i.ngBindHtml),a=t(i.ngBindHtml,function(e){return(e||"").toString()});return n.$$addBindingClass(r),function(t,r,i){n.$$addBindingInfo(r,i.ngBindHtml),t.$watch(a,function(){r.html(e.getTrustedHtml(o(t))||"")})}}}}],Uo=m({restrict:"A",require:"ngModel",link:function(e,t,n,r){r.$viewChangeListeners.push(function(){e.$eval(n.ngChange)})}}),Ho=mr("",!0),Bo=mr("Odd",0),Lo=mr("Even",1),zo=tr({compile:function(e,t){t.$set("ngCloak",n),e.removeClass("ng-cloak")}}),Wo=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],Go={},Yo={blur:!0,focus:!0};o("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(e){var t=ft("ng-"+e);Go[t]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){var a=n(o[t],null,!0);return function(t,n){n.on(e,function(n){var i=function(){a(t,{$event:n})};Yo[e]&&r.$$phase?t.$evalAsync(i):t.$apply(i)})}}}}]});var Jo=["$animate",function(e){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var s,u,c;n.$watch(i.ngIf,function(n){n?u||a(function(n,o){u=o,n[n.length++]=t.createComment(" end ngIf: "+i.ngIf+" "),s={clone:n},e.enter(n,r.parent(),r)}):(c&&(c.remove(),c=null),u&&(u.$destroy(),u=null),s&&(c=$e(s.clone),e.leave(c).then(function(){c=null}),s=null))})}}}],Ko=["$templateRequest","$anchorScroll","$animate",function(e,t,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:Rr.noop,compile:function(r,i){var o=i.ngInclude||i.src,a=i.onload||"",s=i.autoscroll;return function(r,i,u,c,l){var f,h,p,d=0,$=function(){h&&(h.remove(),h=null),f&&(f.$destroy(),f=null),p&&(n.leave(p).then(function(){h=null}),h=p,p=null)};r.$watch(o,function(o){var u=function(){!w(s)||s&&!r.$eval(s)||t()},h=++d;o?(e(o,!0).then(function(e){if(h===d){var t=r.$new();c.template=e;var s=l(t,function(e){$(),n.enter(e,null,i).then(u)});f=t,p=s,f.$emit("$includeContentLoaded",o),r.$eval(a)}},function(){h===d&&($(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):($(),c.template=null)})}}}}],Zo=["$compile",function(e){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){return/SVG/.test(r[0].toString())?(r.empty(),void e(Ae(o.template,t).childNodes)(n,function(e){r.append(e)},{futureParentElement:r})):(r.html(o.template),void e(r.contents())(n))}}}],Xo=tr({priority:450,compile:function(){return{pre:function(e,t,n){e.$eval(n.ngInit)}}}}),Qo=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(e,t,r,i){var a=t.attr(r.$attr.ngList)||", ",s="false"!==r.ngTrim,u=s?Br(a):a,c=function(e){if(!y(e)){var t=[];return e&&o(e.split(u),function(e){e&&t.push(s?Br(e):e)}),t}};i.$parsers.push(c),i.$formatters.push(function(e){return Ur(e)?e.join(a):n}),i.$isEmpty=function(e){return!e||!e.length}}}},ea="ng-valid",ta="ng-invalid",na="ng-pristine",ra="ng-dirty",ia="ng-untouched",oa="ng-touched",aa="ng-pending",sa=r("ngModel"),ua=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(e,t,r,i,a,s,u,c,l,f){this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$$rawModelValue=n,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=n,this.$name=f(r.name||"",!1)(e),this.$$parentForm=wo;var h,p=a(r.ngModel),d=p.assign,v=p,m=d,g=null,b=this;this.$$setOptions=function(e){if(b.$options=e,e&&e.getterSetter){var t=a(r.ngModel+"()"),n=a(r.ngModel+"($$$p)");v=function(e){var n=p(e);return A(n)&&(n=t(e)),n},m=function(e,t){A(p(e))?n(e,{$$$p:b.$modelValue}):d(e,b.$modelValue)}}else if(!p.assign)throw sa("nonassign","Expression '{0}' is non-assignable. Element: {1}",r.ngModel,X(i))},this.$render=$,this.$isEmpty=function(e){return y(e)||""===e||null===e||e!==e};var x=0;gr({ctrl:this,$element:i,set:function(e,t){e[t]=!0},unset:function(e,t){delete e[t]},$animate:s}),this.$setPristine=function(){b.$dirty=!1,b.$pristine=!0,s.removeClass(i,ra),s.addClass(i,na)},this.$setDirty=function(){b.$dirty=!0,b.$pristine=!1,s.removeClass(i,na),s.addClass(i,ra),b.$$parentForm.$setDirty()},this.$setUntouched=function(){b.$touched=!1,b.$untouched=!0,s.setClass(i,ia,oa)},this.$setTouched=function(){b.$touched=!0,b.$untouched=!1,s.setClass(i,oa,ia)},this.$rollbackViewValue=function(){u.cancel(g),b.$viewValue=b.$$lastCommittedViewValue,b.$render()},this.$validate=function(){if(!E(b.$modelValue)||!isNaN(b.$modelValue)){var e=b.$$lastCommittedViewValue,t=b.$$rawModelValue,r=b.$valid,i=b.$modelValue,o=b.$options&&b.$options.allowInvalid;b.$$runValidators(t,e,function(e){o||r===e||(b.$modelValue=e?t:n,b.$modelValue!==i&&b.$$writeModelToScope())})}},this.$$runValidators=function(e,t,r){function i(){var e=b.$$parserName||"parse";return y(h)?(u(e,null),!0):(h||(o(b.$validators,function(e,t){u(t,null)}),o(b.$asyncValidators,function(e,t){u(t,null)})),u(e,h),h)}function a(){var n=!0;return o(b.$validators,function(r,i){var o=r(e,t);n=n&&o,u(i,o)}),n?!0:(o(b.$asyncValidators,function(e,t){u(t,null)}),!1)}function s(){var r=[],i=!0;o(b.$asyncValidators,function(o,a){var s=o(e,t);if(!P(s))throw sa("$asyncValidators","Expected asynchronous validator to return a promise but got '{0}' instead.",s);u(a,n),r.push(s.then(function(){u(a,!0)},function(e){i=!1,u(a,!1)}))}),r.length?l.all(r).then(function(){c(i)},$):c(!0)}function u(e,t){f===x&&b.$setValidity(e,t)}function c(e){f===x&&r(e)}x++;var f=x;return i()&&a()?void s():void c(!1)},this.$commitViewValue=function(){var e=b.$viewValue;u.cancel(g),(b.$$lastCommittedViewValue!==e||""===e&&b.$$hasNativeValidators)&&(b.$$lastCommittedViewValue=e,b.$pristine&&this.$setDirty(),this.$$parseAndValidate())},this.$$parseAndValidate=function(){function t(){b.$modelValue!==a&&b.$$writeModelToScope()}var r=b.$$lastCommittedViewValue,i=r;if(h=y(i)?n:!0)for(var o=0;o<b.$parsers.length;o++)if(i=b.$parsers[o](i),y(i)){h=!1;break}E(b.$modelValue)&&isNaN(b.$modelValue)&&(b.$modelValue=v(e));var a=b.$modelValue,s=b.$options&&b.$options.allowInvalid;b.$$rawModelValue=i,s&&(b.$modelValue=i,t()),b.$$runValidators(i,b.$$lastCommittedViewValue,function(e){s||(b.$modelValue=e?i:n,t())})},this.$$writeModelToScope=function(){m(e,b.$modelValue),o(b.$viewChangeListeners,function(e){try{e()}catch(n){t(n)}})},this.$setViewValue=function(e,t){b.$viewValue=e,(!b.$options||b.$options.updateOnDefault)&&b.$$debounceViewValueCommit(t)},this.$$debounceViewValueCommit=function(t){var n,r=0,i=b.$options;i&&w(i.debounce)&&(n=i.debounce,E(n)?r=n:E(n[t])?r=n[t]:E(n["default"])&&(r=n["default"])),u.cancel(g),r?g=u(function(){b.$commitViewValue()},r):c.$$phase?b.$commitViewValue():e.$apply(function(){b.$commitViewValue()})},e.$watch(function(){var t=v(e);if(t!==b.$modelValue&&(b.$modelValue===b.$modelValue||t===t)){b.$modelValue=b.$$rawModelValue=t,h=n;for(var r=b.$formatters,i=r.length,o=t;i--;)o=r[i](o);b.$viewValue!==o&&(b.$viewValue=b.$$lastCommittedViewValue=o,b.$render(),b.$$runValidators(t,o,$))}return t})}],ca=["$rootScope",function(e){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:ua,priority:1,compile:function(t){return t.addClass(na).addClass(ia).addClass(ea),{pre:function(e,t,n,r){var i=r[0],o=r[1]||i.$$parentForm;i.$$setOptions(r[2]&&r[2].$options),o.$addControl(i),n.$observe("name",function(e){i.$name!==e&&i.$$parentForm.$$renameControl(i,e)}),e.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(t,n,r,i){var o=i[0];o.$options&&o.$options.updateOn&&n.on(o.$options.updateOn,function(e){o.$$debounceViewValueCommit(e&&e.type)}),n.on("blur",function(n){o.$touched||(e.$$phase?t.$evalAsync(o.$setTouched):t.$apply(o.$setTouched))})}}}}}],la=/(\s+|^)default(\s+|$)/,fa=function(){return{restrict:"A",controller:["$scope","$attrs",function(e,t){var n=this;this.$options=_(e.$eval(t.ngModelOptions)),w(this.$options.updateOn)?(this.$options.updateOnDefault=!1,this.$options.updateOn=Br(this.$options.updateOn.replace(la,function(){return n.$options.updateOnDefault=!0," "}))):this.$options.updateOnDefault=!0}]}},ha=tr({terminal:!0,priority:1e3}),pa=r("ngOptions"),da=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,$a=["$compile","$parse",function(e,n){function r(e,t,r){function o(e,t,n,r,i){this.selectValue=e,this.viewValue=t,this.label=n,this.group=r,this.disabled=i}function a(e){var t;if(!c&&i(e))t=e;else{t=[];for(var n in e)e.hasOwnProperty(n)&&"$"!==n.charAt(0)&&t.push(n)}return t}var s=e.match(da);if(!s)throw pa("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",e,X(t));var u=s[5]||s[7],c=s[6],l=/ as /.test(s[0])&&s[1],f=s[9],h=n(s[2]?s[1]:u),p=l&&n(l),d=p||h,$=f&&n(f),v=f?function(e,t){return $(r,t)}:function(e){return Ke(e)},m=function(e,t){return v(e,S(e,t))},g=n(s[2]||s[1]),y=n(s[3]||""),w=n(s[4]||""),b=n(s[8]),x={},S=c?function(e,t){return x[c]=t,x[u]=e,x}:function(e){return x[u]=e,x};return{trackBy:f,getTrackByValue:m,getWatchables:n(b,function(e){var t=[];e=e||[];for(var n=a(e),i=n.length,o=0;i>o;o++){var u=e===n?o:n[o],c=(e[u],S(e[u],u)),l=v(e[u],c);if(t.push(l),s[2]||s[1]){var f=g(r,c);t.push(f)}if(s[4]){var h=w(r,c);t.push(h)}}return t}),getOptions:function(){for(var e=[],t={},n=b(r)||[],i=a(n),s=i.length,u=0;s>u;u++){var c=n===i?u:i[u],l=n[c],h=S(l,c),p=d(r,h),$=v(p,h),x=g(r,h),E=y(r,h),C=w(r,h),A=new o($,p,x,E,C);e.push(A),t[$]=A}return{items:e,selectValueMap:t,getOptionFromViewValue:function(e){return t[m(e)]},getViewValueFromOption:function(e){return f?Rr.copy(e.viewValue):e.viewValue}}}}}function a(t,n,i,a){function c(e,t){e.element=t,t.disabled=e.disabled,e.label!==t.label&&(t.label=e.label,t.textContent=e.label),e.value!==t.value&&(t.value=e.selectValue)}function l(e,t,n,r){var i;return t&&Sr(t.nodeName)===n?i=t:(i=r.cloneNode(!1),t?e.insertBefore(i,t):e.appendChild(i)),i}function f(e){for(var t;e;)t=e.nextSibling,He(e),e=t}function h(e){var t=$&&$[0],n=x&&x[0];if(t||n)for(;e&&(e===t||e===n||e.nodeType===Qr||""===e.value);)e=e.nextSibling;return e}function p(){var e=S&&v.readValue();S=E.getOptions();var t={},r=n[0].firstChild;if(b&&n.prepend($),r=h(r),S.items.forEach(function(e){var i,o,a;e.group?(i=t[e.group],i||(o=l(n[0],r,"optgroup",u),r=o.nextSibling,o.label=e.group,i=t[e.group]={groupElement:o,currentOptionElement:o.firstChild}),a=l(i.groupElement,i.currentOptionElement,"option",s),c(e,a),i.currentOptionElement=a.nextSibling):(a=l(n[0],r,"option",s),c(e,a),r=a.nextSibling)}),Object.keys(t).forEach(function(e){f(t[e].currentOptionElement)}),f(r),d.$render(),!d.$isEmpty(e)){var i=v.readValue();(E.trackBy?H(e,i):e===i)||(d.$setViewValue(i),d.$render())}}var d=a[1];if(d){for(var $,v=a[0],m=i.multiple,g=0,y=n.children(),w=y.length;w>g;g++)if(""===y[g].value){$=y.eq(g);break}var b=!!$,x=Mr(s.cloneNode(!1));x.val("?");var S,E=r(i.ngOptions,n,t),C=function(){b||n.prepend($),n.val(""),$.prop("selected",!0),$.attr("selected",!0)},A=function(){b||$.remove()},k=function(){n.prepend(x),n.val("?"),x.prop("selected",!0),x.attr("selected",!0)},O=function(){x.remove()};m?(d.$isEmpty=function(e){return!e||0===e.length},v.writeValue=function(e){S.items.forEach(function(e){e.element.selected=!1}),e&&e.forEach(function(e){var t=S.getOptionFromViewValue(e);t&&!t.disabled&&(t.element.selected=!0)})},v.readValue=function(){var e=n.val()||[],t=[];return o(e,function(e){var n=S.selectValueMap[e];n&&!n.disabled&&t.push(S.getViewValueFromOption(n))}),t},E.trackBy&&t.$watchCollection(function(){return Ur(d.$viewValue)?d.$viewValue.map(function(e){return E.getTrackByValue(e)}):void 0},function(){d.$render()})):(v.writeValue=function(e){var t=S.getOptionFromViewValue(e);t&&!t.disabled?n[0].value!==t.selectValue&&(O(),A(),n[0].value=t.selectValue,t.element.selected=!0,t.element.setAttribute("selected","selected")):null===e||b?(O(),C()):(A(),k())},v.readValue=function(){var e=S.selectValueMap[n.val()];return e&&!e.disabled?(A(),O(),S.getViewValueFromOption(e)):null},E.trackBy&&t.$watch(function(){return E.getTrackByValue(d.$viewValue)},function(){d.$render()})),b?($.remove(),e($)(t),$.removeClass("ng-scope")):$=Mr(s.cloneNode(!1)),p(),t.$watchCollection(E.getWatchables,p)}}var s=t.createElement("option"),u=t.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","?ngModel"],link:{pre:function(e,t,n,r){r[0].registerOption=$},post:a}}}],va=["$locale","$interpolate","$log",function(e,t,n){var r=/{}/g,i=/^when(Minus)?(.+)$/;return{link:function(a,s,u){function c(e){s.text(e||"")}var l,f=u.count,h=u.$attr.when&&s.attr(u.$attr.when),p=u.offset||0,d=a.$eval(h)||{},v={},m=t.startSymbol(),g=t.endSymbol(),w=m+f+"-"+p+g,b=Rr.noop;o(u,function(e,t){var n=i.exec(t);if(n){var r=(n[1]?"-":"")+Sr(n[2]);d[r]=s.attr(u.$attr[t])}}),o(d,function(e,n){v[n]=t(e.replace(r,w))}),a.$watch(f,function(t){var r=parseFloat(t),i=isNaN(r);if(i||r in d||(r=e.pluralCat(r-p)),r!==l&&!(i&&E(l)&&isNaN(l))){b();var o=v[r];y(o)?(null!=t&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+h),b=$,c()):b=a.$watch(o,c),l=r}})}}}],ma=["$parse","$animate",function(e,a){var s="$$NG_REMOVED",u=r("ngRepeat"),c=function(e,t,n,r,i,o,a){e[n]=r,i&&(e[i]=o),e.$index=t,e.$first=0===t,e.$last=t===a-1,e.$middle=!(e.$first||e.$last),e.$odd=!(e.$even=0===(1&t))},l=function(e){return e.clone[0]},f=function(e){return e.clone[e.clone.length-1]};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(r,h){var p=h.ngRepeat,d=t.createComment(" end ngRepeat: "+p+" "),$=p.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!$)throw u("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",p);var v=$[1],m=$[2],g=$[3],y=$[4];if($=v.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/),!$)throw u("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",v);var w=$[3]||$[1],b=$[2];if(g&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(g)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(g)))throw u("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",g);var x,S,E,C,A={$id:Ke};return y?x=e(y):(E=function(e,t){return Ke(t)},C=function(e){return e}),function(e,t,r,h,$){x&&(S=function(t,n,r){return b&&(A[b]=t),A[w]=n,A.$index=r,x(e,A)});var v=ve();e.$watchCollection(m,function(r){var h,m,y,x,A,k,O,M,T,j,V,N,P=t[0],I=ve();if(g&&(e[g]=r),i(r))T=r,M=S||E;else{M=S||C,T=[];for(var D in r)Er.call(r,D)&&"$"!==D.charAt(0)&&T.push(D)}for(x=T.length,V=new Array(x),h=0;x>h;h++)if(A=r===T?h:T[h],k=r[A],O=M(A,k,h),v[O])j=v[O],delete v[O],I[O]=j,V[h]=j;else{if(I[O])throw o(V,function(e){e&&e.scope&&(v[e.id]=e)}),u("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",p,O,k);V[h]={id:O,scope:n,clone:n},I[O]=!0}for(var q in v){if(j=v[q],N=$e(j.clone),a.leave(N),N[0].parentNode)for(h=0,m=N.length;m>h;h++)N[h][s]=!0;j.scope.$destroy()}for(h=0;x>h;h++)if(A=r===T?h:T[h],k=r[A],j=V[h],j.scope){y=P;do y=y.nextSibling;while(y&&y[s]);l(j)!=y&&a.move($e(j.clone),null,Mr(P)),P=f(j),c(j.scope,h,w,k,b,A,x)}else $(function(e,t){j.scope=t;var n=d.cloneNode(!1);e[e.length++]=n,a.enter(e,null,Mr(P)),P=n,j.clone=e,I[j.id]=j,c(j.scope,h,w,k,b,A,x)});v=I})}}}}],ga="ng-hide",ya="ng-hide-animate",wa=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngShow,function(t){e[t?"removeClass":"addClass"](n,ga,{tempClasses:ya})})}}}],ba=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngHide,function(t){e[t?"addClass":"removeClass"](n,ga,{tempClasses:ya})})}}}],xa=tr(function(e,t,n){e.$watch(n.ngStyle,function(e,n){n&&e!==n&&o(n,function(e,n){t.css(n,"")}),e&&t.css(e)},!0)}),Sa=["$animate",function(e){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,r,i,a){var s=i.ngSwitch||i.on,u=[],c=[],l=[],f=[],h=function(e,t){return function(){e.splice(t,1)}};n.$watch(s,function(n){var r,i;for(r=0,i=l.length;i>r;++r)e.cancel(l[r]);for(l.length=0,r=0,i=f.length;i>r;++r){var s=$e(c[r].clone);f[r].$destroy();var p=l[r]=e.leave(s);p.then(h(l,r))}c.length=0,f.length=0,(u=a.cases["!"+n]||a.cases["?"])&&o(u,function(n){n.transclude(function(r,i){f.push(i);var o=n.element;r[r.length++]=t.createComment(" end ngSwitchWhen: ");var a={clone:r};c.push(a),e.enter(r,o.parent(),o)})})})}}}],Ea=tr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["!"+n.ngSwitchWhen]=r.cases["!"+n.ngSwitchWhen]||[],r.cases["!"+n.ngSwitchWhen].push({transclude:i,element:t})}}),Ca=tr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:t})}}),Aa=tr({restrict:"EAC",link:function(e,t,n,i,o){if(!o)throw r("ngTransclude")("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",X(t));o(function(e){t.empty(),t.append(e)})}}),ka=["$templateCache",function(e){return{restrict:"E",terminal:!0,compile:function(t,n){if("text/ng-template"==n.type){var r=n.id,i=t[0].text;e.put(r,i)}}}}],Oa={$setViewValue:$,$render:$},Ma=["$element","$scope","$attrs",function(e,r,i){var o=this,a=new Ze;o.ngModelCtrl=Oa,o.unknownOption=Mr(t.createElement("option")),o.renderUnknownOption=function(t){var n="? "+Ke(t)+" ?";o.unknownOption.val(n),e.prepend(o.unknownOption),e.val(n)},r.$on("$destroy",function(){o.renderUnknownOption=$}),o.removeUnknownOption=function(){o.unknownOption.parent()&&o.unknownOption.remove()},o.readValue=function(){return o.removeUnknownOption(),e.val()},o.writeValue=function(t){o.hasOption(t)?(o.removeUnknownOption(),e.val(t),""===t&&o.emptyOption.prop("selected",!0)):null==t&&o.emptyOption?(o.removeUnknownOption(),e.val("")):o.renderUnknownOption(t)},o.addOption=function(e,t){pe(e,'"option value"'),""===e&&(o.emptyOption=t);var n=a.get(e)||0;a.put(e,n+1),o.ngModelCtrl.$render(),wr(t)},o.removeOption=function(e){var t=a.get(e);t&&(1===t?(a.remove(e),""===e&&(o.emptyOption=n)):a.put(e,t-1))},o.hasOption=function(e){return!!a.get(e)},o.registerOption=function(e,t,n,r,i){if(r){var a;n.$observe("value",function(e){w(a)&&o.removeOption(a),a=e,o.addOption(e,t)})}else i?e.$watch(i,function(e,r){n.$set("value",e),r!==e&&o.removeOption(r),o.addOption(e,t)}):o.addOption(n.value,t);t.on("$destroy",function(){o.removeOption(n.value),o.ngModelCtrl.$render()})}}],Ta=function(){function e(e,t,n,r){var i=r[1];if(i){var a=r[0];if(a.ngModelCtrl=i,i.$render=function(){a.writeValue(i.$viewValue)},t.on("change",function(){e.$apply(function(){i.$setViewValue(a.readValue())})}),n.multiple){a.readValue=function(){var e=[];return o(t.find("option"),function(t){t.selected&&e.push(t.value)}),e},a.writeValue=function(e){var n=new Ze(e);o(t.find("option"),function(e){e.selected=w(n.get(e.value))})};var s,u=NaN;e.$watch(function(){u!==i.$viewValue||H(s,i.$viewValue)||(s=U(i.$viewValue),i.$render()),u=i.$viewValue}),i.$isEmpty=function(e){return!e||0===e.length}}}}return{restrict:"E",require:["select","?ngModel"],controller:Ma,priority:1,link:{pre:e}}},ja=["$interpolate",function(e){return{restrict:"E",priority:100,compile:function(t,n){if(w(n.value))var r=e(n.value,!0);else{var i=e(t.text(),!0);i||n.$set("value",t.text())}return function(e,t,n){var o="$selectController",a=t.parent(),s=a.data(o)||a.parent().data(o);s&&s.registerOption(e,t,n,r,i)}}}}],Va=m({restrict:"E",terminal:!1}),Na=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){r&&(n.required=!0,r.$validators.required=function(e,t){return!n.required||!r.$isEmpty(t)},n.$observe("required",function(){r.$validate()}))}}},Pa=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,i,o){if(o){var a,s=i.ngPattern||i.pattern;i.$observe("pattern",function(e){if(S(e)&&e.length>0&&(e=new RegExp("^"+e+"$")),e&&!e.test)throw r("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",s,e,X(t));a=e||n,o.$validate()}),o.$validators.pattern=function(e,t){return o.$isEmpty(t)||y(a)||a.test(t)}}}}},Ia=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=-1;n.$observe("maxlength",function(e){var t=p(e);i=isNaN(t)?-1:t,r.$validate()}),r.$validators.maxlength=function(e,t){return 0>i||r.$isEmpty(t)||t.length<=i}}}}},Da=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=0;n.$observe("minlength",function(e){i=p(e)||0,r.$validate()}),r.$validators.minlength=function(e,t){return r.$isEmpty(t)||t.length>=i}}}}};return e.angular.bootstrap?void console.log("WARNING: Tried to load angular more than once."):(le(),we(Rr),Rr.module("ngLocale",[],["$provide",function(e){function t(e){e+="";var t=e.indexOf(".");return-1==t?0:e.length-t-1}function r(e,r){var i=r;n===i&&(i=Math.min(t(e),3));var o=Math.pow(10,i),a=(e*o|0)%o;return{v:i,f:a}}var i={ZERO:"zero",ONE:"one",TWO:"two",FEW:"few",MANY:"many",OTHER:"other"};e.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],SHORTDAY:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],SHORTMONTH:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a","short":"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-¤",negSuf:"",posPre:"¤",posSuf:""}]},id:"en-us",pluralCat:function(e,t){var n=0|e,o=r(e,t);return 1==n&&0==o.v?i.ONE:i.OTHER}})}]),void Mr(t).ready(function(){oe(t,ae)}))}(window,document),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>'),"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="ui.router"),function(e,t,n){"use strict";function r(e,t){return F(new(F(function(){},{prototype:e})),t)}function i(e){return R(arguments,function(t){t!==e&&R(t,function(t,n){e.hasOwnProperty(n)||(e[n]=t)})}),e}function o(e,t){var n=[];for(var r in e.path){if(e.path[r]!==t.path[r])break;n.push(e.path[r])}return n}function a(e){if(Object.keys)return Object.keys(e);var t=[];return R(e,function(e,n){t.push(n)}),t}function s(e,t){if(Array.prototype.indexOf)return e.indexOf(t,Number(arguments[2])||0);var n=e.length>>>0,r=Number(arguments[2])||0;for(r=0>r?Math.ceil(r):Math.floor(r),0>r&&(r+=n);n>r;r++)if(r in e&&e[r]===t)return r;return-1}function u(e,t,n,r){var i,u=o(n,r),c={},l=[];for(var f in u)if(u[f].params&&(i=a(u[f].params),i.length))for(var h in i)s(l,i[h])>=0||(l.push(i[h]),c[i[h]]=e[i[h]]);return F({},c,t)}function c(e,t,n){if(!n){n=[];for(var r in e)n.push(r)}for(var i=0;i<n.length;i++){var o=n[i];if(e[o]!=t[o])return!1}return!0}function l(e,t){var n={};return R(e,function(e){n[e]=t[e]}),n}function f(e){var t={},n=Array.prototype.concat.apply(Array.prototype,Array.prototype.slice.call(arguments,1));return R(n,function(n){n in e&&(t[n]=e[n])}),t}function h(e){var t={},n=Array.prototype.concat.apply(Array.prototype,Array.prototype.slice.call(arguments,1));for(var r in e)-1==s(n,r)&&(t[r]=e[r]);return t}function p(e,t){var n=q(e),r=n?[]:{};return R(e,function(e,i){t(e,i)&&(r[n?r.length:i]=e)}),r}function d(e,t){var n=q(e)?[]:{};return R(e,function(e,r){n[r]=t(e,r)}),n}function $(e,t){var r=1,o=2,u={},c=[],l=u,f=F(e.when(u),{$$promises:u,$$values:u});this.study=function(u){function p(e,n){if(g[n]!==o){if(m.push(n),g[n]===r)throw m.splice(0,s(m,n)),new Error("Cyclic dependency: "+m.join(" -> "));if(g[n]=r,I(e))v.push(n,[function(){return t.get(e)}],c);else{var i=t.annotate(e);R(i,function(e){e!==n&&u.hasOwnProperty(e)&&p(u[e],e)}),v.push(n,e,i)}m.pop(),g[n]=o}}function d(e){return D(e)&&e.then&&e.$$promises}if(!D(u))throw new Error("'invocables' must be an object");var $=a(u||{}),v=[],m=[],g={};return R(u,p),u=m=g=null,function(r,o,a){function s(){--w||(b||i(y,o.$$values),m.$$values=y,m.$$promises=m.$$promises||!0,delete m.$$inheritedValues,p.resolve(y))}function u(e){m.$$failure=e,p.reject(e)}function c(n,i,o){function c(e){f.reject(e),u(e)}function l(){if(!N(m.$$failure))try{f.resolve(t.invoke(i,a,y)),f.promise.then(function(e){y[n]=e,s()},c)}catch(e){c(e)}}var f=e.defer(),h=0;R(o,function(e){g.hasOwnProperty(e)&&!r.hasOwnProperty(e)&&(h++,g[e].then(function(t){y[e]=t,--h||l()},c))}),h||l(),g[n]=f.promise}if(d(r)&&a===n&&(a=o,o=r,r=null),r){if(!D(r))throw new Error("'locals' must be an object")}else r=l;if(o){if(!d(o))throw new Error("'parent' must be a promise returned by $resolve.resolve()")}else o=f;var p=e.defer(),m=p.promise,g=m.$$promises={},y=F({},r),w=1+v.length/3,b=!1;if(N(o.$$failure))return u(o.$$failure),m;o.$$inheritedValues&&i(y,h(o.$$inheritedValues,$)),F(g,o.$$promises),o.$$values?(b=i(y,h(o.$$values,$)),m.$$inheritedValues=h(o.$$values,$),s()):(o.$$inheritedValues&&(m.$$inheritedValues=h(o.$$inheritedValues,$)),o.then(s,u));for(var x=0,S=v.length;S>x;x+=3)r.hasOwnProperty(v[x])?s():c(v[x],v[x+1],v[x+2]);return m}},this.resolve=function(e,t,n,r){return this.study(e)(t,n,r)}}function v(e,t,n){this.fromConfig=function(e,t,n){return N(e.template)?this.fromString(e.template,t):N(e.templateUrl)?this.fromUrl(e.templateUrl,t):N(e.templateProvider)?this.fromProvider(e.templateProvider,t,n):null;
},this.fromString=function(e,t){return P(e)?e(t):e},this.fromUrl=function(n,r){return P(n)&&(n=n(r)),null==n?null:e.get(n,{cache:t,headers:{Accept:"text/html"}}).then(function(e){return e.data})},this.fromProvider=function(e,t,r){return n.invoke(e,null,r||{params:t})}}function m(e,t,i){function o(t,n,r,i){if(v.push(t),d[t])return d[t];if(!/^\w+(-+\w+)*(?:\[\])?$/.test(t))throw new Error("Invalid parameter name '"+t+"' in pattern '"+e+"'");if($[t])throw new Error("Duplicate parameter name '"+t+"' in pattern '"+e+"'");return $[t]=new U.Param(t,n,r,i),$[t]}function a(e,t,n,r){var i=["",""],o=e.replace(/[\\\[\]\^$*+?.()|{}]/g,"\\$&");if(!t)return o;switch(n){case!1:i=["(",")"+(r?"?":"")];break;case!0:i=["?(",")?"];break;default:i=["("+n+"|",")?"]}return o+i[0]+t+i[1]}function s(i,o){var a,s,u,c,l;return a=i[2]||i[3],l=t.params[a],u=e.substring(h,i.index),s=o?i[4]:i[4]||("*"==i[1]?".*":null),c=U.type(s||"string")||r(U.type("string"),{pattern:new RegExp(s,t.caseInsensitive?"i":n)}),{id:a,regexp:s,segment:u,type:c,cfg:l}}t=F({params:{}},D(t)?t:{});var u,c=/([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,l=/([:]?)([\w\[\]-]+)|\{([\w\[\]-]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,f="^",h=0,p=this.segments=[],d=i?i.params:{},$=this.params=i?i.params.$$new():new U.ParamSet,v=[];this.source=e;for(var m,g,y;(u=c.exec(e))&&(m=s(u,!1),!(m.segment.indexOf("?")>=0));)g=o(m.id,m.type,m.cfg,"path"),f+=a(m.segment,g.type.pattern.source,g.squash,g.isOptional),p.push(m.segment),h=c.lastIndex;y=e.substring(h);var w=y.indexOf("?");if(w>=0){var b=this.sourceSearch=y.substring(w);if(y=y.substring(0,w),this.sourcePath=e.substring(0,h+w),b.length>0)for(h=0;u=l.exec(b);)m=s(u,!0),g=o(m.id,m.type,m.cfg,"search"),h=c.lastIndex}else this.sourcePath=e,this.sourceSearch="";f+=a(y)+(t.strict===!1?"/?":"")+"$",p.push(y),this.regexp=new RegExp(f,t.caseInsensitive?"i":n),this.prefix=p[0],this.$$paramNames=v}function g(e){F(this,e)}function y(){function e(e){return null!=e?e.toString().replace(/\//g,"%2F"):e}function i(e){return null!=e?e.toString().replace(/%2F/g,"/"):e}function o(){return{strict:$,caseInsensitive:h}}function u(e){return P(e)||q(e)&&P(e[e.length-1])}function c(){for(;x.length;){var e=x.shift();if(e.pattern)throw new Error("You cannot override a type's .pattern at runtime.");t.extend(w[e.name],f.invoke(e.def))}}function l(e){F(this,e||{})}U=this;var f,h=!1,$=!0,v=!1,w={},b=!0,x=[],S={string:{encode:e,decode:i,is:function(e){return null==e||!N(e)||"string"==typeof e},pattern:/[^/]*/},"int":{encode:e,decode:function(e){return parseInt(e,10)},is:function(e){return N(e)&&this.decode(e.toString())===e},pattern:/\d+/},bool:{encode:function(e){return e?1:0},decode:function(e){return 0!==parseInt(e,10)},is:function(e){return e===!0||e===!1},pattern:/0|1/},date:{encode:function(e){return this.is(e)?[e.getFullYear(),("0"+(e.getMonth()+1)).slice(-2),("0"+e.getDate()).slice(-2)].join("-"):n},decode:function(e){if(this.is(e))return e;var t=this.capture.exec(e);return t?new Date(t[1],t[2]-1,t[3]):n},is:function(e){return e instanceof Date&&!isNaN(e.valueOf())},equals:function(e,t){return this.is(e)&&this.is(t)&&e.toISOString()===t.toISOString()},pattern:/[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,capture:/([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/},json:{encode:t.toJson,decode:t.fromJson,is:t.isObject,equals:t.equals,pattern:/[^/]*/},any:{encode:t.identity,decode:t.identity,equals:t.equals,pattern:/.*/}};y.$$getDefaultValue=function(e){if(!u(e.value))return e.value;if(!f)throw new Error("Injectable functions cannot be called at configuration time");return f.invoke(e.value)},this.caseInsensitive=function(e){return N(e)&&(h=e),h},this.strictMode=function(e){return N(e)&&($=e),$},this.defaultSquashPolicy=function(e){if(!N(e))return v;if(e!==!0&&e!==!1&&!I(e))throw new Error("Invalid squash policy: "+e+". Valid policies: false, true, arbitrary-string");return v=e,e},this.compile=function(e,t){return new m(e,F(o(),t))},this.isMatcher=function(e){if(!D(e))return!1;var t=!0;return R(m.prototype,function(n,r){P(n)&&(t=t&&N(e[r])&&P(e[r]))}),t},this.type=function(e,t,n){if(!N(t))return w[e];if(w.hasOwnProperty(e))throw new Error("A type named '"+e+"' has already been defined.");return w[e]=new g(F({name:e},t)),n&&(x.push({name:e,def:n}),b||c()),this},R(S,function(e,t){w[t]=new g(F({name:t},e))}),w=r(w,{}),this.$get=["$injector",function(e){return f=e,b=!1,c(),R(S,function(e,t){w[t]||(w[t]=new g(e))}),this}],this.Param=function(e,t,r,i){function o(e){var t=D(e)?a(e):[],n=-1===s(t,"value")&&-1===s(t,"type")&&-1===s(t,"squash")&&-1===s(t,"array");return n&&(e={value:e}),e.$$fn=u(e.value)?e.value:function(){return e.value},e}function c(t,n,r){if(t.type&&n)throw new Error("Param '"+e+"' has two type configurations.");return n?n:t.type?t.type instanceof g?t.type:new g(t.type):"config"===r?w.any:w.string}function l(){var t={array:"search"===i?"auto":!1},n=e.match(/\[\]$/)?{array:!0}:{};return F(t,n,r).array}function h(e,t){var n=e.squash;if(!t||n===!1)return!1;if(!N(n)||null==n)return v;if(n===!0||I(n))return n;throw new Error("Invalid squash policy: '"+n+"'. Valid policies: false, true, or arbitrary string")}function $(e,t,r,i){var o,a,u=[{from:"",to:r||t?n:""},{from:null,to:r||t?n:""}];return o=q(e.replace)?e.replace:[],I(i)&&o.push({from:i,to:n}),a=d(o,function(e){return e.from}),p(u,function(e){return-1===s(a,e.from)}).concat(o)}function m(){if(!f)throw new Error("Injectable functions cannot be called at configuration time");var e=f.invoke(r.$$fn);if(null!==e&&e!==n&&!x.type.is(e))throw new Error("Default value ("+e+") for parameter '"+x.id+"' is not an instance of Type ("+x.type.name+")");return e}function y(e){function t(e){return function(t){return t.from===e}}function n(e){var n=d(p(x.replace,t(e)),function(e){return e.to});return n.length?n[0]:e}return e=n(e),N(e)?x.type.$normalize(e):m()}function b(){return"{Param:"+e+" "+t+" squash: '"+C+"' optional: "+E+"}"}var x=this;r=o(r),t=c(r,t,i);var S=l();t=S?t.$asArray(S,"search"===i):t,"string"!==t.name||S||"path"!==i||r.value!==n||(r.value="");var E=r.value!==n,C=h(r,E),A=$(r,S,E,C);F(this,{id:e,type:t,location:i,array:S,squash:C,replace:A,isOptional:E,value:y,dynamic:n,config:r,toString:b})},l.prototype={$$new:function(){return r(this,F(new l,{$$parent:this}))},$$keys:function(){for(var e=[],t=[],n=this,r=a(l.prototype);n;)t.push(n),n=n.$$parent;return t.reverse(),R(t,function(t){R(a(t),function(t){-1===s(e,t)&&-1===s(r,t)&&e.push(t)})}),e},$$values:function(e){var t={},n=this;return R(n.$$keys(),function(r){t[r]=n[r].value(e&&e[r])}),t},$$equals:function(e,t){var n=!0,r=this;return R(r.$$keys(),function(i){var o=e&&e[i],a=t&&t[i];r[i].type.equals(o,a)||(n=!1)}),n},$$validates:function(e){var r,i,o,a,s,u=this.$$keys();for(r=0;r<u.length&&(i=this[u[r]],o=e[u[r]],o!==n&&null!==o||!i.isOptional);r++){if(a=i.type.$normalize(o),!i.type.is(a))return!1;if(s=i.type.encode(a),t.isString(s)&&!i.type.pattern.exec(s))return!1}return!0},$$parent:n},this.ParamSet=l}function w(e,r){function i(e){var t=/^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(e.source);return null!=t?t[1].replace(/\\(.)/g,"$1"):""}function o(e,t){return e.replace(/\$(\$|\d{1,2})/,function(e,n){return t["$"===n?0:Number(n)]})}function a(e,t,n){if(!n)return!1;var r=e.invoke(t,t,{$match:n});return N(r)?r:!0}function s(r,i,o,a){function s(e,t,n){return"/"===$?e:t?$.slice(0,-1)+e:n?$.slice(1)+e:e}function h(e){function t(e){var t=e(o,r);return t?(I(t)&&r.replace().url(t),!0):!1}if(!e||!e.defaultPrevented){d&&r.url()===d,d=n;var i,a=c.length;for(i=0;a>i;i++)if(t(c[i]))return;l&&t(l)}}function p(){return u=u||i.$on("$locationChangeSuccess",h)}var d,$=a.baseHref(),v=r.url();return f||p(),{sync:function(){h()},listen:function(){return p()},update:function(e){return e?void(v=r.url()):void(r.url()!==v&&(r.url(v),r.replace()))},push:function(e,t,i){var o=e.format(t||{});null!==o&&t&&t["#"]&&(o+="#"+t["#"]),r.url(o),d=i&&i.$$avoidResync?r.url():n,i&&i.replace&&r.replace()},href:function(n,i,o){if(!n.validates(i))return null;var a=e.html5Mode();t.isObject(a)&&(a=a.enabled);var u=n.format(i);if(o=o||{},a||null===u||(u="#"+e.hashPrefix()+u),null!==u&&i&&i["#"]&&(u+="#"+i["#"]),u=s(u,a,o.absolute),!o.absolute||!u)return u;var c=!a&&u?"/":"",l=r.port();return l=80===l||443===l?"":":"+l,[r.protocol(),"://",r.host(),l,c,u].join("")}}}var u,c=[],l=null,f=!1;this.rule=function(e){if(!P(e))throw new Error("'rule' must be a function");return c.push(e),this},this.otherwise=function(e){if(I(e)){var t=e;e=function(){return t}}else if(!P(e))throw new Error("'rule' must be a function");return l=e,this},this.when=function(e,t){var n,s=I(t);if(I(e)&&(e=r.compile(e)),!s&&!P(t)&&!q(t))throw new Error("invalid 'handler' in when()");var u={matcher:function(e,t){return s&&(n=r.compile(t),t=["$match",function(e){return n.format(e)}]),F(function(n,r){return a(n,t,e.exec(r.path(),r.search()))},{prefix:I(e.prefix)?e.prefix:""})},regex:function(e,t){if(e.global||e.sticky)throw new Error("when() RegExp must not be global or sticky");return s&&(n=t,t=["$match",function(e){return o(n,e)}]),F(function(n,r){return a(n,t,e.exec(r.path()))},{prefix:i(e)})}},c={matcher:r.isMatcher(e),regex:e instanceof RegExp};for(var l in c)if(c[l])return this.rule(u[l](e,t));throw new Error("invalid 'what' in when()")},this.deferIntercept=function(e){e===n&&(e=!0),f=e},this.$get=s,s.$inject=["$location","$rootScope","$injector","$browser"]}function b(e,i){function o(e){return 0===e.indexOf(".")||0===e.indexOf("^")}function h(e,t){if(!e)return n;var r=I(e),i=r?e:e.name,a=o(i);if(a){if(!t)throw new Error("No reference point given for path '"+i+"'");t=h(t);for(var s=i.split("."),u=0,c=s.length,l=t;c>u;u++)if(""!==s[u]||0!==u){if("^"!==s[u])break;if(!l.parent)throw new Error("Path '"+i+"' not valid for state '"+t.name+"'");l=l.parent}else l=t;s=s.slice(u).join("."),i=l.name+(l.name&&s?".":"")+s}var f=C[i];return!f||!r&&(r||f!==e&&f.self!==e)?n:f}function p(e,t){A[e]||(A[e]=[]),A[e].push(t)}function $(e){for(var t=A[e]||[];t.length;)v(t.shift())}function v(t){t=r(t,{self:t,resolve:t.resolve||{},toString:function(){return this.name}});var n=t.name;if(!I(n)||n.indexOf("@")>=0)throw new Error("State must have a valid name");if(C.hasOwnProperty(n))throw new Error("State '"+n+"'' is already defined");var i=-1!==n.indexOf(".")?n.substring(0,n.lastIndexOf(".")):I(t.parent)?t.parent:D(t.parent)&&I(t.parent.name)?t.parent.name:"";if(i&&!C[i])return p(i,t.self);for(var o in O)P(O[o])&&(t[o]=O[o](t,O.$delegates[o]));return C[n]=t,!t[k]&&t.url&&e.when(t.url,["$match","$stateParams",function(e,n){E.$current.navigable==t&&c(e,n)||E.transitionTo(t,e,{inherit:!0,location:!1})}]),$(n),t}function m(e){return e.indexOf("*")>-1}function g(e){for(var t=e.split("."),n=E.$current.name.split("."),r=0,i=t.length;i>r;r++)"*"===t[r]&&(n[r]="*");return"**"===t[0]&&(n=n.slice(s(n,t[1])),n.unshift("**")),"**"===t[t.length-1]&&(n.splice(s(n,t[t.length-2])+1,Number.MAX_VALUE),n.push("**")),t.length!=n.length?!1:n.join("")===t.join("")}function y(e,t){return I(e)&&!N(t)?O[e]:P(t)&&I(e)?(O[e]&&!O.$delegates[e]&&(O.$delegates[e]=O[e]),O[e]=t,this):this}function w(e,t){return D(e)?t=e:t.name=e,v(t),this}function b(e,i,o,s,f,p,$,v,y){function w(t,n,r,o){var a=e.$broadcast("$stateNotFound",t,n,r);if(a.defaultPrevented)return $.update(),M;if(!a.retry)return null;if(o.$retry)return $.update(),T;var s=E.transition=i.when(a.retry);return s.then(function(){return s!==E.transition?A:(t.options.$retry=!0,E.transitionTo(t.to,t.toParams,t.options))},function(){return M}),$.update(),s}function b(e,n,r,a,u,c){function h(){var n=[];return R(e.views,function(r,i){var a=r.resolve&&r.resolve!==e.resolve?r.resolve:{};a.$template=[function(){return o.load(i,{view:r,locals:u.globals,params:p,notify:c.notify})||""}],n.push(f.resolve(a,u.globals,u.resolve,e).then(function(n){if(P(r.controllerProvider)||q(r.controllerProvider)){var o=t.extend({},a,u.globals);n.$$controller=s.invoke(r.controllerProvider,null,o)}else n.$$controller=r.controller;n.$$state=e,n.$$controllerAs=r.controllerAs,u[i]=n}))}),i.all(n).then(function(){return u.globals})}var p=r?n:l(e.params.$$keys(),n),d={$stateParams:p};u.resolve=f.resolve(e.resolve,d,u.resolve,e);var $=[u.resolve.then(function(e){u.globals=e})];return a&&$.push(a),i.all($).then(h).then(function(e){return u})}var A=i.reject(new Error("transition superseded")),O=i.reject(new Error("transition prevented")),M=i.reject(new Error("transition aborted")),T=i.reject(new Error("transition failed"));return S.locals={resolve:null,globals:{$stateParams:{}}},E={params:{},current:S.self,$current:S,transition:null},E.reload=function(e){return E.transitionTo(E.current,p,{reload:e||!0,inherit:!1,notify:!0})},E.go=function(e,t,n){return E.transitionTo(e,t,F({inherit:!0,relative:E.$current},n))},E.transitionTo=function(t,n,o){n=n||{},o=F({location:!0,inherit:!1,relative:null,notify:!0,reload:!1,$retry:!1},o||{});var a,c=E.$current,f=E.params,d=c.path,v=h(t,o.relative),m=n["#"];if(!N(v)){var g={to:t,toParams:n,options:o},y=w(g,c.self,f,o);if(y)return y;if(t=g.to,n=g.toParams,o=g.options,v=h(t,o.relative),!N(v)){if(!o.relative)throw new Error("No such state '"+t+"'");throw new Error("Could not resolve '"+t+"' from state '"+o.relative+"'")}}if(v[k])throw new Error("Cannot transition to abstract state '"+t+"'");if(o.inherit&&(n=u(p,n||{},E.$current,v)),!v.params.$$validates(n))return T;n=v.params.$$values(n),t=v;var C=t.path,M=0,j=C[M],V=S.locals,P=[];if(o.reload){if(I(o.reload)||D(o.reload)){if(D(o.reload)&&!o.reload.name)throw new Error("Invalid reload state object");var q=o.reload===!0?d[0]:h(o.reload);if(o.reload&&!q)throw new Error("No such reload state '"+(I(o.reload)?o.reload:o.reload.name)+"'");for(;j&&j===d[M]&&j!==q;)V=P[M]=j.locals,M++,j=C[M]}}else for(;j&&j===d[M]&&j.ownParams.$$equals(n,f);)V=P[M]=j.locals,M++,j=C[M];if(x(t,n,c,f,V,o))return m&&(n["#"]=m),E.params=n,_(E.params,p),o.location&&t.navigable&&t.navigable.url&&($.push(t.navigable.url,n,{$$avoidResync:!0,replace:"replace"===o.location}),$.update(!0)),E.transition=null,i.when(E.current);if(n=l(t.params.$$keys(),n||{}),o.notify&&e.$broadcast("$stateChangeStart",t.self,n,c.self,f).defaultPrevented)return e.$broadcast("$stateChangeCancel",t.self,n,c.self,f),$.update(),O;for(var R=i.when(V),U=M;U<C.length;U++,j=C[U])V=P[U]=r(V),R=b(j,n,j===t,R,V,o);var H=E.transition=R.then(function(){var r,i,a;if(E.transition!==H)return A;for(r=d.length-1;r>=M;r--)a=d[r],a.self.onExit&&s.invoke(a.self.onExit,a.self,a.locals.globals),a.locals=null;for(r=M;r<C.length;r++)i=C[r],i.locals=P[r],i.self.onEnter&&s.invoke(i.self.onEnter,i.self,i.locals.globals);return m&&(n["#"]=m),E.transition!==H?A:(E.$current=t,E.current=t.self,E.params=n,_(E.params,p),E.transition=null,o.location&&t.navigable&&$.push(t.navigable.url,t.navigable.locals.globals.$stateParams,{$$avoidResync:!0,replace:"replace"===o.location}),o.notify&&e.$broadcast("$stateChangeSuccess",t.self,n,c.self,f),$.update(!0),E.current)},function(r){return E.transition!==H?A:(E.transition=null,a=e.$broadcast("$stateChangeError",t.self,n,c.self,f,r),a.defaultPrevented||$.update(),i.reject(r))});return H},E.is=function(e,t,r){r=F({relative:E.$current},r||{});var i=h(e,r.relative);return N(i)?E.$current!==i?!1:t?c(i.params.$$values(t),p):!0:n},E.includes=function(e,t,r){if(r=F({relative:E.$current},r||{}),I(e)&&m(e)){if(!g(e))return!1;e=E.$current.name}var i=h(e,r.relative);return N(i)?N(E.$current.includes[i.name])?t?c(i.params.$$values(t),p,a(t)):!0:!1:n},E.href=function(e,t,r){r=F({lossy:!0,inherit:!0,absolute:!1,relative:E.$current},r||{});var i=h(e,r.relative);if(!N(i))return null;r.inherit&&(t=u(p,t||{},E.$current,i));var o=i&&r.lossy?i.navigable:i;return o&&o.url!==n&&null!==o.url?$.href(o.url,l(i.params.$$keys().concat("#"),t||{}),{absolute:r.absolute}):null},E.get=function(e,t){if(0===arguments.length)return d(a(C),function(e){return C[e].self});var n=h(e,t||E.$current);return n&&n.self?n.self:null},E}function x(e,t,n,r,i,o){function a(e,t,n){function r(t){return"search"!=e.params[t].location}var i=e.params.$$keys().filter(r),o=f.apply({},[e.params].concat(i)),a=new U.ParamSet(o);return a.$$equals(t,n)}return!o.reload&&e===n&&(i===n.locals||e.self.reloadOnSearch===!1&&a(n,r,t))?!0:void 0}var S,E,C={},A={},k="abstract",O={parent:function(e){if(N(e.parent)&&e.parent)return h(e.parent);var t=/^(.+)\.[^.]+$/.exec(e.name);return t?h(t[1]):S},data:function(e){return e.parent&&e.parent.data&&(e.data=e.self.data=F({},e.parent.data,e.data)),e.data},url:function(e){var t=e.url,n={params:e.params||{}};if(I(t))return"^"==t.charAt(0)?i.compile(t.substring(1),n):(e.parent.navigable||S).url.concat(t,n);if(!t||i.isMatcher(t))return t;throw new Error("Invalid url '"+t+"' in state '"+e+"'")},navigable:function(e){return e.url?e:e.parent?e.parent.navigable:null},ownParams:function(e){var t=e.url&&e.url.params||new U.ParamSet;return R(e.params||{},function(e,n){t[n]||(t[n]=new U.Param(n,null,e,"config"))}),t},params:function(e){return e.parent&&e.parent.params?F(e.parent.params.$$new(),e.ownParams):new U.ParamSet},views:function(e){var t={};return R(N(e.views)?e.views:{"":e},function(n,r){r.indexOf("@")<0&&(r+="@"+e.parent.name),t[r]=n}),t},path:function(e){return e.parent?e.parent.path.concat(e):[]},includes:function(e){var t=e.parent?F({},e.parent.includes):{};return t[e.name]=!0,t},$delegates:{}};S=v({name:"",url:"^",views:null,"abstract":!0}),S.navigable=null,this.decorator=y,this.state=w,this.$get=b,b.$inject=["$rootScope","$q","$view","$injector","$resolve","$stateParams","$urlRouter","$location","$urlMatcherFactory"]}function x(){function e(e,t){return{load:function(n,r){var i,o={template:null,controller:null,view:null,locals:null,notify:!0,async:!0,params:{}};return r=F(o,r),r.view&&(i=t.fromConfig(r.view,r.params,r.locals)),i&&r.notify&&e.$broadcast("$viewContentLoading",r),i}}}this.$get=e,e.$inject=["$rootScope","$templateFactory"]}function S(){var e=!1;this.useAnchorScroll=function(){e=!0},this.$get=["$anchorScroll","$timeout",function(t,n){return e?t:function(e){return n(function(){e[0].scrollIntoView()},0,!1)}}]}function E(e,n,r,i){function o(){return n.has?function(e){return n.has(e)?n.get(e):null}:function(e){try{return n.get(e)}catch(t){return null}}}function a(e,t){var n=function(){return{enter:function(e,t,n){t.after(e),n()},leave:function(e,t){e.remove(),t()}}};if(c)return{enter:function(e,t,n){var r=c.enter(e,null,t,n);r&&r.then&&r.then(n)},leave:function(e,t){var n=c.leave(e,t);n&&n.then&&n.then(t)}};if(u){var r=u&&u(t,e);return{enter:function(e,t,n){r.enter(e,null,t),n()},leave:function(e,t){r.leave(e),t()}}}return n()}var s=o(),u=s("$animator"),c=s("$animate"),l={restrict:"ECA",terminal:!0,priority:400,transclude:"element",compile:function(n,o,s){return function(n,o,u){function c(){f&&(f.remove(),f=null),p&&(p.$destroy(),p=null),h&&(m.leave(h,function(){f=null}),f=h,h=null)}function l(a){var l,f=A(n,u,o,i),g=f&&e.$current&&e.$current.locals[f];if(a||g!==d){l=n.$new(),d=e.$current.locals[f];var y=s(l,function(e){m.enter(e,o,function(){p&&p.$emit("$viewContentAnimationEnded"),(t.isDefined(v)&&!v||n.$eval(v))&&r(e)}),c()});h=y,p=l,p.$emit("$viewContentLoaded"),p.$eval($)}}var f,h,p,d,$=u.onload||"",v=u.autoscroll,m=a(u,n);n.$on("$stateChangeSuccess",function(){l(!1)}),n.$on("$viewContentLoading",function(){l(!1)}),l(!0)}}};return l}function C(e,t,n,r){return{restrict:"ECA",priority:-400,compile:function(i){var o=i.html();return function(i,a,s){var u=n.$current,c=A(i,s,a,r),l=u&&u.locals[c];if(l){a.data("$uiView",{name:c,state:l.$$state}),a.html(l.$template?l.$template:o);var f=e(a.contents());if(l.$$controller){l.$scope=i,l.$element=a;var h=t(l.$$controller,l);l.$$controllerAs&&(i[l.$$controllerAs]=h),a.data("$ngControllerController",h),a.children().data("$ngControllerController",h)}f(i)}}}}}function A(e,t,n,r){var i=r(t.uiView||t.name||"")(e),o=n.inheritedData("$uiView");return i.indexOf("@")>=0?i:i+"@"+(o?o.state.name:"")}function k(e,t){var n,r=e.match(/^\s*({[^}]*})\s*$/);if(r&&(e=t+"("+r[1]+")"),n=e.replace(/\n/g," ").match(/^([^(]+?)\s*(\((.*)\))?$/),!n||4!==n.length)throw new Error("Invalid state ref '"+e+"'");return{state:n[1],paramExpr:n[3]||null}}function O(e){var t=e.parent().inheritedData("$uiView");return t&&t.state&&t.state.name?t.state:void 0}function M(e,n){var r=["location","inherit","reload","absolute"];return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(i,o,a,s){var u=k(a.uiSref,e.current.name),c=null,l=O(o)||e.$current,f="[object SVGAnimatedString]"===Object.prototype.toString.call(o.prop("href"))?"xlink:href":"href",h=null,p="A"===o.prop("tagName").toUpperCase(),d="FORM"===o[0].nodeName,$=d?"action":f,v=!0,m={relative:l,inherit:!0},g=i.$eval(a.uiSrefOpts)||{};t.forEach(r,function(e){e in g&&(m[e]=g[e])});var y=function(n){if(n&&(c=t.copy(n)),v){h=e.href(u.state,c,m);var r=s[1]||s[0];return r&&r.$$addStateInfo(u.state,c),null===h?(v=!1,!1):void a.$set($,h)}};u.paramExpr&&(i.$watch(u.paramExpr,function(e,t){e!==c&&y(e)},!0),c=t.copy(i.$eval(u.paramExpr))),y(),d||o.bind("click",function(t){var r=t.which||t.button;if(!(r>1||t.ctrlKey||t.metaKey||t.shiftKey||o.attr("target"))){var i=n(function(){e.go(u.state,c,m)});t.preventDefault();var a=p&&!h?1:0;t.preventDefault=function(){a--<=0&&n.cancel(i)}}})}}}function T(e,t,n){return{restrict:"A",controller:["$scope","$element","$attrs",function(t,r,i){function o(){a()?r.addClass(u):r.removeClass(u)}function a(){for(var e=0;e<c.length;e++)if(s(c[e].state,c[e].params))return!0;return!1}function s(t,n){return"undefined"!=typeof i.uiSrefActiveEq?e.is(t.name,n):e.includes(t.name,n)}var u,c=[];u=n(i.uiSrefActiveEq||i.uiSrefActive||"",!1)(t),this.$$addStateInfo=function(t,n){var i=e.get(t,O(r));c.push({state:i||{name:t},params:n}),o()},t.$on("$stateChangeSuccess",o)}]}}function j(e){var t=function(t){return e.is(t)};return t.$stateful=!0,t}function V(e){var t=function(t){return e.includes(t)};return t.$stateful=!0,t}var N=t.isDefined,P=t.isFunction,I=t.isString,D=t.isObject,q=t.isArray,R=t.forEach,F=t.extend,_=t.copy;t.module("ui.router.util",["ng"]),t.module("ui.router.router",["ui.router.util"]),t.module("ui.router.state",["ui.router.router","ui.router.util"]),t.module("ui.router",["ui.router.state"]),t.module("ui.router.compat",["ui.router"]),$.$inject=["$q","$injector"],t.module("ui.router.util").service("$resolve",$),v.$inject=["$http","$templateCache","$injector"],t.module("ui.router.util").service("$templateFactory",v);var U;m.prototype.concat=function(e,t){var n={caseInsensitive:U.caseInsensitive(),strict:U.strictMode(),squash:U.defaultSquashPolicy()};return new m(this.sourcePath+e+this.sourceSearch,F(n,t),this)},m.prototype.toString=function(){return this.source},m.prototype.exec=function(e,t){function n(e){function t(e){return e.split("").reverse().join("")}function n(e){return e.replace(/\\-/g,"-")}var r=t(e).split(/-(?!\\)/),i=d(r,t);return d(i,n).reverse()}var r=this.regexp.exec(e);if(!r)return null;t=t||{};var i,o,a,s=this.parameters(),u=s.length,c=this.segments.length-1,l={};if(c!==r.length-1)throw new Error("Unbalanced capture group in route '"+this.source+"'");for(i=0;c>i;i++){a=s[i];var f=this.params[a],h=r[i+1];for(o=0;o<f.replace;o++)f.replace[o].from===h&&(h=f.replace[o].to);h&&f.array===!0&&(h=n(h)),l[a]=f.value(h)}for(;u>i;i++)a=s[i],l[a]=this.params[a].value(t[a]);return l},m.prototype.parameters=function(e){return N(e)?this.params[e]||null:this.$$paramNames},m.prototype.validates=function(e){return this.params.$$validates(e)},m.prototype.format=function(e){function t(e){return encodeURIComponent(e).replace(/-/g,function(e){return"%5C%"+e.charCodeAt(0).toString(16).toUpperCase()})}e=e||{};var n=this.segments,r=this.parameters(),i=this.params;if(!this.validates(e))return null;var o,a=!1,s=n.length-1,u=r.length,c=n[0];for(o=0;u>o;o++){var l=s>o,f=r[o],h=i[f],p=h.value(e[f]),$=h.isOptional&&h.type.equals(h.value(),p),v=$?h.squash:!1,m=h.type.encode(p);if(l){var g=n[o+1];if(v===!1)null!=m&&(c+=q(m)?d(m,t).join("-"):encodeURIComponent(m)),c+=g;else if(v===!0){var y=c.match(/\/$/)?/\/?(.*)/:/(.*)/;c+=g.match(y)[1]}else I(v)&&(c+=v+g)}else{if(null==m||$&&v!==!1)continue;q(m)||(m=[m]),m=d(m,encodeURIComponent).join("&"+f+"="),c+=(a?"&":"?")+(f+"="+m),a=!0}}return c},g.prototype.is=function(e,t){return!0},g.prototype.encode=function(e,t){return e},g.prototype.decode=function(e,t){return e},g.prototype.equals=function(e,t){return e==t},g.prototype.$subPattern=function(){var e=this.pattern.toString();return e.substr(1,e.length-2)},g.prototype.pattern=/.*/,g.prototype.toString=function(){return"{Type:"+this.name+"}"},g.prototype.$normalize=function(e){return this.is(e)?e:this.decode(e)},g.prototype.$asArray=function(e,t){function r(e,t){function r(e,t){return function(){return e[t].apply(e,arguments)}}function i(e){return q(e)?e:N(e)?[e]:[]}function o(e){switch(e.length){case 0:return n;case 1:return"auto"===t?e[0]:e;default:return e}}function a(e){return!e}function s(e,t){return function(n){n=i(n);var r=d(n,e);return t===!0?0===p(r,a).length:o(r)}}function u(e){return function(t,n){var r=i(t),o=i(n);if(r.length!==o.length)return!1;for(var a=0;a<r.length;a++)if(!e(r[a],o[a]))return!1;return!0}}this.encode=s(r(e,"encode")),this.decode=s(r(e,"decode")),this.is=s(r(e,"is"),!0),this.equals=u(r(e,"equals")),this.pattern=e.pattern,this.$normalize=s(r(e,"$normalize")),this.name=e.name,this.$arrayMode=t}if(!e)return this;if("auto"===e&&!t)throw new Error("'auto' array mode is for query parameters only");return new r(this,e)},t.module("ui.router.util").provider("$urlMatcherFactory",y),t.module("ui.router.util").run(["$urlMatcherFactory",function(e){}]),w.$inject=["$locationProvider","$urlMatcherFactoryProvider"],t.module("ui.router.router").provider("$urlRouter",w),b.$inject=["$urlRouterProvider","$urlMatcherFactoryProvider"],t.module("ui.router.state").value("$stateParams",{}).provider("$state",b),x.$inject=[],t.module("ui.router.state").provider("$view",x),t.module("ui.router.state").provider("$uiViewScroll",S),E.$inject=["$state","$injector","$uiViewScroll","$interpolate"],C.$inject=["$compile","$controller","$state","$interpolate"],t.module("ui.router.state").directive("uiView",E),t.module("ui.router.state").directive("uiView",C),M.$inject=["$state","$timeout"],T.$inject=["$state","$stateParams","$interpolate"],t.module("ui.router.state").directive("uiSref",M).directive("uiSrefActive",T).directive("uiSrefActiveEq",T),j.$inject=["$state"],V.$inject=["$state"],t.module("ui.router.state").filter("isState",j).filter("includedByState",V)}(window,window.angular);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuZ3VsYXIuanMiLCJhbmd1bGFyLXVpLXJvdXRlci5taW4uanMiXSwibmFtZXMiOlsid2luZG93IiwiZG9jdW1lbnQiLCJ1bmRlZmluZWQiLCJtaW5FcnIiLCJtb2R1bGUiLCJFcnJvckNvbnN0cnVjdG9yIiwiRXJyb3IiLCJwYXJhbVByZWZpeCIsImkiLCJTS0lQX0lOREVYRVMiLCJ0ZW1wbGF0ZUFyZ3MiLCJhcmd1bWVudHMiLCJjb2RlIiwibWVzc2FnZSIsInRlbXBsYXRlIiwicmVwbGFjZSIsIm1hdGNoIiwiaW5kZXgiLCJzbGljZSIsInNoaWZ0ZWRJbmRleCIsImxlbmd0aCIsInRvRGVidWdTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnQiLCJpc0FycmF5TGlrZSIsIm9iaiIsImlzV2luZG93IiwiaXNBcnJheSIsImlzU3RyaW5nIiwianFMaXRlIiwiT2JqZWN0IiwiaXNOdW1iZXIiLCJpdGVtIiwiZm9yRWFjaCIsIml0ZXJhdG9yIiwiY29udGV4dCIsImtleSIsImlzRnVuY3Rpb24iLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpc1ByaW1pdGl2ZSIsImlzQmxhbmtPYmplY3QiLCJmb3JFYWNoU29ydGVkIiwia2V5cyIsInNvcnQiLCJyZXZlcnNlUGFyYW1zIiwiaXRlcmF0b3JGbiIsInZhbHVlIiwibmV4dFVpZCIsInVpZCIsInNldEhhc2hLZXkiLCJoIiwiJCRoYXNoS2V5IiwiYmFzZUV4dGVuZCIsImRzdCIsIm9ianMiLCJkZWVwIiwiaWkiLCJpc09iamVjdCIsImoiLCJqaiIsInNyYyIsImlzRGF0ZSIsIkRhdGUiLCJ2YWx1ZU9mIiwiaXNSZWdFeHAiLCJSZWdFeHAiLCJub2RlTmFtZSIsImNsb25lTm9kZSIsImlzRWxlbWVudCIsImNsb25lIiwiZXh0ZW5kIiwibWVyZ2UiLCJ0b0ludCIsInN0ciIsInBhcnNlSW50IiwiaW5oZXJpdCIsInBhcmVudCIsImV4dHJhIiwiY3JlYXRlIiwibm9vcCIsImlkZW50aXR5IiwiJCIsInZhbHVlRm4iLCJoYXNDdXN0b21Ub1N0cmluZyIsInRvU3RyaW5nIiwiaXNVbmRlZmluZWQiLCJpc0RlZmluZWQiLCJnZXRQcm90b3R5cGVPZiIsImlzU2NvcGUiLCIkZXZhbEFzeW5jIiwiJHdhdGNoIiwiaXNGaWxlIiwiaXNGb3JtRGF0YSIsImlzQmxvYiIsImlzQm9vbGVhbiIsImlzUHJvbWlzZUxpa2UiLCJ0aGVuIiwiaXNUeXBlZEFycmF5IiwiVFlQRURfQVJSQVlfUkVHRVhQIiwidGVzdCIsIm5vZGUiLCJwcm9wIiwiYXR0ciIsImZpbmQiLCJtYWtlTWFwIiwiaXRlbXMiLCJzcGxpdCIsIm5vZGVOYW1lXyIsImVsZW1lbnQiLCJsb3dlcmNhc2UiLCJhcnJheVJlbW92ZSIsImFycmF5IiwiaW5kZXhPZiIsInNwbGljZSIsImNvcHkiLCJzb3VyY2UiLCJkZXN0aW5hdGlvbiIsImNvcHlSZWN1cnNlIiwicHVzaCIsImNvcHlFbGVtZW50Iiwic3RhY2tTb3VyY2UiLCJzdGFja0Rlc3QiLCJuZ01pbkVyciIsIm5lZWRzUmVjdXJzZSIsImNvbnN0cnVjdG9yIiwiZ2V0VGltZSIsImxhc3RJbmRleCIsInNoYWxsb3dDb3B5IiwiY2hhckF0IiwiZXF1YWxzIiwibzEiLCJvMiIsImtleVNldCIsInQxIiwidDIiLCJjcmVhdGVNYXAiLCJjb25jYXQiLCJhcnJheTEiLCJhcnJheTIiLCJzbGljZUFyZ3MiLCJhcmdzIiwic3RhcnRJbmRleCIsImJpbmQiLCJzZWxmIiwiZm4iLCJjdXJyeUFyZ3MiLCJhcHBseSIsInRvSnNvblJlcGxhY2VyIiwidmFsIiwidG9Kc29uIiwicHJldHR5IiwiSlNPTiIsInN0cmluZ2lmeSIsImZyb21Kc29uIiwianNvbiIsInBhcnNlIiwidGltZXpvbmVUb09mZnNldCIsInRpbWV6b25lIiwiZmFsbGJhY2siLCJyZXF1ZXN0ZWRUaW1lem9uZU9mZnNldCIsImlzTmFOIiwiYWRkRGF0ZU1pbnV0ZXMiLCJkYXRlIiwibWludXRlcyIsInNldE1pbnV0ZXMiLCJnZXRNaW51dGVzIiwiY29udmVydFRpbWV6b25lVG9Mb2NhbCIsInJldmVyc2UiLCJ0aW1lem9uZU9mZnNldCIsImdldFRpbWV6b25lT2Zmc2V0Iiwic3RhcnRpbmdUYWciLCJlbXB0eSIsImUiLCJlbGVtSHRtbCIsImFwcGVuZCIsImh0bWwiLCJub2RlVHlwZSIsIk5PREVfVFlQRV9URVhUIiwidHJ5RGVjb2RlVVJJQ29tcG9uZW50IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicGFyc2VLZXlWYWx1ZSIsImtleVZhbHVlIiwic3BsaXRQb2ludCIsInN1YnN0cmluZyIsInRvS2V5VmFsdWUiLCJwYXJ0cyIsImFycmF5VmFsdWUiLCJlbmNvZGVVcmlRdWVyeSIsImpvaW4iLCJlbmNvZGVVcmlTZWdtZW50IiwicGN0RW5jb2RlU3BhY2VzIiwiZ2V0TmdBdHRyaWJ1dGUiLCJuZ0F0dHIiLCJuZ0F0dHJQcmVmaXhlcyIsImdldEF0dHJpYnV0ZSIsImFuZ3VsYXJJbml0IiwiYm9vdHN0cmFwIiwiYXBwRWxlbWVudCIsImNvbmZpZyIsInByZWZpeCIsIm5hbWUiLCJoYXNBdHRyaWJ1dGUiLCJjYW5kaWRhdGUiLCJxdWVyeVNlbGVjdG9yIiwic3RyaWN0RGkiLCJtb2R1bGVzIiwiZGVmYXVsdENvbmZpZyIsImRvQm9vdHN0cmFwIiwiaW5qZWN0b3IiLCJ0YWciLCJ1bnNoaWZ0IiwiJHByb3ZpZGUiLCJkZWJ1Z0luZm9FbmFibGVkIiwiJGNvbXBpbGVQcm92aWRlciIsImNyZWF0ZUluamVjdG9yIiwiaW52b2tlIiwic2NvcGUiLCJjb21waWxlIiwiJGFwcGx5IiwiZGF0YSIsIk5HX0VOQUJMRV9ERUJVR19JTkZPIiwiTkdfREVGRVJfQk9PVFNUUkFQIiwiYW5ndWxhciIsInJlc3VtZUJvb3RzdHJhcCIsImV4dHJhTW9kdWxlcyIsInJlc3VtZURlZmVycmVkQm9vdHN0cmFwIiwicmVsb2FkV2l0aERlYnVnSW5mbyIsImxvY2F0aW9uIiwicmVsb2FkIiwiZ2V0VGVzdGFiaWxpdHkiLCJyb290RWxlbWVudCIsImdldCIsInNuYWtlX2Nhc2UiLCJzZXBhcmF0b3IiLCJTTkFLRV9DQVNFX1JFR0VYUCIsImxldHRlciIsInBvcyIsInRvTG93ZXJDYXNlIiwiYmluZEpRdWVyeSIsIm9yaWdpbmFsQ2xlYW5EYXRhIiwiYmluZEpRdWVyeUZpcmVkIiwianFOYW1lIiwianEiLCJqUXVlcnkiLCJvbiIsIkpRTGl0ZVByb3RvdHlwZSIsImlzb2xhdGVTY29wZSIsImNvbnRyb2xsZXIiLCJpbmhlcml0ZWREYXRhIiwiY2xlYW5EYXRhIiwiZWxlbXMiLCJldmVudHMiLCJza2lwRGVzdHJveU9uTmV4dEpRdWVyeUNsZWFuRGF0YSIsImVsZW0iLCJfZGF0YSIsIiRkZXN0cm95IiwidHJpZ2dlckhhbmRsZXIiLCJKUUxpdGUiLCJhc3NlcnRBcmciLCJhcmciLCJyZWFzb24iLCJhc3NlcnRBcmdGbiIsImFjY2VwdEFycmF5QW5ub3RhdGlvbiIsImFzc2VydE5vdEhhc093blByb3BlcnR5IiwiZ2V0dGVyIiwicGF0aCIsImJpbmRGblRvU2NvcGUiLCJsYXN0SW5zdGFuY2UiLCJsZW4iLCJnZXRCbG9ja05vZGVzIiwibm9kZXMiLCJibG9ja05vZGVzIiwiZW5kTm9kZSIsIm5leHRTaWJsaW5nIiwic2V0dXBNb2R1bGVMb2FkZXIiLCJlbnN1cmUiLCJmYWN0b3J5IiwiJGluamVjdG9yTWluRXJyIiwiJCRtaW5FcnIiLCJyZXF1aXJlcyIsImNvbmZpZ0ZuIiwiaW52b2tlTGF0ZXIiLCJwcm92aWRlciIsIm1ldGhvZCIsImluc2VydE1ldGhvZCIsInF1ZXVlIiwiaW52b2tlUXVldWUiLCJtb2R1bGVJbnN0YW5jZSIsImludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSIsInJlY2lwZU5hbWUiLCJmYWN0b3J5RnVuY3Rpb24iLCIkJG1vZHVsZU5hbWUiLCJjb25maWdCbG9ja3MiLCJydW5CbG9ja3MiLCJfaW52b2tlUXVldWUiLCJfY29uZmlnQmxvY2tzIiwiX3J1bkJsb2NrcyIsInNlcnZpY2UiLCJjb25zdGFudCIsImRlY29yYXRvciIsImFuaW1hdGlvbiIsImZpbHRlciIsImRpcmVjdGl2ZSIsInJ1biIsImJsb2NrIiwidGhpcyIsInNlcmlhbGl6ZU9iamVjdCIsInNlZW4iLCJwdWJsaXNoRXh0ZXJuYWxBUEkiLCJ2ZXJzaW9uIiwidXBwZXJjYXNlIiwiY2FsbGJhY2tzIiwiY291bnRlciIsIiQkY3NwIiwiY3NwIiwiYW5ndWxhck1vZHVsZSIsIiQkc2FuaXRpemVVcmkiLCIkJFNhbml0aXplVXJpUHJvdmlkZXIiLCIkQ29tcGlsZVByb3ZpZGVyIiwiYSIsImh0bWxBbmNob3JEaXJlY3RpdmUiLCJpbnB1dCIsImlucHV0RGlyZWN0aXZlIiwidGV4dGFyZWEiLCJmb3JtIiwiZm9ybURpcmVjdGl2ZSIsInNjcmlwdCIsInNjcmlwdERpcmVjdGl2ZSIsInNlbGVjdCIsInNlbGVjdERpcmVjdGl2ZSIsInN0eWxlIiwic3R5bGVEaXJlY3RpdmUiLCJvcHRpb24iLCJvcHRpb25EaXJlY3RpdmUiLCJuZ0JpbmQiLCJuZ0JpbmREaXJlY3RpdmUiLCJuZ0JpbmRIdG1sIiwibmdCaW5kSHRtbERpcmVjdGl2ZSIsIm5nQmluZFRlbXBsYXRlIiwibmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUiLCJuZ0NsYXNzIiwibmdDbGFzc0RpcmVjdGl2ZSIsIm5nQ2xhc3NFdmVuIiwibmdDbGFzc0V2ZW5EaXJlY3RpdmUiLCJuZ0NsYXNzT2RkIiwibmdDbGFzc09kZERpcmVjdGl2ZSIsIm5nQ2xvYWsiLCJuZ0Nsb2FrRGlyZWN0aXZlIiwibmdDb250cm9sbGVyIiwibmdDb250cm9sbGVyRGlyZWN0aXZlIiwibmdGb3JtIiwibmdGb3JtRGlyZWN0aXZlIiwibmdIaWRlIiwibmdIaWRlRGlyZWN0aXZlIiwibmdJZiIsIm5nSWZEaXJlY3RpdmUiLCJuZ0luY2x1ZGUiLCJuZ0luY2x1ZGVEaXJlY3RpdmUiLCJuZ0luaXQiLCJuZ0luaXREaXJlY3RpdmUiLCJuZ05vbkJpbmRhYmxlIiwibmdOb25CaW5kYWJsZURpcmVjdGl2ZSIsIm5nUGx1cmFsaXplIiwibmdQbHVyYWxpemVEaXJlY3RpdmUiLCJuZ1JlcGVhdCIsIm5nUmVwZWF0RGlyZWN0aXZlIiwibmdTaG93IiwibmdTaG93RGlyZWN0aXZlIiwibmdTdHlsZSIsIm5nU3R5bGVEaXJlY3RpdmUiLCJuZ1N3aXRjaCIsIm5nU3dpdGNoRGlyZWN0aXZlIiwibmdTd2l0Y2hXaGVuIiwibmdTd2l0Y2hXaGVuRGlyZWN0aXZlIiwibmdTd2l0Y2hEZWZhdWx0IiwibmdTd2l0Y2hEZWZhdWx0RGlyZWN0aXZlIiwibmdPcHRpb25zIiwibmdPcHRpb25zRGlyZWN0aXZlIiwibmdUcmFuc2NsdWRlIiwibmdUcmFuc2NsdWRlRGlyZWN0aXZlIiwibmdNb2RlbCIsIm5nTW9kZWxEaXJlY3RpdmUiLCJuZ0xpc3QiLCJuZ0xpc3REaXJlY3RpdmUiLCJuZ0NoYW5nZSIsIm5nQ2hhbmdlRGlyZWN0aXZlIiwicGF0dGVybiIsInBhdHRlcm5EaXJlY3RpdmUiLCJuZ1BhdHRlcm4iLCJyZXF1aXJlZCIsInJlcXVpcmVkRGlyZWN0aXZlIiwibmdSZXF1aXJlZCIsIm1pbmxlbmd0aCIsIm1pbmxlbmd0aERpcmVjdGl2ZSIsIm5nTWlubGVuZ3RoIiwibWF4bGVuZ3RoIiwibWF4bGVuZ3RoRGlyZWN0aXZlIiwibmdNYXhsZW5ndGgiLCJuZ1ZhbHVlIiwibmdWYWx1ZURpcmVjdGl2ZSIsIm5nTW9kZWxPcHRpb25zIiwibmdNb2RlbE9wdGlvbnNEaXJlY3RpdmUiLCJuZ0luY2x1ZGVGaWxsQ29udGVudERpcmVjdGl2ZSIsIm5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzIiwibmdFdmVudERpcmVjdGl2ZXMiLCIkYW5jaG9yU2Nyb2xsIiwiJEFuY2hvclNjcm9sbFByb3ZpZGVyIiwiJGFuaW1hdGUiLCIkQW5pbWF0ZVByb3ZpZGVyIiwiJGFuaW1hdGVDc3MiLCIkQ29yZUFuaW1hdGVDc3NQcm92aWRlciIsIiQkYW5pbWF0ZVF1ZXVlIiwiJCRDb3JlQW5pbWF0ZVF1ZXVlUHJvdmlkZXIiLCIkJEFuaW1hdGVSdW5uZXIiLCIkJENvcmVBbmltYXRlUnVubmVyUHJvdmlkZXIiLCIkYnJvd3NlciIsIiRCcm93c2VyUHJvdmlkZXIiLCIkY2FjaGVGYWN0b3J5IiwiJENhY2hlRmFjdG9yeVByb3ZpZGVyIiwiJGNvbnRyb2xsZXIiLCIkQ29udHJvbGxlclByb3ZpZGVyIiwiJGRvY3VtZW50IiwiJERvY3VtZW50UHJvdmlkZXIiLCIkZXhjZXB0aW9uSGFuZGxlciIsIiRFeGNlcHRpb25IYW5kbGVyUHJvdmlkZXIiLCIkZmlsdGVyIiwiJEZpbHRlclByb3ZpZGVyIiwiJCRmb3JjZVJlZmxvdyIsIiQkRm9yY2VSZWZsb3dQcm92aWRlciIsIiRpbnRlcnBvbGF0ZSIsIiRJbnRlcnBvbGF0ZVByb3ZpZGVyIiwiJGludGVydmFsIiwiJEludGVydmFsUHJvdmlkZXIiLCIkaHR0cCIsIiRIdHRwUHJvdmlkZXIiLCIkaHR0cFBhcmFtU2VyaWFsaXplciIsIiRIdHRwUGFyYW1TZXJpYWxpemVyUHJvdmlkZXIiLCIkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZSIsIiRIdHRwUGFyYW1TZXJpYWxpemVySlFMaWtlUHJvdmlkZXIiLCIkaHR0cEJhY2tlbmQiLCIkSHR0cEJhY2tlbmRQcm92aWRlciIsIiR4aHJGYWN0b3J5IiwiJHhockZhY3RvcnlQcm92aWRlciIsIiRsb2NhdGlvbiIsIiRMb2NhdGlvblByb3ZpZGVyIiwiJGxvZyIsIiRMb2dQcm92aWRlciIsIiRwYXJzZSIsIiRQYXJzZVByb3ZpZGVyIiwiJHJvb3RTY29wZSIsIiRSb290U2NvcGVQcm92aWRlciIsIiRxIiwiJFFQcm92aWRlciIsIiQkcSIsIiQkUVByb3ZpZGVyIiwiJHNjZSIsIiRTY2VQcm92aWRlciIsIiRzY2VEZWxlZ2F0ZSIsIiRTY2VEZWxlZ2F0ZVByb3ZpZGVyIiwiJHNuaWZmZXIiLCIkU25pZmZlclByb3ZpZGVyIiwiJHRlbXBsYXRlQ2FjaGUiLCIkVGVtcGxhdGVDYWNoZVByb3ZpZGVyIiwiJHRlbXBsYXRlUmVxdWVzdCIsIiRUZW1wbGF0ZVJlcXVlc3RQcm92aWRlciIsIiQkdGVzdGFiaWxpdHkiLCIkJFRlc3RhYmlsaXR5UHJvdmlkZXIiLCIkdGltZW91dCIsIiRUaW1lb3V0UHJvdmlkZXIiLCIkd2luZG93IiwiJFdpbmRvd1Byb3ZpZGVyIiwiJCRyQUYiLCIkJFJBRlByb3ZpZGVyIiwiJCRqcUxpdGUiLCIkJGpxTGl0ZVByb3ZpZGVyIiwiJCRIYXNoTWFwIiwiJCRIYXNoTWFwUHJvdmlkZXIiLCIkJGNvb2tpZVJlYWRlciIsIiQkQ29va2llUmVhZGVyUHJvdmlkZXIiLCJqcU5leHRJZCIsImpxSWQiLCJjYW1lbENhc2UiLCJTUEVDSUFMX0NIQVJTX1JFR0VYUCIsIl8iLCJvZmZzZXQiLCJ0b1VwcGVyQ2FzZSIsIk1PWl9IQUNLX1JFR0VYUCIsImpxTGl0ZUlzVGV4dE5vZGUiLCJIVE1MX1JFR0VYUCIsImpxTGl0ZUFjY2VwdHNEYXRhIiwiTk9ERV9UWVBFX0VMRU1FTlQiLCJOT0RFX1RZUEVfRE9DVU1FTlQiLCJqcUxpdGVIYXNEYXRhIiwianFDYWNoZSIsIm5nMzM5IiwianFMaXRlQnVpbGRGcmFnbWVudCIsInRtcCIsIndyYXAiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsImFwcGVuZENoaWxkIiwiY3JlYXRlRWxlbWVudCIsIlRBR19OQU1FX1JFR0VYUCIsImV4ZWMiLCJ3cmFwTWFwIiwiX2RlZmF1bHQiLCJpbm5lckhUTUwiLCJYSFRNTF9UQUdfUkVHRVhQIiwibGFzdENoaWxkIiwiY2hpbGROb2RlcyIsImZpcnN0Q2hpbGQiLCJ0ZXh0Q29udGVudCIsImpxTGl0ZVBhcnNlSFRNTCIsInBhcnNlZCIsIlNJTkdMRV9UQUdfUkVHRVhQIiwiYXJnSXNTdHJpbmciLCJ0cmltIiwianFMaXRlTWluRXJyIiwianFMaXRlQWRkTm9kZXMiLCJqcUxpdGVDbG9uZSIsImpxTGl0ZURlYWxvYyIsIm9ubHlEZXNjZW5kYW50cyIsImpxTGl0ZVJlbW92ZURhdGEiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZGVzY2VuZGFudHMiLCJsIiwianFMaXRlT2ZmIiwidHlwZSIsInVuc3VwcG9ydGVkIiwiZXhwYW5kb1N0b3JlIiwianFMaXRlRXhwYW5kb1N0b3JlIiwiaGFuZGxlIiwicmVtb3ZlSGFuZGxlciIsImxpc3RlbmVyRm5zIiwicmVtb3ZlRXZlbnRMaXN0ZW5lckZuIiwiTU9VU0VfRVZFTlRfTUFQIiwiZXhwYW5kb0lkIiwiY3JlYXRlSWZOZWNlc3NhcnkiLCJqcUxpdGVEYXRhIiwiaXNTaW1wbGVTZXR0ZXIiLCJpc1NpbXBsZUdldHRlciIsIm1hc3NHZXR0ZXIiLCJqcUxpdGVIYXNDbGFzcyIsInNlbGVjdG9yIiwianFMaXRlUmVtb3ZlQ2xhc3MiLCJjc3NDbGFzc2VzIiwic2V0QXR0cmlidXRlIiwiY3NzQ2xhc3MiLCJqcUxpdGVBZGRDbGFzcyIsImV4aXN0aW5nQ2xhc3NlcyIsInJvb3QiLCJlbGVtZW50cyIsImpxTGl0ZUNvbnRyb2xsZXIiLCJqcUxpdGVJbmhlcml0ZWREYXRhIiwiZG9jdW1lbnRFbGVtZW50IiwibmFtZXMiLCJwYXJlbnROb2RlIiwiTk9ERV9UWVBFX0RPQ1VNRU5UX0ZSQUdNRU5UIiwiaG9zdCIsImpxTGl0ZUVtcHR5IiwicmVtb3ZlQ2hpbGQiLCJqcUxpdGVSZW1vdmUiLCJrZWVwRGF0YSIsImpxTGl0ZURvY3VtZW50TG9hZGVkIiwiYWN0aW9uIiwid2luIiwicmVhZHlTdGF0ZSIsInNldFRpbWVvdXQiLCJnZXRCb29sZWFuQXR0ck5hbWUiLCJib29sZWFuQXR0ciIsIkJPT0xFQU5fQVRUUiIsIkJPT0xFQU5fRUxFTUVOVFMiLCJnZXRBbGlhc2VkQXR0ck5hbWUiLCJBTElBU0VEX0FUVFIiLCJjcmVhdGVFdmVudEhhbmRsZXIiLCJldmVudEhhbmRsZXIiLCJldmVudCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJldmVudEZucyIsImV2ZW50Rm5zTGVuZ3RoIiwiaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwib3JpZ2luYWxTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJzdG9wUHJvcGFnYXRpb24iLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsImhhbmRsZXJXcmFwcGVyIiwic3BlY2lhbEhhbmRsZXJXcmFwcGVyIiwiZGVmYXVsdEhhbmRsZXJXcmFwcGVyIiwiaGFuZGxlciIsInNwZWNpYWxNb3VzZUhhbmRsZXJXcmFwcGVyIiwidGFyZ2V0IiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJqcUxpdGVDb250YWlucyIsIiRnZXQiLCJoYXNDbGFzcyIsImNsYXNzZXMiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiaGFzaEtleSIsIm5leHRVaWRGbiIsIm9ialR5cGUiLCJIYXNoTWFwIiwiaXNvbGF0ZWRVaWQiLCJwdXQiLCJhbm9uRm4iLCJmblRleHQiLCJTVFJJUF9DT01NRU5UUyIsIkZOX0FSR1MiLCJhbm5vdGF0ZSIsIiRpbmplY3QiLCJhcmdEZWNsIiwibGFzdCIsIkZOX0FSR19TUExJVCIsIkZOX0FSRyIsImFsbCIsInVuZGVyc2NvcmUiLCJtb2R1bGVzVG9Mb2FkIiwic3VwcG9ydE9iamVjdCIsImRlbGVnYXRlIiwicHJvdmlkZXJfIiwicHJvdmlkZXJJbmplY3RvciIsImluc3RhbnRpYXRlIiwicHJvdmlkZXJDYWNoZSIsInByb3ZpZGVyU3VmZml4IiwiZW5mb3JjZVJldHVyblZhbHVlIiwicmVzdWx0IiwiaW5zdGFuY2VJbmplY3RvciIsImZhY3RvcnlGbiIsImVuZm9yY2UiLCIkaW5qZWN0b3IiLCJpbnN0YW5jZUNhY2hlIiwic2VydmljZU5hbWUiLCJkZWNvckZuIiwib3JpZ1Byb3ZpZGVyIiwib3JpZyRnZXQiLCJvcmlnSW5zdGFuY2UiLCIkZGVsZWdhdGUiLCJsb2FkTW9kdWxlcyIsIm1vZHVsZUZuIiwicnVuSW52b2tlUXVldWUiLCJpbnZva2VBcmdzIiwibG9hZGVkTW9kdWxlcyIsInN0YWNrIiwiY3JlYXRlSW50ZXJuYWxJbmplY3RvciIsImNhY2hlIiwiZ2V0U2VydmljZSIsImNhbGxlciIsIklOU1RBTlRJQVRJTkciLCJlcnIiLCJzaGlmdCIsImxvY2FscyIsIiQkYW5ub3RhdGUiLCJUeXBlIiwiaW5zdGFuY2UiLCJwcm90b3R5cGUiLCJyZXR1cm5lZFZhbHVlIiwiaGFzIiwiYXV0b1Njcm9sbGluZ0VuYWJsZWQiLCJkaXNhYmxlQXV0b1Njcm9sbGluZyIsImdldEZpcnN0QW5jaG9yIiwibGlzdCIsIkFycmF5Iiwic29tZSIsImdldFlPZmZzZXQiLCJzY3JvbGwiLCJ5T2Zmc2V0IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInBvc2l0aW9uIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYm90dG9tIiwic2Nyb2xsVG8iLCJzY3JvbGxJbnRvVmlldyIsImVsZW1Ub3AiLCJ0b3AiLCJzY3JvbGxCeSIsImhhc2giLCJlbG0iLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwibmV3VmFsIiwib2xkVmFsIiwibWVyZ2VDbGFzc2VzIiwiYiIsImV4dHJhY3RFbGVtZW50Tm9kZSIsIkVMRU1FTlRfTk9ERSIsInNwbGl0Q2xhc3NlcyIsImtsYXNzIiwicHJlcGFyZUFuaW1hdGVPcHRpb25zIiwib3B0aW9ucyIsIkJyb3dzZXIiLCJjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdCIsIm91dHN0YW5kaW5nUmVxdWVzdENvdW50Iiwib3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzIiwicG9wIiwiZXJyb3IiLCJnZXRIYXNoIiwidXJsIiwic3Vic3RyIiwiY2FjaGVTdGF0ZUFuZEZpcmVVcmxDaGFuZ2UiLCJwZW5kaW5nTG9jYXRpb24iLCJjYWNoZVN0YXRlIiwiZmlyZVVybENoYW5nZSIsImdldEN1cnJlbnRTdGF0ZSIsImhpc3RvcnkiLCJzdGF0ZSIsImNhY2hlZFN0YXRlIiwibGFzdENhY2hlZFN0YXRlIiwibGFzdEJyb3dzZXJVcmwiLCJsYXN0SGlzdG9yeVN0YXRlIiwidXJsQ2hhbmdlTGlzdGVuZXJzIiwibGlzdGVuZXIiLCJjbGVhclRpbWVvdXQiLCJwZW5kaW5nRGVmZXJJZHMiLCJpc01vY2siLCIkJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0IiwiJCRpbmNPdXRzdGFuZGluZ1JlcXVlc3RDb3VudCIsIm5vdGlmeVdoZW5Ob091dHN0YW5kaW5nUmVxdWVzdHMiLCJjYWxsYmFjayIsImhyZWYiLCJiYXNlRWxlbWVudCIsInNhbWVTdGF0ZSIsInNhbWVCYXNlIiwic3RyaXBIYXNoIiwidXJsQ2hhbmdlSW5pdCIsIm9uVXJsQ2hhbmdlIiwiJCRhcHBsaWNhdGlvbkRlc3Ryb3llZCIsIm9mZiIsIiQkY2hlY2tVcmxDaGFuZ2UiLCJiYXNlSHJlZiIsImRlZmVyIiwiZGVsYXkiLCJ0aW1lb3V0SWQiLCJjYW5jZWwiLCJkZWZlcklkIiwiY2FjaGVGYWN0b3J5IiwiY2FjaGVJZCIsInJlZnJlc2giLCJlbnRyeSIsImZyZXNoRW5kIiwic3RhbGVFbmQiLCJuIiwibGluayIsInAiLCJuZXh0RW50cnkiLCJwcmV2RW50cnkiLCJjYWNoZXMiLCJzaXplIiwic3RhdHMiLCJpZCIsImNhcGFjaXR5IiwiTnVtYmVyIiwiTUFYX1ZBTFVFIiwibHJ1SGFzaCIsImxydUVudHJ5IiwicmVtb3ZlIiwicmVtb3ZlQWxsIiwiZGVzdHJveSIsImluZm8iLCIkJHNhbml0aXplVXJpUHJvdmlkZXIiLCJwYXJzZUlzb2xhdGVCaW5kaW5ncyIsImRpcmVjdGl2ZU5hbWUiLCJpc0NvbnRyb2xsZXIiLCJMT0NBTF9SRUdFWFAiLCJiaW5kaW5ncyIsImRlZmluaXRpb24iLCJzY29wZU5hbWUiLCIkY29tcGlsZU1pbkVyciIsIm1vZGUiLCJjb2xsZWN0aW9uIiwib3B0aW9uYWwiLCJhdHRyTmFtZSIsInBhcnNlRGlyZWN0aXZlQmluZGluZ3MiLCJiaW5kVG9Db250cm9sbGVyIiwiY29udHJvbGxlckFzIiwiaWRlbnRpZmllckZvckNvbnRyb2xsZXIiLCJhc3NlcnRWYWxpZERpcmVjdGl2ZU5hbWUiLCJoYXNEaXJlY3RpdmVzIiwiU3VmZml4IiwiQ09NTUVOVF9ESVJFQ1RJVkVfUkVHRVhQIiwiQ0xBU1NfRElSRUNUSVZFX1JFR0VYUCIsIkFMTF9PUl9OT1RISU5HX0FUVFJTIiwiUkVRVUlSRV9QUkVGSVhfUkVHRVhQIiwiRVZFTlRfSEFORExFUl9BVFRSX1JFR0VYUCIsInJlZ2lzdGVyRGlyZWN0aXZlIiwiZGlyZWN0aXZlRmFjdG9yeSIsImRpcmVjdGl2ZXMiLCJwcmlvcml0eSIsInJlcXVpcmUiLCJyZXN0cmljdCIsIiQkYmluZGluZ3MiLCIkJGlzb2xhdGVCaW5kaW5ncyIsImFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0IiwicmVnZXhwIiwiaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0IiwiZW5hYmxlZCIsInNhZmVBZGRDbGFzcyIsIiRlbGVtZW50IiwiY2xhc3NOYW1lIiwiJGNvbXBpbGVOb2RlcyIsInRyYW5zY2x1ZGVGbiIsIm1heFByaW9yaXR5IiwiaWdub3JlRGlyZWN0aXZlIiwicHJldmlvdXNDb21waWxlQ29udGV4dCIsIm5vZGVWYWx1ZSIsImNvbXBvc2l0ZUxpbmtGbiIsImNvbXBpbGVOb2RlcyIsIiQkYWRkU2NvcGVDbGFzcyIsIm5hbWVzcGFjZSIsImNsb25lQ29ubmVjdEZuIiwibmVlZHNOZXdTY29wZSIsIiRwYXJlbnQiLCIkbmV3IiwicGFyZW50Qm91bmRUcmFuc2NsdWRlRm4iLCJ0cmFuc2NsdWRlQ29udHJvbGxlcnMiLCJmdXR1cmVQYXJlbnRFbGVtZW50IiwiJCRib3VuZFRyYW5zY2x1ZGUiLCJkZXRlY3ROYW1lc3BhY2VGb3JDaGlsZEVsZW1lbnRzIiwiJGxpbmtOb2RlIiwid3JhcFRlbXBsYXRlIiwiY29udHJvbGxlck5hbWUiLCIkJGFkZFNjb3BlSW5mbyIsInBhcmVudEVsZW1lbnQiLCJub2RlTGlzdCIsIiRyb290RWxlbWVudCIsIm5vZGVMaW5rRm4iLCJjaGlsZExpbmtGbiIsImNoaWxkU2NvcGUiLCJpZHgiLCJjaGlsZEJvdW5kVHJhbnNjbHVkZUZuIiwic3RhYmxlTm9kZUxpc3QiLCJub2RlTGlua0ZuRm91bmQiLCJub2RlTGlzdExlbmd0aCIsImxpbmtGbnMiLCJ0cmFuc2NsdWRlT25UaGlzRWxlbWVudCIsImNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuIiwidHJhbnNjbHVkZSIsInRlbXBsYXRlT25UaGlzRWxlbWVudCIsImF0dHJzIiwibGlua0ZuRm91bmQiLCJBdHRyaWJ1dGVzIiwiY29sbGVjdERpcmVjdGl2ZXMiLCJhcHBseURpcmVjdGl2ZXNUb05vZGUiLCIkJGVsZW1lbnQiLCJ0ZXJtaW5hbCIsInByZXZpb3VzQm91bmRUcmFuc2NsdWRlRm4iLCJib3VuZFRyYW5zY2x1ZGVGbiIsInRyYW5zY2x1ZGVkU2NvcGUiLCJjbG9uZUZuIiwiY29udHJvbGxlcnMiLCJjb250YWluaW5nU2NvcGUiLCIkJHRyYW5zY2x1ZGVkIiwiYXR0cnNNYXAiLCIkYXR0ciIsImFkZERpcmVjdGl2ZSIsImRpcmVjdGl2ZU5vcm1hbGl6ZSIsIm5OYW1lIiwibmdBdHRyTmFtZSIsImlzTmdBdHRyIiwibkF0dHJzIiwiYXR0cmlidXRlcyIsImF0dHJTdGFydE5hbWUiLCJhdHRyRW5kTmFtZSIsIk5HX0FUVFJfQklORElORyIsIlBSRUZJWF9SRUdFWFAiLCJtdWx0aUVsZW1lbnRNYXRjaCIsIk1VTFRJX0VMRU1FTlRfRElSX1JFIiwiZGlyZWN0aXZlSXNNdWx0aUVsZW1lbnQiLCJhZGRBdHRySW50ZXJwb2xhdGVEaXJlY3RpdmUiLCJhbmltVmFsIiwibXNpZSIsImFkZFRleHRJbnRlcnBvbGF0ZURpcmVjdGl2ZSIsIk5PREVfVFlQRV9DT01NRU5UIiwiYnlQcmlvcml0eSIsImdyb3VwU2NhbiIsImF0dHJTdGFydCIsImF0dHJFbmQiLCJkZXB0aCIsImdyb3VwRWxlbWVudHNMaW5rRm5XcmFwcGVyIiwibGlua0ZuIiwiY29tcGlsZU5vZGUiLCJ0ZW1wbGF0ZUF0dHJzIiwianFDb2xsZWN0aW9uIiwib3JpZ2luYWxSZXBsYWNlRGlyZWN0aXZlIiwicHJlTGlua0ZucyIsInBvc3RMaW5rRm5zIiwiYWRkTGlua0ZucyIsInByZSIsInBvc3QiLCJuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUiLCIkJGlzb2xhdGVTY29wZSIsImNsb25lQW5kQW5ub3RhdGVGbiIsImdldENvbnRyb2xsZXJzIiwiZWxlbWVudENvbnRyb2xsZXJzIiwiaW5oZXJpdFR5cGUiLCJkYXRhTmFtZSIsInNldHVwQ29udHJvbGxlcnMiLCJjb250cm9sbGVyRGlyZWN0aXZlcyIsImNvbnRyb2xsZXJLZXkiLCIkc2NvcGUiLCIkYXR0cnMiLCIkdHJhbnNjbHVkZSIsImNvbnRyb2xsZXJJbnN0YW5jZSIsImhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlIiwibGlua05vZGUiLCJjb250cm9sbGVyc0JvdW5kVHJhbnNjbHVkZSIsImNsb25lQXR0YWNoRm4iLCJzY29wZVRvQ2hpbGQiLCJjb250cm9sbGVyU2NvcGUiLCJyZW1vdmVTY29wZUJpbmRpbmdXYXRjaGVzIiwicmVtb3ZlQ29udHJvbGxlckJpbmRpbmdXYXRjaGVzIiwibmV3U2NvcGVEaXJlY3RpdmUiLCJ0ZW1wbGF0ZURpcmVjdGl2ZSIsIiQkb3JpZ2luYWxEaXJlY3RpdmUiLCJpbml0aWFsaXplRGlyZWN0aXZlQmluZGluZ3MiLCIkb24iLCJjb250cm9sbGVyRGlyZWN0aXZlIiwiaWRlbnRpZmllciIsImNvbnRyb2xsZXJSZXN1bHQiLCJpbnZva2VMaW5rRm4iLCJ0ZW1wbGF0ZVVybCIsIiR0ZW1wbGF0ZSIsImRpcmVjdGl2ZVZhbHVlIiwidGVybWluYWxQcmlvcml0eSIsIm5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUiLCJoYXNUcmFuc2NsdWRlRGlyZWN0aXZlIiwiaGFzVGVtcGxhdGUiLCIkY29tcGlsZU5vZGUiLCJyZXBsYWNlRGlyZWN0aXZlIiwiY2hpbGRUcmFuc2NsdWRlRm4iLCIkJHN0YXJ0IiwiJCRlbmQiLCJhc3NlcnROb0R1cGxpY2F0ZSIsIiQkdGxiIiwiY3JlYXRlQ29tbWVudCIsInJlcGxhY2VXaXRoIiwiY29udGVudHMiLCIkJG5ld1Njb3BlIiwiZGVub3JtYWxpemVUZW1wbGF0ZSIsInJlbW92ZUNvbW1lbnRzIiwidGVtcGxhdGVOYW1lc3BhY2UiLCJuZXdUZW1wbGF0ZUF0dHJzIiwidGVtcGxhdGVEaXJlY3RpdmVzIiwidW5wcm9jZXNzZWREaXJlY3RpdmVzIiwibWFya0RpcmVjdGl2ZVNjb3BlIiwibWVyZ2VUZW1wbGF0ZUF0dHJpYnV0ZXMiLCJjb21waWxlVGVtcGxhdGVVcmwiLCJNYXRoIiwibWF4IiwibmV3U2NvcGUiLCJ0RGlyZWN0aXZlcyIsInN0YXJ0QXR0ck5hbWUiLCJlbmRBdHRyTmFtZSIsIm11bHRpRWxlbWVudCIsInNyY0F0dHIiLCJkc3RBdHRyIiwiJHNldCIsInRBdHRycyIsImFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuIiwiYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuIiwibGlua1F1ZXVlIiwiYmVmb3JlVGVtcGxhdGVDb21waWxlTm9kZSIsIm9yaWdBc3luY0RpcmVjdGl2ZSIsImRlcml2ZWRTeW5jRGlyZWN0aXZlIiwiY29udGVudCIsInRlbXBUZW1wbGF0ZUF0dHJzIiwiYmVmb3JlVGVtcGxhdGVMaW5rTm9kZSIsImxpbmtSb290RWxlbWVudCIsIiQkZGVzdHJveWVkIiwib2xkQ2xhc3NlcyIsImlnbm9yZUNoaWxkTGlua0ZuIiwiZGlmZiIsIndoYXQiLCJwcmV2aW91c0RpcmVjdGl2ZSIsIndyYXBNb2R1bGVOYW1lSWZEZWZpbmVkIiwibW9kdWxlTmFtZSIsInRleHQiLCJpbnRlcnBvbGF0ZUZuIiwidGVtcGxhdGVOb2RlIiwidGVtcGxhdGVOb2RlUGFyZW50IiwiaGFzQ29tcGlsZVBhcmVudCIsIiQkYWRkQmluZGluZ0NsYXNzIiwiJCRhZGRCaW5kaW5nSW5mbyIsImV4cHJlc3Npb25zIiwid3JhcHBlciIsImdldFRydXN0ZWRDb250ZXh0IiwiYXR0ck5vcm1hbGl6ZWROYW1lIiwiSFRNTCIsIlJFU09VUkNFX1VSTCIsImFsbE9yTm90aGluZyIsInRydXN0ZWRDb250ZXh0IiwiJCRvYnNlcnZlcnMiLCJuZXdWYWx1ZSIsIiQkaW50ZXIiLCIkJHNjb3BlIiwib2xkVmFsdWUiLCIkdXBkYXRlQ2xhc3MiLCJlbGVtZW50c1RvUmVtb3ZlIiwibmV3Tm9kZSIsImZpcnN0RWxlbWVudFRvUmVtb3ZlIiwicmVtb3ZlQ291bnQiLCJqMiIsInJlcGxhY2VDaGlsZCIsImhhc0RhdGEiLCJleHBhbmRvIiwiayIsImtrIiwiYW5ub3RhdGlvbiIsInJlbW92ZVdhdGNoQ29sbGVjdGlvbiIsImxhc3RWYWx1ZSIsInBhcmVudEdldCIsInBhcmVudFNldCIsImNvbXBhcmUiLCIkb2JzZXJ2ZSIsImxpdGVyYWwiLCJhc3NpZ24iLCJwYXJlbnRWYWx1ZVdhdGNoIiwicGFyZW50VmFsdWUiLCIkc3RhdGVmdWwiLCJyZW1vdmVXYXRjaCIsIiR3YXRjaENvbGxlY3Rpb24iLCJhdHRyaWJ1dGVzVG9Db3B5IiwiJG5vcm1hbGl6ZSIsIiRhZGRDbGFzcyIsImNsYXNzVmFsIiwiJHJlbW92ZUNsYXNzIiwibmV3Q2xhc3NlcyIsInRvQWRkIiwidG9rZW5EaWZmZXJlbmNlIiwidG9SZW1vdmUiLCJ3cml0ZUF0dHIiLCJib29sZWFuS2V5IiwiYWxpYXNlZEtleSIsIm9ic2VydmVyIiwidHJpbW1lZFNyY3NldCIsInNyY1BhdHRlcm4iLCJyYXdVcmlzIiwibmJyVXJpc1dpdGgycGFydHMiLCJmbG9vciIsImlubmVySWR4IiwibGFzdFR1cGxlIiwicmVtb3ZlQXR0ciIsImxpc3RlbmVycyIsInN0YXJ0U3ltYm9sIiwiZW5kU3ltYm9sIiwiYmluZGluZyIsImlzb2xhdGVkIiwibm9UZW1wbGF0ZSIsInN0cjEiLCJzdHIyIiwidmFsdWVzIiwidG9rZW5zMSIsInRva2VuczIiLCJvdXRlciIsInRva2VuIiwianFOb2RlcyIsImlkZW50IiwiQ05UUkxfUkVHIiwiZ2xvYmFscyIsInJlZ2lzdGVyIiwiYWxsb3dHbG9iYWxzIiwiYWRkSWRlbnRpZmllciIsImV4cHJlc3Npb24iLCJsYXRlciIsIiRjb250cm9sbGVyTWluRXJyIiwiY29udHJvbGxlclByb3RvdHlwZSIsImV4Y2VwdGlvbiIsImNhdXNlIiwic2VyaWFsaXplVmFsdWUiLCJ2IiwidG9JU09TdHJpbmciLCJwYXJhbXMiLCJzZXJpYWxpemUiLCJ0b1NlcmlhbGl6ZSIsInRvcExldmVsIiwiZGVmYXVsdEh0dHBSZXNwb25zZVRyYW5zZm9ybSIsImhlYWRlcnMiLCJ0ZW1wRGF0YSIsIkpTT05fUFJPVEVDVElPTl9QUkVGSVgiLCJjb250ZW50VHlwZSIsIkFQUExJQ0FUSU9OX0pTT04iLCJpc0pzb25MaWtlIiwianNvblN0YXJ0IiwiSlNPTl9TVEFSVCIsIkpTT05fRU5EUyIsInBhcnNlSGVhZGVycyIsImZpbGxJblBhcnNlZCIsImxpbmUiLCJoZWFkZXJWYWwiLCJoZWFkZXJLZXkiLCJoZWFkZXJzR2V0dGVyIiwiaGVhZGVyc09iaiIsInRyYW5zZm9ybURhdGEiLCJzdGF0dXMiLCJmbnMiLCJpc1N1Y2Nlc3MiLCJkZWZhdWx0cyIsInRyYW5zZm9ybVJlc3BvbnNlIiwidHJhbnNmb3JtUmVxdWVzdCIsImQiLCJjb21tb24iLCJBY2NlcHQiLCJDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTiIsInBhdGNoIiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsInBhcmFtU2VyaWFsaXplciIsInVzZUFwcGx5QXN5bmMiLCJ1c2VMZWdhY3lQcm9taXNlIiwidXNlTGVnYWN5UHJvbWlzZUV4dGVuc2lvbnMiLCJpbnRlcmNlcHRvckZhY3RvcmllcyIsImludGVyY2VwdG9ycyIsInJlcXVlc3RDb25maWciLCJyZXNwb25zZSIsInJlc3AiLCJyZWplY3QiLCJleGVjdXRlSGVhZGVyRm5zIiwiaGVhZGVyQ29udGVudCIsInByb2Nlc3NlZEhlYWRlcnMiLCJoZWFkZXJGbiIsImhlYWRlciIsIm1lcmdlSGVhZGVycyIsImRlZkhlYWRlck5hbWUiLCJsb3dlcmNhc2VEZWZIZWFkZXJOYW1lIiwicmVxSGVhZGVyTmFtZSIsImRlZkhlYWRlcnMiLCJyZXFIZWFkZXJzIiwiZGVmYXVsdEhlYWRlcnNJdGVyYXRpb24iLCJzZXJ2ZXJSZXF1ZXN0IiwicmVxRGF0YSIsIndpdGhDcmVkZW50aWFscyIsInNlbmRSZXEiLCJjaGFpbiIsInByb21pc2UiLCJ3aGVuIiwicmV2ZXJzZWRJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInJlcXVlc3QiLCJyZXF1ZXN0RXJyb3IiLCJyZXNwb25zZUVycm9yIiwidGhlbkZuIiwicmVqZWN0Rm4iLCJzdWNjZXNzIiwiJGh0dHBNaW5FcnJMZWdhY3lGbiIsImNyZWF0ZVNob3J0TWV0aG9kcyIsImNyZWF0ZVNob3J0TWV0aG9kc1dpdGhEYXRhIiwiZG9uZSIsImhlYWRlcnNTdHJpbmciLCJzdGF0dXNUZXh0IiwicmVzb2x2ZUh0dHBQcm9taXNlIiwicmVzb2x2ZVByb21pc2UiLCIkYXBwbHlBc3luYyIsIiQkcGhhc2UiLCJkZWZlcnJlZCIsInJlc29sdmUiLCJyZXNvbHZlUHJvbWlzZVdpdGhSZXN1bHQiLCJyZW1vdmVQZW5kaW5nUmVxIiwicGVuZGluZ1JlcXVlc3RzIiwiY2FjaGVkUmVzcCIsImJ1aWxkVXJsIiwiZGVmYXVsdENhY2hlIiwieHNyZlZhbHVlIiwidXJsSXNTYW1lT3JpZ2luIiwidGltZW91dCIsInJlc3BvbnNlVHlwZSIsInNlcmlhbGl6ZWRQYXJhbXMiLCJpbnRlcmNlcHRvckZhY3RvcnkiLCJYTUxIdHRwUmVxdWVzdCIsImNyZWF0ZUh0dHBCYWNrZW5kIiwiY3JlYXRlWGhyIiwiJGJyb3dzZXJEZWZlciIsInJhd0RvY3VtZW50IiwianNvbnBSZXEiLCJjYWxsYmFja0lkIiwiYXN5bmMiLCJib2R5IiwiY2FsbGVkIiwiYWRkRXZlbnRMaXN0ZW5lckZuIiwidGltZW91dFJlcXVlc3QiLCJqc29ucERvbmUiLCJ4aHIiLCJhYm9ydCIsImNvbXBsZXRlUmVxdWVzdCIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25sb2FkIiwicmVzcG9uc2VUZXh0IiwidXJsUmVzb2x2ZSIsInByb3RvY29sIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwib25lcnJvciIsIm9uYWJvcnQiLCJzZW5kIiwiZXNjYXBlIiwiY2giLCJ1bmVzY2FwZVRleHQiLCJlc2NhcGVkU3RhcnRSZWdleHAiLCJlc2NhcGVkRW5kUmVnZXhwIiwibXVzdEhhdmVFeHByZXNzaW9uIiwicGFyc2VTdHJpbmdpZnlJbnRlcmNlcHRvciIsImdldFZhbHVlIiwiJGludGVycG9sYXRlTWluRXJyIiwiaW50ZXJyIiwiZW5kSW5kZXgiLCJleHAiLCJwYXJzZUZucyIsInRleHRMZW5ndGgiLCJleHByZXNzaW9uUG9zaXRpb25zIiwic3RhcnRTeW1ib2xMZW5ndGgiLCJlbmRTeW1ib2xMZW5ndGgiLCJ0aHJvd05vY29uY2F0IiwiY29tcHV0ZSIsImdldFRydXN0ZWQiLCIkJHdhdGNoRGVsZWdhdGUiLCIkd2F0Y2hHcm91cCIsIm9sZFZhbHVlcyIsImN1cnJWYWx1ZSIsImludGVydmFsIiwiY291bnQiLCJpbnZva2VBcHBseSIsImhhc1BhcmFtcyIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIml0ZXJhdGlvbiIsInNraXBBcHBseSIsIiQkaW50ZXJ2YWxJZCIsIm5vdGlmeSIsImludGVydmFscyIsImVuY29kZVBhdGgiLCJzZWdtZW50cyIsInBhcnNlQWJzb2x1dGVVcmwiLCJhYnNvbHV0ZVVybCIsImxvY2F0aW9uT2JqIiwicGFyc2VkVXJsIiwiJCRwcm90b2NvbCIsIiQkaG9zdCIsImhvc3RuYW1lIiwiJCRwb3J0IiwicG9ydCIsIkRFRkFVTFRfUE9SVFMiLCJwYXJzZUFwcFVybCIsInJlbGF0aXZlVXJsIiwicHJlZml4ZWQiLCIkJHBhdGgiLCJwYXRobmFtZSIsIiQkc2VhcmNoIiwic2VhcmNoIiwiJCRoYXNoIiwiYmVnaW5zV2l0aCIsImJlZ2luIiwid2hvbGUiLCJ0cmltRW1wdHlIYXNoIiwic3RyaXBGaWxlIiwibGFzdEluZGV4T2YiLCJzZXJ2ZXJCYXNlIiwiTG9jYXRpb25IdG1sNVVybCIsImFwcEJhc2UiLCJhcHBCYXNlTm9GaWxlIiwiYmFzZVByZWZpeCIsIiQkaHRtbDUiLCIkJHBhcnNlIiwicGF0aFVybCIsIiRsb2NhdGlvbk1pbkVyciIsIiQkY29tcG9zZSIsIiQkdXJsIiwiJCRhYnNVcmwiLCIkJHBhcnNlTGlua1VybCIsInJlbEhyZWYiLCJhcHBVcmwiLCJwcmV2QXBwVXJsIiwicmV3cml0dGVuVXJsIiwiTG9jYXRpb25IYXNoYmFuZ1VybCIsImhhc2hQcmVmaXgiLCJyZW1vdmVXaW5kb3dzRHJpdmVOYW1lIiwiYmFzZSIsImZpcnN0UGF0aFNlZ21lbnRNYXRjaCIsIndpbmRvd3NGaWxlUGF0aEV4cCIsIndpdGhvdXRIYXNoVXJsIiwid2l0aG91dEJhc2VVcmwiLCJMb2NhdGlvbkhhc2hiYW5nSW5IdG1sNVVybCIsImxvY2F0aW9uR2V0dGVyIiwicHJvcGVydHkiLCJsb2NhdGlvbkdldHRlclNldHRlciIsInByZXByb2Nlc3MiLCJodG1sNU1vZGUiLCJyZXF1aXJlQmFzZSIsInJld3JpdGVMaW5rcyIsInNldEJyb3dzZXJVcmxXaXRoRmFsbGJhY2siLCJvbGRVcmwiLCJvbGRTdGF0ZSIsIiQkc3RhdGUiLCJhZnRlckxvY2F0aW9uQ2hhbmdlIiwiJGJyb2FkY2FzdCIsImFic1VybCIsIkxvY2F0aW9uTW9kZSIsImluaXRpYWxVcmwiLCJJR05PUkVfVVJJX1JFR0VYUCIsImN0cmxLZXkiLCJtZXRhS2V5Iiwic2hpZnRLZXkiLCJ3aGljaCIsImJ1dHRvbiIsImFic0hyZWYiLCJwcmV2ZW50RGVmYXVsdCIsImluaXRpYWxpemluZyIsIm5ld1VybCIsIm5ld1N0YXRlIiwiJGRpZ2VzdCIsImN1cnJlbnRSZXBsYWNlIiwiJCRyZXBsYWNlIiwidXJsT3JTdGF0ZUNoYW5nZWQiLCJkZWJ1ZyIsImRlYnVnRW5hYmxlZCIsImZsYWciLCJmb3JtYXRFcnJvciIsInNvdXJjZVVSTCIsImNvbnNvbGVMb2ciLCJjb25zb2xlIiwibG9nRm4iLCJsb2ciLCJoYXNBcHBseSIsImFyZzEiLCJhcmcyIiwid2FybiIsImVuc3VyZVNhZmVNZW1iZXJOYW1lIiwiZnVsbEV4cHJlc3Npb24iLCIkcGFyc2VNaW5FcnIiLCJnZXRTdHJpbmdWYWx1ZSIsImVuc3VyZVNhZmVPYmplY3QiLCJjaGlsZHJlbiIsImVuc3VyZVNhZmVGdW5jdGlvbiIsIkNBTEwiLCJBUFBMWSIsIkJJTkQiLCJlbnN1cmVTYWZlQXNzaWduQ29udGV4dCIsIkZ1bmN0aW9uIiwiaWZEZWZpbmVkIiwicGx1c0ZuIiwiciIsImlzU3RhdGVsZXNzIiwiZmlsdGVyTmFtZSIsImZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMiLCJhc3QiLCJhbGxDb25zdGFudHMiLCJhcmdzVG9XYXRjaCIsIkFTVCIsIlByb2dyYW0iLCJleHByIiwiTGl0ZXJhbCIsInRvV2F0Y2giLCJVbmFyeUV4cHJlc3Npb24iLCJhcmd1bWVudCIsIkJpbmFyeUV4cHJlc3Npb24iLCJsZWZ0IiwicmlnaHQiLCJMb2dpY2FsRXhwcmVzc2lvbiIsIkNvbmRpdGlvbmFsRXhwcmVzc2lvbiIsImFsdGVybmF0ZSIsImNvbnNlcXVlbnQiLCJJZGVudGlmaWVyIiwiTWVtYmVyRXhwcmVzc2lvbiIsIm9iamVjdCIsImNvbXB1dGVkIiwiQ2FsbEV4cHJlc3Npb24iLCJjYWxsZWUiLCJBc3NpZ25tZW50RXhwcmVzc2lvbiIsIkFycmF5RXhwcmVzc2lvbiIsIk9iamVjdEV4cHJlc3Npb24iLCJwcm9wZXJ0aWVzIiwiVGhpc0V4cHJlc3Npb24iLCJnZXRJbnB1dHMiLCJsYXN0RXhwcmVzc2lvbiIsImlzQXNzaWduYWJsZSIsImFzc2lnbmFibGVBU1QiLCJOR1ZhbHVlUGFyYW1ldGVyIiwib3BlcmF0b3IiLCJpc0xpdGVyYWwiLCJpc0NvbnN0YW50IiwiQVNUQ29tcGlsZXIiLCJhc3RCdWlsZGVyIiwiQVNUSW50ZXJwcmV0ZXIiLCJpc1Bvc3NpYmx5RGFuZ2Vyb3VzTWVtYmVyTmFtZSIsImdldFZhbHVlT2YiLCJvYmplY3RWYWx1ZU9mIiwiY2FjaGVEZWZhdWx0IiwiY2FjaGVFeHBlbnNpdmUiLCJleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrIiwib2xkVmFsdWVPZlZhbHVlIiwiaW5wdXRzV2F0Y2hEZWxlZ2F0ZSIsIm9iamVjdEVxdWFsaXR5IiwicGFyc2VkRXhwcmVzc2lvbiIsInByZXR0eVByaW50RXhwcmVzc2lvbiIsImxhc3RSZXN1bHQiLCJpbnB1dEV4cHJlc3Npb25zIiwiaW5wdXRzIiwib2xkSW5wdXRWYWx1ZU9mIiwibmV3SW5wdXRWYWx1ZSIsIm9sZElucHV0VmFsdWVPZlZhbHVlcyIsIm9sZElucHV0VmFsdWVzIiwiY2hhbmdlZCIsIm9uZVRpbWVXYXRjaERlbGVnYXRlIiwidW53YXRjaCIsIm9sZCIsIiQkcG9zdERpZ2VzdCIsIm9uZVRpbWVMaXRlcmFsV2F0Y2hEZWxlZ2F0ZSIsImlzQWxsRGVmaW5lZCIsImFsbERlZmluZWQiLCJjb25zdGFudFdhdGNoRGVsZWdhdGUiLCJhZGRJbnRlcmNlcHRvciIsImludGVyY2VwdG9yRm4iLCJ3YXRjaERlbGVnYXRlIiwidXNlSW5wdXRzIiwicmVndWxhcldhdGNoIiwibm9VbnNhZmVFdmFsIiwiJHBhcnNlT3B0aW9ucyIsImV4cGVuc2l2ZUNoZWNrcyIsIiRwYXJzZU9wdGlvbnNFeHBlbnNpdmUiLCJvbmVUaW1lIiwiY2FjaGVLZXkiLCJwYXJzZU9wdGlvbnMiLCJsZXhlciIsIkxleGVyIiwicGFyc2VyIiwiUGFyc2VyIiwicUZhY3RvcnkiLCJuZXh0VGljayIsImV4Y2VwdGlvbkhhbmRsZXIiLCJjYWxsT25jZSIsInJlc29sdmVGbiIsIlByb21pc2UiLCJzaW1wbGVCaW5kIiwicHJvY2Vzc1F1ZXVlIiwicGVuZGluZyIsInByb2Nlc3NTY2hlZHVsZWQiLCJzY2hlZHVsZVByb2Nlc3NRdWV1ZSIsIkRlZmVycmVkIiwicHJvbWlzZXMiLCJyZXN1bHRzIiwiJHFNaW5FcnIiLCJUeXBlRXJyb3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJwcm9ncmVzc0JhY2siLCJjYXRjaCIsImZpbmFsbHkiLCJoYW5kbGVDYWxsYmFjayIsIiQkcmVqZWN0IiwiJCRyZXNvbHZlIiwicHJvZ3Jlc3MiLCJtYWtlUHJvbWlzZSIsInJlc29sdmVkIiwiaXNSZXNvbHZlZCIsImNhbGxiYWNrT3V0cHV0IiwiZXJyYmFjayIsIiRRIiwiUSIsInJlc29sdmVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJhZlN1cHBvcnRlZCIsInJhZiIsInRpbWVyIiwic3VwcG9ydGVkIiwiY3JlYXRlQ2hpbGRTY29wZUNsYXNzIiwiQ2hpbGRTY29wZSIsIiQkd2F0Y2hlcnMiLCIkJG5leHRTaWJsaW5nIiwiJCRjaGlsZEhlYWQiLCIkJGNoaWxkVGFpbCIsIiQkbGlzdGVuZXJzIiwiJCRsaXN0ZW5lckNvdW50IiwiJCR3YXRjaGVyc0NvdW50IiwiJGlkIiwiJCRDaGlsZFNjb3BlIiwiVFRMIiwiJHJvb3RTY29wZU1pbkVyciIsImxhc3REaXJ0eVdhdGNoIiwiYXBwbHlBc3luY0lkIiwiZGlnZXN0VHRsIiwiZGVzdHJveUNoaWxkU2NvcGUiLCIkZXZlbnQiLCJjdXJyZW50U2NvcGUiLCJjbGVhblVwU2NvcGUiLCIkJHByZXZTaWJsaW5nIiwiJHJvb3QiLCJTY29wZSIsImJlZ2luUGhhc2UiLCJwaGFzZSIsImNsZWFyUGhhc2UiLCJpbmNyZW1lbnRXYXRjaGVyc0NvdW50IiwiY3VycmVudCIsImRlY3JlbWVudExpc3RlbmVyQ291bnQiLCJpbml0V2F0Y2hWYWwiLCJmbHVzaEFwcGx5QXN5bmMiLCJhcHBseUFzeW5jUXVldWUiLCJzY2hlZHVsZUFwcGx5QXN5bmMiLCJpc29sYXRlIiwiY2hpbGQiLCJ3YXRjaEV4cCIsIndhdGNoZXIiLCJlcSIsIndhdGNoRXhwcmVzc2lvbnMiLCJ3YXRjaEdyb3VwQWN0aW9uIiwiY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQiLCJmaXJzdFJ1biIsIm5ld1ZhbHVlcyIsImRlcmVnaXN0ZXJGbnMiLCJzaG91bGRDYWxsIiwidW53YXRjaEZuIiwiJHdhdGNoQ29sbGVjdGlvbkludGVyY2VwdG9yIiwiX3ZhbHVlIiwibmV3TGVuZ3RoIiwiYm90aE5hTiIsIm5ld0l0ZW0iLCJvbGRJdGVtIiwiaW50ZXJuYWxBcnJheSIsIm9sZExlbmd0aCIsImNoYW5nZURldGVjdGVkIiwiaW50ZXJuYWxPYmplY3QiLCIkd2F0Y2hDb2xsZWN0aW9uQWN0aW9uIiwiaW5pdFJ1biIsInZlcnlPbGRWYWx1ZSIsInRyYWNrVmVyeU9sZFZhbHVlIiwiY2hhbmdlRGV0ZWN0b3IiLCJ3YXRjaCIsIndhdGNoZXJzIiwiZGlydHkiLCJuZXh0IiwibG9nSWR4IiwiYXN5bmNUYXNrIiwidHRsIiwid2F0Y2hMb2ciLCJhc3luY1F1ZXVlIiwiJGV2YWwiLCJ0cmF2ZXJzZVNjb3Blc0xvb3AiLCJtc2ciLCJwb3N0RGlnZXN0UXVldWUiLCJldmVudE5hbWUiLCIkYXBwbHlBc3luY0V4cHJlc3Npb24iLCJuYW1lZExpc3RlbmVycyIsImluZGV4T2ZMaXN0ZW5lciIsIiRlbWl0IiwidGFyZ2V0U2NvcGUiLCJsaXN0ZW5lckFyZ3MiLCIkJGFzeW5jUXVldWUiLCIkJHBvc3REaWdlc3RRdWV1ZSIsIiQkYXBwbHlBc3luY1F1ZXVlIiwidXJpIiwiaXNJbWFnZSIsIm5vcm1hbGl6ZWRWYWwiLCJyZWdleCIsImFkanVzdE1hdGNoZXIiLCJtYXRjaGVyIiwiJHNjZU1pbkVyciIsImVzY2FwZUZvclJlZ2V4cCIsImFkanVzdE1hdGNoZXJzIiwibWF0Y2hlcnMiLCJhZGp1c3RlZE1hdGNoZXJzIiwiU0NFX0NPTlRFWFRTIiwicmVzb3VyY2VVcmxXaGl0ZWxpc3QiLCJyZXNvdXJjZVVybEJsYWNrbGlzdCIsIm1hdGNoVXJsIiwiaXNSZXNvdXJjZVVybEFsbG93ZWRCeVBvbGljeSIsImFsbG93ZWQiLCJnZW5lcmF0ZUhvbGRlclR5cGUiLCJCYXNlIiwiaG9sZGVyVHlwZSIsInRydXN0ZWRWYWx1ZSIsIiQkdW53cmFwVHJ1c3RlZFZhbHVlIiwidHJ1c3RBcyIsIkNvbnN0cnVjdG9yIiwiYnlUeXBlIiwibWF5YmVUcnVzdGVkIiwidHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSIsImh0bWxTYW5pdGl6ZXIiLCJDU1MiLCJVUkwiLCJKUyIsInNjZSIsImlzRW5hYmxlZCIsInBhcnNlQXMiLCJlbnVtVmFsdWUiLCJsTmFtZSIsInZlbmRvclByZWZpeCIsImV2ZW50U3VwcG9ydCIsImFuZHJvaWQiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJib3hlZSIsInZlbmRvclJlZ2V4IiwiYm9keVN0eWxlIiwidHJhbnNpdGlvbnMiLCJhbmltYXRpb25zIiwid2Via2l0VHJhbnNpdGlvbiIsIndlYmtpdEFuaW1hdGlvbiIsInB1c2hTdGF0ZSIsImhhc0V2ZW50IiwiZGl2RWxtIiwiaGFuZGxlUmVxdWVzdEZuIiwidHBsIiwiaWdub3JlUmVxdWVzdEVycm9yIiwiaGFuZGxlRXJyb3IiLCJ0b3RhbFBlbmRpbmdSZXF1ZXN0cyIsImdldFRydXN0ZWRSZXNvdXJjZVVybCIsInRyYW5zZm9ybWVyIiwiaHR0cE9wdGlvbnMiLCJ0ZXN0YWJpbGl0eSIsImZpbmRCaW5kaW5ncyIsIm9wdF9leGFjdE1hdGNoIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsIm1hdGNoZXMiLCJkYXRhQmluZGluZyIsImJpbmRpbmdOYW1lIiwiZmluZE1vZGVscyIsInByZWZpeGVzIiwiYXR0cmlidXRlRXF1YWxzIiwiZ2V0TG9jYXRpb24iLCJzZXRMb2NhdGlvbiIsIndoZW5TdGFibGUiLCJkZWZlcnJlZHMiLCIkJHRpbWVvdXRJZCIsInVybFBhcnNpbmdOb2RlIiwicmVxdWVzdFVybCIsIm9yaWdpblVybCIsIiQkQ29va2llUmVhZGVyIiwic2FmZURlY29kZVVSSUNvbXBvbmVudCIsImxhc3RDb29raWVzIiwibGFzdENvb2tpZVN0cmluZyIsImNvb2tpZUFycmF5IiwiY29va2llIiwiY3VycmVudENvb2tpZVN0cmluZyIsImZpbHRlcnMiLCJzdWZmaXgiLCJjdXJyZW5jeUZpbHRlciIsImRhdGVGaWx0ZXIiLCJmaWx0ZXJGaWx0ZXIiLCJqc29uRmlsdGVyIiwibGltaXRUb0ZpbHRlciIsImxvd2VyY2FzZUZpbHRlciIsIm51bWJlckZpbHRlciIsIm9yZGVyQnlGaWx0ZXIiLCJ1cHBlcmNhc2VGaWx0ZXIiLCJjb21wYXJhdG9yIiwicHJlZGljYXRlRm4iLCJtYXRjaEFnYWluc3RBbnlQcm9wIiwiZXhwcmVzc2lvblR5cGUiLCJnZXRUeXBlRm9yRmlsdGVyIiwiY3JlYXRlUHJlZGljYXRlRm4iLCJzaG91bGRNYXRjaFByaW1pdGl2ZXMiLCJhY3R1YWwiLCJleHBlY3RlZCIsImRlZXBDb21wYXJlIiwiZG9udE1hdGNoV2hvbGVPYmplY3QiLCJhY3R1YWxUeXBlIiwiZXhwZWN0ZWRUeXBlIiwiZXhwZWN0ZWRWYWwiLCJtYXRjaEFueVByb3BlcnR5IiwiYWN0dWFsVmFsIiwiJGxvY2FsZSIsImZvcm1hdHMiLCJOVU1CRVJfRk9STUFUUyIsImFtb3VudCIsImN1cnJlbmN5U3ltYm9sIiwiZnJhY3Rpb25TaXplIiwiQ1VSUkVOQ1lfU1lNIiwiUEFUVEVSTlMiLCJtYXhGcmFjIiwiZm9ybWF0TnVtYmVyIiwiR1JPVVBfU0VQIiwiREVDSU1BTF9TRVAiLCJudW1iZXIiLCJncm91cFNlcCIsImRlY2ltYWxTZXAiLCJpc05lZ2F0aXZlIiwiYWJzIiwiaXNJbmZpbml0eSIsIkluZmluaXR5IiwiaXNGaW5pdGUiLCJudW1TdHIiLCJmb3JtYXRlZFRleHQiLCJoYXNFeHBvbmVudCIsInRvRml4ZWQiLCJwYXJzZUZsb2F0IiwiZnJhY3Rpb25MZW4iLCJtaW4iLCJtaW5GcmFjIiwicm91bmQiLCJmcmFjdGlvbiIsImxncm91cCIsImxnU2l6ZSIsImdyb3VwIiwiZ1NpemUiLCJuZWdQcmUiLCJwb3NQcmUiLCJuZWdTdWYiLCJwb3NTdWYiLCJwYWROdW1iZXIiLCJudW0iLCJkaWdpdHMiLCJuZWciLCJkYXRlR2V0dGVyIiwiZGF0ZVN0ckdldHRlciIsInNob3J0Rm9ybSIsInRpbWVab25lR2V0dGVyIiwiem9uZSIsInBhZGRlZFpvbmUiLCJnZXRGaXJzdFRodXJzZGF5T2ZZZWFyIiwieWVhciIsImRheU9mV2Vla09uRmlyc3QiLCJnZXREYXkiLCJnZXRUaHVyc2RheVRoaXNXZWVrIiwiZGF0ZXRpbWUiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsIndlZWtHZXR0ZXIiLCJmaXJzdFRodXJzIiwidGhpc1RodXJzIiwiYW1wbUdldHRlciIsImdldEhvdXJzIiwiQU1QTVMiLCJlcmFHZXR0ZXIiLCJFUkFTIiwibG9uZ0VyYUdldHRlciIsIkVSQU5BTUVTIiwianNvblN0cmluZ1RvRGF0ZSIsInN0cmluZyIsIlJfSVNPODYwMV9TVFIiLCJ0ekhvdXIiLCJ0ek1pbiIsImRhdGVTZXR0ZXIiLCJzZXRVVENGdWxsWWVhciIsInNldEZ1bGxZZWFyIiwidGltZVNldHRlciIsInNldFVUQ0hvdXJzIiwic2V0SG91cnMiLCJtIiwicyIsIm1zIiwiZm9ybWF0IiwiREFURVRJTUVfRk9STUFUUyIsIk5VTUJFUl9TVFJJTkciLCJEQVRFX0ZPUk1BVFNfU1BMSVQiLCJkYXRlVGltZXpvbmVPZmZzZXQiLCJEQVRFX0ZPUk1BVFMiLCJzcGFjaW5nIiwibGltaXQiLCJwcm9jZXNzUHJlZGljYXRlcyIsInNvcnRQcmVkaWNhdGUiLCJyZXZlcnNlT3JkZXIiLCJtYXAiLCJwcmVkaWNhdGUiLCJkZXNjZW5kaW5nIiwib2JqZWN0VmFsdWUiLCJnZXRQcmVkaWNhdGVWYWx1ZSIsInYxIiwidjIiLCJnZXRDb21wYXJpc29uT2JqZWN0IiwicHJlZGljYXRlVmFsdWVzIiwicHJlZGljYXRlcyIsImRvQ29tcGFyaXNvbiIsImNvbXBhcmVWYWx1ZXMiLCJuZ0RpcmVjdGl2ZSIsIm51bGxGb3JtUmVuYW1lQ29udHJvbCIsImNvbnRyb2wiLCIkbmFtZSIsIkZvcm1Db250cm9sbGVyIiwiY29udHJvbHMiLCIkZXJyb3IiLCIkJHN1Y2Nlc3MiLCIkcGVuZGluZyIsIiRkaXJ0eSIsIiRwcmlzdGluZSIsIiR2YWxpZCIsIiRpbnZhbGlkIiwiJHN1Ym1pdHRlZCIsIiQkcGFyZW50Rm9ybSIsIm51bGxGb3JtQ3RybCIsIiRyb2xsYmFja1ZpZXdWYWx1ZSIsIiRjb21taXRWaWV3VmFsdWUiLCIkYWRkQ29udHJvbCIsIiQkcmVuYW1lQ29udHJvbCIsIm5ld05hbWUiLCJvbGROYW1lIiwiJHJlbW92ZUNvbnRyb2wiLCIkc2V0VmFsaWRpdHkiLCJhZGRTZXRWYWxpZGl0eU1ldGhvZCIsImN0cmwiLCJzZXQiLCJ1bnNldCIsIiRzZXREaXJ0eSIsIlBSSVNUSU5FX0NMQVNTIiwiRElSVFlfQ0xBU1MiLCIkc2V0UHJpc3RpbmUiLCJzZXRDbGFzcyIsIlNVQk1JVFRFRF9DTEFTUyIsIiRzZXRVbnRvdWNoZWQiLCIkc2V0U3VibWl0dGVkIiwic3RyaW5nQmFzZWRJbnB1dFR5cGUiLCIkZm9ybWF0dGVycyIsIiRpc0VtcHR5IiwidGV4dElucHV0VHlwZSIsImJhc2VJbnB1dFR5cGUiLCJjb21wb3NpbmciLCJldiIsIm5nVHJpbSIsIiR2aWV3VmFsdWUiLCIkJGhhc05hdGl2ZVZhbGlkYXRvcnMiLCIkc2V0Vmlld1ZhbHVlIiwiZGVmZXJMaXN0ZW5lciIsIm9yaWdWYWx1ZSIsImtleUNvZGUiLCIkcmVuZGVyIiwid2Vla1BhcnNlciIsImlzb1dlZWsiLCJleGlzdGluZ0RhdGUiLCJXRUVLX1JFR0VYUCIsIndlZWsiLCJob3VycyIsInNlY29uZHMiLCJtaWxsaXNlY29uZHMiLCJhZGREYXlzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsIk5hTiIsImNyZWF0ZURhdGVQYXJzZXIiLCJtYXBwaW5nIiwiaXNvIiwiSVNPX0RBVEVfUkVHRVhQIiwieXl5eSIsIk1NIiwiZGQiLCJISCIsIm1tIiwic3MiLCJzc3MiLCJwYXJ0IiwiY3JlYXRlRGF0ZUlucHV0VHlwZSIsInBhcnNlRGF0ZSIsImlzVmFsaWREYXRlIiwicGFyc2VPYnNlcnZlZERhdGVWYWx1ZSIsImJhZElucHV0Q2hlY2tlciIsInByZXZpb3VzRGF0ZSIsIiRvcHRpb25zIiwiJCRwYXJzZXJOYW1lIiwiJHBhcnNlcnMiLCJwYXJzZWREYXRlIiwibmdNb2RlbE1pbkVyciIsIm5nTWluIiwibWluVmFsIiwiJHZhbGlkYXRvcnMiLCIkdmFsaWRhdGUiLCJuZ01heCIsIm1heFZhbCIsIm5hdGl2ZVZhbGlkYXRpb24iLCJ2YWxpZGl0eSIsIlZBTElESVRZX1NUQVRFX1BST1BFUlRZIiwiYmFkSW5wdXQiLCJ0eXBlTWlzbWF0Y2giLCJudW1iZXJJbnB1dFR5cGUiLCJOVU1CRVJfUkVHRVhQIiwidXJsSW5wdXRUeXBlIiwibW9kZWxWYWx1ZSIsInZpZXdWYWx1ZSIsIlVSTF9SRUdFWFAiLCJlbWFpbElucHV0VHlwZSIsImVtYWlsIiwiRU1BSUxfUkVHRVhQIiwicmFkaW9JbnB1dFR5cGUiLCJjaGVja2VkIiwicGFyc2VDb25zdGFudEV4cHIiLCJwYXJzZUZuIiwiY2hlY2tib3hJbnB1dFR5cGUiLCJ0cnVlVmFsdWUiLCJuZ1RydWVWYWx1ZSIsImZhbHNlVmFsdWUiLCJuZ0ZhbHNlVmFsdWUiLCJjbGFzc0RpcmVjdGl2ZSIsImFycmF5RGlmZmVyZW5jZSIsImFycmF5Q2xhc3NlcyIsImFkZENsYXNzZXMiLCJkaWdlc3RDbGFzc0NvdW50cyIsInJlbW92ZUNsYXNzZXMiLCJjbGFzc0NvdW50cyIsImNsYXNzZXNUb1VwZGF0ZSIsInVwZGF0ZUNsYXNzZXMiLCJuZ0NsYXNzV2F0Y2hBY3Rpb24iLCIkaW5kZXgiLCJvbGQkaW5kZXgiLCJtb2QiLCJzZXRWYWxpZGl0eSIsInZhbGlkYXRpb25FcnJvcktleSIsImNyZWF0ZUFuZFNldCIsInVuc2V0QW5kQ2xlYW51cCIsImNhY2hlZFRvZ2dsZUNsYXNzIiwiUEVORElOR19DTEFTUyIsInRvZ2dsZVZhbGlkYXRpb25Dc3MiLCJpc09iamVjdEVtcHR5IiwiY29tYmluZWRTdGF0ZSIsInN3aXRjaFZhbHVlIiwiY2xhc3NDYWNoZSIsImlzVmFsaWQiLCJWQUxJRF9DTEFTUyIsIklOVkFMSURfQ0xBU1MiLCJjaHJvbWVIYWNrIiwib3B0aW9uRWxlbWVudCIsInNlbGVjdGVkIiwiUkVHRVhfU1RSSU5HX1JFR0VYUCIsIm1hbnVhbExvd2VyY2FzZSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNoYXJDb2RlQXQiLCJtYW51YWxVcHBlcmNhc2UiLCJkb2N1bWVudE1vZGUiLCJydWxlcyIsIm5nQ3NwRWxlbWVudCIsIm5nQ3NwQXR0cmlidXRlIiwibm9JbmxpbmVTdHlsZSIsIm5hbWVfIiwiZWwiLCJOT0RFX1RZUEVfQVRUUklCVVRFIiwiZnVsbCIsIm1ham9yIiwibWlub3IiLCJkb3QiLCJjb2RlTmFtZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibW91c2VsZWF2ZSIsIm1vdXNlZW50ZXIiLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsIk5vZGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwicmVhZHkiLCJ0cmlnZ2VyIiwiZmlyZWQiLCJyZW1vdmVEYXRhIiwicmVtb3ZlQXR0cmlidXRlIiwiY3NzIiwibG93ZXJjYXNlZE5hbWUiLCJnZXROYW1lZEl0ZW0iLCJzcGVjaWZpZWQiLCJyZXQiLCJnZXRUZXh0IiwiJGR2IiwibXVsdGlwbGUiLCJub2RlQ291bnQiLCJ0eXBlcyIsImFkZEhhbmRsZXIiLCJub0V2ZW50TGlzdGVuZXIiLCJvbmUiLCJvbkZuIiwicmVwbGFjZU5vZGUiLCJpbnNlcnRCZWZvcmUiLCJjb250ZW50RG9jdW1lbnQiLCJwcmVwZW5kIiwid3JhcE5vZGUiLCJkZXRhY2giLCJhZnRlciIsIm5ld0VsZW1lbnQiLCJ0b2dnbGVDbGFzcyIsImNvbmRpdGlvbiIsImNsYXNzQ29uZGl0aW9uIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJleHRyYVBhcmFtZXRlcnMiLCJkdW1teUV2ZW50IiwiZXZlbnRGbnNDb3B5IiwiaGFuZGxlckFyZ3MiLCJhcmczIiwidW5iaW5kIiwiJGFuaW1hdGVNaW5FcnIiLCJOR19BTklNQVRFX0NMQVNTTkFNRSIsIkFuaW1hdGVSdW5uZXIiLCJlbmQiLCJyZXN1bWUiLCJwYXVzZSIsImNvbXBsZXRlIiwicGFzcyIsImZhaWwiLCJwb3N0RGlnZXN0RWxlbWVudHMiLCJ1cGRhdGVEYXRhIiwiaGFuZGxlQ1NTQ2xhc3NDaGFuZ2VzIiwiZXhpc3RpbmciLCJhZGRSZW1vdmVDbGFzc2VzUG9zdERpZ2VzdCIsImFkZCIsImNsYXNzZXNBZGRlZCIsImNsYXNzZXNSZW1vdmVkIiwicGluIiwiZG9tT3BlcmF0aW9uIiwiZnJvbSIsInRvIiwiJCRyZWdpc3RlcmVkQW5pbWF0aW9ucyIsImNsYXNzTmFtZUZpbHRlciIsIiQkY2xhc3NOYW1lRmlsdGVyIiwicmVzZXJ2ZWRSZWdleCIsImRvbUluc2VydCIsImFmdGVyRWxlbWVudCIsImFmdGVyTm9kZSIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJydW5uZXIiLCJlbnRlciIsIm1vdmUiLCJsZWF2ZSIsImFkZGNsYXNzIiwiYW5pbWF0ZSIsInRlbXBDbGFzc2VzIiwiUkFGUHJvbWlzZSIsImdldFByb21pc2UiLCJmMSIsImYyIiwiY2xvc2UiLCJjbG9zZWQiLCJjbGVhbnVwU3R5bGVzIiwic3RhcnQiLCJkb21Ob2RlIiwib2Zmc2V0V2lkdGgiLCJDb250ZW50LVR5cGUiLCJbIiwieyIsIiRodHRwTWluRXJyIiwiUEFUSF9NQVRDSCIsImh0dHAiLCJodHRwcyIsImZ0cCIsImxvY2F0aW9uUHJvdG90eXBlIiwicGFyYW1WYWx1ZSIsIkxvY2F0aW9uIiwiT1BFUkFUT1JTIiwiRVNDQVBFIiwiZiIsInQiLCInIiwiXCIiLCJsZXgiLCJ0b2tlbnMiLCJyZWFkU3RyaW5nIiwicGVlayIsInJlYWROdW1iZXIiLCJpc0lkZW50IiwicmVhZElkZW50IiwiaXMiLCJpc1doaXRlc3BhY2UiLCJjaDIiLCJjaDMiLCJvcDEiLCJvcDIiLCJvcDMiLCJ0aHJvd0Vycm9yIiwiY2hhcnMiLCJpc0V4cE9wZXJhdG9yIiwiY29sU3RyIiwicGVla0NoIiwicXVvdGUiLCJyYXdTdHJpbmciLCJoZXgiLCJyZXAiLCJFeHByZXNzaW9uU3RhdGVtZW50IiwiUHJvcGVydHkiLCJwcm9ncmFtIiwiZXhwcmVzc2lvblN0YXRlbWVudCIsImV4cGVjdCIsImZpbHRlckNoYWluIiwiYXNzaWdubWVudCIsInRlcm5hcnkiLCJsb2dpY2FsT1IiLCJjb25zdW1lIiwibG9naWNhbEFORCIsImVxdWFsaXR5IiwicmVsYXRpb25hbCIsImFkZGl0aXZlIiwibXVsdGlwbGljYXRpdmUiLCJ1bmFyeSIsInByaW1hcnkiLCJhcnJheURlY2xhcmF0aW9uIiwiY29uc3RhbnRzIiwicGFyc2VBcmd1bWVudHMiLCJiYXNlRXhwcmVzc2lvbiIsInBlZWtUb2tlbiIsImtpbmQiLCJlMSIsImUyIiwiZTMiLCJlNCIsInBlZWtBaGVhZCIsInRydWUiLCJmYWxzZSIsIm51bGwiLCJuZXh0SWQiLCJ2YXJzIiwib3duIiwiYXNzaWduYWJsZSIsInN0YWdlIiwiY29tcHV0aW5nIiwicmVjdXJzZSIsInJldHVybl8iLCJnZW5lcmF0ZUZ1bmN0aW9uIiwiZm5LZXkiLCJpbnRvSWQiLCJ3YXRjaElkIiwiZm5TdHJpbmciLCJVU0UiLCJTVFJJQ1QiLCJmaWx0ZXJQcmVmaXgiLCJ3YXRjaEZucyIsInZhcnNQcmVmaXgiLCJzZWN0aW9uIiwibmFtZUlkIiwicmVjdXJzaW9uRm4iLCJza2lwV2F0Y2hJZENoZWNrIiwiaWZfIiwibGF6eUFzc2lnbiIsImNvbXB1dGVkTWVtYmVyIiwibGF6eVJlY3Vyc2UiLCJwbHVzIiwibm90IiwiZ2V0SGFzT3duUHJvcGVydHkiLCJub25Db21wdXRlZE1lbWJlciIsImFkZEVuc3VyZVNhZmVPYmplY3QiLCJub3ROdWxsIiwiYWRkRW5zdXJlU2FmZU1lbWJlck5hbWUiLCJhZGRFbnN1cmVTYWZlRnVuY3Rpb24iLCJtZW1iZXIiLCJhZGRFbnN1cmVTYWZlQXNzaWduQ29udGV4dCIsImRlZmF1bHRWYWx1ZSIsInN0cmluZ0VzY2FwZVJlZ2V4Iiwic3RyaW5nRXNjYXBlRm4iLCJjIiwic2tpcCIsImluaXQiLCJyaHMiLCJsaHMiLCJ1bmFyeSsiLCJ1bmFyeS0iLCJ1bmFyeSEiLCJiaW5hcnkrIiwiYmluYXJ5LSIsImJpbmFyeSoiLCJiaW5hcnkvIiwiYmluYXJ5JSIsImJpbmFyeT09PSIsImJpbmFyeSE9PSIsImJpbmFyeT09IiwiYmluYXJ5IT0iLCJiaW5hcnk8IiwiYmluYXJ5PiIsImJpbmFyeTw9IiwiYmluYXJ5Pj0iLCJiaW5hcnkmJiIsImJpbmFyeXx8IiwidGVybmFyeT86IiwiYXN0Q29tcGlsZXIiLCJ5eSIsInkiLCJNTU1NIiwiTU1NIiwiTSIsIkgiLCJoaCIsIkVFRUUiLCJFRUUiLCJaIiwid3ciLCJ3IiwiRyIsIkdHIiwiR0dHIiwiR0dHRyIsInhsaW5rSHJlZiIsInByb3BOYW1lIiwiZGVmYXVsdExpbmtGbiIsIm5vcm1hbGl6ZWQiLCJodG1sQXR0ciIsImZvcm1EaXJlY3RpdmVGYWN0b3J5IiwiaXNOZ0Zvcm0iLCJnZXRTZXR0ZXIiLCJmb3JtRWxlbWVudCIsIm5hbWVBdHRyIiwiY3RybHMiLCJoYW5kbGVGb3JtU3VibWlzc2lvbiIsInBhcmVudEZvcm1DdHJsIiwic2V0dGVyIiwiREFURV9SRUdFWFAiLCJEQVRFVElNRUxPQ0FMX1JFR0VYUCIsIk1PTlRIX1JFR0VYUCIsIlRJTUVfUkVHRVhQIiwiaW5wdXRUeXBlIiwiZGF0ZXRpbWUtbG9jYWwiLCJ0aW1lIiwibW9udGgiLCJyYWRpbyIsImNoZWNrYm94IiwiaGlkZGVuIiwic3VibWl0IiwicmVzZXQiLCJmaWxlIiwiQ09OU1RBTlRfVkFMVUVfUkVHRVhQIiwidHBsQXR0ciIsIiRjb21waWxlIiwidGVtcGxhdGVFbGVtZW50IiwidEVsZW1lbnQiLCJuZ0JpbmRIdG1sR2V0dGVyIiwibmdCaW5kSHRtbFdhdGNoIiwiZ2V0VHJ1c3RlZEh0bWwiLCIkdmlld0NoYW5nZUxpc3RlbmVycyIsImZvcmNlQXN5bmNFdmVudHMiLCJibHVyIiwiZm9jdXMiLCJwcmV2aW91c0VsZW1lbnRzIiwic3JjRXhwIiwib25sb2FkRXhwIiwiYXV0b1Njcm9sbEV4cCIsImF1dG9zY3JvbGwiLCJwcmV2aW91c0VsZW1lbnQiLCJjdXJyZW50RWxlbWVudCIsImNoYW5nZUNvdW50ZXIiLCJjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50IiwiYWZ0ZXJBbmltYXRpb24iLCJ0aGlzQ2hhbmdlSWQiLCJ0cmltVmFsdWVzIiwiVU5UT1VDSEVEX0NMQVNTIiwiVE9VQ0hFRF9DTEFTUyIsIk5nTW9kZWxDb250cm9sbGVyIiwiJG1vZGVsVmFsdWUiLCIkJHJhd01vZGVsVmFsdWUiLCIkYXN5bmNWYWxpZGF0b3JzIiwiJHVudG91Y2hlZCIsIiR0b3VjaGVkIiwicGFyc2VyVmFsaWQiLCJwYXJzZWROZ01vZGVsIiwicGFyc2VkTmdNb2RlbEFzc2lnbiIsIm5nTW9kZWxHZXQiLCJuZ01vZGVsU2V0IiwicGVuZGluZ0RlYm91bmNlIiwiJCRzZXRPcHRpb25zIiwiZ2V0dGVyU2V0dGVyIiwiaW52b2tlTW9kZWxHZXR0ZXIiLCJpbnZva2VNb2RlbFNldHRlciIsIiQkJHAiLCJjdXJyZW50VmFsaWRhdGlvblJ1bklkIiwiJHNldFRvdWNoZWQiLCIkJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUiLCJwcmV2VmFsaWQiLCJwcmV2TW9kZWxWYWx1ZSIsImFsbG93SW52YWxpZCIsIiQkcnVuVmFsaWRhdG9ycyIsImFsbFZhbGlkIiwiJCR3cml0ZU1vZGVsVG9TY29wZSIsImRvbmVDYWxsYmFjayIsInByb2Nlc3NQYXJzZUVycm9ycyIsImVycm9yS2V5IiwicHJvY2Vzc1N5bmNWYWxpZGF0b3JzIiwic3luY1ZhbGlkYXRvcnNWYWxpZCIsInZhbGlkYXRvciIsInByb2Nlc3NBc3luY1ZhbGlkYXRvcnMiLCJ2YWxpZGF0b3JQcm9taXNlcyIsInZhbGlkYXRpb25Eb25lIiwibG9jYWxWYWxpZGF0aW9uUnVuSWQiLCIkJHBhcnNlQW5kVmFsaWRhdGUiLCJ3cml0ZVRvTW9kZWxJZk5lZWRlZCIsInVwZGF0ZU9uRGVmYXVsdCIsIiQkZGVib3VuY2VWaWV3VmFsdWVDb21taXQiLCJkZWJvdW5jZSIsImRlYm91bmNlRGVsYXkiLCJmb3JtYXR0ZXJzIiwibW9kZWxDdHJsIiwiZm9ybUN0cmwiLCJ1cGRhdGVPbiIsIkRFRkFVTFRfUkVHRVhQIiwidGhhdCIsIm5nT3B0aW9uc01pbkVyciIsIk5HX09QVElPTlNfUkVHRVhQIiwicGFyc2VPcHRpb25zRXhwcmVzc2lvbiIsIm9wdGlvbnNFeHAiLCJzZWxlY3RFbGVtZW50IiwiT3B0aW9uIiwic2VsZWN0VmFsdWUiLCJsYWJlbCIsImRpc2FibGVkIiwiZ2V0T3B0aW9uVmFsdWVzS2V5cyIsIm9wdGlvblZhbHVlcyIsIm9wdGlvblZhbHVlc0tleXMiLCJrZXlOYW1lIiwiaXRlbUtleSIsInZhbHVlTmFtZSIsInNlbGVjdEFzIiwidHJhY2tCeSIsInNlbGVjdEFzRm4iLCJ2aWV3VmFsdWVGbiIsInRyYWNrQnlGbiIsImdldFRyYWNrQnlWYWx1ZUZuIiwiZ2V0VHJhY2tCeVZhbHVlIiwiZ2V0TG9jYWxzIiwiZGlzcGxheUZuIiwiZ3JvdXBCeUZuIiwiZGlzYWJsZVdoZW5GbiIsInZhbHVlc0ZuIiwiZ2V0V2F0Y2hhYmxlcyIsIndhdGNoZWRBcnJheSIsIm9wdGlvblZhbHVlc0xlbmd0aCIsImRpc2FibGVXaGVuIiwiZ2V0T3B0aW9ucyIsIm9wdGlvbkl0ZW1zIiwic2VsZWN0VmFsdWVNYXAiLCJvcHRpb25JdGVtIiwiZ2V0T3B0aW9uRnJvbVZpZXdWYWx1ZSIsImdldFZpZXdWYWx1ZUZyb21PcHRpb24iLCJuZ09wdGlvbnNQb3N0TGluayIsInVwZGF0ZU9wdGlvbkVsZW1lbnQiLCJhZGRPclJldXNlRWxlbWVudCIsInJlbW92ZUV4Y2Vzc0VsZW1lbnRzIiwic2tpcEVtcHR5QW5kVW5rbm93bk9wdGlvbnMiLCJlbXB0eU9wdGlvbl8iLCJlbXB0eU9wdGlvbiIsInVua25vd25PcHRpb25fIiwidW5rbm93bk9wdGlvbiIsInVwZGF0ZU9wdGlvbnMiLCJwcmV2aW91c1ZhbHVlIiwic2VsZWN0Q3RybCIsInJlYWRWYWx1ZSIsImdyb3VwTWFwIiwicHJvdmlkZWRFbXB0eU9wdGlvbiIsImdyb3VwRWxlbWVudCIsIm9wdEdyb3VwVGVtcGxhdGUiLCJjdXJyZW50T3B0aW9uRWxlbWVudCIsIm9wdGlvblRlbXBsYXRlIiwibmdNb2RlbEN0cmwiLCJuZXh0VmFsdWUiLCJyZW5kZXJFbXB0eU9wdGlvbiIsInJlbW92ZUVtcHR5T3B0aW9uIiwicmVuZGVyVW5rbm93bk9wdGlvbiIsInJlbW92ZVVua25vd25PcHRpb24iLCJ3cml0ZVZhbHVlIiwic2VsZWN0ZWRWYWx1ZXMiLCJzZWxlY3Rpb25zIiwic2VsZWN0ZWRPcHRpb24iLCJyZWdpc3Rlck9wdGlvbiIsIkJSQUNFIiwiSVNfV0hFTiIsInVwZGF0ZUVsZW1lbnRUZXh0IiwibmV3VGV4dCIsImxhc3RDb3VudCIsIm51bWJlckV4cCIsIndoZW5FeHAiLCJ3aGVucyIsIndoZW5zRXhwRm5zIiwiYnJhY2VSZXBsYWNlbWVudCIsIndhdGNoUmVtb3ZlciIsImF0dHJpYnV0ZU5hbWUiLCJ0bXBNYXRjaCIsIndoZW5LZXkiLCJjb3VudElzTmFOIiwicGx1cmFsQ2F0Iiwid2hlbkV4cEZuIiwiTkdfUkVNT1ZFRCIsIm5nUmVwZWF0TWluRXJyIiwidXBkYXRlU2NvcGUiLCJ2YWx1ZUlkZW50aWZpZXIiLCJrZXlJZGVudGlmaWVyIiwiYXJyYXlMZW5ndGgiLCIkZmlyc3QiLCIkbGFzdCIsIiRtaWRkbGUiLCIkb2RkIiwiJGV2ZW4iLCJnZXRCbG9ja1N0YXJ0IiwiZ2V0QmxvY2tFbmQiLCJuZ1JlcGVhdEVuZENvbW1lbnQiLCJhbGlhc0FzIiwidHJhY2tCeUV4cCIsInRyYWNrQnlFeHBHZXR0ZXIiLCJ0cmFja0J5SWRFeHBGbiIsInRyYWNrQnlJZEFycmF5Rm4iLCJ0cmFja0J5SWRPYmpGbiIsImhhc2hGbkxvY2FscyIsImxhc3RCbG9ja01hcCIsIm5leHROb2RlIiwiY29sbGVjdGlvbkxlbmd0aCIsInRyYWNrQnlJZCIsInRyYWNrQnlJZEZuIiwiY29sbGVjdGlvbktleXMiLCJuZXh0QmxvY2tPcmRlciIsInByZXZpb3VzTm9kZSIsIm5leHRCbG9ja01hcCIsImJsb2NrS2V5IiwiTkdfSElERV9DTEFTUyIsIk5HX0hJREVfSU5fUFJPR1JFU1NfQ0xBU1MiLCJuZXdTdHlsZXMiLCJvbGRTdHlsZXMiLCJjYXNlcyIsIm5nU3dpdGNoQ29udHJvbGxlciIsIndhdGNoRXhwciIsInNlbGVjdGVkVHJhbnNjbHVkZXMiLCJzZWxlY3RlZEVsZW1lbnRzIiwicHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMiLCJzZWxlY3RlZFNjb3BlcyIsInNwbGljZUZhY3RvcnkiLCJzZWxlY3RlZFRyYW5zY2x1ZGUiLCJjYXNlRWxlbWVudCIsInNlbGVjdGVkU2NvcGUiLCJhbmNob3IiLCJub29wTmdNb2RlbENvbnRyb2xsZXIiLCJTZWxlY3RDb250cm9sbGVyIiwib3B0aW9uc01hcCIsInVua25vd25WYWwiLCJoYXNPcHRpb24iLCJhZGRPcHRpb24iLCJyZW1vdmVPcHRpb24iLCJvcHRpb25TY29wZSIsIm9wdGlvbkF0dHJzIiwiaW50ZXJwb2xhdGVWYWx1ZUZuIiwiaW50ZXJwb2xhdGVUZXh0Rm4iLCJzZWxlY3RQcmVMaW5rIiwibGFzdFZpZXciLCJsYXN0Vmlld1JlZiIsInNlbGVjdEN0cmxOYW1lIiwicGF0dGVybkV4cCIsImludFZhbCIsImdldERlY2ltYWxzIiwiZ2V0VkYiLCJvcHRfcHJlY2lzaW9uIiwicG93IiwiUExVUkFMX0NBVEVHT1JZIiwiWkVSTyIsIk9ORSIsIlRXTyIsIkZFVyIsIk1BTlkiLCJPVEhFUiIsIkRBWSIsIkZJUlNUREFZT0ZXRUVLIiwiTU9OVEgiLCJTSE9SVERBWSIsIlNIT1JUTU9OVEgiLCJXRUVLRU5EUkFOR0UiLCJmdWxsRGF0ZSIsImxvbmdEYXRlIiwibWVkaXVtIiwibWVkaXVtRGF0ZSIsIm1lZGl1bVRpbWUiLCJzaG9ydCIsInNob3J0RGF0ZSIsInNob3J0VGltZSIsIm1pbkludCIsInZmIiwiaGVhZCIsImV4cG9ydHMiLCJOIiwiZyIsImNlaWwiLCJMIiwibyIsIiQkcHJvbWlzZXMiLCIkJHZhbHVlcyIsInN0dWR5IiwiSiIsInEiLCJLIiwidSIsIiQkaW5oZXJpdGVkVmFsdWVzIiwiJCRmYWlsdXJlIiwieCIsImZyb21Db25maWciLCJmcm9tU3RyaW5nIiwiZnJvbVVybCIsInRlbXBsYXRlUHJvdmlkZXIiLCJmcm9tUHJvdmlkZXIiLCJJIiwiUCIsIlBhcmFtIiwiY2FzZUluc2Vuc2l0aXZlIiwic2VnbWVudCIsImNmZyIsIiQkbmV3IiwiUGFyYW1TZXQiLCJzcXVhc2giLCJpc09wdGlvbmFsIiwic291cmNlU2VhcmNoIiwic291cmNlUGF0aCIsInN0cmljdCIsIiQkcGFyYW1OYW1lcyIsImRlZiIsImVuY29kZSIsImRlY29kZSIsImludCIsImJvb2wiLCJjYXB0dXJlIiwiYW55IiwiJCRnZXREZWZhdWx0VmFsdWUiLCJzdHJpY3RNb2RlIiwiZGVmYXVsdFNxdWFzaFBvbGljeSIsImlzTWF0Y2hlciIsIiQkZm4iLCJ6IiwiJGFzQXJyYXkiLCJBIiwiZHluYW1pYyIsIiQkcGFyZW50IiwiJCRrZXlzIiwiJCRlcXVhbHMiLCIkJHZhbGlkYXRlcyIsIiRtYXRjaCIsInN5bmMiLCJsaXN0ZW4iLCJ1cGRhdGUiLCIkJGF2b2lkUmVzeW5jIiwidmFsaWRhdGVzIiwiYWJzb2x1dGUiLCJydWxlIiwib3RoZXJ3aXNlIiwiZ2xvYmFsIiwic3RpY2t5IiwiZGVmZXJJbnRlcmNlcHQiLCJDIiwiJGRlbGVnYXRlcyIsIkIiLCIkY3VycmVudCIsIm5hdmlnYWJsZSIsInRyYW5zaXRpb25UbyIsIkQiLCJyZXRyeSIsIiRyZXRyeSIsIkUiLCJ0cmFuc2l0aW9uIiwidG9QYXJhbXMiLCJ2aWV3cyIsImxvYWQiLCJ2aWV3IiwiY29udHJvbGxlclByb3ZpZGVyIiwiJCRjb250cm9sbGVyIiwiJCRjb250cm9sbGVyQXMiLCIkc3RhdGVQYXJhbXMiLCJnbyIsInJlbGF0aXZlIiwiRiIsIm93blBhcmFtcyIsIk8iLCJvbkV4aXQiLCJvbkVudGVyIiwiaW5jbHVkZXMiLCJsb3NzeSIsInJlbG9hZE9uU2VhcmNoIiwiIiwiYWJzdHJhY3QiLCJ1c2VBbmNob3JTY3JvbGwiLCJ1aVZpZXciLCJwYXJhbUV4cHIiLCJ1aVNyZWYiLCJ1aVNyZWZPcHRzIiwiJCRhZGRTdGF0ZUluZm8iLCJ1aVNyZWZBY3RpdmVFcSIsInVpU3JlZkFjdGl2ZSIsInBhcmFt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LE9BQUFDLEdBQ0FDLE1BQUFDLEdBQ0FDLE9BQUFDLEdBQ0FDLE9BQUFDLEdBQ0FDLFdBQUFDLEdBQ0FDLGVBQUFDLEdBQ0FDLFFBQUFDLEdBQ0FDLFlBQUFDLEdBQ0FDLFdBQUFDLEdBQ0FDLFFBQUFDLEdBQ0FDLGFBQUFDLEdBQ0FDLE9BQUFDLEdBQ0FDLE9BQUFDLEdBQ0FDLEtBQUFDLEdBQ0FDLFVBQUFDLEdBQ0FDLE9BQUFDLEdBQ0FDLGNBQUFDLEdBQ0FDLFlBQUFDLEdBQ0FDLFNBQUFDLEdBQ0FDLE9BQUFDLEdBQ0FDLFFBQUFDLEdBQ0FDLFNBQUFDLEdBQ0FDLGFBQUFDLEdBQ0FDLGdCQUFBQyxHQUNBQyxVQUFBQyxHQUNBQyxhQUFBQyxHQUNBQyxRQUFBQyxHQUNBQyxPQUFBQyxHQUNBQyxTQUFBQyxHQUNBQyxRQUFBQyxHQUNBQyxVQUFBRCxHQUNBRSxTQUFBQyxHQUNBQyxXQUFBRCxHQUNBRSxVQUFBQyxHQUNBQyxZQUFBRCxHQUNBRSxVQUFBQyxHQUNBQyxZQUFBRCxHQUNBRSxRQUFBQyxHQUNBQyxlQUFBQyxLQUVBbkcsV0FDQXNELFVBQUE4QyxLQUVBcEcsVUFBQXFHLElBQ0FyRyxVQUFBc0csSUFDQWpNLEVBQUF1RSxVQUNBMkgsY0FBQUMsR0FDQUMsU0FBQUMsR0FDQUMsWUFBQUMsR0FDQUMsZUFBQUMsR0FDQUMsZ0JBQUFDLEdBQ0FDLFNBQUFDLEdBQ0FDLGNBQUFDLEdBQ0FDLFlBQUFDLEdBQ0FDLFVBQUFDLEdBQ0FDLGtCQUFBQyxHQUNBQyxRQUFBQyxHQUNBQyxjQUFBQyxHQUNBQyxhQUFBQyxHQUNBQyxVQUFBQyxHQUNBQyxNQUFBQyxHQUNBQyxxQkFBQUMsR0FDQUMsMkJBQUFDLEdBQ0FDLGFBQUFDLEdBQ0FDLFlBQUFDLEdBQ0FDLFVBQUFDLEdBQ0FDLEtBQUFDLEdBQ0FDLE9BQUFDLEdBQ0FDLFdBQUFDLEdBQ0FDLEdBQUFDLEdBQ0FDLElBQUFDLEdBQ0FDLEtBQUFDLEdBQ0FDLGFBQUFDLEdBQ0FDLFNBQUFDLEdBQ0FDLGVBQUFDLEdBQ0FDLGlCQUFBQyxHQUNBQyxjQUFBQyxHQUNBQyxTQUFBQyxHQUNBQyxRQUFBQyxHQUNBQyxNQUFBQyxHQUNBQyxTQUFBQyxHQUNBQyxVQUFBQyxHQUNBQyxlQUFBQyxRQXdJQSxRQUFBQyxNQUFBLFFBQUFDLEdBYUEsUUFBQUMsSUFBQXpSLEdBQ0EsTUFBQUEsR0FDQXpMLFFBQUFtZCxHQUFBLFNBQUFDLEVBQUExUCxFQUFBRSxFQUFBeVAsR0FDQSxNQUFBQSxHQUFBelAsRUFBQTBQLGNBQUExUCxJQUVBNU4sUUFBQXVkLEdBQUEsU0F1QkEsUUFBQUMsSUFBQXhULEdBQ0EsT0FBQXlULEdBQUFyWSxLQUFBNEUsR0FHQSxRQUFBMFQsSUFBQXJZLEdBR0EsR0FBQTRFLEdBQUE1RSxFQUFBNEUsUUFDQSxPQUFBQSxLQUFBMFQsS0FBQTFULEdBQUFBLElBQUEyVCxHQUdBLFFBQUFDLElBQUF4WSxHQUNBLElBQUEsR0FBQWpFLEtBQUEwYyxJQUFBelksRUFBQTBZLE9BQ0EsT0FBQSxDQUVBLFFBQUEsRUFHQSxRQUFBQyxJQUFBaFUsRUFBQTdJLEdBQ0EsR0FBQThjLEdBQUEvUixFQUFBZ1MsRUFFQXplLEVBREEwZSxFQUFBaGQsRUFBQWlkLHlCQUNBck8sSUFFQSxJQUFBeU4sR0FBQXhULEdBRUErRixFQUFBeEosS0FBQXBGLEVBQUFrZCxlQUFBclUsUUFDQSxDQVNBLElBUEFpVSxFQUFBQSxHQUFBRSxFQUFBRyxZQUFBbmQsRUFBQW9kLGNBQUEsUUFDQXJTLEdBQUFzUyxHQUFBQyxLQUFBelUsS0FBQSxHQUFBLEtBQUEsR0FBQThELGNBQ0FvUSxFQUFBUSxHQUFBeFMsSUFBQXdTLEdBQUFDLFNBQ0FWLEVBQUFXLFVBQUFWLEVBQUEsR0FBQWxVLEVBQUFoSyxRQUFBNmUsR0FBQSxhQUFBWCxFQUFBLEdBR0F6ZSxFQUFBeWUsRUFBQSxHQUNBemUsS0FDQXdlLEVBQUFBLEVBQUFhLFNBR0EvTyxHQUFBdEksRUFBQXNJLEVBQUFrTyxFQUFBYyxZQUVBZCxFQUFBRSxFQUFBYSxXQUNBZixFQUFBZ0IsWUFBQSxHQVVBLE1BTkFkLEdBQUFjLFlBQUEsR0FDQWQsRUFBQVMsVUFBQSxHQUNBM2QsRUFBQThPLEVBQUEsU0FBQTFLLEdBQ0E4WSxFQUFBRyxZQUFBalosS0FHQThZLEVBR0EsUUFBQWUsSUFBQWxWLEVBQUE3SSxHQUNBQSxFQUFBQSxHQUFBakMsQ0FDQSxJQUFBaWdCLEVBRUEsUUFBQUEsRUFBQUMsR0FBQVgsS0FBQXpVLEtBQ0E3SSxFQUFBb2QsY0FBQVksRUFBQSxNQUdBQSxFQUFBbkIsR0FBQWhVLEVBQUE3SSxJQUNBZ2UsRUFBQUosY0FlQSxRQUFBN1AsSUFBQXJKLEdBQ0EsR0FBQUEsWUFBQXFKLElBQ0EsTUFBQXJKLEVBR0EsSUFBQXdaLEVBTUEsSUFKQXplLEVBQUFpRixLQUNBQSxFQUFBeVosR0FBQXpaLEdBQ0F3WixHQUFBLEtBRUFuTixlQUFBaEQsS0FBQSxDQUNBLEdBQUFtUSxHQUFBLEtBQUF4WixFQUFBb0IsT0FBQSxHQUNBLEtBQUFzWSxJQUFBLFFBQUEsbUhBRUEsT0FBQSxJQUFBclEsSUFBQXJKLEdBR0F3WixFQUNBRyxHQUFBdE4sS0FBQWdOLEdBQUFyWixJQUVBMlosR0FBQXROLEtBQUFyTSxHQUlBLFFBQUE0WixJQUFBNVosR0FDQSxNQUFBQSxHQUFBekMsV0FBQSxHQUdBLFFBQUFzYyxJQUFBN1osRUFBQThaLEdBR0EsR0FGQUEsR0FBQUMsR0FBQS9aLEdBRUFBLEVBQUFnYSxpQkFFQSxJQUFBLEdBREFDLEdBQUFqYSxFQUFBZ2EsaUJBQUEsS0FDQXBnQixFQUFBLEVBQUFzZ0IsRUFBQUQsRUFBQXpmLE9BQUEwZixFQUFBdGdCLEVBQUFBLElBQ0FtZ0IsR0FBQUUsRUFBQXJnQixJQUtBLFFBQUF1Z0IsSUFBQW5hLEVBQUFvYSxFQUFBaFksRUFBQWlZLEdBQ0EsR0FBQTNiLEVBQUEyYixHQUFBLEtBQUFYLElBQUEsVUFBQSx3REFFQSxJQUFBWSxHQUFBQyxHQUFBdmEsR0FDQStJLEVBQUF1UixHQUFBQSxFQUFBdlIsT0FDQXlSLEVBQUFGLEdBQUFBLEVBQUFFLE1BRUEsSUFBQUEsRUFFQSxHQUFBSixFQU9BLENBRUEsR0FBQUssR0FBQSxTQUFBTCxHQUNBLEdBQUFNLEdBQUEzUixFQUFBcVIsRUFDQTFiLEdBQUEwRCxJQUNBbEMsRUFBQXdhLE1BQUF0WSxHQUVBMUQsRUFBQTBELElBQUFzWSxHQUFBQSxFQUFBbGdCLE9BQUEsSUFDQW1nQixHQUFBM2EsRUFBQW9hLEVBQUFJLFNBQ0F6UixHQUFBcVIsSUFJQWhmLEdBQUFnZixFQUFBdGEsTUFBQSxLQUFBLFNBQUFzYSxHQUNBSyxFQUFBTCxHQUNBUSxHQUFBUixJQUNBSyxFQUFBRyxHQUFBUixVQXRCQSxLQUFBQSxJQUFBclIsR0FDQSxhQUFBcVIsR0FDQU8sR0FBQTNhLEVBQUFvYSxFQUFBSSxTQUVBelIsR0FBQXFSLEdBd0JBLFFBQUFMLElBQUEvWixFQUFBNEYsR0FDQSxHQUFBaVYsR0FBQTdhLEVBQUFrWSxNQUNBb0MsRUFBQU8sR0FBQTVDLEdBQUE0QyxFQUVBLElBQUFQLEVBQUEsQ0FDQSxHQUFBMVUsRUFFQSxrQkFEQTBVLEdBQUF2VCxLQUFBbkIsRUFJQTBVLEdBQUFFLFNBQ0FGLEVBQUF2UixPQUFBSSxVQUNBbVIsRUFBQUUsVUFBQSxZQUVBTCxHQUFBbmEsVUFFQWlZLElBQUE0QyxHQUNBN2EsRUFBQWtZLE1BQUE1ZSxHQUtBLFFBQUFpaEIsSUFBQXZhLEVBQUE4YSxHQUNBLEdBQUFELEdBQUE3YSxFQUFBa1ksTUFDQW9DLEVBQUFPLEdBQUE1QyxHQUFBNEMsRUFPQSxPQUxBQyxLQUFBUixJQUNBdGEsRUFBQWtZLE1BQUEyQyxFQUFBMUQsS0FDQW1ELEVBQUFyQyxHQUFBNEMsSUFBQTlSLFVBQUFoQyxRQUFBeVQsT0FBQWxoQixJQUdBZ2hCLEVBSUEsUUFBQVMsSUFBQS9hLEVBQUF6RSxFQUFBVyxHQUNBLEdBQUEyYixHQUFBN1gsR0FBQSxDQUVBLEdBQUFnYixHQUFBdGMsRUFBQXhDLEdBQ0ErZSxHQUFBRCxHQUFBemYsSUFBQXNCLEVBQUF0QixHQUNBMmYsR0FBQTNmLEVBQ0ErZSxFQUFBQyxHQUFBdmEsR0FBQWliLEdBQ0FsVSxFQUFBdVQsR0FBQUEsRUFBQXZULElBRUEsSUFBQWlVLEVBQ0FqVSxFQUFBeEwsR0FBQVcsTUFDQSxDQUNBLEdBQUFnZixFQUNBLE1BQUFuVSxFQUVBLElBQUFrVSxFQUVBLE1BQUFsVSxJQUFBQSxFQUFBeEwsRUFFQW1DLEdBQUFxSixFQUFBeEwsS0FPQSxRQUFBNGYsSUFBQW5iLEVBQUFvYixHQUNBLE1BQUFwYixHQUFBc0YsY0FDQSxLQUFBdEYsRUFBQXNGLGFBQUEsVUFBQSxJQUFBLEtBQUFuTCxRQUFBLFVBQUEsS0FDQWlHLFFBQUEsSUFBQWdiLEVBQUEsS0FBQSxJQUZBLEVBS0EsUUFBQUMsSUFBQXJiLEVBQUFzYixHQUNBQSxHQUFBdGIsRUFBQXViLGNBQ0FuZ0IsRUFBQWtnQixFQUFBeGIsTUFBQSxLQUFBLFNBQUEwYixHQUNBeGIsRUFBQXViLGFBQUEsUUFBQTlCLElBQ0EsS0FBQXpaLEVBQUFzRixhQUFBLFVBQUEsSUFBQSxLQUNBbkwsUUFBQSxVQUFBLEtBQ0FBLFFBQUEsSUFBQXNmLEdBQUErQixHQUFBLElBQUEsU0FNQSxRQUFBQyxJQUFBemIsRUFBQXNiLEdBQ0EsR0FBQUEsR0FBQXRiLEVBQUF1YixhQUFBLENBQ0EsR0FBQUcsSUFBQSxLQUFBMWIsRUFBQXNGLGFBQUEsVUFBQSxJQUFBLEtBQ0FuTCxRQUFBLFVBQUEsSUFFQWlCLEdBQUFrZ0IsRUFBQXhiLE1BQUEsS0FBQSxTQUFBMGIsR0FDQUEsRUFBQS9CLEdBQUErQixHQUNBLEtBQUFFLEVBQUF0YixRQUFBLElBQUFvYixFQUFBLE9BQ0FFLEdBQUFGLEVBQUEsT0FJQXhiLEVBQUF1YixhQUFBLFFBQUE5QixHQUFBaUMsS0FLQSxRQUFBL0IsSUFBQWdDLEVBQUFDLEdBR0EsR0FBQUEsRUFHQSxHQUFBQSxFQUFBeFgsU0FDQXVYLEVBQUFBLEVBQUFuaEIsVUFBQW9oQixNQUNBLENBQ0EsR0FBQXBoQixHQUFBb2hCLEVBQUFwaEIsTUFHQSxJQUFBLGdCQUFBQSxJQUFBb2hCLEVBQUF4aUIsU0FBQXdpQixHQUNBLEdBQUFwaEIsRUFDQSxJQUFBLEdBQUFaLEdBQUEsRUFBQVksRUFBQVosRUFBQUEsSUFDQStoQixFQUFBQSxFQUFBbmhCLFVBQUFvaEIsRUFBQWhpQixPQUlBK2hCLEdBQUFBLEVBQUFuaEIsVUFBQW9oQixHQU9BLFFBQUFDLElBQUE3YixFQUFBNEYsR0FDQSxNQUFBa1csSUFBQTliLEVBQUEsS0FBQTRGLEdBQUEsZ0JBQUEsY0FHQSxRQUFBa1csSUFBQTliLEVBQUE0RixFQUFBMUosR0FHQThELEVBQUFvRSxVQUFBMlQsS0FDQS9YLEVBQUFBLEVBQUErYixnQkFJQSxLQUZBLEdBQUFDLEdBQUFsaEIsR0FBQThLLEdBQUFBLEdBQUFBLEdBRUE1RixHQUFBLENBQ0EsSUFBQSxHQUFBcEcsR0FBQSxFQUFBZ0QsRUFBQW9mLEVBQUF4aEIsT0FBQW9DLEVBQUFoRCxFQUFBQSxJQUNBLEdBQUE4RSxFQUFBeEMsRUFBQWxCLEdBQUErTCxLQUFBL0csRUFBQWdjLEVBQUFwaUIsS0FBQSxNQUFBc0MsRUFNQThELEdBQUFBLEVBQUFpYyxZQUFBamMsRUFBQW9FLFdBQUE4WCxJQUFBbGMsRUFBQW1jLE1BSUEsUUFBQUMsSUFBQXBjLEdBRUEsSUFEQTZaLEdBQUE3WixHQUFBLEdBQ0FBLEVBQUFtWixZQUNBblosRUFBQXFjLFlBQUFyYyxFQUFBbVosWUFJQSxRQUFBbUQsSUFBQXRjLEVBQUF1YyxHQUNBQSxHQUFBMUMsR0FBQTdaLEVBQ0EsSUFBQWhDLEdBQUFnQyxFQUFBaWMsVUFDQWplLElBQUFBLEVBQUFxZSxZQUFBcmMsR0FJQSxRQUFBd2MsSUFBQUMsRUFBQUMsR0FDQUEsRUFBQUEsR0FBQXRqQixFQUNBLGFBQUFzakIsRUFBQXJqQixTQUFBc2pCLFdBSUFELEVBQUFFLFdBQUFILEdBR0F6aEIsR0FBQTBoQixHQUFBbFUsR0FBQSxPQUFBaVUsR0FpRUEsUUFBQUksSUFBQTdjLEVBQUE0RixHQUVBLEdBQUFrWCxHQUFBQyxHQUFBblgsRUFBQXFDLGNBR0EsT0FBQTZVLElBQUFFLEdBQUFqZCxFQUFBQyxLQUFBOGMsRUFHQSxRQUFBRyxJQUFBclgsR0FDQSxNQUFBc1gsSUFBQXRYLEdBZ0xBLFFBQUF1WCxJQUFBbmQsRUFBQStJLEdBQ0EsR0FBQXFVLEdBQUEsU0FBQUMsRUFBQWpELEdBRUFpRCxFQUFBQyxtQkFBQSxXQUNBLE1BQUFELEdBQUFFLGlCQUdBLElBQUFDLEdBQUF6VSxFQUFBcVIsR0FBQWlELEVBQUFqRCxNQUNBcUQsRUFBQUQsRUFBQUEsRUFBQWhqQixPQUFBLENBRUEsSUFBQWlqQixFQUFBLENBRUEsR0FBQWhmLEVBQUE0ZSxFQUFBSyw2QkFBQSxDQUNBLEdBQUFDLEdBQUFOLEVBQUFPLHdCQUNBUCxHQUFBTyx5QkFBQSxXQUNBUCxFQUFBSyw2QkFBQSxFQUVBTCxFQUFBUSxpQkFDQVIsRUFBQVEsa0JBR0FGLEdBQ0FBLEVBQUFqaUIsS0FBQTJoQixJQUtBQSxFQUFBUyw4QkFBQSxXQUNBLE1BQUFULEdBQUFLLCtCQUFBLEVBSUEsSUFBQUssR0FBQVAsRUFBQVEsdUJBQUFDLEVBR0FSLEdBQUEsSUFDQUQsRUFBQXJjLEVBQUFxYyxHQUdBLEtBQUEsR0FBQTVqQixHQUFBLEVBQUE2akIsRUFBQTdqQixFQUFBQSxJQUNBeWpCLEVBQUFTLGlDQUNBQyxFQUFBL2QsRUFBQXFkLEVBQUFHLEVBQUE1akIsS0FRQSxPQURBd2pCLEdBQUFuVSxLQUFBakosRUFDQW9kLEVBR0EsUUFBQWEsSUFBQWplLEVBQUFxZCxFQUFBYSxHQUNBQSxFQUFBeGlCLEtBQUFzRSxFQUFBcWQsR0FHQSxRQUFBYyxJQUFBQyxFQUFBZixFQUFBYSxHQUlBLEdBQUFHLEdBQUFoQixFQUFBaUIsZ0JBR0FELEdBQUFBLElBQUFELElBQUFHLEdBQUE3aUIsS0FBQTBpQixFQUFBQyxLQUNBSCxFQUFBeGlCLEtBQUEwaUIsRUFBQWYsR0FvUEEsUUFBQXZHLE1BQ0F6SyxLQUFBbVMsS0FBQSxXQUNBLE1BQUE5Z0IsR0FBQTJMLElBQ0FvVixTQUFBLFNBQUFqZixFQUFBa2YsR0FFQSxNQURBbGYsR0FBQUUsT0FBQUYsRUFBQUEsRUFBQSxJQUNBMmIsR0FBQTNiLEVBQUFrZixJQUVBQyxTQUFBLFNBQUFuZixFQUFBa2YsR0FFQSxNQURBbGYsR0FBQUUsT0FBQUYsRUFBQUEsRUFBQSxJQUNBaWMsR0FBQWpjLEVBQUFrZixJQUVBRSxZQUFBLFNBQUFwZixFQUFBa2YsR0FFQSxNQURBbGYsR0FBQUUsT0FBQUYsRUFBQUEsRUFBQSxJQUNBNmIsR0FBQTdiLEVBQUFrZixPQWtCQSxRQUFBRyxJQUFBamtCLEVBQUFra0IsR0FDQSxHQUFBdmpCLEdBQUFYLEdBQUFBLEVBQUEyQixTQUVBLElBQUFoQixFQUlBLE1BSEEsa0JBQUFBLEtBQ0FBLEVBQUFYLEVBQUEyQixhQUVBaEIsQ0FHQSxJQUFBd2pCLFNBQUFua0IsRUFPQSxPQUxBVyxHQURBLFlBQUF3akIsR0FBQSxVQUFBQSxHQUFBLE9BQUFua0IsRUFDQUEsRUFBQTJCLFVBQUF3aUIsRUFBQSxLQUFBRCxHQUFBM2lCLEtBRUE0aUIsRUFBQSxJQUFBbmtCLEVBU0EsUUFBQW9rQixJQUFBN2UsRUFBQThlLEdBQ0EsR0FBQUEsRUFBQSxDQUNBLEdBQUE3aUIsR0FBQSxDQUNBaVEsTUFBQWxRLFFBQUEsV0FDQSxRQUFBQyxHQUdBaEIsRUFBQStFLEVBQUFrTSxLQUFBNlMsSUFBQTdTLE1BeUdBLFFBQUE4UyxJQUFBL2MsR0FHQSxHQUFBZ2QsR0FBQWhkLEVBQUE1RCxXQUFBckUsUUFBQWtsQixHQUFBLElBQ0FyZCxFQUFBb2QsRUFBQWhsQixNQUFBa2xCLEdBQ0EsT0FBQXRkLEdBQ0EsYUFBQUEsRUFBQSxJQUFBLElBQUE3SCxRQUFBLFlBQUEsS0FBQSxJQUVBLEtBR0EsUUFBQW9sQixJQUFBbmQsRUFBQTRELEVBQUFKLEdBQ0EsR0FBQTRaLEdBQ0FKLEVBQ0FLLEVBQ0FDLENBRUEsSUFBQSxrQkFBQXRkLElBQ0EsS0FBQW9kLEVBQUFwZCxFQUFBb2QsU0FBQSxDQUVBLEdBREFBLEtBQ0FwZCxFQUFBNUgsT0FBQSxDQUNBLEdBQUF3TCxFQUlBLEtBSEFqTCxHQUFBNkssSUFBQUEsSUFDQUEsRUFBQXhELEVBQUF3RCxNQUFBdVosR0FBQS9jLElBRUFxSSxHQUFBLFdBQ0EsNEVBQUE3RSxFQUVBd1osR0FBQWhkLEVBQUE1RCxXQUFBckUsUUFBQWtsQixHQUFBLElBQ0FJLEVBQUFMLEVBQUFobEIsTUFBQWtsQixJQUNBbGtCLEVBQUFxa0IsRUFBQSxHQUFBM2YsTUFBQTZmLElBQUEsU0FBQXBXLEdBQ0FBLEVBQUFwUCxRQUFBeWxCLEdBQUEsU0FBQUMsRUFBQUMsRUFBQWxhLEdBQ0E0WixFQUFBOWUsS0FBQWtGLE9BSUF4RCxFQUFBb2QsUUFBQUEsT0FFQTFrQixJQUFBc0gsSUFDQXNkLEVBQUF0ZCxFQUFBNUgsT0FBQSxFQUNBaVAsR0FBQXJILEVBQUFzZCxHQUFBLE1BQ0FGLEVBQUFwZCxFQUFBOUgsTUFBQSxFQUFBb2xCLElBRUFqVyxHQUFBckgsRUFBQSxNQUFBLEVBRUEsT0FBQW9kLEdBcWZBLFFBQUE5WSxJQUFBcVosRUFBQS9aLEdBdUNBLFFBQUFnYSxHQUFBQyxHQUNBLE1BQUEsVUFBQTFrQixFQUFBVyxHQUNBLE1BQUFXLEdBQUF0QixPQUNBSCxHQUFBRyxFQUFBUyxFQUFBaWtCLElBRUFBLEVBQUExa0IsRUFBQVcsSUFLQSxRQUFBNE8sR0FBQWxGLEVBQUFzYSxHQUtBLEdBSkF2VyxHQUFBL0QsRUFBQSxZQUNBcEssRUFBQTBrQixJQUFBcGxCLEdBQUFvbEIsTUFDQUEsRUFBQUMsRUFBQUMsWUFBQUYsS0FFQUEsRUFBQTFCLEtBQ0EsS0FBQS9ULElBQUEsT0FBQSxrREFBQTdFLEVBRUEsT0FBQXlhLEdBQUF6YSxFQUFBMGEsR0FBQUosRUFHQSxRQUFBSyxHQUFBM2EsRUFBQTRFLEdBQ0EsTUFBQSxZQUNBLEdBQUFnVyxHQUFBQyxFQUFBOVosT0FBQTZELEVBQUE2QixLQUNBLElBQUE1TixFQUFBK2hCLEdBQ0EsS0FBQS9WLElBQUEsUUFBQSwrREFBQTdFLEVBRUEsT0FBQTRhLElBSUEsUUFBQWhXLEdBQUE1RSxFQUFBOGEsRUFBQUMsR0FDQSxNQUFBN1YsR0FBQWxGLEdBQ0E0WSxLQUFBbUMsS0FBQSxFQUFBSixFQUFBM2EsRUFBQThhLEdBQUFBLElBSUEsUUFBQTdVLEdBQUFqRyxFQUFBNUUsR0FDQSxNQUFBd0osR0FBQTVFLEdBQUEsWUFBQSxTQUFBZ2IsR0FDQSxNQUFBQSxHQUFBUixZQUFBcGYsTUFJQSxRQUFBOUUsR0FBQTBKLEVBQUFwRCxHQUFBLE1BQUFnSSxHQUFBNUUsRUFBQXRILEVBQUFrRSxJQUFBLEdBRUEsUUFBQXNKLEdBQUFsRyxFQUFBMUosR0FDQXlOLEdBQUEvRCxFQUFBLFlBQ0F5YSxFQUFBemEsR0FBQTFKLEVBQ0Eya0IsRUFBQWpiLEdBQUExSixFQUdBLFFBQUE2UCxHQUFBK1UsRUFBQUMsR0FDQSxHQUFBQyxHQUFBYixFQUFBeFksSUFBQW1aLEVBQUFSLEdBQ0FXLEVBQUFELEVBQUF4QyxJQUVBd0MsR0FBQXhDLEtBQUEsV0FDQSxHQUFBMEMsR0FBQVQsRUFBQTlaLE9BQUFzYSxFQUFBRCxFQUNBLE9BQUFQLEdBQUE5WixPQUFBb2EsRUFBQSxNQUFBSSxVQUFBRCxLQU9BLFFBQUFFLEdBQUFyQixHQUNBelcsR0FBQTdLLEVBQUFzaEIsSUFBQWpsQixHQUFBaWxCLEdBQUEsZ0JBQUEsZUFDQSxJQUFBc0IsR0FBQTVWLElBNENBLE9BM0NBclEsR0FBQTJrQixFQUFBLFNBQUF2bUIsR0FJQSxRQUFBOG5CLEdBQUFyVyxHQUNBLEdBQUFyUixHQUFBZ0QsQ0FDQSxLQUFBaEQsRUFBQSxFQUFBZ0QsRUFBQXFPLEVBQUF6USxPQUFBb0MsRUFBQWhELEVBQUFBLElBQUEsQ0FDQSxHQUFBMm5CLEdBQUF0VyxFQUFBclIsR0FDQWtSLEVBQUFxVixFQUFBeFksSUFBQTRaLEVBQUEsR0FFQXpXLEdBQUF5VyxFQUFBLElBQUFqZixNQUFBd0ksRUFBQXlXLEVBQUEsS0FUQSxJQUFBQyxFQUFBN1osSUFBQW5PLEdBQUEsQ0FDQWdvQixFQUFBdEMsSUFBQTFsQixHQUFBLEVBWUEsS0FDQXVCLEVBQUF2QixJQUNBNm5CLEVBQUF0VSxHQUFBdlQsR0FDQWlTLEVBQUFBLEVBQUE3SixPQUFBd2YsRUFBQUMsRUFBQTFXLFdBQUEvSSxPQUFBeWYsRUFBQXpWLFlBQ0EwVixFQUFBRCxFQUFBM1YsY0FDQTRWLEVBQUFELEVBQUExVixnQkFDQW5RLEVBQUFoQyxHQUNBaVMsRUFBQS9LLEtBQUF5ZixFQUFBeFosT0FBQW5OLElBQ0FzQixHQUFBdEIsR0FDQWlTLEVBQUEvSyxLQUFBeWYsRUFBQXhaLE9BQUFuTixJQUVBaVEsR0FBQWpRLEVBQUEsVUFFQSxNQUFBd0ssR0FZQSxLQVhBbEosSUFBQXRCLEtBQ0FBLEVBQUFBLEVBQUFBLEVBQUFnQixPQUFBLElBRUF3SixFQUFBL0osU0FBQStKLEVBQUF5ZCxPQUFBLElBQUF6ZCxFQUFBeWQsTUFBQXJoQixRQUFBNEQsRUFBQS9KLFdBTUErSixFQUFBQSxFQUFBL0osUUFBQSxLQUFBK0osRUFBQXlkLE9BRUFoWCxHQUFBLFdBQUEsZ0RBQ0FqUixFQUFBd0ssRUFBQXlkLE9BQUF6ZCxFQUFBL0osU0FBQStKLE9BR0F5SCxFQU9BLFFBQUFpVyxHQUFBQyxFQUFBblgsR0FFQSxRQUFBb1gsR0FBQWQsRUFBQWUsR0FDQSxHQUFBRixFQUFBbG1CLGVBQUFxbEIsR0FBQSxDQUNBLEdBQUFhLEVBQUFiLEtBQUFnQixFQUNBLEtBQUFyWCxJQUFBLE9BQUEsaUNBQ0FxVyxFQUFBLE9BQUFqWCxFQUFBN0UsS0FBQSxRQUVBLE9BQUEyYyxHQUFBYixHQUVBLElBR0EsTUFGQWpYLEdBQUF2RCxRQUFBd2EsR0FDQWEsRUFBQWIsR0FBQWdCLEVBQ0FILEVBQUFiLEdBQUF0VyxFQUFBc1csRUFBQWUsR0FDQSxNQUFBRSxHQUlBLEtBSEFKLEdBQUFiLEtBQUFnQixTQUNBSCxHQUFBYixHQUVBaUIsRUFDQSxRQUNBbFksRUFBQW1ZLFNBS0EsUUFBQXJiLEdBQUF2RSxFQUFBRCxFQUFBOGYsRUFBQW5CLEdBQ0EsZ0JBQUFtQixLQUNBbkIsRUFBQW1CLEVBQ0FBLEVBQUEsS0FHQSxJQUVBem5CLEdBQUFaLEVBQ0EyQixFQUhBeUcsS0FDQXdkLEVBQUE5WSxHQUFBd2IsV0FBQTlmLEVBQUE0RCxFQUFBOGEsRUFJQSxLQUFBbG5CLEVBQUEsRUFBQVksRUFBQWdsQixFQUFBaGxCLE9BQUFBLEVBQUFaLEVBQUFBLElBQUEsQ0FFQSxHQURBMkIsRUFBQWlrQixFQUFBNWxCLEdBQ0EsZ0JBQUEyQixHQUNBLEtBQUFrUCxJQUFBLE9BQ0Esc0VBQUFsUCxFQUVBeUcsR0FBQXRCLEtBQ0F1aEIsR0FBQUEsRUFBQXhtQixlQUFBRixHQUNBMG1CLEVBQUExbUIsR0FDQXFtQixFQUFBcm1CLEVBQUF1bEIsSUFTQSxNQU5BaG1CLElBQUFzSCxLQUNBQSxFQUFBQSxFQUFBNUgsSUFLQTRILEVBQUFFLE1BQUFILEVBQUFILEdBR0EsUUFBQW9lLEdBQUErQixFQUFBRixFQUFBbkIsR0FJQSxHQUFBc0IsR0FBQW5uQixPQUFBaUQsUUFBQXBELEdBQUFxbkIsR0FBQUEsRUFBQUEsRUFBQTNuQixPQUFBLEdBQUEybkIsR0FBQUUsV0FBQSxNQUNBQyxFQUFBM2IsRUFBQXdiLEVBQUFDLEVBQUFILEVBQUFuQixFQUVBLE9BQUFqa0IsR0FBQXlsQixJQUFBOW1CLEVBQUE4bUIsR0FBQUEsRUFBQUYsRUFHQSxPQUNBemIsT0FBQUEsRUFDQXlaLFlBQUFBLEVBQ0F6WSxJQUFBaWEsRUFDQXJDLFNBQUE3WSxHQUFBd2IsV0FDQUssSUFBQSxTQUFBM2MsR0FDQSxNQUFBeWEsR0FBQTVrQixlQUFBbUssRUFBQTBhLElBQUFxQixFQUFBbG1CLGVBQUFtSyxLQXBPQUksRUFBQUEsS0FBQSxDQUNBLElBQUE4YixNQUNBeEIsRUFBQSxXQUNBelcsS0FDQTJYLEVBQUEsR0FBQXhDLFFBQUEsR0FDQXFCLEdBQ0E5WixVQUNBdUUsU0FBQWtWLEVBQUFsVixHQUNBTixRQUFBd1YsRUFBQXhWLEdBQ0FxQixRQUFBbVUsRUFBQW5VLEdBQ0EzUCxNQUFBOGpCLEVBQUE5akIsR0FDQTRQLFNBQUFrVSxFQUFBbFUsR0FDQUMsVUFBQUEsSUFHQW9VLEVBQUFFLEVBQUFPLFVBQ0FjLEVBQUFyQixFQUFBLFNBQUFTLEVBQUFlLEdBSUEsS0FIQTNhLElBQUFuTSxTQUFBOG1CLElBQ0FoWSxFQUFBbkosS0FBQW1oQixHQUVBcFgsR0FBQSxPQUFBLHdCQUFBWixFQUFBN0UsS0FBQSxXQUVBNmIsS0FDQUosRUFBQUksRUFBQUQsVUFDQWMsRUFBQWIsRUFBQSxTQUFBQyxFQUFBZSxHQUNBLEdBQUEvVyxHQUFBcVYsRUFBQXhZLElBQUFtWixFQUFBUixFQUFBdUIsRUFDQSxPQUFBcEIsR0FBQTlaLE9BQUFtRSxFQUFBMFQsS0FBQTFULEVBQUF4UixFQUFBd25CLElBTUEsT0FGQTFsQixHQUFBZ21CLEVBQUFyQixHQUFBLFNBQUEzZCxHQUFBQSxHQUFBcWUsRUFBQTlaLE9BQUF2RSxLQUVBcWUsRUFvTkEsUUFBQS9OLE1BRUEsR0FBQThQLElBQUEsQ0FlQW5XLE1BQUFvVyxxQkFBQSxXQUNBRCxHQUFBLEdBZ0pBblcsS0FBQW1TLE1BQUEsVUFBQSxZQUFBLGFBQUEsU0FBQS9ILEVBQUExQixFQUFBTSxHQU1BLFFBQUFxTixHQUFBQyxHQUNBLEdBQUFuQyxHQUFBLElBT0EsT0FOQW9DLE9BQUFQLFVBQUFRLEtBQUFubkIsS0FBQWluQixFQUFBLFNBQUEzaUIsR0FDQSxNQUFBLE1BQUFELEVBQUFDLElBQ0F3Z0IsRUFBQXhnQixHQUNBLEdBRkEsU0FLQXdnQixFQUdBLFFBQUFzQyxLQUVBLEdBQUF0TCxHQUFBdUwsRUFBQUMsT0FFQSxJQUFBeG5CLEVBQUFnYyxHQUNBQSxFQUFBQSxRQUNBLElBQUFoYSxFQUFBZ2EsR0FBQSxDQUNBLEdBQUF2TyxHQUFBdU8sRUFBQSxHQUNBMUosRUFBQTJJLEVBQUF3TSxpQkFBQWhhLEVBRUF1TyxHQURBLFVBQUExSixFQUFBb1YsU0FDQSxFQUVBamEsRUFBQWthLHdCQUFBQyxXQUVBbG9CLEdBQUFzYyxLQUNBQSxFQUFBLEVBR0EsT0FBQUEsR0FHQSxRQUFBNkwsR0FBQXBhLEdBQ0EsR0FBQUEsRUFBQSxDQUNBQSxFQUFBcWEsZ0JBRUEsSUFBQTlMLEdBQUFzTCxHQUVBLElBQUF0TCxFQUFBLENBY0EsR0FBQStMLEdBQUF0YSxFQUFBa2Esd0JBQUFLLEdBQ0EvTSxHQUFBZ04sU0FBQSxFQUFBRixFQUFBL0wsUUFHQWYsR0FBQTRNLFNBQUEsRUFBQSxHQUlBLFFBQUFOLEdBQUFXLEdBQ0FBLEVBQUEzb0IsRUFBQTJvQixHQUFBQSxFQUFBM08sRUFBQTJPLE1BQ0EsSUFBQUMsRUFHQUQsSUFHQUMsRUFBQXRxQixFQUFBdXFCLGVBQUFGLElBQUFMLEVBQUFNLElBR0FBLEVBQUFqQixFQUFBcnBCLEVBQUF3cUIsa0JBQUFILEtBQUFMLEVBQUFNLEdBR0EsUUFBQUQsR0FBQUwsRUFBQSxNQVRBQSxFQUFBLE1BdEVBLEdBQUFocUIsR0FBQW9kLEVBQUFwZCxRQWdHQSxPQVpBbXBCLElBQ0FuTixFQUFBdlcsT0FBQSxXQUFBLE1BQUFpVyxHQUFBMk8sUUFDQSxTQUFBSSxFQUFBQyxJQUVBRCxJQUFBQyxHQUFBLEtBQUFELElBRUF0SCxHQUFBLFdBQ0FuSCxFQUFBeFcsV0FBQWtrQixPQUtBQSxJQVFBLFFBQUFpQixJQUFBN1csRUFBQThXLEdBQ0EsTUFBQTlXLElBQUE4VyxFQUNBOVcsRUFDQThXLEdBQ0FucEIsR0FBQXFTLEtBQUFBLEVBQUFBLEVBQUFuSSxLQUFBLE1BQ0FsSyxHQUFBbXBCLEtBQUFBLEVBQUFBLEVBQUFqZixLQUFBLE1BQ0FtSSxFQUFBLElBQUE4VyxHQUhBOVcsRUFEQThXLEVBREEsR0FRQSxRQUFBQyxJQUFBbGtCLEdBQ0EsSUFBQSxHQUFBcEcsR0FBQSxFQUFBQSxFQUFBb0csRUFBQXhGLE9BQUFaLElBQUEsQ0FDQSxHQUFBK3BCLEdBQUEzakIsRUFBQXBHLEVBQ0EsSUFBQStwQixFQUFBdmYsV0FBQStmLEdBQ0EsTUFBQVIsSUFLQSxRQUFBUyxJQUFBMUYsR0FDQTNqQixFQUFBMmpCLEtBQ0FBLEVBQUFBLEVBQUE1ZSxNQUFBLEtBS0EsSUFBQWxGLEdBQUErRyxJQVFBLE9BUEF2RyxHQUFBc2pCLEVBQUEsU0FBQTJGLEdBR0FBLEVBQUE3cEIsU0FDQUksRUFBQXlwQixJQUFBLEtBR0F6cEIsRUFVQSxRQUFBMHBCLElBQUFDLEdBQ0EsTUFBQTFuQixHQUFBMG5CLEdBQ0FBLEtBa3BCQSxRQUFBQyxJQUFBcHJCLEVBQUFDLEVBQUE0YixFQUFBYyxHQXNCQSxRQUFBME8sR0FBQXJpQixHQUNBLElBQ0FBLEVBQUFFLE1BQUEsS0FBQVAsRUFBQWhJLFVBQUEsSUFDQSxRQUVBLEdBREEycUIsSUFDQSxJQUFBQSxFQUNBLEtBQUFDLEVBQUFucUIsUUFDQSxJQUNBbXFCLEVBQUFDLFFBQ0EsTUFBQTVnQixHQUNBaVIsRUFBQTRQLE1BQUE3Z0IsS0FPQSxRQUFBOGdCLEdBQUFDLEdBQ0EsR0FBQTFxQixHQUFBMHFCLEVBQUEza0IsUUFBQSxJQUNBLE9BQUEsS0FBQS9GLEVBQUEsR0FBQTBxQixFQUFBQyxPQUFBM3FCLEdBOEhBLFFBQUE0cUIsS0FDQUMsRUFBQSxLQUNBQyxJQUNBQyxJQUdBLFFBQUFDLEtBQ0EsSUFDQSxNQUFBQyxHQUFBQyxNQUNBLE1BQUF2aEIsS0FPQSxRQUFBbWhCLEtBRUFLLEVBQUFILElBQ0FHLEVBQUEvbUIsRUFBQSttQixHQUFBLEtBQUFBLEVBR0Fua0IsRUFBQW1rQixFQUFBQyxLQUNBRCxFQUFBQyxHQUVBQSxFQUFBRCxFQUdBLFFBQUFKLE1BQ0FNLElBQUF2akIsRUFBQTRpQixPQUFBWSxJQUFBSCxLQUlBRSxFQUFBdmpCLEVBQUE0aUIsTUFDQVksRUFBQUgsRUFDQXBxQixFQUFBd3FCLEVBQUEsU0FBQUMsR0FDQUEsRUFBQTFqQixFQUFBNGlCLE1BQUFTLE1BMU1BLEdBQUFyakIsR0FBQWtLLEtBRUE5RSxHQURBbE8sRUFBQSxHQUNBRCxFQUFBbU8sVUFDQStkLEVBQUFsc0IsRUFBQWtzQixRQUNBMUksRUFBQXhqQixFQUFBd2pCLFdBQ0FrSixFQUFBMXNCLEVBQUEwc0IsYUFDQUMsSUFFQTVqQixHQUFBNmpCLFFBQUEsQ0FFQSxJQUFBdEIsR0FBQSxFQUNBQyxJQUdBeGlCLEdBQUE4akIsNkJBQUF4QixFQUNBdGlCLEVBQUErakIsNkJBQUEsV0FBQXhCLEtBa0NBdmlCLEVBQUFna0IsZ0NBQUEsU0FBQUMsR0FDQSxJQUFBMUIsRUFDQTBCLElBRUF6QixFQUFBamtCLEtBQUEwbEIsR0FRQSxJQUFBWixHQUFBRyxFQUNBRCxFQUFBbmUsRUFBQThlLEtBQ0FDLEVBQUFqdEIsRUFBQXNHLEtBQUEsUUFDQXVsQixFQUFBLElBRUFDLEtBQ0FRLEVBQUFILEVBc0JBcmpCLEVBQUE0aUIsSUFBQSxTQUFBQSxFQUFBNXFCLEVBQUFvckIsR0FhQSxHQVRBOW1CLEVBQUE4bUIsS0FDQUEsRUFBQSxNQUlBaGUsSUFBQW5PLEVBQUFtTyxXQUFBQSxFQUFBbk8sRUFBQW1PLFVBQ0ErZCxJQUFBbHNCLEVBQUFrc0IsVUFBQUEsRUFBQWxzQixFQUFBa3NCLFNBR0FQLEVBQUEsQ0FDQSxHQUFBd0IsR0FBQVosSUFBQUosQ0FLQSxJQUFBRyxJQUFBWCxLQUFBaFAsRUFBQXVQLFNBQUFpQixHQUNBLE1BQUFwa0IsRUFFQSxJQUFBcWtCLEdBQUFkLEdBQUFlLEdBQUFmLEtBQUFlLEdBQUExQixFQTJCQSxPQTFCQVcsR0FBQVgsRUFDQVksRUFBQUosR0FLQXhQLEVBQUF1UCxTQUFBa0IsR0FBQUQsS0FNQUMsR0FBQXRCLEtBQ0FBLEVBQUFILEdBRUE1cUIsRUFDQW9OLEVBQUFwTixRQUFBNHFCLEdBQ0F5QixFQUdBamYsRUFBQW1jLEtBQUFvQixFQUFBQyxHQUZBeGQsRUFBQThlLEtBQUF0QixFQUlBeGQsRUFBQThlLE9BQUF0QixJQUNBRyxFQUFBSCxLQWhCQU8sRUFBQW5yQixFQUFBLGVBQUEsYUFBQW9yQixFQUFBLEdBQUFSLEdBQ0FJLElBRUFRLEVBQUFILEdBZ0JBcmpCLEVBT0EsTUFBQStpQixJQUFBM2QsRUFBQThlLEtBQUFsc0IsUUFBQSxPQUFBLE1BY0FnSSxFQUFBb2pCLE1BQUEsV0FDQSxNQUFBQyxHQUdBLElBQUFJLE1BQ0FjLEdBQUEsRUFpQkFqQixFQUFBLElBOENBdGpCLEdBQUF3a0IsWUFBQSxTQUFBUCxHQWdCQSxNQWRBTSxLQU1BM1EsRUFBQXVQLFNBQUF0cUIsR0FBQTVCLEdBQUFvUCxHQUFBLFdBQUF5YyxHQUVBanFCLEdBQUE1QixHQUFBb1AsR0FBQSxhQUFBeWMsR0FFQXlCLEdBQUEsR0FHQWQsRUFBQWxsQixLQUFBMGxCLEdBQ0FBLEdBU0Fqa0IsRUFBQXlrQix1QkFBQSxXQUNBNXJCLEdBQUE1QixHQUFBeXRCLElBQUEsc0JBQUE1QixJQVFBOWlCLEVBQUEya0IsaUJBQUExQixFQWVBampCLEVBQUE0a0IsU0FBQSxXQUNBLEdBQUFWLEdBQUFDLEVBQUE1bUIsS0FBQSxPQUNBLE9BQUEybUIsR0FBQUEsRUFBQWxzQixRQUFBLHlCQUFBLElBQUEsSUFpQkFnSSxFQUFBNmtCLE1BQUEsU0FBQTVrQixFQUFBNmtCLEdBQ0EsR0FBQUMsRUFPQSxPQU5BeEMsS0FDQXdDLEVBQUF0SyxFQUFBLGlCQUNBbUosR0FBQW1CLEdBQ0F6QyxFQUFBcmlCLElBQ0E2a0IsR0FBQSxHQUNBbEIsRUFBQW1CLElBQUEsRUFDQUEsR0FjQS9rQixFQUFBNmtCLE1BQUFHLE9BQUEsU0FBQUMsR0FDQSxNQUFBckIsR0FBQXFCLFVBQ0FyQixHQUFBcUIsR0FDQXRCLEVBQUFzQixHQUNBM0MsRUFBQXRtQixJQUNBLElBRUEsR0FLQSxRQUFBaVYsTUFDQS9HLEtBQUFtUyxNQUFBLFVBQUEsT0FBQSxXQUFBLFlBQ0EsU0FBQS9ILEVBQUF4QixFQUFBYyxFQUFBdEMsR0FDQSxNQUFBLElBQUErUSxJQUFBL04sRUFBQWhELEVBQUF3QixFQUFBYyxLQXFGQSxRQUFBekMsTUFFQWpILEtBQUFtUyxLQUFBLFdBR0EsUUFBQTZJLEdBQUFDLEVBQUEvQyxHQTBNQSxRQUFBZ0QsR0FBQUMsR0FDQUEsR0FBQUMsSUFDQUMsRUFFQUEsR0FBQUYsSUFDQUUsRUFBQUYsRUFBQUcsR0FGQUQsRUFBQUYsRUFLQUksRUFBQUosRUFBQUcsRUFBQUgsRUFBQUssR0FDQUQsRUFBQUosRUFBQUMsR0FDQUEsRUFBQUQsRUFDQUMsRUFBQUUsRUFBQSxNQVFBLFFBQUFDLEdBQUFFLEVBQUFDLEdBQ0FELEdBQUFDLElBQ0FELElBQUFBLEVBQUFELEVBQUFFLEdBQ0FBLElBQUFBLEVBQUFKLEVBQUFHLElBL05BLEdBQUFSLElBQUFVLEdBQ0EsS0FBQXp1QixHQUFBLGlCQUFBLE1BQUEsa0NBQUErdEIsRUFHQSxJQUFBVyxHQUFBLEVBQ0FDLEVBQUF4cUIsS0FBQTZtQixHQUFBNEQsR0FBQWIsSUFDQXZnQixFQUFBcEYsS0FDQXltQixFQUFBN0QsR0FBQUEsRUFBQTZELFVBQUFDLE9BQUFDLFVBQ0FDLEVBQUE1bUIsS0FDQThsQixFQUFBLEtBQ0FDLEVBQUEsSUF5Q0EsT0FBQU0sR0FBQVYsSUFvQkFwSSxJQUFBLFNBQUEzakIsRUFBQVcsR0FDQSxJQUFBdUMsRUFBQXZDLEdBQUEsQ0FDQSxHQUFBa3NCLEVBQUFDLE9BQUFDLFVBQUEsQ0FDQSxHQUFBRSxHQUFBRCxFQUFBaHRCLEtBQUFndEIsRUFBQWh0QixJQUFBQSxJQUFBQSxHQUVBZ3NCLEdBQUFpQixHQVVBLE1BUEFqdEIsS0FBQXdMLElBQUFraEIsSUFDQWxoQixFQUFBeEwsR0FBQVcsRUFFQStyQixFQUFBRyxHQUNBL2IsS0FBQW9jLE9BQUFmLEVBQUFuc0IsS0FHQVcsSUFjQXlMLElBQUEsU0FBQXBNLEdBQ0EsR0FBQTZzQixFQUFBQyxPQUFBQyxVQUFBLENBQ0EsR0FBQUUsR0FBQUQsRUFBQWh0QixFQUVBLEtBQUFpdEIsRUFBQSxNQUVBakIsR0FBQWlCLEdBR0EsTUFBQXpoQixHQUFBeEwsSUFjQWt0QixPQUFBLFNBQUFsdEIsR0FDQSxHQUFBNnNCLEVBQUFDLE9BQUFDLFVBQUEsQ0FDQSxHQUFBRSxHQUFBRCxFQUFBaHRCLEVBRUEsS0FBQWl0QixFQUFBLE1BRUFBLElBQUFmLElBQUFBLEVBQUFlLEVBQUFYLEdBQ0FXLEdBQUFkLElBQUFBLEVBQUFjLEVBQUFiLEdBQ0FDLEVBQUFZLEVBQUFiLEVBQUFhLEVBQUFYLFNBRUFVLEdBQUFodEIsR0FHQUEsSUFBQXdMLFdBRUFBLEdBQUF4TCxHQUNBMHNCLE1BWUFTLFVBQUEsV0FDQTNoQixFQUFBcEYsS0FDQXNtQixFQUFBLEVBQ0FNLEVBQUE1bUIsS0FDQThsQixFQUFBQyxFQUFBLE1BYUFpQixRQUFBLFdBQ0E1aEIsRUFBQSxLQUNBbWhCLEVBQUEsS0FDQUssRUFBQSxXQUNBUCxHQUFBVixJQW9CQXNCLEtBQUEsV0FDQSxNQUFBbHJCLE1BQUF3cUIsR0FBQUQsS0FBQUEsTUFwTUEsR0FBQUQsS0F5UUEsT0F4QkFYLEdBQUF1QixLQUFBLFdBQ0EsR0FBQUEsS0FJQSxPQUhBeHRCLEdBQUE0c0IsRUFBQSxTQUFBckcsRUFBQTJGLEdBQ0FzQixFQUFBdEIsR0FBQTNGLEVBQUFpSCxTQUVBQSxHQWNBdkIsRUFBQTFmLElBQUEsU0FBQTJmLEdBQ0EsTUFBQVUsR0FBQVYsSUFJQUQsR0ErQ0EsUUFBQW5SLE1BQ0E3SixLQUFBbVMsTUFBQSxnQkFBQSxTQUFBbkwsR0FDQSxNQUFBQSxHQUFBLGVBMnVCQSxRQUFBbkcsSUFBQTNHLEVBQUFzaUIsR0FhQSxRQUFBQyxHQUFBbGlCLEVBQUFtaUIsRUFBQUMsR0FDQSxHQUFBQyxHQUFBLHFDQUVBQyxJQXNCQSxPQXBCQTl0QixHQUFBd0wsRUFBQSxTQUFBdWlCLEVBQUFDLEdBQ0EsR0FBQWh2QixHQUFBK3VCLEVBQUEvdUIsTUFBQTZ1QixFQUVBLEtBQUE3dUIsRUFDQSxLQUFBaXZCLElBQUEsT0FDQSxvRUFFQU4sRUFBQUssRUFBQUQsRUFDQUgsRUFBQSxpQ0FDQSwyQkFHQUUsR0FBQUUsSUFDQUUsS0FBQWx2QixFQUFBLEdBQUEsR0FDQW12QixXQUFBLE1BQUFudkIsRUFBQSxHQUNBb3ZCLFNBQUEsTUFBQXB2QixFQUFBLEdBQ0FxdkIsU0FBQXJ2QixFQUFBLElBQUFndkIsS0FJQUYsRUFHQSxRQUFBUSxHQUFBeGQsRUFBQTZjLEdBQ0EsR0FBQUcsSUFDQXhnQixhQUFBLEtBQ0FpaEIsaUJBQUEsS0FnQkEsSUFkQTlzQixFQUFBcVAsRUFBQXRGLFNBQ0FzRixFQUFBeWQsb0JBQUEsR0FDQVQsRUFBQVMsaUJBQUFiLEVBQUE1YyxFQUFBdEYsTUFDQW1pQixHQUFBLEdBQ0FHLEVBQUF4Z0IsaUJBRUF3Z0IsRUFBQXhnQixhQUFBb2dCLEVBQUE1YyxFQUFBdEYsTUFDQW1pQixHQUFBLElBR0Fsc0IsRUFBQXFQLEVBQUF5ZCxvQkFDQVQsRUFBQVMsaUJBQ0FiLEVBQUE1YyxFQUFBeWQsaUJBQUFaLEdBQUEsSUFFQWxzQixFQUFBcXNCLEVBQUFTLGtCQUFBLENBQ0EsR0FBQWhoQixHQUFBdUQsRUFBQXZELFdBQ0FpaEIsRUFBQTFkLEVBQUEwZCxZQUNBLEtBQUFqaEIsRUFFQSxLQUFBMGdCLElBQUEsU0FDQSxpRUFDQU4sRUFDQSxLQUFBYyxHQUFBbGhCLEVBQUFpaEIsR0FFQSxLQUFBUCxJQUFBLFVBQ0Esb0VBQ0FOLEdBR0EsTUFBQUcsR0FHQSxRQUFBWSxHQUFBbGtCLEdBQ0EsR0FBQW1DLEdBQUFuQyxFQUFBeEUsT0FBQSxFQUNBLEtBQUEyRyxHQUFBQSxJQUFBOUgsR0FBQThILEdBQ0EsS0FBQXNoQixJQUFBLFNBQUEsa0ZBQUF6akIsRUFFQSxJQUFBQSxJQUFBQSxFQUFBNlQsT0FDQSxLQUFBNFAsSUFBQSxTQUNBLCtGQUNBempCLEdBckZBLEdBQUFta0IsTUFDQUMsRUFBQSxZQUNBQyxFQUFBLHNDQUNBQyxFQUFBLDhCQUNBQyxFQUFBdnFCLEVBQUEsNkJBQ0F3cUIsRUFBQSw4QkFLQUMsRUFBQSx5QkE4RkFoZSxNQUFBSCxVQUFBLFFBQUFvZSxHQUFBMWtCLEVBQUEya0IsR0F5Q0EsTUF4Q0E1Z0IsSUFBQS9ELEVBQUEsYUFDQTdLLEVBQUE2SyxJQUNBa2tCLEVBQUFsa0IsR0FDQTBELEdBQUFpaEIsRUFBQSxvQkFDQVIsRUFBQXR1QixlQUFBbUssS0FDQW1rQixFQUFBbmtCLE1BQ0FXLEVBQUFpRSxRQUFBNUUsRUFBQW9rQixHQUFBLFlBQUEsb0JBQ0EsU0FBQXBKLEVBQUFqTixHQUNBLEdBQUE2VyxLQXlCQSxPQXhCQXB2QixHQUFBMnVCLEVBQUFua0IsR0FBQSxTQUFBMmtCLEVBQUFsd0IsR0FDQSxJQUNBLEdBQUE2UixHQUFBMFUsRUFBQWphLE9BQUE0akIsRUFDQS91QixHQUFBMFEsR0FDQUEsR0FBQXJGLFFBQUF2SSxFQUFBNE4sS0FDQUEsRUFBQXJGLFNBQUFxRixFQUFBMGIsT0FDQTFiLEVBQUFyRixRQUFBdkksRUFBQTROLEVBQUEwYixPQUVBMWIsRUFBQXVlLFNBQUF2ZSxFQUFBdWUsVUFBQSxFQUNBdmUsRUFBQTdSLE1BQUFBLEVBQ0E2UixFQUFBdEcsS0FBQXNHLEVBQUF0RyxNQUFBQSxFQUNBc0csRUFBQXdlLFFBQUF4ZSxFQUFBd2UsU0FBQXhlLEVBQUF2RCxZQUFBdUQsRUFBQXRHLEtBQ0FzRyxFQUFBeWUsU0FBQXplLEVBQUF5ZSxVQUFBLElBQ0EsSUFBQXpCLEdBQUFoZCxFQUFBMGUsV0FDQWxCLEVBQUF4ZCxFQUFBQSxFQUFBdEcsS0FDQS9JLEdBQUFxc0IsRUFBQXhnQixnQkFDQXdELEVBQUEyZSxrQkFBQTNCLEVBQUF4Z0IsY0FFQXdELEVBQUFYLGFBQUFnZixFQUFBaGYsYUFDQWlmLEVBQUE5cEIsS0FBQXdMLEdBQ0EsTUFBQWxJLEdBQ0EyUCxFQUFBM1AsTUFHQXdtQixNQUdBVCxFQUFBbmtCLEdBQUFsRixLQUFBNnBCLElBRUFudkIsRUFBQXdLLEVBQUE1SixFQUFBc3VCLElBRUFqZSxNQXdCQUEsS0FBQXllLDJCQUFBLFNBQUFDLEdBQ0EsTUFBQXJzQixHQUFBcXNCLElBQ0FsQyxFQUFBaUMsMkJBQUFDLEdBQ0ExZSxNQUVBd2MsRUFBQWlDLDhCQXlCQXplLEtBQUEyZSw0QkFBQSxTQUFBRCxHQUNBLE1BQUFyc0IsR0FBQXFzQixJQUNBbEMsRUFBQW1DLDRCQUFBRCxHQUNBMWUsTUFFQXdjLEVBQUFtQyw4QkEwQkEsSUFBQXhrQixJQUFBLENBQ0E2RixNQUFBN0YsaUJBQUEsU0FBQXlrQixHQUNBLE1BQUF2c0IsR0FBQXVzQixJQUNBemtCLEVBQUF5a0IsRUFDQTVlLE1BRUE3RixHQUdBNkYsS0FBQW1TLE1BQ0EsWUFBQSxlQUFBLG9CQUFBLG1CQUFBLFNBQ0EsY0FBQSxhQUFBLFlBQUEsT0FBQSxXQUFBLGdCQUNBLFNBQUFvQyxFQUFBM00sRUFBQU4sRUFBQXdDLEVBQUFoQixFQUNBNUIsRUFBQThCLEVBQUE1QixFQUFBa0MsRUFBQWhELEVBQUEzRixHQTJPQSxRQUFBa2UsR0FBQUMsRUFBQUMsR0FDQSxJQUNBRCxFQUFBeE0sU0FBQXlNLEdBQ0EsTUFBQXBuQixLQThDQSxRQUFBNkMsR0FBQXdrQixFQUFBQyxFQUFBQyxFQUFBQyxFQUNBQyxHQUNBSixZQUFBcndCLE1BR0Fxd0IsRUFBQXJ3QixHQUFBcXdCLElBSUFqd0IsRUFBQWl3QixFQUFBLFNBQUE3ckIsRUFBQW5GLEdBQ0FtRixFQUFBNEUsVUFBQUMsSUFBQTdFLEVBQUFrc0IsVUFBQXR4QixNQUFBLFNBQ0FpeEIsRUFBQWh4QixHQUFBVyxHQUFBd0UsR0FBQTZZLEtBQUEsaUJBQUFyYSxTQUFBLEtBR0EsSUFBQTJ0QixHQUNBQyxFQUFBUCxFQUFBQyxFQUFBRCxFQUNBRSxFQUFBQyxFQUFBQyxFQUNBNWtCLEdBQUFnbEIsZ0JBQUFSLEVBQ0EsSUFBQVMsR0FBQSxJQUNBLE9BQUEsVUFBQWxsQixFQUFBbWxCLEVBQUF4SCxHQUNBamIsR0FBQTFDLEVBQUEsU0FFQTZrQixHQUFBQSxFQUFBTyxnQkFLQXBsQixFQUFBQSxFQUFBcWxCLFFBQUFDLFFBR0EzSCxFQUFBQSxLQUNBLElBQUE0SCxHQUFBNUgsRUFBQTRILHdCQUNBQyxFQUFBN0gsRUFBQTZILHNCQUNBQyxFQUFBOUgsRUFBQThILG1CQU1BRixJQUFBQSxFQUFBRyxvQkFDQUgsRUFBQUEsRUFBQUcsbUJBR0FSLElBQ0FBLEVBQUFTLEVBQUFGLEdBRUEsSUFBQUcsRUFrQkEsSUFYQUEsRUFOQSxTQUFBVixFQU1BOXdCLEdBQ0F5eEIsRUFBQVgsRUFBQTl3QixHQUFBLFNBQUFrSixPQUFBbW5CLEdBQUFsbkIsU0FFQTRuQixFQUdBdGpCLEdBQUFoTCxNQUFBL0IsS0FBQTJ2QixHQUVBQSxFQUdBZSxFQUNBLElBQUEsR0FBQU0sS0FBQU4sR0FDQUksRUFBQXpsQixLQUFBLElBQUEybEIsRUFBQSxhQUFBTixFQUFBTSxHQUFBdEssU0FRQSxPQUpBdmIsR0FBQThsQixlQUFBSCxFQUFBNWxCLEdBRUFtbEIsR0FBQUEsRUFBQVMsRUFBQTVsQixHQUNBK2tCLEdBQUFBLEVBQUEva0IsRUFBQTRsQixFQUFBQSxFQUFBTCxHQUNBSyxHQUlBLFFBQUFELEdBQUFLLEdBRUEsR0FBQXB0QixHQUFBb3RCLEdBQUFBLEVBQUEsRUFDQSxPQUFBcHRCLElBR0Esa0JBQUFPLEVBQUFQLElBQUFBLEVBQUFoQixXQUFBcEUsTUFBQSxPQUFBLE1BRkEsT0FxQkEsUUFBQXd4QixHQUFBaUIsRUFBQXZCLEVBQUF3QixFQUFBdkIsRUFBQUMsRUFDQUMsR0EwQ0EsUUFBQUUsR0FBQS9rQixFQUFBaW1CLEVBQUFDLEVBQUFYLEdBQ0EsR0FBQVksR0FBQUMsRUFBQXh0QixFQUFBeXRCLEVBQUFyekIsRUFBQWdELEVBQUFzd0IsRUFBQUMsRUFDQUMsQ0FHQSxJQUFBQyxFQUFBLENBR0EsR0FBQUMsR0FBQVQsRUFBQXJ5QixNQUlBLEtBSEE0eUIsRUFBQSxHQUFBeEssT0FBQTBLLEdBR0ExekIsRUFBQSxFQUFBQSxFQUFBMnpCLEVBQUEveUIsT0FBQVosR0FBQSxFQUNBc3pCLEVBQUFLLEVBQUEzekIsR0FDQXd6QixFQUFBRixHQUFBTCxFQUFBSyxPQUdBRSxHQUFBUCxDQUdBLEtBQUFqekIsRUFBQSxFQUFBZ0QsRUFBQTJ3QixFQUFBL3lCLE9BQUFvQyxFQUFBaEQsR0FDQTRGLEVBQUE0dEIsRUFBQUcsRUFBQTN6QixNQUNBbXpCLEVBQUFRLEVBQUEzekIsS0FDQW96QixFQUFBTyxFQUFBM3pCLEtBRUFtekIsR0FDQUEsRUFBQW5tQixPQUNBcW1CLEVBQUFybUIsRUFBQXNsQixPQUNBcmxCLEVBQUE4bEIsZUFBQTN4QixHQUFBd0UsR0FBQXl0QixJQUVBQSxFQUFBcm1CLEVBSUF1bUIsRUFEQUosRUFBQVMsd0JBQ0FDLEVBQ0E3bUIsRUFBQW1tQixFQUFBVyxXQUFBdkIsSUFFQVksRUFBQVksdUJBQUF4QixFQUNBQSxHQUVBQSxHQUFBYixFQUNBbUMsRUFBQTdtQixFQUFBMGtCLEdBR0EsS0FHQXlCLEVBQUFDLEVBQUFDLEVBQUF6dEIsRUFBQXN0QixFQUFBSyxJQUVBSCxHQUNBQSxFQUFBcG1CLEVBQUFwSCxFQUFBMFosV0FBQTVmLEVBQUE2eUIsR0F4RkEsSUFBQSxHQUZBeUIsR0FBQXBELEVBQUF1QyxFQUFBN1QsRUFBQThULEVBQUFhLEVBQUFSLEVBREFFLEtBR0EzekIsRUFBQSxFQUFBQSxFQUFBaXpCLEVBQUFyeUIsT0FBQVosSUFDQWcwQixFQUFBLEdBQUFFLElBR0F0RCxFQUFBdUQsRUFBQWxCLEVBQUFqekIsTUFBQWcwQixFQUFBLElBQUFoMEIsRUFBQTJ4QixFQUFBanlCLEVBQ0FreUIsR0FFQXVCLEVBQUF2QyxFQUFBLE9BQ0F3RCxFQUFBeEQsRUFBQXFDLEVBQUFqekIsR0FBQWcwQixFQUFBdEMsRUFBQXdCLEVBQ0EsV0FBQXJCLEdBQ0EsS0FFQXNCLEdBQUFBLEVBQUFubUIsT0FDQUMsRUFBQWdsQixnQkFBQStCLEVBQUFLLFdBR0FqQixFQUFBRCxHQUFBQSxFQUFBbUIsWUFDQWhWLEVBQUEyVCxFQUFBanpCLEdBQUFzZixjQUNBQSxFQUFBMWUsT0FDQSxLQUNBb3hCLEVBQUExUyxFQUNBNlQsR0FDQUEsRUFBQVMsMEJBQUFULEVBQUFZLHdCQUNBWixFQUFBVyxXQUFBcEMsSUFFQXlCLEdBQUFDLEtBQ0FPLEVBQUE3c0IsS0FBQTlHLEVBQUFtekIsRUFBQUMsR0FDQWEsR0FBQSxFQUNBUixFQUFBQSxHQUFBTixHQUlBdEIsRUFBQSxJQUlBLE9BQUFvQyxHQUFBbEMsRUFBQSxLQTBEQSxRQUFBOEIsR0FBQTdtQixFQUFBMGtCLEVBQUE2QyxHQUVBLEdBQUFDLEdBQUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQWxDLEVBQUFtQyxHQU9BLE1BTEFILEtBQ0FBLEVBQUF6bkIsRUFBQXNsQixNQUFBLEVBQUFzQyxHQUNBSCxFQUFBSSxlQUFBLEdBR0FuRCxFQUFBK0MsRUFBQUMsR0FDQW5DLHdCQUFBZ0MsRUFDQS9CLHNCQUFBbUMsRUFDQWxDLG9CQUFBQSxJQUlBLE9BQUErQixHQWFBLFFBQUFMLEdBQUF2dUIsRUFBQWdyQixFQUFBb0QsRUFBQXJDLEVBQUFDLEdBQ0EsR0FFQXB4QixHQUNBZ3hCLEVBSEFobkIsRUFBQTVFLEVBQUE0RSxTQUNBc3FCLEVBQUFkLEVBQUFlLEtBSUEsUUFBQXZxQixHQUNBLElBQUEwVCxJQUVBOFcsRUFBQXBFLEVBQ0FxRSxHQUFBOXVCLEVBQUFQLElBQUEsSUFBQStyQixFQUFBQyxFQUdBLEtBQUEsR0FBQTlyQixHQUFBa0csRUFBQWtwQixFQUFBQyxFQUFBN3lCLEVBQUE4eUIsRUFBQUMsRUFBQXp2QixFQUFBMHZCLFdBQ0FweUIsRUFBQSxFQUFBQyxFQUFBa3lCLEdBQUFBLEVBQUF6MEIsT0FBQXVDLEVBQUFELEVBQUFBLElBQUEsQ0FDQSxHQUFBcXlCLElBQUEsRUFDQUMsR0FBQSxDQUVBMXZCLEdBQUF1dkIsRUFBQW55QixHQUNBOEksRUFBQWxHLEVBQUFrRyxLQUNBMUosRUFBQXVkLEdBQUEvWixFQUFBeEQsT0FHQTZ5QixFQUFBRixHQUFBanBCLElBQ0FvcEIsRUFBQUssR0FBQTl2QixLQUFBd3ZCLE1BQ0FucEIsRUFBQUEsRUFBQXpMLFFBQUFtMUIsR0FBQSxJQUNBdEssT0FBQSxHQUFBN3FCLFFBQUEsUUFBQSxTQUFBQyxFQUFBMk4sR0FDQSxNQUFBQSxHQUFBMFAsZ0JBSUEsSUFBQThYLEdBQUFSLEVBQUEzMEIsTUFBQW8xQixHQUNBRCxJQUFBRSxFQUFBRixFQUFBLE1BQ0FKLEVBQUF2cEIsRUFDQXdwQixFQUFBeHBCLEVBQUFvZixPQUFBLEVBQUFwZixFQUFBcEwsT0FBQSxHQUFBLE1BQ0FvTCxFQUFBQSxFQUFBb2YsT0FBQSxFQUFBcGYsRUFBQXBMLE9BQUEsSUFHQXMwQixFQUFBRCxHQUFBanBCLEVBQUFxQyxlQUNBeW1CLEVBQUFJLEdBQUFscEIsR0FDQW9wQixJQUFBcEIsRUFBQW55QixlQUFBcXpCLE1BQ0FsQixFQUFBa0IsR0FBQTV5QixFQUNBMmdCLEdBQUFyZCxFQUFBc3ZCLEtBQ0FsQixFQUFBa0IsSUFBQSxJQUdBWSxHQUFBbHdCLEVBQUFnckIsRUFBQXR1QixFQUFBNHlCLEVBQUFFLEdBQ0FKLEVBQUFwRSxFQUFBc0UsRUFBQSxJQUFBdkQsRUFBQUMsRUFBQTJELEVBQ0FDLEdBU0EsR0FMQWhFLEVBQUE1ckIsRUFBQTRyQixVQUNBdnVCLEVBQUF1dUIsS0FFQUEsRUFBQUEsRUFBQXVFLFNBRUE1MEIsRUFBQXF3QixJQUFBLEtBQUFBLEVBQ0EsS0FBQWh4QixFQUFBOHZCLEVBQUF0UixLQUFBd1MsSUFDQTBELEVBQUFELEdBQUF6MEIsRUFBQSxJQUNBdzBCLEVBQUFwRSxFQUFBc0UsRUFBQSxJQUFBdkQsRUFBQUMsS0FDQW9DLEVBQUFrQixHQUFBclYsR0FBQXJmLEVBQUEsS0FFQWd4QixFQUFBQSxFQUFBcEcsT0FBQTVxQixFQUFBQyxNQUFBRCxFQUFBLEdBQUFJLE9BR0EsTUFDQSxLQUFBNkosSUFDQSxHQUFBLEtBQUF1ckIsR0FFQSxLQUFBcHdCLEVBQUF5YyxZQUFBemMsRUFBQTZLLGFBQUE3SyxFQUFBNkssWUFBQWpHLFdBQUFDLElBQ0E3RSxFQUFBa3NCLFVBQUFsc0IsRUFBQWtzQixVQUFBbHNCLEVBQUE2SyxZQUFBcWhCLFVBQ0Fsc0IsRUFBQXljLFdBQUFJLFlBQUE3YyxFQUFBNkssWUFHQXdsQixHQUFBckYsRUFBQWhyQixFQUFBa3NCLFVBQ0EsTUFDQSxLQUFBb0UsSUFDQSxJQUNBMTFCLEVBQUE2dkIsRUFBQXJSLEtBQUFwWixFQUFBa3NCLFdBQ0F0eEIsSUFDQTAwQixFQUFBRCxHQUFBejBCLEVBQUEsSUFDQXcwQixFQUFBcEUsRUFBQXNFLEVBQUEsSUFBQXZELEVBQUFDLEtBQ0FvQyxFQUFBa0IsR0FBQXJWLEdBQUFyZixFQUFBLE1BR0EsTUFBQTRKLEtBU0EsTUFEQXdtQixHQUFBenVCLEtBQUFnMEIsR0FDQXZGLEVBV0EsUUFBQXdGLEdBQUF4d0IsRUFBQXl3QixFQUFBQyxHQUNBLEdBQUFobUIsTUFDQWltQixFQUFBLENBQ0EsSUFBQUYsR0FBQXp3QixFQUFBcUcsY0FBQXJHLEVBQUFxRyxhQUFBb3FCLElBQ0EsRUFBQSxDQUNBLElBQUF6d0IsRUFDQSxLQUFBNnBCLElBQUEsVUFDQSxtRUFDQTRHLEVBQUFDLEVBRUExd0IsR0FBQTRFLFVBQUEwVCxLQUNBdFksRUFBQXFHLGFBQUFvcUIsSUFBQUUsSUFDQTN3QixFQUFBcUcsYUFBQXFxQixJQUFBQyxLQUVBam1CLEVBQUF4SixLQUFBbEIsR0FDQUEsRUFBQUEsRUFBQTZLLGtCQUNBOGxCLEVBQUEsT0FFQWptQixHQUFBeEosS0FBQWxCLEVBR0EsT0FBQXhFLElBQUFrUCxHQVdBLFFBQUFrbUIsR0FBQUMsRUFBQUosRUFBQUMsR0FDQSxNQUFBLFVBQUF0cEIsRUFBQTVHLEVBQUE0dEIsRUFBQVcsRUFBQWpELEdBRUEsTUFEQXRyQixHQUFBZ3dCLEVBQUFod0IsRUFBQSxHQUFBaXdCLEVBQUFDLEdBQ0FHLEVBQUF6cEIsRUFBQTVHLEVBQUE0dEIsRUFBQVcsRUFBQWpELElBMkJBLFFBQUEwQyxHQUFBeEQsRUFBQThGLEVBQUFDLEVBQUFqRixFQUNBa0YsRUFBQUMsRUFBQUMsRUFBQUMsRUFDQWxGLEdBb05BLFFBQUFtRixHQUFBQyxFQUFBQyxFQUFBYixFQUFBQyxHQUNBVyxJQUNBWixJQUFBWSxFQUFBVCxFQUFBUyxFQUFBWixFQUFBQyxJQUNBVyxFQUFBbkcsUUFBQXhlLEVBQUF3ZSxRQUNBbUcsRUFBQTlILGNBQUFBLEdBQ0FnSSxJQUFBN2tCLEdBQUFBLEVBQUE4a0Isa0JBQ0FILEVBQUFJLEdBQUFKLEdBQUFub0IsY0FBQSxLQUVBZ29CLEVBQUFod0IsS0FBQW13QixJQUVBQyxJQUNBYixJQUFBYSxFQUFBVixFQUFBVSxFQUFBYixFQUFBQyxJQUNBWSxFQUFBcEcsUUFBQXhlLEVBQUF3ZSxRQUNBb0csRUFBQS9ILGNBQUFBLEdBQ0FnSSxJQUFBN2tCLEdBQUFBLEVBQUE4a0Isa0JBQ0FGLEVBQUFHLEdBQUFILEdBQUFwb0IsY0FBQSxLQUVBaW9CLEVBQUFqd0IsS0FBQW93QixJQUtBLFFBQUFJLEdBQUFuSSxFQUFBMkIsRUFBQVMsRUFBQWdHLEdBQ0EsR0FBQWoxQixFQUVBLElBQUFuQixFQUFBMnZCLEdBQUEsQ0FDQSxHQUFBdHdCLEdBQUFzd0IsRUFBQXR3QixNQUFBZ3dCLEdBQ0F4a0IsRUFBQThrQixFQUFBL2xCLFVBQUF2SyxFQUFBLEdBQUFJLFFBQ0E0MkIsRUFBQWgzQixFQUFBLElBQUFBLEVBQUEsR0FDQW92QixFQUFBLE1BQUFwdkIsRUFBQSxFQVlBLElBVEEsT0FBQWczQixFQUNBakcsRUFBQUEsRUFBQW50QixVQUlBOUIsRUFBQWkxQixHQUFBQSxFQUFBdnJCLEdBQ0ExSixFQUFBQSxHQUFBQSxFQUFBa21CLFdBR0FsbUIsRUFBQSxDQUNBLEdBQUFtMUIsR0FBQSxJQUFBenJCLEVBQUEsWUFDQTFKLEdBQUFrMUIsRUFBQWpHLEVBQUF2aUIsY0FBQXlvQixHQUFBbEcsRUFBQXBrQixLQUFBc3FCLEdBR0EsSUFBQW4xQixJQUFBc3RCLEVBQ0EsS0FBQUgsSUFBQSxRQUNBLGlFQUNBempCLEVBQUFtakIsT0FFQSxJQUFBanVCLEdBQUE0dkIsR0FBQSxDQUNBeHVCLElBQ0EsS0FBQSxHQUFBdEMsR0FBQSxFQUFBZ0QsRUFBQTh0QixFQUFBbHdCLE9BQUFvQyxFQUFBaEQsRUFBQUEsSUFDQXNDLEVBQUF0QyxHQUFBczNCLEVBQUFuSSxFQUFBMkIsRUFBQTl3QixHQUFBdXhCLEVBQUFnRyxHQUlBLE1BQUFqMUIsSUFBQSxLQUdBLFFBQUFvMUIsR0FBQW5HLEVBQUF5QyxFQUFBdEMsRUFBQWlHLEVBQUE3b0IsRUFBQTlCLEdBQ0EsR0FBQXVxQixHQUFBeHZCLElBQ0EsS0FBQSxHQUFBNnZCLEtBQUFELEdBQUEsQ0FDQSxHQUFBcmxCLEdBQUFxbEIsRUFBQUMsR0FDQXZQLEdBQ0F3UCxPQUFBdmxCLElBQUE2a0IsR0FBQTdrQixFQUFBOGtCLGVBQUF0b0IsRUFBQTlCLEVBQ0F1a0IsU0FBQUEsRUFDQXVHLE9BQUE5RCxFQUNBK0QsWUFBQXJHLEdBR0EzaUIsRUFBQXVELEVBQUF2RCxVQUNBLE1BQUFBLElBQ0FBLEVBQUFpbEIsRUFBQTFoQixFQUFBdEcsTUFHQSxJQUFBZ3NCLEdBQUFyZSxFQUFBNUssRUFBQXNaLEdBQUEsRUFBQS9WLEVBQUEwZCxhQU9BdUgsR0FBQWpsQixFQUFBdEcsTUFBQWdzQixFQUNBQyxHQUNBMUcsRUFBQXBrQixLQUFBLElBQUFtRixFQUFBdEcsS0FBQSxhQUFBZ3NCLEVBQUF4UCxVQUdBLE1BQUErTyxHQUdBLFFBQUFwRSxHQUFBQyxFQUFBcG1CLEVBQUFrckIsRUFBQWhGLEVBQUFzQixHQXVHQSxRQUFBMkQsR0FBQW5yQixFQUFBb3JCLEVBQUEzRixHQUNBLEdBQUFELEVBZUEsT0FaQXh0QixHQUFBZ0ksS0FDQXlsQixFQUFBMkYsRUFDQUEsRUFBQXByQixFQUNBQSxFQUFBdE4sR0FHQXU0QixJQUNBekYsRUFBQStFLEdBRUE5RSxJQUNBQSxFQUFBd0YsRUFBQTFHLEVBQUFudEIsU0FBQW10QixHQUVBaUQsRUFBQXhuQixFQUFBb3JCLEVBQUE1RixFQUFBQyxFQUFBNEYsR0F0SEEsR0FBQTVCLEdBQUEzbkIsRUFBQXdwQixFQUFBZixFQUFBN0YsRUFBQUgsRUFDQXlDLEVBQUF1RSxFQUFBQyxDQUVBOUIsS0FBQXdCLEdBQ0FsRSxFQUFBMkMsRUFDQXBGLEVBQUFvRixFQUFBdEMsWUFFQTlDLEVBQUFud0IsR0FBQTgyQixHQUNBbEUsRUFBQSxHQUFBRSxJQUFBM0MsRUFBQW9GLElBR0EyQixFQUFBdHJCLEVBQ0FtcUIsRUFDQXJvQixFQUFBOUIsRUFBQXNsQixNQUFBLEdBQ0FtRyxJQUNBSCxFQUFBdHJCLEVBQUFxbEIsU0FHQW1DLElBR0E5QyxFQUFBeUcsRUFDQXpHLEVBQUFnQixrQkFBQThCLEdBR0FtRCxJQUNBSixFQUFBRyxFQUFBbkcsRUFBQXlDLEVBQUF0QyxFQUFBaUcsRUFBQTdvQixFQUFBOUIsSUFHQW1xQixJQUVBbHFCLEVBQUE4bEIsZUFBQXhCLEVBQUF6aUIsR0FBQSxJQUFBNHBCLElBQUFBLElBQUF2QixHQUNBdUIsSUFBQXZCLEVBQUF3Qix1QkFDQTFyQixFQUFBZ2xCLGdCQUFBVixHQUFBLEdBQ0F6aUIsRUFBQW1pQixrQkFDQWtHLEVBQUFsRyxrQkFDQXNILEVBQUFLLEdBQUE1ckIsRUFBQWduQixFQUFBbGxCLEVBQ0FBLEVBQUFtaUIsa0JBQ0FrRyxHQUNBb0IsR0FDQXpwQixFQUFBK3BCLElBQUEsV0FBQU4sR0FLQSxLQUFBLEdBQUF2c0IsS0FBQXVyQixHQUFBLENBQ0EsR0FBQXVCLEdBQUFuQixFQUFBM3JCLEdBQ0ErQyxFQUFBd29CLEVBQUF2ckIsR0FDQXNqQixFQUFBd0osRUFBQTlILFdBQUFqQixnQkFFQWhoQixHQUFBZ3FCLFlBQUF6SixJQUNBa0osRUFDQUksR0FBQU4sRUFBQXRFLEVBQUFqbEIsRUFBQXlaLFNBQUE4RyxFQUFBd0osR0FHQSxJQUFBRSxHQUFBanFCLEdBQ0FpcUIsS0FBQWpxQixFQUFBeVosV0FHQXpaLEVBQUF5WixTQUFBd1EsRUFDQXpILEVBQUFwa0IsS0FBQSxJQUFBMnJCLEVBQUE5c0IsS0FBQSxhQUFBZ3RCLEdBQ0FSLEdBQUFBLElBQ0FBLEVBQ0FJLEdBQUFOLEVBQUF0RSxFQUFBamxCLEVBQUF5WixTQUFBOEcsRUFBQXdKLElBS0EsSUFBQTk0QixFQUFBLEVBQUFnRCxFQUFBOHpCLEVBQUFsMkIsT0FBQW9DLEVBQUFoRCxFQUFBQSxJQUNBeTJCLEVBQUFLLEVBQUE5MkIsR0FDQWk1QixHQUFBeEMsRUFDQUEsRUFBQTNuQixhQUFBQSxFQUFBOUIsRUFDQXVrQixFQUNBeUMsRUFDQXlDLEVBQUEzRixTQUFBd0csRUFBQWIsRUFBQXRILGNBQUFzSCxFQUFBM0YsUUFBQVMsRUFBQWdHLEdBQ0E3RixFQU9BLElBQUEyRyxHQUFBcnJCLENBT0EsS0FOQW1xQixJQUFBQSxFQUFBNzJCLFVBQUEsT0FBQTYyQixFQUFBK0IsZUFDQWIsRUFBQXZwQixHQUVBc2tCLEdBQUFBLEVBQUFpRixFQUFBSCxFQUFBNVksV0FBQTVmLEVBQUE4MEIsR0FHQXgwQixFQUFBKzJCLEVBQUFuMkIsT0FBQSxFQUFBWixHQUFBLEVBQUFBLElBQ0F5MkIsRUFBQU0sRUFBQS8yQixHQUNBaTVCLEdBQUF4QyxFQUNBQSxFQUFBM25CLGFBQUFBLEVBQUE5QixFQUNBdWtCLEVBQ0F5QyxFQUNBeUMsRUFBQTNGLFNBQUF3RyxFQUFBYixFQUFBdEgsY0FBQXNILEVBQUEzRixRQUFBUyxFQUFBZ0csR0FDQTdGLEdBaFpBRyxFQUFBQSxLQXFCQSxLQUFBLEdBVEF2ZixHQUNBNmMsRUFDQWdLLEVBR0ExQyxFQUNBMkMsRUFoQkFDLEdBQUE1SyxPQUFBQyxVQUNBK0osRUFBQTVHLEVBQUE0RyxrQkFDQWQsRUFBQTlGLEVBQUE4RixxQkFDQVIsRUFBQXRGLEVBQUFzRix5QkFDQXVCLEVBQUE3RyxFQUFBNkcsa0JBQ0FZLEVBQUF6SCxFQUFBeUgsMEJBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUNBdkIsRUFBQXBHLEVBQUFvRyw4QkFDQXdCLEVBQUE5QyxFQUFBdEMsVUFBQWp6QixHQUFBczFCLEdBSUFnRCxFQUFBN0MsRUFDQThDLEVBQUFqSSxFQUtBMXhCLEVBQUEsRUFBQWdELEVBQUE0dEIsRUFBQWh3QixPQUFBb0MsRUFBQWhELEVBQUFBLElBQUEsQ0FDQXNTLEVBQUFzZSxFQUFBNXdCLEVBQ0EsSUFBQXEyQixHQUFBL2pCLEVBQUFzbkIsUUFDQXRELEVBQUFoa0IsRUFBQXVuQixLQVFBLElBTEF4RCxJQUNBb0QsRUFBQXJELEVBQUFNLEVBQUFMLEVBQUFDLElBRUE2QyxFQUFBejVCLEVBRUEyNUIsRUFBQS9tQixFQUFBdWUsU0FDQSxLQTJFQSxLQXhFQXVJLEVBQUE5bUIsRUFBQXRGLFNBSUFzRixFQUFBNG1CLGNBQ0FqMkIsRUFBQW0yQixJQUdBVSxFQUFBLHFCQUFBM0MsR0FBQXNCLEVBQ0FubUIsRUFBQW1uQixHQUNBdEMsRUFBQTdrQixHQUlBd25CLEVBQUEscUJBQUEzQyxFQUFBN2tCLEVBQ0FtbkI7QUFJQWhCLEVBQUFBLEdBQUFubUIsR0FHQTZjLEVBQUE3YyxFQUFBdEcsTUFFQXNHLEVBQUE0bUIsYUFBQTVtQixFQUFBdkQsYUFDQXFxQixFQUFBOW1CLEVBQUF2RCxXQUNBNG9CLEVBQUFBLEdBQUE1dkIsS0FDQSt4QixFQUFBLElBQUEzSyxFQUFBLGVBQ0F3SSxFQUFBeEksR0FBQTdjLEVBQUFtbkIsR0FDQTlCLEVBQUF4SSxHQUFBN2MsSUFHQThtQixFQUFBOW1CLEVBQUF3aEIsY0FDQXlGLEdBQUEsRUFLQWpuQixFQUFBeW5CLFFBQ0FELEVBQUEsZUFBQVIsRUFBQWhuQixFQUFBbW5CLEdBQ0FILEVBQUFobkIsR0FHQSxXQUFBOG1CLEdBQ0FuQixHQUFBLEVBQ0FvQixFQUFBL21CLEVBQUF1ZSxTQUNBc0ksRUFBQU0sRUFDQUEsRUFBQTlDLEVBQUF0QyxVQUNBanpCLEdBQUEzQixFQUFBdTZCLGNBQUEsSUFBQTdLLEVBQUEsS0FDQXdILEVBQUF4SCxHQUFBLE1BQ0F1SCxFQUFBK0MsRUFBQSxHQUNBUSxHQUFBckQsRUFBQXp1QixFQUFBZ3hCLEdBQUF6QyxHQUVBaUQsRUFBQTFzQixFQUFBa3NCLEVBQUF6SCxFQUFBMkgsRUFDQUssR0FBQUEsRUFBQTF0QixNQVFBc3RCLDBCQUFBQSxNQUdBSCxFQUFBLzNCLEdBQUE0ZSxHQUFBMFcsSUFBQXdELFdBQ0FULEVBQUF0dkIsUUFDQXd2QixFQUFBMXNCLEVBQUFrc0IsRUFBQXpILEVBQUFoeUIsRUFDQUEsR0FBQTB5QixjQUFBOWYsRUFBQThrQixnQkFBQTlrQixFQUFBNm5CLGVBSUE3bkIsRUFBQWhTLFNBV0EsR0FWQWs1QixHQUFBLEVBQ0FNLEVBQUEsV0FBQXBCLEVBQUFwbUIsRUFBQW1uQixHQUNBZixFQUFBcG1CLEVBRUE4bUIsRUFBQXgzQixFQUFBMFEsRUFBQWhTLFVBQ0FnUyxFQUFBaFMsU0FBQW01QixFQUFBOUMsR0FDQXJrQixFQUFBaFMsU0FFQTg0QixFQUFBZ0IsR0FBQWhCLEdBRUE5bUIsRUFBQS9SLFFBQUEsQ0FTQSxHQVJBbTVCLEVBQUFwbkIsRUFFQTZtQixFQURBcGIsR0FBQXFiLE1BR0FpQixHQUFBeEgsRUFBQXZnQixFQUFBZ29CLGtCQUFBemEsR0FBQXVaLEtBRUExQyxFQUFBeUMsRUFBQSxHQUVBLEdBQUFBLEVBQUF2NEIsUUFBQTgxQixFQUFBbHNCLFdBQUEwVCxHQUNBLEtBQUF1UixJQUFBLFFBQ0EsdUVBQ0FOLEVBQUEsR0FHQThLLElBQUFyRCxFQUFBNkMsRUFBQS9DLEVBRUEsSUFBQTZELEtBQUF4RixVQU9BeUYsR0FBQXJHLEVBQUF1QyxLQUFBNkQsSUFDQUUsR0FBQTdKLEVBQUFucUIsT0FBQXpHLEVBQUEsRUFBQTR3QixFQUFBaHdCLFFBQUFaLEVBQUEsS0FFQW0zQixHQUFBc0IsSUFJQWlDLEVBQUFGLEdBQUFyRCxFQUFBc0IsR0FFQTdILEVBQUFBLEVBQUE1b0IsT0FBQXd5QixJQUFBeHlCLE9BQUF5eUIsSUFDQUUsRUFBQWhFLEVBQUE0RCxJQUVBdjNCLEVBQUE0dEIsRUFBQWh3QixXQUVBNjRCLEdBQUFsdkIsS0FBQTZ1QixFQUlBLElBQUE5bUIsRUFBQTRtQixZQUNBTSxHQUFBLEVBQ0FNLEVBQUEsV0FBQXBCLEVBQUFwbUIsRUFBQW1uQixHQUNBZixFQUFBcG1CLEVBRUFBLEVBQUEvUixVQUNBbTVCLEVBQUFwbkIsR0FHQTZnQixFQUFBeUgsRUFBQWhLLEVBQUFucUIsT0FBQXpHLEVBQUE0d0IsRUFBQWh3QixPQUFBWixHQUFBeTVCLEVBQ0E5QyxFQUFBQyxFQUFBMkMsR0FBQUksRUFBQTdDLEVBQUFDLEdBQ0FZLHFCQUFBQSxFQUNBYyxrQkFBQUEsSUFBQW5tQixHQUFBbW1CLEVBQ0F0Qix5QkFBQUEsRUFDQXVCLGtCQUFBQSxFQUNBWSwwQkFBQUEsSUFFQXQyQixFQUFBNHRCLEVBQUFod0IsV0FDQSxJQUFBMFIsRUFBQXJGLFFBQ0EsSUFDQXdwQixFQUFBbmtCLEVBQUFyRixRQUFBd3NCLEVBQUE5QyxFQUFBZ0QsR0FDQS8zQixFQUFBNjBCLEdBQ0FPLEVBQUEsS0FBQVAsRUFBQUosRUFBQUMsR0FDQUcsR0FDQU8sRUFBQVAsRUFBQVEsSUFBQVIsRUFBQVMsS0FBQWIsRUFBQUMsR0FFQSxNQUFBbHNCLElBQ0EyUCxFQUFBM1AsR0FBQUYsRUFBQXV2QixJQUlBbm5CLEVBQUFnaUIsV0FDQW5CLEVBQUFtQixVQUFBLEVBQ0ErRSxFQUFBd0IsS0FBQUMsSUFBQXpCLEVBQUEvbUIsRUFBQXVlLFdBYUEsTUFSQXNDLEdBQUFubUIsTUFBQXlyQixHQUFBQSxFQUFBenJCLFNBQUEsRUFDQW1tQixFQUFBUyx3QkFBQTJGLEVBQ0FwRyxFQUFBWSxzQkFBQXlGLEVBQ0FyRyxFQUFBVyxXQUFBNkYsRUFFQTlILEVBQUFvRyw4QkFBQUEsRUFHQTlFLEVBa09BLFFBQUF1SCxHQUFBOUosRUFBQTloQixFQUFBaXNCLEdBQ0EsSUFBQSxHQUFBNzNCLEdBQUEsRUFBQUMsRUFBQXl0QixFQUFBaHdCLE9BQUF1QyxFQUFBRCxFQUFBQSxJQUNBMHRCLEVBQUExdEIsR0FBQWlCLEVBQUF5c0IsRUFBQTF0QixJQUFBazBCLGVBQUF0b0IsRUFBQXFyQixXQUFBWSxJQWtCQSxRQUFBL0YsR0FBQWdHLEVBQUFodkIsRUFBQTJCLEVBQUFna0IsRUFBQUMsRUFBQXFKLEVBQ0FDLEdBQ0EsR0FBQWx2QixJQUFBNGxCLEVBQUEsTUFBQSxLQUNBLElBQUFweEIsR0FBQSxJQUNBLElBQUEydkIsRUFBQXR1QixlQUFBbUssR0FDQSxJQUFBLEdBQUFzRyxHQUFBc2UsRUFBQTVKLEVBQUFqWixJQUFBL0IsRUFBQW9rQixHQUNBcHdCLEVBQUEsRUFBQWdELEVBQUE0dEIsRUFBQWh3QixPQUFBb0MsRUFBQWhELEVBQUFBLElBQ0EsSUFDQXNTLEVBQUFzZSxFQUFBNXdCLElBQ0E2RSxFQUFBOHNCLElBQUFBLEVBQUFyZixFQUFBdWUsV0FDQSxJQUFBdmUsRUFBQXllLFNBQUF2cUIsUUFBQW1ILEtBQ0FzdEIsSUFDQTNvQixFQUFBbk8sRUFBQW1PLEdBQUFzbkIsUUFBQXFCLEVBQUFwQixNQUFBcUIsS0FFQUYsRUFBQWwwQixLQUFBd0wsR0FDQTlSLEVBQUE4UixHQUVBLE1BQUFsSSxHQUFBMlAsRUFBQTNQLEdBR0EsTUFBQTVKLEdBWUEsUUFBQXExQixHQUFBN3BCLEdBQ0EsR0FBQW1rQixFQUFBdHVCLGVBQUFtSyxHQUNBLElBQUEsR0FBQXNHLEdBQUFzZSxFQUFBNUosRUFBQWpaLElBQUEvQixFQUFBb2tCLEdBQ0Fwd0IsRUFBQSxFQUFBZ0QsRUFBQTR0QixFQUFBaHdCLE9BQUFvQyxFQUFBaEQsRUFBQUEsSUFFQSxHQURBc1MsRUFBQXNlLEVBQUE1d0IsR0FDQXNTLEVBQUE2b0IsYUFDQSxPQUFBLENBSUEsUUFBQSxFQVdBLFFBQUFSLEdBQUE5M0IsRUFBQU8sR0FDQSxHQUFBZzRCLEdBQUFoNEIsRUFBQTJ4QixNQUNBc0csRUFBQXg0QixFQUFBa3lCLE1BQ0F4RCxFQUFBMXVCLEVBQUF3eEIsU0FHQTd5QixHQUFBcUIsRUFBQSxTQUFBUCxFQUFBWCxHQUNBLEtBQUFBLEVBQUE2RixPQUFBLEtBQ0FwRSxFQUFBekIsSUFBQXlCLEVBQUF6QixLQUFBVyxJQUNBQSxJQUFBLFVBQUFYLEVBQUEsSUFBQSxLQUFBeUIsRUFBQXpCLElBRUFrQixFQUFBeTRCLEtBQUEzNUIsRUFBQVcsR0FBQSxFQUFBODRCLEVBQUF6NUIsT0FLQUgsRUFBQTRCLEVBQUEsU0FBQWQsRUFBQVgsR0FDQSxTQUFBQSxHQUNBMnZCLEVBQUFDLEVBQUFqdkIsR0FDQU8sRUFBQSxVQUFBQSxFQUFBLFNBQUFBLEVBQUEsU0FBQSxJQUFBLElBQUFQLEdBQ0EsU0FBQVgsR0FDQTR2QixFQUFBenJCLEtBQUEsUUFBQXlyQixFQUFBenJCLEtBQUEsU0FBQSxJQUFBeEQsR0FDQU8sRUFBQSxPQUFBQSxFQUFBLE1BQUFBLEVBQUEsTUFBQSxJQUFBLElBQUFQLEdBSUEsS0FBQVgsRUFBQTZGLE9BQUEsSUFBQTNFLEVBQUFoQixlQUFBRixLQUNBa0IsRUFBQWxCLEdBQUFXLEVBQ0ErNEIsRUFBQTE1QixHQUFBeTVCLEVBQUF6NUIsTUFNQSxRQUFBaTVCLEdBQUFoSyxFQUFBNkksRUFBQThCLEVBQ0FySSxFQUFBeUcsRUFBQTdDLEVBQUFDLEVBQUFsRixHQUNBLEdBQ0EySixHQUNBQyxFQUZBQyxLQUdBQyxFQUFBbEMsRUFBQSxHQUNBbUMsRUFBQWhMLEVBQUF4SSxRQUNBeVQsRUFBQTEzQixFQUFBeTNCLEdBQ0ExQyxZQUFBLEtBQUFwRixXQUFBLEtBQUF2ekIsUUFBQSxLQUFBbzRCLG9CQUFBaUQsSUFFQTFDLEVBQUF0M0IsRUFBQWc2QixFQUFBMUMsYUFDQTBDLEVBQUExQyxZQUFBTyxFQUFBOEIsR0FDQUssRUFBQTFDLFlBQ0FvQixFQUFBc0IsRUFBQXRCLGlCQXFGQSxPQW5GQWIsR0FBQXR2QixRQUVBb1MsRUFBQTJjLEdBQ0ExekIsS0FBQSxTQUFBczJCLEdBQ0EsR0FBQXBGLEdBQUFxRixFQUFBNUMsRUFBQTVGLENBSUEsSUFGQXVJLEVBQUExQixHQUFBMEIsR0FFQUYsRUFBQXI3QixRQUFBLENBUUEsR0FOQTQ0QixFQURBcGIsR0FBQStkLE1BR0F6QixHQUFBeEgsRUFBQXlILEVBQUF6YSxHQUFBaWMsS0FFQXBGLEVBQUF5QyxFQUFBLEdBRUEsR0FBQUEsRUFBQXY0QixRQUFBODFCLEVBQUFsc0IsV0FBQTBULEdBQ0EsS0FBQXVSLElBQUEsUUFDQSx1RUFDQW1NLEVBQUE1dkIsS0FBQWt0QixFQUdBNkMsSUFBQWhILFVBQ0FrRixHQUFBL0csRUFBQXVHLEVBQUEvQyxFQUNBLElBQUE4RCxHQUFBckcsRUFBQXVDLEtBQUFxRixFQUVBOTRCLEdBQUEyNEIsRUFBQTV1QixRQUdBMHRCLEVBQUFGLEdBQUEsR0FFQTVKLEVBQUE0SixFQUFBeHlCLE9BQUE0b0IsR0FDQStKLEVBQUFZLEVBQUFRLE9BRUFyRixHQUFBaUYsRUFDQWxDLEVBQUFsdkIsS0FBQXV4QixFQWVBLEtBWkFsTCxFQUFBbGtCLFFBQUFtdkIsR0FFQUwsRUFBQXBILEVBQUF4RCxFQUFBOEYsRUFBQTZFLEVBQ0E1QixFQUFBRixFQUFBbUMsRUFBQTlFLEVBQUFDLEVBQ0FsRixHQUNBcndCLEVBQUEweEIsRUFBQSxTQUFBdHRCLEVBQUE1RixHQUNBNEYsR0FBQTh3QixJQUNBeEQsRUFBQWx6QixHQUFBeTVCLEVBQUEsTUFHQWdDLEVBQUF6SixFQUFBeUgsRUFBQSxHQUFBbmEsV0FBQXFhLEdBRUErQixFQUFBOTZCLFFBQUEsQ0FDQSxHQUFBb00sR0FBQTB1QixFQUFBdFQsUUFDQTRULEVBQUFOLEVBQUF0VCxRQUNBNlQsRUFBQVAsRUFBQXRULFFBQ0FvTSxFQUFBa0gsRUFBQXRULFFBQ0E4UCxFQUFBdUIsRUFBQSxFQUVBLEtBQUF6c0IsRUFBQWt2QixZQUFBLENBRUEsR0FBQUYsSUFBQUwsRUFBQSxDQUNBLEdBQUFRLEdBQUFILEVBQUF4SyxTQUVBSyxHQUFBb0csK0JBQ0EyRCxFQUFBcjdCLFVBRUEyM0IsRUFBQWxZLEdBQUEwVyxJQUVBdUQsR0FBQWdDLEVBQUE3NkIsR0FBQTQ2QixHQUFBOUQsR0FHQTVHLEVBQUFsd0IsR0FBQTgyQixHQUFBaUUsR0FHQTVJLEVBREFpSSxFQUFBNUgsd0JBQ0FDLEVBQUE3bUIsRUFBQXd1QixFQUFBMUgsV0FBQVUsR0FFQUEsRUFFQWdILEVBQUFDLEVBQUF6dUIsRUFBQWtyQixFQUFBaEYsRUFDQUssSUFFQW1JLEVBQUEsT0FHQSxTQUFBVSxFQUFBcHZCLEVBQUFwSCxFQUFBa0ksRUFBQTBtQixHQUNBLEdBQUFqQixHQUFBaUIsQ0FDQXhuQixHQUFBa3ZCLGNBQ0FSLEVBQ0FBLEVBQUE1MEIsS0FBQWtHLEVBQ0FwSCxFQUNBa0ksRUFDQXlsQixJQUVBaUksRUFBQTVILDBCQUNBTCxFQUFBTSxFQUFBN21CLEVBQUF3dUIsRUFBQTFILFdBQUFVLElBRUFnSCxFQUFBQyxFQUFBenVCLEVBQUFwSCxFQUFBa0ksRUFBQXlsQixNQVNBLFFBQUE0QyxHQUFBNWlCLEVBQUE4VyxHQUNBLEdBQUFnUyxHQUFBaFMsRUFBQXdHLFNBQUF0ZCxFQUFBc2QsUUFDQSxPQUFBLEtBQUF3TCxFQUFBQSxFQUNBOW9CLEVBQUF2SCxPQUFBcWUsRUFBQXJlLEtBQUF1SCxFQUFBdkgsS0FBQXFlLEVBQUFyZSxLQUFBLEdBQUEsRUFDQXVILEVBQUE5UyxNQUFBNHBCLEVBQUE1cEIsTUFHQSxRQUFBcTVCLEdBQUF3QyxFQUFBQyxFQUFBanFCLEVBQUFsTSxHQUVBLFFBQUFvMkIsR0FBQUMsR0FDQSxNQUFBQSxHQUNBLGFBQUFBLEVBQUEsSUFDQSxHQUdBLEdBQUFGLEVBQ0EsS0FBQTlNLElBQUEsV0FBQSw4REFDQThNLEVBQUF2d0IsS0FBQXd3QixFQUFBRCxFQUFBNXFCLGNBQ0FXLEVBQUF0RyxLQUFBd3dCLEVBQUFscUIsRUFBQVgsY0FBQTJxQixFQUFBcHlCLEVBQUE5RCxJQUtBLFFBQUE2dkIsR0FBQXJGLEVBQUE4TCxHQUNBLEdBQUFDLEdBQUF0aUIsRUFBQXFpQixHQUFBLEVBQ0FDLElBQ0EvTCxFQUFBOXBCLE1BQ0ErcEIsU0FBQSxFQUNBNWpCLFFBQUEsU0FBQTJ2QixHQUNBLEdBQUFDLEdBQUFELEVBQUF4NEIsU0FDQTA0QixJQUFBRCxFQUFBajhCLE1BTUEsT0FGQWs4QixJQUFBN3ZCLEVBQUE4dkIsa0JBQUFGLEdBRUEsU0FBQTd2QixFQUFBcEgsR0FDQSxHQUFBeEIsR0FBQXdCLEVBQUF4QixRQUNBMDRCLElBQUE3dkIsRUFBQTh2QixrQkFBQTM0QixHQUNBNkksRUFBQSt2QixpQkFBQTU0QixFQUFBdTRCLEVBQUFNLGFBQ0Fqd0IsRUFBQTlILE9BQUF5M0IsRUFBQSxTQUFBcjZCLEdBQ0FzRCxFQUFBLEdBQUFrc0IsVUFBQXh2QixRQVNBLFFBQUF1d0IsR0FBQXJTLEVBQUFsZ0IsR0FFQSxPQURBa2dCLEVBQUFuYSxHQUFBbWEsR0FBQSxTQUVBLElBQUEsTUFDQSxJQUFBLE9BQ0EsR0FBQTBjLEdBQUF6OUIsRUFBQXFmLGNBQUEsTUFFQSxPQURBb2UsR0FBQS9kLFVBQUEsSUFBQXFCLEVBQUEsSUFBQWxnQixFQUFBLEtBQUFrZ0IsRUFBQSxJQUNBMGMsRUFBQTVkLFdBQUEsR0FBQUEsVUFDQSxTQUNBLE1BQUFoZixJQUtBLFFBQUE2OEIsSUFBQXYzQixFQUFBdzNCLEdBQ0EsR0FBQSxVQUFBQSxFQUNBLE1BQUFyaEIsR0FBQXNoQixJQUVBLElBQUE1d0IsR0FBQXRHLEVBQUFQLEVBRUEsT0FBQSxhQUFBdzNCLEdBQ0EsUUFBQTN3QixHQUFBLFVBQUEyd0IsR0FDQSxPQUFBM3dCLElBQUEsT0FBQTJ3QixHQUNBLFNBQUFBLEdBQ0FyaEIsRUFBQXVoQixhQUpBLE9BU0EsUUFBQXhILElBQUFsd0IsRUFBQWdyQixFQUFBdHVCLEVBQUEwSixFQUFBdXhCLEdBQ0EsR0FBQUMsR0FBQUwsR0FBQXYzQixFQUFBb0csRUFDQXV4QixHQUFBaE4sRUFBQXZrQixJQUFBdXhCLENBRUEsSUFBQVosR0FBQXRpQixFQUFBL1gsR0FBQSxFQUFBazdCLEVBQUFELEVBR0EsSUFBQVosRUFBQSxDQUdBLEdBQUEsYUFBQTN3QixHQUFBLFdBQUE3RixFQUFBUCxHQUNBLEtBQUE2cEIsSUFBQSxXQUNBLHFFQUNBdmxCLEVBQUF0RSxHQUdBZ3JCLEdBQUE5cEIsTUFDQStwQixTQUFBLElBQ0E1akIsUUFBQSxXQUNBLE9BQ0FncUIsSUFBQSxTQUFBanFCLEVBQUE1RyxFQUFBTixHQUNBLEdBQUEyM0IsR0FBQTMzQixFQUFBMjNCLGNBQUEzM0IsRUFBQTIzQixZQUFBMTFCLEtBRUEsSUFBQTBvQixFQUFBOXFCLEtBQUFxRyxHQUNBLEtBQUF5akIsSUFBQSxjQUNBLDJJQUtBLElBQUFpTyxHQUFBNTNCLEVBQUFrRyxFQUNBMHhCLEtBQUFwN0IsSUFJQXE2QixFQUFBZSxHQUFBcmpCLEVBQUFxakIsR0FBQSxFQUFBRixFQUFBRCxHQUNBajdCLEVBQUFvN0IsR0FLQWYsSUFLQTcyQixFQUFBa0csR0FBQTJ3QixFQUFBM3ZCLElBRUF5d0IsRUFBQXp4QixLQUFBeXhCLEVBQUF6eEIsUUFBQTJ4QixTQUFBLEdBQ0E3M0IsRUFBQTIzQixhQUFBMzNCLEVBQUEyM0IsWUFBQXp4QixHQUFBNHhCLFNBQUE1d0IsR0FDQTlILE9BQUF5M0IsRUFBQSxTQUFBZSxFQUFBRyxHQU9BLFVBQUE3eEIsR0FBQTB4QixHQUFBRyxFQUNBLzNCLEVBQUFnNEIsYUFBQUosRUFBQUcsR0FFQS8zQixFQUFBdzFCLEtBQUF0dkIsRUFBQTB4QixZQW9CQSxRQUFBekQsSUFBQS9HLEVBQUE2SyxFQUFBQyxHQUNBLEdBR0FoK0IsR0FBQWdELEVBSEFpN0IsRUFBQUYsRUFBQSxHQUNBRyxFQUFBSCxFQUFBbjlCLE9BQ0F3RCxFQUFBNjVCLEVBQUE1YixVQUdBLElBQUE2USxFQUNBLElBQUFsekIsRUFBQSxFQUFBZ0QsRUFBQWt3QixFQUFBdHlCLE9BQUFvQyxFQUFBaEQsRUFBQUEsSUFDQSxHQUFBa3pCLEVBQUFsekIsSUFBQWkrQixFQUFBLENBQ0EvSyxFQUFBbHpCLEtBQUFnK0IsQ0FDQSxLQUFBLEdBQUE5NkIsR0FBQWxELEVBQUFtK0IsRUFBQWo3QixFQUFBZzdCLEVBQUEsRUFDQS82QixFQUFBK3ZCLEVBQUF0eUIsT0FDQXVDLEVBQUFELEVBQUFBLElBQUFpN0IsSUFDQWg3QixFQUFBZzdCLEVBQ0FqTCxFQUFBaHdCLEdBQUFnd0IsRUFBQWlMLFNBRUFqTCxHQUFBaHdCLEVBR0Fnd0IsR0FBQXR5QixRQUFBczlCLEVBQUEsRUFLQWhMLEVBQUF4eEIsVUFBQXU4QixJQUNBL0ssRUFBQXh4QixRQUFBczhCLEVBRUEsT0FLQTU1QixHQUNBQSxFQUFBZzZCLGFBQUFKLEVBQUFDLEVBSUEsSUFBQXZmLEdBQUFqZixFQUFBa2Ysd0JBQ0FELEdBQUFHLFlBQUFvZixHQUVBNzhCLEdBQUFpOUIsUUFBQUosS0FJQTc4QixHQUFBK0wsS0FBQTZ3QixFQUFBNThCLEdBQUErTCxLQUFBOHdCLElBS0F0dkIsSUFVQVMsSUFBQSxFQUNBVCxHQUFBTSxXQUFBZ3ZCLFdBVkE3OEIsSUFBQTJtQixNQUFBa1csRUFBQTc4QixHQUFBazlCLFVBY0EsS0FBQSxHQUFBQyxHQUFBLEVBQUFDLEVBQUFULEVBQUFuOUIsT0FBQTQ5QixFQUFBRCxFQUFBQSxJQUFBLENBQ0EsR0FBQW40QixHQUFBMjNCLEVBQUFRLEVBQ0FuOUIsSUFBQWdGLEdBQUF5b0IsU0FDQW5RLEVBQUFHLFlBQUF6WSxTQUNBMjNCLEdBQUFRLEdBR0FSLEVBQUEsR0FBQUMsRUFDQUQsRUFBQW45QixPQUFBLEVBSUEsUUFBQXkyQixJQUFBN3VCLEVBQUFpMkIsR0FDQSxNQUFBMzZCLEdBQUEsV0FBQSxNQUFBMEUsR0FBQUUsTUFBQSxLQUFBdkksWUFBQXFJLEVBQUFpMkIsR0FJQSxRQUFBeEYsSUFBQXhDLEVBQUF6cEIsRUFBQXVrQixFQUFBeUMsRUFBQVcsRUFBQWpELEdBQ0EsSUFDQStFLEVBQUF6cEIsRUFBQXVrQixFQUFBeUMsRUFBQVcsRUFBQWpELEdBQ0EsTUFBQXRuQixHQUNBMlAsRUFBQTNQLEVBQUFGLEVBQUFxbkIsS0FPQSxRQUFBcUgsSUFBQTVyQixFQUFBZ25CLEVBQUFwdEIsRUFBQTBvQixFQUFBaGQsR0FDQSxHQUFBb3NCLEtBcUZBLE9BcEZBbDlCLEdBQUE4dEIsRUFBQSxTQUFBQyxFQUFBQyxHQUNBLEdBR0FtUCxHQUNBQyxFQUFBQyxFQUFBQyxFQUpBalAsRUFBQU4sRUFBQU0sU0FDQUQsRUFBQUwsRUFBQUssU0FDQUYsRUFBQUgsRUFBQUcsSUFJQSxRQUFBQSxHQUVBLElBQUEsSUFDQUUsR0FBQS90QixHQUFBQyxLQUFBa3lCLEVBQUFuRSxLQUNBanBCLEVBQUE0b0IsR0FBQXdFLEVBQUFuRSxHQUFBLFFBRUFtRSxFQUFBK0ssU0FBQWxQLEVBQUEsU0FBQXZ0QixHQUNBbkIsRUFBQW1CLEtBQ0FzRSxFQUFBNG9CLEdBQUFsdEIsS0FHQTB4QixFQUFBeUosWUFBQTVOLEdBQUErTixRQUFBNXdCLEVBQ0E3TCxFQUFBNnlCLEVBQUFuRSxNQUdBanBCLEVBQUE0b0IsR0FBQW5WLEVBQUEyWixFQUFBbkUsSUFBQTdpQixHQUVBLE1BRUEsS0FBQSxJQUNBLElBQUFuTCxHQUFBQyxLQUFBa3lCLEVBQUFuRSxHQUFBLENBQ0EsR0FBQUQsRUFBQSxLQUNBb0UsR0FBQW5FLEdBQUEsT0FFQSxHQUFBRCxJQUFBb0UsRUFBQW5FLEdBQUEsS0FFQStPLEdBQUFyakIsRUFBQXlZLEVBQUFuRSxJQUVBaVAsRUFEQUYsRUFBQUksUUFDQXYzQixFQUVBLFNBQUE4TCxFQUFBOFcsR0FBQSxNQUFBOVcsS0FBQThXLEdBQUE5VyxJQUFBQSxHQUFBOFcsSUFBQUEsR0FFQXdVLEVBQUFELEVBQUFLLFFBQUEsV0FHQSxLQURBTixHQUFBLzNCLEVBQUE0b0IsR0FBQW9QLEVBQUE1eEIsR0FDQXlpQixHQUFBLFlBQ0EsZ0VBQ0F1RSxFQUFBbkUsR0FBQXZkLEVBQUF0RyxPQUVBMnlCLEVBQUEvM0IsRUFBQTRvQixHQUFBb1AsRUFBQTV4QixFQUNBLElBQUFreUIsR0FBQSxTQUFBQyxHQVdBLE1BVkFMLEdBQUFLLEVBQUF2NEIsRUFBQTRvQixNQUVBc1AsRUFBQUssRUFBQVIsR0FLQUUsRUFBQTd4QixFQUFBbXlCLEVBQUF2NEIsRUFBQTRvQixJQUhBNW9CLEVBQUE0b0IsR0FBQTJQLEdBTUFSLEVBQUFRLEVBRUFELEdBQUFFLFdBQUEsQ0FDQSxJQUFBQyxFQUVBQSxHQURBOVAsRUFBQUksV0FDQTNpQixFQUFBc3lCLGlCQUFBdEwsRUFBQW5FLEdBQUFxUCxHQUVBbHlCLEVBQUE5SCxPQUFBcVcsRUFBQXlZLEVBQUFuRSxHQUFBcVAsR0FBQSxLQUFBTixFQUFBSSxTQUVBTixFQUFBNTNCLEtBQUF1NEIsRUFDQSxNQUVBLEtBQUEsSUFLQSxHQUhBVCxFQUFBNUssRUFBQW55QixlQUFBZ3VCLEdBQUF0VSxFQUFBeVksRUFBQW5FLElBQUF0ckIsRUFHQXE2QixJQUFBcjZCLEdBQUFxckIsRUFBQSxLQUVBaHBCLEdBQUE0b0IsR0FBQSxTQUFBbkgsR0FDQSxNQUFBdVcsR0FBQTV4QixFQUFBcWIsT0FNQXFXLEVBQUE5OUIsUUFBQSxXQUNBLElBQUEsR0FBQVosR0FBQSxFQUFBZ0QsRUFBQTA3QixFQUFBOTlCLE9BQUFvQyxFQUFBaEQsSUFBQUEsRUFDQTArQixFQUFBMStCLE1BbHBEQSxHQUFBazBCLElBQUEsU0FBQTl0QixFQUFBbTVCLEdBQ0EsR0FBQUEsRUFBQSxDQUNBLEdBQ0F2L0IsR0FBQXNnQixFQUFBM2UsRUFEQU8sRUFBQWIsT0FBQWEsS0FBQXE5QixFQUdBLEtBQUF2L0IsRUFBQSxFQUFBc2dCLEVBQUFwZSxFQUFBdEIsT0FBQTBmLEVBQUF0Z0IsRUFBQUEsSUFDQTJCLEVBQUFPLEVBQUFsQyxHQUNBeVMsS0FBQTlRLEdBQUE0OUIsRUFBQTU5QixPQUdBOFEsTUFBQXNpQixRQUdBdGlCLE1BQUE0aEIsVUFBQWp1QixFQUdBOHRCLElBQUF6TCxXQWdCQStXLFdBQUF2SyxHQWNBd0ssVUFBQSxTQUFBQyxHQUNBQSxHQUFBQSxFQUFBOStCLE9BQUEsR0FDQW1ZLEVBQUFnTSxTQUFBdFMsS0FBQTRoQixVQUFBcUwsSUFlQUMsYUFBQSxTQUFBRCxHQUNBQSxHQUFBQSxFQUFBOStCLE9BQUEsR0FDQW1ZLEVBQUFpTSxZQUFBdlMsS0FBQTRoQixVQUFBcUwsSUFnQkE1QixhQUFBLFNBQUE4QixFQUFBekQsR0FDQSxHQUFBMEQsR0FBQUMsR0FBQUYsRUFBQXpELEVBQ0EwRCxJQUFBQSxFQUFBai9CLFFBQ0FtWSxFQUFBZ00sU0FBQXRTLEtBQUE0aEIsVUFBQXdMLEVBR0EsSUFBQUUsR0FBQUQsR0FBQTNELEVBQUF5RCxFQUNBRyxJQUFBQSxFQUFBbi9CLFFBQ0FtWSxFQUFBaU0sWUFBQXZTLEtBQUE0aEIsVUFBQTBMLElBYUF6RSxLQUFBLFNBQUEzNUIsRUFBQVcsRUFBQTA5QixFQUFBblEsR0FLQSxHQUlBbnNCLEdBSkFrQyxFQUFBNk0sS0FBQTRoQixVQUFBLEdBQ0E0TCxFQUFBaGQsR0FBQXJkLEVBQUFqRSxHQUNBdStCLEVBQUE3YyxHQUFBMWhCLEdBQ0F3K0IsRUFBQXgrQixDQXlCQSxJQXRCQXMrQixHQUNBeHRCLEtBQUE0aEIsVUFBQXh1QixLQUFBbEUsRUFBQVcsR0FDQXV0QixFQUFBb1EsR0FDQUMsSUFDQXp0QixLQUFBeXRCLEdBQUE1OUIsRUFDQTY5QixFQUFBRCxHQUdBenRCLEtBQUE5USxHQUFBVyxFQUdBdXRCLEVBQ0FwZCxLQUFBc2lCLE1BQUFwekIsR0FBQWt1QixHQUVBQSxFQUFBcGQsS0FBQXNpQixNQUFBcHpCLEdBQ0FrdUIsSUFDQXBkLEtBQUFzaUIsTUFBQXB6QixHQUFBa3VCLEVBQUE3aEIsR0FBQXJNLEVBQUEsT0FJQStCLEVBQUF5QyxFQUFBc00sS0FBQTRoQixXQUVBLE1BQUEzd0IsR0FBQSxTQUFBL0IsR0FDQSxRQUFBK0IsR0FBQSxRQUFBL0IsRUFFQThRLEtBQUE5USxHQUFBVyxFQUFBOFEsRUFBQTlRLEVBQUEsUUFBQVgsT0FDQSxJQUFBLFFBQUErQixHQUFBLFdBQUEvQixFQUFBLENBZUEsSUFBQSxHQWJBaWxCLEdBQUEsR0FHQXdaLEVBQUF2Z0IsR0FBQXZkLEdBRUErOUIsRUFBQSxzQ0FDQTNvQixFQUFBLEtBQUEvUixLQUFBeTZCLEdBQUFDLEVBQUEsTUFHQUMsRUFBQUYsRUFBQWw2QixNQUFBd1IsR0FHQTZvQixFQUFBMUYsS0FBQTJGLE1BQUFGLEVBQUExL0IsT0FBQSxHQUNBWixFQUFBLEVBQUF1Z0MsRUFBQXZnQyxFQUFBQSxJQUFBLENBQ0EsR0FBQXlnQyxHQUFBLEVBQUF6Z0MsQ0FFQTRtQixJQUFBeFQsRUFBQXlNLEdBQUF5Z0IsRUFBQUcsS0FBQSxHQUVBN1osR0FBQSxJQUFBL0csR0FBQXlnQixFQUFBRyxFQUFBLElBSUEsR0FBQUMsR0FBQTdnQixHQUFBeWdCLEVBQUEsRUFBQXRnQyxJQUFBa0csTUFBQSxLQUdBMGdCLElBQUF4VCxFQUFBeU0sR0FBQTZnQixFQUFBLEtBQUEsR0FHQSxJQUFBQSxFQUFBOS9CLFNBQ0FnbUIsR0FBQSxJQUFBL0csR0FBQTZnQixFQUFBLEtBRUFqdUIsS0FBQTlRLEdBQUFXLEVBQUFza0IsRUFHQW9aLEtBQUEsSUFDQSxPQUFBMTlCLEdBQUF1QyxFQUFBdkMsR0FDQW1RLEtBQUE0aEIsVUFBQXNNLFdBQUE5USxHQUVBcGQsS0FBQTRoQixVQUFBdnVCLEtBQUErcEIsRUFBQXZ0QixHQUtBLElBQUFtN0IsR0FBQWhyQixLQUFBZ3JCLFdBQ0FBLElBQUFqOEIsRUFBQWk4QixFQUFBMEMsR0FBQSxTQUFBMzNCLEdBQ0EsSUFDQUEsRUFBQWxHLEdBQ0EsTUFBQThILEdBQ0EyUCxFQUFBM1AsT0F3QkEyMEIsU0FBQSxTQUFBcDlCLEVBQUE2RyxHQUNBLEdBQUF3ckIsR0FBQXZoQixLQUNBZ3JCLEVBQUF6SixFQUFBeUosY0FBQXpKLEVBQUF5SixZQUFBMTFCLE1BQ0E2NEIsRUFBQW5ELEVBQUE5N0IsS0FBQTg3QixFQUFBOTdCLE1BVUEsT0FSQWkvQixHQUFBOTVCLEtBQUEwQixHQUNBaVQsRUFBQXhXLFdBQUEsV0FDQTI3QixFQUFBakQsVUFBQTNKLEVBQUFueUIsZUFBQUYsSUFBQWtELEVBQUFtdkIsRUFBQXJ5QixLQUVBNkcsRUFBQXdyQixFQUFBcnlCLE1BSUEsV0FDQTJFLEVBQUFzNkIsRUFBQXA0QixLQWdCQSxJQUFBcTRCLElBQUF4bUIsRUFBQXdtQixjQUNBQyxHQUFBem1CLEVBQUF5bUIsWUFDQTFHLEdBQUEsTUFBQXlHLElBQUEsTUFBQUMsR0FDQXQ4QixFQUNBLFNBQUFsRSxHQUNBLE1BQUFBLEdBQUFDLFFBQUEsUUFBQXNnQyxJQUFBdGdDLFFBQUEsTUFBQXVnQyxLQUVBckwsR0FBQSxlQUNBRyxHQUFBLGFBMkJBLE9BekJBM29CLEdBQUErdkIsaUJBQUFwd0IsRUFBQSxTQUFBMmtCLEVBQUF3UCxHQUNBLEdBQUF6UixHQUFBaUMsRUFBQXBrQixLQUFBLGVBRUFqTSxJQUFBNi9CLEdBQ0F6UixFQUFBQSxFQUFBdG5CLE9BQUErNEIsR0FFQXpSLEVBQUF4b0IsS0FBQWk2QixHQUdBeFAsRUFBQXBrQixLQUFBLFdBQUFtaUIsSUFDQS9xQixFQUVBMEksRUFBQTh2QixrQkFBQW53QixFQUFBLFNBQUEya0IsR0FDQUQsRUFBQUMsRUFBQSxlQUNBaHRCLEVBRUEwSSxFQUFBOGxCLGVBQUFubUIsRUFBQSxTQUFBMmtCLEVBQUF2a0IsRUFBQWcwQixFQUFBQyxHQUNBLEdBQUF4SixHQUFBdUosRUFBQUMsRUFBQSwwQkFBQSxnQkFBQSxRQUNBMVAsR0FBQXBrQixLQUFBc3FCLEVBQUF6cUIsSUFDQXpJLEVBRUEwSSxFQUFBZ2xCLGdCQUFBcmxCLEVBQUEsU0FBQTJrQixFQUFBeVAsR0FDQTFQLEVBQUFDLEVBQUF5UCxFQUFBLG1CQUFBLGFBQ0F6OEIsRUFFQTBJLElBdzRDQSxRQUFBZ29CLElBQUFqcEIsR0FDQSxNQUFBeVIsSUFBQXpSLEVBQUF6TCxRQUFBbTFCLEdBQUEsS0ErREEsUUFBQW9LLElBQUFvQixFQUFBQyxHQUNBLEdBQUFDLEdBQUEsR0FDQUMsRUFBQUgsRUFBQWg3QixNQUFBLE9BQ0FvN0IsRUFBQUgsRUFBQWo3QixNQUFBLE1BRUFxN0IsR0FDQSxJQUFBLEdBQUF2aEMsR0FBQSxFQUFBQSxFQUFBcWhDLEVBQUF6Z0MsT0FBQVosSUFBQSxDQUVBLElBQUEsR0FEQXdoQyxHQUFBSCxFQUFBcmhDLEdBQ0FrRCxFQUFBLEVBQUFBLEVBQUFvK0IsRUFBQTFnQyxPQUFBc0MsSUFDQSxHQUFBcytCLEdBQUFGLEVBQUFwK0IsR0FBQSxRQUFBcStCLEVBRUFILEtBQUFBLEVBQUF4Z0MsT0FBQSxFQUFBLElBQUEsSUFBQTRnQyxFQUVBLE1BQUFKLEdBR0EsUUFBQS9HLElBQUFvSCxHQUNBQSxFQUFBcmdDLEdBQUFxZ0MsRUFDQSxJQUFBemhDLEdBQUF5aEMsRUFBQTdnQyxNQUVBLElBQUEsR0FBQVosRUFDQSxNQUFBeWhDLEVBR0EsTUFBQXpoQyxLQUFBLENBQ0EsR0FBQTRGLEdBQUE2N0IsRUFBQXpoQyxFQUNBNEYsR0FBQTRFLFdBQUEwckIsSUFDQXp2QixHQUFBM0UsS0FBQTIvQixFQUFBemhDLEVBQUEsR0FHQSxNQUFBeWhDLEdBT0EsUUFBQXhSLElBQUFsaEIsRUFBQTJ5QixHQUNBLEdBQUFBLEdBQUF2Z0MsRUFBQXVnQyxHQUFBLE1BQUFBLEVBQ0EsSUFBQXZnQyxFQUFBNE4sR0FBQSxDQUNBLEdBQUF2TyxHQUFBbWhDLEdBQUEzaUIsS0FBQWpRLEVBQ0EsSUFBQXZPLEVBQUEsTUFBQUEsR0FBQSxJQWVBLFFBQUFvWixNQUNBLEdBQUErYSxNQUNBaU4sR0FBQSxDQVVBbnZCLE1BQUFvdkIsU0FBQSxTQUFBNzFCLEVBQUE1RSxHQUNBMkksR0FBQS9ELEVBQUEsY0FDQS9JLEVBQUErSSxHQUNBbEksRUFBQTZ3QixFQUFBM29CLEdBRUEyb0IsRUFBQTNvQixHQUFBNUUsR0FTQXFMLEtBQUFxdkIsYUFBQSxXQUNBRixHQUFBLEdBSUFudkIsS0FBQW1TLE1BQUEsWUFBQSxVQUFBLFNBQUFvQyxFQUFBbkssR0F5R0EsUUFBQWtsQixHQUFBMVosRUFBQTBRLEVBQUF2USxFQUFBeGMsR0FDQSxJQUFBcWMsSUFBQXBsQixFQUFBb2xCLEVBQUF3UCxRQUNBLEtBQUFsNEIsR0FBQSxlQUFBLFFBQ0EsbUZBQ0FxTSxFQUFBK3NCLEVBR0ExUSxHQUFBd1AsT0FBQWtCLEdBQUF2USxFQW5GQSxNQUFBLFVBQUF3WixFQUFBM1osRUFBQTRaLEVBQUFQLEdBUUEsR0FBQWxaLEdBQUFob0IsRUFBQTRHLEVBQUEyeEIsQ0FNQSxJQUxBa0osRUFBQUEsS0FBQSxFQUNBUCxHQUFBdmdDLEVBQUF1Z0MsS0FDQTNJLEVBQUEySSxHQUdBdmdDLEVBQUE2Z0MsR0FBQSxDQUVBLEdBREF4aEMsRUFBQXdoQyxFQUFBeGhDLE1BQUFtaEMsS0FDQW5oQyxFQUNBLEtBQUEwaEMsSUFBQSxVQUNBLHVGQUNBRixFQUVBNTZCLEdBQUE1RyxFQUFBLEdBQ0F1NEIsRUFBQUEsR0FBQXY0QixFQUFBLEdBQ0F3aEMsRUFBQXJOLEVBQUE5eUIsZUFBQXVGLEdBQ0F1dEIsRUFBQXZ0QixHQUNBNEksR0FBQXFZLEVBQUF3UCxPQUFBendCLEdBQUEsS0FDQXc2QixFQUFBNXhCLEdBQUE2TSxFQUFBelYsR0FBQSxHQUFBMUgsR0FFQW1RLEdBQUFteUIsRUFBQTU2QixHQUFBLEdBR0EsR0FBQTY2QixFQUFBLENBV0EsR0FBQUUsSUFBQWpoQyxHQUFBOGdDLEdBQ0FBLEVBQUFBLEVBQUFwaEMsT0FBQSxHQUFBb2hDLEdBQUF2WixTQUNBRCxHQUFBbm5CLE9BQUFpRCxPQUFBNjlCLEdBQUEsTUFFQXBKLEdBQ0FnSixFQUFBMVosRUFBQTBRLEVBQUF2USxFQUFBcGhCLEdBQUE0NkIsRUFBQWgyQixLQUdBLElBQUF3YSxFQUNBLE9BQUFBLEdBQUExaUIsRUFBQSxXQUNBLEdBQUE4aUIsR0FBQUksRUFBQWphLE9BQUFpMUIsRUFBQXhaLEVBQUFILEVBQUFqaEIsRUFRQSxPQVBBd2YsS0FBQTRCLElBQUF2bEIsRUFBQTJqQixJQUFBaGxCLEVBQUFnbEIsTUFDQTRCLEVBQUE1QixFQUNBbVMsR0FFQWdKLEVBQUExWixFQUFBMFEsRUFBQXZRLEVBQUFwaEIsR0FBQTQ2QixFQUFBaDJCLE9BR0F3YyxJQUVBQSxTQUFBQSxFQUNBdVEsV0FBQUEsSUFVQSxNQU5BdlEsR0FBQXhCLEVBQUFSLFlBQUF3YixFQUFBM1osRUFBQWpoQixHQUVBMnhCLEdBQ0FnSixFQUFBMVosRUFBQTBRLEVBQUF2USxFQUFBcGhCLEdBQUE0NkIsRUFBQWgyQixNQUdBd2MsS0F3Q0EsUUFBQTFPLE1BQ0FySCxLQUFBbVMsTUFBQSxVQUFBLFNBQUFwbEIsR0FDQSxNQUFBNEIsSUFBQTVCLEVBQUFDLFlBNENBLFFBQUF1YSxNQUNBdkgsS0FBQW1TLE1BQUEsT0FBQSxTQUFBdkosR0FDQSxNQUFBLFVBQUErbUIsRUFBQUMsR0FDQWhuQixFQUFBNFAsTUFBQXZpQixNQUFBMlMsRUFBQWxiLGNBMkNBLFFBQUFtaUMsSUFBQUMsR0FDQSxNQUFBdC9CLEdBQUFzL0IsR0FDQWwvQixFQUFBay9CLEdBQUFBLEVBQUFDLGNBQUEzNUIsRUFBQTA1QixHQUVBQSxFQUlBLFFBQUEzbkIsTUFpQkFuSSxLQUFBbVMsS0FBQSxXQUNBLE1BQUEsVUFBQTZkLEdBQ0EsSUFBQUEsRUFBQSxNQUFBLEVBQ0EsSUFBQXgzQixLQVlBLE9BWEFoSixHQUFBd2dDLEVBQUEsU0FBQW5nQyxFQUFBWCxHQUNBLE9BQUFXLEdBQUF1QyxFQUFBdkMsS0FDQXBCLEdBQUFvQixHQUNBZCxFQUFBYyxFQUFBLFNBQUFpZ0MsRUFBQWhFLEdBQ0F0ekIsRUFBQW5FLEtBQUFxRSxHQUFBeEosR0FBQSxJQUFBd0osR0FBQW0zQixHQUFBQyxPQUdBdDNCLEVBQUFuRSxLQUFBcUUsR0FBQXhKLEdBQUEsSUFBQXdKLEdBQUFtM0IsR0FBQWhnQyxRQUlBMkksRUFBQUcsS0FBQSxPQUtBLFFBQUEwUCxNQTRDQXJJLEtBQUFtUyxLQUFBLFdBQ0EsTUFBQSxVQUFBNmQsR0FNQSxRQUFBQyxHQUFBQyxFQUFBNTJCLEVBQUE2MkIsR0FDQSxPQUFBRCxHQUFBOTlCLEVBQUE4OUIsS0FDQXpoQyxHQUFBeWhDLEdBQ0FuaEMsRUFBQW1oQyxFQUFBLFNBQUFyZ0MsRUFBQTdCLEdBQ0FpaUMsRUFBQXBnQyxFQUFBeUosRUFBQSxLQUFBOUksRUFBQVgsR0FBQTdCLEVBQUEsSUFBQSxPQUVBd0MsRUFBQTAvQixLQUFBdC9CLEVBQUFzL0IsR0FDQTFnQyxFQUFBMGdDLEVBQUEsU0FBQXJnQyxFQUFBWCxHQUNBK2dDLEVBQUFwZ0MsRUFBQXlKLEdBQ0E2MkIsRUFBQSxHQUFBLEtBQ0FqaEMsR0FDQWloQyxFQUFBLEdBQUEsUUFHQTMzQixFQUFBbkUsS0FBQXFFLEdBQUFZLEdBQUEsSUFBQVosR0FBQW0zQixHQUFBSyxNQW5CQSxJQUFBRixFQUFBLE1BQUEsRUFDQSxJQUFBeDNCLEtBRUEsT0FEQXkzQixHQUFBRCxFQUFBLElBQUEsR0FDQXgzQixFQUFBRyxLQUFBLE9BdUJBLFFBQUF5M0IsSUFBQTExQixFQUFBMjFCLEdBQ0EsR0FBQTNoQyxFQUFBZ00sR0FBQSxDQUVBLEdBQUE0MUIsR0FBQTUxQixFQUFBNU0sUUFBQXlpQyxHQUFBLElBQUFuakIsTUFFQSxJQUFBa2pCLEVBQUEsQ0FDQSxHQUFBRSxHQUFBSCxFQUFBLGlCQUNBRyxHQUFBLElBQUFBLEVBQUF6OEIsUUFBQTA4QixLQUFBQyxHQUFBSixNQUNBNTFCLEVBQUFsRSxFQUFBODVCLEtBS0EsTUFBQTUxQixHQUdBLFFBQUFnMkIsSUFBQWwvQixHQUNBLEdBQUFtL0IsR0FBQW4vQixFQUFBekQsTUFBQTZpQyxHQUNBLE9BQUFELElBQUFFLEdBQUFGLEVBQUEsSUFBQXo5QixLQUFBMUIsR0FTQSxRQUFBcy9CLElBQUFULEdBR0EsUUFBQVUsR0FBQTdoQyxFQUFBaUgsR0FDQWpILElBQ0ErZCxFQUFBL2QsR0FBQStkLEVBQUEvZCxHQUFBK2QsRUFBQS9kLEdBQUEsS0FBQWlILEVBQUFBLEdBSkEsR0FBQTVJLEdBQUEwZixFQUFBM1gsSUFtQkEsT0FYQTVHLEdBQUEyaEMsR0FDQXRoQyxFQUFBc2hDLEVBQUE1OEIsTUFBQSxNQUFBLFNBQUF1OUIsR0FDQXpqQyxFQUFBeWpDLEVBQUFqOUIsUUFBQSxLQUNBZzlCLEVBQUFuOUIsR0FBQXdaLEdBQUE0akIsRUFBQXJZLE9BQUEsRUFBQXByQixLQUFBNmYsR0FBQTRqQixFQUFBclksT0FBQXByQixFQUFBLE9BRUFpRCxFQUFBNi9CLElBQ0F0aEMsRUFBQXNoQyxFQUFBLFNBQUFZLEVBQUFDLEdBQ0FILEVBQUFuOUIsR0FBQXM5QixHQUFBOWpCLEdBQUE2akIsTUFJQWhrQixFQWdCQSxRQUFBa2tCLElBQUFkLEdBQ0EsR0FBQWUsRUFFQSxPQUFBLFVBQUE3M0IsR0FHQSxHQUZBNjNCLElBQUFBLEVBQUFOLEdBQUFULElBRUE5MkIsRUFBQSxDQUNBLEdBQUExSixHQUFBdWhDLEVBQUF4OUIsR0FBQTJGLEdBSUEsT0FIQSxVQUFBMUosSUFDQUEsRUFBQSxNQUVBQSxFQUdBLE1BQUF1aEMsSUFnQkEsUUFBQUMsSUFBQTMyQixFQUFBMjFCLEVBQUFpQixFQUFBQyxHQUNBLE1BQUFwaUMsR0FBQW9pQyxHQUNBQSxFQUFBNzJCLEVBQUEyMUIsRUFBQWlCLElBR0F2aUMsRUFBQXdpQyxFQUFBLFNBQUF4N0IsR0FDQTJFLEVBQUEzRSxFQUFBMkUsRUFBQTIxQixFQUFBaUIsS0FHQTUyQixHQUlBLFFBQUE4MkIsSUFBQUYsR0FDQSxNQUFBQSxJQUFBLEtBQUEsSUFBQUEsRUFVQSxRQUFBcnBCLE1Ba0NBLEdBQUF3cEIsR0FBQXp4QixLQUFBeXhCLFVBRUFDLG1CQUFBdEIsSUFHQXVCLGtCQUFBLFNBQUFDLEdBQ0EsT0FBQXBoQyxFQUFBb2hDLElBQUFsL0IsRUFBQWsvQixJQUFBaC9CLEVBQUFnL0IsSUFBQWovQixFQUFBaS9CLEdBQUFBLEVBQUF4N0IsRUFBQXc3QixLQUlBdkIsU0FDQXdCLFFBQ0FDLE9BQUEscUNBRUFyTixLQUFBM3ZCLEVBQUFpOUIsSUFDQWxmLElBQUEvZCxFQUFBaTlCLElBQ0FDLE1BQUFsOUIsRUFBQWk5QixLQUdBRSxlQUFBLGFBQ0FDLGVBQUEsZUFFQUMsZ0JBQUEsd0JBR0FDLEdBQUEsQ0FvQkFweUIsTUFBQW95QixjQUFBLFNBQUF2aUMsR0FDQSxNQUFBd0MsR0FBQXhDLElBQ0F1aUMsSUFBQXZpQyxFQUNBbVEsTUFFQW95QixFQUdBLElBQUFDLElBQUEsQ0FnQkFyeUIsTUFBQXN5QiwyQkFBQSxTQUFBemlDLEdBQ0EsTUFBQXdDLEdBQUF4QyxJQUNBd2lDLElBQUF4aUMsRUFDQW1RLE1BRUFxeUIsRUFnQkEsSUFBQUUsR0FBQXZ5QixLQUFBd3lCLGVBRUF4eUIsTUFBQW1TLE1BQUEsZUFBQSxpQkFBQSxnQkFBQSxhQUFBLEtBQUEsWUFDQSxTQUFBN0osRUFBQXNDLEVBQUE1RCxFQUFBZ0MsRUFBQUUsRUFBQXFMLEdBd2hCQSxRQUFBdk0sR0FBQXlxQixHQW9GQSxRQUFBZixHQUFBZ0IsR0FFQSxHQUFBQyxHQUFBdGhDLEtBQUFxaEMsRUFHQSxPQUZBQyxHQUFBajRCLEtBQUEyMkIsR0FBQXFCLEVBQUFoNEIsS0FBQWc0QixFQUFBckMsUUFBQXFDLEVBQUFwQixPQUNBajRCLEVBQUFxNEIsbUJBQ0FGLEdBQUFrQixFQUFBcEIsUUFDQXFCLEVBQ0F6cEIsRUFBQTBwQixPQUFBRCxHQUdBLFFBQUFFLEdBQUF4QyxFQUFBaDNCLEdBQ0EsR0FBQXk1QixHQUFBQyxJQWFBLE9BWEFoa0MsR0FBQXNoQyxFQUFBLFNBQUEyQyxFQUFBQyxHQUNBOWpDLEVBQUE2akMsSUFDQUYsRUFBQUUsRUFBQTM1QixHQUNBLE1BQUF5NUIsSUFDQUMsRUFBQUUsR0FBQUgsSUFHQUMsRUFBQUUsR0FBQUQsSUFJQUQsRUFHQSxRQUFBRyxHQUFBNzVCLEdBQ0EsR0FFQTg1QixHQUFBQyxFQUFBQyxFQUZBQyxFQUFBN0IsRUFBQXBCLFFBQ0FrRCxFQUFBbGlDLEtBQUFnSSxFQUFBZzNCLFFBR0FpRCxHQUFBamlDLEtBQUFpaUMsRUFBQXpCLE9BQUF5QixFQUFBMS9CLEdBQUF5RixFQUFBcUYsU0FHQTgwQixHQUNBLElBQUFMLElBQUFHLEdBQUEsQ0FDQUYsRUFBQXgvQixHQUFBdS9CLEVBRUEsS0FBQUUsSUFBQUUsR0FDQSxHQUFBMy9CLEdBQUF5L0IsS0FBQUQsRUFDQSxRQUFBSSxFQUlBRCxHQUFBSixHQUFBRyxFQUFBSCxHQUlBLE1BQUFOLEdBQUFVLEVBQUF6K0IsRUFBQXVFLElBbklBLElBQUF3QixHQUFBckssU0FBQWlpQyxHQUNBLEtBQUF2bEMsR0FBQSxTQUFBLFNBQUEsK0RBQUF1bEMsRUFHQSxJQUFBcDVCLEdBQUFoSSxHQUNBcU4sT0FBQSxNQUNBaXpCLGlCQUFBRixFQUFBRSxpQkFDQUQsa0JBQUFELEVBQUFDLGtCQUNBUyxnQkFBQVYsRUFBQVUsaUJBQ0FNLEVBRUFwNUIsR0FBQWczQixRQUFBNkMsRUFBQVQsR0FDQXA1QixFQUFBcUYsT0FBQTJCLEdBQUFoSCxFQUFBcUYsUUFDQXJGLEVBQUE4NEIsZ0JBQUF6akMsRUFBQTJLLEVBQUE4NEIsaUJBQ0E1ZCxFQUFBalosSUFBQWpDLEVBQUE4NEIsaUJBQUE5NEIsRUFBQTg0QixlQUVBLElBQUFzQixHQUFBLFNBQUFwNkIsR0FDQSxHQUFBZzNCLEdBQUFoM0IsRUFBQWczQixRQUNBcUQsRUFBQXJDLEdBQUFoNEIsRUFBQXFCLEtBQUF5MkIsR0FBQWQsR0FBQXBqQyxFQUFBb00sRUFBQXM0QixpQkFnQkEsT0FiQXYvQixHQUFBc2hDLElBQ0Eza0MsRUFBQXNoQyxFQUFBLFNBQUF4Z0MsRUFBQW9qQyxHQUNBLGlCQUFBci9CLEdBQUFxL0IsVUFDQTVDLEdBQUE0QyxLQUtBN2dDLEVBQUFpSCxFQUFBczZCLG1CQUFBdmhDLEVBQUFxL0IsRUFBQWtDLG1CQUNBdDZCLEVBQUFzNkIsZ0JBQUFsQyxFQUFBa0MsaUJBSUFDLEVBQUF2NkIsRUFBQXE2QixHQUFBM2dDLEtBQUEyK0IsRUFBQUEsSUFHQW1DLEdBQUFKLEVBQUF4bUMsR0FDQTZtQyxFQUFBNXFCLEVBQUE2cUIsS0FBQTE2QixFQVlBLEtBVEF0SyxFQUFBaWxDLEVBQUEsU0FBQUMsSUFDQUEsRUFBQUMsU0FBQUQsRUFBQUUsZUFDQU4sRUFBQTU1QixRQUFBZzZCLEVBQUFDLFFBQUFELEVBQUFFLGVBRUFGLEVBQUF2QixVQUFBdUIsRUFBQUcsZ0JBQ0FQLEVBQUF4L0IsS0FBQTQvQixFQUFBdkIsU0FBQXVCLEVBQUFHLGlCQUlBUCxFQUFBMWxDLFFBQUEsQ0FDQSxHQUFBa21DLEdBQUFSLEVBQUFsZSxRQUNBMmUsRUFBQVQsRUFBQWxlLE9BRUFtZSxHQUFBQSxFQUFBL2dDLEtBQUFzaEMsRUFBQUMsR0EwQkEsTUF2QkFqQyxJQUNBeUIsRUFBQVMsUUFBQSxTQUFBeCtCLEdBTUEsTUFMQXFILElBQUFySCxFQUFBLE1BRUErOUIsRUFBQS9nQyxLQUFBLFNBQUEyL0IsR0FDQTM4QixFQUFBMjhCLEVBQUFoNEIsS0FBQWc0QixFQUFBcEIsT0FBQW9CLEVBQUFyQyxRQUFBaDNCLEtBRUF5NkIsR0FHQUEsRUFBQXRiLE1BQUEsU0FBQXppQixHQU1BLE1BTEFxSCxJQUFBckgsRUFBQSxNQUVBKzlCLEVBQUEvZ0MsS0FBQSxLQUFBLFNBQUEyL0IsR0FDQTM4QixFQUFBMjhCLEVBQUFoNEIsS0FBQWc0QixFQUFBcEIsT0FBQW9CLEVBQUFyQyxRQUFBaDNCLEtBRUF5NkIsS0FHQUEsRUFBQVMsUUFBQUMsR0FBQSxXQUNBVixFQUFBdGIsTUFBQWdjLEdBQUEsVUFHQVYsRUFtS0EsUUFBQVcsR0FBQTlrQixHQUNBNWdCLEVBQUFyQixVQUFBLFNBQUE2TCxHQUNBeU8sRUFBQXpPLEdBQUEsU0FBQW1mLEVBQUFyZixHQUNBLE1BQUEyTyxHQUFBM1csS0FBQWdJLE9BQ0FxRixPQUFBbkYsRUFDQW1mLElBQUFBLFFBT0EsUUFBQWdjLEdBQUFuN0IsR0FDQXhLLEVBQUFyQixVQUFBLFNBQUE2TCxHQUNBeU8sRUFBQXpPLEdBQUEsU0FBQW1mLEVBQUFoZSxFQUFBckIsR0FDQSxNQUFBMk8sR0FBQTNXLEtBQUFnSSxPQUNBcUYsT0FBQW5GLEVBQ0FtZixJQUFBQSxFQUNBaGUsS0FBQUEsUUFhQSxRQUFBazVCLEdBQUF2NkIsRUFBQXE2QixHQStEQSxRQUFBaUIsR0FBQXJELEVBQUFvQixFQUFBa0MsRUFBQUMsR0FVQSxRQUFBQyxLQUNBQyxFQUFBckMsRUFBQXBCLEVBQUFzRCxFQUFBQyxHQVZBdmYsSUFDQWtjLEdBQUFGLEdBQ0FoYyxFQUFBekMsSUFBQTZGLEdBQUE0WSxFQUFBb0IsRUFBQTVCLEdBQUE4RCxHQUFBQyxJQUdBdmYsRUFBQThHLE9BQUExRCxJQVFBMFosRUFDQXBwQixFQUFBZ3NCLFlBQUFGLElBRUFBLElBQ0E5ckIsRUFBQWlzQixTQUFBanNCLEVBQUF2TyxVQVFBLFFBQUFzNkIsR0FBQXJDLEVBQUFwQixFQUFBakIsRUFBQXdFLEdBRUF2RCxFQUFBQSxHQUFBLEdBQUFBLEVBQUEsR0FFQUUsR0FBQUYsR0FBQTRELEVBQUFDLFFBQUFELEVBQUF0QyxTQUNBbDRCLEtBQUFnNEIsRUFDQXBCLE9BQUFBLEVBQ0FqQixRQUFBYyxHQUFBZCxHQUNBaDNCLE9BQUFBLEVBQ0F3N0IsV0FBQUEsSUFJQSxRQUFBTyxHQUFBamhCLEdBQ0E0Z0IsRUFBQTVnQixFQUFBelosS0FBQXlaLEVBQUFtZCxPQUFBeDhCLEVBQUFxZixFQUFBa2MsV0FBQWxjLEVBQUEwZ0IsWUFHQSxRQUFBUSxLQUNBLEdBQUF4VSxHQUFBN1ksRUFBQXN0QixnQkFBQXZoQyxRQUFBc0YsRUFDQSxNQUFBd25CLEdBQUE3WSxFQUFBc3RCLGdCQUFBdGhDLE9BQUE2c0IsRUFBQSxHQTNHQSxHQUVBdkwsR0FDQWlnQixFQUhBTCxFQUFBaHNCLEVBQUF5UixRQUNBbVosRUFBQW9CLEVBQUFwQixRQUdBUCxFQUFBbDZCLEVBQUFnM0IsUUFDQTNYLEVBQUE4YyxFQUFBbjhCLEVBQUFxZixJQUFBcmYsRUFBQTg0QixnQkFBQTk0QixFQUFBMjJCLFFBb0NBLElBbENBaG9CLEVBQUFzdEIsZ0JBQUFqaEMsS0FBQWdGLEdBQ0F5NkIsRUFBQS9nQyxLQUFBc2lDLEVBQUFBLElBR0FoOEIsRUFBQWljLFFBQUFtYyxFQUFBbmMsT0FBQWpjLEVBQUFpYyxTQUFBLEdBQ0EsUUFBQWpjLEVBQUFxRixRQUFBLFVBQUFyRixFQUFBcUYsU0FDQTRXLEVBQUE5a0IsRUFBQTZJLEVBQUFpYyxPQUFBamMsRUFBQWljLE1BQ0E5a0IsRUFBQWloQyxFQUFBbmMsT0FBQW1jLEVBQUFuYyxNQUNBbWdCLEdBR0FuZ0IsSUFDQWlnQixFQUFBamdCLEVBQUFoYSxJQUFBb2QsR0FDQXJtQixFQUFBa2pDLEdBQ0F6aUMsRUFBQXlpQyxHQUVBQSxFQUFBeGlDLEtBQUFxaUMsRUFBQUEsR0FHQTNtQyxHQUFBOG1DLEdBQ0FSLEVBQUFRLEVBQUEsR0FBQUEsRUFBQSxHQUFBemdDLEVBQUF5Z0MsRUFBQSxJQUFBQSxFQUFBLElBRUFSLEVBQUFRLEVBQUEsT0FBQSxNQUtBamdCLEVBQUF6QyxJQUFBNkYsRUFBQW9iLElBT0ExaEMsRUFBQW1qQyxHQUFBLENBQ0EsR0FBQUcsR0FBQUMsR0FBQXQ4QixFQUFBcWYsS0FDQTlOLElBQUF2UixFQUFBNDRCLGdCQUFBUixFQUFBUSxnQkFDQWhsQyxDQUNBeW9DLEtBQ0FuQyxFQUFBbDZCLEVBQUE2NEIsZ0JBQUFULEVBQUFTLGdCQUFBd0QsR0FHQXB0QixFQUFBalAsRUFBQXFGLE9BQUFnYSxFQUFBZ2IsRUFBQWlCLEVBQUFwQixFQUFBbDZCLEVBQUF1OEIsUUFDQXY4QixFQUFBczZCLGdCQUFBdDZCLEVBQUF3OEIsY0FHQSxNQUFBL0IsR0EyREEsUUFBQTBCLEdBQUE5YyxFQUFBb2QsR0FJQSxNQUhBQSxHQUFBM25DLE9BQUEsSUFDQXVxQixJQUFBLElBQUFBLEVBQUEza0IsUUFBQSxLQUFBLElBQUEsS0FBQStoQyxHQUVBcGQsRUEvNUJBLEdBQUErYyxHQUFBenVCLEVBQUEsUUFLQXlxQixHQUFBVSxnQkFBQXpqQyxFQUFBK2lDLEVBQUFVLGlCQUNBNWQsRUFBQWpaLElBQUFtMkIsRUFBQVUsaUJBQUFWLEVBQUFVLGVBT0EsSUFBQTZCLEtBMnZCQSxPQXp2QkFqbEMsR0FBQXdqQyxFQUFBLFNBQUF3RCxHQUNBL0IsRUFBQS81QixRQUFBdkwsRUFBQXFuQyxHQUNBeGhCLEVBQUFqWixJQUFBeTZCLEdBQUF4aEIsRUFBQWphLE9BQUF5N0IsTUE4b0JBL3RCLEVBQUFzdEIsbUJBa0RBYixFQUFBLE1BQUEsU0FBQSxPQUFBLFNBd0NBQyxFQUFBLE9BQUEsTUFBQSxTQVlBMXNCLEVBQUF5cEIsU0FBQUEsRUFHQXpwQixJQWlMQSxRQUFBUyxNQUNBekksS0FBQW1TLEtBQUEsV0FDQSxNQUFBLFlBQ0EsTUFBQSxJQUFBcGxCLEdBQUFpcEMsaUJBc0JBLFFBQUF6dEIsTUFDQXZJLEtBQUFtUyxNQUFBLFdBQUEsVUFBQSxZQUFBLGNBQUEsU0FBQXJMLEVBQUFzRCxFQUFBaEQsRUFBQW9CLEdBQ0EsTUFBQXl0QixJQUFBbnZCLEVBQUEwQixFQUFBMUIsRUFBQTZULE1BQUF2USxFQUFBdlAsUUFBQXlGLFVBQUE4RyxFQUFBLE1BSUEsUUFBQTZ1QixJQUFBbnZCLEVBQUFvdkIsRUFBQUMsRUFBQTcxQixFQUFBODFCLEdBOEdBLFFBQUFDLEdBQUEzZCxFQUFBNGQsRUFBQTNCLEdBSUEsR0FBQXR6QixHQUFBKzBCLEVBQUEvcEIsY0FBQSxVQUFBME4sRUFBQSxJQTZCQSxPQTVCQTFZLEdBQUEwTSxLQUFBLGtCQUNBMU0sRUFBQTFRLElBQUErbkIsRUFDQXJYLEVBQUFrMUIsT0FBQSxFQUVBeGMsRUFBQSxTQUFBL0ksR0FDQTFDLEdBQUFqTixFQUFBLE9BQUEwWSxHQUNBekwsR0FBQWpOLEVBQUEsUUFBQTBZLEdBQ0FxYyxFQUFBSSxLQUFBeG1CLFlBQUEzTyxHQUNBQSxFQUFBLElBQ0EsSUFBQWl3QixHQUFBLEdBQ0FySCxFQUFBLFNBRUFqWixLQUNBLFNBQUFBLEVBQUFqRCxNQUFBek4sRUFBQWcyQixHQUFBRyxTQUNBemxCLEdBQUFqRCxLQUFBLFVBRUFrYyxFQUFBalosRUFBQWpELEtBQ0F1akIsRUFBQSxVQUFBdGdCLEVBQUFqRCxLQUFBLElBQUEsS0FHQTRtQixHQUNBQSxFQUFBckQsRUFBQXJILElBSUF5TSxHQUFBcjFCLEVBQUEsT0FBQTBZLEdBQ0EyYyxHQUFBcjFCLEVBQUEsUUFBQTBZLEdBQ0FxYyxFQUFBSSxLQUFBcHFCLFlBQUEvSyxHQUNBMFksRUE3SUEsTUFBQSxVQUFBcmIsRUFBQWdhLEVBQUErTCxFQUFBMUssRUFBQXNXLEVBQUF1RixFQUFBakMsRUFBQWtDLEdBMkZBLFFBQUFjLEtBQ0FDLEdBQUFBLElBQ0FDLEdBQUFBLEVBQUFDLFFBR0EsUUFBQUMsR0FBQWhkLEVBQUF1WCxFQUFBb0IsRUFBQWtDLEVBQUFDLEdBRUF4aUMsRUFBQXdvQixJQUNBc2IsRUFBQXJiLE9BQUFELEdBRUErYixFQUFBQyxFQUFBLEtBRUE5YyxFQUFBdVgsRUFBQW9CLEVBQUFrQyxFQUFBQyxHQUNBL3RCLEVBQUE4Uyw2QkFBQTluQixHQXBHQSxHQUhBZ1YsRUFBQStTLCtCQUNBbkIsRUFBQUEsR0FBQTVSLEVBQUE0UixNQUVBLFNBQUE5a0IsR0FBQThLLEdBQUEsQ0FDQSxHQUFBNDNCLEdBQUEsS0FBQWgyQixFQUFBQyxXQUFBcE8sU0FBQSxHQUNBbU8sR0FBQWcyQixHQUFBLFNBQUE1N0IsR0FDQTRGLEVBQUFnMkIsR0FBQTU3QixLQUFBQSxFQUNBNEYsRUFBQWcyQixHQUFBRyxRQUFBLEVBR0EsSUFBQUcsR0FBQVAsRUFBQTNkLEVBQUE1cUIsUUFBQSxnQkFBQSxxQkFBQXdvQyxHQUNBQSxFQUFBLFNBQUFoRixFQUFBckgsR0FDQThNLEVBQUFoZCxFQUFBdVgsRUFBQWh4QixFQUFBZzJCLEdBQUE1N0IsS0FBQSxHQUFBdXZCLEdBQ0EzcEIsRUFBQWcyQixHQUFBeGtDLFFBRUEsQ0FFQSxHQUFBK2tDLEdBQUFYLEVBQUF4M0IsRUFBQWdhLEVBRUFtZSxHQUFBRyxLQUFBdDRCLEVBQUFnYSxHQUFBLEdBQ0EzcEIsRUFBQXNoQyxFQUFBLFNBQUF4Z0MsRUFBQVgsR0FDQW1ELEVBQUF4QyxJQUNBZ25DLEVBQUFJLGlCQUFBL25DLEVBQUFXLEtBSUFnbkMsRUFBQUssT0FBQSxXQUNBLEdBQUFyQyxHQUFBZ0MsRUFBQWhDLFlBQUEsR0FJQW5DLEVBQUEsWUFBQW1FLEdBQUFBLEVBQUFuRSxTQUFBbUUsRUFBQU0sYUFHQTdGLEVBQUEsT0FBQXVGLEVBQUF2RixPQUFBLElBQUF1RixFQUFBdkYsTUFLQSxLQUFBQSxJQUNBQSxFQUFBb0IsRUFBQSxJQUFBLFFBQUEwRSxHQUFBMWUsR0FBQTJlLFNBQUEsSUFBQSxHQUdBTixFQUFBaGQsRUFDQXVYLEVBQ0FvQixFQUNBbUUsRUFBQVMsd0JBQ0F6QyxHQUdBLElBQUFWLEdBQUEsV0FHQTRDLEVBQUFoZCxFQUFBLEdBQUEsS0FBQSxLQUFBLElBVUEsSUFQQThjLEVBQUFVLFFBQUFwRCxFQUNBMEMsRUFBQVcsUUFBQXJELEVBRUFSLElBQ0FrRCxFQUFBbEQsaUJBQUEsR0FHQWtDLEVBQ0EsSUFDQWdCLEVBQUFoQixhQUFBQSxFQUNBLE1BQUFsK0IsR0FRQSxHQUFBLFNBQUFrK0IsRUFDQSxLQUFBbCtCLEdBS0FrL0IsRUFBQVksS0FBQXJsQyxFQUFBcXlCLEdBQUEsS0FBQUEsR0FHQSxHQUFBbVIsRUFBQSxFQUNBLEdBQUEvYSxHQUFBc2IsRUFBQVEsRUFBQWYsT0FDQTlpQyxHQUFBOGlDLElBQ0FBLEVBQUE3aUMsS0FBQTRqQyxJQXlHQSxRQUFBOXVCLE1BQ0EsR0FBQXVtQixHQUFBLEtBQ0FDLEVBQUEsSUFXQXJ1QixNQUFBb3VCLFlBQUEsU0FBQXYrQixHQUNBLE1BQUFBLElBQ0F1K0IsRUFBQXYrQixFQUNBbVEsTUFFQW91QixHQWFBcHVCLEtBQUFxdUIsVUFBQSxTQUFBeCtCLEdBQ0EsTUFBQUEsSUFDQXcrQixFQUFBeCtCLEVBQ0FtUSxNQUVBcXVCLEdBS0FydUIsS0FBQW1TLE1BQUEsU0FBQSxvQkFBQSxPQUFBLFNBQUFySixFQUFBeEIsRUFBQWdDLEdBTUEsUUFBQW91QixHQUFBQyxHQUNBLE1BQUEsU0FBQUEsRUFHQSxRQUFBQyxHQUFBM04sR0FDQSxNQUFBQSxHQUFBbjhCLFFBQUErcEMsRUFBQXpKLEdBQ0F0Z0MsUUFBQWdxQyxFQUFBekosR0FHQSxRQUFBOTNCLEdBQUExRyxHQUNBLEdBQUEsTUFBQUEsRUFDQSxNQUFBLEVBRUEsY0FBQUEsSUFDQSxJQUFBLFNBQ0EsS0FDQSxLQUFBLFNBQ0FBLEVBQUEsR0FBQUEsQ0FDQSxNQUNBLFNBQ0FBLEVBQUF1RyxFQUFBdkcsR0FHQSxNQUFBQSxHQWlHQSxRQUFBK1gsR0FBQXFpQixFQUFBOE4sRUFBQWhOLEVBQUFELEdBMEZBLFFBQUFrTixHQUFBbm9DLEdBQ0EsSUFFQSxNQURBQSxHQUFBb29DLEVBQUFwb0MsR0FDQWk3QixJQUFBejRCLEVBQUF4QyxHQUFBQSxFQUFBMEcsRUFBQTFHLEdBQ0EsTUFBQTZsQixHQUNBcE8sRUFBQTR3QixHQUFBQyxPQUFBbE8sRUFBQXZVLEtBOUZBb1YsSUFBQUEsQ0FXQSxLQVZBLEdBQUFsMUIsR0FDQXdpQyxFQUtBQyxFQUpBcnFDLEVBQUEsRUFDQXc4QixLQUNBOE4sS0FDQUMsRUFBQXRPLEVBQUE5N0IsT0FFQW9ILEtBQ0FpakMsS0FFQUQsRUFBQXZxQyxHQUFBLENBQ0EsR0FBQSxLQUFBNEgsRUFBQXEwQixFQUFBbDJCLFFBQUFxNkIsRUFBQXBnQyxLQUNBLEtBQUFvcUMsRUFBQW5PLEVBQUFsMkIsUUFBQXM2QixFQUFBejRCLEVBQUE2aUMsSUFVQSxDQUVBenFDLElBQUF1cUMsR0FDQWhqQyxFQUFBbEIsS0FBQXVqQyxFQUFBM04sRUFBQTN4QixVQUFBdEssSUFFQSxPQWRBQSxJQUFBNEgsR0FDQUwsRUFBQWxCLEtBQUF1akMsRUFBQTNOLEVBQUEzeEIsVUFBQXRLLEVBQUE0SCxLQUVBeWlDLEVBQUFwTyxFQUFBM3hCLFVBQUExQyxFQUFBNmlDLEVBQUFMLEdBQ0E1TixFQUFBbjJCLEtBQUFna0MsR0FDQUMsRUFBQWprQyxLQUFBeVUsRUFBQXV2QixFQUFBTCxJQUNBaHFDLEVBQUFvcUMsRUFBQU0sRUFDQUYsRUFBQW5rQyxLQUFBa0IsRUFBQXBILFFBQ0FvSCxFQUFBbEIsS0FBQSxJQW9CQSxHQUpBMDJCLEdBQUF4MUIsRUFBQXBILE9BQUEsR0FDQStwQyxHQUFBUyxjQUFBMU8sSUFHQThOLEdBQUF2TixFQUFBcjhCLE9BQUEsQ0FDQSxHQUFBeXFDLEdBQUEsU0FBQWpLLEdBQ0EsSUFBQSxHQUFBcGhDLEdBQUEsRUFBQWdELEVBQUFpNkIsRUFBQXI4QixPQUFBb0MsRUFBQWhELEVBQUFBLElBQUEsQ0FDQSxHQUFBdTlCLEdBQUExNEIsRUFBQXU4QixFQUFBcGhDLElBQUEsTUFDQWdJLEdBQUFpakMsRUFBQWpyQyxJQUFBb2hDLEVBQUFwaEMsR0FFQSxNQUFBZ0ksR0FBQW9ELEtBQUEsS0FHQXMvQixFQUFBLFNBQUFwb0MsR0FDQSxNQUFBazdCLEdBQ0F6aEIsRUFBQXV2QixXQUFBOU4sRUFBQWw3QixHQUNBeVosRUFBQXhZLFFBQUFqQixHQUdBLE9BQUF3QixHQUFBLFNBQUFwQyxHQUNBLEdBQUExQixHQUFBLEVBQ0FnRCxFQUFBaTZCLEVBQUFyOEIsT0FDQXdnQyxFQUFBLEdBQUFwWSxPQUFBaG1CLEVBRUEsS0FDQSxLQUFBQSxFQUFBaEQsRUFBQUEsSUFDQW9oQyxFQUFBcGhDLEdBQUErcUMsRUFBQS9xQyxHQUFBMEIsRUFHQSxPQUFBMnBDLEdBQUFqSyxHQUNBLE1BQUFqWixHQUNBcE8sRUFBQTR3QixHQUFBQyxPQUFBbE8sRUFBQXZVLE9BS0EyaUIsSUFBQXBPLEVBQ0FPLFlBQUFBLEVBQ0FzTyxnQkFBQSxTQUFBditCLEVBQUFpZixHQUNBLEdBQUEwUyxFQUNBLE9BQUEzeEIsR0FBQXcrQixZQUFBVCxFQUFBLFNBQUEzSixFQUFBcUssR0FDQSxHQUFBQyxHQUFBTCxFQUFBakssRUFDQXgvQixHQUFBcXFCLElBQ0FBLEVBQUFucUIsS0FBQTJRLEtBQUFpNUIsRUFBQXRLLElBQUFxSyxFQUFBOU0sRUFBQStNLEVBQUExK0IsR0FFQTJ4QixFQUFBK00sUUFqTkEsR0FBQVIsR0FBQXJLLEVBQUFqZ0MsT0FDQXVxQyxFQUFBckssRUFBQWxnQyxPQUNBMHBDLEVBQUEsR0FBQTdtQyxRQUFBbzlCLEVBQUF0Z0MsUUFBQSxLQUFBNHBDLEdBQUEsS0FDQUksRUFBQSxHQUFBOW1DLFFBQUFxOUIsRUFBQXZnQyxRQUFBLEtBQUE0cEMsR0FBQSxJQThQQSxPQXBCQTl2QixHQUFBd21CLFlBQUEsV0FDQSxNQUFBQSxJQWVBeG1CLEVBQUF5bUIsVUFBQSxXQUNBLE1BQUFBLElBR0F6bUIsSUFJQSxRQUFBRyxNQUNBL0gsS0FBQW1TLE1BQUEsYUFBQSxVQUFBLEtBQUEsTUFDQSxTQUFBbkosRUFBQW9CLEVBQUFsQixFQUFBRSxHQWlJQSxRQUFBOHZCLEdBQUFuakMsRUFBQTZrQixFQUFBdWUsRUFBQUMsR0FDQSxHQUFBQyxHQUFBM3JDLFVBQUFTLE9BQUEsRUFDQXdILEVBQUEwakMsRUFBQTNqQyxFQUFBaEksVUFBQSxNQUNBNHJDLEVBQUFsdkIsRUFBQWt2QixZQUNBQyxFQUFBbnZCLEVBQUFtdkIsY0FDQUMsRUFBQSxFQUNBQyxFQUFBcG5DLEVBQUErbUMsS0FBQUEsRUFDQWxFLEdBQUF1RSxFQUFBcndCLEVBQUFGLEdBQUF5UixRQUNBbVosRUFBQW9CLEVBQUFwQixPQXVCQSxPQXJCQXFGLEdBQUE5bUMsRUFBQThtQyxHQUFBQSxFQUFBLEVBRUFyRixFQUFBL2dDLEtBQUEsS0FBQSxLQUFBc21DLEVBQUEsV0FDQXRqQyxFQUFBRSxNQUFBLEtBQUFOLElBREFJLEdBSUErOUIsRUFBQTRGLGFBQUFKLEVBQUEsV0FDQXBFLEVBQUF5RSxPQUFBSCxLQUVBTCxFQUFBLEdBQUFLLEdBQUFMLElBQ0FqRSxFQUFBQyxRQUFBcUUsR0FDQUQsRUFBQXpGLEVBQUE0RixvQkFDQUUsR0FBQTlGLEVBQUE0RixlQUdBRCxHQUFBendCLEVBQUF2TyxVQUVBbWdCLEdBRUFnZixFQUFBOUYsRUFBQTRGLGNBQUF4RSxFQUVBcEIsRUEvSkEsR0FBQThGLEtBdUxBLE9BVkFWLEdBQUFwZSxPQUFBLFNBQUFnWixHQUNBLE1BQUFBLElBQUFBLEVBQUE0RixlQUFBRSxJQUNBQSxFQUFBOUYsRUFBQTRGLGNBQUE5RyxPQUFBLFlBQ0F4b0IsRUFBQW12QixjQUFBekYsRUFBQTRGLG9CQUNBRSxHQUFBOUYsRUFBQTRGLGVBQ0EsSUFFQSxHQUdBUixJQTBCQSxRQUFBVyxJQUFBcjhCLEdBSUEsSUFIQSxHQUFBczhCLEdBQUF0OEIsRUFBQS9KLE1BQUEsS0FDQWxHLEVBQUF1c0MsRUFBQTNyQyxPQUVBWixLQUNBdXNDLEVBQUF2c0MsR0FBQXFMLEdBQUFraEMsRUFBQXZzQyxHQUdBLE9BQUF1c0MsR0FBQW5oQyxLQUFBLEtBR0EsUUFBQW9oQyxJQUFBQyxFQUFBQyxHQUNBLEdBQUFDLEdBQUE5QyxHQUFBNEMsRUFFQUMsR0FBQUUsV0FBQUQsRUFBQTdDLFNBQ0E0QyxFQUFBRyxPQUFBRixFQUFBRyxTQUNBSixFQUFBSyxPQUFBL29DLEVBQUEyb0MsRUFBQUssT0FBQUMsR0FBQU4sRUFBQTdDLFdBQUEsS0FJQSxRQUFBb0QsSUFBQUMsRUFBQVQsR0FDQSxHQUFBVSxHQUFBLE1BQUFELEVBQUEzbEMsT0FBQSxFQUNBNGxDLEtBQ0FELEVBQUEsSUFBQUEsRUFFQSxJQUFBM3NDLEdBQUFxcEMsR0FBQXNELEVBQ0FULEdBQUFXLE9BQUExaUMsbUJBQUF5aUMsR0FBQSxNQUFBNXNDLEVBQUE4c0MsU0FBQTlsQyxPQUFBLEdBQ0FoSCxFQUFBOHNDLFNBQUF2aUMsVUFBQSxHQUFBdkssRUFBQThzQyxVQUNBWixFQUFBYSxTQUFBM2lDLEdBQUFwSyxFQUFBZ3RDLFFBQ0FkLEVBQUFlLE9BQUE5aUMsbUJBQUFuSyxFQUFBc3BCLE1BR0E0aUIsRUFBQVcsUUFBQSxLQUFBWCxFQUFBVyxPQUFBN2xDLE9BQUEsS0FDQWtsQyxFQUFBVyxPQUFBLElBQUFYLEVBQUFXLFFBWUEsUUFBQUssSUFBQUMsRUFBQUMsR0FDQSxNQUFBLEtBQUFBLEVBQUFwbkMsUUFBQW1uQyxHQUNBQyxFQUFBeGlCLE9BQUF1aUIsRUFBQS9zQyxRQURBLE9BTUEsUUFBQWlzQixJQUFBMUIsR0FDQSxHQUFBMXFCLEdBQUEwcUIsRUFBQTNrQixRQUFBLElBQ0EsT0FBQSxJQUFBL0YsRUFBQTBxQixFQUFBQSxFQUFBQyxPQUFBLEVBQUEzcUIsR0FHQSxRQUFBb3RDLElBQUExaUIsR0FDQSxNQUFBQSxHQUFBNXFCLFFBQUEsV0FBQSxNQUlBLFFBQUF1dEMsSUFBQTNpQixHQUNBLE1BQUFBLEdBQUFDLE9BQUEsRUFBQXlCLEdBQUExQixHQUFBNGlCLFlBQUEsS0FBQSxHQUlBLFFBQUFDLElBQUE3aUIsR0FDQSxNQUFBQSxHQUFBcGdCLFVBQUEsRUFBQW9nQixFQUFBM2tCLFFBQUEsSUFBQTJrQixFQUFBM2tCLFFBQUEsTUFBQSxJQWFBLFFBQUF5bkMsSUFBQUMsRUFBQUMsRUFBQUMsR0FDQTM3QixLQUFBNDdCLFNBQUEsRUFDQUQsRUFBQUEsR0FBQSxHQUNBNUIsR0FBQTBCLEVBQUF6N0IsTUFRQUEsS0FBQTY3QixRQUFBLFNBQUFuakIsR0FDQSxHQUFBb2pCLEdBQUFiLEdBQUFTLEVBQUFoakIsRUFDQSxLQUFBaHFCLEVBQUFvdEMsR0FDQSxLQUFBQyxJQUFBLFdBQUEsZ0RBQUFyakIsRUFDQWdqQixFQUdBakIsSUFBQXFCLEVBQUE5N0IsTUFFQUEsS0FBQTQ2QixTQUNBNTZCLEtBQUE0NkIsT0FBQSxLQUdBNTZCLEtBQUFnOEIsYUFPQWg4QixLQUFBZzhCLFVBQUEsV0FDQSxHQUFBakIsR0FBQXhpQyxHQUFBeUgsS0FBQTg2QixVQUNBempCLEVBQUFyWCxLQUFBZzdCLE9BQUEsSUFBQXBpQyxHQUFBb0gsS0FBQWc3QixRQUFBLEVBRUFoN0IsTUFBQWk4QixNQUFBcEMsR0FBQTc1QixLQUFBNDZCLFNBQUFHLEVBQUEsSUFBQUEsRUFBQSxJQUFBMWpCLEVBQ0FyWCxLQUFBazhCLFNBQUFSLEVBQUExN0IsS0FBQWk4QixNQUFBdGpCLE9BQUEsSUFHQTNZLEtBQUFtOEIsZUFBQSxTQUFBempCLEVBQUEwakIsR0FDQSxHQUFBQSxHQUFBLE1BQUFBLEVBQUEsR0FJQSxNQURBcDhCLE1BQUFxWCxLQUFBK2tCLEVBQUFudUMsTUFBQSxLQUNBLENBRUEsSUFBQW91QyxHQUFBQyxFQUNBQyxDQWlCQSxPQWZBbHFDLEdBQUFncUMsRUFBQXBCLEdBQUFRLEVBQUEvaUIsS0FDQTRqQixFQUFBRCxFQUVBRSxFQURBbHFDLEVBQUFncUMsRUFBQXBCLEdBQUFVLEVBQUFVLElBQ0FYLEdBQUFULEdBQUEsSUFBQW9CLElBQUFBLEdBRUFaLEVBQUFhLEdBRUFqcUMsRUFBQWdxQyxFQUFBcEIsR0FBQVMsRUFBQWhqQixJQUNBNmpCLEVBQUFiLEVBQUFXLEVBQ0FYLEdBQUFoakIsRUFBQSxNQUNBNmpCLEVBQUFiLEdBRUFhLEdBQ0F2OEIsS0FBQTY3QixRQUFBVSxLQUVBQSxHQWVBLFFBQUFDLElBQUFmLEVBQUFDLEVBQUFlLEdBRUExQyxHQUFBMEIsRUFBQXo3QixNQVFBQSxLQUFBNjdCLFFBQUEsU0FBQW5qQixHQThDQSxRQUFBZ2tCLEdBQUFsL0IsRUFBQWtiLEVBQUFpa0IsR0FLQSxHQUVBQyxHQUZBQyxFQUFBLGlCQVVBLE9BTEEsS0FBQW5rQixFQUFBM2tCLFFBQUE0b0MsS0FDQWprQixFQUFBQSxFQUFBNXFCLFFBQUE2dUMsRUFBQSxLQUlBRSxFQUFBdHdCLEtBQUFtTSxHQUNBbGIsR0FHQW8vQixFQUFBQyxFQUFBdHdCLEtBQUEvTyxHQUNBby9CLEVBQUFBLEVBQUEsR0FBQXAvQixHQWpFQSxHQUNBcy9CLEdBREFDLEVBQUE5QixHQUFBUSxFQUFBL2lCLElBQUF1aUIsR0FBQVMsRUFBQWhqQixFQUdBdG1CLEdBQUEycUMsSUFBQSxNQUFBQSxFQUFBaG9DLE9BQUEsR0FjQWlMLEtBQUE0N0IsUUFDQWtCLEVBQUFDLEdBRUFELEVBQUEsR0FDQTFxQyxFQUFBMnFDLEtBQ0F0QixFQUFBL2lCLEVBQ0ExWSxLQUFBbFMsYUFoQkFndkMsRUFBQTdCLEdBQUF3QixFQUFBTSxHQUNBM3FDLEVBQUEwcUMsS0FFQUEsRUFBQUMsSUFrQkF0QyxHQUFBcUMsRUFBQTk4QixNQUVBQSxLQUFBNDZCLE9BQUE4QixFQUFBMThCLEtBQUE0NkIsT0FBQWtDLEVBQUFyQixHQUVBejdCLEtBQUFnOEIsYUF5Q0FoOEIsS0FBQWc4QixVQUFBLFdBQ0EsR0FBQWpCLEdBQUF4aUMsR0FBQXlILEtBQUE4NkIsVUFDQXpqQixFQUFBclgsS0FBQWc3QixPQUFBLElBQUFwaUMsR0FBQW9ILEtBQUFnN0IsUUFBQSxFQUVBaDdCLE1BQUFpOEIsTUFBQXBDLEdBQUE3NUIsS0FBQTQ2QixTQUFBRyxFQUFBLElBQUFBLEVBQUEsSUFBQTFqQixFQUNBclgsS0FBQWs4QixTQUFBVCxHQUFBejdCLEtBQUFpOEIsTUFBQVEsRUFBQXo4QixLQUFBaThCLE1BQUEsS0FHQWo4QixLQUFBbThCLGVBQUEsU0FBQXpqQixFQUFBMGpCLEdBQ0EsTUFBQWhpQixJQUFBcWhCLElBQUFyaEIsR0FBQTFCLElBQ0ExWSxLQUFBNjdCLFFBQUFuakIsSUFDQSxJQUVBLEdBZUEsUUFBQXNrQixJQUFBdkIsRUFBQUMsRUFBQWUsR0FDQXo4QixLQUFBNDdCLFNBQUEsRUFDQVksR0FBQXZtQyxNQUFBK0osS0FBQXRTLFdBRUFzUyxLQUFBbThCLGVBQUEsU0FBQXpqQixFQUFBMGpCLEdBQ0EsR0FBQUEsR0FBQSxNQUFBQSxFQUFBLEdBSUEsTUFEQXA4QixNQUFBcVgsS0FBQStrQixFQUFBbnVDLE1BQUEsS0FDQSxDQUdBLElBQUFzdUMsR0FDQUYsQ0FZQSxPQVZBWixJQUFBcmhCLEdBQUExQixHQUNBNmpCLEVBQUE3akIsR0FDQTJqQixFQUFBcEIsR0FBQVMsRUFBQWhqQixJQUNBNmpCLEVBQUFkLEVBQUFnQixFQUFBSixFQUNBWCxJQUFBaGpCLEVBQUEsTUFDQTZqQixFQUFBYixHQUVBYSxHQUNBdjhCLEtBQUE2N0IsUUFBQVUsS0FFQUEsR0FHQXY4QixLQUFBZzhCLFVBQUEsV0FDQSxHQUFBakIsR0FBQXhpQyxHQUFBeUgsS0FBQTg2QixVQUNBempCLEVBQUFyWCxLQUFBZzdCLE9BQUEsSUFBQXBpQyxHQUFBb0gsS0FBQWc3QixRQUFBLEVBRUFoN0IsTUFBQWk4QixNQUFBcEMsR0FBQTc1QixLQUFBNDZCLFNBQUFHLEVBQUEsSUFBQUEsRUFBQSxJQUFBMWpCLEVBRUFyWCxLQUFBazhCLFNBQUFULEVBQUFnQixFQUFBejhCLEtBQUFpOEIsT0EwVUEsUUFBQWdCLElBQUFDLEdBQ0EsTUFBQSxZQUNBLE1BQUFsOUIsTUFBQWs5QixJQUtBLFFBQUFDLElBQUFELEVBQUFFLEdBQ0EsTUFBQSxVQUFBdnRDLEdBQ0EsTUFBQXVDLEdBQUF2QyxHQUNBbVEsS0FBQWs5QixJQUdBbDlCLEtBQUFrOUIsR0FBQUUsRUFBQXZ0QyxHQUNBbVEsS0FBQWc4QixZQUVBaDhCLE9BcUNBLFFBQUEySSxNQUNBLEdBQUE4ekIsR0FBQSxHQUNBWSxHQUNBemUsU0FBQSxFQUNBMGUsYUFBQSxFQUNBQyxjQUFBLEVBVUF2OUIsTUFBQXk4QixXQUFBLFNBQUFuakMsR0FDQSxNQUFBakgsR0FBQWlILElBQ0FtakMsRUFBQW5qQyxFQUNBMEcsTUFFQXk4QixHQXVCQXo4QixLQUFBcTlCLFVBQUEsU0FBQXBnQixHQUNBLE1BQUFwcUIsR0FBQW9xQixJQUNBb2dCLEVBQUF6ZSxRQUFBM0IsRUFDQWpkLE1BQ0F4UCxFQUFBeXNCLElBRUFwcUIsRUFBQW9xQixFQUFBMkIsV0FDQXllLEVBQUF6ZSxRQUFBM0IsRUFBQTJCLFNBR0EvckIsRUFBQW9xQixFQUFBcWdCLGVBQ0FELEVBQUFDLFlBQUFyZ0IsRUFBQXFnQixhQUdBenFDLEVBQUFvcUIsRUFBQXNnQixnQkFDQUYsRUFBQUUsYUFBQXRnQixFQUFBc2dCLGNBR0F2OUIsTUFFQXE5QixHQTJDQXI5QixLQUFBbVMsTUFBQSxhQUFBLFdBQUEsV0FBQSxlQUFBLFVBQ0EsU0FBQW5KLEVBQUFsQyxFQUFBNEMsRUFBQStXLEVBQUFyVyxHQTJCQSxRQUFBb3pCLEdBQUE5a0IsRUFBQTVxQixFQUFBb3JCLEdBQ0EsR0FBQXVrQixHQUFBLzBCLEVBQUFnUSxNQUNBZ2xCLEVBQUFoMUIsRUFBQWkxQixPQUNBLEtBQ0E3MkIsRUFBQTRSLElBQUFBLEVBQUE1cUIsRUFBQW9yQixHQUtBeFEsRUFBQWkxQixRQUFBNzJCLEVBQUFvUyxRQUNBLE1BQUF2aEIsR0FLQSxLQUhBK1EsR0FBQWdRLElBQUEra0IsR0FDQS8wQixFQUFBaTFCLFFBQUFELEVBRUEvbEMsR0FzSUEsUUFBQWltQyxHQUFBSCxFQUFBQyxHQUNBMTBCLEVBQUE2MEIsV0FBQSx5QkFBQW4xQixFQUFBbzFCLFNBQUFMLEVBQ0EvMEIsRUFBQWkxQixRQUFBRCxHQWpMQSxHQUFBaDFCLEdBQ0FxMUIsRUFHQXRDLEVBRkEvZ0IsRUFBQTVULEVBQUE0VCxXQUNBc2pCLEVBQUFsM0IsRUFBQTRSLEtBR0EsSUFBQTJrQixFQUFBemUsUUFBQSxDQUNBLElBQUFsRSxHQUFBMmlCLEVBQUFDLFlBQ0EsS0FBQXZCLElBQUEsU0FDQSwrREFFQU4sR0FBQUYsR0FBQXlDLElBQUF0akIsR0FBQSxLQUNBcWpCLEVBQUFyMEIsRUFBQXVQLFFBQUF1aUIsR0FBQXdCLE9BRUF2QixHQUFBcmhCLEdBQUE0akIsR0FDQUQsRUFBQXZCLEVBRUEsSUFBQWQsR0FBQUwsR0FBQUksRUFFQS95QixHQUFBLEdBQUFxMUIsR0FBQXRDLEVBQUFDLEVBQUEsSUFBQWUsR0FDQS96QixFQUFBeXpCLGVBQUE2QixFQUFBQSxHQUVBdDFCLEVBQUFpMUIsUUFBQTcyQixFQUFBb1MsT0FFQSxJQUFBK2tCLEdBQUEsMkJBcUJBeGQsR0FBQXRrQixHQUFBLFFBQUEsU0FBQTZVLEdBSUEsR0FBQXFzQixFQUFBRSxlQUFBdnNCLEVBQUFrdEIsVUFBQWx0QixFQUFBbXRCLFVBQUFudEIsRUFBQW90QixVQUFBLEdBQUFwdEIsRUFBQXF0QixPQUFBLEdBQUFydEIsRUFBQXN0QixPQUFBLENBS0EsSUFIQSxHQUFBaG5CLEdBQUEzb0IsR0FBQXFpQixFQUFBZSxRQUdBLE1BQUFyZSxFQUFBNGpCLEVBQUEsS0FFQSxHQUFBQSxFQUFBLEtBQUFtSixFQUFBLE1BQUFuSixFQUFBQSxFQUFBM2xCLFVBQUEsR0FBQSxNQUdBLElBQUE0c0MsR0FBQWpuQixFQUFBbGtCLEtBQUEsUUFHQWdwQyxFQUFBOWtCLEVBQUFqa0IsS0FBQSxTQUFBaWtCLEVBQUFqa0IsS0FBQSxhQUVBN0MsR0FBQSt0QyxJQUFBLCtCQUFBQSxFQUFBcHNDLGFBR0Fvc0MsRUFBQW5ILEdBQUFtSCxFQUFBamIsU0FBQXRKLE1BSUFpa0IsRUFBQS9xQyxLQUFBcXJDLEtBRUFBLEdBQUFqbkIsRUFBQWprQixLQUFBLFdBQUEyZCxFQUFBQyxzQkFDQXZJLEVBQUF5ekIsZUFBQW9DLEVBQUFuQyxLQUlBcHJCLEVBQUF3dEIsaUJBRUE5MUIsRUFBQW8xQixVQUFBaDNCLEVBQUE0UixRQUNBMVAsRUFBQXZPLFNBRUEyUCxFQUFBdlAsUUFBQSw2QkFBQSxPQVFBdWdDLEdBQUExeUIsRUFBQW8xQixXQUFBMUMsR0FBQTRDLElBQ0FsM0IsRUFBQTRSLElBQUFoUSxFQUFBbzFCLFVBQUEsRUFHQSxJQUFBVyxJQUFBLENBOEVBLE9BM0VBMzNCLEdBQUF3VCxZQUFBLFNBQUFva0IsRUFBQUMsR0FFQSxNQUFBdnNDLEdBQUE2b0MsR0FBQVMsRUFBQWdELFNBRUF0MEIsRUFBQWxQLFNBQUE4ZSxLQUFBMGtCLElBSUExMUIsRUFBQXhXLFdBQUEsV0FDQSxHQUVBMGUsR0FGQXVzQixFQUFBLzBCLEVBQUFvMUIsU0FDQUosRUFBQWgxQixFQUFBaTFCLE9BRUFlLEdBQUF0RCxHQUFBc0QsR0FDQWgyQixFQUFBbXpCLFFBQUE2QyxHQUNBaDJCLEVBQUFpMUIsUUFBQWdCLEVBRUF6dEIsRUFBQWxJLEVBQUE2MEIsV0FBQSx1QkFBQWEsRUFBQWpCLEVBQ0FrQixFQUFBakIsR0FBQXhzQixpQkFJQXhJLEVBQUFvMUIsV0FBQVksSUFFQXh0QixHQUNBeEksRUFBQW16QixRQUFBNEIsR0FDQS8wQixFQUFBaTFCLFFBQUFELEVBQ0FGLEVBQUFDLEdBQUEsRUFBQUMsS0FFQWUsR0FBQSxFQUNBYixFQUFBSCxFQUFBQyxZQUdBMTBCLEVBQUFpc0IsU0FBQWpzQixFQUFBNDFCLGNBSUE1MUIsRUFBQXZXLE9BQUEsV0FDQSxHQUFBZ3JDLEdBQUFyQyxHQUFBdDBCLEVBQUE0UixPQUNBZ21CLEVBQUF0RCxHQUFBMXlCLEVBQUFvMUIsVUFDQUosRUFBQTUyQixFQUFBb1MsUUFDQTJsQixFQUFBbjJCLEVBQUFvMkIsVUFDQUMsRUFBQXRCLElBQUFpQixHQUNBaDJCLEVBQUFrekIsU0FBQWx5QixFQUFBdVAsU0FBQXlrQixJQUFBaDFCLEVBQUFpMUIsU0FFQWMsR0FBQU0sS0FDQU4sR0FBQSxFQUVBejFCLEVBQUF4VyxXQUFBLFdBQ0EsR0FBQWtzQyxHQUFBaDJCLEVBQUFvMUIsU0FDQTVzQixFQUFBbEksRUFBQTYwQixXQUFBLHVCQUFBYSxFQUFBakIsRUFDQS8wQixFQUFBaTFCLFFBQUFELEdBQUF4c0IsZ0JBSUF4SSxHQUFBbzFCLFdBQUFZLElBRUF4dEIsR0FDQXhJLEVBQUFtekIsUUFBQTRCLEdBQ0EvMEIsRUFBQWkxQixRQUFBRCxJQUVBcUIsR0FDQXZCLEVBQUFrQixFQUFBRyxFQUNBbkIsSUFBQWgxQixFQUFBaTFCLFFBQUEsS0FBQWoxQixFQUFBaTFCLFNBRUFDLEVBQUFILEVBQUFDLFFBS0FoMUIsRUFBQW8yQixXQUFBLElBTUFwMkIsSUFxREEsUUFBQUcsTUFDQSxHQUFBbTJCLElBQUEsRUFDQWxwQyxFQUFBa0ssSUFTQUEsTUFBQWkvQixhQUFBLFNBQUFDLEdBQ0EsTUFBQTdzQyxHQUFBNnNDLElBQ0FGLEVBQUFFLEVBQ0FsL0IsTUFFQWcvQixHQUlBaC9CLEtBQUFtUyxNQUFBLFVBQUEsU0FBQS9ILEdBd0RBLFFBQUErMEIsR0FBQWppQyxHQVVBLE1BVEFBLGFBQUE3UCxTQUNBNlAsRUFBQWtZLE1BQ0FsWSxFQUFBQSxFQUFBdFAsU0FBQSxLQUFBc1AsRUFBQWtZLE1BQUFyaEIsUUFBQW1KLEVBQUF0UCxTQUNBLFVBQUFzUCxFQUFBdFAsUUFBQSxLQUFBc1AsRUFBQWtZLE1BQ0FsWSxFQUFBa1ksTUFDQWxZLEVBQUFraUMsWUFDQWxpQyxFQUFBQSxFQUFBdFAsUUFBQSxLQUFBc1AsRUFBQWtpQyxVQUFBLElBQUFsaUMsRUFBQTh6QixPQUdBOXpCLEVBR0EsUUFBQW1pQyxHQUFBdHhCLEdBQ0EsR0FBQXV4QixHQUFBbDFCLEVBQUFrMUIsWUFDQUMsRUFBQUQsRUFBQXZ4QixJQUFBdXhCLEVBQUFFLEtBQUExdEMsRUFDQTJ0QyxHQUFBLENBSUEsS0FDQUEsSUFBQUYsRUFBQXRwQyxNQUNBLE1BQUEwQixJQUVBLE1BQUE4bkMsR0FDQSxXQUNBLEdBQUE5cEMsS0FJQSxPQUhBNUcsR0FBQXJCLFVBQUEsU0FBQXdQLEdBQ0F2SCxFQUFBdEIsS0FBQThxQyxFQUFBamlDLE1BRUFxaUMsRUFBQXRwQyxNQUFBcXBDLEVBQUEzcEMsSUFNQSxTQUFBK3BDLEVBQUFDLEdBQ0FKLEVBQUFHLEVBQUEsTUFBQUMsRUFBQSxHQUFBQSxJQTVGQSxPQVFBSCxJQUFBSCxFQUFBLE9BU0E5aUIsS0FBQThpQixFQUFBLFFBU0FPLEtBQUFQLEVBQUEsUUFTQTdtQixNQUFBNm1CLEVBQUEsU0FTQUwsTUFBQSxXQUNBLEdBQUFqcEMsR0FBQXNwQyxFQUFBLFFBRUEsT0FBQSxZQUNBTCxHQUNBanBDLEVBQUFFLE1BQUFILEVBQUFwSSxrQkFzRkEsUUFBQW15QyxJQUFBdG1DLEVBQUF1bUMsR0FDQSxHQUFBLHFCQUFBdm1DLEdBQUEscUJBQUFBLEdBQ0EscUJBQUFBLEdBQUEscUJBQUFBLEdBQ0EsY0FBQUEsRUFDQSxLQUFBd21DLElBQUEsVUFDQSxrRkFDQUQsRUFFQSxPQUFBdm1DLEdBR0EsUUFBQXltQyxJQUFBem1DLEVBQUF1bUMsR0FXQSxHQURBdm1DLEdBQUEsSUFDQTdLLEVBQUE2SyxHQUNBLEtBQUF3bUMsSUFBQSxVQUNBLDREQUNBRCxFQUVBLE9BQUF2bUMsR0FHQSxRQUFBMG1DLElBQUExeEMsRUFBQXV4QyxHQUVBLEdBQUF2eEMsRUFBQSxDQUNBLEdBQUFBLEVBQUFvRyxjQUFBcEcsRUFDQSxLQUFBd3hDLElBQUEsU0FDQSw2RUFDQUQsRUFDQSxJQUNBdnhDLEVBQUF4QixTQUFBd0IsRUFDQSxLQUFBd3hDLElBQUEsYUFDQSwrRUFDQUQsRUFDQSxJQUNBdnhDLEVBQUEyeEMsV0FBQTN4QyxFQUFBMEMsVUFBQTFDLEVBQUE2RSxNQUFBN0UsRUFBQThFLE1BQUE5RSxFQUFBK0UsTUFDQSxLQUFBeXNDLElBQUEsVUFDQSw4RUFDQUQsRUFDQSxJQUNBdnhDLElBQUFLLE9BQ0EsS0FBQW14QyxJQUFBLFVBQ0EsMkVBQ0FELEdBR0EsTUFBQXZ4QyxHQU9BLFFBQUE0eEMsSUFBQTV4QyxFQUFBdXhDLEdBQ0EsR0FBQXZ4QyxFQUFBLENBQ0EsR0FBQUEsRUFBQW9HLGNBQUFwRyxFQUNBLEtBQUF3eEMsSUFBQSxTQUNBLDZFQUNBRCxFQUNBLElBQUF2eEMsSUFBQTZ4QyxJQUFBN3hDLElBQUE4eEMsSUFBQTl4QyxJQUFBK3hDLEdBQ0EsS0FBQVAsSUFBQSxTQUNBLHdGQUNBRCxJQUtBLFFBQUFTLElBQUFoeUMsRUFBQXV4QyxHQUNBLEdBQUF2eEMsSUFDQUEsSUFBQSxHQUFBb0csYUFBQXBHLE1BQUEsR0FBQW9HLGFBQUFwRyxJQUFBLEdBQUFvRyxhQUNBcEcsT0FBQW9HLGFBQUFwRyxPQUFBb0csYUFBQXBHLElBQUFpeUMsU0FBQTdyQyxhQUNBLEtBQUFvckMsSUFBQSxTQUNBLDREQUFBRCxHQWdnQkEsUUFBQVcsSUFBQTNRLEVBQUE4QixHQUNBLE1BQUEsbUJBQUE5QixHQUFBQSxFQUFBOEIsRUFHQSxRQUFBOE8sSUFBQTd5QixFQUFBOHlCLEdBQ0EsTUFBQSxtQkFBQTl5QixHQUFBOHlCLEVBQ0EsbUJBQUFBLEdBQUE5eUIsRUFDQUEsRUFBQTh5QixFQUdBLFFBQUFDLElBQUFwNUIsRUFBQXE1QixHQUNBLEdBQUE5cUMsR0FBQXlSLEVBQUFxNUIsRUFDQSxRQUFBOXFDLEVBQUE0MkIsVUFHQSxRQUFBbVUsSUFBQUMsRUFBQXY1QixHQUNBLEdBQUF3NUIsR0FDQUMsQ0FDQSxRQUFBRixFQUFBaHpCLE1BQ0EsSUFBQW16QixJQUFBQyxRQUNBSCxHQUFBLEVBQ0FqeUMsRUFBQWd5QyxFQUFBdkssS0FBQSxTQUFBNEssR0FDQU4sR0FBQU0sRUFBQTdSLFdBQUEvbkIsR0FDQXc1QixFQUFBQSxHQUFBSSxFQUFBN1IsV0FBQTl2QixXQUVBc2hDLEVBQUF0aEMsU0FBQXVoQyxDQUNBLE1BQ0EsS0FBQUUsSUFBQUcsUUFDQU4sRUFBQXRoQyxVQUFBLEVBQ0FzaEMsRUFBQU8sVUFDQSxNQUNBLEtBQUFKLElBQUFLLGdCQUNBVCxHQUFBQyxFQUFBUyxTQUFBaDZCLEdBQ0F1NUIsRUFBQXRoQyxTQUFBc2hDLEVBQUFTLFNBQUEvaEMsU0FDQXNoQyxFQUFBTyxRQUFBUCxFQUFBUyxTQUFBRixPQUNBLE1BQ0EsS0FBQUosSUFBQU8saUJBQ0FYLEdBQUFDLEVBQUFXLEtBQUFsNkIsR0FDQXM1QixHQUFBQyxFQUFBWSxNQUFBbjZCLEdBQ0F1NUIsRUFBQXRoQyxTQUFBc2hDLEVBQUFXLEtBQUFqaUMsVUFBQXNoQyxFQUFBWSxNQUFBbGlDLFNBQ0FzaEMsRUFBQU8sUUFBQVAsRUFBQVcsS0FBQUosUUFBQS9yQyxPQUFBd3JDLEVBQUFZLE1BQUFMLFFBQ0EsTUFDQSxLQUFBSixJQUFBVSxrQkFDQWQsR0FBQUMsRUFBQVcsS0FBQWw2QixHQUNBczVCLEdBQUFDLEVBQUFZLE1BQUFuNkIsR0FDQXU1QixFQUFBdGhDLFNBQUFzaEMsRUFBQVcsS0FBQWppQyxVQUFBc2hDLEVBQUFZLE1BQUFsaUMsU0FDQXNoQyxFQUFBTyxRQUFBUCxFQUFBdGhDLGFBQUFzaEMsRUFDQSxNQUNBLEtBQUFHLElBQUFXLHNCQUNBZixHQUFBQyxFQUFBN3RDLEtBQUFzVSxHQUNBczVCLEdBQUFDLEVBQUFlLFVBQUF0NkIsR0FDQXM1QixHQUFBQyxFQUFBZ0IsV0FBQXY2QixHQUNBdTVCLEVBQUF0aEMsU0FBQXNoQyxFQUFBN3RDLEtBQUF1TSxVQUFBc2hDLEVBQUFlLFVBQUFyaUMsVUFBQXNoQyxFQUFBZ0IsV0FBQXRpQyxTQUNBc2hDLEVBQUFPLFFBQUFQLEVBQUF0aEMsYUFBQXNoQyxFQUNBLE1BQ0EsS0FBQUcsSUFBQWMsV0FDQWpCLEVBQUF0aEMsVUFBQSxFQUNBc2hDLEVBQUFPLFNBQUFQLEVBQ0EsTUFDQSxLQUFBRyxJQUFBZSxpQkFDQW5CLEdBQUFDLEVBQUFtQixPQUFBMTZCLEdBQ0F1NUIsRUFBQW9CLFVBQ0FyQixHQUFBQyxFQUFBN0QsU0FBQTExQixHQUVBdTVCLEVBQUF0aEMsU0FBQXNoQyxFQUFBbUIsT0FBQXppQyxZQUFBc2hDLEVBQUFvQixVQUFBcEIsRUFBQTdELFNBQUF6OUIsVUFDQXNoQyxFQUFBTyxTQUFBUCxFQUNBLE1BQ0EsS0FBQUcsSUFBQWtCLGVBQ0FwQixFQUFBRCxFQUFBbmhDLE9BQUFnaEMsR0FBQXA1QixFQUFBdTVCLEVBQUFzQixPQUFBOW9DLE9BQUEsRUFDQTBuQyxLQUNBbHlDLEVBQUFneUMsRUFBQXJ6QyxVQUFBLFNBQUEwekMsR0FDQU4sR0FBQU0sRUFBQTU1QixHQUNBdzVCLEVBQUFBLEdBQUFJLEVBQUEzaEMsU0FDQTJoQyxFQUFBM2hDLFVBQ0F3aEMsRUFBQTVzQyxLQUFBNEIsTUFBQWdyQyxFQUFBRyxFQUFBRSxXQUdBUCxFQUFBdGhDLFNBQUF1aEMsRUFDQUQsRUFBQU8sUUFBQVAsRUFBQW5oQyxRQUFBZ2hDLEdBQUFwNUIsRUFBQXU1QixFQUFBc0IsT0FBQTlvQyxNQUFBMG5DLEdBQUFGLEVBQ0EsTUFDQSxLQUFBRyxJQUFBb0IscUJBQ0F4QixHQUFBQyxFQUFBVyxLQUFBbDZCLEdBQ0FzNUIsR0FBQUMsRUFBQVksTUFBQW42QixHQUNBdTVCLEVBQUF0aEMsU0FBQXNoQyxFQUFBVyxLQUFBamlDLFVBQUFzaEMsRUFBQVksTUFBQWxpQyxTQUNBc2hDLEVBQUFPLFNBQUFQLEVBQ0EsTUFDQSxLQUFBRyxJQUFBcUIsZ0JBQ0F2QixHQUFBLEVBQ0FDLEtBQ0FseUMsRUFBQWd5QyxFQUFBeHhCLFNBQUEsU0FBQTZ4QixHQUNBTixHQUFBTSxFQUFBNTVCLEdBQ0F3NUIsRUFBQUEsR0FBQUksRUFBQTNoQyxTQUNBMmhDLEVBQUEzaEMsVUFDQXdoQyxFQUFBNXNDLEtBQUE0QixNQUFBZ3JDLEVBQUFHLEVBQUFFLFdBR0FQLEVBQUF0aEMsU0FBQXVoQyxFQUNBRCxFQUFBTyxRQUFBTCxDQUNBLE1BQ0EsS0FBQUMsSUFBQXNCLGlCQUNBeEIsR0FBQSxFQUNBQyxLQUNBbHlDLEVBQUFneUMsRUFBQTBCLFdBQUEsU0FBQXZGLEdBQ0E0RCxHQUFBNUQsRUFBQXJ0QyxNQUFBMlgsR0FDQXc1QixFQUFBQSxHQUFBOUQsRUFBQXJ0QyxNQUFBNFAsU0FDQXk5QixFQUFBcnRDLE1BQUE0UCxVQUNBd2hDLEVBQUE1c0MsS0FBQTRCLE1BQUFnckMsRUFBQS9ELEVBQUFydEMsTUFBQXl4QyxXQUdBUCxFQUFBdGhDLFNBQUF1aEMsRUFDQUQsRUFBQU8sUUFBQUwsQ0FDQSxNQUNBLEtBQUFDLElBQUF3QixlQUNBM0IsRUFBQXRoQyxVQUFBLEVBQ0FzaEMsRUFBQU8sWUFLQSxRQUFBcUIsSUFBQW5NLEdBQ0EsR0FBQSxHQUFBQSxFQUFBcm9DLE9BQUEsQ0FDQSxHQUFBeTBDLEdBQUFwTSxFQUFBLEdBQUFqSCxXQUNBOTFCLEVBQUFtcEMsRUFBQXRCLE9BQ0EsT0FBQSxLQUFBN25DLEVBQUF0TCxPQUFBc0wsRUFDQUEsRUFBQSxLQUFBbXBDLEVBQUFucEMsRUFBQXhNLEdBR0EsUUFBQTQxQyxJQUFBOUIsR0FDQSxNQUFBQSxHQUFBaHpCLE9BQUFtekIsR0FBQWMsWUFBQWpCLEVBQUFoekIsT0FBQW16QixHQUFBZSxpQkFHQSxRQUFBYSxJQUFBL0IsR0FDQSxNQUFBLEtBQUFBLEVBQUF2SyxLQUFBcm9DLFFBQUEwMEMsR0FBQTlCLEVBQUF2SyxLQUFBLEdBQUFqSCxhQUNBeGhCLEtBQUFtekIsR0FBQW9CLHFCQUFBWixLQUFBWCxFQUFBdkssS0FBQSxHQUFBakgsV0FBQW9TLE9BQUE1ekIsS0FBQW16QixHQUFBNkIsa0JBQUFDLFNBQUEsS0FEQSxPQUtBLFFBQUFDLElBQUFsQyxHQUNBLE1BQUEsS0FBQUEsRUFBQXZLLEtBQUFyb0MsUUFDQSxJQUFBNHlDLEVBQUF2SyxLQUFBcm9DLFNBQ0E0eUMsRUFBQXZLLEtBQUEsR0FBQWpILFdBQUF4aEIsT0FBQW16QixHQUFBRyxTQUNBTixFQUFBdkssS0FBQSxHQUFBakgsV0FBQXhoQixPQUFBbXpCLEdBQUFxQixpQkFDQXhCLEVBQUF2SyxLQUFBLEdBQUFqSCxXQUFBeGhCLE9BQUFtekIsR0FBQXNCLGtCQUdBLFFBQUFVLElBQUFuQyxHQUNBLE1BQUFBLEdBQUF0aEMsU0FHQSxRQUFBMGpDLElBQUFDLEVBQUE1N0IsR0FDQXhILEtBQUFvakMsV0FBQUEsRUFDQXBqQyxLQUFBd0gsUUFBQUEsRUEwZUEsUUFBQTY3QixJQUFBRCxFQUFBNTdCLEdBQ0F4SCxLQUFBb2pDLFdBQUFBLEVBQ0FwakMsS0FBQXdILFFBQUFBLEVBdVlBLFFBQUE4N0IsSUFBQS9wQyxHQUNBLE1BQUEsZUFBQUEsRUFLQSxRQUFBZ3FDLElBQUExekMsR0FDQSxNQUFBVixHQUFBVSxFQUFBaUIsU0FBQWpCLEVBQUFpQixVQUFBMHlDLEdBQUFuMEMsS0FBQVEsR0FzREEsUUFBQWtaLE1BQ0EsR0FBQTA2QixHQUFBbnVDLEtBQ0FvdUMsRUFBQXB1QyxJQUVBMEssTUFBQW1TLE1BQUEsVUFBQSxTQUFBM0ssR0FtREEsUUFBQW04QixHQUFBMVksRUFBQTJZLEdBRUEsTUFBQSxPQUFBM1ksR0FBQSxNQUFBMlksRUFDQTNZLElBQUEyWSxFQUdBLGdCQUFBM1ksS0FLQUEsRUFBQXNZLEdBQUF0WSxHQUVBLGdCQUFBQSxLQUVBLEVBT0FBLElBQUEyWSxHQUFBM1ksSUFBQUEsR0FBQTJZLElBQUFBLEVBR0EsUUFBQUMsR0FBQXRwQyxFQUFBaWYsRUFBQXNxQixFQUFBQyxFQUFBQyxHQUNBLEdBQ0FDLEdBREFDLEVBQUFILEVBQUFJLE1BR0EsSUFBQSxJQUFBRCxFQUFBLzFDLE9BQUEsQ0FDQSxHQUFBaTJDLEdBQUFULENBRUEsT0FEQU8sR0FBQUEsRUFBQSxHQUNBM3BDLEVBQUE5SCxPQUFBLFNBQUE4SCxHQUNBLEdBQUE4cEMsR0FBQUgsRUFBQTNwQyxFQUtBLE9BSkFvcEMsR0FBQVUsRUFBQUQsS0FDQUgsRUFBQUYsRUFBQXhwQyxFQUFBdE4sRUFBQUEsR0FBQW8zQyxJQUNBRCxFQUFBQyxHQUFBZCxHQUFBYyxJQUVBSixHQUNBenFCLEVBQUFzcUIsRUFBQUUsR0FLQSxJQUFBLEdBRkFNLE1BQ0FDLEtBQ0FoM0MsRUFBQSxFQUFBZ0QsRUFBQTJ6QyxFQUFBLzFDLE9BQUFvQyxFQUFBaEQsRUFBQUEsSUFDQSsyQyxFQUFBLzJDLEdBQUFvMkMsRUFDQVksRUFBQWgzQyxHQUFBLElBR0EsT0FBQWdOLEdBQUE5SCxPQUFBLFNBQUE4SCxHQUdBLElBQUEsR0FGQWlxQyxJQUFBLEVBRUFqM0MsRUFBQSxFQUFBZ0QsRUFBQTJ6QyxFQUFBLzFDLE9BQUFvQyxFQUFBaEQsRUFBQUEsSUFBQSxDQUNBLEdBQUE4MkMsR0FBQUgsRUFBQTMyQyxHQUFBZ04sSUFDQWlxQyxJQUFBQSxHQUFBYixFQUFBVSxFQUFBQyxFQUFBLzJDLFFBQ0FnM0MsRUFBQWgzQyxHQUFBODJDLEVBQ0FDLEVBQUEvMkMsR0FBQTgyQyxHQUFBZCxHQUFBYyxJQVFBLE1BSkFHLEtBQ0FQLEVBQUFGLEVBQUF4cEMsRUFBQXROLEVBQUFBLEVBQUFzM0MsSUFHQU4sR0FDQXpxQixFQUFBc3FCLEVBQUFFLEdBR0EsUUFBQVMsR0FBQWxxQyxFQUFBaWYsRUFBQXNxQixFQUFBQyxHQUNBLEdBQUFXLEdBQUF4WSxDQUNBLE9BQUF3WSxHQUFBbnFDLEVBQUE5SCxPQUFBLFNBQUE4SCxHQUNBLE1BQUF3cEMsR0FBQXhwQyxJQUNBLFNBQUExSyxFQUFBODBDLEVBQUFwcUMsR0FDQTJ4QixFQUFBcjhCLEVBQ0FWLEVBQUFxcUIsSUFDQUEsRUFBQXZqQixNQUFBK0osS0FBQXRTLFdBRUEyRSxFQUFBeEMsSUFDQTBLLEVBQUFxcUMsYUFBQSxXQUNBdnlDLEVBQUE2NUIsSUFDQXdZLE9BSUFaLEdBR0EsUUFBQWUsR0FBQXRxQyxFQUFBaWYsRUFBQXNxQixFQUFBQyxHQWdCQSxRQUFBZSxHQUFBajFDLEdBQ0EsR0FBQWsxQyxJQUFBLENBSUEsT0FIQWgyQyxHQUFBYyxFQUFBLFNBQUFzRyxHQUNBOUQsRUFBQThELEtBQUE0dUMsR0FBQSxLQUVBQSxFQXBCQSxHQUFBTCxHQUFBeFksQ0FDQSxPQUFBd1ksR0FBQW5xQyxFQUFBOUgsT0FBQSxTQUFBOEgsR0FDQSxNQUFBd3BDLEdBQUF4cEMsSUFDQSxTQUFBMUssRUFBQTgwQyxFQUFBcHFDLEdBQ0EyeEIsRUFBQXI4QixFQUNBVixFQUFBcXFCLElBQ0FBLEVBQUFucUIsS0FBQTJRLEtBQUFuUSxFQUFBODBDLEVBQUFwcUMsR0FFQXVxQyxFQUFBajFDLElBQ0EwSyxFQUFBcXFDLGFBQUEsV0FDQUUsRUFBQTVZLElBQUF3WSxPQUdBWixHQVdBLFFBQUFrQixHQUFBenFDLEVBQUFpZixFQUFBc3FCLEVBQUFDLEdBQ0EsR0FBQVcsRUFDQSxPQUFBQSxHQUFBbnFDLEVBQUE5SCxPQUFBLFNBQUE4SCxHQUNBLE1BQUF3cEMsR0FBQXhwQyxJQUNBLFNBQUExSyxFQUFBODBDLEVBQUFwcUMsR0FDQXBMLEVBQUFxcUIsSUFDQUEsRUFBQXZqQixNQUFBK0osS0FBQXRTLFdBRUFnM0MsS0FDQVosR0FHQSxRQUFBbUIsR0FBQWxCLEVBQUFtQixHQUNBLElBQUFBLEVBQUEsTUFBQW5CLEVBQ0EsSUFBQW9CLEdBQUFwQixFQUFBakwsZ0JBQ0FzTSxHQUFBLEVBRUFDLEVBQ0FGLElBQUFOLEdBQ0FNLElBQUFWLEVBRUExdUMsRUFBQXN2QyxFQUFBLFNBQUE5cUMsRUFBQXFiLEVBQUE0VyxFQUFBMlgsR0FDQSxHQUFBdDBDLEdBQUF1MUMsR0FBQWpCLEVBQUFBLEVBQUEsR0FBQUosRUFBQXhwQyxFQUFBcWIsRUFBQTRXLEVBQUEyWCxFQUNBLE9BQUFlLEdBQUFyMUMsRUFBQTBLLEVBQUFxYixJQUNBLFNBQUFyYixFQUFBcWIsRUFBQTRXLEVBQUEyWCxHQUNBLEdBQUF0MEMsR0FBQWswQyxFQUFBeHBDLEVBQUFxYixFQUFBNFcsRUFBQTJYLEdBQ0Fod0IsRUFBQSt3QixFQUFBcjFDLEVBQUEwSyxFQUFBcWIsRUFHQSxPQUFBdmpCLEdBQUF4QyxHQUFBc2tCLEVBQUF0a0IsRUFlQSxPQVhBazBDLEdBQUFqTCxpQkFDQWlMLEVBQUFqTCxrQkFBQStLLEVBQ0E5dEMsRUFBQStpQyxnQkFBQWlMLEVBQUFqTCxnQkFDQW9NLEVBQUF2WSxZQUdBNTJCLEVBQUEraUMsZ0JBQUErSyxFQUNBdUIsR0FBQXJCLEVBQUFJLE9BQ0FwdUMsRUFBQW91QyxPQUFBSixFQUFBSSxPQUFBSixFQUFBSSxRQUFBSixJQUdBaHVDLEVBOU1BLEdBQUF1dkMsR0FBQTdrQyxLQUFBNmtDLGFBQ0FDLEdBQ0E5a0MsSUFBQTZrQyxFQUNBRSxpQkFBQSxHQUVBQyxHQUNBaGxDLElBQUE2a0MsRUFDQUUsaUJBQUEsRUFHQSxPQUFBLFVBQUFuTixFQUFBNk0sRUFBQU0sR0FDQSxHQUFBekIsR0FBQTJCLEVBQUFDLENBRUEsY0FBQXROLElBQ0EsSUFBQSxTQUNBQSxFQUFBQSxFQUFBanJCLE9BQ0F1NEIsRUFBQXROLENBRUEsSUFBQS9pQixHQUFBa3dCLEVBQUE5QixFQUFBRCxDQUdBLElBRkFNLEVBQUF6dUIsRUFBQXF3QixJQUVBNUIsRUFBQSxDQUNBLE1BQUExTCxFQUFBdGpDLE9BQUEsSUFBQSxNQUFBc2pDLEVBQUF0akMsT0FBQSxLQUNBMndDLEdBQUEsRUFDQXJOLEVBQUFBLEVBQUEvL0IsVUFBQSxHQUVBLElBQUFzdEMsR0FBQUosRUFBQUMsRUFBQUYsRUFDQU0sRUFBQSxHQUFBQyxJQUFBRixHQUNBRyxFQUFBLEdBQUFDLElBQUFILEVBQUFyK0IsRUFBQW8rQixFQUNBN0IsR0FBQWdDLEVBQUFydkMsTUFBQTJoQyxHQUNBMEwsRUFBQXRrQyxTQUNBc2tDLEVBQUFqTCxnQkFBQWtNLEVBQ0FVLEVBQ0EzQixFQUFBakwsZ0JBQUFpTCxFQUFBeFgsUUFDQXNZLEVBQUFKLEVBQ0FWLEVBQUFJLFNBQ0FKLEVBQUFqTCxnQkFBQStLLEdBRUF2dUIsRUFBQXF3QixHQUFBNUIsRUFFQSxNQUFBa0IsR0FBQWxCLEVBQUFtQixFQUVBLEtBQUEsV0FDQSxNQUFBRCxHQUFBNU0sRUFBQTZNLEVBRUEsU0FDQSxNQUFBcHpDLE9BNlhBLFFBQUFxWCxNQUVBbkosS0FBQW1TLE1BQUEsYUFBQSxvQkFBQSxTQUFBbkosRUFBQTFCLEdBQ0EsTUFBQTIrQixJQUFBLFNBQUFsc0IsR0FDQS9RLEVBQUF4VyxXQUFBdW5CLElBQ0F6UyxLQUlBLFFBQUErQixNQUNBckosS0FBQW1TLE1BQUEsV0FBQSxvQkFBQSxTQUFBckwsRUFBQVEsR0FDQSxNQUFBMitCLElBQUEsU0FBQWxzQixHQUNBalQsRUFBQTZULE1BQUFaLElBQ0F6UyxLQVlBLFFBQUEyK0IsSUFBQUMsRUFBQUMsR0FFQSxRQUFBQyxHQUFBdHdDLEVBQUF1d0MsRUFBQS9SLEdBRUEsUUFBQXRvQixHQUFBalcsR0FDQSxNQUFBLFVBQUFsRyxHQUNBNG1DLElBQ0FBLEdBQUEsRUFDQTFnQyxFQUFBMUcsS0FBQXlHLEVBQUFqRyxLQUxBLEdBQUE0bUMsSUFBQSxDQVNBLFFBQUF6cUIsRUFBQXE2QixHQUFBcjZCLEVBQUFzb0IsSUFpQkEsUUFBQWdTLEtBQ0F0bUMsS0FBQTI5QixTQUFBck0sT0FBQSxHQStCQSxRQUFBaVYsR0FBQXQzQyxFQUFBOEcsR0FDQSxNQUFBLFVBQUFsRyxHQUNBa0csRUFBQTFHLEtBQUFKLEVBQUFZLElBSUEsUUFBQTIyQyxHQUFBdHRCLEdBQ0EsR0FBQW5qQixHQUFBbS9CLEVBQUF1UixDQUVBQSxHQUFBdnRCLEVBQUF1dEIsUUFDQXZ0QixFQUFBd3RCLGtCQUFBLEVBQ0F4dEIsRUFBQXV0QixRQUFBeDVDLENBQ0EsS0FBQSxHQUFBTSxHQUFBLEVBQUFnRCxFQUFBazJDLEVBQUF0NEMsT0FBQW9DLEVBQUFoRCxJQUFBQSxFQUFBLENBQ0EybkMsRUFBQXVSLEVBQUFsNUMsR0FBQSxHQUNBd0ksRUFBQTB3QyxFQUFBbDVDLEdBQUEyckIsRUFBQW9ZLE9BQ0EsS0FDQW5pQyxFQUFBNEcsR0FDQW0vQixFQUFBQyxRQUFBcC9CLEVBQUFtakIsRUFBQXJwQixRQUNBLElBQUFxcEIsRUFBQW9ZLE9BQ0E0RCxFQUFBQyxRQUFBamMsRUFBQXJwQixPQUVBcWxDLEVBQUF0QyxPQUFBMVosRUFBQXJwQixPQUVBLE1BQUE4SCxHQUNBdTlCLEVBQUF0QyxPQUFBajdCLEdBQ0F3dUMsRUFBQXh1QyxLQUtBLFFBQUFndkMsR0FBQXp0QixJQUNBQSxFQUFBd3RCLGtCQUFBeHRCLEVBQUF1dEIsVUFDQXZ0QixFQUFBd3RCLGtCQUFBLEVBQ0FSLEVBQUEsV0FBQU0sRUFBQXR0QixNQUdBLFFBQUEwdEIsS0FDQTVtQyxLQUFBOHpCLFFBQUEsR0FBQXdTLEdBRUF0bUMsS0FBQW0xQixRQUFBb1IsRUFBQXZtQyxLQUFBQSxLQUFBbTFCLFNBQ0FuMUIsS0FBQTR5QixPQUFBMlQsRUFBQXZtQyxLQUFBQSxLQUFBNHlCLFFBQ0E1eUIsS0FBQTI1QixPQUFBNE0sRUFBQXZtQyxLQUFBQSxLQUFBMjVCLFFBa01BLFFBQUFubUIsR0FBQXF6QixHQUNBLEdBQUEzUixHQUFBLEdBQUEwUixHQUNBcm1DLEVBQUEsRUFDQXVtQyxFQUFBcjRDLEdBQUFvNEMsUUFrQkEsT0FoQkE5M0MsR0FBQTgzQyxFQUFBLFNBQUEvUyxFQUFBNWtDLEdBQ0FxUixJQUNBd3pCLEVBQUFELEdBQUEvZ0MsS0FBQSxTQUFBbEQsR0FDQWkzQyxFQUFBMTNDLGVBQUFGLEtBQ0E0M0MsRUFBQTUzQyxHQUFBVyxJQUNBMFEsR0FBQTIwQixFQUFBQyxRQUFBMlIsS0FDQSxTQUFBM3BDLEdBQ0EycEMsRUFBQTEzQyxlQUFBRixJQUNBZ21DLEVBQUF0QyxPQUFBejFCLE9BSUEsSUFBQW9ELEdBQ0EyMEIsRUFBQUMsUUFBQTJSLEdBR0E1UixFQUFBcEIsUUE1VEEsR0FBQWlULEdBQUE3NUMsRUFBQSxLQUFBODVDLFdBd0JBcnNCLEVBQUEsV0FDQSxNQUFBLElBQUFpc0IsR0FPQXYxQyxHQUFBaTFDLEVBQUF0d0IsV0FDQWpqQixLQUFBLFNBQUFrMEMsRUFBQUMsRUFBQUMsR0FDQSxHQUFBLzBDLEVBQUE2MEMsSUFBQTcwQyxFQUFBODBDLElBQUE5MEMsRUFBQSswQyxHQUNBLE1BQUFubkMsS0FFQSxJQUFBbVUsR0FBQSxHQUFBeXlCLEVBTUEsT0FKQTVtQyxNQUFBMjlCLFFBQUE4SSxRQUFBem1DLEtBQUEyOUIsUUFBQThJLFlBQ0F6bUMsS0FBQTI5QixRQUFBOEksUUFBQXB5QyxNQUFBOGYsRUFBQTh5QixFQUFBQyxFQUFBQyxJQUNBbm5DLEtBQUEyOUIsUUFBQXJNLE9BQUEsR0FBQXFWLEVBQUEzbUMsS0FBQTI5QixTQUVBeHBCLEVBQUEyZixTQUdBc1QsUUFBQSxTQUFBcnRCLEdBQ0EsTUFBQS9aLE1BQUFqTixLQUFBLEtBQUFnbkIsSUFHQXN0QixVQUFBLFNBQUF0dEIsRUFBQW90QixHQUNBLE1BQUFubkMsTUFBQWpOLEtBQUEsU0FBQWxELEdBQ0EsTUFBQXkzQyxHQUFBejNDLEdBQUEsRUFBQWtxQixJQUNBLFNBQUF2QixHQUNBLE1BQUE4dUIsR0FBQTl1QixHQUFBLEVBQUF1QixJQUNBb3RCLE1BaURBOTFDLEVBQUF1MUMsRUFBQTV3QixXQUNBbWYsUUFBQSxTQUFBaC9CLEdBQ0E2SixLQUFBOHpCLFFBQUE2SixRQUFBck0sU0FDQW43QixJQUFBNkosS0FBQTh6QixRQUNBOXpCLEtBQUF1bkMsU0FBQVIsRUFDQSxTQUNBLHFFQUNBNXdDLElBRUE2SixLQUFBd25DLFVBQUFyeEMsS0FLQXF4QyxVQUFBLFNBQUFyeEMsR0FDQSxHQUFBcEQsR0FBQXcrQixDQUVBQSxHQUFBNlUsRUFBQXBtQyxLQUFBQSxLQUFBd25DLFVBQUF4bkMsS0FBQXVuQyxTQUNBLE1BQ0EvMkMsRUFBQTJGLElBQUFoSCxFQUFBZ0gsTUFBQXBELEVBQUFvRCxHQUFBQSxFQUFBcEQsTUFDQTVELEVBQUE0RCxJQUNBaU4sS0FBQTh6QixRQUFBNkosUUFBQXJNLE9BQUEsR0FDQXYrQixFQUFBMUQsS0FBQThHLEVBQUFvN0IsRUFBQSxHQUFBQSxFQUFBLEdBQUF2eEIsS0FBQTI1QixVQUVBMzVCLEtBQUE4ekIsUUFBQTZKLFFBQUE5dEMsTUFBQXNHLEVBQ0E2SixLQUFBOHpCLFFBQUE2SixRQUFBck0sT0FBQSxFQUNBcVYsRUFBQTNtQyxLQUFBOHpCLFFBQUE2SixVQUVBLE1BQUFobUMsR0FDQTQ1QixFQUFBLEdBQUE1NUIsR0FDQXd1QyxFQUFBeHVDLEtBSUFpN0IsT0FBQSxTQUFBejFCLEdBQ0E2QyxLQUFBOHpCLFFBQUE2SixRQUFBck0sUUFDQXR4QixLQUFBdW5DLFNBQUFwcUMsSUFHQW9xQyxTQUFBLFNBQUFwcUMsR0FDQTZDLEtBQUE4ekIsUUFBQTZKLFFBQUE5dEMsTUFBQXNOLEVBQ0E2QyxLQUFBOHpCLFFBQUE2SixRQUFBck0sT0FBQSxFQUNBcVYsRUFBQTNtQyxLQUFBOHpCLFFBQUE2SixVQUdBaEUsT0FBQSxTQUFBOE4sR0FDQSxHQUFBbm5DLEdBQUFOLEtBQUE4ekIsUUFBQTZKLFFBQUE4SSxPQUVBem1DLE1BQUE4ekIsUUFBQTZKLFFBQUFyTSxRQUFBLEdBQUFoeEIsR0FBQUEsRUFBQW5TLFFBQ0ErM0MsRUFBQSxXQUVBLElBQUEsR0FEQW5zQixHQUFBNUYsRUFDQTVtQixFQUFBLEVBQUFnRCxFQUFBK1AsRUFBQW5TLE9BQUFvQyxFQUFBaEQsRUFBQUEsSUFBQSxDQUNBNG1CLEVBQUE3VCxFQUFBL1MsR0FBQSxHQUNBd3NCLEVBQUF6WixFQUFBL1MsR0FBQSxFQUNBLEtBQ0E0bUIsRUFBQXdsQixPQUFBeHFDLEVBQUE0cUIsR0FBQUEsRUFBQTB0QixHQUFBQTtDQUNBLE1BQUE5dkMsR0FDQXd1QyxFQUFBeHVDLFNBNENBLElBQUFpN0IsR0FBQSxTQUFBejFCLEdBQ0EsR0FBQWdYLEdBQUEsR0FBQXl5QixFQUVBLE9BREF6eUIsR0FBQXllLE9BQUF6MUIsR0FDQWdYLEVBQUEyZixTQUdBNFQsRUFBQSxTQUFBNzNDLEVBQUE4M0MsR0FDQSxHQUFBeHpCLEdBQUEsR0FBQXl5QixFQU1BLE9BTEFlLEdBQ0F4ekIsRUFBQWdoQixRQUFBdGxDLEdBRUFza0IsRUFBQXllLE9BQUEvaUMsR0FFQXNrQixFQUFBMmYsU0FHQXdULEVBQUEsU0FBQXozQyxFQUFBKzNDLEVBQUE3dEIsR0FDQSxHQUFBOHRCLEdBQUEsSUFDQSxLQUNBMTRDLEVBQUE0cUIsS0FBQTh0QixFQUFBOXRCLEtBQ0EsTUFBQXBpQixHQUNBLE1BQUErdkMsR0FBQS92QyxHQUFBLEdBRUEsTUFBQTdFLEdBQUErMEMsR0FDQUEsRUFBQTkwQyxLQUFBLFdBQ0EsTUFBQTIwQyxHQUFBNzNDLEVBQUErM0MsSUFDQSxTQUFBcHZCLEdBQ0EsTUFBQWt2QixHQUFBbHZCLEdBQUEsS0FHQWt2QixFQUFBNzNDLEVBQUErM0MsSUFzQkE3VCxFQUFBLFNBQUFsa0MsRUFBQWtxQixFQUFBK3RCLEVBQUFYLEdBQ0EsR0FBQWh6QixHQUFBLEdBQUF5eUIsRUFFQSxPQURBenlCLEdBQUFnaEIsUUFBQXRsQyxHQUNBc2tCLEVBQUEyZixRQUFBL2dDLEtBQUFnbkIsRUFBQSt0QixFQUFBWCxJQWlCQWhTLEVBQUFwQixFQTBDQWdVLEVBQUEsUUFBQUMsR0FBQUMsR0FZQSxRQUFBNUIsR0FBQXgyQyxHQUNBcWxDLEVBQUFDLFFBQUF0bEMsR0FHQSxRQUFBeWtDLEdBQUFuM0IsR0FDQSszQixFQUFBdEMsT0FBQXoxQixHQWhCQSxJQUFBaE8sRUFBQTg0QyxHQUNBLEtBQUFsQixHQUFBLFVBQUEsaUNBQUFrQixFQUdBLE1BQUFqb0MsZUFBQWdvQyxJQUVBLE1BQUEsSUFBQUEsR0FBQUMsRUFHQSxJQUFBL1MsR0FBQSxHQUFBMFIsRUFZQSxPQUZBcUIsR0FBQTVCLEVBQUEvUixHQUVBWSxFQUFBcEIsUUFTQSxPQU5BaVUsR0FBQXB0QixNQUFBQSxFQUNBb3RCLEVBQUFuVixPQUFBQSxFQUNBbVYsRUFBQWhVLEtBQUFBLEVBQ0FnVSxFQUFBNVMsUUFBQUEsRUFDQTRTLEVBQUF2MEIsSUFBQUEsRUFFQXUwQixFQUdBLFFBQUF4OUIsTUFDQXZLLEtBQUFtUyxNQUFBLFVBQUEsV0FBQSxTQUFBL0gsRUFBQUYsR0FDQSxHQUFBZytCLEdBQUE5OUIsRUFBQTg5Qix1QkFDQTk5QixFQUFBKzlCLDRCQUVBQyxFQUFBaCtCLEVBQUFnK0Isc0JBQ0FoK0IsRUFBQWkrQiw0QkFDQWorQixFQUFBaytCLGtDQUVBQyxJQUFBTCxFQUNBTSxFQUFBRCxFQUNBLFNBQUF4eUMsR0FDQSxHQUFBK2xCLEdBQUFvc0IsRUFBQW55QyxFQUNBLE9BQUEsWUFDQXF5QyxFQUFBdHNCLEtBR0EsU0FBQS9sQixHQUNBLEdBQUEweUMsR0FBQXYrQixFQUFBblUsRUFBQSxPQUFBLEVBQ0EsT0FBQSxZQUNBbVUsRUFBQTRRLE9BQUEydEIsSUFNQSxPQUZBRCxHQUFBRSxVQUFBSCxFQUVBQyxJQXVFQSxRQUFBdi9CLE1BYUEsUUFBQTAvQixHQUFBaDNDLEdBQ0EsUUFBQWkzQyxLQUNBNW9DLEtBQUE2b0MsV0FBQTdvQyxLQUFBOG9DLGNBQ0E5b0MsS0FBQStvQyxZQUFBL29DLEtBQUFncEMsWUFBQSxLQUNBaHBDLEtBQUFpcEMsZUFDQWpwQyxLQUFBa3BDLG1CQUNBbHBDLEtBQUFtcEMsZ0JBQUEsRUFDQW5wQyxLQUFBb3BDLElBQUF0NUMsSUFDQWtRLEtBQUFxcEMsYUFBQSxLQUdBLE1BREFULEdBQUE1eUIsVUFBQXJrQixFQUNBaTNDLEVBdkJBLEdBQUFVLEdBQUEsR0FDQUMsRUFBQXI4QyxFQUFBLGNBQ0FzOEMsRUFBQSxLQUNBQyxFQUFBLElBRUF6cEMsTUFBQTBwQyxVQUFBLFNBQUE3NUMsR0FJQSxNQUhBbkMsV0FBQVMsU0FDQW03QyxFQUFBejVDLEdBRUF5NUMsR0FpQkF0cEMsS0FBQW1TLE1BQUEsWUFBQSxvQkFBQSxTQUFBLFdBQ0EsU0FBQW9DLEVBQUFqTixFQUFBd0IsRUFBQWhDLEdBRUEsUUFBQTZpQyxHQUFBQyxHQUNBQSxFQUFBQyxhQUFBcGdCLGFBQUEsRUFHQSxRQUFBcWdCLEdBQUExa0IsR0FFQSxJQUFBN0IsS0FNQTZCLEVBQUEyakIsYUFBQWUsRUFBQTFrQixFQUFBMmpCLGFBQ0EzakIsRUFBQTBqQixlQUFBZ0IsRUFBQTFrQixFQUFBMGpCLGdCQVVBMWpCLEVBQUF4RixRQUFBd0YsRUFBQTBqQixjQUFBMWpCLEVBQUEya0IsY0FBQTNrQixFQUFBMmpCLFlBQ0EzakIsRUFBQTRqQixZQUFBNWpCLEVBQUE0a0IsTUFBQTVrQixFQUFBeWpCLFdBQUEsS0EyQ0EsUUFBQW9CLEtBQ0FqcUMsS0FBQW9wQyxJQUFBdDVDLElBQ0FrUSxLQUFBaTFCLFFBQUFqMUIsS0FBQTRmLFFBQUE1ZixLQUFBNm9DLFdBQ0E3b0MsS0FBQThvQyxjQUFBOW9DLEtBQUErcEMsY0FDQS9wQyxLQUFBK29DLFlBQUEvb0MsS0FBQWdwQyxZQUFBLEtBQ0FocEMsS0FBQWdxQyxNQUFBaHFDLEtBQ0FBLEtBQUF5cEIsYUFBQSxFQUNBenBCLEtBQUFpcEMsZUFDQWpwQyxLQUFBa3BDLG1CQUNBbHBDLEtBQUFtcEMsZ0JBQUEsRUFDQW5wQyxLQUFBd2Usa0JBQUEsS0ErbUNBLFFBQUEwckIsR0FBQUMsR0FDQSxHQUFBbmhDLEVBQUFpc0IsUUFDQSxLQUFBc1UsR0FBQSxTQUFBLDBCQUFBdmdDLEVBQUFpc0IsUUFHQWpzQixHQUFBaXNCLFFBQUFrVixFQUdBLFFBQUFDLEtBQ0FwaEMsRUFBQWlzQixRQUFBLEtBR0EsUUFBQW9WLEdBQUFDLEVBQUFuUixHQUNBLEVBQ0FtUixHQUFBbkIsaUJBQUFoUSxRQUNBbVIsRUFBQUEsRUFBQTFxQixTQUdBLFFBQUEycUIsR0FBQUQsRUFBQW5SLEVBQUE1L0IsR0FDQSxFQUNBK3dDLEdBQUFwQixnQkFBQTN2QyxJQUFBNC9CLEVBRUEsSUFBQW1SLEVBQUFwQixnQkFBQTN2QyxVQUNBK3dDLEdBQUFwQixnQkFBQTN2QyxTQUVBK3dDLEVBQUFBLEVBQUExcUIsU0FPQSxRQUFBNHFCLE1BRUEsUUFBQUMsS0FDQSxLQUFBQyxFQUFBdjhDLFFBQ0EsSUFDQXU4QyxFQUFBLzBCLFVBQ0EsTUFBQWhlLEdBQ0EyUCxFQUFBM1AsR0FHQTh4QyxFQUFBLEtBR0EsUUFBQWtCLEtBQ0EsT0FBQWxCLElBQ0FBLEVBQUEzaUMsRUFBQTZULE1BQUEsV0FDQTNSLEVBQUF2TyxPQUFBZ3dDLE1BcG9DQVIsRUFBQWowQixXQUNBcmhCLFlBQUFzMUMsRUE4QkFwcUIsS0FBQSxTQUFBK3FCLEVBQUFqNUMsR0FDQSxHQUFBazVDLEVBK0JBLE9BN0JBbDVDLEdBQUFBLEdBQUFxTyxLQUVBNHFDLEdBQ0FDLEVBQUEsR0FBQVosR0FDQVksRUFBQWIsTUFBQWhxQyxLQUFBZ3FDLFFBSUFocUMsS0FBQXFwQyxlQUNBcnBDLEtBQUFxcEMsYUFBQVYsRUFBQTNvQyxPQUVBNnFDLEVBQUEsR0FBQTdxQyxNQUFBcXBDLGNBRUF3QixFQUFBanJCLFFBQUFqdUIsRUFDQWs1QyxFQUFBZCxjQUFBcDRDLEVBQUFxM0MsWUFDQXIzQyxFQUFBbzNDLGFBQ0FwM0MsRUFBQXEzQyxZQUFBRixjQUFBK0IsRUFDQWw1QyxFQUFBcTNDLFlBQUE2QixHQUVBbDVDLEVBQUFvM0MsWUFBQXAzQyxFQUFBcTNDLFlBQUE2QixHQVFBRCxHQUFBajVDLEdBQUFxTyxPQUFBNnFDLEVBQUF6a0IsSUFBQSxXQUFBdWpCLEdBRUFrQixHQXVIQXA0QyxPQUFBLFNBQUFxNEMsRUFBQXR4QixFQUFBc3FCLEVBQUFFLEdBQ0EsR0FBQTFvQyxHQUFBd04sRUFBQWdpQyxFQUVBLElBQUF4dkMsRUFBQXc5QixnQkFDQSxNQUFBeDlCLEdBQUF3OUIsZ0JBQUE5NEIsS0FBQXdaLEVBQUFzcUIsRUFBQXhvQyxFQUFBd3ZDLEVBRUEsSUFBQXZ3QyxHQUFBeUYsS0FDQWxNLEVBQUF5RyxFQUFBc3VDLFdBQ0FrQyxHQUNBaDFDLEdBQUF5akIsRUFDQW5HLEtBQUFtM0IsRUFDQWx2QyxJQUFBQSxFQUNBKzhCLElBQUEyTCxHQUFBOEcsRUFDQUUsS0FBQWxILEVBaUJBLE9BZEEwRixHQUFBLEtBRUFyNkMsRUFBQXFxQixLQUNBdXhCLEVBQUFoMUMsR0FBQWpFLEdBR0FnQyxJQUNBQSxFQUFBeUcsRUFBQXN1QyxlQUlBLzBDLEVBQUFtRyxRQUFBOHdDLEdBQ0FWLEVBQUFycUMsS0FBQSxHQUVBLFdBQ0FuTSxFQUFBQyxFQUFBaTNDLElBQUEsR0FDQVYsRUFBQTl2QyxFQUFBLElBRUFpdkMsRUFBQSxPQTZCQXpRLFlBQUEsU0FBQWtTLEVBQUF6eEIsR0F3Q0EsUUFBQTB4QixLQUNBQyxHQUFBLEVBRUFDLEdBQ0FBLEdBQUEsRUFDQTV4QixFQUFBNnhCLEVBQUFBLEVBQUF2MUMsSUFFQTBqQixFQUFBNnhCLEVBQUFyUyxFQUFBbGpDLEdBOUNBLEdBQUFrakMsR0FBQSxHQUFBemlCLE9BQUEwMEIsRUFBQTk4QyxRQUNBazlDLEVBQUEsR0FBQTkwQixPQUFBMDBCLEVBQUE5OEMsUUFDQW05QyxLQUNBeDFDLEVBQUFrSyxLQUNBbXJDLEdBQUEsRUFDQUMsR0FBQSxDQUVBLEtBQUFILEVBQUE5OEMsT0FBQSxDQUVBLEdBQUFvOUMsSUFBQSxDQUlBLE9BSEF6MUMsR0FBQXRELFdBQUEsV0FDQSs0QyxHQUFBL3hCLEVBQUE2eEIsRUFBQUEsRUFBQXYxQyxLQUVBLFdBQ0F5MUMsR0FBQSxHQUlBLE1BQUEsS0FBQU4sRUFBQTk4QyxPQUVBNlIsS0FBQXZOLE9BQUF3NEMsRUFBQSxHQUFBLFNBQUFwN0MsRUFBQXU3QixFQUFBN3dCLEdBQ0E4d0MsRUFBQSxHQUFBeDdDLEVBQ0FtcEMsRUFBQSxHQUFBNU4sRUFDQTVSLEVBQUE2eEIsRUFBQXg3QyxJQUFBdTdCLEVBQUFpZ0IsRUFBQXJTLEVBQUF6K0IsTUFJQXhMLEVBQUFrOEMsRUFBQSxTQUFBN0osRUFBQTd6QyxHQUNBLEdBQUFpK0MsR0FBQTExQyxFQUFBckQsT0FBQTJ1QyxFQUFBLFNBQUF2eEMsRUFBQXU3QixHQUNBaWdCLEVBQUE5OUMsR0FBQXNDLEVBQ0FtcEMsRUFBQXpyQyxHQUFBNjlCLEVBQ0ErZixJQUNBQSxHQUFBLEVBQ0FyMUMsRUFBQXRELFdBQUEwNEMsS0FHQUksR0FBQWozQyxLQUFBbTNDLEtBY0EsV0FDQSxLQUFBRixFQUFBbjlDLFFBQ0FtOUMsRUFBQTMxQixhQTZEQWtYLGlCQUFBLFNBQUF0K0IsRUFBQWlyQixHQW9CQSxRQUFBaXlCLEdBQUFDLEdBQ0F6Z0IsRUFBQXlnQixDQUNBLElBQUFDLEdBQUF6OEMsRUFBQTA4QyxFQUFBQyxFQUFBQyxDQUdBLEtBQUExNUMsRUFBQTY0QixHQUFBLENBRUEsR0FBQXo2QixFQUFBeTZCLEdBS0EsR0FBQTM4QixFQUFBMjhCLEdBQUEsQ0FDQUcsSUFBQTJnQixJQUVBM2dCLEVBQUEyZ0IsRUFDQUMsRUFBQTVnQixFQUFBajlCLE9BQUEsRUFDQTg5QyxLQUdBTixFQUFBMWdCLEVBQUE5OEIsT0FFQTY5QyxJQUFBTCxJQUVBTSxJQUNBN2dCLEVBQUFqOUIsT0FBQTY5QyxFQUFBTCxFQUdBLEtBQUEsR0FBQXArQyxHQUFBLEVBQUFvK0MsRUFBQXArQyxFQUFBQSxJQUNBdStDLEVBQUExZ0IsRUFBQTc5QixHQUNBcytDLEVBQUE1Z0IsRUFBQTE5QixHQUVBcStDLEVBQUFFLElBQUFBLEdBQUFELElBQUFBLEVBQ0FELEdBQUFFLElBQUFELElBQ0FJLElBQ0E3Z0IsRUFBQTc5QixHQUFBcytDLE9BR0EsQ0FDQXpnQixJQUFBOGdCLElBRUE5Z0IsRUFBQThnQixLQUNBRixFQUFBLEVBQ0FDLEtBR0FOLEVBQUEsQ0FDQSxLQUFBejhDLElBQUErN0IsR0FDQTc3QixHQUFBQyxLQUFBNDdCLEVBQUEvN0IsS0FDQXk4QyxJQUNBRSxFQUFBNWdCLEVBQUEvN0IsR0FDQTQ4QyxFQUFBMWdCLEVBQUFsOEIsR0FFQUEsSUFBQWs4QixJQUNBd2dCLEVBQUFFLElBQUFBLEdBQUFELElBQUFBLEVBQ0FELEdBQUFFLElBQUFELElBQ0FJLElBQ0E3Z0IsRUFBQWw4QixHQUFBMjhDLEtBR0FHLElBQ0E1Z0IsRUFBQWw4QixHQUFBMjhDLEVBQ0FJLEtBSUEsSUFBQUQsRUFBQUwsRUFBQSxDQUVBTSxHQUNBLEtBQUEvOEMsSUFBQWs4QixHQUNBaDhCLEdBQUFDLEtBQUE0N0IsRUFBQS83QixLQUNBODhDLFVBQ0E1Z0IsR0FBQWw4QixTQWhFQWs4QixLQUFBSCxJQUNBRyxFQUFBSCxFQUNBZ2hCLElBbUVBLE9BQUFBLElBR0EsUUFBQUUsS0FTQSxHQVJBQyxHQUNBQSxHQUFBLEVBQ0E1eUIsRUFBQXlSLEVBQUFBLEVBQUFuMUIsSUFFQTBqQixFQUFBeVIsRUFBQW9oQixFQUFBdjJDLEdBSUF3MkMsRUFDQSxHQUFBOTdDLEVBQUF5NkIsR0FHQSxHQUFBMzhCLEVBQUEyOEIsR0FBQSxDQUNBb2hCLEVBQUEsR0FBQTkxQixPQUFBMFUsRUFBQTk4QixPQUNBLEtBQUEsR0FBQVosR0FBQSxFQUFBQSxFQUFBMDlCLEVBQUE5OEIsT0FBQVosSUFDQTgrQyxFQUFBOStDLEdBQUEwOUIsRUFBQTE5QixPQUVBLENBQ0E4K0MsSUFDQSxLQUFBLEdBQUFuOUMsS0FBQSs3QixHQUNBNzdCLEdBQUFDLEtBQUE0N0IsRUFBQS83QixLQUNBbTlDLEVBQUFuOUMsR0FBQSs3QixFQUFBLzdCLFFBVkFtOUMsR0FBQXBoQixFQS9HQXdnQixFQUFBOWUsV0FBQSxDQUVBLElBRUExQixHQUdBRyxFQUVBaWhCLEVBUEF2MkMsRUFBQWtLLEtBU0Fzc0MsRUFBQTl5QixFQUFBcnJCLE9BQUEsRUFDQTg5QyxFQUFBLEVBQ0FNLEVBQUF6akMsRUFBQXZhLEVBQUFrOUMsR0FDQU0sS0FDQUcsS0FDQUUsR0FBQSxFQUNBSixFQUFBLENBK0dBLE9BQUFoc0MsTUFBQXZOLE9BQUE4NUMsRUFBQUosSUFzREF2TixRQUFBLFdBQ0EsR0FBQTROLEdBQUEzOEMsRUFBQXdqQixFQUNBbzVCLEVBQ0F0K0MsRUFDQXUrQyxFQUNBQyxFQUFBckMsRUFFQXNDLEVBQUFDLEVBSEFDLEVBQUF4RCxFQUNBdjNCLEVBQUEvUixLQUNBK3NDLElBR0E3QyxHQUFBLFdBRUFwakMsRUFBQTJULG1CQUVBemEsT0FBQWdKLEdBQUEsT0FBQXlnQyxJQUdBM2lDLEVBQUE2VCxNQUFBRyxPQUFBMnVCLEdBQ0FnQixLQUdBakIsRUFBQSxJQUVBLEdBQUEsQ0FJQSxJQUhBa0QsR0FBQSxFQUNBcEMsRUFBQXY0QixFQUVBaTdCLEVBQUE3K0MsUUFBQSxDQUNBLElBQ0EwK0MsRUFBQUcsRUFBQXIzQixRQUNBazNCLEVBQUF0eUMsTUFBQTB5QyxNQUFBSixFQUFBdGQsV0FBQXNkLEVBQUFqM0IsUUFDQSxNQUFBamUsR0FDQTJQLEVBQUEzUCxHQUVBNnhDLEVBQUEsS0FHQTBELEVBQ0EsRUFBQSxDQUNBLEdBQUFULEVBQUFuQyxFQUFBekIsV0FHQSxJQURBMTZDLEVBQUFzK0MsRUFBQXQrQyxPQUNBQSxLQUNBLElBSUEsR0FIQXErQyxFQUFBQyxFQUFBdCtDLEdBSUEsSUFBQTBCLEVBQUEyOEMsRUFBQWx4QyxJQUFBZ3ZDLE9BQUFqM0IsRUFBQW01QixFQUFBbjVCLFFBQ0FtNUIsRUFBQXhCLEdBQ0FoMkMsRUFBQW5GLEVBQUF3akIsR0FDQSxnQkFBQXhqQixJQUFBLGdCQUFBd2pCLElBQ0F0YyxNQUFBbEgsSUFBQWtILE1BQUFzYyxLQWNBLEdBQUFtNUIsSUFBQWhELEVBQUEsQ0FHQWtELEdBQUEsQ0FDQSxNQUFBUSxRQWpCQVIsSUFBQSxFQUNBbEQsRUFBQWdELEVBQ0FBLEVBQUFuNUIsS0FBQW01QixFQUFBeEIsR0FBQS8yQyxFQUFBcEUsRUFBQSxNQUFBQSxFQUNBMjhDLEVBQUF6MkMsR0FBQWxHLEVBQUF3akIsSUFBQW0zQixFQUFBMzZDLEVBQUF3akIsRUFBQWkzQixHQUNBLEVBQUF3QyxJQUNBRixFQUFBLEVBQUFFLEVBQ0FDLEVBQUFILEtBQUFHLEVBQUFILE9BQ0FHLEVBQUFILEdBQUF2NEMsTUFDQTg0QyxJQUFBaCtDLEVBQUFxOUMsRUFBQW5VLEtBQUEsUUFBQW1VLEVBQUFuVSxJQUFBOStCLE1BQUFpekMsRUFBQW5VLElBQUFsbUMsWUFBQXE2QyxFQUFBblUsSUFDQTVnQixPQUFBNW5CLEVBQ0E2bkIsT0FBQXJFLEtBVUEsTUFBQTFiLEdBQ0EyUCxFQUFBM1AsR0FRQSxLQUFBZzFDLEVBQUFyQyxFQUFBbkIsaUJBQUFtQixFQUFBdkIsYUFDQXVCLElBQUF2NEIsR0FBQXU0QixFQUFBeEIsZUFDQSxLQUFBd0IsSUFBQXY0QixLQUFBNDZCLEVBQUFyQyxFQUFBeEIsZ0JBQ0F3QixFQUFBQSxFQUFBMXFCLGNBR0EwcUIsRUFBQXFDLEVBSUEsS0FBQUQsR0FBQU0sRUFBQTcrQyxVQUFBMitDLElBRUEsS0FEQTFDLEtBQ0FiLEVBQUEsU0FDQSw0RkFFQUQsRUFBQXlELFNBR0FMLEdBQUFNLEVBQUE3K0MsT0FJQSxLQUZBaThDLElBRUFnRCxFQUFBai9DLFFBQ0EsSUFDQWkvQyxFQUFBejNCLFVBQ0EsTUFBQWhlLEdBQ0EyUCxFQUFBM1AsS0F3Q0FtRixTQUFBLFdBRUEsSUFBQWtELEtBQUF5cEIsWUFBQSxDQUNBLEdBQUE5M0IsR0FBQXFPLEtBQUE0ZixPQUVBNWYsTUFBQTY5QixXQUFBLFlBQ0E3OUIsS0FBQXlwQixhQUFBLEVBRUF6cEIsT0FBQWdKLEdBRUFsQyxFQUFBeVQseUJBR0E4dkIsRUFBQXJxQyxNQUFBQSxLQUFBbXBDLGdCQUNBLEtBQUEsR0FBQWtFLEtBQUFydEMsTUFBQWtwQyxnQkFDQXFCLEVBQUF2cUMsS0FBQUEsS0FBQWtwQyxnQkFBQW1FLEdBQUFBLEVBS0ExN0MsSUFBQUEsRUFBQW8zQyxhQUFBL29DLE9BQUFyTyxFQUFBbzNDLFlBQUEvb0MsS0FBQThvQyxlQUNBbjNDLEdBQUFBLEVBQUFxM0MsYUFBQWhwQyxPQUFBck8sRUFBQXEzQyxZQUFBaHBDLEtBQUErcEMsZUFDQS9wQyxLQUFBK3BDLGdCQUFBL3BDLEtBQUErcEMsY0FBQWpCLGNBQUE5b0MsS0FBQThvQyxlQUNBOW9DLEtBQUE4b0MsZ0JBQUE5b0MsS0FBQThvQyxjQUFBaUIsY0FBQS9wQyxLQUFBK3BDLGVBR0EvcEMsS0FBQWxELFNBQUFrRCxLQUFBNCtCLFFBQUE1K0IsS0FBQXZGLE9BQUF1RixLQUFBeE4sV0FBQXdOLEtBQUFnMUIsWUFBQWxqQyxFQUNBa08sS0FBQW9tQixJQUFBcG1CLEtBQUF2TixPQUFBdU4sS0FBQSs0QixZQUFBLFdBQUEsTUFBQWpuQyxJQUNBa08sS0FBQWlwQyxlQUdBanBDLEtBQUE4b0MsY0FBQSxLQUNBZ0IsRUFBQTlwQyxRQStCQWl0QyxNQUFBLFNBQUE3TCxFQUFBeHJCLEdBQ0EsTUFBQTlNLEdBQUFzNEIsR0FBQXBoQyxLQUFBNFYsSUFpQ0FwakIsV0FBQSxTQUFBNHVDLEVBQUF4ckIsR0FHQTVNLEVBQUFpc0IsU0FBQStYLEVBQUE3K0MsUUFDQTJZLEVBQUE2VCxNQUFBLFdBQ0FxeUIsRUFBQTcrQyxRQUNBNmEsRUFBQTQxQixZQUtBb08sRUFBQTM0QyxNQUFBa0csTUFBQXlGLEtBQUF1dkIsV0FBQTZSLEVBQUF4ckIsT0FBQUEsS0FHQWd2QixhQUFBLFNBQUE3dUMsR0FDQXEzQyxFQUFBLzRDLEtBQUEwQixJQWdEQTBFLE9BQUEsU0FBQTJtQyxHQUNBLElBQ0E4SSxFQUFBLFNBQ0EsS0FDQSxNQUFBbHFDLE1BQUFpdEMsTUFBQTdMLEdBQ0EsUUFDQWdKLEtBRUEsTUFBQXp5QyxHQUNBMlAsRUFBQTNQLEdBQ0EsUUFDQSxJQUNBcVIsRUFBQTQxQixVQUNBLE1BQUFqbkMsR0FFQSxLQURBMlAsR0FBQTNQLEdBQ0FBLEtBc0JBcTlCLFlBQUEsU0FBQW9NLEdBS0EsUUFBQWtNLEtBQ0EveUMsRUFBQTB5QyxNQUFBN0wsR0FMQSxHQUFBN21DLEdBQUF5RixJQUNBb2hDLElBQUFzSixFQUFBcjJDLEtBQUFpNUMsR0FDQTNDLEtBa0NBdmtCLElBQUEsU0FBQTdzQixFQUFBaWdCLEdBQ0EsR0FBQSt6QixHQUFBdnRDLEtBQUFpcEMsWUFBQTF2QyxFQUNBZzBDLEtBQ0F2dEMsS0FBQWlwQyxZQUFBMXZDLEdBQUFnMEMsTUFFQUEsRUFBQWw1QyxLQUFBbWxCLEVBRUEsSUFBQTh3QixHQUFBdHFDLElBQ0EsR0FDQXNxQyxHQUFBcEIsZ0JBQUEzdkMsS0FDQSt3QyxFQUFBcEIsZ0JBQUEzdkMsR0FBQSxHQUVBK3dDLEVBQUFwQixnQkFBQTN2QyxXQUNBK3dDLEVBQUFBLEVBQUExcUIsUUFFQSxJQUFBOXBCLEdBQUFrSyxJQUNBLE9BQUEsWUFDQSxHQUFBd3RDLEdBQUFELEVBQUF4NUMsUUFBQXlsQixFQUNBLE1BQUFnMEIsSUFDQUQsRUFBQUMsR0FBQSxLQUNBakQsRUFBQXowQyxFQUFBLEVBQUF5RCxNQTRCQWswQyxNQUFBLFNBQUFsMEMsRUFBQTVELEdBQ0EsR0FDQTQzQyxHQWFBaGdELEVBQUFZLEVBZEF1SixLQUVBNkMsRUFBQXlGLEtBQ0F3UixHQUFBLEVBQ0FSLEdBQ0F6WCxLQUFBQSxFQUNBbTBDLFlBQUFuekMsRUFDQWlYLGdCQUFBLFdBQUFBLEdBQUEsR0FDQWd0QixlQUFBLFdBQ0F4dEIsRUFBQUUsa0JBQUEsR0FFQUEsa0JBQUEsR0FFQXk4QixFQUFBcDRDLEdBQUF5YixHQUFBdGpCLFVBQUEsRUFHQSxHQUFBLENBR0EsSUFGQTYvQyxFQUFBaHpDLEVBQUEwdUMsWUFBQTF2QyxJQUFBN0IsRUFDQXNaLEVBQUE2NEIsYUFBQXR2QyxFQUNBaE4sRUFBQSxFQUFBWSxFQUFBby9DLEVBQUFwL0MsT0FBQUEsRUFBQVosRUFBQUEsSUFHQSxHQUFBZ2dELEVBQUFoZ0QsR0FNQSxJQUVBZ2dELEVBQUFoZ0QsR0FBQTBJLE1BQUEsS0FBQTAzQyxHQUNBLE1BQUFoMkMsR0FDQTJQLEVBQUEzUCxPQVRBNDFDLEdBQUF2NUMsT0FBQXpHLEVBQUEsR0FDQUEsSUFDQVksR0FXQSxJQUFBcWpCLEVBRUEsTUFEQVIsR0FBQTY0QixhQUFBLEtBQ0E3NEIsQ0FHQXpXLEdBQUFBLEVBQUFxbEIsY0FDQXJsQixFQUlBLE9BRkF5VyxHQUFBNjRCLGFBQUEsS0FFQTc0QixHQXlCQTZzQixXQUFBLFNBQUF0a0MsRUFBQTVELEdBQ0EsR0FBQW9jLEdBQUEvUixLQUNBc3FDLEVBQUF2NEIsRUFDQTQ2QixFQUFBNTZCLEVBQ0FmLEdBQ0F6WCxLQUFBQSxFQUNBbTBDLFlBQUEzN0IsRUFDQXlzQixlQUFBLFdBQ0F4dEIsRUFBQUUsa0JBQUEsR0FFQUEsa0JBQUEsRUFHQSxLQUFBYSxFQUFBbTNCLGdCQUFBM3ZDLEdBQUEsTUFBQXlYLEVBTUEsS0FKQSxHQUNBbWQsR0FBQTVnQyxFQUFBWSxFQURBdy9DLEVBQUFwNEMsR0FBQXliLEdBQUF0akIsVUFBQSxHQUlBNDhDLEVBQUFxQyxHQUFBLENBR0EsSUFGQTM3QixFQUFBNjRCLGFBQUFTLEVBQ0FuYyxFQUFBbWMsRUFBQXJCLFlBQUExdkMsT0FDQWhNLEVBQUEsRUFBQVksRUFBQWdnQyxFQUFBaGdDLE9BQUFBLEVBQUFaLEVBQUFBLElBRUEsR0FBQTRnQyxFQUFBNWdDLEdBT0EsSUFDQTRnQyxFQUFBNWdDLEdBQUEwSSxNQUFBLEtBQUEwM0MsR0FDQSxNQUFBaDJDLEdBQ0EyUCxFQUFBM1AsT0FUQXcyQixHQUFBbjZCLE9BQUF6RyxFQUFBLEdBQ0FBLElBQ0FZLEdBZUEsTUFBQXcrQyxFQUFBckMsRUFBQXBCLGdCQUFBM3ZDLElBQUErd0MsRUFBQXZCLGFBQ0F1QixJQUFBdjRCLEdBQUF1NEIsRUFBQXhCLGVBQ0EsS0FBQXdCLElBQUF2NEIsS0FBQTQ2QixFQUFBckMsRUFBQXhCLGdCQUNBd0IsRUFBQUEsRUFBQTFxQixRQU1BLE1BREE1TyxHQUFBNjRCLGFBQUEsS0FDQTc0QixHQUlBLElBQUFoSSxHQUFBLEdBQUFpaEMsR0FHQStDLEVBQUFoa0MsRUFBQTRrQyxnQkFDQVIsRUFBQXBrQyxFQUFBNmtDLHFCQUNBbkQsRUFBQTFoQyxFQUFBOGtDLG9CQUVBLE9BQUE5a0MsS0E4REEsUUFBQXBJLE1BQ0EsR0FBQTZkLEdBQUEsb0NBQ0FFLEVBQUEsNENBa0JBM2UsTUFBQXllLDJCQUFBLFNBQUFDLEdBQ0EsTUFBQXJzQixHQUFBcXNCLElBQ0FELEVBQUFDLEVBQ0ExZSxNQUVBeWUsR0FvQkF6ZSxLQUFBMmUsNEJBQUEsU0FBQUQsR0FDQSxNQUFBcnNCLEdBQUFxc0IsSUFDQUMsRUFBQUQsRUFDQTFlLE1BRUEyZSxHQUdBM2UsS0FBQW1TLEtBQUEsV0FDQSxNQUFBLFVBQUE0N0IsRUFBQUMsR0FDQSxHQUNBQyxHQURBQyxFQUFBRixFQUFBcnZCLEVBQUFGLENBR0EsT0FEQXd2QixHQUFBN1csR0FBQTJXLEdBQUEvekIsS0FDQSxLQUFBaTBCLEdBQUFBLEVBQUFsZ0QsTUFBQW1nRCxHQUdBSCxFQUZBLFVBQUFFLElBZ0NBLFFBQUFFLElBQUFDLEdBQ0EsR0FBQSxTQUFBQSxFQUNBLE1BQUFBLEVBQ0EsSUFBQTEvQyxFQUFBMC9DLEdBQUEsQ0FLQSxHQUFBQSxFQUFBcjZDLFFBQUEsT0FBQSxHQUNBLEtBQUFzNkMsSUFBQSxTQUNBLHVEQUFBRCxFQUtBLE9BSEFBLEdBQUFFLEdBQUFGLEdBQ0F0Z0QsUUFBQSxTQUFBLE1BQ0FBLFFBQUEsTUFBQSxjQUNBLEdBQUFrRCxRQUFBLElBQUFvOUMsRUFBQSxLQUNBLEdBQUFyOUMsRUFBQXE5QyxHQUlBLE1BQUEsSUFBQXA5QyxRQUFBLElBQUFvOUMsRUFBQWw2QyxPQUFBLElBRUEsTUFBQW02QyxJQUFBLFdBQ0Esa0VBS0EsUUFBQUUsSUFBQUMsR0FDQSxHQUFBQyxLQU1BLE9BTEFwOEMsR0FBQW04QyxJQUNBei9DLEVBQUF5L0MsRUFBQSxTQUFBSixHQUNBSyxFQUFBcDZDLEtBQUE4NUMsR0FBQUMsTUFHQUssRUF1RUEsUUFBQWhsQyxNQUNBekosS0FBQTB1QyxhQUFBQSxFQUdBLElBQUFDLElBQUEsUUFDQUMsSUF3QkE1dUMsTUFBQTJ1QyxxQkFBQSxTQUFBOStDLEdBSUEsTUFIQW5DLFdBQUFTLFNBQ0F3Z0QsRUFBQUosR0FBQTErQyxJQUVBOCtDLEdBOEJBM3VDLEtBQUE0dUMscUJBQUEsU0FBQS8rQyxHQUlBLE1BSEFuQyxXQUFBUyxTQUNBeWdELEVBQUFMLEdBQUExK0MsSUFFQSsrQyxHQUdBNXVDLEtBQUFtUyxNQUFBLFlBQUEsU0FBQW9DLEdBV0EsUUFBQXM2QixHQUFBVCxFQUFBbFUsR0FDQSxNQUFBLFNBQUFrVSxFQUNBelksR0FBQXVFLEtBR0FrVSxFQUFBN2hDLEtBQUEydEIsRUFBQWxnQixNQUlBLFFBQUE4MEIsR0FBQXAyQixHQUNBLEdBQ0FuckIsR0FBQSt0QixFQURBNGUsRUFBQTlDLEdBQUExZSxFQUFBdm1CLFlBQ0E0OEMsR0FBQSxDQUVBLEtBQUF4aEQsRUFBQSxFQUFBK3RCLEVBQUFxekIsRUFBQXhnRCxPQUFBbXRCLEVBQUEvdEIsRUFBQUEsSUFDQSxHQUFBc2hELEVBQUFGLEVBQUFwaEQsR0FBQTJzQyxHQUFBLENBQ0E2VSxHQUFBLENBQ0EsT0FHQSxHQUFBQSxFQUVBLElBQUF4aEQsRUFBQSxFQUFBK3RCLEVBQUFzekIsRUFBQXpnRCxPQUFBbXRCLEVBQUEvdEIsRUFBQUEsSUFDQSxHQUFBc2hELEVBQUFELEVBQUFyaEQsR0FBQTJzQyxHQUFBLENBQ0E2VSxHQUFBLENBQ0EsT0FJQSxNQUFBQSxHQUdBLFFBQUFDLEdBQUFDLEdBQ0EsR0FBQUMsR0FBQSxTQUFBQyxHQUNBbnZDLEtBQUFvdkMscUJBQUEsV0FDQSxNQUFBRCxJQVlBLE9BVEFGLEtBQ0FDLEVBQUFsNUIsVUFBQSxHQUFBaTVCLElBRUFDLEVBQUFsNUIsVUFBQWxsQixRQUFBLFdBQ0EsTUFBQWtQLE1BQUFvdkMsd0JBRUFGLEVBQUFsNUIsVUFBQTdqQixTQUFBLFdBQ0EsTUFBQTZOLE1BQUFvdkMsdUJBQUFqOUMsWUFFQSs4QyxFQTZCQSxRQUFBRyxHQUFBdGhDLEVBQUFvaEMsR0FDQSxHQUFBRyxHQUFBQyxFQUFBbmdELGVBQUEyZSxHQUFBd2hDLEVBQUF4aEMsR0FBQSxJQUNBLEtBQUF1aEMsRUFDQSxLQUFBakIsSUFBQSxXQUNBLDBFQUNBdGdDLEVBQUFvaEMsRUFFQSxJQUFBLE9BQUFBLEdBQUEvOEMsRUFBQSs4QyxJQUFBLEtBQUFBLEVBQ0EsTUFBQUEsRUFJQSxJQUFBLGdCQUFBQSxHQUNBLEtBQUFkLElBQUEsUUFDQSxzRkFDQXRnQyxFQUVBLE9BQUEsSUFBQXVoQyxHQUFBSCxHQXFCQSxRQUFBcitDLEdBQUEwK0MsR0FDQSxNQUFBQSxhQUFBQyxHQUNBRCxFQUFBSix1QkFFQUksRUFtQkEsUUFBQTNXLEdBQUE5cUIsRUFBQXloQyxHQUNBLEdBQUEsT0FBQUEsR0FBQXA5QyxFQUFBbzlDLElBQUEsS0FBQUEsRUFDQSxNQUFBQSxFQUVBLElBQUE3NkMsR0FBQTQ2QyxFQUFBbmdELGVBQUEyZSxHQUFBd2hDLEVBQUF4aEMsR0FBQSxJQUNBLElBQUFwWixHQUFBNjZDLFlBQUE3NkMsR0FDQSxNQUFBNjZDLEdBQUFKLHNCQUtBLElBQUFyaEMsSUFBQTJnQyxHQUFBN2pCLGFBQUEsQ0FDQSxHQUFBaWtCLEVBQUFVLEdBQ0EsTUFBQUEsRUFFQSxNQUFBbkIsSUFBQSxXQUNBLGtGQUNBbUIsRUFBQXI5QyxZQUVBLEdBQUE0YixJQUFBMmdDLEdBQUE5akIsS0FDQSxNQUFBOGtCLEdBQUFGLEVBRUEsTUFBQW5CLElBQUEsU0FBQSx3REF2S0EsR0FBQXFCLEdBQUEsU0FBQTUzQyxHQUNBLEtBQUF1MkMsSUFBQSxTQUFBLHdEQUdBOTVCLEdBQUEyQixJQUFBLGVBQ0F3NUIsRUFBQW43QixFQUFBalosSUFBQSxhQXFEQSxJQUFBbTBDLEdBQUFULElBQ0FPLElBK0dBLE9BN0dBQSxHQUFBYixHQUFBOWpCLE1BQUFva0IsRUFBQVMsR0FDQUYsRUFBQWIsR0FBQWlCLEtBQUFYLEVBQUFTLEdBQ0FGLEVBQUFiLEdBQUFrQixLQUFBWixFQUFBUyxHQUNBRixFQUFBYixHQUFBbUIsSUFBQWIsRUFBQVMsR0FDQUYsRUFBQWIsR0FBQTdqQixjQUFBbWtCLEVBQUFPLEVBQUFiLEdBQUFrQixPQXlHQVAsUUFBQUEsRUFDQXhXLFdBQUFBLEVBQ0EvbkMsUUFBQUEsS0E4UkEsUUFBQXlZLE1BQ0EsR0FBQXFWLElBQUEsQ0FhQTVlLE1BQUE0ZSxRQUFBLFNBQUEvdUIsR0FJQSxNQUhBbkMsV0FBQVMsU0FDQXl3QixJQUFBL3VCLEdBRUErdUIsR0FrREE1ZSxLQUFBbVMsTUFBQSxTQUFBLGVBQUEsU0FDQXJKLEVBQUFVLEdBR0EsR0FBQW9WLEdBQUEsRUFBQTJFLEdBQ0EsS0FBQThxQixJQUFBLFdBQ0EscVBBS0EsSUFBQXlCLEdBQUFoN0MsRUFBQTQ1QyxHQWFBb0IsR0FBQUMsVUFBQSxXQUNBLE1BQUFueEIsSUFFQWt4QixFQUFBVCxRQUFBN2xDLEVBQUE2bEMsUUFDQVMsRUFBQWpYLFdBQUFydkIsRUFBQXF2QixXQUNBaVgsRUFBQWgvQyxRQUFBMFksRUFBQTFZLFFBRUE4dEIsSUFDQWt4QixFQUFBVCxRQUFBUyxFQUFBalgsV0FBQSxTQUFBOXFCLEVBQUFsZSxHQUFBLE1BQUFBLElBQ0FpZ0QsRUFBQWgvQyxRQUFBaUIsR0FzQkErOUMsRUFBQUUsUUFBQSxTQUFBamlDLEVBQUFxekIsR0FDQSxHQUFBbjBCLEdBQUFuRSxFQUFBczRCLEVBQ0EsT0FBQW4wQixHQUFBc2YsU0FBQXRmLEVBQUF4TixTQUNBd04sRUFFQW5FLEVBQUFzNEIsRUFBQSxTQUFBdnhDLEdBQ0EsTUFBQWlnRCxHQUFBalgsV0FBQTlxQixFQUFBbGUsS0F3UEEsSUFBQTZHLEdBQUFvNUMsRUFBQUUsUUFDQW5YLEVBQUFpWCxFQUFBalgsV0FDQXdXLEVBQUFTLEVBQUFULE9BZUEsT0FiQXRnRCxHQUFBMi9DLEdBQUEsU0FBQXVCLEVBQUExMkMsR0FDQSxHQUFBMjJDLEdBQUF0OEMsR0FBQTJGLEVBQ0F1MkMsR0FBQTlrQyxHQUFBLFlBQUFrbEMsSUFBQSxTQUFBOU8sR0FDQSxNQUFBMXFDLEdBQUF1NUMsRUFBQTdPLElBRUEwTyxFQUFBOWtDLEdBQUEsZUFBQWtsQyxJQUFBLFNBQUFyZ0QsR0FDQSxNQUFBZ3BDLEdBQUFvWCxFQUFBcGdELElBRUFpZ0QsRUFBQTlrQyxHQUFBLFlBQUFrbEMsSUFBQSxTQUFBcmdELEdBQ0EsTUFBQXcvQyxHQUFBWSxFQUFBcGdELE1BSUFpZ0QsSUFrQkEsUUFBQW5tQyxNQUNBM0osS0FBQW1TLE1BQUEsVUFBQSxZQUFBLFNBQUEvSCxFQUFBaEQsR0FDQSxHQUtBK29DLEdBS0FwaUQsRUFWQXFpRCxLQUNBQyxFQUNBOStDLEdBQUEsZ0JBQUFnYixLQUFBM1ksSUFBQXdXLEVBQUFrbUMsZUFBQUMsaUJBQUEsSUFDQUMsRUFBQSxTQUFBdDlDLE1BQUFrWCxFQUFBa21DLGVBQUFDLFdBQ0F2akQsRUFBQW9hLEVBQUEsT0FFQXFwQyxFQUFBLDRCQUNBQyxFQUFBMWpELEVBQUF3cEMsTUFBQXhwQyxFQUFBd3BDLEtBQUEvMEIsTUFDQWt2QyxHQUFBLEVBQ0FDLEdBQUEsQ0FHQSxJQUFBRixFQUFBLENBQ0EsSUFBQSxHQUFBdDlDLEtBQUFzOUMsR0FDQSxHQUFBM2lELEVBQUEwaUQsRUFBQWxrQyxLQUFBblosR0FBQSxDQUNBKzhDLEVBQUFwaUQsRUFBQSxHQUNBb2lELEVBQUFBLEVBQUF4M0IsT0FBQSxFQUFBLEdBQUF2TixjQUFBK2tDLEVBQUF4M0IsT0FBQSxFQUNBLE9BSUF3M0IsSUFDQUEsRUFBQSxpQkFBQU8sSUFBQSxVQUdBQyxLQUFBLGNBQUFELElBQUFQLEVBQUEsY0FBQU8sSUFDQUUsS0FBQSxhQUFBRixJQUFBUCxFQUFBLGFBQUFPLEtBRUFMLEdBQUFNLEdBQUFDLElBQ0FELEVBQUFqaUQsRUFBQWdpRCxFQUFBRyxrQkFDQUQsRUFBQWxpRCxFQUFBZ2lELEVBQUFJLGtCQUtBLE9BVUE3M0IsV0FBQTdPLEVBQUE2TyxVQUFBN08sRUFBQTZPLFFBQUE4M0IsV0FBQSxFQUFBVixHQUFBRyxHQUVBUSxTQUFBLFNBQUFoZ0MsR0FNQSxHQUFBLFVBQUFBLEdBQUEsSUFBQXVTLEdBQUEsT0FBQSxDQUVBLElBQUFueEIsRUFBQWcrQyxFQUFBcC9CLElBQUEsQ0FDQSxHQUFBaWdDLEdBQUFqa0QsRUFBQXFmLGNBQUEsTUFDQStqQyxHQUFBcC9CLEdBQUEsS0FBQUEsSUFBQWlnQyxHQUdBLE1BQUFiLEdBQUFwL0IsSUFFQXZRLElBQUFBLEtBQ0EwdkMsYUFBQUEsRUFDQVEsWUFBQUEsRUFDQUMsV0FBQUEsRUFDQVAsUUFBQUEsS0EwQkEsUUFBQXRtQyxNQUNBL0osS0FBQW1TLE1BQUEsaUJBQUEsUUFBQSxLQUFBLE9BQUEsU0FBQXZJLEVBQUE1QixFQUFBa0IsRUFBQUksR0FDQSxRQUFBNG5DLEdBQUFDLEVBQUFDLEdBb0NBLFFBQUFDLEdBQUExZSxHQUNBLElBQUF5ZSxFQUNBLEtBQUFwMEIsSUFBQSxTQUFBLHNEQUNBbTBCLEVBQUF4ZSxFQUFBckIsT0FBQXFCLEVBQUFrQyxXQUVBLE9BQUEzckIsR0FBQTBwQixPQUFBRCxHQXhDQXVlLEVBQUFJLHVCQU9BNWlELEVBQUF5aUQsSUFBQXZuQyxFQUFBdE8sSUFBQTYxQyxLQUNBQSxFQUFBN25DLEVBQUFpb0Msc0JBQUFKLEdBR0EsSUFBQXpmLEdBQUExcEIsRUFBQXlwQixVQUFBenBCLEVBQUF5cEIsU0FBQUMsaUJBRUFqakMsSUFBQWlqQyxHQUNBQSxFQUFBQSxFQUFBOXhCLE9BQUEsU0FBQTR4QyxHQUNBLE1BQUFBLEtBQUFwaEIsS0FFQXNCLElBQUF0QixLQUNBc0IsRUFBQSxLQUdBLElBQUErZixJQUNBbjhCLE1BQUExTCxFQUNBOG5CLGtCQUFBQSxFQUdBLE9BQUExcEIsR0FBQTFNLElBQUE2MUMsRUFBQU0sR0FDQSxXQUFBLFdBQ0FQLEVBQUFJLHlCQUVBditDLEtBQUEsU0FBQTIvQixHQUVBLE1BREE5b0IsR0FBQWlKLElBQUFzK0IsRUFBQXplLEVBQUFoNEIsTUFDQWc0QixFQUFBaDRCLE1BQ0EyMkMsR0FhQSxNQUZBSCxHQUFBSSxxQkFBQSxFQUVBSixJQUlBLFFBQUFqbkMsTUFDQWpLLEtBQUFtUyxNQUFBLGFBQUEsV0FBQSxZQUNBLFNBQUFuSixFQUFBbEMsRUFBQTRCLEdBU0EsR0FBQWdwQyxLQW9HQSxPQXRGQUEsR0FBQUMsYUFBQSxTQUFBaCtDLEVBQUE0N0IsRUFBQXFpQixHQUNBLEdBQUEvMEIsR0FBQWxwQixFQUFBaytDLHVCQUFBLGNBQ0FDLElBa0JBLE9BakJBL2lELEdBQUE4dEIsRUFBQSxTQUFBeVIsR0FDQSxHQUFBeWpCLEdBQUFsM0MsR0FBQWxILFFBQUEyNkIsR0FBQTV6QixLQUFBLFdBQ0FxM0MsSUFDQWhqRCxFQUFBZ2pELEVBQUEsU0FBQUMsR0FDQSxHQUFBSixFQUFBLENBQ0EsR0FBQXhELEdBQUEsR0FBQXA5QyxRQUFBLFVBQUFzOUMsR0FBQS9lLEdBQUEsY0FDQTZlLEdBQUFsN0MsS0FBQTgrQyxJQUNBRixFQUFBejlDLEtBQUFpNkIsT0FHQSxJQUFBMGpCLEVBQUFqK0MsUUFBQXc3QixJQUNBdWlCLEVBQUF6OUMsS0FBQWk2QixPQU1Bd2pCLEdBZUFKLEVBQUFPLFdBQUEsU0FBQXQrQyxFQUFBNDdCLEVBQUFxaUIsR0FFQSxJQUFBLEdBREFNLElBQUEsTUFBQSxXQUFBLFNBQ0ExMkIsRUFBQSxFQUFBQSxFQUFBMDJCLEVBQUEvakQsU0FBQXF0QixFQUFBLENBQ0EsR0FBQTIyQixHQUFBUCxFQUFBLElBQUEsS0FDQTdpQyxFQUFBLElBQUFtakMsRUFBQTEyQixHQUFBLFFBQUEyMkIsRUFBQSxJQUFBNWlCLEVBQUEsS0FDQWhnQixFQUFBNWIsRUFBQWdhLGlCQUFBb0IsRUFDQSxJQUFBUSxFQUFBcGhCLE9BQ0EsTUFBQW9oQixLQVlBbWlDLEVBQUFVLFlBQUEsV0FDQSxNQUFBMXBDLEdBQUFnUSxPQVlBZzVCLEVBQUFXLFlBQUEsU0FBQTM1QixHQUNBQSxJQUFBaFEsRUFBQWdRLFFBQ0FoUSxFQUFBZ1EsSUFBQUEsR0FDQTFQLEVBQUE0MUIsWUFZQThTLEVBQUFZLFdBQUEsU0FBQXY0QixHQUNBalQsRUFBQWdULGdDQUFBQyxJQUdBMjNCLElBSUEsUUFBQXZuQyxNQUNBbkssS0FBQW1TLE1BQUEsYUFBQSxXQUFBLEtBQUEsTUFBQSxvQkFDQSxTQUFBbkosRUFBQWxDLEVBQUFvQyxFQUFBRSxFQUFBOUIsR0FrQ0EsUUFBQXN1QixHQUFBNy9CLEVBQUE2a0IsRUFBQXdlLEdBQ0FqcUMsRUFBQTRHLEtBQ0FxakMsRUFBQXhlLEVBQ0FBLEVBQUE3a0IsRUFDQUEsRUFBQWpFLEVBR0EsSUFJQStvQixHQUpBbGxCLEVBQUFELEVBQUFoSSxVQUFBLEdBQ0ErckMsRUFBQXBuQyxFQUFBK21DLEtBQUFBLEVBQ0FsRSxHQUFBdUUsRUFBQXJ3QixFQUFBRixHQUFBeVIsUUFDQW1aLEVBQUFvQixFQUFBcEIsT0FvQkEsT0FqQkFqWixHQUFBL1QsRUFBQTZULE1BQUEsV0FDQSxJQUNBdWEsRUFBQUMsUUFBQXAvQixFQUFBRSxNQUFBLEtBQUFOLElBQ0EsTUFBQWdDLEdBQ0F1OUIsRUFBQXRDLE9BQUFqN0IsR0FDQTJQLEVBQUEzUCxHQUVBLGNBQ0E0NkMsR0FBQXplLEVBQUEwZSxhQUdBL1ksR0FBQXp3QixFQUFBdk8sVUFDQW1nQixHQUVBa1osRUFBQTBlLFlBQUEzM0IsRUFDQTAzQixFQUFBMTNCLEdBQUFxYSxFQUVBcEIsRUE5REEsR0FBQXllLEtBdUZBLE9BVEEzYyxHQUFBOWEsT0FBQSxTQUFBZ1osR0FDQSxNQUFBQSxJQUFBQSxFQUFBMGUsY0FBQUQsSUFDQUEsRUFBQXplLEVBQUEwZSxhQUFBNWYsT0FBQSxrQkFDQTJmLEdBQUF6ZSxFQUFBMGUsYUFDQTFyQyxFQUFBNlQsTUFBQUcsT0FBQWdaLEVBQUEwZSxlQUVBLEdBR0E1YyxJQTREQSxRQUFBd0IsSUFBQTFlLEdBQ0EsR0FBQXNCLEdBQUF0QixDQVlBLE9BVkE2SyxNQUdBa3ZCLEdBQUF2akMsYUFBQSxPQUFBOEssR0FDQUEsRUFBQXk0QixHQUFBejRCLE1BR0F5NEIsR0FBQXZqQyxhQUFBLE9BQUE4SyxJQUlBQSxLQUFBeTRCLEdBQUF6NEIsS0FDQXFkLFNBQUFvYixHQUFBcGIsU0FBQW9iLEdBQUFwYixTQUFBdnBDLFFBQUEsS0FBQSxJQUFBLEdBQ0FnaUIsS0FBQTJpQyxHQUFBM2lDLEtBQ0FpckIsT0FBQTBYLEdBQUExWCxPQUFBMFgsR0FBQTFYLE9BQUFqdEMsUUFBQSxNQUFBLElBQUEsR0FDQXVwQixLQUFBbzdCLEdBQUFwN0IsS0FBQW83QixHQUFBcDdCLEtBQUF2cEIsUUFBQSxLQUFBLElBQUEsR0FDQXVzQyxTQUFBb1ksR0FBQXBZLFNBQ0FFLEtBQUFrWSxHQUFBbFksS0FDQU0sU0FBQSxNQUFBNFgsR0FBQTVYLFNBQUE5bEMsT0FBQSxHQUNBMDlDLEdBQUE1WCxTQUNBLElBQUE0WCxHQUFBNVgsVUFXQSxRQUFBbEYsSUFBQStjLEdBQ0EsR0FBQXpsQyxHQUFBdmUsRUFBQWdrRCxHQUFBdGIsR0FBQXNiLEdBQUFBLENBQ0EsT0FBQXpsQyxHQUFBb3FCLFdBQUFzYixHQUFBdGIsVUFDQXBxQixFQUFBNkMsT0FBQTZpQyxHQUFBN2lDLEtBNENBLFFBQUF6RixNQUNBckssS0FBQW1TLEtBQUFsZ0IsRUFBQWxGLEdBWUEsUUFBQTZsRCxJQUFBeHJDLEdBS0EsUUFBQXlyQyxHQUFBcmhELEdBQ0EsSUFDQSxNQUFBMEcsb0JBQUExRyxHQUNBLE1BQUFtRyxHQUNBLE1BQUFuRyxJQVJBLEdBQUE0a0MsR0FBQWh2QixFQUFBLE9BQ0EwckMsS0FDQUMsRUFBQSxFQVVBLE9BQUEsWUFDQSxHQUFBQyxHQUFBQyxFQUFBMWxELEVBQUFTLEVBQUF1TCxFQUNBMjVDLEVBQUE5YyxFQUFBNmMsUUFBQSxFQUVBLElBQUFDLElBQUFILEVBS0EsSUFKQUEsRUFBQUcsRUFDQUYsRUFBQUQsRUFBQXQvQyxNQUFBLE1BQ0FxL0MsS0FFQXZsRCxFQUFBLEVBQUFBLEVBQUF5bEQsRUFBQTdrRCxPQUFBWixJQUNBMGxELEVBQUFELEVBQUF6bEQsR0FDQVMsRUFBQWlsRCxFQUFBbC9DLFFBQUEsS0FDQS9GLEVBQUEsSUFDQXVMLEVBQUFzNUMsRUFBQUksRUFBQTM2QyxVQUFBLEVBQUF0SyxJQUlBb0UsRUFBQTBnRCxFQUFBdjVDLE1BQ0F1NUMsRUFBQXY1QyxHQUFBczVDLEVBQUFJLEVBQUEzNkMsVUFBQXRLLEVBQUEsS0FLQSxPQUFBOGtELElBTUEsUUFBQWpvQyxNQUNBN0ssS0FBQW1TLEtBQUF5Z0MsR0F1R0EsUUFBQW5yQyxJQUFBdk4sR0FtQkEsUUFBQWsxQixHQUFBNzFCLEVBQUE0RSxHQUNBLEdBQUEzTixFQUFBK0ksR0FBQSxDQUNBLEdBQUE0NUMsS0FJQSxPQUhBcGtELEdBQUF3SyxFQUFBLFNBQUFxRyxFQUFBMVEsR0FDQWlrRCxFQUFBamtELEdBQUFrZ0MsRUFBQWxnQyxFQUFBMFEsS0FFQXV6QyxFQUVBLE1BQUFqNUMsR0FBQWlFLFFBQUE1RSxFQUFBNjVDLEVBQUFqMUMsR0ExQkEsR0FBQWkxQyxHQUFBLFFBNkJBcHpDLE1BQUFvdkIsU0FBQUEsRUFFQXB2QixLQUFBbVMsTUFBQSxZQUFBLFNBQUFvQyxHQUNBLE1BQUEsVUFBQWhiLEdBQ0EsTUFBQWdiLEdBQUFqWixJQUFBL0IsRUFBQTY1QyxNQWtCQWhrQixFQUFBLFdBQUFpa0IsSUFDQWprQixFQUFBLE9BQUFra0IsSUFDQWxrQixFQUFBLFNBQUFta0IsSUFDQW5rQixFQUFBLE9BQUFva0IsSUFDQXBrQixFQUFBLFVBQUFxa0IsSUFDQXJrQixFQUFBLFlBQUFza0IsSUFDQXRrQixFQUFBLFNBQUF1a0IsSUFDQXZrQixFQUFBLFVBQUF3a0IsSUFDQXhrQixFQUFBLFlBQUF5a0IsSUFrSUEsUUFBQU4sTUFDQSxNQUFBLFVBQUF6L0MsRUFBQXk3QixFQUFBdWtCLEdBQ0EsSUFBQXhsRCxFQUFBd0YsR0FBQSxDQUNBLEdBQUEsTUFBQUEsRUFDQSxNQUFBQSxFQUVBLE1BQUE1RyxHQUFBLFVBQUEsV0FBQSxtQ0FBQTRHLEdBSUEsR0FDQWlnRCxHQUNBQyxFQUZBQyxFQUFBQyxHQUFBM2tCLEVBSUEsUUFBQTBrQixHQUNBLElBQUEsV0FDQUYsRUFBQXhrQixDQUNBLE1BQ0EsS0FBQSxVQUNBLElBQUEsT0FDQSxJQUFBLFNBQ0EsSUFBQSxTQUNBeWtCLEdBQUEsQ0FFQSxLQUFBLFNBRUFELEVBQUFJLEdBQUE1a0IsRUFBQXVrQixFQUFBRSxFQUNBLE1BQ0EsU0FDQSxNQUFBbGdELEdBR0EsTUFBQXlpQixPQUFBUCxVQUFBcFcsT0FBQXZRLEtBQUF5RSxFQUFBaWdELElBS0EsUUFBQUksSUFBQTVrQixFQUFBdWtCLEVBQUFFLEdBQ0EsR0FDQUQsR0FEQUssRUFBQTVqRCxFQUFBKytCLElBQUEsS0FBQUEsRUFpQ0EsT0E5QkF1a0IsTUFBQSxFQUNBQSxFQUFBOStDLEVBQ0E3RixFQUFBMmtELEtBQ0FBLEVBQUEsU0FBQU8sRUFBQUMsR0FDQSxNQUFBbGlELEdBQUFpaUQsSUFFQSxFQUVBLE9BQUFBLEdBQUEsT0FBQUMsRUFFQUQsSUFBQUMsRUFFQTlqRCxFQUFBOGpELElBQUE5akQsRUFBQTZqRCxLQUFBbmlELEVBQUFtaUQsSUFFQSxHQUdBQSxFQUFBemdELEdBQUEsR0FBQXlnRCxHQUNBQyxFQUFBMWdELEdBQUEsR0FBQTBnRCxHQUNBLEtBQUFELEVBQUF0Z0QsUUFBQXVnRCxNQUlBUCxFQUFBLFNBQUFqbEQsR0FDQSxNQUFBc2xELEtBQUE1akQsRUFBQTFCLEdBQ0F5bEQsR0FBQXpsRCxFQUFBeWdDLEVBQUF2OUIsRUFBQThoRCxHQUFBLEdBRUFTLEdBQUF6bEQsRUFBQXlnQyxFQUFBdWtCLEVBQUFFLElBTUEsUUFBQU8sSUFBQUYsRUFBQUMsRUFBQVIsRUFBQUUsRUFBQVEsR0FDQSxHQUFBQyxHQUFBUCxHQUFBRyxHQUNBSyxFQUFBUixHQUFBSSxFQUVBLElBQUEsV0FBQUksR0FBQSxNQUFBSixFQUFBdi9DLE9BQUEsR0FDQSxPQUFBdy9DLEdBQUFGLEVBQUFDLEVBQUFoOEMsVUFBQSxHQUFBdzdDLEVBQUFFLEVBQ0EsSUFBQXZsRCxHQUFBNGxELEdBR0EsTUFBQUEsR0FBQTc5QixLQUFBLFNBQUExbkIsR0FDQSxNQUFBeWxELElBQUF6bEQsRUFBQXdsRCxFQUFBUixFQUFBRSxJQUlBLFFBQUFTLEdBQ0EsSUFBQSxTQUNBLEdBQUF2bEQsRUFDQSxJQUFBOGtELEVBQUEsQ0FDQSxJQUFBOWtELElBQUFtbEQsR0FDQSxHQUFBLE1BQUFubEQsRUFBQTZGLE9BQUEsSUFBQXcvQyxHQUFBRixFQUFBbmxELEdBQUFvbEQsRUFBQVIsR0FBQSxHQUNBLE9BQUEsQ0FHQSxPQUFBVSxJQUFBLEVBQUFELEdBQUFGLEVBQUFDLEVBQUFSLEdBQUEsR0FDQSxHQUFBLFdBQUFZLEVBQUEsQ0FDQSxJQUFBeGxELElBQUFvbEQsR0FBQSxDQUNBLEdBQUFLLEdBQUFMLEVBQUFwbEQsRUFDQSxLQUFBQyxFQUFBd2xELEtBQUF2aUQsRUFBQXVpRCxHQUFBLENBSUEsR0FBQUMsR0FBQSxNQUFBMWxELEVBQ0EybEQsRUFBQUQsRUFBQVAsRUFBQUEsRUFBQW5sRCxFQUNBLEtBQUFxbEQsR0FBQU0sRUFBQUYsRUFBQWIsRUFBQWMsRUFBQUEsR0FDQSxPQUFBLEdBR0EsT0FBQSxFQUVBLE1BQUFkLEdBQUFPLEVBQUFDLEVBR0EsS0FBQSxXQUNBLE9BQUEsQ0FDQSxTQUNBLE1BQUFSLEdBQUFPLEVBQUFDLElBS0EsUUFBQUosSUFBQS85QyxHQUNBLE1BQUEsUUFBQUEsRUFBQSxhQUFBQSxHQXdEQSxRQUFBazlDLElBQUF5QixHQUNBLEdBQUFDLEdBQUFELEVBQUFFLGNBQ0EsT0FBQSxVQUFBQyxFQUFBQyxFQUFBQyxHQVVBLE1BVEEvaUQsR0FBQThpRCxLQUNBQSxFQUFBSCxFQUFBSyxjQUdBaGpELEVBQUEraUQsS0FDQUEsRUFBQUosRUFBQU0sU0FBQSxHQUFBQyxTQUlBLE1BQUFMLEVBQ0FBLEVBQ0FNLEdBQUFOLEVBQUFGLEVBQUFNLFNBQUEsR0FBQU4sRUFBQVMsVUFBQVQsRUFBQVUsWUFBQU4sR0FDQXJuRCxRQUFBLFVBQUFvbkQsSUEyREEsUUFBQXZCLElBQUFtQixHQUNBLEdBQUFDLEdBQUFELEVBQUFFLGNBQ0EsT0FBQSxVQUFBVSxFQUFBUCxHQUdBLE1BQUEsT0FBQU8sRUFDQUEsRUFDQUgsR0FBQUcsRUFBQVgsRUFBQU0sU0FBQSxHQUFBTixFQUFBUyxVQUFBVCxFQUFBVSxZQUNBTixJQUtBLFFBQUFJLElBQUFHLEVBQUF6d0MsRUFBQTB3QyxFQUFBQyxFQUFBVCxHQUNBLEdBQUEza0QsRUFBQWtsRCxHQUFBLE1BQUEsRUFFQSxJQUFBRyxHQUFBLEVBQUFILENBQ0FBLEdBQUF0dEIsS0FBQTB0QixJQUFBSixFQUVBLElBQUFLLEdBQUFMLElBQUFNLEVBQUFBLENBQ0EsS0FBQUQsSUFBQUUsU0FBQVAsR0FBQSxNQUFBLEVBRUEsSUFBQVEsR0FBQVIsRUFBQSxHQUNBUyxFQUFBLEdBQ0FDLEdBQUEsRUFDQTU5QyxJQUlBLElBRkF1OUMsSUFBQUksRUFBQSxNQUVBSixHQUFBLEtBQUFHLEVBQUFuaUQsUUFBQSxLQUFBLENBQ0EsR0FBQWhHLEdBQUFtb0QsRUFBQW5vRCxNQUFBLHNCQUNBQSxJQUFBLEtBQUFBLEVBQUEsSUFBQUEsRUFBQSxHQUFBb25ELEVBQUEsRUFDQU8sRUFBQSxHQUVBUyxFQUFBRCxFQUNBRSxHQUFBLEdBSUEsR0FBQUwsR0FBQUssRUE2Q0FqQixFQUFBLEdBQUEsRUFBQU8sSUFDQVMsRUFBQVQsRUFBQVcsUUFBQWxCLEdBQ0FPLEVBQUFZLFdBQUFILEdBQ0FBLEVBQUFBLEVBQUFyb0QsUUFBQTJuRCxHQUFBRyxRQWhEQSxDQUNBLEdBQUFXLElBQUFMLEVBQUF6aUQsTUFBQWdpRCxJQUFBLElBQUEsSUFBQXRuRCxNQUdBaUUsR0FBQStpRCxLQUNBQSxFQUFBL3NCLEtBQUFvdUIsSUFBQXB1QixLQUFBQyxJQUFBcGpCLEVBQUF3eEMsUUFBQUYsR0FBQXR4QyxFQUFBcXdDLFVBTUFJLElBQUF0dEIsS0FBQXN1QixRQUFBaEIsRUFBQXZqRCxXQUFBLElBQUFnakQsSUFBQWhqRCxXQUFBLEtBQUFnakQsRUFFQSxJQUFBd0IsSUFBQSxHQUFBakIsR0FBQWppRCxNQUFBZ2lELElBQ0F0YSxFQUFBd2IsRUFBQSxFQUNBQSxHQUFBQSxFQUFBLElBQUEsRUFFQSxJQUFBcHBELEdBQUFvTyxFQUFBLEVBQ0FpN0MsRUFBQTN4QyxFQUFBNHhDLE9BQ0FDLEVBQUE3eEMsRUFBQTh4QyxLQUVBLElBQUE1YixFQUFBaHRDLFFBQUF5b0QsRUFBQUUsRUFFQSxJQURBbjdDLEVBQUF3L0IsRUFBQWh0QyxPQUFBeW9ELEVBQ0FycEQsRUFBQSxFQUFBb08sRUFBQXBPLEVBQUFBLEtBQ0FvTyxFQUFBcE8sR0FBQXVwRCxJQUFBLEdBQUEsSUFBQXZwRCxJQUNBNG9ELEdBQUFSLEdBRUFRLEdBQUFoYixFQUFBcG1DLE9BQUF4SCxFQUlBLEtBQUFBLEVBQUFvTyxFQUFBcE8sRUFBQTR0QyxFQUFBaHRDLE9BQUFaLEtBQ0E0dEMsRUFBQWh0QyxPQUFBWixHQUFBcXBELElBQUEsR0FBQSxJQUFBcnBELElBQ0E0b0QsR0FBQVIsR0FFQVEsR0FBQWhiLEVBQUFwbUMsT0FBQXhILEVBSUEsTUFBQW9wRCxFQUFBeG9ELE9BQUFnbkQsR0FDQXdCLEdBQUEsR0FHQXhCLElBQUEsTUFBQUEsSUFBQWdCLEdBQUFQLEVBQUFlLEVBQUFoK0IsT0FBQSxFQUFBdzhCLElBZ0JBLE1BUEEsS0FBQU8sSUFDQUcsR0FBQSxHQUdBcjlDLEVBQUFuRSxLQUFBd2hELEVBQUE1d0MsRUFBQSt4QyxPQUFBL3hDLEVBQUFneUMsT0FDQWQsRUFDQU4sRUFBQTV3QyxFQUFBaXlDLE9BQUFqeUMsRUFBQWt5QyxRQUNBMytDLEVBQUFHLEtBQUEsSUFHQSxRQUFBeStDLElBQUFDLEVBQUFDLEVBQUFscUMsR0FDQSxHQUFBbXFDLEdBQUEsRUFNQSxLQUxBLEVBQUFGLElBQ0FFLEVBQUEsSUFDQUYsR0FBQUEsR0FFQUEsRUFBQSxHQUFBQSxFQUNBQSxFQUFBbHBELE9BQUFtcEQsR0FBQUQsRUFBQSxJQUFBQSxDQUlBLE9BSEFqcUMsS0FDQWlxQyxFQUFBQSxFQUFBMStCLE9BQUEwK0IsRUFBQWxwRCxPQUFBbXBELElBRUFDLEVBQUFGLEVBSUEsUUFBQUcsSUFBQWorQyxFQUFBcWlCLEVBQUF6USxFQUFBaUMsR0FFQSxNQURBakMsR0FBQUEsR0FBQSxFQUNBLFNBQUFsVSxHQUNBLEdBQUFwSCxHQUFBb0gsRUFBQSxNQUFBc0MsSUFLQSxRQUpBNFIsRUFBQSxHQUFBdGIsR0FBQXNiLEtBQ0F0YixHQUFBc2IsR0FFQSxJQUFBdGIsR0FBQSxLQUFBc2IsSUFBQXRiLEVBQUEsSUFDQXVuRCxHQUFBdm5ELEVBQUErckIsRUFBQXhPLElBSUEsUUFBQXFxQyxJQUFBbCtDLEVBQUFtK0MsR0FDQSxNQUFBLFVBQUF6Z0QsRUFBQTg5QyxHQUNBLEdBQUFsbEQsR0FBQW9ILEVBQUEsTUFBQXNDLEtBQ0ErQixFQUFBK0UsR0FBQXEzQyxFQUFBLFFBQUFuK0MsRUFBQUEsRUFFQSxPQUFBdzdDLEdBQUF6NUMsR0FBQXpMLElBSUEsUUFBQThuRCxJQUFBMWdELEVBQUE4OUMsRUFBQTVwQyxHQUNBLEdBQUF5c0MsR0FBQSxHQUFBenNDLEVBQ0Ewc0MsRUFBQUQsR0FBQSxFQUFBLElBQUEsRUFLQSxPQUhBQyxJQUFBVCxHQUFBaHZCLEtBQUF3dkIsRUFBQSxFQUFBLFFBQUEsUUFBQUEsRUFBQSxJQUFBLEdBQ0FSLEdBQUFodkIsS0FBQTB0QixJQUFBOEIsRUFBQSxJQUFBLEdBS0EsUUFBQUUsSUFBQUMsR0FFQSxHQUFBQyxHQUFBLEdBQUFubkQsTUFBQWtuRCxFQUFBLEVBQUEsR0FBQUUsUUFHQSxPQUFBLElBQUFwbkQsTUFBQWtuRCxFQUFBLEdBQUEsR0FBQUMsRUFBQSxFQUFBLElBQUFBLEdBR0EsUUFBQUUsSUFBQUMsR0FDQSxNQUFBLElBQUF0bkQsTUFBQXNuRCxFQUFBQyxjQUFBRCxFQUFBRSxXQUVBRixFQUFBRyxXQUFBLEVBQUFILEVBQUFGLFdBR0EsUUFBQU0sSUFBQTM4QixHQUNBLE1BQUEsVUFBQTNrQixHQUNBLEdBQUF1aEQsR0FBQVYsR0FBQTdnRCxFQUFBbWhELGVBQ0FLLEVBQUFQLEdBQUFqaEQsR0FFQTJ5QixHQUFBNnVCLEdBQUFELEVBQ0Fya0MsRUFBQSxFQUFBaVUsS0FBQXN1QixNQUFBOXNCLEVBQUEsT0FFQSxPQUFBd3RCLElBQUFqakMsRUFBQXlILElBSUEsUUFBQTg4QixJQUFBemhELEVBQUE4OUMsR0FDQSxNQUFBOTlDLEdBQUEwaEQsV0FBQSxHQUFBNUQsRUFBQTZELE1BQUEsR0FBQTdELEVBQUE2RCxNQUFBLEdBR0EsUUFBQUMsSUFBQTVoRCxFQUFBODlDLEdBQ0EsTUFBQTk5QyxHQUFBbWhELGVBQUEsRUFBQXJELEVBQUErRCxLQUFBLEdBQUEvRCxFQUFBK0QsS0FBQSxHQUdBLFFBQUFDLElBQUE5aEQsRUFBQTg5QyxHQUNBLE1BQUE5OUMsR0FBQW1oRCxlQUFBLEVBQUFyRCxFQUFBaUUsU0FBQSxHQUFBakUsRUFBQWlFLFNBQUEsR0FxSUEsUUFBQTFGLElBQUF3QixHQUtBLFFBQUFtRSxHQUFBQyxHQUNBLEdBQUFuckQsRUFDQSxJQUFBQSxFQUFBbXJELEVBQUFuckQsTUFBQW9yRCxHQUFBLENBQ0EsR0FBQWxpRCxHQUFBLEdBQUFwRyxNQUFBLEdBQ0F1b0QsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUF2ckQsRUFBQSxHQUFBa0osRUFBQXNpRCxlQUFBdGlELEVBQUF1aUQsWUFDQUMsRUFBQTFyRCxFQUFBLEdBQUFrSixFQUFBeWlELFlBQUF6aUQsRUFBQTBpRCxRQUVBNXJELEdBQUEsS0FDQXFyRCxFQUFBN25ELEVBQUF4RCxFQUFBLEdBQUFBLEVBQUEsS0FDQXNyRCxFQUFBOW5ELEVBQUF4RCxFQUFBLEdBQUFBLEVBQUEsTUFFQXVyRCxFQUFBanFELEtBQUE0SCxFQUFBMUYsRUFBQXhELEVBQUEsSUFBQXdELEVBQUF4RCxFQUFBLElBQUEsRUFBQXdELEVBQUF4RCxFQUFBLElBQ0EsSUFBQWtDLEdBQUFzQixFQUFBeEQsRUFBQSxJQUFBLEdBQUFxckQsRUFDQVEsRUFBQXJvRCxFQUFBeEQsRUFBQSxJQUFBLEdBQUFzckQsRUFDQVEsRUFBQXRvRCxFQUFBeEQsRUFBQSxJQUFBLEdBQ0ErckQsRUFBQTF4QixLQUFBc3VCLE1BQUEsSUFBQUosV0FBQSxNQUFBdm9ELEVBQUEsSUFBQSxJQUVBLE9BREEwckQsR0FBQXBxRCxLQUFBNEgsRUFBQWhILEVBQUEycEQsRUFBQUMsRUFBQUMsR0FDQTdpRCxFQUVBLE1BQUFpaUQsR0F2QkEsR0FBQUMsR0FBQSxzR0EyQkEsT0FBQSxVQUFBbGlELEVBQUE4aUQsRUFBQW5qRCxHQUNBLEdBRUFiLEdBQUFoSSxFQUZBazhCLEVBQUEsR0FDQXp4QixJQWFBLElBVkF1aEQsRUFBQUEsR0FBQSxhQUNBQSxFQUFBakYsRUFBQWtGLGlCQUFBRCxJQUFBQSxFQUNBcnJELEVBQUF1SSxLQUNBQSxFQUFBZ2pELEdBQUEvbUQsS0FBQStELEdBQUExRixFQUFBMEYsR0FBQWdpRCxFQUFBaGlELElBR0FwSSxFQUFBb0ksS0FDQUEsRUFBQSxHQUFBcEcsTUFBQW9HLEtBR0FyRyxFQUFBcUcsS0FBQWcvQyxTQUFBaC9DLEVBQUFyQyxXQUNBLE1BQUFxQyxFQUdBLE1BQUE4aUQsR0FDQWhzRCxFQUFBbXNELEdBQUEzdEMsS0FBQXd0QyxHQUNBaHNELEdBQ0F5SyxFQUFBakQsRUFBQWlELEVBQUF6SyxFQUFBLEdBQ0Fnc0QsRUFBQXZoRCxFQUFBK2YsUUFFQS9mLEVBQUFuRSxLQUFBMGxELEdBQ0FBLEVBQUEsS0FJQSxJQUFBSSxHQUFBbGpELEVBQUFPLG1CQVdBLE9BVkFaLEtBQ0F1akQsRUFBQXhqRCxFQUFBQyxFQUFBSyxFQUFBTyxxQkFDQVAsRUFBQUksRUFBQUosRUFBQUwsR0FBQSxJQUVBN0gsRUFBQXlKLEVBQUEsU0FBQTNJLEdBQ0FrRyxFQUFBcWtELEdBQUF2cUQsR0FDQW82QixHQUFBbDBCLEVBQUFBLEVBQUFrQixFQUFBNjlDLEVBQUFrRixpQkFBQUcsR0FDQXRxRCxFQUFBL0IsUUFBQSxXQUFBLElBQUFBLFFBQUEsTUFBQSxPQUdBbThCLEdBb0NBLFFBQUF1cEIsTUFDQSxNQUFBLFVBQUF0UixFQUFBbVksR0FJQSxNQUhBam9ELEdBQUFpb0QsS0FDQUEsRUFBQSxHQUVBamtELEVBQUE4ckMsRUFBQW1ZLElBNEhBLFFBQUE1RyxNQUNBLE1BQUEsVUFBQXp5QyxFQUFBczVDLEVBQUFwZixHQU1BLE1BSkFvZixHQURBbHlCLEtBQUEwdEIsSUFBQTk1QixPQUFBcytCLE1BQUF0RSxFQUFBQSxFQUNBaDZCLE9BQUFzK0IsR0FFQS9vRCxFQUFBK29ELEdBRUF2akQsTUFBQXVqRCxHQUFBdDVDLEdBRUFuUyxFQUFBbVMsS0FBQUEsRUFBQUEsRUFBQTdPLFlBQ0ExRCxHQUFBdVMsSUFBQXRTLEVBQUFzUyxJQUVBazZCLEdBQUFBLEdBQUFua0MsTUFBQW1rQyxHQUFBLEVBQUEzcEMsRUFBQTJwQyxHQUNBQSxFQUFBLEVBQUFBLEVBQUE5UyxLQUFBQyxJQUFBLEVBQUFybkIsRUFBQTdTLE9BQUErc0MsR0FBQUEsRUFFQW9mLEdBQUEsRUFDQXQ1QyxFQUFBL1MsTUFBQWl0QyxFQUFBQSxFQUFBb2YsR0FFQSxJQUFBcGYsRUFDQWw2QixFQUFBL1MsTUFBQXFzRCxFQUFBdDVDLEVBQUE3UyxRQUVBNlMsRUFBQS9TLE1BQUFtNkIsS0FBQUMsSUFBQSxFQUFBNlMsRUFBQW9mLEdBQUFwZixJQVhBbDZCLElBK0xBLFFBQUE0eUMsSUFBQTlxQyxHQTBDQSxRQUFBeXhDLEdBQUFDLEVBQUFDLEdBRUEsTUFEQUEsR0FBQUEsRUFBQSxHQUFBLEVBQ0FELEVBQUFFLElBQUEsU0FBQUMsR0FDQSxHQUFBQyxHQUFBLEVBQUF0L0MsRUFBQXZKLENBRUEsSUFBQTVDLEVBQUF3ckQsR0FDQXIvQyxFQUFBcS9DLE1BQ0EsSUFBQWpzRCxFQUFBaXNELE1BQ0EsS0FBQUEsRUFBQTVsRCxPQUFBLElBQUEsS0FBQTRsRCxFQUFBNWxELE9BQUEsTUFDQTZsRCxFQUFBLEtBQUFELEVBQUE1bEQsT0FBQSxHQUFBLEdBQUEsRUFDQTRsRCxFQUFBQSxFQUFBcmlELFVBQUEsSUFFQSxLQUFBcWlELElBQ0FyL0MsRUFBQXdOLEVBQUE2eEMsR0FDQXIvQyxFQUFBbUUsV0FBQSxDQUNBLEdBQUF2USxHQUFBb00sR0FDQUEsR0FBQSxTQUFBekwsR0FBQSxNQUFBQSxHQUFBWCxJQUlBLE9BQUFvTSxJQUFBQSxFQUFBcy9DLFdBQUFBLEVBQUFILEtBSUEsUUFBQW5yRCxHQUFBTyxHQUNBLGFBQUFBLElBQ0EsSUFBQSxTQUNBLElBQUEsVUFDQSxJQUFBLFNBQ0EsT0FBQSxDQUNBLFNBQ0EsT0FBQSxHQUlBLFFBQUFnckQsR0FBQWhyRCxFQUFBN0IsR0FFQSxNQUFBLGtCQUFBNkIsR0FBQWlCLFVBQ0FqQixFQUFBQSxFQUFBaUIsVUFDQXhCLEVBQUFPLElBQUFBLEVBR0FxQyxFQUFBckMsS0FDQUEsRUFBQUEsRUFBQXNDLFdBQ0E3QyxFQUFBTyxJQUFBQSxFQUdBN0IsRUFHQSxRQUFBOHNELEdBQUFqckQsRUFBQTdCLEdBQ0EsR0FBQStmLFNBQUFsZSxFQVNBLE9BUkEsUUFBQUEsR0FDQWtlLEVBQUEsU0FDQWxlLEVBQUEsUUFDQSxXQUFBa2UsRUFDQWxlLEVBQUFBLEVBQUErTCxjQUNBLFdBQUFtUyxJQUNBbGUsRUFBQWdyRCxFQUFBaHJELEVBQUE3QixLQUVBNkIsTUFBQUEsRUFBQWtlLEtBQUFBLEdBR0EsUUFBQXNlLEdBQUEwdUIsRUFBQUMsR0FDQSxHQUFBN21DLEdBQUEsQ0FRQSxPQVBBNG1DLEdBQUFodEMsT0FBQWl0QyxFQUFBanRDLEtBQ0FndEMsRUFBQWxyRCxRQUFBbXJELEVBQUFuckQsUUFDQXNrQixFQUFBNG1DLEVBQUFsckQsTUFBQW1yRCxFQUFBbnJELE1BQUEsR0FBQSxHQUdBc2tCLEVBQUE0bUMsRUFBQWh0QyxLQUFBaXRDLEVBQUFqdEMsS0FBQSxHQUFBLEVBRUFvRyxFQWpIQSxNQUFBLFVBQUFyZ0IsRUFBQTBtRCxFQUFBQyxHQXNCQSxRQUFBUSxHQUFBcHJELEVBQUE3QixHQUNBLE9BQ0E2QixNQUFBQSxFQUNBcXJELGdCQUFBQyxFQUFBVCxJQUFBLFNBQUFDLEdBQ0EsTUFBQUcsR0FBQUgsRUFBQXIvQyxJQUFBekwsR0FBQTdCLE1BS0EsUUFBQW90RCxHQUFBTCxFQUFBQyxHQUVBLElBQUEsR0FEQTdtQyxHQUFBLEVBQ0FubUIsRUFBQSxFQUFBRyxFQUFBZ3RELEVBQUFodEQsT0FBQUEsRUFBQUgsS0FDQW1tQixFQUFBa1ksRUFBQTB1QixFQUFBRyxnQkFBQWx0RCxHQUFBZ3RELEVBQUFFLGdCQUFBbHRELElBQUFtdEQsRUFBQW50RCxHQUFBNHNELGNBREE1c0QsR0FJQSxNQUFBbW1CLEdBbkNBLElBQUE3bEIsRUFBQXdGLEdBQUEsTUFBQUEsRUFFQXJGLElBQUErckQsS0FBQUEsR0FBQUEsSUFDQSxJQUFBQSxFQUFBcnNELFNBQUFxc0QsR0FBQSxLQUVBLElBQUFXLEdBQUFaLEVBQUFDLEVBQUFDLEVBSUFVLEdBQUE5bUQsTUFBQWlILElBQUEsV0FBQSxVQUFBcy9DLFdBQUFILEVBQUEsR0FBQSxHQUtBLElBQUFZLEdBQUE5a0MsTUFBQVAsVUFBQTBrQyxJQUFBcnJELEtBQUF5RSxFQUFBbW5ELEVBSUEsT0FIQUksR0FBQTNyRCxLQUFBMHJELEdBQ0F0bkQsRUFBQXVuRCxFQUFBWCxJQUFBLFNBQUE1ckQsR0FBQSxNQUFBQSxHQUFBZSxTQW1HQSxRQUFBeXJELElBQUF6N0MsR0FPQSxNQU5BMVEsR0FBQTBRLEtBQ0FBLEdBQ0EwYixLQUFBMWIsSUFHQUEsRUFBQXllLFNBQUF6ZSxFQUFBeWUsVUFBQSxLQUNBcnNCLEVBQUE0TixHQWlmQSxRQUFBMDdDLElBQUFDLEVBQUFqaUQsR0FDQWlpRCxFQUFBQyxNQUFBbGlELEVBK0NBLFFBQUFtaUQsSUFBQS9uRCxFQUFBNHRCLEVBQUE2RCxFQUFBOWUsRUFBQXNCLEdBQ0EsR0FBQXpHLEdBQUFuQixLQUNBMjdDLElBR0F4NkMsR0FBQXk2QyxVQUNBejZDLEVBQUEwNkMsYUFDQTE2QyxFQUFBMjZDLFNBQUE3dUQsRUFDQWtVLEVBQUFzNkMsTUFBQTd6QyxFQUFBMlosRUFBQWhvQixNQUFBZ29CLEVBQUExZSxRQUFBLElBQUF1aUIsR0FDQWprQixFQUFBNDZDLFFBQUEsRUFDQTU2QyxFQUFBNjZDLFdBQUEsRUFDQTc2QyxFQUFBODZDLFFBQUEsRUFDQTk2QyxFQUFBKzZDLFVBQUEsRUFDQS82QyxFQUFBZzdDLFlBQUEsRUFDQWg3QyxFQUFBaTdDLGFBQUFDLEdBYUFsN0MsRUFBQW03QyxtQkFBQSxXQUNBdnRELEVBQUE0c0QsRUFBQSxTQUFBSCxHQUNBQSxFQUFBYyx3QkFlQW43QyxFQUFBbzdDLGlCQUFBLFdBQ0F4dEQsRUFBQTRzRCxFQUFBLFNBQUFILEdBQ0FBLEVBQUFlLHNCQXlCQXA3QyxFQUFBcTdDLFlBQUEsU0FBQWhCLEdBR0FsK0MsR0FBQWsrQyxFQUFBQyxNQUFBLFNBQ0FFLEVBQUF0bkQsS0FBQW1uRCxHQUVBQSxFQUFBQyxRQUNBdDZDLEVBQUFxNkMsRUFBQUMsT0FBQUQsR0FHQUEsRUFBQVksYUFBQWo3QyxHQUlBQSxFQUFBczdDLGdCQUFBLFNBQUFqQixFQUFBa0IsR0FDQSxHQUFBQyxHQUFBbkIsRUFBQUMsS0FFQXQ2QyxHQUFBdzdDLEtBQUFuQixTQUNBcjZDLEdBQUF3N0MsR0FFQXg3QyxFQUFBdTdDLEdBQUFsQixFQUNBQSxFQUFBQyxNQUFBaUIsR0FtQkF2N0MsRUFBQXk3QyxlQUFBLFNBQUFwQixHQUNBQSxFQUFBQyxPQUFBdDZDLEVBQUFxNkMsRUFBQUMsU0FBQUQsU0FDQXI2QyxHQUFBcTZDLEVBQUFDLE9BRUExc0QsRUFBQW9TLEVBQUEyNkMsU0FBQSxTQUFBanNELEVBQUEwSixHQUNBNEgsRUFBQTA3QyxhQUFBdGpELEVBQUEsS0FBQWlpRCxLQUVBenNELEVBQUFvUyxFQUFBeTZDLE9BQUEsU0FBQS9yRCxFQUFBMEosR0FDQTRILEVBQUEwN0MsYUFBQXRqRCxFQUFBLEtBQUFpaUQsS0FFQXpzRCxFQUFBb1MsRUFBQTA2QyxVQUFBLFNBQUFoc0QsRUFBQTBKLEdBQ0E0SCxFQUFBMDdDLGFBQUF0akQsRUFBQSxLQUFBaWlELEtBR0EzbkQsRUFBQThuRCxFQUFBSCxHQUNBQSxFQUFBWSxhQUFBQyxJQWFBUyxJQUNBQyxLQUFBLzhDLEtBQ0E4ZSxTQUFBbnJCLEVBQ0FxcEQsSUFBQSxTQUFBOWEsRUFBQWhGLEVBQUE1Z0MsR0FDQSxHQUFBZ2EsR0FBQTRyQixFQUFBaEYsRUFDQSxJQUFBNW1CLEVBRUEsQ0FDQSxHQUFBdG9CLEdBQUFzb0IsRUFBQXZpQixRQUFBdUksRUFDQSxNQUFBdE8sR0FDQXNvQixFQUFBamlCLEtBQUFpSSxPQUpBNGxDLEdBQUFoRixJQUFBNWdDLElBUUEyZ0QsTUFBQSxTQUFBL2EsRUFBQWhGLEVBQUE1Z0MsR0FDQSxHQUFBZ2EsR0FBQTRyQixFQUFBaEYsRUFDQTVtQixLQUdBemlCLEVBQUF5aUIsRUFBQWhhLEdBQ0EsSUFBQWdhLEVBQUFub0IsY0FDQSt6QyxHQUFBaEYsS0FHQTUyQixTQUFBQSxJQWFBbkYsRUFBQSs3QyxVQUFBLFdBQ0E1MkMsRUFBQWlNLFlBQUE1ZSxFQUFBd3BELElBQ0E3MkMsRUFBQWdNLFNBQUEzZSxFQUFBeXBELElBQ0FqOEMsRUFBQTQ2QyxRQUFBLEVBQ0E1NkMsRUFBQTY2QyxXQUFBLEVBQ0E3NkMsRUFBQWk3QyxhQUFBYyxhQWlCQS83QyxFQUFBazhDLGFBQUEsV0FDQS8yQyxFQUFBZzNDLFNBQUEzcEQsRUFBQXdwRCxHQUFBQyxHQUFBLElBQUFHLElBQ0FwOEMsRUFBQTQ2QyxRQUFBLEVBQ0E1NkMsRUFBQTY2QyxXQUFBLEVBQ0E3NkMsRUFBQWc3QyxZQUFBLEVBQ0FwdEQsRUFBQTRzRCxFQUFBLFNBQUFILEdBQ0FBLEVBQUE2QixrQkFpQkFsOEMsRUFBQXE4QyxjQUFBLFdBQ0F6dUQsRUFBQTRzRCxFQUFBLFNBQUFILEdBQ0FBLEVBQUFnQyxtQkFXQXI4QyxFQUFBczhDLGNBQUEsV0FDQW4zQyxFQUFBZ00sU0FBQTNlLEVBQUE0cEQsSUFDQXA4QyxFQUFBZzdDLFlBQUEsRUFDQWg3QyxFQUFBaTdDLGFBQUFxQixpQkFtekNBLFFBQUFDLElBQUFYLEdBQ0FBLEVBQUFZLFlBQUF0cEQsS0FBQSxTQUFBeEUsR0FDQSxNQUFBa3RELEdBQUFhLFNBQUEvdEQsR0FBQUEsRUFBQUEsRUFBQXNDLGFBSUEsUUFBQTByRCxJQUFBdGpELEVBQUE1RyxFQUFBTixFQUFBMHBELEVBQUFyekMsRUFBQTVDLEdBQ0FnM0MsR0FBQXZqRCxFQUFBNUcsRUFBQU4sRUFBQTBwRCxFQUFBcnpDLEVBQUE1QyxHQUNBNDJDLEdBQUFYLEdBR0EsUUFBQWUsSUFBQXZqRCxFQUFBNUcsRUFBQU4sRUFBQTBwRCxFQUFBcnpDLEVBQUE1QyxHQUNBLEdBQUFpSCxHQUFBbmEsR0FBQUQsRUFBQSxHQUFBb2EsS0FLQSxLQUFBckUsRUFBQTJtQyxRQUFBLENBQ0EsR0FBQTBOLElBQUEsQ0FFQXBxRCxHQUFBd0ksR0FBQSxtQkFBQSxTQUFBekIsR0FDQXFqRCxHQUFBLElBR0FwcUQsRUFBQXdJLEdBQUEsaUJBQUEsV0FDQTRoRCxHQUFBLEVBQ0F2a0MsTUFJQSxHQUFBQSxHQUFBLFNBQUF3a0MsR0FLQSxHQUpBcG9CLElBQ0E5dUIsRUFBQTZULE1BQUFHLE9BQUE4YSxHQUNBQSxFQUFBLE9BRUFtb0IsRUFBQSxDQUNBLEdBQUFsdUQsR0FBQThELEVBQUF3QyxNQUNBNmEsRUFBQWd0QyxHQUFBQSxFQUFBandDLElBS0EsY0FBQUEsR0FBQTFhLEVBQUE0cUQsUUFBQSxVQUFBNXFELEVBQUE0cUQsU0FDQXB1RCxFQUFBdWQsR0FBQXZkLEtBTUFrdEQsRUFBQW1CLGFBQUFydUQsR0FBQSxLQUFBQSxHQUFBa3RELEVBQUFvQix3QkFDQXBCLEVBQUFxQixjQUFBdnVELEVBQUFtaEIsSUFNQSxJQUFBdEgsRUFBQXNuQyxTQUFBLFNBQ0FyOUMsRUFBQXdJLEdBQUEsUUFBQXFkLE9BQ0EsQ0FDQSxHQUFBb2MsR0FFQXlvQixFQUFBLFNBQUFMLEVBQUFoOUMsRUFBQXM5QyxHQUNBMW9CLElBQ0FBLEVBQUE5dUIsRUFBQTZULE1BQUEsV0FDQWliLEVBQUEsS0FDQTUwQixHQUFBQSxFQUFBblIsUUFBQXl1RCxHQUNBOWtDLEVBQUF3a0MsTUFNQXJxRCxHQUFBd0ksR0FBQSxVQUFBLFNBQUE2VSxHQUNBLEdBQUE5aEIsR0FBQThoQixFQUFBdXRDLE9BSUEsTUFBQXJ2RCxHQUFBQSxFQUFBLElBQUEsR0FBQUEsR0FBQUEsR0FBQSxJQUFBLElBQUFBLEdBRUFtdkQsRUFBQXJ0QyxFQUFBaFIsS0FBQUEsS0FBQW5RLFNBSUE2WixFQUFBc25DLFNBQUEsVUFDQXI5QyxFQUFBd0ksR0FBQSxZQUFBa2lELEdBTUExcUQsRUFBQXdJLEdBQUEsU0FBQXFkLEdBRUF1akMsRUFBQXlCLFFBQUEsV0FFQSxHQUFBM3VELEdBQUFrdEQsRUFBQWEsU0FBQWIsRUFBQW1CLFlBQUEsR0FBQW5CLEVBQUFtQixVQUNBdnFELEdBQUF3QyxRQUFBdEcsR0FDQThELEVBQUF3QyxJQUFBdEcsSUFLQSxRQUFBNHVELElBQUFDLEVBQUFDLEdBQ0EsR0FBQS90RCxFQUFBOHRELEdBQ0EsTUFBQUEsRUFHQSxJQUFBaHdELEVBQUFnd0QsR0FBQSxDQUNBRSxHQUFBL3BELFVBQUEsQ0FDQSxJQUFBMkQsR0FBQW9tRCxHQUFBcnlDLEtBQUFteUMsRUFDQSxJQUFBbG1ELEVBQUEsQ0FDQSxHQUFBdS9DLElBQUF2L0MsRUFBQSxHQUNBcW1ELEdBQUFybUQsRUFBQSxHQUNBc21ELEVBQUEsRUFDQTVuRCxFQUFBLEVBQ0E2bkQsRUFBQSxFQUNBQyxFQUFBLEVBQ0F4RyxFQUFBVixHQUFBQyxHQUNBa0gsRUFBQSxHQUFBSixFQUFBLEVBU0EsT0FQQUYsS0FDQUcsRUFBQUgsRUFBQWhHLFdBQ0F6aEQsRUFBQXluRCxFQUFBdm5ELGFBQ0EybkQsRUFBQUosRUFBQU8sYUFDQUYsRUFBQUwsRUFBQVEsbUJBR0EsR0FBQXR1RCxNQUFBa25ELEVBQUEsRUFBQVMsRUFBQUYsVUFBQTJHLEVBQUFILEVBQUE1bkQsRUFBQTZuRCxFQUFBQyxJQUlBLE1BQUFJLEtBR0EsUUFBQUMsSUFBQTNnQyxFQUFBNGdDLEdBQ0EsTUFBQSxVQUFBQyxFQUFBdG9ELEdBQ0EsR0FBQXVCLEdBQUFraUQsQ0FFQSxJQUFBOXBELEVBQUEydUQsR0FDQSxNQUFBQSxFQUdBLElBQUE3d0QsRUFBQTZ3RCxHQUFBLENBT0EsR0FIQSxLQUFBQSxFQUFBeHFELE9BQUEsSUFBQSxLQUFBd3FELEVBQUF4cUQsT0FBQXdxRCxFQUFBcHhELE9BQUEsS0FDQW94RCxFQUFBQSxFQUFBam5ELFVBQUEsRUFBQWluRCxFQUFBcHhELE9BQUEsSUFFQXF4RCxHQUFBdHNELEtBQUFxc0QsR0FDQSxNQUFBLElBQUExdUQsTUFBQTB1RCxFQUtBLElBSEE3Z0MsRUFBQTdwQixVQUFBLEVBQ0EyRCxFQUFBa21CLEVBQUFuUyxLQUFBZ3pDLEdBdUJBLE1BcEJBL21ELEdBQUFtZCxRQUVBK2tDLEVBREF6akQsR0FFQXdvRCxLQUFBeG9ELEVBQUFtaEQsY0FDQXNILEdBQUF6b0QsRUFBQW9oRCxXQUFBLEVBQ0FzSCxHQUFBMW9ELEVBQUFxaEQsVUFDQXNILEdBQUEzb0QsRUFBQTBoRCxXQUNBa0gsR0FBQTVvRCxFQUFBRyxhQUNBMG9ELEdBQUE3b0QsRUFBQWlvRCxhQUNBYSxJQUFBOW9ELEVBQUFrb0Qsa0JBQUEsTUFHQU0sS0FBQSxLQUFBQyxHQUFBLEVBQUFDLEdBQUEsRUFBQUMsR0FBQSxFQUFBQyxHQUFBLEVBQUFDLEdBQUEsRUFBQUMsSUFBQSxHQUdBaHhELEVBQUF5SixFQUFBLFNBQUF3bkQsRUFBQWh5RCxHQUNBQSxFQUFBc3hELEVBQUFueEQsU0FDQXVzRCxFQUFBNEUsRUFBQXR4RCxLQUFBZ3lELEtBR0EsR0FBQW52RCxNQUFBNnBELEVBQUErRSxLQUFBL0UsRUFBQWdGLEdBQUEsRUFBQWhGLEVBQUFpRixHQUFBakYsRUFBQWtGLEdBQUFsRixFQUFBbUYsR0FBQW5GLEVBQUFvRixJQUFBLEVBQUEsSUFBQXBGLEVBQUFxRixLQUFBLEdBSUEsTUFBQVgsTUFJQSxRQUFBYSxJQUFBbHlDLEVBQUEyUSxFQUFBd2hDLEVBQUFuRyxHQUNBLE1BQUEsVUFBQXgvQyxFQUFBNUcsRUFBQU4sRUFBQTBwRCxFQUFBcnpDLEVBQUE1QyxFQUFBVSxHQTREQSxRQUFBMjRDLEdBQUF0d0QsR0FFQSxNQUFBQSxNQUFBQSxFQUFBK0UsU0FBQS9FLEVBQUErRSxZQUFBL0UsRUFBQStFLFdBR0EsUUFBQXdyRCxHQUFBanFELEdBQ0EsTUFBQTlELEdBQUE4RCxLQUFBdkYsRUFBQXVGLEdBQUErcEQsRUFBQS9wRCxJQUFBbEosRUFBQWtKLEVBakVBa3FELEdBQUE5bEQsRUFBQTVHLEVBQUFOLEVBQUEwcEQsR0FDQWUsR0FBQXZqRCxFQUFBNUcsRUFBQU4sRUFBQTBwRCxFQUFBcnpDLEVBQUE1QyxFQUNBLElBQ0F3NUMsR0FEQTFwRCxFQUFBbW1ELEdBQUFBLEVBQUF3RCxVQUFBeEQsRUFBQXdELFNBQUEzcEQsUUFtQ0EsSUFoQ0FtbUQsRUFBQXlELGFBQUF6eUMsRUFDQWd2QyxFQUFBMEQsU0FBQXBzRCxLQUFBLFNBQUF4RSxHQUNBLEdBQUFrdEQsRUFBQWEsU0FBQS90RCxHQUFBLE1BQUEsS0FDQSxJQUFBNnVCLEVBQUF4ckIsS0FBQXJELEdBQUEsQ0FJQSxHQUFBNndELEdBQUFSLEVBQUFyd0QsRUFBQXl3RCxFQUlBLE9BSEExcEQsS0FDQThwRCxFQUFBcnBELEVBQUFxcEQsRUFBQTlwRCxJQUVBOHBELEVBRUEsTUFBQXp6RCxLQUdBOHZELEVBQUFZLFlBQUF0cEQsS0FBQSxTQUFBeEUsR0FDQSxHQUFBQSxJQUFBZSxFQUFBZixHQUNBLEtBQUE4d0QsSUFBQSxVQUFBLDhCQUFBOXdELEVBRUEsT0FBQXN3RCxHQUFBdHdELElBQ0F5d0QsRUFBQXp3RCxFQUNBeXdELEdBQUExcEQsSUFDQTBwRCxFQUFBanBELEVBQUFpcEQsRUFBQTFwRCxHQUFBLElBRUE0USxFQUFBLFFBQUEzWCxFQUFBa3FELEVBQUFuakQsS0FFQTBwRCxFQUFBLEtBQ0EsTUFJQWp1RCxFQUFBZ0IsRUFBQW1qRCxNQUFBbmpELEVBQUF1dEQsTUFBQSxDQUNBLEdBQUFDLEVBQ0E5RCxHQUFBK0QsWUFBQXRLLElBQUEsU0FBQTNtRCxHQUNBLE9BQUFzd0QsRUFBQXR3RCxJQUFBdUMsRUFBQXl1RCxJQUFBWCxFQUFBcndELElBQUFneEQsR0FFQXh0RCxFQUFBaTVCLFNBQUEsTUFBQSxTQUFBbjJCLEdBQ0EwcUQsRUFBQVQsRUFBQWpxRCxHQUNBNG1ELEVBQUFnRSxjQUlBLEdBQUExdUQsRUFBQWdCLEVBQUFnMUIsTUFBQWgxQixFQUFBMnRELE1BQUEsQ0FDQSxHQUFBQyxFQUNBbEUsR0FBQStELFlBQUF6NEIsSUFBQSxTQUFBeDRCLEdBQ0EsT0FBQXN3RCxFQUFBdHdELElBQUF1QyxFQUFBNnVELElBQUFmLEVBQUFyd0QsSUFBQW94RCxHQUVBNXRELEVBQUFpNUIsU0FBQSxNQUFBLFNBQUFuMkIsR0FDQThxRCxFQUFBYixFQUFBanFELEdBQ0E0bUQsRUFBQWdFLGdCQWVBLFFBQUFWLElBQUE5bEQsRUFBQTVHLEVBQUFOLEVBQUEwcEQsR0FDQSxHQUFBNXBELEdBQUFRLEVBQUEsR0FDQXV0RCxFQUFBbkUsRUFBQW9CLHNCQUFBM3RELEVBQUEyQyxFQUFBZ3VELFNBQ0FELElBQ0FuRSxFQUFBMEQsU0FBQXBzRCxLQUFBLFNBQUF4RSxHQUNBLEdBQUFzeEQsR0FBQXh0RCxFQUFBUCxLQUFBZ3VELE9BS0EsT0FBQUQsR0FBQUUsV0FBQUYsRUFBQUcsYUFBQXIwRCxFQUFBNEMsSUFLQSxRQUFBMHhELElBQUFobkQsRUFBQTVHLEVBQUFOLEVBQUEwcEQsRUFBQXJ6QyxFQUFBNUMsR0FxQkEsR0FwQkF1NUMsR0FBQTlsRCxFQUFBNUcsRUFBQU4sRUFBQTBwRCxHQUNBZSxHQUFBdmpELEVBQUE1RyxFQUFBTixFQUFBMHBELEVBQUFyekMsRUFBQTVDLEdBRUFpMkMsRUFBQXlELGFBQUEsU0FDQXpELEVBQUEwRCxTQUFBcHNELEtBQUEsU0FBQXhFLEdBQ0EsTUFBQWt0RCxHQUFBYSxTQUFBL3RELEdBQUEsS0FDQTJ4RCxHQUFBdHVELEtBQUFyRCxHQUFBeW1ELFdBQUF6bUQsR0FDQTVDLElBR0E4dkQsRUFBQVksWUFBQXRwRCxLQUFBLFNBQUF4RSxHQUNBLElBQUFrdEQsRUFBQWEsU0FBQS90RCxHQUFBLENBQ0EsSUFBQWhCLEVBQUFnQixHQUNBLEtBQUE4d0QsSUFBQSxTQUFBLGdDQUFBOXdELEVBRUFBLEdBQUFBLEVBQUFzQyxXQUVBLE1BQUF0QyxLQUdBd0MsRUFBQWdCLEVBQUFtakQsTUFBQW5qRCxFQUFBdXRELE1BQUEsQ0FDQSxHQUFBQyxFQUNBOUQsR0FBQStELFlBQUF0SyxJQUFBLFNBQUEzbUQsR0FDQSxNQUFBa3RELEdBQUFhLFNBQUEvdEQsSUFBQXVDLEVBQUF5dUQsSUFBQWh4RCxHQUFBZ3hELEdBR0F4dEQsRUFBQWk1QixTQUFBLE1BQUEsU0FBQW4yQixHQUNBOUQsRUFBQThELEtBQUF0SCxFQUFBc0gsS0FDQUEsRUFBQW1nRCxXQUFBbmdELEVBQUEsS0FFQTBxRCxFQUFBaHlELEVBQUFzSCxLQUFBWSxNQUFBWixHQUFBQSxFQUFBbEosRUFFQTh2RCxFQUFBZ0UsY0FJQSxHQUFBMXVELEVBQUFnQixFQUFBZzFCLE1BQUFoMUIsRUFBQTJ0RCxNQUFBLENBQ0EsR0FBQUMsRUFDQWxFLEdBQUErRCxZQUFBejRCLElBQUEsU0FBQXg0QixHQUNBLE1BQUFrdEQsR0FBQWEsU0FBQS90RCxJQUFBdUMsRUFBQTZ1RCxJQUFBQSxHQUFBcHhELEdBR0F3RCxFQUFBaTVCLFNBQUEsTUFBQSxTQUFBbjJCLEdBQ0E5RCxFQUFBOEQsS0FBQXRILEVBQUFzSCxLQUNBQSxFQUFBbWdELFdBQUFuZ0QsRUFBQSxLQUVBOHFELEVBQUFweUQsRUFBQXNILEtBQUFZLE1BQUFaLEdBQUFBLEVBQUFsSixFQUVBOHZELEVBQUFnRSxlQUtBLFFBQUFVLElBQUFsbkQsRUFBQTVHLEVBQUFOLEVBQUEwcEQsRUFBQXJ6QyxFQUFBNUMsR0FHQWczQyxHQUFBdmpELEVBQUE1RyxFQUFBTixFQUFBMHBELEVBQUFyekMsRUFBQTVDLEdBQ0E0MkMsR0FBQVgsR0FFQUEsRUFBQXlELGFBQUEsTUFDQXpELEVBQUErRCxZQUFBcG9DLElBQUEsU0FBQWdwQyxFQUFBQyxHQUNBLEdBQUE5eEQsR0FBQTZ4RCxHQUFBQyxDQUNBLE9BQUE1RSxHQUFBYSxTQUFBL3RELElBQUEreEQsR0FBQTF1RCxLQUFBckQsSUFJQSxRQUFBZ3lELElBQUF0bkQsRUFBQTVHLEVBQUFOLEVBQUEwcEQsRUFBQXJ6QyxFQUFBNUMsR0FHQWczQyxHQUFBdmpELEVBQUE1RyxFQUFBTixFQUFBMHBELEVBQUFyekMsRUFBQTVDLEdBQ0E0MkMsR0FBQVgsR0FFQUEsRUFBQXlELGFBQUEsUUFDQXpELEVBQUErRCxZQUFBZ0IsTUFBQSxTQUFBSixFQUFBQyxHQUNBLEdBQUE5eEQsR0FBQTZ4RCxHQUFBQyxDQUNBLE9BQUE1RSxHQUFBYSxTQUFBL3RELElBQUFreUQsR0FBQTd1RCxLQUFBckQsSUFJQSxRQUFBbXlELElBQUF6bkQsRUFBQTVHLEVBQUFOLEVBQUEwcEQsR0FFQTNxRCxFQUFBaUIsRUFBQWtHLE9BQ0E1RixFQUFBTixLQUFBLE9BQUF2RCxJQUdBLElBQUEwcEIsR0FBQSxTQUFBd2tDLEdBQ0FycUQsRUFBQSxHQUFBc3VELFNBQ0FsRixFQUFBcUIsY0FBQS9xRCxFQUFBeEQsTUFBQW11RCxHQUFBQSxFQUFBandDLE1BSUFwYSxHQUFBd0ksR0FBQSxRQUFBcWQsR0FFQXVqQyxFQUFBeUIsUUFBQSxXQUNBLEdBQUEzdUQsR0FBQXdELEVBQUF4RCxLQUNBOEQsR0FBQSxHQUFBc3VELFFBQUFweUQsR0FBQWt0RCxFQUFBbUIsWUFHQTdxRCxFQUFBaTVCLFNBQUEsUUFBQXl3QixFQUFBeUIsU0FHQSxRQUFBMEQsSUFBQXA1QyxFQUFBN1osRUFBQXNLLEVBQUFnMkIsRUFBQTE0QixHQUNBLEdBQUFzckQsRUFDQSxJQUFBOXZELEVBQUFrOUIsR0FBQSxDQUVBLEdBREE0eUIsRUFBQXI1QyxFQUFBeW1CLElBQ0E0eUIsRUFBQTFpRCxTQUNBLEtBQUFraEQsSUFBQSxZQUFBLHlEQUNBcG5ELEVBQUFnMkIsRUFFQSxPQUFBNHlCLEdBQUFsekQsR0FFQSxNQUFBNEgsR0FHQSxRQUFBdXJELElBQUE3bkQsRUFBQTVHLEVBQUFOLEVBQUEwcEQsRUFBQXJ6QyxFQUFBNUMsRUFBQVUsRUFBQXNCLEdBQ0EsR0FBQXU1QyxHQUFBSCxHQUFBcDVDLEVBQUF2TyxFQUFBLGNBQUFsSCxFQUFBaXZELGFBQUEsR0FDQUMsRUFBQUwsR0FBQXA1QyxFQUFBdk8sRUFBQSxlQUFBbEgsRUFBQW12RCxjQUFBLEdBRUFocEMsRUFBQSxTQUFBd2tDLEdBQ0FqQixFQUFBcUIsY0FBQXpxRCxFQUFBLEdBQUFzdUQsUUFBQWpFLEdBQUFBLEVBQUFqd0MsTUFHQXBhLEdBQUF3SSxHQUFBLFFBQUFxZCxHQUVBdWpDLEVBQUF5QixRQUFBLFdBQ0E3cUQsRUFBQSxHQUFBc3VELFFBQUFsRixFQUFBbUIsWUFNQW5CLEVBQUFhLFNBQUEsU0FBQS90RCxHQUNBLE1BQUFBLE1BQUEsR0FHQWt0RCxFQUFBWSxZQUFBdHBELEtBQUEsU0FBQXhFLEdBQ0EsTUFBQW1GLEdBQUFuRixFQUFBd3lELEtBR0F0RixFQUFBMEQsU0FBQXBzRCxLQUFBLFNBQUF4RSxHQUNBLE1BQUFBLEdBQUF3eUQsRUFBQUUsSUE2aUJBLFFBQUFFLElBQUFscEQsRUFBQXdWLEdBRUEsTUFEQXhWLEdBQUEsVUFBQUEsR0FDQSxXQUFBLFNBQUErTSxHQWlGQSxRQUFBbzhDLEdBQUE5ekIsRUFBQUMsR0FDQSxHQUFBRixLQUVBRyxHQUNBLElBQUEsR0FBQXZoQyxHQUFBLEVBQUFBLEVBQUFxaEMsRUFBQXpnQyxPQUFBWixJQUFBLENBRUEsSUFBQSxHQURBd2hDLEdBQUFILEVBQUFyaEMsR0FDQWtELEVBQUEsRUFBQUEsRUFBQW8rQixFQUFBMWdDLE9BQUFzQyxJQUNBLEdBQUFzK0IsR0FBQUYsRUFBQXArQixHQUFBLFFBQUFxK0IsRUFFQUgsR0FBQXQ2QixLQUFBMDZCLEdBRUEsTUFBQUosR0FHQSxRQUFBZzBCLEdBQUExMUIsR0FDQSxHQUFBNWEsS0FDQSxPQUFBNWpCLElBQUF3K0IsSUFDQWwrQixFQUFBaytCLEVBQUEsU0FBQTZDLEdBQ0F6ZCxFQUFBQSxFQUFBOWMsT0FBQW90RCxFQUFBN3lCLE1BRUF6ZCxHQUNBM2pCLEVBQUF1K0IsR0FDQUEsRUFBQXg1QixNQUFBLEtBQ0FqRCxFQUFBeThCLElBQ0FsK0IsRUFBQWsrQixFQUFBLFNBQUE2QyxFQUFBaEUsR0FDQWdFLElBQ0F6ZCxFQUFBQSxFQUFBOWMsT0FBQXUyQixFQUFBcjRCLE1BQUEsU0FHQTRlLEdBRUE0YSxFQS9HQSxPQUNBM08sU0FBQSxLQUNBL0MsS0FBQSxTQUFBaGhCLEVBQUE1RyxFQUFBTixHQXVCQSxRQUFBdXZELEdBQUF2d0MsR0FDQSxHQUFBOGEsR0FBQTAxQixFQUFBeHdDLEVBQUEsRUFDQWhmLEdBQUEyNUIsVUFBQUcsR0FHQSxRQUFBMjFCLEdBQUF6d0MsR0FDQSxHQUFBOGEsR0FBQTAxQixFQUFBeHdDLEVBQUEsR0FDQWhmLEdBQUE2NUIsYUFBQUMsR0FHQSxRQUFBMDFCLEdBQUF4d0MsRUFBQThtQixHQUdBLEdBQUE0cEIsR0FBQXB2RCxFQUFBK0csS0FBQSxpQkFBQXBGLEtBQ0EwdEQsSUFVQSxPQVRBajBELEdBQUFzakIsRUFBQSxTQUFBME0sSUFDQW9hLEVBQUEsR0FBQTRwQixFQUFBaGtDLE1BQ0Fna0MsRUFBQWhrQyxJQUFBZ2tDLEVBQUFoa0MsSUFBQSxHQUFBb2EsRUFDQTRwQixFQUFBaGtDLE9BQUFvYSxFQUFBLElBQ0E2cEIsRUFBQTN1RCxLQUFBMHFCLE1BSUFwckIsRUFBQStHLEtBQUEsZUFBQXFvRCxHQUNBQyxFQUFBcnFELEtBQUEsS0FHQSxRQUFBc3FELEdBQUF2NUIsRUFBQXlELEdBQ0EsR0FBQUMsR0FBQXMxQixFQUFBdjFCLEVBQUF6RCxHQUNBNEQsRUFBQW8xQixFQUFBaDVCLEVBQUF5RCxFQUNBQyxHQUFBeTFCLEVBQUF6MUIsRUFBQSxHQUNBRSxFQUFBdTFCLEVBQUF2MUIsRUFBQSxJQUNBRixHQUFBQSxFQUFBai9CLFFBQ0FtWSxFQUFBZ00sU0FBQTNlLEVBQUF5NUIsR0FFQUUsR0FBQUEsRUFBQW4vQixRQUNBbVksRUFBQWlNLFlBQUE1ZSxFQUFBMjVCLEdBSUEsUUFBQTQxQixHQUFBenJDLEdBQ0EsR0FBQTFJLEtBQUEsR0FBQXhVLEVBQUE0b0QsT0FBQSxJQUFBcDBDLEVBQUEsQ0FDQSxHQUFBb2UsR0FBQXcxQixFQUFBbHJDLE1BQ0EsSUFBQUMsR0FFQSxJQUFBMWlCLEVBQUF5aUIsRUFBQUMsR0FBQSxDQUNBLEdBQUFnUyxHQUFBaTVCLEVBQUFqckMsRUFDQXVyQyxHQUFBdjVCLEVBQUF5RCxRQUhBeTFCLEdBQUF6MUIsR0FNQXpWLEVBQUE1aUIsRUFBQTJpQixHQXhFQSxHQUFBQyxFQUVBbmQsR0FBQTlILE9BQUFZLEVBQUFrRyxHQUFBMnBELEdBQUEsR0FFQTd2RCxFQUFBaTVCLFNBQUEsUUFBQSxTQUFBejhCLEdBQ0FxekQsRUFBQTNvRCxFQUFBMHlDLE1BQUE1NUMsRUFBQWtHLE9BSUEsWUFBQUEsR0FDQWdCLEVBQUE5SCxPQUFBLFNBQUEsU0FBQTB3RCxFQUFBQyxHQUVBLEdBQUFDLEdBQUEsRUFBQUYsQ0FDQSxJQUFBRSxLQUFBLEVBQUFELEdBQUEsQ0FDQSxHQUFBL3dDLEdBQUFzd0MsRUFBQXBvRCxFQUFBMHlDLE1BQUE1NUMsRUFBQWtHLElBQ0E4cEQsS0FBQXQwQyxFQUNBNnpDLEVBQUF2d0MsR0FDQXl3QyxFQUFBendDLFVBOHBHQSxRQUFBeXFDLElBQUE3dEQsR0FZQSxRQUFBcTBELEdBQUFDLEVBQUFycUMsRUFBQTVjLEdBQ0FsSyxFQUFBOG1CLEdBQ0FzcUMsRUFBQSxXQUFBRCxFQUFBam5ELEdBRUFtbkQsRUFBQSxXQUFBRixFQUFBam5ELEdBRUF6SixFQUFBcW1CLEdBSUFBLEdBQ0ErakMsRUFBQUYsRUFBQW5CLE9BQUEySCxFQUFBam5ELEdBQ0EwZ0QsRUFBQUQsRUFBQWxCLFVBQUEwSCxFQUFBam5ELEtBRUEwZ0QsRUFBQUQsRUFBQW5CLE9BQUEySCxFQUFBam5ELEdBQ0EyZ0QsRUFBQUYsRUFBQWxCLFVBQUEwSCxFQUFBam5ELEtBUkEyZ0QsRUFBQUYsRUFBQW5CLE9BQUEySCxFQUFBam5ELEdBQ0EyZ0QsRUFBQUYsRUFBQWxCLFVBQUEwSCxFQUFBam5ELElBVUF5Z0QsRUFBQWpCLFVBQ0E0SCxFQUFBQyxJQUFBLEdBQ0E1RyxFQUFBZCxPQUFBYyxFQUFBYixTQUFBanZELEVBQ0EyMkQsRUFBQSxHQUFBLFFBRUFGLEVBQUFDLElBQUEsR0FDQTVHLEVBQUFkLE9BQUE0SCxHQUFBOUcsRUFBQW5CLFFBQ0FtQixFQUFBYixVQUFBYSxFQUFBZCxPQUNBMkgsRUFBQSxHQUFBN0csRUFBQWQsUUFPQSxJQUFBNkgsRUFFQUEsR0FEQS9HLEVBQUFqQixVQUFBaUIsRUFBQWpCLFNBQUF5SCxHQUNBdDJELEVBQ0E4dkQsRUFBQW5CLE9BQUEySCxJQUNBLEVBQ0F4RyxFQUFBbEIsVUFBQTBILElBQ0EsRUFFQSxLQUdBSyxFQUFBTCxFQUFBTyxHQUNBL0csRUFBQVgsYUFBQVMsYUFBQTBHLEVBQUFPLEVBQUEvRyxHQUdBLFFBQUF5RyxHQUFBanFELEVBQUExSixFQUFBeU0sR0FDQXlnRCxFQUFBeGpELEtBQ0F3akQsRUFBQXhqRCxPQUVBeWpELEVBQUFELEVBQUF4akQsR0FBQTFKLEVBQUF5TSxHQUdBLFFBQUFtbkQsR0FBQWxxRCxFQUFBMUosRUFBQXlNLEdBQ0F5Z0QsRUFBQXhqRCxJQUNBMGpELEVBQUFGLEVBQUF4akQsR0FBQTFKLEVBQUF5TSxHQUVBdW5ELEdBQUE5RyxFQUFBeGpELE1BQ0F3akQsRUFBQXhqRCxHQUFBdE0sR0FJQSxRQUFBeTJELEdBQUEza0MsRUFBQWdsQyxHQUNBQSxJQUFBQyxFQUFBamxDLElBQ0F6WSxFQUFBZ00sU0FBQXdNLEVBQUFDLEdBQ0FpbEMsRUFBQWpsQyxJQUFBLElBQ0FnbEMsR0FBQUMsRUFBQWpsQyxLQUNBelksRUFBQWlNLFlBQUF1TSxFQUFBQyxHQUNBaWxDLEVBQUFqbEMsSUFBQSxHQUlBLFFBQUE2a0MsR0FBQUwsRUFBQVUsR0FDQVYsRUFBQUEsRUFBQSxJQUFBaG9ELEdBQUFnb0QsRUFBQSxLQUFBLEdBRUFHLEVBQUFRLEdBQUFYLEVBQUFVLEtBQUEsR0FDQVAsRUFBQVMsR0FBQVosRUFBQVUsS0FBQSxHQXpGQSxHQUFBbEgsR0FBQTl0RCxFQUFBOHRELEtBQ0FqK0IsRUFBQTd2QixFQUFBNnZCLFNBQ0FrbEMsS0FDQWhILEVBQUEvdEQsRUFBQSt0RCxJQUNBQyxFQUFBaHVELEVBQUFndUQsTUFDQTMyQyxFQUFBclgsRUFBQXFYLFFBRUEwOUMsR0FBQUcsTUFBQUgsRUFBQUUsSUFBQXBsQyxFQUFBMU0sU0FBQTh4QyxLQUVBbkgsRUFBQUYsYUFBQXlHLEVBb0ZBLFFBQUFPLElBQUF0MUQsR0FDQSxHQUFBQSxFQUNBLElBQUEsR0FBQTZFLEtBQUE3RSxHQUNBLEdBQUFBLEVBQUFhLGVBQUFnRSxHQUNBLE9BQUEsQ0FJQSxRQUFBLEVBbXZFQSxRQUFBZ3hELElBQUFDLEdBSUFBLEVBQUEsR0FBQTdxRCxhQUFBLGNBQ0E2cUQsRUFBQSxHQUFBQyxVQUFBLEdBLzkyQkEsR0FBQUMsSUFBQSxxQkFJQW5ELEdBQUEsV0FZQXh0RCxHQUFBLFNBQUFzbEQsR0FBQSxNQUFBeHFELEdBQUF3cUQsR0FBQUEsRUFBQXQ5QyxjQUFBczlDLEdBQ0E5cEQsR0FBQVIsT0FBQW9uQixVQUFBNW1CLGVBWUFpUixHQUFBLFNBQUE2NEMsR0FBQSxNQUFBeHFELEdBQUF3cUQsR0FBQUEsRUFBQTl0QyxjQUFBOHRDLEdBR0FzTCxHQUFBLFNBQUEzSyxHQUVBLE1BQUFuckQsR0FBQW1yRCxHQUNBQSxFQUFBL3JELFFBQUEsU0FBQSxTQUFBNnBDLEdBQUEsTUFBQThzQixRQUFBQyxhQUFBLEdBQUEvc0IsRUFBQWd0QixXQUFBLE1BQ0E5SyxHQUVBK0ssR0FBQSxTQUFBL0ssR0FFQSxNQUFBbnJELEdBQUFtckQsR0FDQUEsRUFBQS9yRCxRQUFBLFNBQUEsU0FBQTZwQyxHQUFBLE1BQUE4c0IsUUFBQUMsYUFBQSxJQUFBL3NCLEVBQUFndEIsV0FBQSxNQUNBOUssRUFPQSxPQUFBLElBQUFqK0MsZ0JBQ0FoSSxHQUFBNHdELEdBQ0Fua0QsR0FBQXVrRCxHQUlBLElBQ0FyaEMsSUFDQTUwQixHQUNBdU4sR0FVQXdFLEdBVEF6UyxNQUFBQSxNQUNBK0YsTUFBQUEsT0FDQUssTUFBQUEsS0FDQWxDLEdBQUF2RCxPQUFBb25CLFVBQUE3akIsU0FDQUcsR0FBQTFELE9BQUEwRCxlQUNBbUMsR0FBQXZILEVBQUEsTUFHQTJOLEdBQUE5TixFQUFBOE4sVUFBQTlOLEVBQUE4TixZQUVBOUssR0FBQSxDQU1Bd3pCLElBQUF2MkIsRUFBQTYzRCxhQXVRQS95RCxFQUFBcWhCLFdBc0JBcGhCLEVBQUFvaEIsVUFzSUEsSUFtakNBeFcsSUFuakNBbE8sR0FBQThuQixNQUFBOW5CLFFBdUVBd0UsR0FBQSwwRkFNQW1hLEdBQUEsU0FBQXZkLEdBQ0EsTUFBQW5CLEdBQUFtQixHQUFBQSxFQUFBdWQsT0FBQXZkLEdBTUF5K0MsR0FBQSxTQUFBdUwsR0FDQSxNQUFBQSxHQUFBL3JELFFBQUEsZ0NBQUEsUUFDQUEsUUFBQSxRQUFBLFVBeVRBMlMsR0FBQSxXQXdCQSxRQUFBNmtDLEtBQ0EsSUFJQSxNQUZBLElBQUE5RSxVQUFBLEtBRUEsRUFDQSxNQUFBN29DLEdBQ0EsT0FBQSxHQTlCQSxJQUFBdEYsRUFBQW9PLEdBQUFxa0QsT0FBQSxDQUdBLEdBQUFDLEdBQUEvM0QsRUFBQTBNLGNBQUEsYUFDQTFNLEVBQUEwTSxjQUFBLGdCQUVBLElBQUFxckQsRUFBQSxDQUNBLEdBQUFDLEdBQUFELEVBQUE5ckQsYUFBQSxXQUNBOHJELEVBQUE5ckQsYUFBQSxjQUNBd0gsSUFBQXFrRCxPQUNBeGYsY0FBQTBmLEdBQUEsS0FBQUEsRUFBQWp4RCxRQUFBLGtCQUNBa3hELGVBQUFELEdBQUEsS0FBQUEsRUFBQWp4RCxRQUFBLHdCQUdBME0sSUFBQXFrRCxPQUNBeGYsYUFBQUEsSUFDQTJmLGVBQUEsR0FLQSxNQUFBeGtELElBQUFxa0QsT0FvREE3b0QsR0FBQSxXQUNBLEdBQUE1SixFQUFBNEosR0FBQWlwRCxPQUFBLE1BQUFqcEQsSUFBQWlwRCxLQUNBLElBQUFDLEdBQ0E1M0QsRUFBQStMLEVBQUFDLEVBQUFoSixFQUFBeUksR0FBQTdLLE1BQ0EsS0FBQVosRUFBQSxFQUFBZ0QsRUFBQWhELElBQUFBLEVBRUEsR0FEQStMLEVBQUFOLEdBQUF6TCxHQUNBNDNELEVBQUFuNEQsRUFBQTBNLGNBQUEsSUFBQUosRUFBQXhMLFFBQUEsSUFBQSxPQUFBLE9BQUEsQ0FDQXlMLEVBQUE0ckQsRUFBQWxzRCxhQUFBSyxFQUFBLEtBQ0EsT0FJQSxNQUFBMkMsSUFBQWlwRCxNQUFBM3JELEdBc1FBUCxJQUFBLE1BQUEsV0FBQSxNQUFBLFNBK1RBeUMsR0FBQSxTQVFBTSxJQUFBLEVBMEpBMFAsR0FBQSxFQUNBMjVDLEdBQUEsRUFDQXB0RCxHQUFBLEVBQ0F5ckIsR0FBQSxFQUNBL1gsR0FBQSxFQUNBbUUsR0FBQSxHQXdlQXpQLElBQ0FpbEQsS0FBQSxRQUNBQyxNQUFBLEVBQ0FDLE1BQUEsRUFDQUMsSUFBQSxFQUNBQyxTQUFBLG1CQTRQQXpvRCxJQUFBNnVCLFFBQUEsT0FFQSxJQUFBamdCLElBQUE1TyxHQUFBc1ksU0FDQXZLLEdBQUEsRUFDQTJyQixHQUFBLFNBQUEvaUMsRUFBQW9hLEVBQUFoWSxHQUNBcEMsRUFBQSt4RCxpQkFBQTMzQyxFQUFBaFksR0FBQSxJQUVBdVksR0FBQSxTQUFBM2EsRUFBQW9hLEVBQUFoWSxHQUNBcEMsRUFBQWd5RCxvQkFBQTUzQyxFQUFBaFksR0FBQSxHQU1BaUgsSUFBQUgsTUFBQSxTQUFBMUosR0FFQSxNQUFBNk0sTUFBQXNWLE1BQUFuaUIsRUFBQTZNLEtBQUE2ckIsY0FNQSxJQUFBNWdCLElBQUEsa0JBQ0FJLEdBQUEsY0FDQWtELElBQUFxM0MsV0FBQSxXQUFBQyxXQUFBLGFBQ0F4NEMsR0FBQW5nQixFQUFBLFVBZUFnZ0IsR0FBQSxnQ0FDQTNCLEdBQUEsWUFDQWUsR0FBQSxhQUNBSyxHQUFBLDJFQUVBSCxJQUNBN0ssUUFBQSxFQUFBLCtCQUFBLGFBRUFta0QsT0FBQSxFQUFBLFVBQUEsWUFDQUMsS0FBQSxFQUFBLG9CQUFBLHVCQUNBQyxJQUFBLEVBQUEsaUJBQUEsb0JBQ0FDLElBQUEsRUFBQSxxQkFBQSx5QkFDQXg1QyxVQUFBLEVBQUEsR0FBQSxJQUdBRCxJQUFBMDVDLFNBQUExNUMsR0FBQTdLLE9BQ0E2SyxHQUFBMjVDLE1BQUEzNUMsR0FBQTQ1QyxNQUFBNTVDLEdBQUE2NUMsU0FBQTc1QyxHQUFBODVDLFFBQUE5NUMsR0FBQXM1QyxNQUNBdDVDLEdBQUErNUMsR0FBQS81QyxHQUFBeTVDLEVBMkVBLElBQUEvekMsSUFBQXMwQyxLQUFBeHdDLFVBQUF5d0MsVUFBQSxTQUFBdnBELEdBRUEsU0FBQSxHQUFBOEMsS0FBQTBtRCx3QkFBQXhwRCxLQW1RQWQsR0FBQVksR0FBQWdaLFdBQ0Eyd0MsTUFBQSxTQUFBNXdELEdBR0EsUUFBQTZ3RCxLQUNBQyxJQUNBQSxHQUFBLEVBQ0E5d0QsS0FMQSxHQUFBOHdELElBQUEsQ0FTQSxjQUFBNzVELEVBQUFzakIsV0FDQUMsV0FBQXEyQyxJQUVBNW1ELEtBQUE3RCxHQUFBLG1CQUFBeXFELEdBR0E1cEQsR0FBQWpRLEdBQUFvUCxHQUFBLE9BQUF5cUQsS0FJQXowRCxTQUFBLFdBQ0EsR0FBQXRDLEtBRUEsT0FEQWQsR0FBQWlSLEtBQUEsU0FBQXJJLEdBQUE5SCxFQUFBd0UsS0FBQSxHQUFBc0QsS0FDQSxJQUFBOUgsRUFBQThJLEtBQUEsTUFBQSxLQUdBcXlDLEdBQUEsU0FBQWg5QyxHQUNBLE1BQUFXLElBQUFYLEdBQUEsRUFBQWdTLEtBQUFoUyxHQUFBZ1MsS0FBQUEsS0FBQTdSLE9BQUFILEtBR0FHLE9BQUEsRUFDQWtHLEtBQUFBLEdBQ0EzRSxRQUFBQSxLQUNBc0UsVUFBQUEsUUFRQTBjLEtBQ0EzaEIsR0FBQSw0REFBQTBFLE1BQUEsS0FBQSxTQUFBNUQsR0FDQTZnQixHQUFBOWMsR0FBQS9ELElBQUFBLEdBRUEsSUFBQThnQixNQUNBNWhCLEdBQUEsbURBQUEwRSxNQUFBLEtBQUEsU0FBQTVELEdBQ0E4Z0IsR0FBQTlnQixJQUFBLEdBRUEsSUFBQWdoQixLQUNBcEwsWUFBQSxZQUNBRyxZQUFBLFlBQ0FnN0MsTUFBQSxNQUNBSSxNQUFBLE1BQ0E3N0MsVUFBQSxVQWVBcFcsSUFDQTJMLEtBQUFnVSxHQUNBbzRDLFdBQUFwNUMsR0FDQWtlLFFBQUFqZ0IsSUFDQSxTQUFBNVYsRUFBQXdELEdBQ0F5RCxHQUFBekQsR0FBQXhELElBR0FoSCxHQUNBMkwsS0FBQWdVLEdBQ0FuUyxjQUFBa1QsR0FFQWxWLE1BQUEsU0FBQTVHLEdBRUEsTUFBQWhGLElBQUErTCxLQUFBL0csRUFBQSxXQUFBOGIsR0FBQTliLEVBQUFpYyxZQUFBamMsR0FBQSxnQkFBQSxZQUdBMEksYUFBQSxTQUFBMUksR0FFQSxNQUFBaEYsSUFBQStMLEtBQUEvRyxFQUFBLGtCQUFBaEYsR0FBQStMLEtBQUEvRyxFQUFBLDRCQUdBMkksV0FBQWtULEdBRUF6VixTQUFBLFNBQUFwRyxHQUNBLE1BQUE4YixJQUFBOWIsRUFBQSxjQUdBdTZCLFdBQUEsU0FBQXY2QixFQUFBNEYsR0FDQTVGLEVBQUFvekQsZ0JBQUF4dEQsSUFHQTZZLFNBQUF0RCxHQUVBazRDLElBQUEsU0FBQXJ6RCxFQUFBNEYsRUFBQTFKLEdBR0EsTUFGQTBKLEdBQUF5UixHQUFBelIsR0FFQWxILEVBQUF4QyxRQUNBOEQsRUFBQThOLE1BQUFsSSxHQUFBMUosR0FFQThELEVBQUE4TixNQUFBbEk7RUFJQWxHLEtBQUEsU0FBQU0sRUFBQTRGLEVBQUExSixHQUNBLEdBQUFrSSxHQUFBcEUsRUFBQW9FLFFBQ0EsSUFBQUEsSUFBQUMsSUFBQUQsSUFBQXF0RCxJQUFBcnRELElBQUEwckIsR0FBQSxDQUdBLEdBQUF3akMsR0FBQXJ6RCxHQUFBMkYsRUFDQSxJQUFBbVgsR0FBQXUyQyxHQUFBLENBQ0EsSUFBQTUwRCxFQUFBeEMsR0FTQSxNQUFBOEQsR0FBQTRGLEtBQ0E1RixFQUFBa3ZCLFdBQUFxa0MsYUFBQTN0RCxJQUFBekgsR0FBQXExRCxVQUNBRixFQUNBaDZELENBWEE0QyxJQUNBOEQsRUFBQTRGLElBQUEsRUFDQTVGLEVBQUF1YixhQUFBM1YsRUFBQTB0RCxLQUVBdHpELEVBQUE0RixJQUFBLEVBQ0E1RixFQUFBb3pELGdCQUFBRSxRQVFBLElBQUE1MEQsRUFBQXhDLEdBQ0E4RCxFQUFBdWIsYUFBQTNWLEVBQUExSixPQUNBLElBQUE4RCxFQUFBc0YsYUFBQSxDQUdBLEdBQUFtdUQsR0FBQXp6RCxFQUFBc0YsYUFBQU0sRUFBQSxFQUVBLE9BQUEsUUFBQTZ0RCxFQUFBbjZELEVBQUFtNkQsS0FJQWgwRCxLQUFBLFNBQUFPLEVBQUE0RixFQUFBMUosR0FDQSxNQUFBd0MsR0FBQXhDLFFBQ0E4RCxFQUFBNEYsR0FBQTFKLEdBRUE4RCxFQUFBNEYsSUFJQTB3QixLQUFBLFdBSUEsUUFBQW85QixHQUFBMXpELEVBQUE5RCxHQUNBLEdBQUF1QyxFQUFBdkMsR0FBQSxDQUNBLEdBQUFrSSxHQUFBcEUsRUFBQW9FLFFBQ0EsT0FBQUEsS0FBQTBULElBQUExVCxJQUFBQyxHQUFBckUsRUFBQW9aLFlBQUEsR0FFQXBaLEVBQUFvWixZQUFBbGQsRUFQQSxNQURBdzNELEdBQUFDLElBQUEsR0FDQUQsS0FXQWx4RCxJQUFBLFNBQUF4QyxFQUFBOUQsR0FDQSxHQUFBdUMsRUFBQXZDLEdBQUEsQ0FDQSxHQUFBOEQsRUFBQTR6RCxVQUFBLFdBQUE3ekQsRUFBQUMsR0FBQSxDQUNBLEdBQUF3Z0IsS0FNQSxPQUxBcGxCLEdBQUE0RSxFQUFBdWtCLFFBQUEsU0FBQXZXLEdBQ0FBLEVBQUEyaUQsVUFDQW53QyxFQUFBOWYsS0FBQXNOLEVBQUE5UixPQUFBOFIsRUFBQXNvQixRQUdBLElBQUE5VixFQUFBaG1CLE9BQUEsS0FBQWdtQixFQUVBLE1BQUF4Z0IsR0FBQTlELE1BRUE4RCxFQUFBOUQsTUFBQUEsR0FHQWlJLEtBQUEsU0FBQW5FLEVBQUE5RCxHQUNBLE1BQUF1QyxHQUFBdkMsR0FDQThELEVBQUErWSxXQUVBYyxHQUFBN1osR0FBQSxRQUNBQSxFQUFBK1ksVUFBQTdjLEtBR0E2SCxNQUFBcVksSUFDQSxTQUFBaGEsRUFBQXdELEdBSUF5RCxHQUFBZ1osVUFBQXpjLEdBQUEsU0FBQW1tQyxFQUFBQyxHQUNBLEdBQUFweUMsR0FBQTJCLEVBQ0FzNEQsRUFBQXhuRCxLQUFBN1IsTUFLQSxJQUFBNEgsSUFBQWdhLElBQ0EzZCxFQUFBLEdBQUEyRCxFQUFBNUgsUUFBQTRILElBQUErWSxJQUFBL1ksSUFBQXlaLEdBQUFrd0IsRUFBQUMsR0FBQSxDQUNBLEdBQUFudkMsRUFBQWt2QyxHQUFBLENBR0EsSUFBQW55QyxFQUFBLEVBQUFpNkQsRUFBQWo2RCxFQUFBQSxJQUNBLEdBQUF3SSxJQUFBMlksR0FFQTNZLEVBQUFpSyxLQUFBelMsR0FBQW15QyxPQUVBLEtBQUF4d0MsSUFBQXd3QyxHQUNBM3BDLEVBQUFpSyxLQUFBelMsR0FBQTJCLEVBQUF3d0MsRUFBQXh3QyxHQUtBLE9BQUE4USxNQU9BLElBQUEsR0FIQW5RLEdBQUFrRyxFQUFBdXhELElBRUE1MkQsRUFBQTBCLEVBQUF2QyxHQUFBdTRCLEtBQUFvdUIsSUFBQWdSLEVBQUEsR0FBQUEsRUFDQS8yRCxFQUFBLEVBQUFDLEVBQUFELEVBQUFBLElBQUEsQ0FDQSxHQUFBNHVCLEdBQUF0cEIsRUFBQWlLLEtBQUF2UCxHQUFBaXZDLEVBQUFDLEVBQ0E5dkMsR0FBQUEsRUFBQUEsRUFBQXd2QixFQUFBQSxFQUVBLE1BQUF4dkIsR0FJQSxJQUFBdEMsRUFBQSxFQUFBaTZELEVBQUFqNkQsRUFBQUEsSUFDQXdJLEVBQUFpSyxLQUFBelMsR0FBQW15QyxFQUFBQyxFQUdBLE9BQUEzL0IsU0E4RUFqUixHQUNBKzNELFdBQUFwNUMsR0FFQXZSLEdBQUEsU0FBQXhJLEVBQUFvYSxFQUFBaFksRUFBQWlZLEdBQ0EsR0FBQTNiLEVBQUEyYixHQUFBLEtBQUFYLElBQUEsU0FBQSx3RUFHQSxJQUFBN0IsR0FBQTdYLEdBQUEsQ0FJQSxHQUFBc2EsR0FBQUMsR0FBQXZhLEdBQUEsR0FDQStJLEVBQUF1UixFQUFBdlIsT0FDQXlSLEVBQUFGLEVBQUFFLE1BRUFBLEtBQ0FBLEVBQUFGLEVBQUFFLE9BQUEyQyxHQUFBbmQsRUFBQStJLEdBcUJBLEtBakJBLEdBQUErcUQsR0FBQTE1QyxFQUFBaGEsUUFBQSxNQUFBLEVBQUFnYSxFQUFBdGEsTUFBQSxNQUFBc2EsR0FDQXhnQixFQUFBazZELEVBQUF0NUQsT0FFQXU1RCxFQUFBLFNBQUEzNUMsRUFBQTRELEVBQUFnMkMsR0FDQSxHQUFBeDJDLEdBQUF6VSxFQUFBcVIsRUFFQW9ELEtBQ0FBLEVBQUF6VSxFQUFBcVIsTUFDQW9ELEVBQUFRLHNCQUFBQSxFQUNBLGFBQUE1RCxHQUFBNDVDLEdBQ0FqeEIsR0FBQS9pQyxFQUFBb2EsRUFBQUksSUFJQWdELEVBQUE5YyxLQUFBMEIsSUFHQXhJLEtBQ0F3Z0IsRUFBQTA1QyxFQUFBbDZELEdBQ0FnaEIsR0FBQVIsSUFDQTI1QyxFQUFBbjVDLEdBQUFSLEdBQUErRCxJQUNBNDFDLEVBQUEzNUMsRUFBQTlnQixHQUFBLElBRUF5NkQsRUFBQTM1QyxLQUtBeU0sSUFBQTFNLEdBRUE4NUMsSUFBQSxTQUFBajBELEVBQUFvYSxFQUFBaFksR0FDQXBDLEVBQUFoRixHQUFBZ0YsR0FLQUEsRUFBQXdJLEdBQUE0UixFQUFBLFFBQUE4NUMsS0FDQWwwRCxFQUFBNm1CLElBQUF6TSxFQUFBaFksR0FDQXBDLEVBQUE2bUIsSUFBQXpNLEVBQUE4NUMsS0FFQWwwRCxFQUFBd0ksR0FBQTRSLEVBQUFoWSxJQUdBeXhCLFlBQUEsU0FBQTd6QixFQUFBbTBELEdBQ0EsR0FBQTk1RCxHQUFBMkQsRUFBQWdDLEVBQUFpYyxVQUNBcEMsSUFBQTdaLEdBQ0E1RSxFQUFBLEdBQUFpTyxJQUFBOHFELEdBQUEsU0FBQTMwRCxHQUNBbkYsRUFDQTJELEVBQUFvMkQsYUFBQTUwRCxFQUFBbkYsRUFBQWdRLGFBRUFyTSxFQUFBZzZCLGFBQUF4NEIsRUFBQVEsR0FFQTNGLEVBQUFtRixLQUlBK3NDLFNBQUEsU0FBQXZzQyxHQUNBLEdBQUF1c0MsS0FNQSxPQUxBbnhDLEdBQUE0RSxFQUFBa1osV0FBQSxTQUFBbFosR0FDQUEsRUFBQW9FLFdBQUEwVCxJQUNBeTBCLEVBQUE3ckMsS0FBQVYsS0FHQXVzQyxHQUdBelksU0FBQSxTQUFBOXpCLEdBQ0EsTUFBQUEsR0FBQXEwRCxpQkFBQXIwRCxFQUFBa1osZ0JBR0FoVixPQUFBLFNBQUFsRSxFQUFBUixHQUNBLEdBQUE0RSxHQUFBcEUsRUFBQW9FLFFBQ0EsSUFBQUEsSUFBQTBULElBQUExVCxJQUFBOFgsR0FBQSxDQUVBMWMsRUFBQSxHQUFBNkosSUFBQTdKLEVBRUEsS0FBQSxHQUFBNUYsR0FBQSxFQUFBZ0QsRUFBQTRDLEVBQUFoRixPQUFBb0MsRUFBQWhELEVBQUFBLElBQUEsQ0FDQSxHQUFBczlDLEdBQUExM0MsRUFBQTVGLEVBQ0FvRyxHQUFBeVksWUFBQXkrQixNQUlBb2QsUUFBQSxTQUFBdDBELEVBQUFSLEdBQ0EsR0FBQVEsRUFBQW9FLFdBQUEwVCxHQUFBLENBQ0EsR0FBQXpkLEdBQUEyRixFQUFBbVosVUFDQS9kLEdBQUEsR0FBQWlPLElBQUE3SixHQUFBLFNBQUEwM0MsR0FDQWwzQyxFQUFBbzBELGFBQUFsZCxFQUFBNzhDLE9BS0FnZSxLQUFBLFNBQUFyWSxFQUFBdTBELEdBQ0FBLEVBQUF2NUQsR0FBQXU1RCxHQUFBbGQsR0FBQSxHQUFBNTVDLFFBQUEsRUFDQSxJQUFBTyxHQUFBZ0MsRUFBQWljLFVBQ0FqZSxJQUNBQSxFQUFBZzZCLGFBQUF1OEIsRUFBQXYwRCxHQUVBdTBELEVBQUE5N0MsWUFBQXpZLElBR0F5b0IsT0FBQW5NLEdBRUFrNEMsT0FBQSxTQUFBeDBELEdBQ0FzYyxHQUFBdGMsR0FBQSxJQUdBeTBELE1BQUEsU0FBQXowRCxFQUFBMDBELEdBQ0EsR0FBQXI2RCxHQUFBMkYsRUFBQWhDLEVBQUFnQyxFQUFBaWMsVUFDQXk0QyxHQUFBLEdBQUFyckQsSUFBQXFyRCxFQUVBLEtBQUEsR0FBQTk2RCxHQUFBLEVBQUFnRCxFQUFBODNELEVBQUFsNkQsT0FBQW9DLEVBQUFoRCxFQUFBQSxJQUFBLENBQ0EsR0FBQTRGLEdBQUFrMUQsRUFBQTk2RCxFQUNBb0UsR0FBQW8yRCxhQUFBNTBELEVBQUFuRixFQUFBZ1EsYUFDQWhRLEVBQUFtRixJQUlBbWYsU0FBQWxELEdBQ0FtRCxZQUFBdkQsR0FFQXM1QyxZQUFBLFNBQUEzMEQsRUFBQW9iLEVBQUF3NUMsR0FDQXg1QyxHQUNBaGdCLEVBQUFnZ0IsRUFBQXRiLE1BQUEsS0FBQSxTQUFBc3JCLEdBQ0EsR0FBQXlwQyxHQUFBRCxDQUNBbjJELEdBQUFvMkQsS0FDQUEsR0FBQTE1QyxHQUFBbmIsRUFBQW9yQixLQUVBeXBDLEVBQUFwNUMsR0FBQUosSUFBQXJiLEVBQUFvckIsTUFLQXB0QixPQUFBLFNBQUFnQyxHQUNBLEdBQUFoQyxHQUFBZ0MsRUFBQWljLFVBQ0EsT0FBQWplLElBQUFBLEVBQUFvRyxXQUFBOFgsR0FBQWxlLEVBQUEsTUFHQWc3QyxLQUFBLFNBQUFoNUMsR0FDQSxNQUFBQSxHQUFBODBELG9CQUdBbjFELEtBQUEsU0FBQUssRUFBQW9iLEdBQ0EsTUFBQXBiLEdBQUErMEQscUJBQ0EvMEQsRUFBQSswRCxxQkFBQTM1QyxPQU1BM2QsTUFBQW1jLEdBRUF4USxlQUFBLFNBQUFwSixFQUFBcWQsRUFBQTIzQyxHQUVBLEdBQUFDLEdBQUFDLEVBQUFDLEVBQ0F6YixFQUFBcjhCLEVBQUFqRCxNQUFBaUQsRUFDQS9DLEVBQUFDLEdBQUF2YSxHQUNBK0ksRUFBQXVSLEdBQUFBLEVBQUF2UixPQUNBeVUsRUFBQXpVLEdBQUFBLEVBQUEyd0MsRUFFQWw4QixLQUVBeTNDLEdBQ0FwcUIsZUFBQSxXQUFBeCtCLEtBQUFrUixrQkFBQSxHQUNBRCxtQkFBQSxXQUFBLE1BQUFqUixNQUFBa1Isb0JBQUEsR0FDQUsseUJBQUEsV0FBQXZSLEtBQUFxUiw2QkFBQSxHQUNBSSw4QkFBQSxXQUFBLE1BQUF6UixNQUFBcVIsK0JBQUEsR0FDQUcsZ0JBQUExZixFQUNBaWMsS0FBQXMvQixFQUNBdDdCLE9BQUFwZSxHQUlBcWQsRUFBQWpELE9BQ0E2NkMsRUFBQXYzRCxFQUFBdTNELEVBQUE1M0MsSUFJQTYzQyxFQUFBL3pELEVBQUFxYyxHQUNBMjNDLEVBQUFILEdBQUFDLEdBQUFyekQsT0FBQW96RCxJQUFBQyxHQUVBNzVELEVBQUE4NUQsRUFBQSxTQUFBOXlELEdBQ0E2eUQsRUFBQW4zQyxpQ0FDQTFiLEVBQUFFLE1BQUF0QyxFQUFBbTFELFFBS0EsU0FBQS95RCxFQUFBd0QsR0FJQXlELEdBQUFnWixVQUFBemMsR0FBQSxTQUFBbW1DLEVBQUFDLEVBQUFvcEIsR0FHQSxJQUFBLEdBRkFsNUQsR0FFQXRDLEVBQUEsRUFBQWdELEVBQUF5UCxLQUFBN1IsT0FBQW9DLEVBQUFoRCxFQUFBQSxJQUNBNkUsRUFBQXZDLElBQ0FBLEVBQUFrRyxFQUFBaUssS0FBQXpTLEdBQUFteUMsRUFBQUMsRUFBQW9wQixHQUNBMTJELEVBQUF4QyxLQUVBQSxFQUFBbEIsR0FBQWtCLEtBR0F5ZCxHQUFBemQsRUFBQWtHLEVBQUFpSyxLQUFBelMsR0FBQW15QyxFQUFBQyxFQUFBb3BCLEdBR0EsT0FBQTEyRCxHQUFBeEMsR0FBQUEsRUFBQW1RLE1BSUFoRCxHQUFBZ1osVUFBQW5nQixLQUFBbUgsR0FBQWdaLFVBQUE3WixHQUNBYSxHQUFBZ1osVUFBQWd6QyxPQUFBaHNELEdBQUFnWixVQUFBd0UsTUFvRUE3SCxHQUFBcUQsV0FNQW5ELElBQUEsU0FBQTNqQixFQUFBVyxHQUNBbVEsS0FBQXdTLEdBQUF0akIsRUFBQThRLEtBQUFsUSxVQUFBRCxHQU9BeUwsSUFBQSxTQUFBcE0sR0FDQSxNQUFBOFEsTUFBQXdTLEdBQUF0akIsRUFBQThRLEtBQUFsUSxXQU9Bc3NCLE9BQUEsU0FBQWx0QixHQUNBLEdBQUFXLEdBQUFtUSxLQUFBOVEsRUFBQXNqQixHQUFBdGpCLEVBQUE4USxLQUFBbFEsU0FFQSxjQURBa1EsTUFBQTlRLEdBQ0FXLEdBSUEsSUFBQThhLEtBQUEsV0FDQTNLLEtBQUFtUyxNQUFBLFdBQ0EsTUFBQVEsUUFrRUFNLEdBQUEsMEJBQ0FLLEdBQUEsSUFDQUMsR0FBQSx1QkFDQVAsR0FBQSxtQ0FDQTVVLEdBQUFsUixFQUFBLFlBK3dCQW1OLElBQUF3YixXQUFBM0MsRUFpUkEsSUFBQSsxQyxJQUFBLzdELEVBQUEsWUFDQTRxQixHQUFBLEVBQ0FveEMsR0FBQSxhQW1EQXJpRCxHQUFBLFdBQ0E3RyxLQUFBbVMsTUFBQSxLQUFBLFFBQUEsU0FBQWpKLEVBQUFvQixHQUNBLFFBQUE2K0MsTUFpQkEsTUFoQkFBLEdBQUEzMUMsSUFBQTFoQixFQUNBcTNELEVBQUF0MUIsTUFBQS9oQyxFQUNBcTNELEVBQUFuekMsV0FDQW96QyxJQUFBdDNELEVBQ0FncEIsT0FBQWhwQixFQUNBdTNELE9BQUF2M0QsRUFDQXczRCxNQUFBeDNELEVBQ0F5M0QsU0FBQXozRCxFQUNBaUIsS0FBQSxTQUFBeTJELEVBQUFDLEdBQ0EsTUFBQXZnRCxHQUFBLFNBQUFpc0IsR0FDQTdxQixFQUFBLFdBQ0E2cUIsUUFFQXBpQyxLQUFBeTJELEVBQUFDLEtBR0FOLEtBTUF4aUQsR0FBQSxXQUNBLEdBQUF5bUMsR0FBQSxHQUFBejZCLElBQ0ErMkMsSUFFQTFwRCxNQUFBbVMsTUFBQSxrQkFBQSxhQUNBLFNBQUF2TCxFQUFBb0MsR0F1QkEsUUFBQTJnRCxHQUFBanZELEVBQUEyWCxFQUFBeGlCLEdBQ0EsR0FBQTIwQyxJQUFBLENBV0EsT0FWQW55QixLQUNBQSxFQUFBM2pCLEVBQUEyakIsR0FBQUEsRUFBQTVlLE1BQUEsS0FDQWhGLEdBQUE0akIsR0FBQUEsS0FDQXRqQixFQUFBc2pCLEVBQUEsU0FBQTBNLEdBQ0FBLElBQ0F5bEIsR0FBQSxFQUNBOXBDLEVBQUFxa0IsR0FBQWx2QixNQUlBMjBDLEVBR0EsUUFBQW9sQixLQUNBNzZELEVBQUEyNkQsRUFBQSxTQUFBLzFELEdBQ0EsR0FBQStHLEdBQUEweUMsRUFBQTl4QyxJQUFBM0gsRUFDQSxJQUFBK0csRUFBQSxDQUNBLEdBQUFtdkQsR0FBQTl4QyxHQUFBcGtCLEVBQUFOLEtBQUEsVUFDQSs1QixFQUFBLEdBQ0FFLEVBQUEsRUFDQXYrQixHQUFBMkwsRUFBQSxTQUFBNDJCLEVBQUF2UyxHQUNBLEdBQUEzTSxLQUFBeTNDLEVBQUE5cUMsRUFDQXVTLEtBQUFsZixJQUNBa2YsRUFDQWxFLElBQUFBLEVBQUFqL0IsT0FBQSxJQUFBLElBQUE0d0IsRUFFQXVPLElBQUFBLEVBQUFuL0IsT0FBQSxJQUFBLElBQUE0d0IsS0FLQWh3QixFQUFBNEUsRUFBQSxTQUFBMmpCLEdBQ0E4VixHQUFBaGUsR0FBQWtJLEVBQUE4VixHQUNBRSxHQUFBdGUsR0FBQXNJLEVBQUFnVyxLQUVBOGYsRUFBQWh4QixPQUFBem9CLE1BR0ErMUQsRUFBQXY3RCxPQUFBLEVBSUEsUUFBQTI3RCxHQUFBbjJELEVBQUFvMkQsRUFBQTN0QyxHQUNBLEdBQUExaEIsR0FBQTB5QyxFQUFBOXhDLElBQUEzSCxPQUVBcTJELEVBQUFMLEVBQUFqdkQsRUFBQXF2RCxHQUFBLEdBQ0FFLEVBQUFOLEVBQUFqdkQsRUFBQTBoQixHQUFBLElBRUE0dEMsR0FBQUMsS0FFQTdjLEVBQUF2NkIsSUFBQWxmLEVBQUErRyxHQUNBZ3ZELEVBQUFyMUQsS0FBQVYsR0FFQSxJQUFBKzFELEVBQUF2N0QsUUFDQTZhLEVBQUE0N0IsYUFBQWdsQixJQTlFQSxPQUNBaHJDLFFBQUE5c0IsRUFDQXFLLEdBQUFySyxFQUNBMG9CLElBQUExb0IsRUFDQW80RCxJQUFBcDRELEVBRUF1QyxLQUFBLFNBQUFWLEVBQUFxZCxFQUFBa0gsRUFBQWl5QyxHQVdBLE1BVkFBLElBQUFBLElBRUFqeUMsRUFBQUEsTUFDQUEsRUFBQWt5QyxNQUFBejJELEVBQUFxekQsSUFBQTl1QyxFQUFBa3lDLE1BQ0FseUMsRUFBQW15QyxJQUFBMTJELEVBQUFxekQsSUFBQTl1QyxFQUFBbXlDLEtBRUFueUMsRUFBQTVGLFVBQUE0RixFQUFBM0YsY0FDQXUzQyxFQUFBbjJELEVBQUF1a0IsRUFBQTVGLFNBQUE0RixFQUFBM0YsYUFHQSxHQUFBM0wsUUFnRkFMLElBQUEsV0FBQSxTQUFBck0sR0FDQSxHQUFBdUUsR0FBQXVCLElBRUFBLE1BQUFzcUQsdUJBQUExN0QsT0FBQWlELE9BQUEsTUF5Q0FtTyxLQUFBb3ZCLFNBQUEsU0FBQTcxQixFQUFBNEUsR0FDQSxHQUFBNUUsR0FBQSxNQUFBQSxFQUFBeEUsT0FBQSxHQUNBLEtBQUFrMEQsSUFBQSxVQUFBLHdEQUFBMXZELEVBR0EsSUFBQXJLLEdBQUFxSyxFQUFBLFlBQ0FrRixHQUFBNnJELHVCQUFBL3dELEVBQUFvZixPQUFBLElBQUF6cEIsRUFDQWdMLEVBQUFpRSxRQUFBalAsRUFBQWlQLElBaUJBNkIsS0FBQXVxRCxnQkFBQSxTQUFBaDdCLEdBQ0EsR0FBQSxJQUFBN2hDLFVBQUFTLFNBQ0E2UixLQUFBd3FELGtCQUFBajdCLFlBQUF2K0IsUUFBQXUrQixFQUFBLEtBQ0F2dkIsS0FBQXdxRCxtQkFBQSxDQUNBLEdBQUFDLEdBQUEsR0FBQXo1RCxRQUFBLGFBQUFrNEQsR0FBQSxhQUNBLElBQUF1QixFQUFBdjNELEtBQUE4TSxLQUFBd3FELGtCQUFBcjRELFlBQ0EsS0FBQTgyRCxJQUFBLFVBQUEsd0hBQUFDLElBS0EsTUFBQWxwRCxNQUFBd3FELG1CQUdBeHFELEtBQUFtUyxNQUFBLGlCQUFBLFNBQUF6TCxHQUNBLFFBQUFna0QsR0FBQS8yRCxFQUFBNHNCLEVBQUFvcUMsR0FJQSxHQUFBQSxFQUFBLENBQ0EsR0FBQUMsR0FBQS95QyxHQUFBOHlDLElBQ0FDLEdBQUFBLEVBQUFoN0MsWUFBQWc3QyxFQUFBQyx5QkFDQUYsRUFBQSxNQUdBQSxFQUFBQSxFQUFBdkMsTUFBQXowRCxHQUFBNHNCLEVBQUEwbkMsUUFBQXQwRCxHQXNCQSxPQThCQXdJLEdBQUF1SyxFQUFBdkssR0EwQkFxZSxJQUFBOVQsRUFBQThULElBa0JBMHZDLElBQUF4akQsRUFBQXdqRCxJQStCQXRyQyxRQUFBbFksRUFBQWtZLFFBVUE5RCxPQUFBLFNBQUFnd0MsR0FDQUEsRUFBQTFCLEtBQUEwQixFQUFBMUIsT0FxQkEyQixNQUFBLFNBQUFwM0QsRUFBQWhDLEVBQUF5MkQsRUFBQWx3QyxHQUtBLE1BSkF2bUIsR0FBQUEsR0FBQWhELEdBQUFnRCxHQUNBeTJELEVBQUFBLEdBQUF6NUQsR0FBQXk1RCxHQUNBejJELEVBQUFBLEdBQUF5MkQsRUFBQXoyRCxTQUNBKzRELEVBQUEvMkQsRUFBQWhDLEVBQUF5MkQsR0FDQTFoRCxFQUFBclMsS0FBQVYsRUFBQSxRQUFBc2tCLEdBQUFDLEtBcUJBOHlDLEtBQUEsU0FBQXIzRCxFQUFBaEMsRUFBQXkyRCxFQUFBbHdDLEdBS0EsTUFKQXZtQixHQUFBQSxHQUFBaEQsR0FBQWdELEdBQ0F5MkQsRUFBQUEsR0FBQXo1RCxHQUFBeTVELEdBQ0F6MkQsRUFBQUEsR0FBQXkyRCxFQUFBejJELFNBQ0ErNEQsRUFBQS8yRCxFQUFBaEMsRUFBQXkyRCxHQUNBMWhELEVBQUFyUyxLQUFBVixFQUFBLE9BQUFza0IsR0FBQUMsS0FnQkEreUMsTUFBQSxTQUFBdDNELEVBQUF1a0IsR0FDQSxNQUFBeFIsR0FBQXJTLEtBQUFWLEVBQUEsUUFBQXNrQixHQUFBQyxHQUFBLFdBQ0F2a0IsRUFBQXlvQixZQXNCQTlKLFNBQUEsU0FBQTNlLEVBQUFvckIsRUFBQTdHLEdBR0EsTUFGQUEsR0FBQUQsR0FBQUMsR0FDQUEsRUFBQTVGLFNBQUFxRixHQUFBTyxFQUFBZ3pDLFNBQUFuc0MsR0FDQXJZLEVBQUFyUyxLQUFBVixFQUFBLFdBQUF1a0IsSUFxQkEzRixZQUFBLFNBQUE1ZSxFQUFBb3JCLEVBQUE3RyxHQUdBLE1BRkFBLEdBQUFELEdBQUFDLEdBQ0FBLEVBQUEzRixZQUFBb0YsR0FBQU8sRUFBQTNGLFlBQUF3TSxHQUNBclksRUFBQXJTLEtBQUFWLEVBQUEsY0FBQXVrQixJQXNCQW9sQyxTQUFBLFNBQUEzcEQsRUFBQW8yRCxFQUFBM3RDLEVBQUFsRSxHQUlBLE1BSEFBLEdBQUFELEdBQUFDLEdBQ0FBLEVBQUE1RixTQUFBcUYsR0FBQU8sRUFBQTVGLFNBQUF5M0MsR0FDQTd4QyxFQUFBM0YsWUFBQW9GLEdBQUFPLEVBQUEzRixZQUFBNkosR0FDQTFWLEVBQUFyUyxLQUFBVixFQUFBLFdBQUF1a0IsSUF3QkFpekMsUUFBQSxTQUFBeDNELEVBQUF5MkQsRUFBQUMsRUFBQXRyQyxFQUFBN0csR0FPQSxNQU5BQSxHQUFBRCxHQUFBQyxHQUNBQSxFQUFBa3lDLEtBQUFseUMsRUFBQWt5QyxLQUFBLzRELEVBQUE2bUIsRUFBQWt5QyxLQUFBQSxHQUFBQSxFQUNBbHlDLEVBQUFteUMsR0FBQW55QyxFQUFBbXlDLEdBQUFoNUQsRUFBQTZtQixFQUFBbXlDLEdBQUFBLEdBQUFBLEVBRUF0ckMsRUFBQUEsR0FBQSxvQkFDQTdHLEVBQUFrekMsWUFBQXp6QyxHQUFBTyxFQUFBa3pDLFlBQUFyc0MsR0FDQXJZLEVBQUFyUyxLQUFBVixFQUFBLFVBQUF1a0IsU0FpQkF6UixHQUFBLFdBQ0F6RyxLQUFBbVMsTUFBQSxRQUFBLEtBQUEsU0FBQTdILEVBQUFwQixHQUVBLEdBQUFtaUQsR0FBQSxZQTRCQSxPQTNCQUEsR0FBQXIxQyxXQUNBMmUsS0FBQSxTQUFBN1osR0FDQTlhLEtBQUEyYSxPQUFBM2EsS0FBQTJhLE1BQUFHLEtBQUEsRUFBQSxTQUFBLGNBRUFzdUMsSUFBQSxXQUNBcHBELEtBQUEyMEIsUUFFQTdaLE9BQUEsV0FDQTlhLEtBQUEyMEIsTUFBQSxJQUVBMjJCLFdBQUEsV0FJQSxNQUhBdHJELE1BQUEyYSxRQUNBM2EsS0FBQTJhLE1BQUF6UixFQUFBeVIsU0FFQTNhLEtBQUEyYSxNQUFBbVosU0FFQS9nQyxLQUFBLFNBQUF3NEQsRUFBQUMsR0FDQSxNQUFBeHJELE1BQUFzckQsYUFBQXY0RCxLQUFBdzRELEVBQUFDLElBRUFwa0IsUUFBQSxTQUFBbWtCLEdBQ0EsTUFBQXZyRCxNQUFBc3JELGFBQUEsU0FBQUMsSUFFQWxrQixVQUFBLFNBQUFra0IsR0FDQSxNQUFBdnJELE1BQUFzckQsYUFBQSxXQUFBQyxLQUlBLFNBQUE1M0QsRUFBQXVrQixHQW1CQSxRQUFBcFksS0FRQSxNQVBBd0ssR0FBQSxXQUNBbWhELElBQ0FDLEdBQ0FaLEVBQUFuMkIsT0FFQSsyQixHQUFBLElBRUFaLEVBR0EsUUFBQVcsS0FDQXZ6QyxFQUFBNUYsV0FDQTNlLEVBQUEyZSxTQUFBNEYsRUFBQTVGLFVBQ0E0RixFQUFBNUYsU0FBQSxNQUVBNEYsRUFBQTNGLGNBQ0E1ZSxFQUFBNGUsWUFBQTJGLEVBQUEzRixhQUNBMkYsRUFBQTNGLFlBQUEsTUFFQTJGLEVBQUFteUMsS0FDQTEyRCxFQUFBcXpELElBQUE5dUMsRUFBQW15QyxJQUNBbnlDLEVBQUFteUMsR0FBQSxNQXJDQW55QyxFQUFBeXpDLGdCQUNBenpDLEVBQUFreUMsS0FBQWx5QyxFQUFBbXlDLEdBQUEsTUFHQW55QyxFQUFBa3lDLE9BQ0F6MkQsRUFBQXF6RCxJQUFBOXVDLEVBQUFreUMsTUFDQWx5QyxFQUFBa3lDLEtBQUEsS0FHQSxJQUFBc0IsR0FBQVosRUFBQSxHQUFBTyxFQUNBLFFBQ0FPLE1BQUE5ckQsRUFDQXNwRCxJQUFBdHBELE9Bdy9DQWtkLEdBQUE5dkIsRUFBQSxXQVFBMlQsSUFBQXNTLFNBQUEsV0FBQSx3QkFnNURBLElBQUE4UCxJQUFBLHdCQXNHQXdNLEdBQUF2aUMsRUFBQSxlQUdBZ2lDLEdBQUEsMEJBdVBBdm5CLEdBQUEsV0FDQTNILEtBQUFtUyxNQUFBLFlBQUEsU0FBQS9LLEdBQ0EsTUFBQSxVQUFBeWtELEdBZ0JBLE1BUEFBLElBQ0FBLEVBQUE5ekQsVUFBQTh6RCxZQUFBbDlELE1BQ0FrOUQsRUFBQUEsRUFBQSxJQUdBQSxFQUFBemtELEVBQUEsR0FBQW92QixLQUVBcTFCLEVBQUFDLFlBQUEsTUFLQXI3QixHQUFBLG1CQUNBc0IsSUFBQWc2QixlQUFBdDdCLEdBQUEsa0JBQ0FHLEdBQUEsZ0JBQ0FDLElBQ0FtN0IsSUFBQSxLQUNBQyxJQUFBLE1BRUExN0IsR0FBQSxlQUNBMjdCLEdBQUFoL0QsRUFBQSxTQUNBc25DLEdBQUEsU0FBQTkxQixHQUNBLE1BQUEsWUFDQSxLQUFBd3RELElBQUEsU0FBQSwyRUFBQXh0RCxLQTA5Q0F3NUIsR0FBQXI5QixHQUFBcTlCLG1CQUFBaHJDLEVBQUEsZUFDQWdyQyxJQUFBUyxjQUFBLFNBQUExTyxHQUNBLEtBQUFpTyxJQUFBLFdBQ0EseU1BRUFqTyxJQUdBaU8sR0FBQUMsT0FBQSxTQUFBbE8sRUFBQXZVLEdBQ0EsTUFBQXdpQixJQUFBLFNBQUEsOEJBQUFqTyxFQUFBdlUsRUFBQXZqQixZQThoQkEsSUFBQWc2RCxJQUFBLGtDQUNBM3hCLElBQUE0eEIsS0FBQSxHQUFBQyxNQUFBLElBQUFDLElBQUEsSUFDQXZ3QixHQUFBN3VDLEVBQUEsYUFpVUFxL0QsSUFNQTN3QixTQUFBLEVBTUFrRCxXQUFBLEVBcUJBaEIsT0FBQWIsR0FBQSxZQXVCQXZrQixJQUFBLFNBQUFBLEdBQ0EsR0FBQXRtQixFQUFBc21CLEdBQ0EsTUFBQTFZLE1BQUFpOEIsS0FHQSxJQUFBbHVDLEdBQUFvK0QsR0FBQTUvQyxLQUFBbU0sRUFLQSxRQUpBM3FCLEVBQUEsSUFBQSxLQUFBMnFCLElBQUExWSxLQUFBeEMsS0FBQXRGLG1CQUFBbkssRUFBQSxNQUNBQSxFQUFBLElBQUFBLEVBQUEsSUFBQSxLQUFBMnFCLElBQUExWSxLQUFBKzZCLE9BQUFodEMsRUFBQSxJQUFBLElBQ0FpUyxLQUFBcVgsS0FBQXRwQixFQUFBLElBQUEsSUFFQWlTLE1BcUJBcTNCLFNBQUE0RixHQUFBLGNBNEJBbnRCLEtBQUFtdEIsR0FBQSxVQW9CQTFDLEtBQUEwQyxHQUFBLFVBMEJBei9CLEtBQUEyL0IsR0FBQSxTQUFBLFNBQUEzL0IsR0FFQSxNQURBQSxHQUFBLE9BQUFBLEVBQUFBLEVBQUFyTCxXQUFBLEdBQ0EsS0FBQXFMLEVBQUF6SSxPQUFBLEdBQUF5SSxFQUFBLElBQUFBLElBZ0RBdTlCLE9BQUEsU0FBQUEsRUFBQXl4QixHQUNBLE9BQUE5K0QsVUFBQVMsUUFDQSxJQUFBLEdBQ0EsTUFBQTZSLE1BQUE4NkIsUUFDQSxLQUFBLEdBQ0EsR0FBQXBzQyxFQUFBcXNDLElBQUFsc0MsRUFBQWtzQyxHQUNBQSxFQUFBQSxFQUFBNW9DLFdBQ0E2TixLQUFBODZCLFNBQUEzaUMsR0FBQTRpQyxPQUNBLENBQUEsSUFBQXZxQyxFQUFBdXFDLEdBU0EsS0FBQWdCLElBQUEsV0FDQSxxRkFUQWhCLEdBQUE5bUMsRUFBQThtQyxNQUVBaHNDLEVBQUFnc0MsRUFBQSxTQUFBbHJDLEVBQUFYLEdBQ0EsTUFBQVcsU0FBQWtyQyxHQUFBN3JDLEtBR0E4USxLQUFBODZCLFNBQUFDLEVBS0EsS0FDQSxTQUNBM29DLEVBQUFvNkQsSUFBQSxPQUFBQSxRQUNBeHNELE1BQUE4NkIsU0FBQUMsR0FFQS82QixLQUFBODZCLFNBQUFDLEdBQUF5eEIsRUFLQSxNQURBeHNELE1BQUFnOEIsWUFDQWg4QixNQXdCQXFYLEtBQUE4bEIsR0FBQSxTQUFBLFNBQUE5bEIsR0FDQSxNQUFBLFFBQUFBLEVBQUFBLEVBQUFsbEIsV0FBQSxLQVdBckUsUUFBQSxXQUVBLE1BREFrUyxNQUFBOCtCLFdBQUEsRUFDQTkrQixNQUlBalIsSUFBQWl1QyxHQUFBUixHQUFBaEIsSUFBQSxTQUFBaXhCLEdBQ0FBLEVBQUF6MkMsVUFBQXBuQixPQUFBaUQsT0FBQTA2RCxJQXFCQUUsRUFBQXoyQyxVQUFBa0QsTUFBQSxTQUFBQSxHQUNBLElBQUF4ckIsVUFBQVMsT0FDQSxNQUFBNlIsTUFBQTI5QixPQUdBLElBQUE4dUIsSUFBQWp4QixLQUFBeDdCLEtBQUE0N0IsUUFDQSxLQUFBRyxJQUFBLFVBQUEsOEdBUUEsT0FGQS83QixNQUFBMjlCLFFBQUF2ckMsRUFBQThtQixHQUFBLEtBQUFBLEVBRUFsWixPQTBnQkEsSUFBQSsvQixJQUFBN3lDLEVBQUEsVUFtRkFrekMsR0FBQUksU0FBQXhxQixVQUFBM21CLEtBQ0FneEMsR0FBQUcsU0FBQXhxQixVQUFBL2YsTUFDQXFxQyxHQUFBRSxTQUFBeHFCLFVBQUFuZ0IsS0EwQkE2MkQsR0FBQXAzRCxJQUNBdkcsR0FBQSxnREFBQTBFLE1BQUEsS0FBQSxTQUFBdXZDLEdBQUEwcEIsR0FBQTFwQixJQUFBLEdBQ0EsSUFBQTJwQixLQUFBcnhDLEVBQUEsS0FBQXN4QyxFQUFBLEtBQUFqc0IsRUFBQSxLQUFBa3NCLEVBQUEsSUFBQS84QixFQUFBLE9BQUFnOUIsSUFBQSxJQUFBQyxJQUFBLEtBU0FqbkIsR0FBQSxTQUFBNXRCLEdBQ0FsWSxLQUFBa1ksUUFBQUEsRUFHQTR0QixJQUFBOXZCLFdBQ0FyaEIsWUFBQW14QyxHQUVBa25CLElBQUEsU0FBQS9pQyxHQUtBLElBSkFqcUIsS0FBQWlxQixLQUFBQSxFQUNBanFCLEtBQUFoUyxNQUFBLEVBQ0FnUyxLQUFBaXRELFVBRUFqdEQsS0FBQWhTLE1BQUFnUyxLQUFBaXFCLEtBQUE5N0IsUUFBQSxDQUNBLEdBQUF3cEMsR0FBQTMzQixLQUFBaXFCLEtBQUFsMUIsT0FBQWlMLEtBQUFoUyxNQUNBLElBQUEsTUFBQTJwQyxHQUFBLE1BQUFBLEVBQ0EzM0IsS0FBQWt0RCxXQUFBdjFCLE9BQ0EsSUFBQTMzQixLQUFBblIsU0FBQThvQyxJQUFBLE1BQUFBLEdBQUEzM0IsS0FBQW5SLFNBQUFtUixLQUFBbXRELFFBQ0FudEQsS0FBQW90RCxpQkFDQSxJQUFBcHRELEtBQUFxdEQsUUFBQTExQixHQUNBMzNCLEtBQUFzdEQsZ0JBQ0EsSUFBQXR0RCxLQUFBdXRELEdBQUE1MUIsRUFBQSxlQUNBMzNCLEtBQUFpdEQsT0FBQTU0RCxNQUFBckcsTUFBQWdTLEtBQUFoUyxNQUFBaThCLEtBQUEwTixJQUNBMzNCLEtBQUFoUyxZQUNBLElBQUFnUyxLQUFBd3RELGFBQUE3MUIsR0FDQTMzQixLQUFBaFMsWUFDQSxDQUNBLEdBQUF5L0QsR0FBQTkxQixFQUFBMzNCLEtBQUFtdEQsT0FDQU8sRUFBQUQsRUFBQXp0RCxLQUFBbXRELEtBQUEsR0FDQVEsRUFBQWpCLEdBQUEvMEIsR0FDQWkyQixFQUFBbEIsR0FBQWUsR0FDQUksRUFBQW5CLEdBQUFnQixFQUNBLElBQUFDLEdBQUFDLEdBQUFDLEVBQUEsQ0FDQSxHQUFBOStCLEdBQUE4K0IsRUFBQUgsRUFBQUUsRUFBQUgsRUFBQTkxQixDQUNBMzNCLE1BQUFpdEQsT0FBQTU0RCxNQUFBckcsTUFBQWdTLEtBQUFoUyxNQUFBaThCLEtBQUE4RSxFQUFBaVUsVUFBQSxJQUNBaGpDLEtBQUFoUyxPQUFBK2dDLEVBQUE1Z0MsV0FFQTZSLE1BQUE4dEQsV0FBQSw2QkFBQTl0RCxLQUFBaFMsTUFBQWdTLEtBQUFoUyxNQUFBLElBSUEsTUFBQWdTLE1BQUFpdEQsUUFHQU0sR0FBQSxTQUFBNTFCLEVBQUFvMkIsR0FDQSxNQUFBLEtBQUFBLEVBQUFoNkQsUUFBQTRqQyxJQUdBdzFCLEtBQUEsU0FBQTUvRCxHQUNBLEdBQUE4cEQsR0FBQTlwRCxHQUFBLENBQ0EsT0FBQXlTLE1BQUFoUyxNQUFBcXBELEVBQUFyM0MsS0FBQWlxQixLQUFBOTdCLE9BQUE2UixLQUFBaXFCLEtBQUFsMUIsT0FBQWlMLEtBQUFoUyxNQUFBcXBELElBQUEsR0FHQXhvRCxTQUFBLFNBQUE4b0MsR0FDQSxNQUFBQSxJQUFBLEtBQUEsS0FBQUEsR0FBQSxnQkFBQUEsSUFHQTYxQixhQUFBLFNBQUE3MUIsR0FFQSxNQUFBLE1BQUFBLEdBQUEsT0FBQUEsR0FBQSxNQUFBQSxHQUNBLE9BQUFBLEdBQUEsU0FBQUEsR0FBQSxNQUFBQSxHQUdBMDFCLFFBQUEsU0FBQTExQixHQUNBLE1BQUFBLElBQUEsS0FBQSxLQUFBQSxHQUNBQSxHQUFBLEtBQUEsS0FBQUEsR0FDQSxNQUFBQSxHQUFBLE1BQUFBLEdBR0FxMkIsY0FBQSxTQUFBcjJCLEdBQ0EsTUFBQSxNQUFBQSxHQUFBLE1BQUFBLEdBQUEzM0IsS0FBQW5SLFNBQUE4b0MsSUFHQW0yQixXQUFBLFNBQUF0MUMsRUFBQW96QyxFQUFBeEMsR0FDQUEsRUFBQUEsR0FBQXBwRCxLQUFBaFMsS0FDQSxJQUFBaWdFLEdBQUE1N0QsRUFBQXU1RCxHQUNBLEtBQUFBLEVBQUEsSUFBQTVyRCxLQUFBaFMsTUFBQSxLQUFBZ1MsS0FBQWlxQixLQUFBM3hCLFVBQUFzekQsRUFBQXhDLEdBQUEsSUFDQSxJQUFBQSxDQUNBLE1BQUFycEIsSUFBQSxTQUFBLHFEQUNBdm5CLEVBQUF5MUMsRUFBQWp1RCxLQUFBaXFCLE9BR0FtakMsV0FBQSxXQUdBLElBRkEsR0FBQTFYLEdBQUEsR0FDQWtXLEVBQUE1ckQsS0FBQWhTLE1BQ0FnUyxLQUFBaFMsTUFBQWdTLEtBQUFpcUIsS0FBQTk3QixRQUFBLENBQ0EsR0FBQXdwQyxHQUFBL2pDLEdBQUFvTSxLQUFBaXFCLEtBQUFsMUIsT0FBQWlMLEtBQUFoUyxPQUNBLElBQUEsS0FBQTJwQyxHQUFBMzNCLEtBQUFuUixTQUFBOG9DLEdBQ0ErZCxHQUFBL2QsTUFDQSxDQUNBLEdBQUF1MkIsR0FBQWx1RCxLQUFBbXRELE1BQ0EsSUFBQSxLQUFBeDFCLEdBQUEzM0IsS0FBQWd1RCxjQUFBRSxHQUNBeFksR0FBQS9kLE1BQ0EsSUFBQTMzQixLQUFBZ3VELGNBQUFyMkIsSUFDQXUyQixHQUFBbHVELEtBQUFuUixTQUFBcS9ELElBQ0EsS0FBQXhZLEVBQUEzZ0QsT0FBQTJnRCxFQUFBdm5ELE9BQUEsR0FDQXVuRCxHQUFBL2QsTUFDQSxDQUFBLElBQUEzM0IsS0FBQWd1RCxjQUFBcjJCLElBQ0F1MkIsR0FBQWx1RCxLQUFBblIsU0FBQXEvRCxJQUNBLEtBQUF4WSxFQUFBM2dELE9BQUEyZ0QsRUFBQXZuRCxPQUFBLEdBR0EsS0FGQTZSLE1BQUE4dEQsV0FBQSxxQkFLQTl0RCxLQUFBaFMsUUFFQWdTLEtBQUFpdEQsT0FBQTU0RCxNQUNBckcsTUFBQTQ5RCxFQUNBM2hDLEtBQUF5ckIsRUFDQWoyQyxVQUFBLEVBQ0E1UCxNQUFBbXNCLE9BQUEwNUIsTUFJQTRYLFVBQUEsV0FFQSxJQURBLEdBQUExQixHQUFBNXJELEtBQUFoUyxNQUNBZ1MsS0FBQWhTLE1BQUFnUyxLQUFBaXFCLEtBQUE5N0IsUUFBQSxDQUNBLEdBQUF3cEMsR0FBQTMzQixLQUFBaXFCLEtBQUFsMUIsT0FBQWlMLEtBQUFoUyxNQUNBLEtBQUFnUyxLQUFBcXRELFFBQUExMUIsS0FBQTMzQixLQUFBblIsU0FBQThvQyxHQUNBLEtBRUEzM0IsTUFBQWhTLFFBRUFnUyxLQUFBaXRELE9BQUE1NEQsTUFDQXJHLE1BQUE0OUQsRUFDQTNoQyxLQUFBanFCLEtBQUFpcUIsS0FBQWg4QixNQUFBMjlELEVBQUE1ckQsS0FBQWhTLE9BQ0FzNEIsWUFBQSxLQUlBNG1DLFdBQUEsU0FBQWlCLEdBQ0EsR0FBQXZDLEdBQUE1ckQsS0FBQWhTLEtBQ0FnUyxNQUFBaFMsT0FJQSxLQUhBLEdBQUFrckQsR0FBQSxHQUNBa1YsRUFBQUQsRUFDQXoyQixHQUFBLEVBQ0ExM0IsS0FBQWhTLE1BQUFnUyxLQUFBaXFCLEtBQUE5N0IsUUFBQSxDQUNBLEdBQUF3cEMsR0FBQTMzQixLQUFBaXFCLEtBQUFsMUIsT0FBQWlMLEtBQUFoUyxNQUVBLElBREFvZ0UsR0FBQXoyQixFQUNBRCxFQUFBLENBQ0EsR0FBQSxNQUFBQyxFQUFBLENBQ0EsR0FBQTAyQixHQUFBcnVELEtBQUFpcUIsS0FBQTN4QixVQUFBMEgsS0FBQWhTLE1BQUEsRUFBQWdTLEtBQUFoUyxNQUFBLEVBQ0FxZ0UsR0FBQXRnRSxNQUFBLGdCQUNBaVMsS0FBQTh0RCxXQUFBLDhCQUFBTyxFQUFBLEtBRUFydUQsS0FBQWhTLE9BQUEsRUFDQWtyRCxHQUFBdUwsT0FBQUMsYUFBQWp6RCxTQUFBNDhELEVBQUEsU0FDQSxDQUNBLEdBQUFDLEdBQUEzQixHQUFBaDFCLEVBQ0F1aEIsSUFBQW9WLEdBQUEzMkIsRUFFQUQsR0FBQSxNQUNBLElBQUEsT0FBQUMsRUFDQUQsR0FBQSxNQUNBLENBQUEsR0FBQUMsSUFBQXcyQixFQVFBLE1BUEFudUQsTUFBQWhTLFlBQ0FnUyxNQUFBaXRELE9BQUE1NEQsTUFDQXJHLE1BQUE0OUQsRUFDQTNoQyxLQUFBbWtDLEVBQ0EzdUQsVUFBQSxFQUNBNVAsTUFBQXFwRCxHQUlBQSxJQUFBdmhCLEVBRUEzM0IsS0FBQWhTLFFBRUFnUyxLQUFBOHRELFdBQUEscUJBQUFsQyxJQUlBLElBQUExcUIsSUFBQSxTQUFBMkUsRUFBQTN0QixHQUNBbFksS0FBQTZsQyxNQUFBQSxFQUNBN2xDLEtBQUFrWSxRQUFBQSxFQUdBZ3BCLElBQUFDLFFBQUEsVUFDQUQsR0FBQXF0QixvQkFBQSxzQkFDQXJ0QixHQUFBb0IscUJBQUEsdUJBQ0FwQixHQUFBVyxzQkFBQSx3QkFDQVgsR0FBQVUsa0JBQUEsb0JBQ0FWLEdBQUFPLGlCQUFBLG1CQUNBUCxHQUFBSyxnQkFBQSxrQkFDQUwsR0FBQWtCLGVBQUEsaUJBQ0FsQixHQUFBZSxpQkFBQSxtQkFDQWYsR0FBQWMsV0FBQSxhQUNBZCxHQUFBRyxRQUFBLFVBQ0FILEdBQUFxQixnQkFBQSxrQkFDQXJCLEdBQUFzdEIsU0FBQSxXQUNBdHRCLEdBQUFzQixpQkFBQSxtQkFDQXRCLEdBQUF3QixlQUFBLGlCQUdBeEIsR0FBQTZCLGlCQUFBLG1CQUVBN0IsR0FBQWxyQixXQUNBK3FCLElBQUEsU0FBQTlXLEdBQ0FqcUIsS0FBQWlxQixLQUFBQSxFQUNBanFCLEtBQUFpdEQsT0FBQWp0RCxLQUFBNmxDLE1BQUFtbkIsSUFBQS9pQyxFQUVBLElBQUFwNkIsR0FBQW1RLEtBQUF5dUQsU0FNQSxPQUpBLEtBQUF6dUQsS0FBQWl0RCxPQUFBOStELFFBQ0E2UixLQUFBOHRELFdBQUEseUJBQUE5dEQsS0FBQWl0RCxPQUFBLElBR0FwOUQsR0FHQTQrRCxRQUFBLFdBRUEsSUFEQSxHQUFBajRCLFFBSUEsR0FGQXgyQixLQUFBaXRELE9BQUE5K0QsT0FBQSxJQUFBNlIsS0FBQW10RCxLQUFBLElBQUEsSUFBQSxJQUFBLE1BQ0EzMkIsRUFBQW5pQyxLQUFBMkwsS0FBQTB1RCx3QkFDQTF1RCxLQUFBMnVELE9BQUEsS0FDQSxPQUFBNWdELEtBQUFtekIsR0FBQUMsUUFBQTNLLEtBQUFBLElBS0FrNEIsb0JBQUEsV0FDQSxPQUFBM2dELEtBQUFtekIsR0FBQXF0QixvQkFBQWgvQixXQUFBdnZCLEtBQUE0dUQsZ0JBR0FBLFlBQUEsV0FHQSxJQUZBLEdBQ0E3L0IsR0FEQTJTLEVBQUExaEMsS0FBQXV2QixhQUVBUixFQUFBL3VCLEtBQUEydUQsT0FBQSxNQUNBanRCLEVBQUExaEMsS0FBQUosT0FBQThoQyxFQUVBLE9BQUFBLElBR0FuUyxXQUFBLFdBQ0EsTUFBQXZ2QixNQUFBNnVELGNBR0FBLFdBQUEsV0FDQSxHQUFBMTZDLEdBQUFuVSxLQUFBOHVELFNBSUEsT0FIQTl1RCxNQUFBMnVELE9BQUEsT0FDQXg2QyxHQUFBcEcsS0FBQW16QixHQUFBb0IscUJBQUFaLEtBQUF2dEIsRUFBQXd0QixNQUFBM2hDLEtBQUE2dUQsYUFBQTdyQixTQUFBLE1BRUE3dUIsR0FHQTI2QyxRQUFBLFdBQ0EsR0FDQWh0QixHQUNBQyxFQUZBN3VDLEVBQUE4TSxLQUFBK3VELFdBR0EsT0FBQS91RCxNQUFBMnVELE9BQUEsT0FDQTdzQixFQUFBOWhDLEtBQUF1dkIsYUFDQXZ2QixLQUFBZ3ZELFFBQUEsT0FDQWp0QixFQUFBL2hDLEtBQUF1dkIsY0FDQXhoQixLQUFBbXpCLEdBQUFXLHNCQUFBM3VDLEtBQUFBLEVBQUE0dUMsVUFBQUEsRUFBQUMsV0FBQUEsSUFHQTd1QyxHQUdBNjdELFVBQUEsV0FFQSxJQURBLEdBQUFydEIsR0FBQTFoQyxLQUFBaXZELGFBQ0FqdkQsS0FBQTJ1RCxPQUFBLE9BQ0FqdEIsR0FBQTN6QixLQUFBbXpCLEdBQUFVLGtCQUFBb0IsU0FBQSxLQUFBdEIsS0FBQUEsRUFBQUMsTUFBQTNoQyxLQUFBaXZELGFBRUEsT0FBQXZ0QixJQUdBdXRCLFdBQUEsV0FFQSxJQURBLEdBQUF2dEIsR0FBQTFoQyxLQUFBa3ZELFdBQ0FsdkQsS0FBQTJ1RCxPQUFBLE9BQ0FqdEIsR0FBQTN6QixLQUFBbXpCLEdBQUFVLGtCQUFBb0IsU0FBQSxLQUFBdEIsS0FBQUEsRUFBQUMsTUFBQTNoQyxLQUFBa3ZELFdBRUEsT0FBQXh0QixJQUdBd3RCLFNBQUEsV0FHQSxJQUZBLEdBQ0FuZ0MsR0FEQTJTLEVBQUExaEMsS0FBQW12RCxhQUVBcGdDLEVBQUEvdUIsS0FBQTJ1RCxPQUFBLEtBQUEsS0FBQSxNQUFBLFFBQ0FqdEIsR0FBQTN6QixLQUFBbXpCLEdBQUFPLGlCQUFBdUIsU0FBQWpVLEVBQUE5RSxLQUFBeVgsS0FBQUEsRUFBQUMsTUFBQTNoQyxLQUFBbXZELGFBRUEsT0FBQXp0QixJQUdBeXRCLFdBQUEsV0FHQSxJQUZBLEdBQ0FwZ0MsR0FEQTJTLEVBQUExaEMsS0FBQW92RCxXQUVBcmdDLEVBQUEvdUIsS0FBQTJ1RCxPQUFBLElBQUEsSUFBQSxLQUFBLE9BQ0FqdEIsR0FBQTN6QixLQUFBbXpCLEdBQUFPLGlCQUFBdUIsU0FBQWpVLEVBQUE5RSxLQUFBeVgsS0FBQUEsRUFBQUMsTUFBQTNoQyxLQUFBb3ZELFdBRUEsT0FBQTF0QixJQUdBMHRCLFNBQUEsV0FHQSxJQUZBLEdBQ0FyZ0MsR0FEQTJTLEVBQUExaEMsS0FBQXF2RCxpQkFFQXRnQyxFQUFBL3VCLEtBQUEydUQsT0FBQSxJQUFBLE1BQ0FqdEIsR0FBQTN6QixLQUFBbXpCLEdBQUFPLGlCQUFBdUIsU0FBQWpVLEVBQUE5RSxLQUFBeVgsS0FBQUEsRUFBQUMsTUFBQTNoQyxLQUFBcXZELGlCQUVBLE9BQUEzdEIsSUFHQTJ0QixlQUFBLFdBR0EsSUFGQSxHQUNBdGdDLEdBREEyUyxFQUFBMWhDLEtBQUFzdkQsUUFFQXZnQyxFQUFBL3VCLEtBQUEydUQsT0FBQSxJQUFBLElBQUEsTUFDQWp0QixHQUFBM3pCLEtBQUFtekIsR0FBQU8saUJBQUF1QixTQUFBalUsRUFBQTlFLEtBQUF5WCxLQUFBQSxFQUFBQyxNQUFBM2hDLEtBQUFzdkQsUUFFQSxPQUFBNXRCLElBR0E0dEIsTUFBQSxXQUNBLEdBQUF2Z0MsRUFDQSxRQUFBQSxFQUFBL3VCLEtBQUEydUQsT0FBQSxJQUFBLElBQUEsT0FDQTVnRCxLQUFBbXpCLEdBQUFLLGdCQUFBeUIsU0FBQWpVLEVBQUE5RSxLQUFBM3dCLFFBQUEsRUFBQWtvQyxTQUFBeGhDLEtBQUFzdkQsU0FFQXR2RCxLQUFBdXZELFdBSUFBLFFBQUEsV0FDQSxHQUFBQSxFQUNBdnZELE1BQUEydUQsT0FBQSxNQUNBWSxFQUFBdnZELEtBQUE0dUQsY0FDQTV1RCxLQUFBZ3ZELFFBQUEsTUFDQWh2RCxLQUFBMnVELE9BQUEsS0FDQVksRUFBQXZ2RCxLQUFBd3ZELG1CQUNBeHZELEtBQUEydUQsT0FBQSxLQUNBWSxFQUFBdnZELEtBQUFraUMsU0FDQWxpQyxLQUFBeXZELFVBQUFyZ0UsZUFBQTRRLEtBQUFtdEQsT0FBQWxqQyxNQUNBc2xDLEVBQUF0N0QsRUFBQStMLEtBQUF5dkQsVUFBQXp2RCxLQUFBZ3ZELFVBQUEva0MsT0FDQWpxQixLQUFBbXRELE9BQUE3bUMsV0FDQWlwQyxFQUFBdnZELEtBQUFzbUIsYUFDQXRtQixLQUFBbXRELE9BQUExdEQsU0FDQTh2RCxFQUFBdnZELEtBQUFQLFdBRUFPLEtBQUE4dEQsV0FBQSwyQkFBQTl0RCxLQUFBbXRELE9BSUEsS0FEQSxHQUFBeGdCLEdBQ0FBLEVBQUEzc0MsS0FBQTJ1RCxPQUFBLElBQUEsSUFBQSxNQUNBLE1BQUFoaUIsRUFBQTFpQixNQUNBc2xDLEdBQUF4aEQsS0FBQW16QixHQUFBa0IsZUFBQUMsT0FBQWt0QixFQUFBN2hFLFVBQUFzUyxLQUFBMHZELGtCQUNBMXZELEtBQUFndkQsUUFBQSxNQUNBLE1BQUFyaUIsRUFBQTFpQixNQUNBc2xDLEdBQUF4aEQsS0FBQW16QixHQUFBZSxpQkFBQUMsT0FBQXF0QixFQUFBcnlCLFNBQUFsOUIsS0FBQXV2QixhQUFBNFMsVUFBQSxHQUNBbmlDLEtBQUFndkQsUUFBQSxNQUNBLE1BQUFyaUIsRUFBQTFpQixLQUNBc2xDLEdBQUF4aEQsS0FBQW16QixHQUFBZSxpQkFBQUMsT0FBQXF0QixFQUFBcnlCLFNBQUFsOUIsS0FBQXNtQixhQUFBNmIsVUFBQSxHQUVBbmlDLEtBQUE4dEQsV0FBQSxhQUdBLE9BQUF5QixJQUdBM3ZELE9BQUEsU0FBQSt2RCxHQUlBLElBSEEsR0FBQWg2RCxJQUFBZzZELEdBQ0F4N0MsR0FBQXBHLEtBQUFtekIsR0FBQWtCLGVBQUFDLE9BQUFyaUMsS0FBQXNtQixhQUFBNTRCLFVBQUFpSSxFQUFBaUssUUFBQSxHQUVBSSxLQUFBMnVELE9BQUEsTUFDQWg1RCxFQUFBdEIsS0FBQTJMLEtBQUF1dkIsYUFHQSxPQUFBcGIsSUFHQXU3QyxlQUFBLFdBQ0EsR0FBQS81RCxLQUNBLElBQUEsTUFBQXFLLEtBQUE0dkQsWUFBQTNsQyxLQUNBLEVBQ0F0MEIsR0FBQXRCLEtBQUEyTCxLQUFBdXZCLG9CQUNBdnZCLEtBQUEydUQsT0FBQSxLQUVBLE9BQUFoNUQsSUFHQTJ3QixXQUFBLFdBQ0EsR0FBQXlJLEdBQUEvdUIsS0FBQWd2RCxTQUlBLE9BSEFqZ0MsR0FBQXpJLFlBQ0F0bUIsS0FBQTh0RCxXQUFBLDRCQUFBLytCLElBRUFoaEIsS0FBQW16QixHQUFBYyxXQUFBem9DLEtBQUF3MUIsRUFBQTlFLE9BR0F4cUIsU0FBQSxXQUVBLE9BQUFzTyxLQUFBbXpCLEdBQUFHLFFBQUF4eEMsTUFBQW1RLEtBQUFndkQsVUFBQW4vRCxRQUdBMi9ELGlCQUFBLFdBQ0EsR0FBQWpnRCxLQUNBLElBQUEsTUFBQXZQLEtBQUE0dkQsWUFBQTNsQyxLQUNBLEVBQUEsQ0FDQSxHQUFBanFCLEtBQUFtdEQsS0FBQSxLQUVBLEtBRUE1OUMsR0FBQWxiLEtBQUEyTCxLQUFBdXZCLG9CQUNBdnZCLEtBQUEydUQsT0FBQSxLQUlBLE9BRkEzdUQsTUFBQWd2RCxRQUFBLE1BRUFqaEQsS0FBQW16QixHQUFBcUIsZ0JBQUFoekIsU0FBQUEsSUFHQTJ5QixPQUFBLFdBQ0EsR0FBQWhGLEdBQUF1RixJQUNBLElBQUEsTUFBQXppQyxLQUFBNHZELFlBQUEzbEMsS0FDQSxFQUFBLENBQ0EsR0FBQWpxQixLQUFBbXRELEtBQUEsS0FFQSxLQUVBandCLElBQUFudkIsS0FBQW16QixHQUFBc3RCLFNBQUFxQixLQUFBLFFBQ0E3dkQsS0FBQW10RCxPQUFBMXRELFNBQ0F5OUIsRUFBQWh1QyxJQUFBOFEsS0FBQVAsV0FDQU8sS0FBQW10RCxPQUFBN21DLFdBQ0E0VyxFQUFBaHVDLElBQUE4USxLQUFBc21CLGFBRUF0bUIsS0FBQTh0RCxXQUFBLGNBQUE5dEQsS0FBQW10RCxRQUVBbnRELEtBQUFndkQsUUFBQSxLQUNBOXhCLEVBQUFydEMsTUFBQW1RLEtBQUF1dkIsYUFDQWtULEVBQUFwdUMsS0FBQTZvQyxTQUNBbDlCLEtBQUEydUQsT0FBQSxLQUlBLE9BRkEzdUQsTUFBQWd2RCxRQUFBLE1BRUFqaEQsS0FBQW16QixHQUFBc0IsaUJBQUFDLFdBQUFBLElBR0FxckIsV0FBQSxTQUFBM2dCLEVBQUFwZSxHQUNBLEtBQUFnUixJQUFBLFNBQ0EseUZBQ0FoUixFQUFBOUUsS0FBQWtqQixFQUFBcGUsRUFBQS9nQyxNQUFBLEVBQUFnUyxLQUFBaXFCLEtBQUFqcUIsS0FBQWlxQixLQUFBM3hCLFVBQUF5MkIsRUFBQS9nQyxTQUdBZ2hFLFFBQUEsU0FBQWMsR0FDQSxHQUFBLElBQUE5dkQsS0FBQWl0RCxPQUFBOStELE9BQ0EsS0FBQTR4QyxJQUFBLE9BQUEsb0NBQUEvL0IsS0FBQWlxQixLQUdBLElBQUE4RSxHQUFBL3VCLEtBQUEydUQsT0FBQW1CLEVBSUEsT0FIQS9nQyxJQUNBL3VCLEtBQUE4dEQsV0FBQSw2QkFBQWdDLEVBQUEsSUFBQTl2RCxLQUFBbXRELFFBRUFwK0IsR0FHQTZnQyxVQUFBLFdBQ0EsR0FBQSxJQUFBNXZELEtBQUFpdEQsT0FBQTkrRCxPQUNBLEtBQUE0eEMsSUFBQSxPQUFBLG9DQUFBLy9CLEtBQUFpcUIsS0FFQSxPQUFBanFCLE1BQUFpdEQsT0FBQSxJQUdBRSxLQUFBLFNBQUEyQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLE1BQUFqd0QsTUFBQWt3RCxVQUFBLEVBQUFKLEVBQUFDLEVBQUFDLEVBQUFDLElBR0FDLFVBQUEsU0FBQTNpRSxFQUFBdWlFLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsR0FBQWp3RCxLQUFBaXRELE9BQUE5K0QsT0FBQVosRUFBQSxDQUNBLEdBQUF3aEMsR0FBQS91QixLQUFBaXRELE9BQUExL0QsR0FDQXMvRCxFQUFBOTlCLEVBQUE5RSxJQUNBLElBQUE0aUMsSUFBQWlELEdBQUFqRCxJQUFBa0QsR0FBQWxELElBQUFtRCxHQUFBbkQsSUFBQW9ELElBQ0FILElBQUFDLElBQUFDLElBQUFDLEVBQ0EsTUFBQWxoQyxHQUdBLE9BQUEsR0FHQTQvQixPQUFBLFNBQUFtQixFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLEdBQUFsaEMsR0FBQS91QixLQUFBbXRELEtBQUEyQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUNBLE9BQUFsaEMsSUFDQS91QixLQUFBaXRELE9BQUF0M0MsUUFDQW9aLElBRUEsR0FPQTBnQyxXQUNBVSxRQUFBcGlELEtBQUFtekIsR0FBQUcsUUFBQXh4QyxPQUFBLEdBQ0F1Z0UsU0FBQXJpRCxLQUFBbXpCLEdBQUFHLFFBQUF4eEMsT0FBQSxHQUNBd2dFLFFBQUF0aUQsS0FBQW16QixHQUFBRyxRQUFBeHhDLE1BQUEsTUFDQTVDLFdBQUE4Z0IsS0FBQW16QixHQUFBRyxRQUFBeHhDLE1BQUE1QyxHQUNBK1MsUUFBQStOLEtBQUFtekIsR0FBQXdCLGtCQThKQVMsR0FBQW50QixXQUNBeGIsUUFBQSxTQUFBKzBCLEVBQUFpVyxHQUNBLEdBQUExdkMsR0FBQWtLLEtBQ0ErZ0MsRUFBQS9nQyxLQUFBb2pDLFdBQUFyQyxJQUFBeFIsRUFDQXZ2QixNQUFBa1osT0FDQW8zQyxPQUFBLEVBQ0FuZCxXQUNBM04sZ0JBQUFBLEVBQ0F6dkMsSUFBQXc2RCxRQUFBLzVCLFFBQUFnNkIsUUFDQWhrQyxRQUFBK2pDLFFBQUEvNUIsUUFBQWc2QixRQUNBcnNCLFdBRUFyRCxHQUFBQyxFQUFBanJDLEVBQUEwUixRQUNBLElBQ0FpcEQsR0FEQTcrRCxFQUFBLEVBR0EsSUFEQW9PLEtBQUEwd0QsTUFBQSxTQUNBRCxFQUFBM3RCLEdBQUEvQixHQUFBLENBQ0EvZ0MsS0FBQWtaLE1BQUF5M0MsVUFBQSxRQUNBLElBQUF4OEMsR0FBQW5VLEtBQUFzd0QsUUFDQXR3RCxNQUFBNHdELFFBQUFILEVBQUF0OEMsR0FDQW5VLEtBQUE2d0QsUUFBQTE4QyxHQUNBdmlCLEVBQUEsYUFBQW9PLEtBQUE4d0QsaUJBQUEsU0FBQSxTQUVBLEdBQUF4dkIsR0FBQXFCLEdBQUE1QixFQUFBdkssS0FDQTFnQyxHQUFBNDZELE1BQUEsU0FDQTNoRSxFQUFBdXlDLEVBQUEsU0FBQWtMLEVBQUF0OUMsR0FDQSxHQUFBNmhFLEdBQUEsS0FBQTdoRSxDQUNBNEcsR0FBQW9qQixNQUFBNjNDLElBQUFSLFFBQUEvNUIsUUFBQWc2QixRQUNBMTZELEVBQUFvakIsTUFBQXkzQyxVQUFBSSxDQUNBLElBQUFDLEdBQUFsN0QsRUFBQXc2RCxRQUNBeDZELEdBQUE4NkQsUUFBQXBrQixFQUFBd2tCLEdBQ0FsN0QsRUFBQSs2RCxRQUFBRyxHQUNBbDdELEVBQUFvakIsTUFBQWlyQixPQUFBOXZDLEtBQUEwOEQsR0FDQXZrQixFQUFBeWtCLFFBQUEvaEUsSUFFQThRLEtBQUFrWixNQUFBeTNDLFVBQUEsS0FDQTN3RCxLQUFBMHdELE1BQUEsT0FDQTF3RCxLQUFBNHdELFFBQUE3dkIsRUFDQSxJQUFBbXdCLEdBR0EsSUFBQWx4RCxLQUFBbXhELElBQUEsSUFBQW54RCxLQUFBb3hELE9BQUEsT0FDQXB4RCxLQUFBcXhELGVBQ0EsVUFBQXJ4RCxLQUFBOHdELGlCQUFBLEtBQUEsV0FDQWwvRCxFQUNBb08sS0FBQXN4RCxXQUNBLGFBR0F2N0QsRUFBQSxHQUFBeXFDLFVBQUEsVUFDQSx1QkFDQSxtQkFDQSxxQkFDQSxpQkFDQSwwQkFDQSxZQUNBLE9BQ0EsT0FDQTB3QixHQUNBbHhELEtBQUF3SCxRQUNBcTRCLEdBQ0FJLEdBQ0FFLEdBQ0FILEdBQ0FPLEdBQ0FFLEdBQ0FDLEdBQ0FuUixFQUtBLE9BSEF2dkIsTUFBQWtaLE1BQUFsWixLQUFBMHdELE1BQUF6akUsRUFDQThJLEVBQUF3MkIsUUFBQTBXLEdBQUFsQyxHQUNBaHJDLEVBQUEwSixTQUFBeWpDLEdBQUFuQyxHQUNBaHJDLEdBR0FvN0QsSUFBQSxNQUVBQyxPQUFBLFNBRUFFLFNBQUEsV0FDQSxHQUFBbjlDLE1BQ0FvZCxFQUFBdnhCLEtBQUFrWixNQUFBaXJCLE9BQ0FydUMsRUFBQWtLLElBT0EsT0FOQWpSLEdBQUF3aUMsRUFBQSxTQUFBaDRCLEdBQ0E0YSxFQUFBOWYsS0FBQSxPQUFBa0YsRUFBQSxJQUFBekQsRUFBQWc3RCxpQkFBQXYzRCxFQUFBLFFBRUFnNEIsRUFBQXBqQyxRQUNBZ21CLEVBQUE5ZixLQUFBLGNBQUFrOUIsRUFBQTU0QixLQUFBLEtBQUEsTUFFQXdiLEVBQUF4YixLQUFBLEtBR0FtNEQsaUJBQUEsU0FBQXYzRCxFQUFBeTJCLEdBQ0EsTUFBQSxZQUFBQSxFQUFBLEtBQ0Fod0IsS0FBQXV4RCxXQUFBaDRELEdBQ0F5RyxLQUFBdzJCLEtBQUFqOUIsR0FDQSxNQUdBODNELGFBQUEsV0FDQSxHQUFBNzRELE1BQ0ExQyxFQUFBa0ssSUFJQSxPQUhBalIsR0FBQWlSLEtBQUFrWixNQUFBaTZCLFFBQUEsU0FBQXIzQixFQUFBbGMsR0FDQXBILEVBQUFuRSxLQUFBeW5CLEVBQUEsWUFBQWhtQixFQUFBNGhDLE9BQUE5M0IsR0FBQSxPQUVBcEgsRUFBQXJLLE9BQUEsT0FBQXFLLEVBQUFHLEtBQUEsS0FBQSxJQUNBLElBR0E0NEQsV0FBQSxTQUFBQyxHQUNBLE1BQUF4eEQsTUFBQWtaLE1BQUFzNEMsR0FBQWpCLEtBQUFwaUUsT0FBQSxPQUFBNlIsS0FBQWtaLE1BQUFzNEMsR0FBQWpCLEtBQUE1M0QsS0FBQSxLQUFBLElBQUEsSUFHQTY5QixLQUFBLFNBQUFnN0IsR0FDQSxNQUFBeHhELE1BQUFrWixNQUFBczRDLEdBQUFoN0IsS0FBQTc5QixLQUFBLEtBR0FpNEQsUUFBQSxTQUFBN3ZCLEVBQUFpd0IsRUFBQVMsRUFBQUMsRUFBQTcvRCxFQUFBOC9ELEdBQ0EsR0FBQWp3QixHQUFBQyxFQUFBaHNDLEVBQUE0NUIsRUFBQXo1QixFQUFBa0ssSUFFQSxJQURBMHhELEVBQUFBLEdBQUE1L0QsR0FDQTYvRCxHQUFBdC9ELEVBQUEwdUMsRUFBQWt3QixTQU1BLE1BTEFELEdBQUFBLEdBQUFoeEQsS0FBQXN3RCxhQUNBdHdELE1BQUE0eEQsSUFBQSxJQUNBNXhELEtBQUE2eEQsV0FBQWIsRUFBQWh4RCxLQUFBOHhELGVBQUEsSUFBQS93QixFQUFBa3dCLFVBQ0FqeEQsS0FBQSt4RCxZQUFBaHhCLEVBQUFpd0IsRUFBQVMsRUFBQUMsRUFBQTcvRCxHQUFBLEdBSUEsUUFBQWt2QyxFQUFBaHpCLE1BQ0EsSUFBQW16QixJQUFBQyxRQUNBcHlDLEVBQUFneUMsRUFBQXZLLEtBQUEsU0FBQWpILEVBQUE1ekIsR0FDQTdGLEVBQUE4NkQsUUFBQXJoQyxFQUFBQSxXQUFBdGlDLEVBQUFBLEVBQUEsU0FBQW0wQyxHQUFBTyxFQUFBUCxJQUNBemxDLElBQUFvbEMsRUFBQXZLLEtBQUFyb0MsT0FBQSxFQUNBMkgsRUFBQXcwQyxVQUFBOVQsS0FBQW5pQyxLQUFBc3RDLEVBQUEsS0FFQTdyQyxFQUFBKzZELFFBQUFsdkIsSUFHQSxNQUNBLEtBQUFULElBQUFHLFFBQ0E5UixFQUFBdnZCLEtBQUEwM0IsT0FBQXFKLEVBQUFseEMsT0FDQW1RLEtBQUF3c0IsT0FBQXdrQyxFQUFBemhDLEdBQ0FtaUMsRUFBQW5pQyxFQUNBLE1BQ0EsS0FBQTJSLElBQUFLLGdCQUNBdmhDLEtBQUE0d0QsUUFBQTd2QixFQUFBUyxTQUFBdjBDLEVBQUFBLEVBQUEsU0FBQW0wQyxHQUFBTyxFQUFBUCxJQUNBN1IsRUFBQXdSLEVBQUFpQyxTQUFBLElBQUFoakMsS0FBQXlnQyxVQUFBa0IsRUFBQSxHQUFBLElBQ0EzaEMsS0FBQXdzQixPQUFBd2tDLEVBQUF6aEMsR0FDQW1pQyxFQUFBbmlDLEVBQ0EsTUFDQSxLQUFBMlIsSUFBQU8saUJBQ0F6aEMsS0FBQTR3RCxRQUFBN3ZCLEVBQUFXLEtBQUF6MEMsRUFBQUEsRUFBQSxTQUFBbTBDLEdBQUFNLEVBQUFOLElBQ0FwaEMsS0FBQTR3RCxRQUFBN3ZCLEVBQUFZLE1BQUExMEMsRUFBQUEsRUFBQSxTQUFBbTBDLEdBQUFPLEVBQUFQLElBRUE3UixFQURBLE1BQUF3UixFQUFBaUMsU0FDQWhqQyxLQUFBZ3lELEtBQUF0d0IsRUFBQUMsR0FDQSxNQUFBWixFQUFBaUMsU0FDQWhqQyxLQUFBeWdDLFVBQUFpQixFQUFBLEdBQUFYLEVBQUFpQyxTQUFBaGpDLEtBQUF5Z0MsVUFBQWtCLEVBQUEsR0FFQSxJQUFBRCxFQUFBLElBQUFYLEVBQUFpQyxTQUFBLElBQUFyQixFQUFBLElBRUEzaEMsS0FBQXdzQixPQUFBd2tDLEVBQUF6aEMsR0FDQW1pQyxFQUFBbmlDLEVBQ0EsTUFDQSxLQUFBMlIsSUFBQVUsa0JBQ0FvdkIsRUFBQUEsR0FBQWh4RCxLQUFBc3dELFNBQ0F4NkQsRUFBQTg2RCxRQUFBN3ZCLEVBQUFXLEtBQUFzdkIsR0FDQWw3RCxFQUFBODdELElBQUEsT0FBQTd3QixFQUFBaUMsU0FBQWd1QixFQUFBbDdELEVBQUFtOEQsSUFBQWpCLEdBQUFsN0QsRUFBQWk4RCxZQUFBaHhCLEVBQUFZLE1BQUFxdkIsSUFDQVUsRUFBQVYsRUFDQSxNQUNBLEtBQUE5dkIsSUFBQVcsc0JBQ0FtdkIsRUFBQUEsR0FBQWh4RCxLQUFBc3dELFNBQ0F4NkQsRUFBQTg2RCxRQUFBN3ZCLEVBQUE3dEMsS0FBQTg5RCxHQUNBbDdELEVBQUE4N0QsSUFBQVosRUFBQWw3RCxFQUFBaThELFlBQUFoeEIsRUFBQWUsVUFBQWt2QixHQUFBbDdELEVBQUFpOEQsWUFBQWh4QixFQUFBZ0IsV0FBQWl2QixJQUNBVSxFQUFBVixFQUNBLE1BQ0EsS0FBQTl2QixJQUFBYyxXQUNBZ3ZCLEVBQUFBLEdBQUFoeEQsS0FBQXN3RCxTQUNBbUIsSUFDQUEsRUFBQXhpRSxRQUFBLFdBQUE2RyxFQUFBNDZELE1BQUEsSUFBQTF3RCxLQUFBd3NCLE9BQUF4c0IsS0FBQXN3RCxTQUFBdHdELEtBQUFreUQsa0JBQUEsSUFBQW54QixFQUFBeG5DLE1BQUEsUUFDQWs0RCxFQUFBdHZCLFVBQUEsRUFDQXN2QixFQUFBbDRELEtBQUF3bkMsRUFBQXhuQyxNQUVBc21DLEdBQUFrQixFQUFBeG5DLE1BQ0F6RCxFQUFBODdELElBQUEsV0FBQTk3RCxFQUFBNDZELE9BQUE1NkQsRUFBQW04RCxJQUFBbjhELEVBQUFvOEQsa0JBQUEsSUFBQW54QixFQUFBeG5DLE9BQ0EsV0FDQXpELEVBQUE4N0QsSUFBQSxXQUFBOTdELEVBQUE0NkQsT0FBQSxJQUFBLFdBQ0E3K0QsR0FBQSxJQUFBQSxHQUNBaUUsRUFBQTg3RCxJQUNBOTdELEVBQUFtOEQsSUFBQW44RCxFQUFBcThELGtCQUFBLElBQUFweEIsRUFBQXhuQyxPQUNBekQsRUFBQSs3RCxXQUFBLzdELEVBQUFxOEQsa0JBQUEsSUFBQXB4QixFQUFBeG5DLE1BQUEsT0FFQXpELEVBQUEwMkIsT0FBQXdrQyxFQUFBbDdELEVBQUFxOEQsa0JBQUEsSUFBQXB4QixFQUFBeG5DLFVBRUF5M0QsR0FBQWw3RCxFQUFBKzdELFdBQUFiLEVBQUFsN0QsRUFBQXE4RCxrQkFBQSxJQUFBcHhCLEVBQUF4bkMsU0FFQXpELEVBQUFvakIsTUFBQXNzQixpQkFBQWxDLEdBQUF2QyxFQUFBeG5DLFFBQ0F6RCxFQUFBczhELG9CQUFBcEIsR0FFQVUsRUFBQVYsRUFDQSxNQUNBLEtBQUE5dkIsSUFBQWUsaUJBQ0FQLEVBQUErdkIsSUFBQUEsRUFBQXhpRSxRQUFBK1EsS0FBQXN3RCxXQUFBdHdELEtBQUFzd0QsU0FDQVUsRUFBQUEsR0FBQWh4RCxLQUFBc3dELFNBQ0F4NkQsRUFBQTg2RCxRQUFBN3ZCLEVBQUFtQixPQUFBUixFQUFBejBDLEVBQUEsV0FDQTZJLEVBQUE4N0QsSUFBQTk3RCxFQUFBdThELFFBQUEzd0IsR0FBQSxXQUNBWCxFQUFBb0IsVUFDQVIsRUFBQTdyQyxFQUFBdzZELFNBQ0F4NkQsRUFBQTg2RCxRQUFBN3ZCLEVBQUE3RCxTQUFBeUUsR0FDQTdyQyxFQUFBa3FDLGVBQUEyQixHQUNBN3JDLEVBQUF3OEQsd0JBQUEzd0IsR0FDQTl2QyxHQUFBLElBQUFBLEdBQ0FpRSxFQUFBODdELElBQUE5N0QsRUFBQW04RCxJQUFBbjhELEVBQUFnOEQsZUFBQXB3QixFQUFBQyxJQUFBN3JDLEVBQUErN0QsV0FBQS83RCxFQUFBZzhELGVBQUFwd0IsRUFBQUMsR0FBQSxPQUVBcFMsRUFBQXo1QixFQUFBbXFDLGlCQUFBbnFDLEVBQUFnOEQsZUFBQXB3QixFQUFBQyxJQUNBN3JDLEVBQUEwMkIsT0FBQXdrQyxFQUFBemhDLEdBQ0FraUMsSUFDQUEsRUFBQXR2QixVQUFBLEVBQ0FzdkIsRUFBQWw0RCxLQUFBb29DLEtBR0E5QixHQUFBa0IsRUFBQTdELFNBQUEzakMsTUFDQTFILEdBQUEsSUFBQUEsR0FDQWlFLEVBQUE4N0QsSUFBQTk3RCxFQUFBbThELElBQUFuOEQsRUFBQXE4RCxrQkFBQXp3QixFQUFBWCxFQUFBN0QsU0FBQTNqQyxPQUFBekQsRUFBQSs3RCxXQUFBLzdELEVBQUFxOEQsa0JBQUF6d0IsRUFBQVgsRUFBQTdELFNBQUEzakMsTUFBQSxPQUVBZzJCLEVBQUF6NUIsRUFBQXE4RCxrQkFBQXp3QixFQUFBWCxFQUFBN0QsU0FBQTNqQyxPQUNBekQsRUFBQW9qQixNQUFBc3NCLGlCQUFBbEMsR0FBQXZDLEVBQUE3RCxTQUFBM2pDLFNBQ0FnMkIsRUFBQXo1QixFQUFBbXFDLGlCQUFBMVEsSUFFQXo1QixFQUFBMDJCLE9BQUF3a0MsRUFBQXpoQyxHQUNBa2lDLElBQ0FBLEVBQUF0dkIsVUFBQSxFQUNBc3ZCLEVBQUFsNEQsS0FBQXduQyxFQUFBN0QsU0FBQTNqQyxRQUdBLFdBQ0F6RCxFQUFBMDJCLE9BQUF3a0MsRUFBQSxlQUVBVSxFQUFBVixNQUNBbi9ELEVBQ0EsTUFDQSxLQUFBcXZDLElBQUFrQixlQUNBNHVCLEVBQUFBLEdBQUFoeEQsS0FBQXN3RCxTQUNBdnZCLEVBQUFuaEMsUUFDQStoQyxFQUFBN3JDLEVBQUE4SixPQUFBbWhDLEVBQUFzQixPQUFBOW9DLE1BQ0E1RCxLQUNBNUcsRUFBQWd5QyxFQUFBcnpDLFVBQUEsU0FBQTB6QyxHQUNBLEdBQUFJLEdBQUExckMsRUFBQXc2RCxRQUNBeDZELEdBQUE4NkQsUUFBQXh2QixFQUFBSSxHQUNBN3JDLEVBQUF0QixLQUFBbXRDLEtBRUFqUyxFQUFBb1MsRUFBQSxJQUFBaHNDLEVBQUFnRCxLQUFBLEtBQUEsSUFDQTdDLEVBQUEwMkIsT0FBQXdrQyxFQUFBemhDLEdBQ0FtaUMsRUFBQVYsS0FFQXJ2QixFQUFBN3JDLEVBQUF3NkQsU0FDQTV1QixLQUNBL3JDLEtBQ0FHLEVBQUE4NkQsUUFBQTd2QixFQUFBc0IsT0FBQVYsRUFBQUQsRUFBQSxXQUNBNXJDLEVBQUE4N0QsSUFBQTk3RCxFQUFBdThELFFBQUExd0IsR0FBQSxXQUNBN3JDLEVBQUF5OEQsc0JBQUE1d0IsR0FDQTV5QyxFQUFBZ3lDLEVBQUFyekMsVUFBQSxTQUFBMHpDLEdBQ0F0ckMsRUFBQTg2RCxRQUFBeHZCLEVBQUF0ckMsRUFBQXc2RCxTQUFBcmpFLEVBQUEsU0FBQXUwQyxHQUNBN3JDLEVBQUF0QixLQUFBeUIsRUFBQW1xQyxpQkFBQXVCLFFBR0FFLEVBQUFub0MsTUFDQXpELEVBQUFvakIsTUFBQXNzQixpQkFDQTF2QyxFQUFBczhELG9CQUFBMXdCLEVBQUF6eUMsU0FFQXNnQyxFQUFBejVCLEVBQUEwOEQsT0FBQTl3QixFQUFBenlDLFFBQUF5eUMsRUFBQW5vQyxLQUFBbW9DLEVBQUFTLFVBQUEsSUFBQXhzQyxFQUFBZ0QsS0FBQSxLQUFBLEtBRUE0MkIsRUFBQW9TLEVBQUEsSUFBQWhzQyxFQUFBZ0QsS0FBQSxLQUFBLElBRUE0MkIsRUFBQXo1QixFQUFBbXFDLGlCQUFBMVEsR0FDQXo1QixFQUFBMDJCLE9BQUF3a0MsRUFBQXpoQyxJQUNBLFdBQ0F6NUIsRUFBQTAyQixPQUFBd2tDLEVBQUEsZUFFQVUsRUFBQVYsS0FHQSxNQUNBLEtBQUE5dkIsSUFBQW9CLHFCQUdBLEdBRkFYLEVBQUEzaEMsS0FBQXN3RCxTQUNBNXVCLE1BQ0FtQixHQUFBOUIsRUFBQVcsTUFDQSxLQUFBM0IsSUFBQSxPQUFBLDRDQUVBLy9CLE1BQUE0d0QsUUFBQTd2QixFQUFBVyxLQUFBejBDLEVBQUF5MEMsRUFBQSxXQUNBNXJDLEVBQUE4N0QsSUFBQTk3RCxFQUFBdThELFFBQUEzd0IsRUFBQXp5QyxTQUFBLFdBQ0E2RyxFQUFBODZELFFBQUE3dkIsRUFBQVksTUFBQUEsR0FDQTdyQyxFQUFBczhELG9CQUFBdDhELEVBQUEwOEQsT0FBQTl3QixFQUFBenlDLFFBQUF5eUMsRUFBQW5vQyxLQUFBbW9DLEVBQUFTLFdBQ0Fyc0MsRUFBQTI4RCwyQkFBQS93QixFQUFBenlDLFNBQ0FzZ0MsRUFBQXo1QixFQUFBMDhELE9BQUE5d0IsRUFBQXp5QyxRQUFBeXlDLEVBQUFub0MsS0FBQW1vQyxFQUFBUyxVQUFBcEIsRUFBQWlDLFNBQUFyQixFQUNBN3JDLEVBQUEwMkIsT0FBQXdrQyxFQUFBemhDLEdBQ0FtaUMsRUFBQVYsR0FBQXpoQyxNQUVBLEVBQ0EsTUFDQSxLQUFBMlIsSUFBQXFCLGdCQUNBNXNDLEtBQ0E1RyxFQUFBZ3lDLEVBQUF4eEIsU0FBQSxTQUFBNnhCLEdBQ0F0ckMsRUFBQTg2RCxRQUFBeHZCLEVBQUF0ckMsRUFBQXc2RCxTQUFBcmpFLEVBQUEsU0FBQXUwQyxHQUNBN3JDLEVBQUF0QixLQUFBbXRDLE9BR0FqUyxFQUFBLElBQUE1NUIsRUFBQWdELEtBQUEsS0FBQSxJQUNBcUgsS0FBQXdzQixPQUFBd2tDLEVBQUF6aEMsR0FDQW1pQyxFQUFBbmlDLEVBQ0EsTUFDQSxLQUFBMlIsSUFBQXNCLGlCQUNBN3NDLEtBQ0E1RyxFQUFBZ3lDLEVBQUEwQixXQUFBLFNBQUF2RixHQUNBcG5DLEVBQUE4NkQsUUFBQTF6QixFQUFBcnRDLE1BQUFpRyxFQUFBdzZELFNBQUFyakUsRUFBQSxTQUFBbTBDLEdBQ0F6ckMsRUFBQXRCLEtBQUF5QixFQUFBNGhDLE9BQ0F3RixFQUFBaHVDLElBQUE2ZSxPQUFBbXpCLEdBQUFjLFdBQUE5RSxFQUFBaHVDLElBQUFxSyxLQUNBLEdBQUEyakMsRUFBQWh1QyxJQUFBVyxPQUNBLElBQUF1eEMsT0FHQTdSLEVBQUEsSUFBQTU1QixFQUFBZ0QsS0FBQSxLQUFBLElBQ0FxSCxLQUFBd3NCLE9BQUF3a0MsRUFBQXpoQyxHQUNBbWlDLEVBQUFuaUMsRUFDQSxNQUNBLEtBQUEyUixJQUFBd0IsZUFDQTFpQyxLQUFBd3NCLE9BQUF3a0MsRUFBQSxLQUNBVSxFQUFBLElBQ0EsTUFDQSxLQUFBeHdCLElBQUE2QixpQkFDQS9pQyxLQUFBd3NCLE9BQUF3a0MsRUFBQSxLQUNBVSxFQUFBLE9BS0FRLGtCQUFBLFNBQUF2K0QsRUFBQXVwQyxHQUNBLEdBQUFodUMsR0FBQXlFLEVBQUEsSUFBQXVwQyxFQUNBc3pCLEVBQUF4d0QsS0FBQXNxQyxVQUFBa21CLEdBSUEsT0FIQUEsR0FBQXBoRSxlQUFBRixLQUNBc2hFLEVBQUF0aEUsR0FBQThRLEtBQUFzd0QsUUFBQSxFQUFBMzhELEVBQUEsTUFBQXFNLEtBQUEwM0IsT0FBQXdGLEdBQUEsT0FBQXZwQyxFQUFBLE1BRUE2OEQsRUFBQXRoRSxJQUdBczlCLE9BQUEsU0FBQTFRLEVBQUFqc0IsR0FDQSxNQUFBaXNCLElBQ0E5YixLQUFBc3FDLFVBQUE5VCxLQUFBbmlDLEtBQUF5bkIsRUFBQSxJQUFBanNCLEVBQUEsS0FDQWlzQixHQUZBLFFBS0FsYyxPQUFBLFNBQUFpaEMsR0FJQSxNQUhBN2dDLE1BQUFrWixNQUFBaTZCLFFBQUEvakQsZUFBQXl4QyxLQUNBN2dDLEtBQUFrWixNQUFBaTZCLFFBQUF0UyxHQUFBN2dDLEtBQUFzd0QsUUFBQSxJQUVBdHdELEtBQUFrWixNQUFBaTZCLFFBQUF0UyxJQUdBSixVQUFBLFNBQUEza0IsRUFBQTQyQyxHQUNBLE1BQUEsYUFBQTUyQyxFQUFBLElBQUE5YixLQUFBMDNCLE9BQUFnN0IsR0FBQSxLQUdBVixLQUFBLFNBQUF0d0IsRUFBQUMsR0FDQSxNQUFBLFFBQUFELEVBQUEsSUFBQUMsRUFBQSxLQUdBa3ZCLFFBQUEsU0FBQS8wQyxHQUNBOWIsS0FBQXNxQyxVQUFBOVQsS0FBQW5pQyxLQUFBLFVBQUF5bkIsRUFBQSxNQUdBODFDLElBQUEsU0FBQTErRCxFQUFBNHVDLEVBQUFDLEdBQ0EsR0FBQTd1QyxLQUFBLEVBQ0E0dUMsUUFDQSxDQUNBLEdBQUF0TCxHQUFBeDJCLEtBQUFzcUMsVUFBQTlULElBQ0FBLEdBQUFuaUMsS0FBQSxNQUFBbkIsRUFBQSxNQUNBNHVDLElBQ0F0TCxFQUFBbmlDLEtBQUEsS0FDQTB0QyxJQUNBdkwsRUFBQW5pQyxLQUFBLFNBQ0EwdEMsSUFDQXZMLEVBQUFuaUMsS0FBQSxRQUtBNDlELElBQUEsU0FBQTFpQyxHQUNBLE1BQUEsS0FBQUEsRUFBQSxLQUdBOGlDLFFBQUEsU0FBQTlpQyxHQUNBLE1BQUFBLEdBQUEsVUFHQTRpQyxrQkFBQSxTQUFBendCLEVBQUFDLEdBQ0EsTUFBQUQsR0FBQSxJQUFBQyxHQUdBbXdCLGVBQUEsU0FBQXB3QixFQUFBQyxHQUNBLE1BQUFELEdBQUEsSUFBQUMsRUFBQSxLQUdBNndCLE9BQUEsU0FBQTl3QixFQUFBQyxFQUFBUSxHQUNBLE1BQUFBLEdBQUFuaUMsS0FBQTh4RCxlQUFBcHdCLEVBQUFDLEdBQ0EzaEMsS0FBQW15RCxrQkFBQXp3QixFQUFBQyxJQUdBeXdCLG9CQUFBLFNBQUF0akUsR0FDQWtSLEtBQUFzcUMsVUFBQTlULEtBQUFuaUMsS0FBQTJMLEtBQUFpZ0MsaUJBQUFueEMsR0FBQSxNQUdBd2pFLHdCQUFBLFNBQUF4akUsR0FDQWtSLEtBQUFzcUMsVUFBQTlULEtBQUFuaUMsS0FBQTJMLEtBQUE2L0IscUJBQUEvd0MsR0FBQSxNQUdBeWpFLHNCQUFBLFNBQUF6akUsR0FDQWtSLEtBQUFzcUMsVUFBQTlULEtBQUFuaUMsS0FBQTJMLEtBQUFtZ0MsbUJBQUFyeEMsR0FBQSxNQUdBMmpFLDJCQUFBLFNBQUEzakUsR0FDQWtSLEtBQUFzcUMsVUFBQTlULEtBQUFuaUMsS0FBQTJMLEtBQUF1Z0Msd0JBQUF6eEMsR0FBQSxNQUdBbXhDLGlCQUFBLFNBQUFueEMsR0FDQSxNQUFBLG9CQUFBQSxFQUFBLFVBR0Erd0MscUJBQUEsU0FBQS93QyxHQUNBLE1BQUEsd0JBQUFBLEVBQUEsVUFHQXF4QyxtQkFBQSxTQUFBcnhDLEdBQ0EsTUFBQSxzQkFBQUEsRUFBQSxVQUdBa3hDLGVBQUEsU0FBQWx4QyxHQUNBa1IsS0FBQXdzQixPQUFBMTlCLEVBQUEsa0JBQUFBLEVBQUEsV0FHQXl4Qyx3QkFBQSxTQUFBenhDLEdBQ0EsTUFBQSwyQkFBQUEsRUFBQSxVQUdBaWpFLFlBQUEsU0FBQWh4QixFQUFBaXdCLEVBQUFTLEVBQUFDLEVBQUE3L0QsRUFBQTgvRCxHQUNBLEdBQUE3N0QsR0FBQWtLLElBQ0EsT0FBQSxZQUNBbEssRUFBQTg2RCxRQUFBN3ZCLEVBQUFpd0IsRUFBQVMsRUFBQUMsRUFBQTcvRCxFQUFBOC9ELEtBSUFFLFdBQUEsU0FBQS8xQyxFQUFBanNCLEdBQ0EsR0FBQWlHLEdBQUFrSyxJQUNBLE9BQUEsWUFDQWxLLEVBQUEwMkIsT0FBQTFRLEVBQUFqc0IsS0FJQThpRSxrQkFBQSxpQkFFQUMsZUFBQSxTQUFBQyxHQUNBLE1BQUEsT0FBQSxPQUFBQSxFQUFBbE8sV0FBQSxHQUFBeHlELFNBQUEsS0FBQWxFLE1BQUEsS0FHQXlwQyxPQUFBLFNBQUE3bkMsR0FDQSxHQUFBbkIsRUFBQW1CLEdBQUEsTUFBQSxJQUFBQSxFQUFBL0IsUUFBQWtTLEtBQUEyeUQsa0JBQUEzeUQsS0FBQTR5RCxnQkFBQSxHQUNBLElBQUEvakUsRUFBQWdCLEdBQUEsTUFBQUEsR0FBQXNDLFVBQ0EsSUFBQXRDLEtBQUEsRUFBQSxNQUFBLE1BQ0EsSUFBQUEsS0FBQSxFQUFBLE1BQUEsT0FDQSxJQUFBLE9BQUFBLEVBQUEsTUFBQSxNQUNBLElBQUEsbUJBQUFBLEdBQUEsTUFBQSxXQUVBLE1BQUFrd0MsSUFBQSxNQUFBLGVBR0F1d0IsT0FBQSxTQUFBd0MsRUFBQUMsR0FDQSxHQUFBajNDLEdBQUEsSUFBQTliLEtBQUFrWixNQUFBbzNDLFFBSUEsT0FIQXdDLElBQ0E5eUQsS0FBQXNxQyxVQUFBaW1CLEtBQUFsOEQsS0FBQXluQixHQUFBaTNDLEVBQUEsSUFBQUEsRUFBQSxLQUVBajNDLEdBR0F3dUIsUUFBQSxXQUNBLE1BQUF0cUMsTUFBQWtaLE1BQUFsWixLQUFBa1osTUFBQXkzQyxhQVVBdHRCLEdBQUFydEIsV0FDQXhiLFFBQUEsU0FBQSswQixFQUFBaVcsR0FDQSxHQUFBMXZDLEdBQUFrSyxLQUNBK2dDLEVBQUEvZ0MsS0FBQW9qQyxXQUFBckMsSUFBQXhSLEVBQ0F2dkIsTUFBQXV2QixXQUFBQSxFQUNBdnZCLEtBQUF3bEMsZ0JBQUFBLEVBQ0ExRSxHQUFBQyxFQUFBanJDLEVBQUEwUixRQUNBLElBQUFpcEQsR0FDQWprQyxHQUNBaWtDLEVBQUEzdEIsR0FBQS9CLE1BQ0F2VSxFQUFBeHNCLEtBQUE0d0QsUUFBQUgsR0FFQSxJQUNBdHNCLEdBREE3QyxFQUFBcUIsR0FBQTVCLEVBQUF2SyxLQUVBOEssS0FDQTZDLEtBQ0FwMUMsRUFBQXV5QyxFQUFBLFNBQUFrTCxFQUFBdDlDLEdBQ0EsR0FBQThSLEdBQUFsTCxFQUFBODZELFFBQUFwa0IsRUFDQUEsR0FBQXhyQyxNQUFBQSxFQUNBbWpDLEVBQUE5dkMsS0FBQTJNLEdBQ0F3ckMsRUFBQXlrQixRQUFBL2hFLElBR0EsSUFBQXM3QixLQUNBejdCLEdBQUFneUMsRUFBQXZLLEtBQUEsU0FBQWpILEdBQ0EvRSxFQUFBbjJCLEtBQUF5QixFQUFBODZELFFBQUFyaEMsRUFBQUEsY0FFQSxJQUFBeDVCLEdBQUEsSUFBQWdyQyxFQUFBdkssS0FBQXJvQyxPQUFBLGFBQ0EsSUFBQTR5QyxFQUFBdkssS0FBQXJvQyxPQUFBcThCLEVBQUEsR0FDQSxTQUFBandCLEVBQUFxYixHQUNBLEdBQUFzVyxFQUlBLE9BSEFuOUIsR0FBQXk3QixFQUFBLFNBQUE2TixHQUNBbk0sRUFBQW1NLEVBQUE5OUIsRUFBQXFiLEtBRUFzVyxFQVlBLE9BVkFNLEtBQ0F6MkIsRUFBQXkyQixPQUFBLFNBQUFqeUIsRUFBQTFLLEVBQUErbEIsR0FDQSxNQUFBNFcsR0FBQWp5QixFQUFBcWIsRUFBQS9sQixLQUdBczBDLElBQ0FwdUMsRUFBQW91QyxPQUFBQSxHQUVBcHVDLEVBQUF3MkIsUUFBQTBXLEdBQUFsQyxHQUNBaHJDLEVBQUEwSixTQUFBeWpDLEdBQUFuQyxHQUNBaHJDLEdBR0E2NkQsUUFBQSxTQUFBN3ZCLEVBQUE5eEMsRUFBQTRDLEdBQ0EsR0FBQTZ2QyxHQUFBQyxFQUFBaHNDLEVBQUFHLEVBQUFrSyxJQUNBLElBQUErZ0MsRUFBQS8vQixNQUNBLE1BQUFoQixNQUFBbWtDLE9BQUFwRCxFQUFBLy9CLE1BQUErL0IsRUFBQWt3QixRQUVBLFFBQUFsd0IsRUFBQWh6QixNQUNBLElBQUFtekIsSUFBQUcsUUFDQSxNQUFBcmhDLE1BQUFuUSxNQUFBa3hDLEVBQUFseEMsTUFBQVosRUFDQSxLQUFBaXlDLElBQUFLLGdCQUVBLE1BREFJLEdBQUEzaEMsS0FBQTR3RCxRQUFBN3ZCLEVBQUFTLFVBQ0F4aEMsS0FBQSxRQUFBK2dDLEVBQUFpQyxVQUFBckIsRUFBQTF5QyxFQUNBLEtBQUFpeUMsSUFBQU8saUJBR0EsTUFGQUMsR0FBQTFoQyxLQUFBNHdELFFBQUE3dkIsRUFBQVcsTUFDQUMsRUFBQTNoQyxLQUFBNHdELFFBQUE3dkIsRUFBQVksT0FDQTNoQyxLQUFBLFNBQUErZ0MsRUFBQWlDLFVBQUF0QixFQUFBQyxFQUFBMXlDLEVBQ0EsS0FBQWl5QyxJQUFBVSxrQkFHQSxNQUZBRixHQUFBMWhDLEtBQUE0d0QsUUFBQTd2QixFQUFBVyxNQUNBQyxFQUFBM2hDLEtBQUE0d0QsUUFBQTd2QixFQUFBWSxPQUNBM2hDLEtBQUEsU0FBQStnQyxFQUFBaUMsVUFBQXRCLEVBQUFDLEVBQUExeUMsRUFDQSxLQUFBaXlDLElBQUFXLHNCQUNBLE1BQUE3aEMsTUFBQSxhQUNBQSxLQUFBNHdELFFBQUE3dkIsRUFBQTd0QyxNQUNBOE0sS0FBQTR3RCxRQUFBN3ZCLEVBQUFlLFdBQ0E5aEMsS0FBQTR3RCxRQUFBN3ZCLEVBQUFnQixZQUNBOXlDLEVBRUEsS0FBQWl5QyxJQUFBYyxXQUVBLE1BREFuQyxJQUFBa0IsRUFBQXhuQyxLQUFBekQsRUFBQXk1QixZQUNBejVCLEVBQUF3d0IsV0FBQXlhLEVBQUF4bkMsS0FDQXpELEVBQUEwdkMsaUJBQUFsQyxHQUFBdkMsRUFBQXhuQyxNQUNBdEssRUFBQTRDLEVBQUFpRSxFQUFBeTVCLFdBQ0EsS0FBQTJSLElBQUFlLGlCQU9BLE1BTkFQLEdBQUExaEMsS0FBQTR3RCxRQUFBN3ZCLEVBQUFtQixRQUFBLElBQUFyd0MsR0FDQWt2QyxFQUFBb0IsV0FDQXRDLEdBQUFrQixFQUFBN0QsU0FBQTNqQyxLQUFBekQsRUFBQXk1QixZQUNBb1MsRUFBQVosRUFBQTdELFNBQUEzakMsTUFFQXduQyxFQUFBb0IsV0FBQVIsRUFBQTNoQyxLQUFBNHdELFFBQUE3dkIsRUFBQTdELFdBQ0E2RCxFQUFBb0IsU0FDQW5pQyxLQUFBOHhELGVBQUFwd0IsRUFBQUMsRUFBQTF5QyxFQUFBNEMsRUFBQWlFLEVBQUF5NUIsWUFDQXZ2QixLQUFBbXlELGtCQUFBendCLEVBQUFDLEVBQUE3ckMsRUFBQTB2QyxnQkFBQXYyQyxFQUFBNEMsRUFBQWlFLEVBQUF5NUIsV0FDQSxLQUFBMlIsSUFBQWtCLGVBT0EsTUFOQXpzQyxNQUNBNUcsRUFBQWd5QyxFQUFBcnpDLFVBQUEsU0FBQTB6QyxHQUNBenJDLEVBQUF0QixLQUFBeUIsRUFBQTg2RCxRQUFBeHZCLE1BRUFMLEVBQUFuaEMsU0FBQStoQyxFQUFBM2hDLEtBQUF3SCxRQUFBdTVCLEVBQUFzQixPQUFBOW9DLE9BQ0F3bkMsRUFBQW5oQyxTQUFBK2hDLEVBQUEzaEMsS0FBQTR3RCxRQUFBN3ZCLEVBQUFzQixRQUFBLElBQ0F0QixFQUFBbmhDLE9BQ0EsU0FBQXJGLEVBQUFxYixFQUFBNFcsRUFBQTJYLEdBRUEsSUFBQSxHQURBeFYsTUFDQXBoQyxFQUFBLEVBQUFBLEVBQUFvSSxFQUFBeEgsU0FBQVosRUFDQW9oQyxFQUFBdDZCLEtBQUFzQixFQUFBcEksR0FBQWdOLEVBQUFxYixFQUFBNFcsRUFBQTJYLEdBRUEsSUFBQXQwQyxHQUFBOHhDLEVBQUExckMsTUFBQWhKLEVBQUEwaEMsRUFBQXdWLEVBQ0EsT0FBQWwxQyxJQUFBQSxRQUFBaEMsRUFBQXNNLEtBQUF0TSxFQUFBNEMsTUFBQUEsR0FBQUEsR0FFQSxTQUFBMEssRUFBQXFiLEVBQUE0VyxFQUFBMlgsR0FDQSxHQUNBdDBDLEdBREFtakUsRUFBQXJ4QixFQUFBcG5DLEVBQUFxYixFQUFBNFcsRUFBQTJYLEVBRUEsSUFBQSxNQUFBNnVCLEVBQUFuakUsTUFBQSxDQUNBb3dDLEdBQUEreUIsRUFBQS9qRSxRQUFBNkcsRUFBQXk1QixZQUNBNFEsR0FBQTZ5QixFQUFBbmpFLE1BQUFpRyxFQUFBeTVCLFdBRUEsS0FBQSxHQURBWixNQUNBcGhDLEVBQUEsRUFBQUEsRUFBQW9JLEVBQUF4SCxTQUFBWixFQUNBb2hDLEVBQUF0NkIsS0FBQTRyQyxHQUFBdHFDLEVBQUFwSSxHQUFBZ04sRUFBQXFiLEVBQUE0VyxFQUFBMlgsR0FBQXJ1QyxFQUFBeTVCLFlBRUExL0IsR0FBQW93QyxHQUFBK3lCLEVBQUFuakUsTUFBQW9HLE1BQUErOEQsRUFBQS9qRSxRQUFBMC9CLEdBQUE3NEIsRUFBQXk1QixZQUVBLE1BQUF0Z0MsSUFBQVksTUFBQUEsR0FBQUEsRUFFQSxLQUFBcXhDLElBQUFvQixxQkFHQSxNQUZBWixHQUFBMWhDLEtBQUE0d0QsUUFBQTd2QixFQUFBVyxNQUFBLEVBQUEsR0FDQUMsRUFBQTNoQyxLQUFBNHdELFFBQUE3dkIsRUFBQVksT0FDQSxTQUFBcG5DLEVBQUFxYixFQUFBNFcsRUFBQTJYLEdBQ0EsR0FBQTh1QixHQUFBdnhCLEVBQUFubkMsRUFBQXFiLEVBQUE0VyxFQUFBMlgsR0FDQTZ1QixFQUFBcnhCLEVBQUFwbkMsRUFBQXFiLEVBQUE0VyxFQUFBMlgsRUFJQSxPQUhBbEUsSUFBQWd6QixFQUFBcGpFLE1BQUFpRyxFQUFBeTVCLFlBQ0FnUixHQUFBMHlCLEVBQUFoa0UsU0FDQWdrRSxFQUFBaGtFLFFBQUFna0UsRUFBQTE1RCxNQUFBeTVELEVBQ0EvakUsR0FBQVksTUFBQW1qRSxHQUFBQSxFQUVBLEtBQUE5eEIsSUFBQXFCLGdCQUtBLE1BSkE1c0MsTUFDQTVHLEVBQUFneUMsRUFBQXh4QixTQUFBLFNBQUE2eEIsR0FDQXpyQyxFQUFBdEIsS0FBQXlCLEVBQUE4NkQsUUFBQXh2QixNQUVBLFNBQUE3bUMsRUFBQXFiLEVBQUE0VyxFQUFBMlgsR0FFQSxJQUFBLEdBREF0MEMsTUFDQXRDLEVBQUEsRUFBQUEsRUFBQW9JLEVBQUF4SCxTQUFBWixFQUNBc0MsRUFBQXdFLEtBQUFzQixFQUFBcEksR0FBQWdOLEVBQUFxYixFQUFBNFcsRUFBQTJYLEdBRUEsT0FBQWwxQyxJQUFBWSxNQUFBQSxHQUFBQSxFQUVBLEtBQUFxeEMsSUFBQXNCLGlCQVNBLE1BUkE3c0MsTUFDQTVHLEVBQUFneUMsRUFBQTBCLFdBQUEsU0FBQXZGLEdBQ0F2bkMsRUFBQXRCLE1BQUFuRixJQUFBZ3VDLEVBQUFodUMsSUFBQTZlLE9BQUFtekIsR0FBQWMsV0FDQTlFLEVBQUFodUMsSUFBQXFLLEtBQ0EsR0FBQTJqQyxFQUFBaHVDLElBQUFXLE1BQ0FBLE1BQUFpRyxFQUFBODZELFFBQUExekIsRUFBQXJ0QyxXQUdBLFNBQUEwSyxFQUFBcWIsRUFBQTRXLEVBQUEyWCxHQUVBLElBQUEsR0FEQXQwQyxNQUNBdEMsRUFBQSxFQUFBQSxFQUFBb0ksRUFBQXhILFNBQUFaLEVBQ0FzQyxFQUFBOEYsRUFBQXBJLEdBQUEyQixLQUFBeUcsRUFBQXBJLEdBQUFzQyxNQUFBMEssRUFBQXFiLEVBQUE0VyxFQUFBMlgsRUFFQSxPQUFBbDFDLElBQUFZLE1BQUFBLEdBQUFBLEVBRUEsS0FBQXF4QyxJQUFBd0IsZUFDQSxNQUFBLFVBQUFub0MsR0FDQSxNQUFBdEwsSUFBQVksTUFBQTBLLEdBQUFBLEVBRUEsS0FBQTJtQyxJQUFBNkIsaUJBQ0EsTUFBQSxVQUFBeG9DLEVBQUFxYixFQUFBNFcsRUFBQTJYLEdBQ0EsTUFBQWwxQyxJQUFBWSxNQUFBMjhCLEdBQUFBLEtBS0EwbUMsU0FBQSxTQUFBMXhCLEVBQUF2eUMsR0FDQSxNQUFBLFVBQUFzTCxFQUFBcWIsRUFBQTRXLEVBQUEyWCxHQUNBLEdBQUFqbkMsR0FBQXNrQyxFQUFBam5DLEVBQUFxYixFQUFBNFcsRUFBQTJYLEVBTUEsT0FKQWpuQyxHQURBN0ssRUFBQTZLLElBQ0FBLEVBRUEsRUFFQWpPLEdBQUFZLE1BQUFxTixHQUFBQSxJQUdBaTJELFNBQUEsU0FBQTN4QixFQUFBdnlDLEdBQ0EsTUFBQSxVQUFBc0wsRUFBQXFiLEVBQUE0VyxFQUFBMlgsR0FDQSxHQUFBam5DLEdBQUFza0MsRUFBQWpuQyxFQUFBcWIsRUFBQTRXLEVBQUEyWCxFQU1BLE9BSkFqbkMsR0FEQTdLLEVBQUE2SyxJQUNBQSxFQUVBLEVBRUFqTyxHQUFBWSxNQUFBcU4sR0FBQUEsSUFHQWsyRCxTQUFBLFNBQUE1eEIsRUFBQXZ5QyxHQUNBLE1BQUEsVUFBQXNMLEVBQUFxYixFQUFBNFcsRUFBQTJYLEdBQ0EsR0FBQWpuQyxJQUFBc2tDLEVBQUFqbkMsRUFBQXFiLEVBQUE0VyxFQUFBMlgsRUFDQSxPQUFBbDFDLElBQUFZLE1BQUFxTixHQUFBQSxJQUdBbTJELFVBQUEsU0FBQTN4QixFQUFBQyxFQUFBMXlDLEdBQ0EsTUFBQSxVQUFBc0wsRUFBQXFiLEVBQUE0VyxFQUFBMlgsR0FDQSxHQUFBOHVCLEdBQUF2eEIsRUFBQW5uQyxFQUFBcWIsRUFBQTRXLEVBQUEyWCxHQUNBNnVCLEVBQUFyeEIsRUFBQXBuQyxFQUFBcWIsRUFBQTRXLEVBQUEyWCxHQUNBam5DLEVBQUF3akMsR0FBQXV5QixFQUFBRCxFQUNBLE9BQUEvakUsSUFBQVksTUFBQXFOLEdBQUFBLElBR0FvMkQsVUFBQSxTQUFBNXhCLEVBQUFDLEVBQUExeUMsR0FDQSxNQUFBLFVBQUFzTCxFQUFBcWIsRUFBQTRXLEVBQUEyWCxHQUNBLEdBQUE4dUIsR0FBQXZ4QixFQUFBbm5DLEVBQUFxYixFQUFBNFcsRUFBQTJYLEdBQ0E2dUIsRUFBQXJ4QixFQUFBcG5DLEVBQUFxYixFQUFBNFcsRUFBQTJYLEdBQ0FqbkMsR0FBQTdLLEVBQUE0Z0UsR0FBQUEsRUFBQSxJQUFBNWdFLEVBQUEyZ0UsR0FBQUEsRUFBQSxFQUNBLE9BQUEvakUsSUFBQVksTUFBQXFOLEdBQUFBLElBR0FxMkQsVUFBQSxTQUFBN3hCLEVBQUFDLEVBQUExeUMsR0FDQSxNQUFBLFVBQUFzTCxFQUFBcWIsRUFBQTRXLEVBQUEyWCxHQUNBLEdBQUFqbkMsR0FBQXdrQyxFQUFBbm5DLEVBQUFxYixFQUFBNFcsRUFBQTJYLEdBQUF4QyxFQUFBcG5DLEVBQUFxYixFQUFBNFcsRUFBQTJYLEVBQ0EsT0FBQWwxQyxJQUFBWSxNQUFBcU4sR0FBQUEsSUFHQXMyRCxVQUFBLFNBQUE5eEIsRUFBQUMsRUFBQTF5QyxHQUNBLE1BQUEsVUFBQXNMLEVBQUFxYixFQUFBNFcsRUFBQTJYLEdBQ0EsR0FBQWpuQyxHQUFBd2tDLEVBQUFubkMsRUFBQXFiLEVBQUE0VyxFQUFBMlgsR0FBQXhDLEVBQUFwbkMsRUFBQXFiLEVBQUE0VyxFQUFBMlgsRUFDQSxPQUFBbDFDLElBQUFZLE1BQUFxTixHQUFBQSxJQUdBdTJELFVBQUEsU0FBQS94QixFQUFBQyxFQUFBMXlDLEdBQ0EsTUFBQSxVQUFBc0wsRUFBQXFiLEVBQUE0VyxFQUFBMlgsR0FDQSxHQUFBam5DLEdBQUF3a0MsRUFBQW5uQyxFQUFBcWIsRUFBQTRXLEVBQUEyWCxHQUFBeEMsRUFBQXBuQyxFQUFBcWIsRUFBQTRXLEVBQUEyWCxFQUNBLE9BQUFsMUMsSUFBQVksTUFBQXFOLEdBQUFBLElBR0F3MkQsWUFBQSxTQUFBaHlCLEVBQUFDLEVBQUExeUMsR0FDQSxNQUFBLFVBQUFzTCxFQUFBcWIsRUFBQTRXLEVBQUEyWCxHQUNBLEdBQUFqbkMsR0FBQXdrQyxFQUFBbm5DLEVBQUFxYixFQUFBNFcsRUFBQTJYLEtBQUF4QyxFQUFBcG5DLEVBQUFxYixFQUFBNFcsRUFBQTJYLEVBQ0EsT0FBQWwxQyxJQUFBWSxNQUFBcU4sR0FBQUEsSUFHQXkyRCxZQUFBLFNBQUFqeUIsRUFBQUMsRUFBQTF5QyxHQUNBLE1BQUEsVUFBQXNMLEVBQUFxYixFQUFBNFcsRUFBQTJYLEdBQ0EsR0FBQWpuQyxHQUFBd2tDLEVBQUFubkMsRUFBQXFiLEVBQUE0VyxFQUFBMlgsS0FBQXhDLEVBQUFwbkMsRUFBQXFiLEVBQUE0VyxFQUFBMlgsRUFDQSxPQUFBbDFDLElBQUFZLE1BQUFxTixHQUFBQSxJQUdBMDJELFdBQUEsU0FBQWx5QixFQUFBQyxFQUFBMXlDLEdBQ0EsTUFBQSxVQUFBc0wsRUFBQXFiLEVBQUE0VyxFQUFBMlgsR0FDQSxHQUFBam5DLEdBQUF3a0MsRUFBQW5uQyxFQUFBcWIsRUFBQTRXLEVBQUEyWCxJQUFBeEMsRUFBQXBuQyxFQUFBcWIsRUFBQTRXLEVBQUEyWCxFQUNBLE9BQUFsMUMsSUFBQVksTUFBQXFOLEdBQUFBLElBR0EyMkQsV0FBQSxTQUFBbnlCLEVBQUFDLEVBQUExeUMsR0FDQSxNQUFBLFVBQUFzTCxFQUFBcWIsRUFBQTRXLEVBQUEyWCxHQUNBLEdBQUFqbkMsR0FBQXdrQyxFQUFBbm5DLEVBQUFxYixFQUFBNFcsRUFBQTJYLElBQUF4QyxFQUFBcG5DLEVBQUFxYixFQUFBNFcsRUFBQTJYLEVBQ0EsT0FBQWwxQyxJQUFBWSxNQUFBcU4sR0FBQUEsSUFHQTQyRCxVQUFBLFNBQUFweUIsRUFBQUMsRUFBQTF5QyxHQUNBLE1BQUEsVUFBQXNMLEVBQUFxYixFQUFBNFcsRUFBQTJYLEdBQ0EsR0FBQWpuQyxHQUFBd2tDLEVBQUFubkMsRUFBQXFiLEVBQUE0VyxFQUFBMlgsR0FBQXhDLEVBQUFwbkMsRUFBQXFiLEVBQUE0VyxFQUFBMlgsRUFDQSxPQUFBbDFDLElBQUFZLE1BQUFxTixHQUFBQSxJQUdBNjJELFVBQUEsU0FBQXJ5QixFQUFBQyxFQUFBMXlDLEdBQ0EsTUFBQSxVQUFBc0wsRUFBQXFiLEVBQUE0VyxFQUFBMlgsR0FDQSxHQUFBam5DLEdBQUF3a0MsRUFBQW5uQyxFQUFBcWIsRUFBQTRXLEVBQUEyWCxHQUFBeEMsRUFBQXBuQyxFQUFBcWIsRUFBQTRXLEVBQUEyWCxFQUNBLE9BQUFsMUMsSUFBQVksTUFBQXFOLEdBQUFBLElBR0E4MkQsV0FBQSxTQUFBdHlCLEVBQUFDLEVBQUExeUMsR0FDQSxNQUFBLFVBQUFzTCxFQUFBcWIsRUFBQTRXLEVBQUEyWCxHQUNBLEdBQUFqbkMsR0FBQXdrQyxFQUFBbm5DLEVBQUFxYixFQUFBNFcsRUFBQTJYLElBQUF4QyxFQUFBcG5DLEVBQUFxYixFQUFBNFcsRUFBQTJYLEVBQ0EsT0FBQWwxQyxJQUFBWSxNQUFBcU4sR0FBQUEsSUFHQSsyRCxXQUFBLFNBQUF2eUIsRUFBQUMsRUFBQTF5QyxHQUNBLE1BQUEsVUFBQXNMLEVBQUFxYixFQUFBNFcsRUFBQTJYLEdBQ0EsR0FBQWpuQyxHQUFBd2tDLEVBQUFubkMsRUFBQXFiLEVBQUE0VyxFQUFBMlgsSUFBQXhDLEVBQUFwbkMsRUFBQXFiLEVBQUE0VyxFQUFBMlgsRUFDQSxPQUFBbDFDLElBQUFZLE1BQUFxTixHQUFBQSxJQUdBZzNELFdBQUEsU0FBQXh5QixFQUFBQyxFQUFBMXlDLEdBQ0EsTUFBQSxVQUFBc0wsRUFBQXFiLEVBQUE0VyxFQUFBMlgsR0FDQSxHQUFBam5DLEdBQUF3a0MsRUFBQW5uQyxFQUFBcWIsRUFBQTRXLEVBQUEyWCxJQUFBeEMsRUFBQXBuQyxFQUFBcWIsRUFBQTRXLEVBQUEyWCxFQUNBLE9BQUFsMUMsSUFBQVksTUFBQXFOLEdBQUFBLElBR0FpM0QsV0FBQSxTQUFBenlCLEVBQUFDLEVBQUExeUMsR0FDQSxNQUFBLFVBQUFzTCxFQUFBcWIsRUFBQTRXLEVBQUEyWCxHQUNBLEdBQUFqbkMsR0FBQXdrQyxFQUFBbm5DLEVBQUFxYixFQUFBNFcsRUFBQTJYLElBQUF4QyxFQUFBcG5DLEVBQUFxYixFQUFBNFcsRUFBQTJYLEVBQ0EsT0FBQWwxQyxJQUFBWSxNQUFBcU4sR0FBQUEsSUFHQWszRCxZQUFBLFNBQUFsaEUsRUFBQTR1QyxFQUFBQyxFQUFBOXlDLEdBQ0EsTUFBQSxVQUFBc0wsRUFBQXFiLEVBQUE0VyxFQUFBMlgsR0FDQSxHQUFBam5DLEdBQUFoSyxFQUFBcUgsRUFBQXFiLEVBQUE0VyxFQUFBMlgsR0FBQXJDLEVBQUF2bkMsRUFBQXFiLEVBQUE0VyxFQUFBMlgsR0FBQXBDLEVBQUF4bkMsRUFBQXFiLEVBQUE0VyxFQUFBMlgsRUFDQSxPQUFBbDFDLElBQUFZLE1BQUFxTixHQUFBQSxJQUdBck4sTUFBQSxTQUFBQSxFQUFBWixHQUNBLE1BQUEsWUFBQSxNQUFBQSxJQUFBQSxRQUFBaEMsRUFBQXNNLEtBQUF0TSxFQUFBNEMsTUFBQUEsR0FBQUEsSUFFQXkyQixXQUFBLFNBQUEvc0IsRUFBQWlzQyxFQUFBdjJDLEVBQUE0QyxFQUFBMDlCLEdBQ0EsTUFBQSxVQUFBaDFCLEVBQUFxYixFQUFBNFcsRUFBQTJYLEdBQ0EsR0FBQXhILEdBQUEvbUIsR0FBQXJjLElBQUFxYyxHQUFBQSxFQUFBcmIsQ0FDQTFJLElBQUEsSUFBQUEsR0FBQThxQyxJQUFBQSxFQUFBcGpDLEtBQ0FvakMsRUFBQXBqQyxNQUVBLElBQUExSixHQUFBOHNDLEVBQUFBLEVBQUFwakMsR0FBQXRNLENBSUEsT0FIQXU0QyxJQUNBdkYsR0FBQXB3QyxFQUFBMC9CLEdBRUF0Z0MsR0FDQUEsUUFBQTB0QyxFQUFBcGpDLEtBQUFBLEVBQUExSixNQUFBQSxHQUVBQSxJQUlBaWlFLGVBQUEsU0FBQXB3QixFQUFBQyxFQUFBMXlDLEVBQUE0QyxFQUFBMDlCLEdBQ0EsTUFBQSxVQUFBaDFCLEVBQUFxYixFQUFBNFcsRUFBQTJYLEdBQ0EsR0FDQTZ1QixHQUNBbmpFLEVBRkFvakUsRUFBQXZ4QixFQUFBbm5DLEVBQUFxYixFQUFBNFcsRUFBQTJYLEVBYUEsT0FWQSxPQUFBOHVCLElBQ0FELEVBQUFyeEIsRUFBQXBuQyxFQUFBcWIsRUFBQTRXLEVBQUEyWCxHQUNBNnVCLEVBQUFoekIsR0FBQWd6QixHQUNBbnpCLEdBQUFtekIsRUFBQXpqQyxHQUNBMTlCLEdBQUEsSUFBQUEsR0FBQW9oRSxJQUFBQSxFQUFBRCxLQUNBQyxFQUFBRCxPQUVBbmpFLEVBQUFvakUsRUFBQUQsR0FDQS95QixHQUFBcHdDLEVBQUEwL0IsSUFFQXRnQyxHQUNBQSxRQUFBZ2tFLEVBQUExNUQsS0FBQXk1RCxFQUFBbmpFLE1BQUFBLEdBRUFBLElBSUFzaUUsa0JBQUEsU0FBQXp3QixFQUFBQyxFQUFBNkQsRUFBQXYyQyxFQUFBNEMsRUFBQTA5QixHQUNBLE1BQUEsVUFBQWgxQixFQUFBcWIsRUFBQTRXLEVBQUEyWCxHQUNBLEdBQUE4dUIsR0FBQXZ4QixFQUFBbm5DLEVBQUFxYixFQUFBNFcsRUFBQTJYLEVBQ0F0eUMsSUFBQSxJQUFBQSxHQUFBb2hFLElBQUFBLEVBQUF0eEIsS0FDQXN4QixFQUFBdHhCLE1BRUEsSUFBQTl4QyxHQUFBLE1BQUFvakUsRUFBQUEsRUFBQXR4QixHQUFBMTBDLENBSUEsUUFIQXU0QyxHQUFBbEMsR0FBQTNCLEtBQ0ExQixHQUFBcHdDLEVBQUEwL0IsR0FFQXRnQyxHQUNBQSxRQUFBZ2tFLEVBQUExNUQsS0FBQW9vQyxFQUFBOXhDLE1BQUFBLEdBRUFBLElBSUFzMEMsT0FBQSxTQUFBbmpDLEVBQUFpd0Q7QUFDQSxNQUFBLFVBQUExMkQsRUFBQTFLLEVBQUErbEIsRUFBQXV1QixHQUNBLE1BQUFBLEdBQUFBLEVBQUE4c0IsR0FDQWp3RCxFQUFBekcsRUFBQTFLLEVBQUErbEIsS0FRQSxJQUFBb3dCLElBQUEsU0FBQUgsRUFBQXIrQixFQUFBMFEsR0FDQWxZLEtBQUE2bEMsTUFBQUEsRUFDQTdsQyxLQUFBd0gsUUFBQUEsRUFDQXhILEtBQUFrWSxRQUFBQSxFQUNBbFksS0FBQStnQyxJQUFBLEdBQUFHLElBQUFsaEMsS0FBQTZsQyxPQUNBN2xDLEtBQUFxMEQsWUFBQW44QyxFQUFBelgsSUFBQSxHQUFBNGlDLElBQUFyakMsS0FBQStnQyxJQUFBdjVCLEdBQ0EsR0FBQTI3QixJQUFBbmpDLEtBQUErZ0MsSUFBQXY1QixHQUdBdytCLElBQUFod0IsV0FDQXJoQixZQUFBcXhDLEdBRUF0dkMsTUFBQSxTQUFBdXpCLEdBQ0EsTUFBQWpxQixNQUFBcTBELFlBQUE3NUQsUUFBQXl2QixFQUFBanFCLEtBQUFrWSxRQUFBc3RCLGtCQUlBLElBT0FoQyxLQVBBbHVDLEtBQ0FBLEtBTUExRyxPQUFBb25CLFVBQUFsbEIsU0F1eUVBdTlDLEdBQUFuaEQsRUFBQSxRQUVBd2hELElBQ0E5akIsS0FBQSxPQUNBK2tCLElBQUEsTUFDQUMsSUFBQSxNQUdBL2tCLGFBQUEsY0FDQWdsQixHQUFBLE1Bc21DQTd5QixHQUFBOXZCLEVBQUEsWUFtU0F1bEQsR0FBQXpsRCxFQUFBcWYsY0FBQSxLQUNBc21DLEdBQUF2YixHQUFBcnFDLEVBQUFtTyxTQUFBOGUsS0FzTEE0NEIsSUFBQXovQixTQUFBLGFBeUdBMUwsR0FBQTBMLFNBQUEsWUFtWEFrZ0MsR0FBQWxnQyxTQUFBLFdBMEVBd2dDLEdBQUF4Z0MsU0FBQSxVQWFBLElBQUFzaUMsSUFBQSxJQTZLQTJFLElBQ0FxRixLQUFBakksR0FBQSxXQUFBLEdBQ0E4YyxHQUFBOWMsR0FBQSxXQUFBLEVBQUEsR0FBQSxHQUNBK2MsRUFBQS9jLEdBQUEsV0FBQSxHQUNBZ2QsS0FBQS9jLEdBQUEsU0FDQWdkLElBQUFoZCxHQUFBLFNBQUEsR0FDQWlJLEdBQUFsSSxHQUFBLFFBQUEsRUFBQSxHQUNBa2QsRUFBQWxkLEdBQUEsUUFBQSxFQUFBLEdBQ0FtSSxHQUFBbkksR0FBQSxPQUFBLEdBQ0E1bEIsRUFBQTRsQixHQUFBLE9BQUEsR0FDQW9JLEdBQUFwSSxHQUFBLFFBQUEsR0FDQW1kLEVBQUFuZCxHQUFBLFFBQUEsR0FDQW9kLEdBQUFwZCxHQUFBLFFBQUEsRUFBQSxLQUNBdm5ELEVBQUF1bkQsR0FBQSxRQUFBLEVBQUEsS0FDQXFJLEdBQUFySSxHQUFBLFVBQUEsR0FDQW9DLEVBQUFwQyxHQUFBLFVBQUEsR0FDQXNJLEdBQUF0SSxHQUFBLFVBQUEsR0FDQXFDLEVBQUFyQyxHQUFBLFVBQUEsR0FHQXVJLElBQUF2SSxHQUFBLGVBQUEsR0FDQXFkLEtBQUFwZCxHQUFBLE9BQ0FxZCxJQUFBcmQsR0FBQSxPQUFBLEdBQ0EzMkMsRUFBQTQzQyxHQUNBcWMsRUFBQXBkLEdBQ0FxZCxHQUFBemMsR0FBQSxHQUNBMGMsRUFBQTFjLEdBQUEsR0FDQTJjLEVBQUFyYyxHQUNBc2MsR0FBQXRjLEdBQ0F1YyxJQUFBdmMsR0FDQXdjLEtBQUF0YyxJQUdBbUIsR0FBQSx1RkFDQUQsR0FBQSxVQStGQTNHLElBQUFuZ0MsU0FBQSxVQThIQSxJQUFBdWdDLElBQUF6aEQsRUFBQTJCLElBV0FpZ0QsR0FBQTVoRCxFQUFBb08sR0E0U0F1ekMsSUFBQXpnQyxTQUFBLFNBOElBLElBQUFwUyxJQUFBOU8sR0FDQXFzQixTQUFBLElBQ0E5akIsUUFBQSxTQUFBN0csRUFBQU4sR0FDQSxNQUFBQSxHQUFBMm1CLE1BQUEzbUIsRUFBQWlpRSxVQUFBLE9BQ0EsU0FBQS82RCxFQUFBNUcsR0FFQSxHQUFBLE1BQUFBLEVBQUEsR0FBQTFDLFNBQUEySyxjQUFBLENBR0EsR0FBQW9lLEdBQUEsK0JBQUE3bkIsR0FBQTlDLEtBQUFzRSxFQUFBUCxLQUFBLFNBQ0EsYUFBQSxNQUNBTyxHQUFBd0ksR0FBQSxRQUFBLFNBQUE2VSxHQUVBcmQsRUFBQU4sS0FBQTJtQixJQUNBaEosRUFBQXd0Qix3QkFzV0F0NEIsS0FHQW5YLEdBQUEyaEIsR0FBQSxTQUFBNmtELEVBQUFuNEMsR0FJQSxRQUFBbzRDLEdBQUFqN0QsRUFBQTVHLEVBQUFOLEdBQ0FrSCxFQUFBOUgsT0FBQVksRUFBQW9pRSxHQUFBLFNBQUE1bEUsR0FDQXdELEVBQUF3MUIsS0FBQXpMLElBQUF2dEIsS0FKQSxHQUFBLFlBQUEwbEUsRUFBQSxDQVFBLEdBQUFFLEdBQUFqekMsR0FBQSxNQUFBcEYsR0FDQTRHLEVBQUF3eEMsQ0FFQSxhQUFBRCxJQUNBdnhDLEVBQUEsU0FBQXpwQixFQUFBNUcsRUFBQU4sR0FFQUEsRUFBQXNSLFVBQUF0UixFQUFBb2lFLElBQ0FELEVBQUFqN0QsRUFBQTVHLEVBQUFOLEtBS0E2UyxHQUFBdXZELEdBQUEsV0FDQSxPQUNBbjNDLFNBQUEsSUFDQUYsU0FBQSxJQUNBN0MsS0FBQXlJLE9BTUFqMUIsRUFBQThoQixHQUFBLFNBQUE2a0QsRUFBQTM4RCxHQUNBbU4sR0FBQW5OLEdBQUEsV0FDQSxPQUNBcWxCLFNBQUEsSUFDQTdDLEtBQUEsU0FBQWhoQixFQUFBNUcsRUFBQU4sR0FHQSxHQUFBLGNBQUEwRixHQUFBLEtBQUExRixFQUFBOFIsVUFBQXBRLE9BQUEsR0FBQSxDQUNBLEdBQUFoSCxHQUFBc0YsRUFBQThSLFVBQUFwWCxNQUFBdzJELEdBQ0EsSUFBQXgyRCxFQUVBLFdBREFzRixHQUFBdzFCLEtBQUEsWUFBQSxHQUFBNzNCLFFBQUFqRCxFQUFBLEdBQUFBLEVBQUEsS0FLQXdNLEVBQUE5SCxPQUFBWSxFQUFBMEYsR0FBQSxTQUFBbEosR0FDQXdELEVBQUF3MUIsS0FBQTl2QixFQUFBbEosVUFRQWQsR0FBQSxNQUFBLFNBQUEsUUFBQSxTQUFBcXVCLEdBQ0EsR0FBQXE0QyxHQUFBanpDLEdBQUEsTUFBQXBGLEVBQ0FsWCxJQUFBdXZELEdBQUEsV0FDQSxPQUNBcjNDLFNBQUEsR0FDQTdDLEtBQUEsU0FBQWhoQixFQUFBNUcsRUFBQU4sR0FDQSxHQUFBa2lFLEdBQUFuNEMsRUFDQTdqQixFQUFBNmpCLENBRUEsVUFBQUEsR0FDQSwrQkFBQWpyQixHQUFBOUMsS0FBQXNFLEVBQUFQLEtBQUEsV0FDQW1HLEVBQUEsWUFDQWxHLEVBQUFpdkIsTUFBQS9vQixHQUFBLGFBQ0FnOEQsRUFBQSxNQUdBbGlFLEVBQUFpNUIsU0FBQW1wQyxFQUFBLFNBQUE1bEUsR0FDQSxNQUFBQSxJQU9Bd0QsRUFBQXcxQixLQUFBdHZCLEVBQUExSixRQU1BMHpCLElBQUFneUMsR0FBQTVoRSxFQUFBUCxLQUFBbWlFLEVBQUFsaUUsRUFBQWtHLFdBWkEsU0FBQTZqQixHQUNBL3BCLEVBQUF3MUIsS0FBQXR2QixFQUFBLGFBb0JBLElBQUE4aUQsS0FDQUcsWUFBQTFxRCxFQUNBMnFELGdCQUFBbEIsR0FDQXFCLGVBQUE5cUQsRUFDQStxRCxhQUFBL3FELEVBQ0FvckQsVUFBQXByRCxFQUNBdXJELGFBQUF2ckQsRUFDQTJyRCxjQUFBM3JELEdBRUF5ckQsR0FBQSxjQWlEQTdCLElBQUF2b0MsU0FBQSxXQUFBLFNBQUEsU0FBQSxXQUFBLGVBdVpBLElBQUF3aUQsSUFBQSxTQUFBQyxHQUNBLE9BQUEsV0FBQSxTQUFBLFNBQUExckQsRUFBQXBCLEdBdUVBLFFBQUErc0QsR0FBQXRtQyxHQUNBLE1BQUEsS0FBQUEsRUFFQXptQixFQUFBLFlBQUEwakIsT0FFQTFqQixFQUFBeW1CLEdBQUEvQyxRQUFBMTZCLEVBM0VBLEdBQUFzUCxJQUNBN0gsS0FBQSxPQUNBK2tCLFNBQUFzM0MsRUFBQSxNQUFBLElBQ0F2M0MsU0FBQSxPQUFBLFdBQ0EvaEIsV0FBQW8vQyxHQUNBbGhELFFBQUEsU0FBQXM3RCxFQUFBemlFLEdBRUF5aUUsRUFBQXhqRCxTQUFBNnFDLElBQUE3cUMsU0FBQTR4QyxHQUVBLElBQUE2UixHQUFBMWlFLEVBQUFrRyxLQUFBLE9BQUFxOEQsR0FBQXZpRSxFQUFBd1AsT0FBQSxVQUFBLENBRUEsUUFDQTJoQixJQUFBLFNBQUFqcUIsRUFBQXU3RCxFQUFBemlFLEVBQUEyaUUsR0FDQSxHQUFBMTVELEdBQUEwNUQsRUFBQSxFQUdBLE1BQUEsVUFBQTNpRSxJQUFBLENBT0EsR0FBQTRpRSxHQUFBLFNBQUFqbEQsR0FDQXpXLEVBQUFFLE9BQUEsV0FDQTZCLEVBQUFpZ0QsbUJBQ0FqZ0QsRUFBQW1oRCxrQkFHQXpzQyxFQUFBd3RCLGlCQUdBOUgsSUFBQW8vQixFQUFBLEdBQUEsU0FBQUcsR0FJQUgsRUFBQTM1RCxHQUFBLFdBQUEsV0FDQStOLEVBQUEsV0FDQW9FLEdBQUF3bkQsRUFBQSxHQUFBLFNBQUFHLElBQ0EsR0FBQSxLQUlBLEdBQUFDLEdBQUFGLEVBQUEsSUFBQTE1RCxFQUFBOC9DLFlBQ0E4WixHQUFBMVosWUFBQWxnRCxFQUVBLElBQUE2NUQsR0FBQUosRUFBQUYsRUFBQXY1RCxFQUFBbS9DLE9BQUEzcEQsQ0FFQWlrRSxLQUNBSSxFQUFBNTdELEVBQUErQixHQUNBakosRUFBQWk1QixTQUFBeXBDLEVBQUEsU0FBQTlxQyxHQUNBM3VCLEVBQUFtL0MsUUFBQXh3QixJQUNBa3JDLEVBQUE1N0QsRUFBQXROLEdBQ0FxUCxFQUFBOC9DLGFBQUFLLGdCQUFBbmdELEVBQUEydUIsSUFDQWtyQyxFQUFBTixFQUFBdjVELEVBQUFtL0MsUUFDQWxoRCxFQUFBK0IsT0FHQXc1RCxFQUFBMzVELEdBQUEsV0FBQSxXQUNBRyxFQUFBOC9DLGFBQUFRLGVBQUF0Z0QsR0FDQTY1RCxFQUFBNTdELEVBQUF0TixHQUNBb0UsRUFBQWlMLEVBQUErL0MsU0FPQSxPQUFBajdDLE1BWUFBLEdBQUF1MEQsS0FDQTd5RCxHQUFBNnlELElBQUEsR0FZQW5XLEdBQUEsMkVBRUFvQyxHQUFBLDBGQUNBRyxHQUFBLG9HQUNBUCxHQUFBLG9EQUNBNFUsR0FBQSw0QkFDQUMsR0FBQSxnRUFDQXpYLEdBQUEsb0JBQ0EwWCxHQUFBLG1CQUNBQyxHQUFBLDBDQUVBQyxJQWdHQXZzQyxLQUFBNHpCLEdBdUdBNW1ELEtBQUFncEQsR0FBQSxPQUFBbVcsR0FDQS9XLEdBQUErVyxJQUFBLE9BQUEsS0FBQSxPQUNBLGNBcUdBSyxpQkFBQXhXLEdBQUEsZ0JBQUFvVyxHQUNBaFgsR0FBQWdYLElBQUEsT0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsUUFDQSwyQkFzR0FLLEtBQUF6VyxHQUFBLE9BQUFzVyxHQUNBbFgsR0FBQWtYLElBQUEsS0FBQSxLQUFBLEtBQUEsUUFDQSxnQkF1R0ExWCxLQUFBb0IsR0FBQSxPQUFBckIsR0FBQUgsR0FBQSxZQXdHQWtZLE1BQUExVyxHQUFBLFFBQUFxVyxHQUNBalgsR0FBQWlYLElBQUEsT0FBQSxPQUNBLFdBNkdBNWdCLE9BQUE2TCxHQW1HQTdvQyxJQUFBK29DLEdBa0dBSyxNQUFBRCxHQWtFQStVLE1BQUE1VSxHQTBEQTZVLFNBQUF6VSxHQUVBMFUsT0FBQWhsRSxFQUNBd3NDLE9BQUF4c0MsRUFDQWlsRSxPQUFBamxFLEVBQ0FrbEUsTUFBQWxsRSxFQUNBbWxFLEtBQUFubEUsR0FnbEJBbVAsSUFBQSxXQUFBLFdBQUEsVUFBQSxTQUNBLFNBQUE2RixFQUFBNEMsRUFBQWxDLEVBQUFzQixHQUNBLE9BQ0F3VixTQUFBLElBQ0FELFNBQUEsWUFDQTlDLE1BQ0FpSixJQUFBLFNBQUFqcUIsRUFBQTVHLEVBQUFOLEVBQUEyaUUsR0FDQUEsRUFBQSxLQUNBUSxHQUFBNWlFLEdBQUFQLEVBQUEwYSxRQUFBeW9ELEdBQUF2c0MsTUFBQTF2QixFQUFBNUcsRUFBQU4sRUFBQTJpRSxFQUFBLEdBQUF0c0QsRUFDQTVDLEVBQUFVLEVBQUFzQixRQVNBb3VELEdBQUEscUJBMERBcHhELEdBQUEsV0FDQSxPQUNBd1ksU0FBQSxJQUNBRixTQUFBLElBQ0E1akIsUUFBQSxTQUFBMjJDLEVBQUFnbUIsR0FDQSxNQUFBRCxJQUFBaGtFLEtBQUFpa0UsRUFBQXR4RCxTQUNBLFNBQUF0TCxFQUFBK2MsRUFBQWprQixHQUNBQSxFQUFBdzFCLEtBQUEsUUFBQXR1QixFQUFBMHlDLE1BQUE1NUMsRUFBQXdTLFdBR0EsU0FBQXRMLEVBQUErYyxFQUFBamtCLEdBQ0FrSCxFQUFBOUgsT0FBQVksRUFBQXdTLFFBQUEsU0FBQWhXLEdBQ0F3RCxFQUFBdzFCLEtBQUEsUUFBQWg1QixTQTJEQWlTLElBQUEsV0FBQSxTQUFBczFELEdBQ0EsT0FDQTk0QyxTQUFBLEtBQ0E5akIsUUFBQSxTQUFBNjhELEdBRUEsTUFEQUQsR0FBQTlzQyxrQkFBQStzQyxHQUNBLFNBQUE5OEQsRUFBQTVHLEVBQUFOLEdBQ0ErakUsRUFBQTdzQyxpQkFBQTUyQixFQUFBTixFQUFBd08sUUFDQWxPLEVBQUFBLEVBQUEsR0FDQTRHLEVBQUE5SCxPQUFBWSxFQUFBd08sT0FBQSxTQUFBaFMsR0FDQThELEVBQUFvWixZQUFBM2EsRUFBQXZDLEdBQUEsR0FBQUEsU0EyREFxUyxJQUFBLGVBQUEsV0FBQSxTQUFBMEYsRUFBQXd2RCxHQUNBLE9BQ0E1OEQsUUFBQSxTQUFBNjhELEdBRUEsTUFEQUQsR0FBQTlzQyxrQkFBQStzQyxHQUNBLFNBQUE5OEQsRUFBQTVHLEVBQUFOLEdBQ0EsR0FBQTYyQixHQUFBdGlCLEVBQUFqVSxFQUFBTixLQUFBQSxFQUFBaXZCLE1BQUFyZ0IsZ0JBQ0FtMUQsR0FBQTdzQyxpQkFBQTUyQixFQUFBdTJCLEVBQUFNLGFBQ0E3MkIsRUFBQUEsRUFBQSxHQUNBTixFQUFBaTVCLFNBQUEsaUJBQUEsU0FBQXo4QixHQUNBOEQsRUFBQW9aLFlBQUEzYSxFQUFBdkMsR0FBQSxHQUFBQSxTQXVEQW1TLElBQUEsT0FBQSxTQUFBLFdBQUEsU0FBQXNILEVBQUFSLEVBQUFzdUQsR0FDQSxPQUNBOTRDLFNBQUEsSUFDQTlqQixRQUFBLFNBQUE4OEQsRUFBQXh1QyxHQUNBLEdBQUF5dUMsR0FBQXp1RCxFQUFBZ2dCLEVBQUEvbUIsWUFDQXkxRCxFQUFBMXVELEVBQUFnZ0IsRUFBQS9tQixXQUFBLFNBQUFsUyxHQUNBLE9BQUFBLEdBQUEsSUFBQXNDLFlBSUEsT0FGQWlsRSxHQUFBOXNDLGtCQUFBZ3RDLEdBRUEsU0FBQS84RCxFQUFBNUcsRUFBQU4sR0FDQStqRSxFQUFBN3NDLGlCQUFBNTJCLEVBQUFOLEVBQUEwTyxZQUVBeEgsRUFBQTlILE9BQUEra0UsRUFBQSxXQUdBN2pFLEVBQUFtRSxLQUFBd1IsRUFBQW11RCxlQUFBRixFQUFBaDlELEtBQUEsV0EwRUF5SyxHQUFBL1MsR0FDQXFzQixTQUFBLElBQ0FELFFBQUEsVUFDQTlDLEtBQUEsU0FBQWhoQixFQUFBNUcsRUFBQU4sRUFBQTBwRCxHQUNBQSxFQUFBMmEscUJBQUFyakUsS0FBQSxXQUNBa0csRUFBQTB5QyxNQUFBNTVDLEVBQUEwUixlQTZTQTNDLEdBQUFxZ0QsR0FBQSxJQUFBLEdBZ0RBamdELEdBQUFpZ0QsR0FBQSxNQUFBLEdBZ0RBbmdELEdBQUFtZ0QsR0FBQSxPQUFBLEdBc0RBLy9DLEdBQUE0NEMsSUFDQTlnRCxRQUFBLFNBQUE3RyxFQUFBTixHQUNBQSxFQUFBdzFCLEtBQUEsVUFBQTU3QixHQUNBMEcsRUFBQTRlLFlBQUEsZUFzT0EzUCxJQUFBLFdBQ0EsT0FDQTBiLFNBQUEsSUFDQS9qQixPQUFBLEVBQ0ErQixXQUFBLElBQ0E4aEIsU0FBQSxPQW1QQWpZLE1BS0F3eEQsSUFDQUMsTUFBQSxFQUNBQyxPQUFBLEVBRUE5b0UsR0FDQSw4SUFBQTBFLE1BQUEsS0FDQSxTQUFBNDVDLEdBQ0EsR0FBQTN3QixHQUFBOEYsR0FBQSxNQUFBNnFCLEVBQ0FsbkMsSUFBQXVXLElBQUEsU0FBQSxhQUFBLFNBQUE1VCxFQUFBRSxHQUNBLE9BQ0FzVixTQUFBLElBQ0E5akIsUUFBQSxTQUFBc2tCLEVBQUF6ckIsR0FLQSxHQUFBMEMsR0FBQStTLEVBQUF6VixFQUFBcXBCLEdBQUEsTUFBQSxFQUNBLE9BQUEsVUFBQW5pQixFQUFBNUcsR0FDQUEsRUFBQXdJLEdBQUFreEMsRUFBQSxTQUFBcjhCLEdBQ0EsR0FBQStJLEdBQUEsV0FDQWhrQixFQUFBd0UsR0FBQXF2QyxPQUFBNTRCLElBRUEybUQsSUFBQXRxQixJQUFBcmtDLEVBQUFpc0IsUUFDQTE2QixFQUFBL0gsV0FBQXVuQixHQUVBeGYsRUFBQUUsT0FBQXNmLFdBOGVBLElBQUE3VyxLQUFBLFdBQUEsU0FBQW9ELEdBQ0EsT0FDQW9pQixjQUFBLEVBQ0FySCxXQUFBLFVBQ0FqRCxTQUFBLElBQ0F5RCxVQUFBLEVBQ0F2RCxTQUFBLElBQ0FnSixPQUFBLEVBQ0EvTCxLQUFBLFNBQUE2SixFQUFBdEcsRUFBQXdELEVBQUF5NkIsRUFBQXozQixHQUNBLEdBQUF2bEIsR0FBQTZnQixFQUFBazNDLENBQ0ExeUMsR0FBQTN5QixPQUFBNnZCLEVBQUFyZixLQUFBLFNBQUFwVCxHQUVBQSxFQUNBK3dCLEdBQ0EwRSxFQUFBLFNBQUFsMEIsRUFBQWszQixHQUNBMUgsRUFBQTBILEVBQ0FsM0IsRUFBQUEsRUFBQWpELFVBQUFuQixFQUFBdTZCLGNBQUEsY0FBQWpGLEVBQUFyZixLQUFBLEtBSUFsRCxHQUNBM08sTUFBQUEsR0FFQWtWLEVBQUF5a0QsTUFBQTM1RCxFQUFBMHRCLEVBQUFudEIsU0FBQW10QixNQUlBZzVDLElBQ0FBLEVBQUExN0MsU0FDQTA3QyxFQUFBLE1BRUFsM0MsSUFDQUEsRUFBQTlqQixXQUNBOGpCLEVBQUEsTUFFQTdnQixJQUNBKzNELEVBQUFsNkQsR0FBQW1DLEVBQUEzTyxPQUNBa1YsRUFBQTJrRCxNQUFBNk0sR0FBQS9rRSxLQUFBLFdBQ0Era0UsRUFBQSxPQUVBLzNELEVBQUEsYUErTEFxRCxJQUFBLG1CQUFBLGdCQUFBLFdBQ0EsU0FBQTBHLEVBQUExRCxFQUFBRSxHQUNBLE9BQ0FnWSxTQUFBLE1BQ0FGLFNBQUEsSUFDQXlELFVBQUEsRUFDQVIsV0FBQSxVQUNBL2tCLFdBQUF6QixHQUFBL0ksS0FDQTBJLFFBQUEsU0FBQTdHLEVBQUFOLEdBQ0EsR0FBQTBrRSxHQUFBMWtFLEVBQUE4UCxXQUFBOVAsRUFBQTFDLElBQ0FxbkUsRUFBQTNrRSxFQUFBNmpDLFFBQUEsR0FDQStnQyxFQUFBNWtFLEVBQUE2a0UsVUFFQSxPQUFBLFVBQUEzOUQsRUFBQXVrQixFQUFBd0QsRUFBQXk2QixFQUFBejNCLEdBQ0EsR0FDQXVrQixHQUNBc3VCLEVBQ0FDLEVBSEFDLEVBQUEsRUFLQUMsRUFBQSxXQUNBSCxJQUNBQSxFQUFBLzdDLFNBQ0ErN0MsRUFBQSxNQUVBdHVCLElBQ0FBLEVBQUEvc0MsV0FDQStzQyxFQUFBLE1BRUF1dUIsSUFDQTl4RCxFQUFBMmtELE1BQUFtTixHQUFBcmxFLEtBQUEsV0FDQW9sRSxFQUFBLE9BRUFBLEVBQUFDLEVBQ0FBLEVBQUEsTUFJQTc5RCxHQUFBOUgsT0FBQXNsRSxFQUFBLFNBQUFwbkUsR0FDQSxHQUFBNG5FLEdBQUEsWUFDQWxtRSxFQUFBNGxFLElBQUFBLElBQUExOUQsRUFBQTB5QyxNQUFBZ3JCLElBQ0E3eEQsS0FHQW95RCxJQUFBSCxDQUVBMW5FLElBR0FtWixFQUFBblosR0FBQSxHQUFBb0MsS0FBQSxTQUFBMi9CLEdBQ0EsR0FBQThsQyxJQUFBSCxFQUFBLENBQ0EsR0FBQS92QyxHQUFBL3RCLEVBQUFzbEIsTUFDQWs5QixHQUFBbHZELFNBQUE2a0MsQ0FRQSxJQUFBdGhDLEdBQUFrMEIsRUFBQWdELEVBQUEsU0FBQWwzQixHQUNBa25FLElBQ0FoeUQsRUFBQXlrRCxNQUFBMzVELEVBQUEsS0FBQTB0QixHQUFBL3JCLEtBQUF3bEUsSUFHQTF1QixHQUFBdmhCLEVBQ0E4dkMsRUFBQWhuRSxFQUVBeTRDLEVBQUE0RCxNQUFBLHdCQUFBOThDLEdBQ0E0SixFQUFBMHlDLE1BQUErcUIsS0FDQSxXQUNBUSxJQUFBSCxJQUNBQyxJQUNBLzlELEVBQUFrekMsTUFBQSx1QkFBQTk4QyxNQUdBNEosRUFBQWt6QyxNQUFBLDJCQUFBOThDLEtBRUEybkUsSUFDQXZiLEVBQUFsdkQsU0FBQSxhQWFBb1ksSUFBQSxXQUNBLFNBQUFteEQsR0FDQSxPQUNBOTRDLFNBQUEsTUFDQUYsU0FBQSxLQUNBQyxRQUFBLFlBQ0E5QyxLQUFBLFNBQUFoaEIsRUFBQXVrQixFQUFBd0QsRUFBQXk2QixHQUNBLE1BQUEsTUFBQTdwRCxLQUFBNHJCLEVBQUEsR0FBQTNzQixhQUlBMnNCLEVBQUFwbkIsWUFDQTAvRCxHQUFBdHJELEdBQUFpeEMsRUFBQWx2RCxTQUFBYixHQUFBNmYsWUFBQXRTLEVBQ0EsU0FBQW5KLEdBQ0EwdEIsRUFBQWpuQixPQUFBekcsS0FDQTR1QixvQkFBQWxCLE1BSUFBLEVBQUFobkIsS0FBQWlsRCxFQUFBbHZELGNBQ0F1cEUsR0FBQXQ0QyxFQUFBMkksWUFBQWx0QixRQStEQStJLEdBQUFnNEMsSUFDQWw5QixTQUFBLElBQ0E1akIsUUFBQSxXQUNBLE9BQ0FncUIsSUFBQSxTQUFBanFCLEVBQUE1RyxFQUFBNHRCLEdBQ0FobkIsRUFBQTB5QyxNQUFBMXJCLEVBQUFsZSxhQTBGQXlCLEdBQUEsV0FDQSxPQUNBd1osU0FBQSxJQUNBRixTQUFBLElBQ0FDLFFBQUEsVUFDQTlDLEtBQUEsU0FBQWhoQixFQUFBNUcsRUFBQU4sRUFBQTBwRCxHQUdBLEdBQUFsNEMsR0FBQWxSLEVBQUFOLEtBQUFBLEVBQUFpdkIsTUFBQXpkLFNBQUEsS0FDQTR6RCxFQUFBLFVBQUFwbEUsRUFBQTRxRCxPQUNBemlELEVBQUFpOUQsRUFBQXJyRCxHQUFBdkksR0FBQUEsRUFFQW5PLEVBQUEsU0FBQWlyRCxHQUVBLElBQUF2dkQsRUFBQXV2RCxHQUFBLENBRUEsR0FBQXJyQyxLQVFBLE9BTkFxckMsSUFDQTV5RCxFQUFBNHlELEVBQUFsdUQsTUFBQStILEdBQUEsU0FBQTNMLEdBQ0FBLEdBQUF5bUIsRUFBQWppQixLQUFBb2tFLEVBQUFyckQsR0FBQXZkLEdBQUFBLEtBSUF5bUIsR0FHQXltQyxHQUFBMEQsU0FBQXBzRCxLQUFBcUMsR0FDQXFtRCxFQUFBWSxZQUFBdHBELEtBQUEsU0FBQXhFLEdBQ0EsTUFBQXBCLElBQUFvQixHQUNBQSxFQUFBOEksS0FBQWtNLEdBR0E1WCxJQUlBOHZELEVBQUFhLFNBQUEsU0FBQS90RCxHQUNBLE9BQUFBLElBQUFBLEVBQUExQixXQWNBKzFELEdBQUEsV0FDQUMsR0FBQSxhQUNBaEgsR0FBQSxjQUNBQyxHQUFBLFdBQ0FzYixHQUFBLGVBQ0FDLEdBQUEsYUFDQWhWLEdBQUEsYUFFQWhELEdBQUF6ekQsRUFBQSxXQTBNQTByRSxJQUFBLFNBQUEsb0JBQUEsU0FBQSxXQUFBLFNBQUEsV0FBQSxXQUFBLGFBQUEsS0FBQSxlQUNBLFNBQUF4ekMsRUFBQTlkLEVBQUFnYixFQUFBeEQsRUFBQWhXLEVBQUF4QyxFQUFBNEQsRUFBQWxCLEVBQUFFLEVBQUF0QixHQUNBNUgsS0FBQWsrQyxXQUFBbGlDLE9BQUFvakMsSUFDQXAvQyxLQUFBNjRELFlBQUE3OEMsT0FBQW9qQyxJQUNBcC9DLEtBQUE4NEQsZ0JBQUE3ckUsRUFDQStTLEtBQUE4Z0QsZUFDQTlnRCxLQUFBKzRELG9CQUNBLzRELEtBQUF5Z0QsWUFDQXpnRCxLQUFBMjlDLGVBQ0EzOUMsS0FBQTAzRCx3QkFDQTEzRCxLQUFBZzVELFlBQUEsRUFDQWg1RCxLQUFBaTVELFVBQUEsRUFDQWo1RCxLQUFBZzhDLFdBQUEsRUFDQWg4QyxLQUFBKzdDLFFBQUEsRUFDQS83QyxLQUFBaThDLFFBQUEsRUFDQWo4QyxLQUFBazhDLFVBQUEsRUFDQWw4QyxLQUFBNDdDLFVBQ0E1N0MsS0FBQTY3QyxhQUNBNzdDLEtBQUE4N0MsU0FBQTd1RCxFQUNBK1MsS0FBQXk3QyxNQUFBN3pDLEVBQUEwYSxFQUFBL29CLE1BQUEsSUFBQSxHQUFBNnJCLEdBQ0FwbEIsS0FBQW84QyxhQUFBQyxFQUVBLElBS0E2YyxHQUxBQyxFQUFBcndELEVBQUF3WixFQUFBM2QsU0FDQXkwRCxFQUFBRCxFQUFBM3NDLE9BQ0E2c0MsRUFBQUYsRUFDQUcsRUFBQUYsRUFDQUcsRUFBQSxLQUVBeGMsRUFBQS84QyxJQUVBQSxNQUFBdzVELGFBQUEsU0FBQXRoRCxHQUVBLEdBREE2a0MsRUFBQXdELFNBQUFyb0MsRUFDQUEsR0FBQUEsRUFBQXVoRCxhQUFBLENBQ0EsR0FBQUMsR0FBQTV3RCxFQUFBd1osRUFBQTNkLFFBQUEsTUFDQWcxRCxFQUFBN3dELEVBQUF3WixFQUFBM2QsUUFBQSxTQUVBMDBELEdBQUEsU0FBQWowQyxHQUNBLEdBQUFzOEIsR0FBQXlYLEVBQUEvekMsRUFJQSxPQUhBajJCLEdBQUF1eUQsS0FDQUEsRUFBQWdZLEVBQUF0MEMsSUFFQXM4QixHQUVBNFgsRUFBQSxTQUFBbDBDLEVBQUE2RixHQUNBOTdCLEVBQUFncUUsRUFBQS96QyxJQUNBdTBDLEVBQUF2MEMsR0FBQXcwQyxLQUFBN2MsRUFBQThiLGNBRUFPLEVBQUFoMEMsRUFBQTIzQixFQUFBOGIsa0JBR0EsS0FBQU0sRUFBQTNzQyxPQUNBLEtBQUFtMEIsSUFBQSxZQUFBLG1EQUNBcitCLEVBQUEzZCxRQUFBbE4sRUFBQXFuQixLQXdCQTllLEtBQUF3K0MsUUFBQTFzRCxFQW9CQWtPLEtBQUE0OUMsU0FBQSxTQUFBL3RELEdBQ0EsTUFBQXVDLEdBQUF2QyxJQUFBLEtBQUFBLEdBQUEsT0FBQUEsR0FBQUEsSUFBQUEsRUFHQSxJQUFBZ3FFLEdBQUEsQ0F3QkEvYyxLQUNBQyxLQUFBLzhDLEtBQ0E4ZSxTQUFBQSxFQUNBaytCLElBQUEsU0FBQTlhLEVBQUFoRixHQUNBZ0YsRUFBQWhGLElBQUEsR0FFQStmLE1BQUEsU0FBQS9hLEVBQUFoRixTQUNBZ0YsR0FBQWhGLElBRUE1MkIsU0FBQUEsSUFjQXRHLEtBQUFxOUMsYUFBQSxXQUNBTixFQUFBaEIsUUFBQSxFQUNBZ0IsRUFBQWYsV0FBQSxFQUNBMTFDLEVBQUFpTSxZQUFBdU0sRUFBQXMrQixJQUNBOTJDLEVBQUFnTSxTQUFBd00sRUFBQXErQixLQWNBbjlDLEtBQUFrOUMsVUFBQSxXQUNBSCxFQUFBaEIsUUFBQSxFQUNBZ0IsRUFBQWYsV0FBQSxFQUNBMTFDLEVBQUFpTSxZQUFBdU0sRUFBQXErQixJQUNBNzJDLEVBQUFnTSxTQUFBd00sRUFBQXMrQixJQUNBTCxFQUFBWCxhQUFBYyxhQWVBbDlDLEtBQUF3OUMsY0FBQSxXQUNBVCxFQUFBa2MsVUFBQSxFQUNBbGMsRUFBQWljLFlBQUEsRUFDQTF5RCxFQUFBZzNDLFNBQUF4K0IsRUFBQTQ1QyxHQUFBQyxLQWNBMzRELEtBQUE4NUQsWUFBQSxXQUNBL2MsRUFBQWtjLFVBQUEsRUFDQWxjLEVBQUFpYyxZQUFBLEVBQ0ExeUQsRUFBQWczQyxTQUFBeCtCLEVBQUE2NUMsR0FBQUQsS0FnRUExNEQsS0FBQXM4QyxtQkFBQSxXQUNBcHlDLEVBQUE0USxPQUFBeStDLEdBQ0F4YyxFQUFBbUIsV0FBQW5CLEVBQUFnZCx5QkFDQWhkLEVBQUF5QixXQWVBeCtDLEtBQUErZ0QsVUFBQSxXQUVBLElBQUFseUQsRUFBQWt1RCxFQUFBOGIsZUFBQTloRSxNQUFBZ21ELEVBQUE4YixhQUFBLENBSUEsR0FBQWxYLEdBQUE1RSxFQUFBZ2QseUJBS0FyWSxFQUFBM0UsRUFBQStiLGdCQUVBa0IsRUFBQWpkLEVBQUFkLE9BQ0FnZSxFQUFBbGQsRUFBQThiLFlBRUFxQixFQUFBbmQsRUFBQXdELFVBQUF4RCxFQUFBd0QsU0FBQTJaLFlBRUFuZCxHQUFBb2QsZ0JBQUF6WSxFQUFBQyxFQUFBLFNBQUF5WSxHQUdBRixHQUFBRixJQUFBSSxJQUtBcmQsRUFBQThiLFlBQUF1QixFQUFBMVksRUFBQXowRCxFQUVBOHZELEVBQUE4YixjQUFBb0IsR0FDQWxkLEVBQUFzZCwyQkFPQXI2RCxLQUFBbTZELGdCQUFBLFNBQUF6WSxFQUFBQyxFQUFBMlksR0FlQSxRQUFBQyxLQUNBLEdBQUFDLEdBQUF6ZCxFQUFBeUQsY0FBQSxPQUNBLE9BQUFwdUQsR0FBQThtRSxJQUNBNVYsRUFBQWtYLEVBQUEsT0FjQSxJQVpBdEIsSUFDQW5xRSxFQUFBZ3VELEVBQUErRCxZQUFBLFNBQUFoeEIsRUFBQXYyQixHQUNBK3BELEVBQUEvcEQsRUFBQSxRQUVBeEssRUFBQWd1RCxFQUFBZ2MsaUJBQUEsU0FBQWpwQyxFQUFBdjJCLEdBQ0ErcEQsRUFBQS9wRCxFQUFBLFNBSUErcEQsRUFBQWtYLEVBQUF0QixHQUNBQSxHQUtBLFFBQUF1QixLQUNBLEdBQUFDLElBQUEsQ0FNQSxPQUxBM3JFLEdBQUFndUQsRUFBQStELFlBQUEsU0FBQTZaLEVBQUFwaEUsR0FDQSxHQUFBNGEsR0FBQXdtRCxFQUFBalosRUFBQUMsRUFDQStZLEdBQUFBLEdBQUF2bUQsRUFDQW12QyxFQUFBL3BELEVBQUE0YSxLQUVBdW1ELEdBTUEsR0FMQTNyRSxFQUFBZ3VELEVBQUFnYyxpQkFBQSxTQUFBanBDLEVBQUF2MkIsR0FDQStwRCxFQUFBL3BELEVBQUEsU0FFQSxHQUtBLFFBQUFxaEUsS0FDQSxHQUFBQyxNQUNBVCxHQUFBLENBQ0FyckUsR0FBQWd1RCxFQUFBZ2MsaUJBQUEsU0FBQTRCLEVBQUFwaEUsR0FDQSxHQUFBdTZCLEdBQUE2bUMsRUFBQWpaLEVBQUFDLEVBQ0EsS0FBQTd1RCxFQUFBZ2hDLEdBQ0EsS0FBQTZzQixJQUFBLG1CQUNBLDZFQUFBN3NCLEVBRUF3dkIsR0FBQS9wRCxFQUFBdE0sR0FDQTR0RSxFQUFBeG1FLEtBQUF5L0IsRUFBQS9nQyxLQUFBLFdBQ0F1d0QsRUFBQS9wRCxHQUFBLElBQ0EsU0FBQWlmLEdBQ0E0aEQsR0FBQSxFQUNBOVcsRUFBQS9wRCxHQUFBLFFBR0FzaEUsRUFBQTFzRSxPQUdBK2EsRUFBQXNLLElBQUFxbkQsR0FBQTluRSxLQUFBLFdBQ0ErbkUsRUFBQVYsSUFDQXRvRSxHQUpBZ3BFLEdBQUEsR0FRQSxRQUFBeFgsR0FBQS9wRCxFQUFBMHFELEdBQ0E4VyxJQUFBbEIsR0FDQTljLEVBQUFGLGFBQUF0akQsRUFBQTBxRCxHQUlBLFFBQUE2VyxHQUFBVixHQUNBVyxJQUFBbEIsR0FFQVMsRUFBQUYsR0FyRkFQLEdBQ0EsSUFBQWtCLEdBQUFsQixDQUdBLE9BQUFVLE1BSUFFLFFBSUFHLFNBUEFFLElBQUEsSUFnR0E5NkQsS0FBQXU4QyxpQkFBQSxXQUNBLEdBQUFvRixHQUFBNUUsRUFBQW1CLFVBRUFoMEMsR0FBQTRRLE9BQUF5K0MsSUFLQXhjLEVBQUFnZCwyQkFBQXBZLEdBQUEsS0FBQUEsR0FBQTVFLEVBQUFvQix5QkFHQXBCLEVBQUFnZCx5QkFBQXBZLEVBR0E1RSxFQUFBZixXQUNBaDhDLEtBQUFrOUMsWUFFQWw5QyxLQUFBZzdELHVCQUdBaDdELEtBQUFnN0QsbUJBQUEsV0F3Q0EsUUFBQUMsS0FDQWxlLEVBQUE4YixjQUFBb0IsR0FDQWxkLEVBQUFzZCxzQkF6Q0EsR0FBQTFZLEdBQUE1RSxFQUFBZ2QseUJBQ0FyWSxFQUFBQyxDQUdBLElBRkF1WCxFQUFBOW1FLEVBQUFzdkQsR0FBQXowRCxHQUFBLEVBR0EsSUFBQSxHQUFBTSxHQUFBLEVBQUFBLEVBQUF3dkQsRUFBQTBELFNBQUF0eUQsT0FBQVosSUFFQSxHQURBbTBELEVBQUEzRSxFQUFBMEQsU0FBQWx6RCxHQUFBbTBELEdBQ0F0dkQsRUFBQXN2RCxHQUFBLENBQ0F3WCxHQUFBLENBQ0EsT0FJQXJxRSxFQUFBa3VELEVBQUE4YixjQUFBOWhFLE1BQUFnbUQsRUFBQThiLGVBRUE5YixFQUFBOGIsWUFBQVEsRUFBQWowQyxHQUVBLElBQUE2MEMsR0FBQWxkLEVBQUE4YixZQUNBcUIsRUFBQW5kLEVBQUF3RCxVQUFBeEQsRUFBQXdELFNBQUEyWixZQUNBbmQsR0FBQStiLGdCQUFBcFgsRUFFQXdZLElBQ0FuZCxFQUFBOGIsWUFBQW5YLEVBQ0F1WixLQUtBbGUsRUFBQW9kLGdCQUFBelksRUFBQTNFLEVBQUFnZCx5QkFBQSxTQUFBSyxHQUNBRixJQUtBbmQsRUFBQThiLFlBQUF1QixFQUFBMVksRUFBQXowRCxFQUNBZ3VFLFFBV0FqN0QsS0FBQXE2RCxvQkFBQSxXQUNBZixFQUFBbDBDLEVBQUEyM0IsRUFBQThiLGFBQ0E5cEUsRUFBQWd1RCxFQUFBMmEscUJBQUEsU0FBQWwrQyxHQUNBLElBQ0FBLElBQ0EsTUFBQTdoQixHQUNBMlAsRUFBQTNQLE9BdURBcUksS0FBQW8rQyxjQUFBLFNBQUF2dUQsRUFBQSsyRCxHQUNBN0osRUFBQW1CLFdBQUFydUQsSUFDQWt0RCxFQUFBd0QsVUFBQXhELEVBQUF3RCxTQUFBMmEsa0JBQ0FuZSxFQUFBb2UsMEJBQUF2VSxJQUlBNW1ELEtBQUFtN0QsMEJBQUEsU0FBQXZVLEdBQ0EsR0FFQXdVLEdBRkFDLEVBQUEsRUFDQW5qRCxFQUFBNmtDLEVBQUF3RCxRQUdBcm9DLElBQUE3bEIsRUFBQTZsQixFQUFBa2pELFlBQ0FBLEVBQUFsakQsRUFBQWtqRCxTQUNBdnNFLEVBQUF1c0UsR0FDQUMsRUFBQUQsRUFDQXZzRSxFQUFBdXNFLEVBQUF4VSxJQUNBeVUsRUFBQUQsRUFBQXhVLEdBQ0EvM0QsRUFBQXVzRSxFQUFBLGNBQ0FDLEVBQUFELEVBQUEsYUFJQWx4RCxFQUFBNFEsT0FBQXkrQyxHQUNBOEIsRUFDQTlCLEVBQUFydkQsRUFBQSxXQUNBNnlDLEVBQUFSLG9CQUNBOGUsR0FDQXJ5RCxFQUFBaXNCLFFBQ0E4bkIsRUFBQVIsbUJBRUFuM0IsRUFBQTNxQixPQUFBLFdBQ0FzaUQsRUFBQVIsc0JBYUFuM0IsRUFBQTN5QixPQUFBLFdBQ0EsR0FBQWl2RCxHQUFBMlgsRUFBQWowQyxFQUlBLElBQUFzOEIsSUFBQTNFLEVBQUE4YixjQUVBOWIsRUFBQThiLGNBQUE5YixFQUFBOGIsYUFBQW5YLElBQUFBLEdBQ0EsQ0FDQTNFLEVBQUE4YixZQUFBOWIsRUFBQStiLGdCQUFBcFgsRUFDQXdYLEVBQUFqc0UsQ0FNQSxLQUpBLEdBQUFxdUUsR0FBQXZlLEVBQUFZLFlBQ0E5OEIsRUFBQXk2QyxFQUFBbnRFLE9BRUF3ekQsRUFBQUQsRUFDQTdnQyxLQUNBOGdDLEVBQUEyWixFQUFBejZDLEdBQUE4Z0MsRUFFQTVFLEdBQUFtQixhQUFBeUQsSUFDQTVFLEVBQUFtQixXQUFBbkIsRUFBQWdkLHlCQUFBcFksRUFDQTVFLEVBQUF5QixVQUVBekIsRUFBQW9kLGdCQUFBelksRUFBQUMsRUFBQTd2RCxJQUlBLE1BQUE0dkQsT0E0S0E5OEMsSUFBQSxhQUFBLFNBQUFvRSxHQUNBLE9BQ0FzVixTQUFBLElBQ0FELFNBQUEsVUFBQSxTQUFBLG9CQUNBL2hCLFdBQUFzOEQsR0FJQXg2QyxTQUFBLEVBQ0E1akIsUUFBQSxTQUFBN0csR0FJQSxNQUZBQSxHQUFBMmUsU0FBQTZxQyxJQUFBN3FDLFNBQUFvbUQsSUFBQXBtRCxTQUFBNHhDLEtBR0ExL0IsSUFBQSxTQUFBanFCLEVBQUE1RyxFQUFBTixFQUFBMmlFLEdBQ0EsR0FBQXVGLEdBQUF2RixFQUFBLEdBQ0F3RixFQUFBeEYsRUFBQSxJQUFBdUYsRUFBQW5mLFlBRUFtZixHQUFBL0IsYUFBQXhELEVBQUEsSUFBQUEsRUFBQSxHQUFBelYsVUFHQWliLEVBQUFoZixZQUFBK2UsR0FFQWxvRSxFQUFBaTVCLFNBQUEsT0FBQSxTQUFBckIsR0FDQXN3QyxFQUFBOWYsUUFBQXh3QixHQUNBc3dDLEVBQUFuZixhQUFBSyxnQkFBQThlLEVBQUF0d0MsS0FJQTF3QixFQUFBNnJCLElBQUEsV0FBQSxXQUNBbTFDLEVBQUFuZixhQUFBUSxlQUFBMmUsTUFHQTkyQyxLQUFBLFNBQUFscUIsRUFBQTVHLEVBQUFOLEVBQUEyaUUsR0FDQSxHQUFBdUYsR0FBQXZGLEVBQUEsRUFDQXVGLEdBQUFoYixVQUFBZ2IsRUFBQWhiLFNBQUFrYixVQUNBOW5FLEVBQUF3SSxHQUFBby9ELEVBQUFoYixTQUFBa2IsU0FBQSxTQUFBemQsR0FDQXVkLEVBQUFKLDBCQUFBbmQsR0FBQUEsRUFBQWp3QyxRQUlBcGEsRUFBQXdJLEdBQUEsT0FBQSxTQUFBNmhELEdBQ0F1ZCxFQUFBdEMsV0FFQWp3RCxFQUFBaXNCLFFBQ0ExNkIsRUFBQS9ILFdBQUErb0UsRUFBQXpCLGFBRUF2L0QsRUFBQUUsT0FBQThnRSxFQUFBekIsc0JBU0E0QixHQUFBLHdCQW1LQTExRCxHQUFBLFdBQ0EsT0FDQXNZLFNBQUEsSUFDQWhpQixZQUFBLFNBQUEsU0FBQSxTQUFBOG9CLEVBQUFDLEdBQ0EsR0FBQXMyQyxHQUFBMzdELElBQ0FBLE1BQUF1Z0QsU0FBQXRzRCxFQUFBbXhCLEVBQUE2bkIsTUFBQTVuQixFQUFBdGYsaUJBRUExVCxFQUFBMk4sS0FBQXVnRCxTQUFBa2IsV0FDQXo3RCxLQUFBdWdELFNBQUEyYSxpQkFBQSxFQUVBbDdELEtBQUF1Z0QsU0FBQWtiLFNBQUFydUQsR0FBQXBOLEtBQUF1Z0QsU0FBQWtiLFNBQUEzdEUsUUFBQTR0RSxHQUFBLFdBRUEsTUFEQUMsR0FBQXBiLFNBQUEyYSxpQkFBQSxFQUNBLFFBR0FsN0QsS0FBQXVnRCxTQUFBMmEsaUJBQUEsTUFrSkExM0QsR0FBQTgzQyxJQUFBejVCLFVBQUEsRUFBQXpELFNBQUEsTUFJQXc5QyxHQUFBMXVFLEVBQUEsYUFzT0EydUUsR0FBQSw0T0FhQXIzRCxJQUFBLFdBQUEsU0FBQSxTQUFBNHlELEVBQUF0dUQsR0FFQSxRQUFBZ3pELEdBQUFDLEVBQUFDLEVBQUF6aEUsR0FzREEsUUFBQTBoRSxHQUFBQyxFQUFBdmEsRUFBQXdhLEVBQUFybEIsRUFBQXNsQixHQUNBcDhELEtBQUFrOEQsWUFBQUEsRUFDQWw4RCxLQUFBMmhELFVBQUFBLEVBQ0EzaEQsS0FBQW04RCxNQUFBQSxFQUNBbjhELEtBQUE4MkMsTUFBQUEsRUFDQTkyQyxLQUFBbzhELFNBQUFBLEVBR0EsUUFBQUMsR0FBQUMsR0FDQSxHQUFBQyxFQUVBLEtBQUFDLEdBQUFsdUUsRUFBQWd1RSxHQUNBQyxFQUFBRCxNQUNBLENBRUFDLElBQ0EsS0FBQSxHQUFBRSxLQUFBSCxHQUNBQSxFQUFBbHRFLGVBQUFxdEUsSUFBQSxNQUFBQSxFQUFBMW5FLE9BQUEsSUFDQXduRSxFQUFBbG9FLEtBQUFvb0UsR0FJQSxNQUFBRixHQTFFQSxHQUFBeHVFLEdBQUFndUUsRUFBQWh1RSxNQUFBOHRFLEdBQ0EsS0FBQSxFQUNBLEtBQUFELElBQUEsT0FDQSwySEFHQUcsRUFBQXRrRSxFQUFBdWtFLEdBTUEsSUFBQVUsR0FBQTN1RSxFQUFBLElBQUFBLEVBQUEsR0FFQXl1RSxFQUFBenVFLEVBQUEsR0FHQTR1RSxFQUFBLE9BQUF6cEUsS0FBQW5GLEVBQUEsS0FBQUEsRUFBQSxHQUVBNnVFLEVBQUE3dUUsRUFBQSxHQUVBa0UsRUFBQTZXLEVBQUEvYSxFQUFBLEdBQUFBLEVBQUEsR0FBQTJ1RSxHQUNBRyxFQUFBRixHQUFBN3pELEVBQUE2ekQsR0FDQUcsRUFBQUQsR0FBQTVxRSxFQUNBOHFFLEVBQUFILEdBQUE5ekQsRUFBQTh6RCxHQUtBSSxFQUFBSixFQUNBLFNBQUEvc0UsRUFBQStsQixHQUFBLE1BQUFtbkQsR0FBQXhpRSxFQUFBcWIsSUFDQSxTQUFBL2xCLEdBQUEsTUFBQTJpQixJQUFBM2lCLElBQ0FvdEUsRUFBQSxTQUFBcHRFLEVBQUFYLEdBQ0EsTUFBQTh0RSxHQUFBbnRFLEVBQUFxdEUsRUFBQXJ0RSxFQUFBWCxLQUdBaXVFLEVBQUFyMEQsRUFBQS9hLEVBQUEsSUFBQUEsRUFBQSxJQUNBcXZFLEVBQUF0MEQsRUFBQS9hLEVBQUEsSUFBQSxJQUNBc3ZFLEVBQUF2MEQsRUFBQS9hLEVBQUEsSUFBQSxJQUNBdXZFLEVBQUF4MEQsRUFBQS9hLEVBQUEsSUFFQTZuQixLQUNBc25ELEVBQUFWLEVBQUEsU0FBQTNzRSxFQUFBWCxHQUdBLE1BRkEwbUIsR0FBQTRtRCxHQUFBdHRFLEVBQ0EwbUIsRUFBQThtRCxHQUFBN3NFLEVBQ0ErbEIsR0FDQSxTQUFBL2xCLEdBRUEsTUFEQStsQixHQUFBOG1ELEdBQUE3c0UsRUFDQStsQixFQTZCQSxRQUNBZ25ELFFBQUFBLEVBQ0FLLGdCQUFBQSxFQUNBTSxjQUFBejBELEVBQUF3MEQsRUFBQSxTQUFBaEIsR0FJQSxHQUFBa0IsS0FDQWxCLEdBQUFBLEtBSUEsS0FBQSxHQUZBQyxHQUFBRixFQUFBQyxHQUNBbUIsRUFBQWxCLEVBQUFwdUUsT0FDQUgsRUFBQSxFQUFBeXZFLEVBQUF6dkUsRUFBQUEsSUFBQSxDQUNBLEdBQUFrQixHQUFBb3RFLElBQUFDLEVBQUF2dUUsRUFBQXV1RSxFQUFBdnVFLEdBR0E0bkIsR0FGQTBtRCxFQUFBcHRFLEdBRUFndUUsRUFBQVosRUFBQXB0RSxHQUFBQSxJQUNBZ3RFLEVBQUFjLEVBQUFWLEVBQUFwdEUsR0FBQTBtQixFQUlBLElBSEE0bkQsRUFBQW5wRSxLQUFBNm5FLEdBR0FudUUsRUFBQSxJQUFBQSxFQUFBLEdBQUEsQ0FDQSxHQUFBb3VFLEdBQUFnQixFQUFBNWlFLEVBQUFxYixFQUNBNG5ELEdBQUFucEUsS0FBQThuRSxHQUlBLEdBQUFwdUUsRUFBQSxHQUFBLENBQ0EsR0FBQTJ2RSxHQUFBTCxFQUFBOWlFLEVBQUFxYixFQUNBNG5ELEdBQUFucEUsS0FBQXFwRSxJQUdBLE1BQUFGLEtBR0FHLFdBQUEsV0FXQSxJQUFBLEdBVEFDLE1BQ0FDLEtBSUF2QixFQUFBZ0IsRUFBQS9pRSxPQUNBZ2lFLEVBQUFGLEVBQUFDLEdBQ0FtQixFQUFBbEIsRUFBQXB1RSxPQUVBSCxFQUFBLEVBQUF5dkUsRUFBQXp2RSxFQUFBQSxJQUFBLENBQ0EsR0FBQWtCLEdBQUFvdEUsSUFBQUMsRUFBQXZ1RSxFQUFBdXVFLEVBQUF2dUUsR0FDQTZCLEVBQUF5c0UsRUFBQXB0RSxHQUNBMG1CLEVBQUFzbkQsRUFBQXJ0RSxFQUFBWCxHQUNBeXlELEVBQUFtYixFQUFBdmlFLEVBQUFxYixHQUNBc21ELEVBQUFjLEVBQUFyYixFQUFBL3JDLEdBQ0F1bUQsRUFBQWdCLEVBQUE1aUUsRUFBQXFiLEdBQ0FraEMsRUFBQXNtQixFQUFBN2lFLEVBQUFxYixHQUNBd21ELEVBQUFpQixFQUFBOWlFLEVBQUFxYixHQUNBa29ELEVBQUEsR0FBQTdCLEdBQUFDLEVBQUF2YSxFQUFBd2EsRUFBQXJsQixFQUFBc2xCLEVBRUF3QixHQUFBdnBFLEtBQUF5cEUsR0FDQUQsRUFBQTNCLEdBQUE0QixFQUdBLE9BQ0F0cUUsTUFBQW9xRSxFQUNBQyxlQUFBQSxFQUNBRSx1QkFBQSxTQUFBbHVFLEdBQ0EsTUFBQWd1RSxHQUFBWixFQUFBcHRFLEtBRUFtdUUsdUJBQUEsU0FBQXI4RCxHQUdBLE1BQUFpN0QsR0FBQS9oRSxHQUFBNUcsS0FBQTBOLEVBQUFnZ0QsV0FBQWhnRCxFQUFBZ2dELGNBY0EsUUFBQXNjLEdBQUExakUsRUFBQXloRSxFQUFBM29FLEVBQUEyaUUsR0FtTEEsUUFBQWtJLEdBQUF2OEQsRUFBQWhPLEdBQ0FnTyxFQUFBaE8sUUFBQUEsRUFDQUEsRUFBQXlvRSxTQUFBejZELEVBQUF5NkQsU0FNQXo2RCxFQUFBdzZELFFBQUF4b0UsRUFBQXdvRSxRQUNBeG9FLEVBQUF3b0UsTUFBQXg2RCxFQUFBdzZELE1BQ0F4b0UsRUFBQW9aLFlBQUFwTCxFQUFBdzZELE9BRUF4NkQsRUFBQTlSLFFBQUE4RCxFQUFBOUQsUUFBQThELEVBQUE5RCxNQUFBOFIsRUFBQXU2RCxhQUdBLFFBQUFpQyxHQUFBeHNFLEVBQUEyNEMsRUFBQXY4QixFQUFBc3BELEdBQ0EsR0FBQTFqRSxFQWdCQSxPQWRBMjJDLElBQUExMkMsR0FBQTAyQyxFQUFBcjVDLFlBQUE4YyxFQUVBcGEsRUFBQTIyQyxHQUdBMzJDLEVBQUEwakUsRUFBQW5tRSxXQUFBLEdBQ0FvNUMsRUFLQTM0QyxFQUFBbzJELGFBQUFwMEQsRUFBQTIyQyxHQUhBMzRDLEVBQUF5YSxZQUFBelksSUFNQUEsRUFJQSxRQUFBeXFFLEdBQUE5ekIsR0FFQSxJQURBLEdBQUFxQyxHQUNBckMsR0FDQXFDLEVBQUFyQyxFQUFBdHNDLFlBQ0FpUyxHQUFBcTZCLEdBQ0FBLEVBQUFxQyxFQUtBLFFBQUEweEIsR0FBQS96QixHQUNBLEdBQUFnMEIsR0FBQUMsR0FBQUEsRUFBQSxHQUNBQyxFQUFBQyxHQUFBQSxFQUFBLEVBS0EsSUFBQUgsR0FBQUUsRUFDQSxLQUFBbDBCLElBQ0FBLElBQUFnMEIsR0FDQWgwQixJQUFBazBCLEdBQ0FsMEIsRUFBQXZ5QyxXQUFBMHJCLElBQ0EsS0FBQTZtQixFQUFBejZDLFFBQ0F5NkMsRUFBQUEsRUFBQXRzQyxXQUdBLE9BQUFzc0MsR0FJQSxRQUFBbzBCLEtBRUEsR0FBQUMsR0FBQXptRCxHQUFBMG1ELEVBQUFDLFdBRUEzbUQsR0FBQTNULEVBQUFvNUQsWUFFQSxJQUFBbUIsTUFDQTFHLEVBQUE0RCxFQUFBLEdBQUFsdkQsVUF5RUEsSUF0RUFpeUQsR0FDQS9DLEVBQUEvVCxRQUFBc1csR0FHQW5HLEVBQUFpRyxFQUFBakcsR0FFQWxnRCxFQUFBMWtCLE1BQUF6RSxRQUFBLFNBQUE0UyxHQUNBLEdBQUFtMUMsR0FDQWtvQixFQUNBM2EsQ0FFQTFpRCxHQUFBbTFDLE9BSUFBLEVBQUFnb0IsRUFBQW45RCxFQUFBbTFDLE9BRUFBLElBR0Frb0IsRUFBQWIsRUFBQW5DLEVBQUEsR0FDQTVELEVBQ0EsV0FDQTZHLEdBRUE3RyxFQUFBNEcsRUFBQWhoRSxZQUdBZ2hFLEVBQUE3QyxNQUFBeDZELEVBQUFtMUMsTUFHQUEsRUFBQWdvQixFQUFBbjlELEVBQUFtMUMsUUFDQWtvQixhQUFBQSxFQUNBRSxxQkFBQUYsRUFBQWx5RCxhQU1BdTNDLEVBQUE4WixFQUFBcm5CLEVBQUFrb0IsYUFDQWxvQixFQUFBb29CLHFCQUNBLFNBQ0FDLEdBQ0FqQixFQUFBdjhELEVBQUEwaUQsR0FFQXZOLEVBQUFvb0IscUJBQUE3YSxFQUFBcm1ELGNBS0FxbUQsRUFBQThaLEVBQUFuQyxFQUFBLEdBQ0E1RCxFQUNBLFNBQ0ErRyxHQUNBakIsRUFBQXY4RCxFQUFBMGlELEdBRUErVCxFQUFBL1QsRUFBQXJtRCxlQU1BcFAsT0FBQWEsS0FBQXF2RSxHQUFBL3ZFLFFBQUEsU0FBQUcsR0FDQWt2RSxFQUFBVSxFQUFBNXZFLEdBQUFnd0Usd0JBRUFkLEVBQUFoRyxHQUVBZ0gsRUFBQTVnQixXQUdBNGdCLEVBQUF4aEIsU0FBQStnQixHQUFBLENBQ0EsR0FBQVUsR0FBQVQsRUFBQUMsYUFDQXQ2RCxFQUFBcTRELFFBQUE1bkUsRUFBQTJwRSxFQUFBVSxHQUFBVixJQUFBVSxLQUNBRCxFQUFBaGhCLGNBQUFpaEIsR0FDQUQsRUFBQTVnQixZQXRVQSxHQUFBNGdCLEdBQUFwSixFQUFBLEVBQ0EsSUFBQW9KLEVBQUEsQ0FRQSxJQUFBLEdBREFiLEdBTEFLLEVBQUE1SSxFQUFBLEdBQ0F6TyxFQUFBbDBELEVBQUFrMEQsU0FLQWg2RCxFQUFBLEVBQUEyeUMsRUFBQTg3QixFQUFBOTdCLFdBQUEzdkMsRUFBQTJ2QyxFQUFBL3hDLE9BQUFvQyxFQUFBaEQsRUFBQUEsSUFDQSxHQUFBLEtBQUEyeUMsRUFBQTN5QyxHQUFBc0MsTUFBQSxDQUNBMHVFLEVBQUFyK0IsRUFBQThLLEdBQUF6OUMsRUFDQSxPQUlBLEdBQUF3eEUsS0FBQVIsRUFFQUUsRUFBQTl2RSxHQUFBd3dFLEVBQUFqdUUsV0FBQSxHQUNBdXRFLEdBQUF0b0UsSUFBQSxJQUVBLElBQUEraEIsR0FDQTNULEVBQUF1M0QsRUFBQXpvRSxFQUFBa1IsVUFBQXkzRCxFQUFBemhFLEdBR0Era0UsRUFBQSxXQUNBUCxHQUNBL0MsRUFBQS9ULFFBQUFzVyxHQUVBdkMsRUFBQTdsRSxJQUFBLElBQ0Fvb0UsRUFBQW5yRSxLQUFBLFlBQUEsR0FDQW1yRSxFQUFBbHJFLEtBQUEsWUFBQSxJQUdBa3NFLEVBQUEsV0FDQVIsR0FDQVIsRUFBQW5pRCxVQUtBb2pELEVBQUEsV0FDQXhELEVBQUEvVCxRQUFBd1csR0FDQXpDLEVBQUE3bEUsSUFBQSxLQUNBc29FLEVBQUFyckUsS0FBQSxZQUFBLEdBQ0FxckUsRUFBQXByRSxLQUFBLFlBQUEsSUFHQW9zRSxFQUFBLFdBQ0FoQixFQUFBcmlELFNBSUFtckMsSUFnREE2WCxFQUFBeGhCLFNBQUEsU0FBQS90RCxHQUNBLE9BQUFBLEdBQUEsSUFBQUEsRUFBQTFCLFFBSUF5d0UsRUFBQWMsV0FBQSxTQUFBN3ZFLEdBQ0Fxb0IsRUFBQTFrQixNQUFBekUsUUFBQSxTQUFBNFMsR0FDQUEsRUFBQWhPLFFBQUEyd0QsVUFBQSxJQUdBejBELEdBQ0FBLEVBQUFkLFFBQUEsU0FBQUQsR0FDQSxHQUFBNlMsR0FBQXVXLEVBQUE2bEQsdUJBQUFqdkUsRUFDQTZTLEtBQUFBLEVBQUF5NkQsV0FBQXo2RCxFQUFBaE8sUUFBQTJ3RCxVQUFBLE1BTUFzYSxFQUFBQyxVQUFBLFdBQ0EsR0FBQWMsR0FBQTNELEVBQUE3bEUsVUFDQXlwRSxJQU9BLE9BTEE3d0UsR0FBQTR3RSxFQUFBLFNBQUE5dkUsR0FDQSxHQUFBOFIsR0FBQXVXLEVBQUEybEQsZUFBQWh1RSxFQUNBOFIsS0FBQUEsRUFBQXk2RCxVQUFBd0QsRUFBQXZyRSxLQUFBNmpCLEVBQUE4bEQsdUJBQUFyOEQsTUFHQWkrRCxHQUtBcjdELEVBQUFxNEQsU0FFQXJpRSxFQUFBc3lCLGlCQUFBLFdBQ0EsTUFBQXArQixJQUFBMndFLEVBQUFsaEIsWUFDQWtoQixFQUFBbGhCLFdBQUF4RCxJQUFBLFNBQUE3cUQsR0FDQSxNQUFBMFUsR0FBQTA0RCxnQkFBQXB0RSxLQUZBLFFBS0EsV0FDQXV2RSxFQUFBNWdCLGNBeEZBb2dCLEVBQUFjLFdBQUEsU0FBQTd2RSxHQUNBLEdBQUE4UixHQUFBdVcsRUFBQTZsRCx1QkFBQWx1RSxFQUVBOFIsS0FBQUEsRUFBQXk2RCxTQUNBSixFQUFBLEdBQUFuc0UsUUFBQThSLEVBQUF1NkQsY0FDQXVELElBQ0FGLElBRUF2RCxFQUFBLEdBQUFuc0UsTUFBQThSLEVBQUF1NkQsWUFDQXY2RCxFQUFBaE8sUUFBQTJ3RCxVQUFBLEVBQ0EzaUQsRUFBQWhPLFFBQUF1YixhQUFBLFdBQUEsYUFHQSxPQUFBcmYsR0FBQWt2RSxHQUNBVSxJQUNBSCxNQUVBQyxJQUNBQyxNQUtBWixFQUFBQyxVQUFBLFdBRUEsR0FBQWdCLEdBQUEzbkQsRUFBQTJsRCxlQUFBN0IsRUFBQTdsRSxNQUVBLE9BQUEwcEUsS0FBQUEsRUFBQXpELFVBQ0FtRCxJQUNBRSxJQUNBdm5ELEVBQUE4bEQsdUJBQUE2QixJQUVBLE1BS0F0N0QsRUFBQXE0RCxTQUNBcmlFLEVBQUE5SCxPQUNBLFdBQUEsTUFBQThSLEdBQUEwNEQsZ0JBQUFtQyxFQUFBbGhCLGFBQ0EsV0FBQWtoQixFQUFBNWdCLGFBdURBdWdCLEdBSUFSLEVBQUFuaUQsU0FHQWc3QyxFQUFBbUgsR0FBQWhrRSxHQUlBZ2tFLEVBQUFoc0QsWUFBQSxhQUVBZ3NELEVBQUE1dkUsR0FBQXd3RSxFQUFBanVFLFdBQUEsSUFLQXd0RSxJQUdBbmtFLEVBQUFzeUIsaUJBQUF0b0IsRUFBQWc1RCxjQUFBbUIsSUFsTEEsR0FBQVMsR0FBQW55RSxFQUFBcWYsY0FBQSxVQUNBNHlELEVBQUFqeUUsRUFBQXFmLGNBQUEsV0FtVkEsUUFDQWlTLFNBQUEsSUFDQXVELFVBQUEsRUFDQXhELFNBQUEsU0FBQSxZQUNBOUMsTUFDQWlKLElBQUEsU0FBQWpxQixFQUFBeWhFLEVBQUEzb0UsRUFBQTJpRSxHQUlBQSxFQUFBLEdBQUE4SixlQUFBaHVFLEdBRUEyeUIsS0FBQXc1QyxNQW9MQXY2RCxJQUFBLFVBQUEsZUFBQSxPQUFBLFNBQUFveEMsRUFBQWx0QyxFQUFBZ0IsR0FDQSxHQUFBbTNELEdBQUEsTUFDQUMsRUFBQSxvQkFFQSxRQUNBemtELEtBQUEsU0FBQWhoQixFQUFBNUcsRUFBQU4sR0FvREEsUUFBQTRzRSxHQUFBQyxHQUNBdnNFLEVBQUFzMkIsS0FBQWkyQyxHQUFBLElBcERBLEdBU0FDLEdBVEFDLEVBQUEvc0UsRUFBQThsQyxNQUNBa25DLEVBQUFodEUsRUFBQWl2QixNQUFBeVIsTUFBQXBnQyxFQUFBTixLQUFBQSxFQUFBaXZCLE1BQUF5UixNQUNBNW9CLEVBQUE5WCxFQUFBOFgsUUFBQSxFQUNBbTFELEVBQUEvbEUsRUFBQTB5QyxNQUFBb3pCLE9BQ0FFLEtBQ0FueUMsRUFBQXhtQixFQUFBd21CLGNBQ0FDLEVBQUF6bUIsRUFBQXltQixZQUNBbXlDLEVBQUFweUMsRUFBQWd5QyxFQUFBLElBQUFqMUQsRUFBQWtqQixFQUNBb3lDLEVBQUE1bEUsR0FBQS9JLElBR0EvQyxHQUFBc0UsRUFBQSxTQUFBazhCLEVBQUFteEMsR0FDQSxHQUFBQyxHQUFBWCxFQUFBenpELEtBQUFtMEQsRUFDQSxJQUFBQyxFQUFBLENBQ0EsR0FBQUMsSUFBQUQsRUFBQSxHQUFBLElBQUEsSUFBQS9zRSxHQUFBK3NFLEVBQUEsR0FDQUwsR0FBQU0sR0FBQWp0RSxFQUFBTixLQUFBQSxFQUFBaXZCLE1BQUFvK0MsT0FHQTN4RSxFQUFBdXhFLEVBQUEsU0FBQS93QyxFQUFBcmdDLEdBQ0FxeEUsRUFBQXJ4RSxHQUFBMFksRUFBQTJuQixFQUFBemhDLFFBQUFpeUUsRUFBQVMsTUFJQWptRSxFQUFBOUgsT0FBQTJ0RSxFQUFBLFNBQUEzb0QsR0FDQSxHQUFBMGhCLEdBQUFtZCxXQUFBNytCLEdBQ0FvcEQsRUFBQTlwRSxNQUFBb2lDLEVBVUEsSUFSQTBuQyxHQUFBMW5DLElBQUFtbkMsS0FHQW5uQyxFQUFBMmIsRUFBQWdzQixVQUFBM25DLEVBQUFodUIsSUFLQWd1QixJQUFBZ25DLEtBQUFVLEdBQUFoeUUsRUFBQXN4RSxJQUFBcHBFLE1BQUFvcEUsSUFBQSxDQUNBTSxHQUNBLElBQUFNLEdBQUFSLEVBQUFwbkMsRUFDQS9tQyxHQUFBMnVFLElBQ0EsTUFBQXRwRCxHQUNBN08sRUFBQW8yQixNQUFBLHFDQUFBN0YsRUFBQSxRQUFBa25DLEdBRUFJLEVBQUEzdUUsRUFDQW11RSxLQUVBUSxFQUFBbG1FLEVBQUE5SCxPQUFBc3VFLEVBQUFkLEdBRUFFLEVBQUFobkMsU0FnVUF2MUIsSUFBQSxTQUFBLFdBQUEsU0FBQWtGLEVBQUF4QyxHQUNBLEdBQUEwNkQsR0FBQSxlQUNBQyxFQUFBL3pFLEVBQUEsWUFFQWcwRSxFQUFBLFNBQUEzbUUsRUFBQXZNLEVBQUFtekUsRUFBQXR4RSxFQUFBdXhFLEVBQUFseUUsRUFBQW15RSxHQUVBOW1FLEVBQUE0bUUsR0FBQXR4RSxFQUNBdXhFLElBQUE3bUUsRUFBQTZtRSxHQUFBbHlFLEdBQ0FxTCxFQUFBNG9ELE9BQUFuMUQsRUFDQXVNLEVBQUErbUUsT0FBQSxJQUFBdHpFLEVBQ0F1TSxFQUFBZ25FLE1BQUF2ekUsSUFBQXF6RSxFQUFBLEVBQ0E5bUUsRUFBQWluRSxVQUFBam5FLEVBQUErbUUsUUFBQS9tRSxFQUFBZ25FLE9BRUFobkUsRUFBQWtuRSxPQUFBbG5FLEVBQUFtbkUsTUFBQSxLQUFBLEVBQUExekUsS0FJQTJ6RSxFQUFBLFNBQUE1aEUsR0FDQSxNQUFBQSxHQUFBM08sTUFBQSxJQUdBd3dFLEVBQUEsU0FBQTdoRSxHQUNBLE1BQUFBLEdBQUEzTyxNQUFBMk8sRUFBQTNPLE1BQUFqRCxPQUFBLEdBSUEsUUFDQW13QixTQUFBLElBQ0FvSyxjQUFBLEVBQ0FySCxXQUFBLFVBQ0FqRCxTQUFBLElBQ0F5RCxVQUFBLEVBQ0F5RixPQUFBLEVBQ0E5c0IsUUFBQSxTQUFBc2tCLEVBQUF3RCxHQUNBLEdBQUFpTixHQUFBak4sRUFBQTNlLFNBQ0FrK0QsRUFBQTcwRSxFQUFBdTZCLGNBQUEsa0JBQUFnSSxFQUFBLEtBRUF4aEMsRUFBQXdoQyxFQUFBeGhDLE1BQUEsNkZBRUEsS0FBQUEsRUFDQSxLQUFBa3pFLEdBQUEsT0FBQSx5RkFDQTF4QyxFQUdBLElBQUEwakMsR0FBQWxsRSxFQUFBLEdBQ0FpbEUsRUFBQWpsRSxFQUFBLEdBQ0ErekUsRUFBQS96RSxFQUFBLEdBQ0FnMEUsRUFBQWgwRSxFQUFBLEVBSUEsSUFGQUEsRUFBQWtsRSxFQUFBbGxFLE1BQUEsMkRBRUFBLEVBQ0EsS0FBQWt6RSxHQUFBLFNBQUEsZ0hBQ0FoTyxFQUVBLElBQUFrTyxHQUFBcHpFLEVBQUEsSUFBQUEsRUFBQSxHQUNBcXpFLEVBQUFyekUsRUFBQSxFQUVBLElBQUErekUsS0FBQSw2QkFBQTV1RSxLQUFBNHVFLElBQ0EsNEZBQUE1dUUsS0FBQTR1RSxJQUNBLEtBQUFiLEdBQUEsV0FBQSx5RkFDQWEsRUFHQSxJQUFBRSxHQUFBQyxFQUFBQyxFQUFBQyxFQUNBQyxHQUFBaDVCLElBQUE1MkIsR0FhQSxPQVhBdXZELEdBQ0FDLEVBQUFsNUQsRUFBQWk1RCxJQUVBRyxFQUFBLFNBQUFoekUsRUFBQVcsR0FDQSxNQUFBMmlCLElBQUEzaUIsSUFFQXN5RSxFQUFBLFNBQUFqekUsR0FDQSxNQUFBQSxLQUlBLFNBQUFrMkIsRUFBQXRHLEVBQUF3RCxFQUFBeTZCLEVBQUF6M0IsR0FFQTA4QyxJQUNBQyxFQUFBLFNBQUEveUUsRUFBQVcsRUFBQTdCLEdBS0EsTUFIQW96RSxLQUFBZ0IsRUFBQWhCLEdBQUFseUUsR0FDQWt6RSxFQUFBakIsR0FBQXR4RSxFQUNBdXlFLEVBQUFqZixPQUFBbjFELEVBQ0FnMEUsRUFBQTU4QyxFQUFBZzlDLElBWUEsSUFBQUMsR0FBQS9zRSxJQUdBOHZCLEdBQUF5SCxpQkFBQW1tQyxFQUFBLFNBQUE5MUMsR0FDQSxHQUFBbHZCLEdBQUFHLEVBR0FtMEUsRUFJQUMsRUFDQXJ6RSxFQUFBVyxFQUNBMnlFLEVBQ0FDLEVBQ0FDLEVBQ0EzaUUsRUFDQTRpRSxFQUNBcjNDLEVBYkFzM0MsRUFBQTlqRCxFQUFBLEdBS0ErakQsRUFBQXZ0RSxJQWNBLElBSkF3c0UsSUFDQTE4QyxFQUFBMDhDLEdBQUE1a0QsR0FHQTV1QixFQUFBNHVCLEdBQ0F3bEQsRUFBQXhsRCxFQUNBdWxELEVBQUFSLEdBQUFDLE1BQ0EsQ0FDQU8sRUFBQVIsR0FBQUUsRUFFQU8sSUFDQSxLQUFBLEdBQUFqRyxLQUFBdi9DLEdBQ0E5dEIsR0FBQUMsS0FBQTZ0QixFQUFBdS9DLElBQUEsTUFBQUEsRUFBQTFuRSxPQUFBLElBQ0EydEUsRUFBQXJ1RSxLQUFBb29FLEdBU0EsSUFKQThGLEVBQUFHLEVBQUF2MEUsT0FDQXcwRSxFQUFBLEdBQUFwc0QsT0FBQWdzRCxHQUdBdjBFLEVBQUEsRUFBQXUwRSxFQUFBdjBFLEVBQUFBLElBSUEsR0FIQWtCLEVBQUFndUIsSUFBQXdsRCxFQUFBMTBFLEVBQUEwMEUsRUFBQTEwRSxHQUNBNkIsRUFBQXF0QixFQUFBaHVCLEdBQ0FzekUsRUFBQUMsRUFBQXZ6RSxFQUFBVyxFQUFBN0IsR0FDQXEwRSxFQUFBRyxHQUVBemlFLEVBQUFzaUUsRUFBQUcsU0FDQUgsR0FBQUcsR0FDQUssRUFBQUwsR0FBQXppRSxFQUNBNGlFLEVBQUEzMEUsR0FBQStSLE1BQ0EsQ0FBQSxHQUFBOGlFLEVBQUFMLEdBS0EsS0FIQXp6RSxHQUFBNHpFLEVBQUEsU0FBQTVpRSxHQUNBQSxHQUFBQSxFQUFBeEYsUUFBQThuRSxFQUFBdGlFLEVBQUErYixJQUFBL2IsS0FFQWtoRSxFQUFBLFFBQ0Esc0pBQ0ExeEMsRUFBQWl6QyxFQUFBM3lFLEVBR0E4eUUsR0FBQTMwRSxJQUFBOHRCLEdBQUEwbUQsRUFBQWpvRSxNQUFBdE4sRUFBQW1FLE1BQUFuRSxHQUNBNDFFLEVBQUFMLElBQUEsRUFLQSxJQUFBLEdBQUFNLEtBQUFULEdBQUEsQ0FJQSxHQUhBdGlFLEVBQUFzaUUsRUFBQVMsR0FDQXgzQyxFQUFBMXRCLEdBQUFtQyxFQUFBM08sT0FDQWtWLEVBQUEya0QsTUFBQTMvQixHQUNBQSxFQUFBLEdBQUExYixXQUdBLElBQUE1aEIsRUFBQSxFQUFBRyxFQUFBbTlCLEVBQUFuOUIsT0FBQUEsRUFBQUgsRUFBQUEsSUFDQXM5QixFQUFBdDlCLEdBQUFnekUsSUFBQSxDQUdBamhFLEdBQUF4RixNQUFBdUMsV0FJQSxJQUFBOU8sRUFBQSxFQUFBdTBFLEVBQUF2MEUsRUFBQUEsSUFLQSxHQUpBa0IsRUFBQWd1QixJQUFBd2xELEVBQUExMEUsRUFBQTAwRSxFQUFBMTBFLEdBQ0E2QixFQUFBcXRCLEVBQUFodUIsR0FDQTZRLEVBQUE0aUUsRUFBQTMwRSxHQUVBK1IsRUFBQXhGLE1BQUEsQ0FJQStuRSxFQUFBTSxDQUdBLEdBQ0FOLEdBQUFBLEVBQUF0a0Usa0JBQ0Fza0UsR0FBQUEsRUFBQXRCLEdBRUFXLEdBQUE1aEUsSUFBQXVpRSxHQUVBaDhELEVBQUEwa0QsS0FBQXB0RCxHQUFBbUMsRUFBQTNPLE9BQUEsS0FBQXpDLEdBQUFpMEUsSUFFQUEsRUFBQWhCLEVBQUE3aEUsR0FDQW1oRSxFQUFBbmhFLEVBQUF4RixNQUFBdk0sRUFBQW16RSxFQUFBdHhFLEVBQUF1eEUsRUFBQWx5RSxFQUFBcXpFLE9BR0FqOUMsR0FBQSxTQUFBbDBCLEVBQUFtSixHQUNBd0YsRUFBQXhGLE1BQUFBLENBRUEsSUFBQXdELEdBQUE4akUsRUFBQTN3RSxXQUFBLEVBQ0FFLEdBQUFBLEVBQUFqRCxVQUFBNFAsRUFHQXVJLEVBQUF5a0QsTUFBQTM1RCxFQUFBLEtBQUF6QyxHQUFBaTBFLElBQ0FBLEVBQUE3a0UsRUFJQWdDLEVBQUEzTyxNQUFBQSxFQUNBeXhFLEVBQUE5aUUsRUFBQStiLElBQUEvYixFQUNBbWhFLEVBQUFuaEUsRUFBQXhGLE1BQUF2TSxFQUFBbXpFLEVBQUF0eEUsRUFBQXV4RSxFQUFBbHlFLEVBQUFxekUsSUFJQUYsR0FBQVEsU0FPQUUsR0FBQSxVQUNBQyxHQUFBLGtCQTRKQWwvRCxJQUFBLFdBQUEsU0FBQXdDLEdBQ0EsT0FDQWdZLFNBQUEsSUFDQW9LLGNBQUEsRUFDQW5OLEtBQUEsU0FBQWhoQixFQUFBNUcsRUFBQU4sR0FDQWtILEVBQUE5SCxPQUFBWSxFQUFBd1EsT0FBQSxTQUFBaFUsR0FLQXlXLEVBQUF6VyxFQUFBLGNBQUEsWUFBQThELEVBQUFvdkUsSUFDQTNYLFlBQUE0WCxXQXNKQWhnRSxJQUFBLFdBQUEsU0FBQXNELEdBQ0EsT0FDQWdZLFNBQUEsSUFDQW9LLGNBQUEsRUFDQW5OLEtBQUEsU0FBQWhoQixFQUFBNUcsRUFBQU4sR0FDQWtILEVBQUE5SCxPQUFBWSxFQUFBMFAsT0FBQSxTQUFBbFQsR0FHQXlXLEVBQUF6VyxFQUFBLFdBQUEsZUFBQThELEVBQUFvdkUsSUFDQTNYLFlBQUE0WCxXQXFEQWgvRCxHQUFBczNDLEdBQUEsU0FBQS9nRCxFQUFBNUcsRUFBQU4sR0FDQWtILEVBQUE5SCxPQUFBWSxFQUFBMFEsUUFBQSxTQUFBay9ELEVBQUFDLEdBQ0FBLEdBQUFELElBQUFDLEdBQ0FuMEUsRUFBQW0wRSxFQUFBLFNBQUEvc0UsRUFBQXNMLEdBQUE5TixFQUFBcXpELElBQUF2bEQsRUFBQSxNQUVBd2hFLEdBQUF0dkUsRUFBQXF6RCxJQUFBaWMsS0FDQSxLQWtJQS8rRCxJQUFBLFdBQUEsU0FBQW9DLEdBQ0EsT0FDQStYLFFBQUEsV0FHQS9oQixZQUFBLFNBQUEsV0FDQTBELEtBQUFtakUsV0FFQTVuRCxLQUFBLFNBQUFoaEIsRUFBQTVHLEVBQUFOLEVBQUErdkUsR0FDQSxHQUFBQyxHQUFBaHdFLEVBQUE0USxVQUFBNVEsRUFBQThJLEdBQ0FtbkUsS0FDQUMsS0FDQUMsS0FDQUMsS0FFQUMsRUFBQSxTQUFBNXZFLEVBQUE5RixHQUNBLE1BQUEsWUFBQThGLEVBQUFFLE9BQUFoRyxFQUFBLElBR0F1TSxHQUFBOUgsT0FBQTR3RSxFQUFBLFNBQUF4ekUsR0FDQSxHQUFBdEMsR0FBQWdELENBQ0EsS0FBQWhELEVBQUEsRUFBQWdELEVBQUFpekUsRUFBQXIxRSxPQUFBb0MsRUFBQWhELElBQUFBLEVBQ0ErWSxFQUFBd1UsT0FBQTBvRCxFQUFBajJFLEdBSUEsS0FGQWkyRSxFQUFBcjFFLE9BQUEsRUFFQVosRUFBQSxFQUFBZ0QsRUFBQWt6RSxFQUFBdDFFLE9BQUFvQyxFQUFBaEQsSUFBQUEsRUFBQSxDQUNBLEdBQUErMkQsR0FBQTFtRCxHQUFBMmxFLEVBQUFoMkUsR0FBQTZELE1BQ0FxeUUsR0FBQWwyRSxHQUFBdVAsVUFDQSxJQUFBZzNCLEdBQUEwdkMsRUFBQWoyRSxHQUFBK1ksRUFBQTJrRCxNQUFBM0csRUFDQXh3QixHQUFBL2dDLEtBQUEyd0UsRUFBQUYsRUFBQWoyRSxJQUdBZzJFLEVBQUFwMUUsT0FBQSxFQUNBczFFLEVBQUF0MUUsT0FBQSxHQUVBbTFFLEVBQUFGLEVBQUFELE1BQUEsSUFBQXR6RSxJQUFBdXpFLEVBQUFELE1BQUEsT0FDQXAwRSxFQUFBdTBFLEVBQUEsU0FBQUssR0FDQUEsRUFBQXRpRCxXQUFBLFNBQUF1aUQsRUFBQUMsR0FDQUosRUFBQXB2RSxLQUFBd3ZFLEVBQ0EsSUFBQUMsR0FBQUgsRUFBQWh3RSxPQUNBaXdFLEdBQUFBLEVBQUF6MUUsVUFBQW5CLEVBQUF1NkIsY0FBQSxzQkFDQSxJQUFBeG5CLElBQUEzTyxNQUFBd3lFLEVBRUFMLEdBQUFsdkUsS0FBQTBMLEdBQ0F1RyxFQUFBeWtELE1BQUE2WSxFQUFBRSxFQUFBbnlFLFNBQUFteUUsYUFTQTEvRCxHQUFBazNDLElBQ0FqNkIsV0FBQSxVQUNBakQsU0FBQSxLQUNBQyxRQUFBLFlBQ0FxSyxjQUFBLEVBQ0FuTixLQUFBLFNBQUFoaEIsRUFBQTVHLEVBQUE0dEIsRUFBQXc3QixFQUFBejNCLEdBQ0F5M0IsRUFBQW9tQixNQUFBLElBQUE1aEQsRUFBQXBkLGNBQUE0NEMsRUFBQW9tQixNQUFBLElBQUE1aEQsRUFBQXBkLGtCQUNBNDRDLEVBQUFvbUIsTUFBQSxJQUFBNWhELEVBQUFwZCxjQUFBOVAsTUFBQWd0QixXQUFBaUUsRUFBQTN4QixRQUFBQSxPQUlBMlEsR0FBQWczQyxJQUNBajZCLFdBQUEsVUFDQWpELFNBQUEsS0FDQUMsUUFBQSxZQUNBcUssY0FBQSxFQUNBbk4sS0FBQSxTQUFBaGhCLEVBQUE1RyxFQUFBTixFQUFBMHBELEVBQUF6M0IsR0FDQXkzQixFQUFBb21CLE1BQUEsS0FBQXBtQixFQUFBb21CLE1BQUEsU0FDQXBtQixFQUFBb21CLE1BQUEsS0FBQTl1RSxNQUFBZ3RCLFdBQUFpRSxFQUFBM3hCLFFBQUFBLE9BMERBK1EsR0FBQTQyQyxJQUNBaDlCLFNBQUEsTUFDQS9DLEtBQUEsU0FBQTZKLEVBQUF0RyxFQUFBdUcsRUFBQS9vQixFQUFBZ3BCLEdBQ0EsSUFBQUEsRUFDQSxLQUFBcDRCLEdBQUEsZ0JBQUEsU0FDQSw4SEFHQXVLLEVBQUFxbkIsR0FHQXdHLEdBQUEsU0FBQWwwQixHQUNBMHRCLEVBQUFwbkIsUUFDQW9uQixFQUFBam5CLE9BQUF6RyxRQXNDQWtRLElBQUEsaUJBQUEsU0FBQXNJLEdBQ0EsT0FDQTBVLFNBQUEsSUFDQXVELFVBQUEsRUFDQXJuQixRQUFBLFNBQUE3RyxFQUFBTixHQUNBLEdBQUEsb0JBQUFBLEVBQUEwYSxLQUFBLENBQ0EsR0FBQTBZLEdBQUFwekIsRUFBQXlvQixHQUNBbU8sRUFBQXQyQixFQUFBLEdBQUFzMkIsSUFFQXJnQixHQUFBaUosSUFBQTRULEVBQUF3RCxRQU1BODVDLElBQUEzbEIsY0FBQXRzRCxFQUFBMHNELFFBQUExc0QsR0FtQkFreUUsSUFDQSxXQUFBLFNBQUEsU0FBQSxTQUFBbGxELEVBQUFzRyxFQUFBQyxHQUVBLEdBQUF2dkIsR0FBQWtLLEtBQ0Fpa0UsRUFBQSxHQUFBdHhELEdBR0E3YyxHQUFBc3BFLFlBQUEyRSxHQVFBanVFLEVBQUEyb0UsY0FBQTl2RSxHQUFBM0IsRUFBQXFmLGNBQUEsV0FDQXZXLEVBQUEwcEUsb0JBQUEsU0FBQXJwRSxHQUNBLEdBQUErdEUsR0FBQSxLQUFBMXhELEdBQUFyYyxHQUFBLElBQ0FMLEdBQUEyb0UsY0FBQXRvRSxJQUFBK3RFLEdBQ0FwbEQsRUFBQW1wQyxRQUFBbnlELEVBQUEyb0UsZUFDQTMvQyxFQUFBM29CLElBQUErdEUsSUFHQTkrQyxFQUFBZ0IsSUFBQSxXQUFBLFdBRUF0d0IsRUFBQTBwRSxvQkFBQTF0RSxJQUdBZ0UsRUFBQTJwRSxvQkFBQSxXQUNBM3BFLEVBQUEyb0UsY0FBQTlzRSxVQUFBbUUsRUFBQTJvRSxjQUFBcmlELFVBTUF0bUIsRUFBQStvRSxVQUFBLFdBRUEsTUFEQS9vRSxHQUFBMnBFLHNCQUNBM2dELEVBQUEzb0IsT0FNQUwsRUFBQTRwRSxXQUFBLFNBQUE3dkUsR0FDQWlHLEVBQUFxdUUsVUFBQXQwRSxJQUNBaUcsRUFBQTJwRSxzQkFDQTNnRCxFQUFBM29CLElBQUF0RyxHQUNBLEtBQUFBLEdBQUFpRyxFQUFBeW9FLFlBQUFuckUsS0FBQSxZQUFBLElBRUEsTUFBQXZELEdBQUFpRyxFQUFBeW9FLGFBQ0F6b0UsRUFBQTJwRSxzQkFDQTNnRCxFQUFBM29CLElBQUEsS0FFQUwsRUFBQTBwRSxvQkFBQTN2RSxJQU9BaUcsRUFBQXN1RSxVQUFBLFNBQUF2MEUsRUFBQThELEdBQ0EySixHQUFBek4sRUFBQSxrQkFDQSxLQUFBQSxJQUNBaUcsRUFBQXlvRSxZQUFBNXFFLEVBRUEsSUFBQXdsQyxHQUFBOHFDLEVBQUEzb0UsSUFBQXpMLElBQUEsQ0FDQW8wRSxHQUFBcHhELElBQUFoakIsRUFBQXNwQyxFQUFBLEdBQ0FyakMsRUFBQXNwRSxZQUFBNWdCLFVBQ0E0RixHQUFBendELElBSUFtQyxFQUFBdXVFLGFBQUEsU0FBQXgwRSxHQUNBLEdBQUFzcEMsR0FBQThxQyxFQUFBM29FLElBQUF6TCxFQUNBc3BDLEtBQ0EsSUFBQUEsR0FDQThxQyxFQUFBN25ELE9BQUF2c0IsR0FDQSxLQUFBQSxJQUNBaUcsRUFBQXlvRSxZQUFBdHhFLElBR0FnM0UsRUFBQXB4RCxJQUFBaGpCLEVBQUFzcEMsRUFBQSxLQU1BcmpDLEVBQUFxdUUsVUFBQSxTQUFBdDBFLEdBQ0EsUUFBQW8wRSxFQUFBM29FLElBQUF6TCxJQUlBaUcsRUFBQWdxRSxlQUFBLFNBQUF3RSxFQUFBamdCLEVBQUFrZ0IsRUFBQUMsRUFBQUMsR0FFQSxHQUFBRCxFQUFBLENBRUEsR0FBQTlzRCxFQUNBNnNELEdBQUFqNEMsU0FBQSxRQUFBLFNBQUE3VSxHQUNBcGxCLEVBQUFxbEIsSUFDQTVoQixFQUFBdXVFLGFBQUEzc0QsR0FFQUEsRUFBQUQsRUFDQTNoQixFQUFBc3VFLFVBQUEzc0QsRUFBQTRzQyxTQUVBb2dCLEdBRUFILEVBQUE3eEUsT0FBQWd5RSxFQUFBLFNBQUFodEQsRUFBQUMsR0FDQTZzRCxFQUFBMTdDLEtBQUEsUUFBQXBSLEdBQ0FDLElBQUFELEdBQ0EzaEIsRUFBQXV1RSxhQUFBM3NELEdBRUE1aEIsRUFBQXN1RSxVQUFBM3NELEVBQUE0c0MsS0FJQXZ1RCxFQUFBc3VFLFVBQUFHLEVBQUExMEUsTUFBQXcwRCxFQUdBQSxHQUFBbG9ELEdBQUEsV0FBQSxXQUNBckcsRUFBQXV1RSxhQUFBRSxFQUFBMTBFLE9BQ0FpRyxFQUFBc3BFLFlBQUE1Z0IsZUFpTkFoOUMsR0FBQSxXQVlBLFFBQUFrakUsR0FBQW5xRSxFQUFBNUcsRUFBQU4sRUFBQTJpRSxHQUdBLEdBQUFvSixHQUFBcEosRUFBQSxFQUNBLElBQUFvSixFQUFBLENBRUEsR0FBQVIsR0FBQTVJLEVBQUEsRUF3QkEsSUF0QkE0SSxFQUFBUSxZQUFBQSxFQUtBQSxFQUFBNWdCLFFBQUEsV0FDQW9nQixFQUFBYyxXQUFBTixFQUFBbGhCLGFBTUF2cUQsRUFBQXdJLEdBQUEsU0FBQSxXQUNBNUIsRUFBQUUsT0FBQSxXQUNBMmtFLEVBQUFoaEIsY0FBQXdnQixFQUFBQyxpQkFRQXhyRSxFQUFBazBELFNBQUEsQ0FHQXFYLEVBQUFDLFVBQUEsV0FDQSxHQUFBL3FFLEtBTUEsT0FMQS9FLEdBQUE0RSxFQUFBTCxLQUFBLFVBQUEsU0FBQXFPLEdBQ0FBLEVBQUEyaUQsVUFDQXh3RCxFQUFBTyxLQUFBc04sRUFBQTlSLFNBR0FpRSxHQUlBOHFFLEVBQUFjLFdBQUEsU0FBQTd2RSxHQUNBLEdBQUEyRCxHQUFBLEdBQUFtZixJQUFBOWlCLEVBQ0FkLEdBQUE0RSxFQUFBTCxLQUFBLFVBQUEsU0FBQXFPLEdBQ0FBLEVBQUEyaUQsU0FBQWp5RCxFQUFBbUIsRUFBQThILElBQUFxRyxFQUFBOVIsVUFNQSxJQUFBODBFLEdBQUFDLEVBQUF4bEIsR0FDQTdrRCxHQUFBOUgsT0FBQSxXQUNBbXlFLElBQUF4RixFQUFBbGhCLFlBQUFscEQsRUFBQTJ2RSxFQUFBdkYsRUFBQWxoQixjQUNBeW1CLEVBQUE3dkUsRUFBQXNxRSxFQUFBbGhCLFlBQ0FraEIsRUFBQTVnQixXQUVBb21CLEVBQUF4RixFQUFBbGhCLGFBS0FraEIsRUFBQXhoQixTQUFBLFNBQUEvdEQsR0FDQSxPQUFBQSxHQUFBLElBQUFBLEVBQUExQixVQTNFQSxPQUNBbXdCLFNBQUEsSUFDQUQsU0FBQSxTQUFBLFlBQ0EvaEIsV0FBQTBuRSxHQUNBNWxELFNBQUEsRUFDQTdDLE1BQ0FpSixJQUFBa2dELEtBZ0ZBOWlFLElBQUEsZUFBQSxTQUFBZ0csR0FDQSxPQUNBMFcsU0FBQSxJQUNBRixTQUFBLElBQ0E1akIsUUFBQSxTQUFBN0csRUFBQU4sR0FFQSxHQUFBaEIsRUFBQWdCLEVBQUF4RCxPQUVBLEdBQUEyMEUsR0FBQTU4RCxFQUFBdlUsRUFBQXhELE9BQUEsT0FDQSxDQUdBLEdBQUE0MEUsR0FBQTc4RCxFQUFBalUsRUFBQXMyQixRQUFBLEVBQ0F3NkMsSUFDQXB4RSxFQUFBdzFCLEtBQUEsUUFBQWwxQixFQUFBczJCLFFBSUEsTUFBQSxVQUFBMXZCLEVBQUE1RyxFQUFBTixHQUlBLEdBQUF3eEUsR0FBQSxvQkFDQWx6RSxFQUFBZ0MsRUFBQWhDLFNBQ0FpdEUsRUFBQWp0RSxFQUFBK0ksS0FBQW1xRSxJQUNBbHpFLEVBQUFBLFNBQUErSSxLQUFBbXFFLEVBRUFqRyxJQUNBQSxFQUFBa0IsZUFBQXZsRSxFQUFBNUcsRUFBQU4sRUFBQW14RSxFQUFBQyxRQU9BL2lFLEdBQUF6UCxHQUNBcXNCLFNBQUEsSUFDQXVELFVBQUEsSUFHQXhjLEdBQUEsV0FDQSxPQUNBaVosU0FBQSxJQUNBRCxRQUFBLFdBQ0E5QyxLQUFBLFNBQUFoaEIsRUFBQStjLEVBQUFqa0IsRUFBQTBwRCxHQUNBQSxJQUNBMXBELEVBQUErUixVQUFBLEVBRUEyM0MsRUFBQStELFlBQUExN0MsU0FBQSxTQUFBczhDLEVBQUFDLEdBQ0EsT0FBQXR1RCxFQUFBK1IsV0FBQTIzQyxFQUFBYSxTQUFBK0QsSUFHQXR1RCxFQUFBaTVCLFNBQUEsV0FBQSxXQUNBeXdCLEVBQUFnRSxrQkFPQTc3QyxHQUFBLFdBQ0EsT0FDQW9aLFNBQUEsSUFDQUQsUUFBQSxXQUNBOUMsS0FBQSxTQUFBaGhCLEVBQUErYyxFQUFBamtCLEVBQUEwcEQsR0FDQSxHQUFBQSxFQUFBLENBRUEsR0FBQXIrQixHQUFBb21ELEVBQUF6eEUsRUFBQThSLFdBQUE5UixFQUFBNFIsT0FDQTVSLEdBQUFpNUIsU0FBQSxVQUFBLFNBQUE0aEIsR0FLQSxHQUpBeC9DLEVBQUF3L0MsSUFBQUEsRUFBQS8vQyxPQUFBLElBQ0ErL0MsRUFBQSxHQUFBbDlDLFFBQUEsSUFBQWs5QyxFQUFBLE1BR0FBLElBQUFBLEVBQUFoN0MsS0FDQSxLQUFBaEcsR0FBQSxhQUFBLFdBQ0Esd0RBQUE0M0UsRUFDQTUyQixFQUFBejJDLEVBQUE2ZixHQUdBb0gsR0FBQXd2QixHQUFBamhELEVBQ0E4dkQsRUFBQWdFLGNBR0FoRSxFQUFBK0QsWUFBQTc3QyxRQUFBLFNBQUF5OEMsRUFBQUMsR0FFQSxNQUFBNUUsR0FBQWEsU0FBQStELElBQUF2dkQsRUFBQXNzQixJQUFBQSxFQUFBeHJCLEtBQUF5dUQsUUFPQWg4QyxHQUFBLFdBQ0EsT0FDQTJZLFNBQUEsSUFDQUQsUUFBQSxXQUNBOUMsS0FBQSxTQUFBaGhCLEVBQUErYyxFQUFBamtCLEVBQUEwcEQsR0FDQSxHQUFBQSxFQUFBLENBRUEsR0FBQXIzQyxHQUFBLEVBQ0FyUyxHQUFBaTVCLFNBQUEsWUFBQSxTQUFBejhCLEdBQ0EsR0FBQWsxRSxHQUFBeHpFLEVBQUExQixFQUNBNlYsR0FBQTNPLE1BQUFndUUsR0FBQSxHQUFBQSxFQUNBaG9CLEVBQUFnRSxjQUVBaEUsRUFBQStELFlBQUFwN0MsVUFBQSxTQUFBZzhDLEVBQUFDLEdBQ0EsTUFBQSxHQUFBajhDLEdBQUFxM0MsRUFBQWEsU0FBQStELElBQUFBLEVBQUF4ekQsUUFBQXVYLE9BTUFGLEdBQUEsV0FDQSxPQUNBOFksU0FBQSxJQUNBRCxRQUFBLFdBQ0E5QyxLQUFBLFNBQUFoaEIsRUFBQStjLEVBQUFqa0IsRUFBQTBwRCxHQUNBLEdBQUFBLEVBQUEsQ0FFQSxHQUFBeDNDLEdBQUEsQ0FDQWxTLEdBQUFpNUIsU0FBQSxZQUFBLFNBQUF6OEIsR0FDQTBWLEVBQUFoVSxFQUFBMUIsSUFBQSxFQUNBa3RELEVBQUFnRSxjQUVBaEUsRUFBQStELFlBQUF2N0MsVUFBQSxTQUFBbThDLEVBQUFDLEdBQ0EsTUFBQTVFLEdBQUFhLFNBQUErRCxJQUFBQSxFQUFBeHpELFFBQUFvWCxNQU1BLE9BQUF4WSxHQUFBOE4sUUFBQTFCLGNBRUFtbUMsU0FBQUUsSUFBQSxtREFNQTNqQyxLQUVBc0UsR0FBQXRGLElBRUFBLEdBQUExTixPQUFBLGVBQUEsV0FBQSxTQUFBK00sR0FFQSxRQUFBOHFFLEdBQUExcEQsR0FDQUEsR0FBQSxFQUNBLElBQUEvdEIsR0FBQSt0QixFQUFBdm5CLFFBQUEsSUFDQSxPQUFBLElBQUF4RyxFQUFBLEVBQUErdEIsRUFBQW50QixPQUFBWixFQUFBLEVBR0EsUUFBQTAzRSxHQUFBM3BELEVBQUE0cEQsR0FDQSxHQUFBcDFDLEdBQUFvMUMsQ0FFQWo0RSxLQUFBNmlDLElBQ0FBLEVBQUExSCxLQUFBb3VCLElBQUF3dUIsRUFBQTFwRCxHQUFBLEdBR0EsSUFBQXFoQixHQUFBdlUsS0FBQSs4QyxJQUFBLEdBQUFyMUMsR0FDQTg4QixHQUFBdHhDLEVBQUFxaEIsRUFBQSxHQUFBQSxDQUNBLFFBQUE3TSxFQUFBQSxFQUFBODhCLEVBQUFBLEdBaEJBLEdBQUF3WSxJQUFBQyxLQUFBLE9BQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLEtBQUEsT0FBQUMsTUFBQSxRQW1CQXhyRSxHQUFBckssTUFBQSxXQUNBbXFELGtCQUNBcEIsT0FDQSxLQUNBLE1BRUErc0IsS0FDQSxTQUNBLFNBQ0EsVUFDQSxZQUNBLFdBQ0EsU0FDQSxZQUVBM3NCLFVBQ0EsZ0JBQ0EsZUFFQUYsTUFDQSxLQUNBLE1BRUE4c0IsZUFBQSxFQUNBQyxPQUNBLFVBQ0EsV0FDQSxRQUNBLFFBQ0EsTUFDQSxPQUNBLE9BQ0EsU0FDQSxZQUNBLFVBQ0EsV0FDQSxZQUVBQyxVQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE9BRUFDLFlBQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE9BRUFDLGNBQ0EsRUFDQSxHQUVBQyxTQUFBLGtCQUNBQyxTQUFBLFlBQ0FDLE9BQUEscUJBQ0FDLFdBQUEsV0FDQUMsV0FBQSxZQUNBQyxRQUFBLGdCQUNBQyxVQUFBLFNBQ0FDLFVBQUEsVUFFQXh4QixnQkFDQUksYUFBQSxJQUNBSyxZQUFBLElBQ0FELFVBQUEsSUFDQUgsV0FFQTBCLE1BQUEsRUFDQUYsT0FBQSxFQUNBdkIsUUFBQSxFQUNBbUIsUUFBQSxFQUNBZ3dCLE9BQUEsRUFDQXp2QixPQUFBLElBQ0FFLE9BQUEsR0FDQUQsT0FBQSxHQUNBRSxPQUFBLEtBR0FKLE1BQUEsRUFDQUYsT0FBQSxFQUNBdkIsUUFBQSxFQUNBbUIsUUFBQSxFQUNBZ3dCLE9BQUEsRUFDQXp2QixPQUFBLEtBQ0FFLE9BQUEsR0FDQUQsT0FBQSxJQUNBRSxPQUFBLE1BSUFyN0IsR0FBQSxRQUNBZ2xELFVBQUEsU0FBQXhsRCxFQUFBNHBELEdBQUEsR0FBQTMzRSxHQUFBLEVBQUErdEIsRUFBQW9yRCxFQUFBekIsRUFBQTNwRCxFQUFBNHBELEVBQUEsT0FBQSxJQUFBMzNFLEdBQUEsR0FBQW01RSxFQUFBNTJDLEVBQUFzMUMsRUFBQUUsSUFBQUYsRUFBQU0sZ0JBSUEvMkUsSUFBQTNCLEdBQUEyNUQsTUFBQSxXQUNBenRELEdBQUFsTSxFQUFBbU0sUUFHQXBNLE9BQUFDLFdBRUFELE9BQUE4TixRQUFBMkYsUUFBQXlrRCxlQUFBbDRELE9BQUE4TixRQUFBbEgsUUFBQTNHLFNBQUEyNUUsTUFBQTFlLFFBQUEsa1JDbjE0QkEsbUJBQUE5NkQsU0FBQSxtQkFBQXk1RSxVQUFBejVFLE9BQUF5NUUsVUFBQUEsVUFBQXo1RSxPQUFBeTVFLFFBQUEsYUFBQSxTQUFBOWxFLEVBQUE4VyxFQUFBaTdDLEdBQUEsWUFBQSxTQUFBamhDLEdBQUE5d0IsRUFBQThXLEdBQUEsTUFBQWl2RCxHQUFBLElBQUFBLEVBQUEsY0FBQTd3RCxVQUFBbFYsS0FBQThXLEdBQUEsUUFBQWpnQixHQUFBbUosR0FBQSxNQUFBNHpELEdBQUFobkUsVUFBQSxTQUFBa3FCLEdBQUFBLElBQUE5VyxHQUFBNHpELEVBQUE5OEMsRUFBQSxTQUFBQSxFQUFBaTdDLEdBQUEveEQsRUFBQTFSLGVBQUF5akUsS0FBQS94RCxFQUFBK3hELEdBQUFqN0MsT0FBQTlXLEVBQUEsUUFBQThyRCxHQUFBOXJELEVBQUE4VyxHQUFBLEdBQUFpN0MsS0FBQSxLQUFBLEdBQUFqaEMsS0FBQTl3QixHQUFBdEQsS0FBQSxDQUFBLEdBQUFzRCxFQUFBdEQsS0FBQW8wQixLQUFBaGEsRUFBQXBhLEtBQUFvMEIsR0FBQSxLQUFBaWhDLEdBQUF4K0QsS0FBQXlNLEVBQUF0RCxLQUFBbzBCLElBQUEsTUFBQWloQyxHQUFBLFFBQUFpVSxHQUFBaG1FLEdBQUEsR0FBQWxTLE9BQUFhLEtBQUEsTUFBQWIsUUFBQWEsS0FBQXFSLEVBQUEsSUFBQThXLEtBQUEsT0FBQTg4QyxHQUFBNXpELEVBQUEsU0FBQUEsRUFBQSt4RCxHQUFBajdDLEVBQUF2akIsS0FBQXcrRCxLQUFBajdDLEVBQUEsUUFBQTNuQixHQUFBNlEsRUFBQThXLEdBQUEsR0FBQXJCLE1BQUFQLFVBQUFqaUIsUUFBQSxNQUFBK00sR0FBQS9NLFFBQUE2akIsRUFBQW9FLE9BQUF0dUIsVUFBQSxLQUFBLEVBQUEsSUFBQW1sRSxHQUFBL3hELEVBQUEzUyxTQUFBLEVBQUF5akMsRUFBQTVWLE9BQUF0dUIsVUFBQSxLQUFBLENBQUEsS0FBQWtrQyxFQUFBLEVBQUFBLEVBQUF4SixLQUFBMitDLEtBQUFuMUMsR0FBQXhKLEtBQUEyRixNQUFBNkQsR0FBQSxFQUFBQSxJQUFBQSxHQUFBaWhDLEdBQUFBLEVBQUFqaEMsRUFBQUEsSUFBQSxHQUFBQSxJQUFBOXdCLElBQUFBLEVBQUE4d0IsS0FBQWhhLEVBQUEsTUFBQWdhLEVBQUEsT0FBQSxHQUFBLFFBQUFya0MsR0FBQXVULEVBQUE4VyxFQUFBaTdDLEVBQUFqaEMsR0FBQSxHQUFBajZCLEdBQUFwSyxFQUFBcS9ELEVBQUFpRyxFQUFBamhDLEdBQUFuaEMsS0FBQXE3QixJQUFBLEtBQUEsR0FBQWplLEtBQUF0Z0IsR0FBQSxHQUFBQSxFQUFBc2dCLEdBQUFtaUIsU0FBQXI0QixFQUFBbXZFLEVBQUF2NUUsRUFBQXNnQixHQUFBbWlCLFFBQUFyNEIsRUFBQXhKLFFBQUEsSUFBQSxHQUFBeXJELEtBQUFqaUQsR0FBQTFILEVBQUE2N0IsRUFBQW4wQixFQUFBaWlELEtBQUEsSUFBQTl0QixFQUFBejNCLEtBQUFzRCxFQUFBaWlELElBQUFucEQsRUFBQWtILEVBQUFpaUQsSUFBQTk0QyxFQUFBbkosRUFBQWlpRCxJQUFBLE9BQUFpdEIsTUFBQXAyRSxFQUFBbW5CLEdBQUEsUUFBQW5uQixHQUFBcVEsRUFBQThXLEVBQUFpN0MsR0FBQSxJQUFBQSxFQUFBLENBQUFBLElBQUEsS0FBQSxHQUFBamhDLEtBQUE5d0IsR0FBQSt4RCxFQUFBeCtELEtBQUF1OUIsR0FBQSxJQUFBLEdBQUFqNkIsR0FBQSxFQUFBQSxFQUFBazdELEVBQUExa0UsT0FBQXdKLElBQUEsQ0FBQSxHQUFBaTFELEdBQUFpRyxFQUFBbDdELEVBQUEsSUFBQW1KLEVBQUE4ckQsSUFBQWgxQyxFQUFBZzFDLEdBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxRQUFBOWdDLEdBQUFockIsRUFBQThXLEdBQUEsR0FBQWk3QyxLQUFBLE9BQUE2QixHQUFBNXpELEVBQUEsU0FBQUEsR0FBQSt4RCxFQUFBL3hELEdBQUE4VyxFQUFBOVcsS0FBQSt4RCxFQUFBLFFBQUFobEQsR0FBQS9NLEdBQUEsR0FBQThXLE1BQUFpN0MsRUFBQXQ4QyxNQUFBUCxVQUFBemdCLE9BQUFVLE1BQUFzZ0IsTUFBQVAsVUFBQU8sTUFBQVAsVUFBQS9uQixNQUFBb0IsS0FBQTNCLFVBQUEsR0FBQSxPQUFBZ25FLEdBQUE3QixFQUFBLFNBQUFBLEdBQUFBLElBQUEveEQsS0FBQThXLEVBQUFpN0MsR0FBQS94RCxFQUFBK3hELE1BQUFqN0MsRUFBQSxRQUFBZ2lDLEdBQUE5NEMsR0FBQSxHQUFBOFcsTUFBQWk3QyxFQUFBdDhDLE1BQUFQLFVBQUF6Z0IsT0FBQVUsTUFBQXNnQixNQUFBUCxVQUFBTyxNQUFBUCxVQUFBL25CLE1BQUFvQixLQUFBM0IsVUFBQSxHQUFBLEtBQUEsR0FBQWtrQyxLQUFBOXdCLEdBQUEsSUFBQTdRLEVBQUE0aUUsRUFBQWpoQyxLQUFBaGEsRUFBQWdhLEdBQUE5d0IsRUFBQTh3QixHQUFBLE9BQUFoYSxHQUFBLFFBQUEwRCxHQUFBeGEsRUFBQThXLEdBQUEsR0FBQWk3QyxHQUFBbVUsRUFBQWxtRSxHQUFBOHdCLEVBQUFpaEMsT0FBQSxPQUFBNkIsR0FBQTV6RCxFQUFBLFNBQUFBLEVBQUFuSixHQUFBaWdCLEVBQUE5VyxFQUFBbkosS0FBQWk2QixFQUFBaWhDLEVBQUFqaEMsRUFBQXpqQyxPQUFBd0osR0FBQW1KLEtBQUE4d0IsRUFBQSxRQUFBcTFDLEdBQUFubUUsRUFBQThXLEdBQUEsR0FBQWk3QyxHQUFBbVUsRUFBQWxtRSxRQUFBLE9BQUE0ekQsR0FBQTV6RCxFQUFBLFNBQUFBLEVBQUE4d0IsR0FBQWloQyxFQUFBamhDLEdBQUFoYSxFQUFBOVcsRUFBQTh3QixLQUFBaWhDLEVBQUEsUUFBQXIzQyxHQUFBMWEsRUFBQThXLEdBQUEsR0FBQWdhLEdBQUEsRUFBQWc3QixFQUFBLEVBQUFyL0QsS0FBQWtELEtBQUFxN0IsRUFBQXYrQixFQUFBc2dCLEVBQUFnNUQsRUFBQS9sRSxFQUFBaXpCLEtBQUF4bUMsSUFBQTI1RSxXQUFBMzVFLEVBQUE0NUUsU0FBQTU1RSxHQUFBeVMsTUFBQW9uRSxNQUFBLFNBQUE3NUUsR0FBQSxRQUFBK3RCLEdBQUF4YSxFQUFBK3hELEdBQUEsR0FBQWhaLEVBQUFnWixLQUFBakcsRUFBQSxDQUFBLEdBQUFqc0IsRUFBQXRzQyxLQUFBdytELEdBQUFoWixFQUFBZ1osS0FBQWpoQyxFQUFBLEtBQUErTyxHQUFBM3NDLE9BQUEsRUFBQS9ELEVBQUEwd0MsRUFBQWt5QixJQUFBLEdBQUF4bEUsT0FBQSxzQkFBQXN6QyxFQUFBaG9DLEtBQUEsUUFBQSxJQUFBa2hELEVBQUFnWixHQUFBamhDLEVBQUF5MUMsRUFBQXZtRSxHQUFBd21FLEVBQUFqekUsS0FBQXcrRCxHQUFBLFdBQUEsTUFBQWo3QyxHQUFBdGMsSUFBQXdGLEtBQUFyUSxPQUFBLENBQUEsR0FBQWtILEdBQUFpZ0IsRUFBQTFFLFNBQUFwUyxFQUFBNHpELEdBQUEvOEQsRUFBQSxTQUFBbUosR0FBQUEsSUFBQSt4RCxHQUFBdGxFLEVBQUE2QixlQUFBMFIsSUFBQXdhLEVBQUEvdEIsRUFBQXVULEdBQUFBLEtBQUF3bUUsRUFBQWp6RSxLQUFBdytELEVBQUEveEQsRUFBQW5KLEdBQUFncEMsRUFBQXBvQixNQUFBc2hDLEVBQUFnWixHQUFBakcsR0FBQSxRQUFBcWEsR0FBQW5tRSxHQUFBLE1BQUF5bUUsR0FBQXptRSxJQUFBQSxFQUFBL04sTUFBQStOLEVBQUFvbUUsV0FBQSxJQUFBSyxFQUFBaDZFLEdBQUEsS0FBQSxJQUFBRixPQUFBLGlDQUFBLElBQUFtdUIsR0FBQXNyRCxFQUFBdjVFLE9BQUErNUUsS0FBQTNtQyxLQUFBa1osSUFBQSxPQUFBNmEsR0FBQW5uRSxFQUFBK3RCLEdBQUEvdEIsRUFBQW96QyxFQUFBa1osRUFBQSxLQUFBLFNBQUFqb0IsRUFBQWc3QixFQUFBa2EsR0FBQSxRQUFBNzJFLE9BQUF1M0UsSUFBQTEzQyxHQUFBbjRCLEVBQUFrMUQsRUFBQUQsRUFBQXVhLFVBQUF4bUMsRUFBQXdtQyxTQUFBdGEsRUFBQWxzQixFQUFBdW1DLFdBQUF2bUMsRUFBQXVtQyxhQUFBLFFBQUF2bUMsR0FBQThtQyxrQkFBQW5zRCxFQUFBNlosUUFBQTAzQixJQUFBLFFBQUF0L0QsR0FBQXVULEdBQUE2L0IsRUFBQSttQyxVQUFBNW1FLEVBQUF3YSxFQUFBc1gsT0FBQTl4QixHQUFBLFFBQUFyUSxHQUFBb2lFLEVBQUFsN0QsRUFBQWkxRCxHQUFBLFFBQUFuOEQsR0FBQXFRLEdBQUErTSxFQUFBK2tCLE9BQUE5eEIsR0FBQXZULEVBQUF1VCxHQUFBLFFBQUFnckIsS0FBQSxJQUFBNm9DLEVBQUFoMEIsRUFBQSttQyxXQUFBLElBQUE3NUQsRUFBQXNuQixRQUFBdmQsRUFBQXRkLE9BQUEzQyxFQUFBbXZFLEVBQUFqYSxJQUFBaC9DLEVBQUFpbUIsUUFBQS9nQyxLQUFBLFNBQUErTixHQUFBK3JELEVBQUFnRyxHQUFBL3hELEVBQUE3USxLQUFBUSxHQUFBLE1BQUFxUSxHQUFBclEsRUFBQXFRLElBQUEsR0FBQStNLEdBQUEvTSxFQUFBNlosUUFBQWkvQixFQUFBLENBQUE4YSxHQUFBOUgsRUFBQSxTQUFBOXJELEdBQUErNEMsRUFBQXpxRCxlQUFBMFIsS0FBQTh3QixFQUFBeGlDLGVBQUEwUixLQUFBODRDLElBQUFDLEVBQUEvNEMsR0FBQS9OLEtBQUEsU0FBQTZrQixHQUFBaTFDLEVBQUEvckQsR0FBQThXLElBQUFnaUMsR0FBQTl0QixLQUFBcjdCLE1BQUFtcEQsR0FBQTl0QixJQUFBK3RCLEVBQUFnWixHQUFBaGxELEVBQUFpbUIsUUFBQSxHQUFBbXpDLEVBQUFyMUMsSUFBQWsxQyxJQUFBalUsSUFBQWlVLEVBQUFsYSxFQUFBQSxFQUFBaDdCLEVBQUFBLEVBQUEsTUFBQUEsR0FBQSxJQUFBMjFDLEVBQUEzMUMsR0FBQSxLQUFBLElBQUF2a0MsT0FBQSxrQ0FBQXVrQyxHQUFBOUYsQ0FBQSxJQUFBOGdDLEdBQUEsSUFBQXFhLEVBQUFyYSxHQUFBLEtBQUEsSUFBQXYvRCxPQUFBLGlFQUFBdS9ELEdBQUEvK0MsQ0FBQSxJQUFBeU4sR0FBQXhhLEVBQUE2WixRQUFBZ21CLEVBQUFybEIsRUFBQXdZLFFBQUErbEIsRUFBQWxaLEVBQUF1bUMsY0FBQXJhLEVBQUFnYSxLQUFBajFDLEdBQUE0MUMsRUFBQSxFQUFBRixFQUFBbjVFLE9BQUEsRUFBQTJoQyxHQUFBLENBQUEsSUFBQTZrQyxFQUFBL0gsRUFBQThhLFdBQUEsTUFBQW42RSxHQUFBcS9ELEVBQUE4YSxXQUFBL21DLENBQUFpc0IsR0FBQTZhLG1CQUFBOXZFLEVBQUFrMUQsRUFBQWpULEVBQUFnVCxFQUFBNmEsa0JBQUFqc0QsSUFBQXFyRCxFQUFBaHRCLEVBQUErUyxFQUFBc2EsWUFBQXRhLEVBQUF1YSxVQUFBcjNDLEVBQUFuNEIsRUFBQWsxRCxFQUFBalQsRUFBQWdULEVBQUF1YSxTQUFBM3JELElBQUFtbEIsRUFBQThtQyxrQkFBQTd0QixFQUFBZ1QsRUFBQXVhLFNBQUEzckQsR0FBQXZyQixNQUFBMjhELEVBQUE2YSxvQkFBQTltQyxFQUFBOG1DLGtCQUFBN3RCLEVBQUFnVCxFQUFBNmEsa0JBQUFqc0QsSUFBQW94QyxFQUFBNzVELEtBQUE5QyxFQUFBMUMsR0FBQSxLQUFBLEdBQUEwbkUsR0FBQSxFQUFBMFMsRUFBQUwsRUFBQW41RSxPQUFBdzVFLEVBQUExUyxFQUFBQSxHQUFBLEVBQUFyakMsRUFBQXhpQyxlQUFBazRFLEVBQUFyUyxJQUFBaGxFLElBQUFRLEVBQUE2MkUsRUFBQXJTLEdBQUFxUyxFQUFBclMsRUFBQSxHQUFBcVMsRUFBQXJTLEVBQUEsR0FBQSxPQUFBdDBCLEtBQUEzZ0MsS0FBQW0xQixRQUFBLFNBQUFyMEIsRUFBQThXLEVBQUFpN0MsRUFBQWpoQyxHQUFBLE1BQUE1eEIsTUFBQW9uRSxNQUFBdG1FLEdBQUE4VyxFQUFBaTdDLEVBQUFqaEMsSUFBQSxRQUFBMDFDLEdBQUF4bUUsRUFBQThXLEVBQUFpN0MsR0FBQTd5RCxLQUFBNG5FLFdBQUEsU0FBQTltRSxFQUFBOFcsRUFBQWk3QyxHQUFBLE1BQUE4QixHQUFBN3pELEVBQUFqVCxVQUFBbVMsS0FBQTZuRSxXQUFBL21FLEVBQUFqVCxTQUFBK3BCLEdBQUErOEMsRUFBQTd6RCxFQUFBMmxCLGFBQUF6bUIsS0FBQThuRSxRQUFBaG5FLEVBQUEybEIsWUFBQTdPLEdBQUErOEMsRUFBQTd6RCxFQUFBaW5FLGtCQUFBL25FLEtBQUFnb0UsYUFBQWxuRSxFQUFBaW5FLGlCQUFBbndELEVBQUFpN0MsR0FBQTtFQUFBN3lELEtBQUE2bkUsV0FBQSxTQUFBL21FLEVBQUE4VyxHQUFBLE1BQUFxd0QsR0FBQW5uRSxHQUFBQSxFQUFBOFcsR0FBQTlXLEdBQUFkLEtBQUE4bkUsUUFBQSxTQUFBalYsRUFBQWpoQyxHQUFBLE1BQUFxMkMsR0FBQXBWLEtBQUFBLEVBQUFBLEVBQUFqaEMsSUFBQSxNQUFBaWhDLEVBQUEsS0FBQS94RCxFQUFBeEYsSUFBQXUzRCxHQUFBdjlDLE1BQUFzQyxFQUFBeVksU0FBQXlCLE9BQUEsZUFBQS8rQixLQUFBLFNBQUErTixHQUFBLE1BQUFBLEdBQUFwRyxRQUFBc0YsS0FBQWdvRSxhQUFBLFNBQUFsbkUsRUFBQThXLEVBQUFnYSxHQUFBLE1BQUFpaEMsR0FBQXY0RCxPQUFBd0csRUFBQSxLQUFBOHdCLElBQUE1QixPQUFBcFksS0FBQSxRQUFBK29CLEdBQUE3L0IsRUFBQThXLEVBQUFqZ0IsR0FBQSxRQUFBaTFELEdBQUFoMUMsRUFBQWk3QyxFQUFBamhDLEVBQUFqNkIsR0FBQSxHQUFBMnZFLEVBQUFqekUsS0FBQXVqQixHQUFBcXZELEVBQUFydkQsR0FBQSxNQUFBcXZELEdBQUFydkQsRUFBQSxLQUFBLHlCQUFBMWtCLEtBQUEwa0IsR0FBQSxLQUFBLElBQUF2cUIsT0FBQSwyQkFBQXVxQixFQUFBLGlCQUFBOVcsRUFBQSxJQUFBLElBQUEwYSxFQUFBNUQsR0FBQSxLQUFBLElBQUF2cUIsT0FBQSw2QkFBQXVxQixFQUFBLGlCQUFBOVcsRUFBQSxJQUFBLE9BQUEwYSxHQUFBNUQsR0FBQSxHQUFBc3dELEdBQUFDLE1BQUF2d0QsRUFBQWk3QyxFQUFBamhDLEVBQUFqNkIsR0FBQTZqQixFQUFBNUQsR0FBQSxRQUFBa3ZELEdBQUFobUUsRUFBQThXLEVBQUFpN0MsRUFBQWpoQyxHQUFBLEdBQUFqNkIsSUFBQSxHQUFBLElBQUFpMUQsRUFBQTlyRCxFQUFBaFQsUUFBQSx3QkFBQSxPQUFBLEtBQUE4cEIsRUFBQSxNQUFBZzFDLEVBQUEsUUFBQWlHLEdBQUEsS0FBQSxFQUFBbDdELEdBQUEsSUFBQSxLQUFBaTZCLEVBQUEsSUFBQSxJQUFBLE1BQUEsTUFBQSxFQUFBajZCLEdBQUEsS0FBQSxLQUFBLE1BQUEsU0FBQUEsR0FBQSxJQUFBazdELEVBQUEsSUFBQSxNQUFBLE1BQUFqRyxHQUFBajFELEVBQUEsR0FBQWlnQixFQUFBamdCLEVBQUEsR0FBQSxRQUFBMUgsR0FBQTBILEVBQUFpMUQsR0FBQSxHQUFBa2EsR0FBQTcyRSxFQUFBMUMsRUFBQWtELEVBQUFxN0IsQ0FBQSxPQUFBZzdDLEdBQUFudkUsRUFBQSxJQUFBQSxFQUFBLEdBQUFtMEIsRUFBQWxVLEVBQUFvWSxPQUFBODJDLEdBQUF2NUUsRUFBQXVULEVBQUF4SSxVQUFBc2hELEVBQUFqaUQsRUFBQTNKLE9BQUFpQyxFQUFBMjhELEVBQUFqMUQsRUFBQSxHQUFBQSxFQUFBLEtBQUEsS0FBQUEsRUFBQSxHQUFBLEtBQUEsTUFBQWxILEVBQUF5M0UsRUFBQW42RCxLQUFBOWQsR0FBQSxXQUFBMmhDLEVBQUFzMkMsRUFBQW42RCxLQUFBLFdBQUE5SSxRQUFBLEdBQUFqVSxRQUFBZixFQUFBMm5CLEVBQUF3d0QsZ0JBQUEsSUFBQXZWLE1BQUEvMkMsR0FBQWdyRCxFQUFBcG9ELE9BQUF6dUIsRUFBQW80RSxRQUFBOTZFLEVBQUF3Z0IsS0FBQXRkLEVBQUE2M0UsSUFBQXg4QyxHQUFBbFUsRUFBQWl2RCxHQUFBNzJDLFdBQUF1M0MsRUFBQTN2RCxHQUFBQSxLQUFBLElBQUFycUIsR0FBQWtELEVBQUEscUZBQUFxN0IsRUFBQSx1RkFBQWplLEVBQUEsSUFBQStyQyxFQUFBLEVBQUF0K0IsRUFBQXRiLEtBQUE4NUIsWUFBQW10QyxFQUFBdHZFLEVBQUFBLEVBQUFxNEIsVUFBQXhVLEVBQUF4YixLQUFBZ3dCLE9BQUFyNEIsRUFBQUEsRUFBQXE0QixPQUFBdTRDLFFBQUEsR0FBQUwsR0FBQU0sU0FBQWxCLElBQUF0bkUsTUFBQTlMLE9BQUE0TSxDQUFBLEtBQUEsR0FBQTYvQixHQUFBa1osRUFBQWdULEdBQUF0L0QsRUFBQWtELEVBQUE4YixLQUFBekwsTUFBQTYvQixFQUFBMXdDLEVBQUExQyxHQUFBLEtBQUFvekMsRUFBQTBuQyxRQUFBdDBFLFFBQUEsTUFBQSxLQUFBOGxELEVBQUErUyxFQUFBanNCLEVBQUE3a0IsR0FBQTZrQixFQUFBNXlCLEtBQUE0eUIsRUFBQTJuQyxJQUFBLFFBQUF6NkQsR0FBQWk1RCxFQUFBbm1DLEVBQUEwbkMsUUFBQXh1QixFQUFBOXJDLEtBQUE5SSxRQUFBL1EsT0FBQTJsRCxFQUFBNHVCLE9BQUE1dUIsRUFBQTZ1QixZQUFBcHRELEVBQUFqbkIsS0FBQXNzQyxFQUFBMG5DLFNBQUF6dUIsRUFBQW5wRCxFQUFBb0UsU0FBQWc0RCxHQUFBL3JELEVBQUF4SSxVQUFBc2hELEVBQUEsSUFBQTR0QixHQUFBM2EsRUFBQTk0RCxRQUFBLElBQUEsSUFBQXl6RSxHQUFBLEVBQUEsQ0FBQSxHQUFBMTNDLEdBQUE5dkIsS0FBQTJvRSxhQUFBOWIsRUFBQXYwRCxVQUFBa3ZFLEVBQUEsSUFBQTNhLEVBQUFBLEVBQUF2MEQsVUFBQSxFQUFBa3ZFLEdBQUF4bkUsS0FBQTRvRSxXQUFBOW5FLEVBQUF4SSxVQUFBLEVBQUFzaEQsRUFBQTR0QixHQUFBMTNDLEVBQUEzaEMsT0FBQSxFQUFBLElBQUF5ckQsRUFBQSxFQUFBcnNELEVBQUF1K0IsRUFBQXZmLEtBQUF1akIsSUFBQTZRLEVBQUExd0MsRUFBQTFDLEdBQUEsR0FBQXNzRCxFQUFBK1MsRUFBQWpzQixFQUFBN2tCLEdBQUE2a0IsRUFBQTV5QixLQUFBNHlCLEVBQUEybkMsSUFBQSxVQUFBMXVCLEVBQUFucEQsRUFBQW9FLGNBQUFtTCxNQUFBNG9FLFdBQUE5bkUsRUFBQWQsS0FBQTJvRSxhQUFBLEVBQUE5NkQsSUFBQWk1RCxFQUFBamEsSUFBQWoxQyxFQUFBaXhELFVBQUEsRUFBQSxLQUFBLElBQUEsSUFBQXZ0RCxFQUFBam5CLEtBQUF3NEQsR0FBQTdzRCxLQUFBMGUsT0FBQSxHQUFBMXRCLFFBQUE2YyxFQUFBK0osRUFBQXd3RCxnQkFBQSxJQUFBdlYsR0FBQTd5RCxLQUFBMUcsT0FBQWdpQixFQUFBLEdBQUF0YixLQUFBOG9FLGFBQUF4QixFQUFBLFFBQUF6dEIsR0FBQS80QyxHQUFBK2xFLEVBQUE3bUUsS0FBQWMsR0FBQSxRQUFBK3JELEtBQUEsUUFBQS9yRCxHQUFBQSxHQUFBLE1BQUEsT0FBQUEsRUFBQUEsRUFBQTNPLFdBQUFyRSxRQUFBLE1BQUEsT0FBQWdULEVBQUEsUUFBQW5KLEdBQUFtSixHQUFBLE1BQUEsT0FBQUEsRUFBQUEsRUFBQTNPLFdBQUFyRSxRQUFBLE9BQUEsS0FBQWdULEVBQUEsUUFBQThyRCxLQUFBLE9BQUFpYyxPQUFBcnRELEVBQUE0c0QsZ0JBQUF4dUIsR0FBQSxRQUFBcnNELEdBQUF1VCxHQUFBLE1BQUFtbkUsR0FBQW5uRSxJQUFBa21FLEVBQUFsbUUsSUFBQW1uRSxFQUFBbm5FLEVBQUFBLEVBQUEzUyxPQUFBLElBQUEsUUFBQXNDLEtBQUEsS0FBQXdrRSxFQUFBOW1FLFFBQUEsQ0FBQSxHQUFBMlMsR0FBQW0wRCxFQUFBdC9DLE9BQUEsSUFBQTdVLEVBQUFtRSxRQUFBLEtBQUEsSUFBQTVYLE9BQUEsb0RBQUF1cUIsR0FBQXZtQixPQUFBbTJFLEVBQUExbUUsRUFBQXZILE1BQUFzVSxFQUFBdlQsT0FBQXdHLEVBQUFpb0UsT0FBQSxRQUFBajlDLEdBQUFockIsR0FBQStsRSxFQUFBN21FLEtBQUFjLE9BQUFvbkUsRUFBQWxvRSxJQUFBLElBQUE2TixHQUFBK3JDLEdBQUEsRUFBQXArQixHQUFBLEVBQUE4ckQsR0FBQSxFQUFBRSxLQUFBMTNDLEdBQUEsRUFBQW1sQyxLQUFBMFMsR0FBQXp1QixRQUFBOHZCLE9BQUFsb0UsRUFBQW1vRSxPQUFBdHhFLEVBQUE0MUQsR0FBQSxTQUFBenNELEdBQUEsTUFBQSxPQUFBQSxJQUFBNnpELEVBQUE3ekQsSUFBQSxnQkFBQUEsSUFBQW1FLFFBQUEsU0FBQWlrRSxPQUFBRixPQUFBbG9FLEVBQUFtb0UsT0FBQSxTQUFBbm9FLEdBQUEsTUFBQXJQLFVBQUFxUCxFQUFBLEtBQUF5c0QsR0FBQSxTQUFBenNELEdBQUEsTUFBQTZ6RCxHQUFBN3pELElBQUFkLEtBQUFpcEUsT0FBQW5vRSxFQUFBM08sY0FBQTJPLEdBQUFtRSxRQUFBLE9BQUFra0UsTUFBQUgsT0FBQSxTQUFBbG9FLEdBQUEsTUFBQUEsR0FBQSxFQUFBLEdBQUFtb0UsT0FBQSxTQUFBbm9FLEdBQUEsTUFBQSxLQUFBclAsU0FBQXFQLEVBQUEsS0FBQXlzRCxHQUFBLFNBQUF6c0QsR0FBQSxNQUFBQSxNQUFBLEdBQUFBLEtBQUEsR0FBQW1FLFFBQUEsT0FBQWhPLE1BQUEreEUsT0FBQSxTQUFBbG9FLEdBQUEsTUFBQWQsTUFBQXV0RCxHQUFBenNELElBQUFBLEVBQUFzM0MsZUFBQSxLQUFBdDNDLEVBQUF1M0MsV0FBQSxJQUFBcHFELE1BQUEsS0FBQSxJQUFBNlMsRUFBQXczQyxXQUFBcnFELE1BQUEsS0FBQTBLLEtBQUEsS0FBQWs2RCxHQUFBb1csT0FBQSxTQUFBbm9FLEdBQUEsR0FBQWQsS0FBQXV0RCxHQUFBenNELEdBQUEsTUFBQUEsRUFBQSxJQUFBOFcsR0FBQTVYLEtBQUFvcEUsUUFBQTc4RCxLQUFBekwsRUFBQSxPQUFBOFcsR0FBQSxHQUFBL21CLE1BQUErbUIsRUFBQSxHQUFBQSxFQUFBLEdBQUEsRUFBQUEsRUFBQSxJQUFBaTdDLEdBQUF0RixHQUFBLFNBQUF6c0QsR0FBQSxNQUFBQSxhQUFBalEsUUFBQWtHLE1BQUErSixFQUFBaFEsWUFBQWtFLE9BQUEsU0FBQThMLEVBQUE4VyxHQUFBLE1BQUE1WCxNQUFBdXRELEdBQUF6c0QsSUFBQWQsS0FBQXV0RCxHQUFBMzFDLElBQUE5VyxFQUFBaXZCLGdCQUFBblksRUFBQW1ZLGVBQUE5cUIsUUFBQSwwREFBQW1rRSxRQUFBLHlEQUFBM3lFLE1BQUF1eUUsT0FBQXB4RCxFQUFBeGhCLE9BQUE2eUUsT0FBQXJ4RCxFQUFBcGhCLFNBQUErMkQsR0FBQTMxQyxFQUFBcG5CLFNBQUF3RSxPQUFBNGlCLEVBQUE1aUIsT0FBQWlRLFFBQUEsU0FBQW9rRSxLQUFBTCxPQUFBcHhELEVBQUE3bEIsU0FBQWszRSxPQUFBcnhELEVBQUE3bEIsU0FBQWlELE9BQUE0aUIsRUFBQTVpQixPQUFBaVEsUUFBQSxNQUFBNG5ELEdBQUF5YyxrQkFBQSxTQUFBeG9FLEdBQUEsSUFBQXZULEVBQUF1VCxFQUFBalIsT0FBQSxNQUFBaVIsR0FBQWpSLEtBQUEsS0FBQWdlLEVBQUEsS0FBQSxJQUFBeGdCLE9BQUEsOERBQUEsT0FBQXdnQixHQUFBdlQsT0FBQXdHLEVBQUFqUixRQUFBbVEsS0FBQW9vRSxnQkFBQSxTQUFBdG5FLEdBQUEsTUFBQTZ6RCxHQUFBN3pELEtBQUE4NEMsRUFBQTk0QyxHQUFBODRDLEdBQUE1NUMsS0FBQXVwRSxXQUFBLFNBQUF6b0UsR0FBQSxNQUFBNnpELEdBQUE3ekQsS0FBQTBhLEVBQUExYSxHQUFBMGEsR0FBQXhiLEtBQUF3cEUsb0JBQUEsU0FBQTFvRSxHQUFBLElBQUE2ekQsRUFBQTd6RCxHQUFBLE1BQUF3bUUsRUFBQSxJQUFBeG1FLEtBQUEsR0FBQUEsS0FBQSxJQUFBdW1FLEVBQUF2bUUsR0FBQSxLQUFBLElBQUF6VCxPQUFBLDBCQUFBeVQsRUFBQSxrREFBQSxPQUFBd21FLEdBQUF4bUUsRUFBQUEsR0FBQWQsS0FBQXhGLFFBQUEsU0FBQXNHLEVBQUE4VyxHQUFBLE1BQUEsSUFBQStvQixHQUFBNy9CLEVBQUErbEUsRUFBQWphLElBQUFoMUMsS0FBQTVYLEtBQUF5cEUsVUFBQSxTQUFBM29FLEdBQUEsSUFBQXltRSxFQUFBem1FLEdBQUEsT0FBQSxDQUFBLElBQUE4VyxJQUFBLENBQUEsT0FBQTg4QyxHQUFBL3pCLEVBQUEzcUIsVUFBQSxTQUFBNjhDLEVBQUFqaEMsR0FBQXEyQyxFQUFBcFYsS0FBQWo3QyxFQUFBQSxHQUFBKzhDLEVBQUE3ekQsRUFBQTh3QixLQUFBcTJDLEVBQUFubkUsRUFBQTh3QixPQUFBaGEsR0FBQTVYLEtBQUErTixLQUFBLFNBQUFqTixFQUFBOFcsRUFBQWk3QyxHQUFBLElBQUE4QixFQUFBLzhDLEdBQUEsTUFBQTR2RCxHQUFBMW1FLEVBQUEsSUFBQTBtRSxFQUFBcDRFLGVBQUEwUixHQUFBLEtBQUEsSUFBQXpULE9BQUEsaUJBQUF5VCxFQUFBLDhCQUFBLE9BQUEwbUUsR0FBQTFtRSxHQUFBLEdBQUErNEMsR0FBQWd0QixHQUFBdHRFLEtBQUF1SCxHQUFBOFcsSUFBQWk3QyxJQUFBb0MsRUFBQTVnRSxNQUFBa0YsS0FBQXVILEVBQUFpb0UsSUFBQWxXLElBQUEvaUMsR0FBQXIvQixLQUFBdVAsTUFBQTAwRCxFQUFBaVQsRUFBQSxTQUFBN21FLEVBQUE4VyxHQUFBNHZELEVBQUE1dkQsR0FBQSxHQUFBaWlDLEdBQUFndEIsR0FBQXR0RSxLQUFBcWUsR0FBQTlXLE1BQUEwbUUsRUFBQTUxQyxFQUFBNDFDLE1BQUF4bkUsS0FBQW1TLE1BQUEsWUFBQSxTQUFBclIsR0FBQSxNQUFBK00sR0FBQS9NLEVBQUFndkIsR0FBQSxFQUFBci9CLElBQUFpa0UsRUFBQWlULEVBQUEsU0FBQTdtRSxFQUFBOFcsR0FBQTR2RCxFQUFBNXZELEtBQUE0dkQsRUFBQTV2RCxHQUFBLEdBQUFpaUMsR0FBQS80QyxNQUFBZCxPQUFBQSxLQUFBbW9FLE1BQUEsU0FBQXJuRSxFQUFBOFcsRUFBQWdhLEVBQUFqNkIsR0FBQSxRQUFBaTFELEdBQUE5ckQsR0FBQSxHQUFBOFcsR0FBQTJ2RCxFQUFBem1FLEdBQUFnbUUsRUFBQWhtRSxNQUFBK3hELEVBQUEsS0FBQTVpRSxFQUFBMm5CLEVBQUEsVUFBQSxLQUFBM25CLEVBQUEybkIsRUFBQSxTQUFBLEtBQUEzbkIsRUFBQTJuQixFQUFBLFdBQUEsS0FBQTNuQixFQUFBMm5CLEVBQUEsUUFBQSxPQUFBaTdDLEtBQUEveEQsR0FBQWpSLE1BQUFpUixJQUFBQSxFQUFBNG9FLEtBQUFuOEUsRUFBQXVULEVBQUFqUixPQUFBaVIsRUFBQWpSLE1BQUEsV0FBQSxNQUFBaVIsR0FBQWpSLE9BQUFpUixFQUFBLFFBQUFyUSxHQUFBbW5CLEVBQUFpN0MsRUFBQWpoQyxHQUFBLEdBQUFoYSxFQUFBN0osTUFBQThrRCxFQUFBLEtBQUEsSUFBQXhsRSxPQUFBLFVBQUF5VCxFQUFBLGlDQUFBLE9BQUEreEQsR0FBQUEsRUFBQWo3QyxFQUFBN0osS0FBQTZKLEVBQUE3SixlQUFBOHJDLEdBQUFqaUMsRUFBQTdKLEtBQUEsR0FBQThyQyxHQUFBamlDLEVBQUE3SixNQUFBLFdBQUE2akIsRUFBQTQxQyxFQUFBNkIsSUFBQTdCLEVBQUF0dUIsT0FBQSxRQUFBcHRCLEtBQUEsR0FBQWxVLElBQUE5akIsTUFBQSxXQUFBNkQsRUFBQSxRQUFBLEdBQUFrN0QsRUFBQS94RCxFQUFBL1MsTUFBQSxVQUFBK0YsT0FBQSxLQUFBLE9BQUEreUUsR0FBQWp2RCxFQUFBaTdDLEVBQUFqaEMsR0FBQTk5QixNQUFBLFFBQUE4bEQsR0FBQTk0QyxFQUFBOFcsR0FBQSxHQUFBaTdDLEdBQUEveEQsRUFBQTJuRSxNQUFBLEtBQUE3d0QsR0FBQWk3QyxLQUFBLEVBQUEsT0FBQSxDQUFBLEtBQUE4QixFQUFBOUIsSUFBQSxNQUFBQSxFQUFBLE1BQUF5VSxFQUFBLElBQUF6VSxLQUFBLEdBQUF3VSxFQUFBeFUsR0FBQSxNQUFBQSxFQUFBLE1BQUEsSUFBQXhsRSxPQUFBLDJCQUFBd2xFLEVBQUEsdURBQUEsUUFBQXIzQyxHQUFBMWEsRUFBQThXLEVBQUFnYSxFQUFBajZCLEdBQUEsR0FBQWkxRCxHQUFBa2EsRUFBQXY1RSxJQUFBNjhELEtBQUEsR0FBQUMsR0FBQXo0QixHQUFBaGEsRUFBQWk3QyxFQUFBLEtBQUF6SSxLQUFBLEtBQUFDLEdBQUF6NEIsR0FBQWhhLEVBQUFpN0MsRUFBQSxJQUFBLE9BQUFqRyxHQUFBb2EsRUFBQWxtRSxFQUFBaFQsU0FBQWdULEVBQUFoVCxXQUFBdTVFLEVBQUExdkUsSUFBQWkxRCxFQUFBdjRELE1BQUErMUQsS0FBQXp5RCxFQUFBMHlELEdBQUF3SSxJQUFBaVUsRUFBQUcsRUFBQXJhLEVBQUEsU0FBQTlyRCxHQUFBLE1BQUFBLEdBQUFzcEQsT0FBQTl1QyxFQUFBL3RCLEVBQUEsU0FBQXVULEdBQUEsTUFBQSxLQUFBN1EsRUFBQTYyRSxFQUFBaG1FLEVBQUFzcEQsUUFBQTcwRCxPQUFBcTNELEdBQUEsUUFBQWpzQixLQUFBLElBQUE5eUIsRUFBQSxLQUFBLElBQUF4Z0IsT0FBQSw4REFBQSxJQUFBeVQsR0FBQStNLEVBQUF2VCxPQUFBczNCLEVBQUE4M0MsS0FBQSxJQUFBLE9BQUE1b0UsR0FBQUEsSUFBQSt4RCxJQUFBb0MsRUFBQWxuRCxLQUFBdy9DLEdBQUF6c0QsR0FBQSxLQUFBLElBQUF6VCxPQUFBLGtCQUFBeVQsRUFBQSxvQkFBQW0wRCxFQUFBbjVDLEdBQUEsaUNBQUFtNUMsRUFBQWxuRCxLQUFBeFUsS0FBQSxJQUFBLE9BQUF1SCxHQUFBLFFBQUErckQsR0FBQS9yRCxHQUFBLFFBQUE4VyxHQUFBOVcsR0FBQSxNQUFBLFVBQUE4VyxHQUFBLE1BQUFBLEdBQUF3eUMsT0FBQXRwRCxHQUFBLFFBQUEreEQsR0FBQS94RCxHQUFBLEdBQUEreEQsR0FBQW9VLEVBQUEzckQsRUFBQTI1QyxFQUFBbm5FLFFBQUE4cEIsRUFBQTlXLElBQUEsU0FBQUEsR0FBQSxNQUFBQSxHQUFBdXBELElBQUEsT0FBQXdJLEdBQUExa0UsT0FBQTBrRSxFQUFBLEdBQUEveEQsRUFBQSxNQUFBQSxHQUFBK3hELEVBQUEveEQsR0FBQTZ6RCxFQUFBN3pELEdBQUFtMEQsRUFBQWxuRCxLQUFBZ2YsV0FBQWpzQixHQUFBNi9CLElBQUEsUUFBQTdRLEtBQUEsTUFBQSxVQUFBaHZCLEVBQUEsSUFBQThXLEVBQUEsYUFBQSt4RCxFQUFBLGVBQUFwVixFQUFBLElBQUEsR0FBQVUsR0FBQWoxRCxJQUFBNHhCLEdBQUFnN0IsRUFBQWg3QixHQUFBaGEsRUFBQW5uQixFQUFBbWhDLEVBQUFoYSxFQUFBamdCLEVBQUEsSUFBQWd3RSxHQUFBNzdDLEdBQUFsVSxHQUFBK3ZELEVBQUEvdkQsRUFBQWd5RCxTQUFBakMsRUFBQSxXQUFBaHdFLEdBQUFpZ0IsRUFBQSxXQUFBQSxFQUFBcmUsTUFBQW91RSxHQUFBLFNBQUFod0UsR0FBQWk2QixFQUFBL2hDLFFBQUFnakUsSUFBQWpoQyxFQUFBL2hDLE1BQUEsR0FBQSxJQUFBMGtFLEdBQUEzaUMsRUFBQS9oQyxRQUFBZ2pFLEVBQUE4VyxFQUFBL3ZCLEVBQUFob0IsRUFBQTJpQyxHQUFBc1YsRUFBQXJ1RCxFQUFBb1csRUFBQSsxQyxFQUFBcFQsRUFBQW9WLEVBQUE5QyxHQUFBN21FLE1BQUE4YixHQUFBaGIsRUFBQWlOLEtBQUE2SixFQUFBMWMsU0FBQXZELEVBQUE3RCxNQUFBNnpFLEVBQUFjLE9BQUFrQixFQUFBNzdFLFFBQUErN0UsRUFBQW5CLFdBQUFuVSxFQUFBMWtFLE1BQUFnOUQsRUFBQWlkLFFBQUFqWCxFQUFBeDVELE9BQUF1NEIsRUFBQXovQixTQUFBMjlCLEtBQUFoRSxFQUFBOVYsV0FBQXV5RCxNQUFBLFdBQUEsTUFBQTMyQyxHQUFBNXhCLEtBQUE2bUUsRUFBQSxHQUFBLzZDLElBQUFpK0MsU0FBQS9wRSxTQUFBZ3FFLE9BQUEsV0FBQSxJQUFBLEdBQUFscEUsTUFBQThXLEtBQUFpN0MsRUFBQTd5RCxLQUFBNHhCLEVBQUFrMUMsRUFBQWg3QyxFQUFBOVYsV0FBQTY4QyxHQUFBajdDLEVBQUF2akIsS0FBQXcrRCxHQUFBQSxFQUFBQSxFQUFBa1gsUUFBQSxPQUFBbnlELEdBQUF0Z0IsVUFBQW85RCxFQUFBOThDLEVBQUEsU0FBQUEsR0FBQTg4QyxFQUFBb1MsRUFBQWx2RCxHQUFBLFNBQUFBLEdBQUEsS0FBQTNuQixFQUFBNlEsRUFBQThXLElBQUEsS0FBQTNuQixFQUFBMmhDLEVBQUFoYSxJQUFBOVcsRUFBQXpNLEtBQUF1akIsT0FBQTlXLEdBQUFxbUUsU0FBQSxTQUFBcm1FLEdBQUEsR0FBQThXLE1BQUFpN0MsRUFBQTd5RCxJQUFBLE9BQUEwMEQsR0FBQTdCLEVBQUFtWCxTQUFBLFNBQUFwNEMsR0FBQWhhLEVBQUFnYSxHQUFBaWhDLEVBQUFqaEMsR0FBQS9oQyxNQUFBaVIsR0FBQUEsRUFBQTh3QixNQUFBaGEsR0FBQXF5RCxTQUFBLFNBQUFucEUsRUFBQThXLEdBQUEsR0FBQWk3QyxJQUFBLEVBQUFqaEMsRUFBQTV4QixJQUFBLE9BQUEwMEQsR0FBQTlpQyxFQUFBbzRDLFNBQUEsU0FBQXJ5RSxHQUFBLEdBQUFpMUQsR0FBQTlyRCxHQUFBQSxFQUFBbkosR0FBQW12RSxFQUFBbHZELEdBQUFBLEVBQUFqZ0IsRUFBQWk2QixHQUFBajZCLEdBQUFvVyxLQUFBL1ksT0FBQTQzRCxFQUFBa2EsS0FBQWpVLEdBQUEsS0FBQUEsR0FBQXFYLFlBQUEsU0FBQXBwRSxHQUFBLEdBQUE4d0IsR0FBQWo2QixFQUFBaTFELEVBQUFrYSxFQUFBNzJFLEVBQUExQyxFQUFBeVMsS0FBQWdxRSxRQUFBLEtBQUFwNEMsRUFBQSxFQUFBQSxFQUFBcmtDLEVBQUFZLFNBQUF3SixFQUFBcUksS0FBQXpTLEVBQUFxa0MsSUFBQWc3QixFQUFBOXJELEVBQUF2VCxFQUFBcWtDLElBQUFnN0IsSUFBQWlHLEdBQUEsT0FBQWpHLElBQUFqMUQsRUFBQSt3RSxZQUFBOTJDLElBQUEsQ0FBQSxHQUFBazFDLEVBQUFudkUsRUFBQW9XLEtBQUFnZixXQUFBNi9CLElBQUFqMUQsRUFBQW9XLEtBQUF3L0MsR0FBQXVaLEdBQUEsT0FBQSxDQUFBLElBQUE3MkUsRUFBQTBILEVBQUFvVyxLQUFBaTdELE9BQUFsQyxHQUFBbHZELEVBQUFscEIsU0FBQXVCLEtBQUEwSCxFQUFBb1csS0FBQTlJLFFBQUFzSCxLQUFBdGMsR0FBQSxPQUFBLEVBQUEsT0FBQSxHQUFBODVFLFNBQUFsWCxHQUFBN3lELEtBQUF3b0UsU0FBQTE4QyxFQUFBLFFBQUEwN0MsR0FBQTFtRSxFQUFBOHdCLEdBQUEsUUFBQWo2QixHQUFBbUosR0FBQSxHQUFBOFcsR0FBQSxrREFBQXJMLEtBQUF6TCxFQUFBNU0sT0FBQSxPQUFBLE9BQUEwakIsRUFBQUEsRUFBQSxHQUFBOXBCLFFBQUEsU0FBQSxNQUFBLEdBQUEsUUFBQTgrRCxHQUFBOXJELEVBQUE4VyxHQUFBLE1BQUE5VyxHQUFBaFQsUUFBQSxpQkFBQSxTQUFBZ1QsRUFBQSt4RCxHQUFBLE1BQUFqN0MsR0FBQSxNQUFBaTdDLEVBQUEsRUFBQTcyQyxPQUFBNjJDLE1BQUEsUUFBQWlVLEdBQUFobUUsRUFBQThXLEVBQUFpN0MsR0FBQSxJQUFBQSxFQUFBLE9BQUEsQ0FBQSxJQUFBamhDLEdBQUE5d0IsRUFBQXhHLE9BQUFzZCxFQUFBQSxHQUFBdXlELE9BQUF0WCxHQUFBLE9BQUE4QixHQUFBL2lDLEdBQUFBLEdBQUEsRUFBQSxRQUFBM2hDLEdBQUEyaEMsRUFBQWo2QixFQUFBaTFELEVBQUFrYSxHQUFBLFFBQUE3MkUsR0FBQTZRLEVBQUE4VyxFQUFBaTdDLEdBQUEsTUFBQSxNQUFBcjNDLEVBQUExYSxFQUFBOFcsRUFBQTRELEVBQUF2dEIsTUFBQSxFQUFBLElBQUE2UyxFQUFBK3hELEVBQUFyM0MsRUFBQXZ0QixNQUFBLEdBQUE2UyxFQUFBQSxFQUFBLFFBQUE4NEMsR0FBQTk0QyxHQUFBLFFBQUE4VyxHQUFBOVcsR0FBQSxHQUFBOFcsR0FBQTlXLEVBQUE4ckQsRUFBQWg3QixFQUFBLE9BQUFoYSxJQUFBeXZELEVBQUF6dkQsSUFBQWdhLEVBQUE5akMsVUFBQTRxQixJQUFBZCxJQUFBLElBQUEsRUFBQSxJQUFBOVcsSUFBQUEsRUFBQW9RLGlCQUFBLENBQUErMUQsR0FBQXIxQyxFQUFBbFosUUFBQXV1RCxFQUFBQSxFQUFBcFUsQ0FBQSxJQUFBbDdELEdBQUFtdkUsRUFBQXIyRSxFQUFBdEMsTUFBQSxLQUFBd0osRUFBQSxFQUFBbXZFLEVBQUFudkUsRUFBQUEsSUFBQSxHQUFBaWdCLEVBQUFubkIsRUFBQWtILElBQUEsTUFBQW0wQixJQUFBbFUsRUFBQWtVLElBQUEsUUFBQXhRLEtBQUEsTUFBQS90QixHQUFBQSxHQUFBb0ssRUFBQXl1QixJQUFBLHlCQUFBd3pCLEdBQUEsR0FBQXF0QixHQUFBenJELEVBQUFzckQsRUFBQXBzRCxXQUFBNHNELEVBQUExMUMsRUFBQWxaLEtBQUEsT0FBQTdLLElBQUF5TixLQUFBOHVELEtBQUEsV0FBQXh3QixLQUFBeXdCLE9BQUEsV0FBQSxNQUFBL3VELE1BQUFndkQsT0FBQSxTQUFBeHBFLEdBQUEsTUFBQUEsUUFBQXdtRSxFQUFBMTFDLEVBQUFsWixZQUFBa1osRUFBQWxaLFFBQUE0dUQsSUFBQTExQyxFQUFBbFosSUFBQTR1RCxHQUFBMTFDLEVBQUE5akMsYUFBQXVHLEtBQUEsU0FBQXlNLEVBQUE4VyxFQUFBamdCLEdBQUEsR0FBQWkxRCxHQUFBOXJELEVBQUFpNUMsT0FBQW5pQyxNQUFBLFFBQUFnMUMsR0FBQWgxQyxHQUFBQSxFQUFBLE9BQUFnMUMsR0FBQSxJQUFBaDFDLEVBQUEsTUFBQWdhLEVBQUFsWixJQUFBazBDLEdBQUFxYSxFQUFBdHZFLEdBQUFBLEVBQUE0eUUsY0FBQTM0QyxFQUFBbFosTUFBQW02QyxFQUFBbDdELEdBQUFBLEVBQUE3SixTQUFBOGpDLEVBQUE5akMsV0FBQWtzQixLQUFBLFNBQUE2NEMsRUFBQWw3RCxFQUFBaTFELEdBQUEsSUFBQWlHLEVBQUEyWCxVQUFBN3lFLEdBQUEsTUFBQSxLQUFBLElBQUFtdkUsR0FBQWhtRSxFQUFBdThCLFdBQUF6bEIsR0FBQXBuQixTQUFBczJFLEtBQUFBLEVBQUFBLEVBQUFsb0QsUUFBQSxJQUFBcnhCLEdBQUFzbEUsRUFBQTlZLE9BQUFwaUQsRUFBQSxJQUFBaTFELEVBQUFBLE1BQUFrYSxHQUFBLE9BQUF2NUUsSUFBQUEsRUFBQSxJQUFBdVQsRUFBQTI3QixhQUFBbHZDLEdBQUEsT0FBQUEsR0FBQW9LLEdBQUFBLEVBQUEsT0FBQXBLLEdBQUEsSUFBQW9LLEVBQUEsTUFBQXBLLEVBQUEwQyxFQUFBMUMsRUFBQXU1RSxFQUFBbGEsRUFBQTZkLFdBQUE3ZCxFQUFBNmQsV0FBQWw5RSxFQUFBLE1BQUFBLEVBQUEsSUFBQWtELElBQUFxMkUsR0FBQXY1RSxFQUFBLElBQUEsR0FBQXUrQixFQUFBOEYsRUFBQTJJLE1BQUEsT0FBQXpPLEdBQUEsS0FBQUEsR0FBQSxNQUFBQSxFQUFBLEdBQUEsSUFBQUEsR0FBQThGLEVBQUF5RixXQUFBLE1BQUF6RixFQUFBOWhCLE9BQUFnYyxFQUFBcjdCLEVBQUFsRCxHQUFBb0wsS0FBQSxNQUFBLEdBQUFwTCxHQUFBa0QsS0FBQXE3QixFQUFBLEtBQUFqZSxHQUFBLENBQUE3TixNQUFBMHFFLEtBQUEsU0FBQTVwRSxHQUFBLElBQUFtbkUsRUFBQW5uRSxHQUFBLEtBQUEsSUFBQXpULE9BQUEsNEJBQUEsT0FBQW9ELEdBQUE0RCxLQUFBeU0sR0FBQWQsTUFBQUEsS0FBQTJxRSxVQUFBLFNBQUE3cEUsR0FBQSxHQUFBdW1FLEVBQUF2bUUsR0FBQSxDQUFBLEdBQUE4VyxHQUFBOVcsQ0FBQUEsR0FBQSxXQUFBLE1BQUE4VyxRQUFBLEtBQUFxd0QsRUFBQW5uRSxHQUFBLEtBQUEsSUFBQXpULE9BQUEsNEJBQUEsT0FBQXkrQixHQUFBaHJCLEVBQUFkLE1BQUFBLEtBQUErekIsS0FBQSxTQUFBanpCLEVBQUE4VyxHQUFBLEdBQUFpN0MsR0FBQTVpRSxFQUFBbzNFLEVBQUF6dkQsRUFBQSxJQUFBeXZELEVBQUF2bUUsS0FBQUEsRUFBQTh3QixFQUFBcDNCLFFBQUFzRyxLQUFBN1EsSUFBQWc0RSxFQUFBcndELEtBQUFvdkQsRUFBQXB2RCxHQUFBLEtBQUEsSUFBQXZxQixPQUFBLDhCQUFBLElBQUFFLElBQUE2Z0QsUUFBQSxTQUFBdHRDLEVBQUE4VyxHQUFBLE1BQUEzbkIsS0FBQTRpRSxFQUFBamhDLEVBQUFwM0IsUUFBQW9kLEdBQUFBLEdBQUEsU0FBQSxTQUFBOVcsR0FBQSxNQUFBK3hELEdBQUE5WSxPQUFBajVDLE1BQUErbEUsRUFBQSxTQUFBaFUsRUFBQWpoQyxHQUFBLE1BQUFrMUMsR0FBQWpVLEVBQUFqN0MsRUFBQTlXLEVBQUF5TCxLQUFBcWxCLEVBQUFwMEIsT0FBQW8wQixFQUFBbUosYUFBQXpoQyxPQUFBK3RFLEVBQUF2bUUsRUFBQXhILFFBQUF3SCxFQUFBeEgsT0FBQSxNQUFBNDBDLE1BQUEsU0FBQXB0QyxFQUFBOFcsR0FBQSxHQUFBOVcsRUFBQThwRSxRQUFBOXBFLEVBQUErcEUsT0FBQSxLQUFBLElBQUF4OUUsT0FBQSw2Q0FBQSxPQUFBNEMsS0FBQTRpRSxFQUFBajdDLEVBQUFBLEdBQUEsU0FBQSxTQUFBOVcsR0FBQSxNQUFBOHJELEdBQUFpRyxFQUFBL3hELE1BQUErbEUsRUFBQSxTQUFBaFUsRUFBQWpoQyxHQUFBLE1BQUFrMUMsR0FBQWpVLEVBQUFqN0MsRUFBQTlXLEVBQUF5TCxLQUFBcWxCLEVBQUFwMEIsV0FBQWxFLE9BQUEzQixFQUFBbUosT0FBQXJRLEdBQUEyOUMsUUFBQXhjLEVBQUE2M0MsVUFBQTNvRSxHQUFBb3RDLE1BQUFwdEMsWUFBQTlQLFFBQUEsS0FBQSxHQUFBODZCLEtBQUFyN0IsR0FBQSxHQUFBQSxFQUFBcTdCLEdBQUEsTUFBQTlyQixNQUFBMHFFLEtBQUFuOUUsRUFBQXUrQixHQUFBaHJCLEVBQUE4VyxHQUFBLE1BQUEsSUFBQXZxQixPQUFBLDZCQUFBMlMsS0FBQThxRSxlQUFBLFNBQUFocUUsR0FBQUEsSUFBQSt4RCxJQUFBL3hELEdBQUEsR0FBQStNLEVBQUEvTSxHQUFBZCxLQUFBbVMsS0FBQWxpQixFQUFBQSxFQUFBa2pCLFNBQUEsWUFBQSxhQUFBLFlBQUEsWUFBQSxRQUFBMmMsR0FBQWh2QixFQUFBbkosR0FBQSxRQUFBaTFELEdBQUE5ckQsR0FBQSxNQUFBLEtBQUFBLEVBQUEvTSxRQUFBLE1BQUEsSUFBQStNLEVBQUEvTSxRQUFBLEtBQUEsUUFBQTZsRCxHQUFBOTRDLEVBQUE4VyxHQUFBLElBQUE5VyxFQUFBLE1BQUEreEQsRUFBQSxJQUFBamhDLEdBQUF5MUMsRUFBQXZtRSxHQUFBbkosRUFBQWk2QixFQUFBOXdCLEVBQUFBLEVBQUF2SCxLQUFBdXRFLEVBQUFsYSxFQUFBajFELEVBQUEsSUFBQW12RSxFQUFBLENBQUEsSUFBQWx2RCxFQUFBLEtBQUEsSUFBQXZxQixPQUFBLHNDQUFBc0ssRUFBQSxJQUFBaWdCLEdBQUFnaUMsRUFBQWhpQyxFQUFBLEtBQUEsR0FBQTNuQixHQUFBMEgsRUFBQWxFLE1BQUEsS0FBQWxHLEVBQUEsRUFBQWtELEVBQUFSLEVBQUE5QixPQUFBMjlCLEVBQUFsVSxFQUFBbm5CLEVBQUFsRCxFQUFBQSxJQUFBLEdBQUEsS0FBQTBDLEVBQUExQyxJQUFBLElBQUFBLEVBQUEsQ0FBQSxHQUFBLE1BQUEwQyxFQUFBMUMsR0FBQSxLQUFBLEtBQUF1K0IsRUFBQW42QixPQUFBLEtBQUEsSUFBQXRFLE9BQUEsU0FBQXNLLEVBQUEsMEJBQUFpZ0IsRUFBQXJlLEtBQUEsSUFBQXV5QixHQUFBQSxFQUFBbjZCLFdBQUFtNkIsR0FBQWxVLENBQUEzbkIsR0FBQUEsRUFBQWhDLE1BQUFWLEdBQUFvTCxLQUFBLEtBQUFoQixFQUFBbTBCLEVBQUF2eUIsTUFBQXV5QixFQUFBdnlCLE1BQUF0SixFQUFBLElBQUEsSUFBQUEsRUFBQSxHQUFBNGQsR0FBQTg3RCxFQUFBaHlFLEVBQUEsUUFBQWtXLElBQUErakIsSUFBQUEsR0FBQS9qQixJQUFBL00sR0FBQStNLEVBQUEvWCxPQUFBZ0wsR0FBQSt4RCxFQUFBaGxELEVBQUEsUUFBQXlOLEdBQUF4YSxFQUFBOFcsR0FBQWl5RCxFQUFBL29FLEtBQUErb0UsRUFBQS9vRSxPQUFBK29FLEVBQUEvb0UsR0FBQXpNLEtBQUF1akIsR0FBQSxRQUFBNEQsR0FBQTFhLEdBQUEsSUFBQSxHQUFBOFcsR0FBQWl5RCxFQUFBL29FLE9BQUE4VyxFQUFBenBCLFFBQUFtNUUsRUFBQTF2RCxFQUFBakMsU0FBQSxRQUFBMnhELEdBQUExdkQsR0FBQUEsRUFBQWdhLEVBQUFoYSxHQUFBOWhCLEtBQUE4aEIsRUFBQXVkLFFBQUF2ZCxFQUFBdWQsWUFBQWhqQyxTQUFBLFdBQUEsTUFBQTZOLE1BQUF6RyxPQUFBLElBQUFzNUQsR0FBQWo3QyxFQUFBcmUsSUFBQSxLQUFBOHRFLEVBQUF4VSxJQUFBQSxFQUFBOStELFFBQUEsTUFBQSxFQUFBLEtBQUEsSUFBQTFHLE9BQUEsK0JBQUEsSUFBQXM4RSxFQUFBdjZFLGVBQUF5akUsR0FBQSxLQUFBLElBQUF4bEUsT0FBQSxVQUFBd2xFLEVBQUEsd0JBQUEsSUFBQWw3RCxHQUFBLEtBQUFrN0QsRUFBQTkrRCxRQUFBLEtBQUE4K0QsRUFBQXY2RCxVQUFBLEVBQUF1NkQsRUFBQXYzQixZQUFBLE1BQUErckMsRUFBQXp2RCxFQUFBam1CLFFBQUFpbUIsRUFBQWptQixPQUFBNDFFLEVBQUEzdkQsRUFBQWptQixTQUFBMDFFLEVBQUF6dkQsRUFBQWptQixPQUFBNEgsTUFBQXFlLEVBQUFqbUIsT0FBQTRILEtBQUEsRUFBQSxJQUFBNUIsSUFBQWd5RSxFQUFBaHlFLEdBQUEsTUFBQTJqQixHQUFBM2pCLEVBQUFpZ0IsRUFBQTloQixLQUFBLEtBQUEsR0FBQTgyRCxLQUFBbWUsR0FBQTlDLEVBQUE4QyxFQUFBbmUsTUFBQWgxQyxFQUFBZzFDLEdBQUFtZSxFQUFBbmUsR0FBQWgxQyxFQUFBbXpELEVBQUFDLFdBQUFwZSxJQUFBLE9BQUErYyxHQUFBOVcsR0FBQWo3QyxHQUFBQSxFQUFBcXpELElBQUFyekQsRUFBQWMsS0FBQTVYLEVBQUFpekIsS0FBQW5jLEVBQUFjLEtBQUEsU0FBQSxlQUFBLFNBQUE1WCxFQUFBK3hELEdBQUEwQixFQUFBMlcsU0FBQUMsV0FBQXZ6RCxHQUFBbm5CLEVBQUFxUSxFQUFBK3hELElBQUEwQixFQUFBNlcsYUFBQXh6RCxFQUFBOVcsR0FBQXBQLFNBQUEsRUFBQXdKLFVBQUEsT0FBQXNnQixFQUFBcTNDLEdBQUFqN0MsRUFBQSxRQUFBK29CLEdBQUE3L0IsR0FBQSxNQUFBQSxHQUFBL00sUUFBQSxLQUFBLEdBQUEsUUFBQThsRCxHQUFBLzRDLEdBQUEsSUFBQSxHQUFBOFcsR0FBQTlXLEVBQUFyTixNQUFBLEtBQUFvL0QsRUFBQTBCLEVBQUEyVyxTQUFBM3hFLEtBQUE5RixNQUFBLEtBQUFtK0IsRUFBQSxFQUFBajZCLEVBQUFpZ0IsRUFBQXpwQixPQUFBd0osRUFBQWk2QixFQUFBQSxJQUFBLE1BQUFoYSxFQUFBZ2EsS0FBQWloQyxFQUFBamhDLEdBQUEsSUFBQSxPQUFBLE9BQUFoYSxFQUFBLEtBQUFpN0MsRUFBQUEsRUFBQTVrRSxNQUFBZ0MsRUFBQTRpRSxFQUFBajdDLEVBQUEsS0FBQWk3QyxFQUFBNTRELFFBQUEsT0FBQSxPQUFBMmQsRUFBQUEsRUFBQXpwQixPQUFBLEtBQUEwa0UsRUFBQTcrRCxPQUFBL0QsRUFBQTRpRSxFQUFBajdDLEVBQUFBLEVBQUF6cEIsT0FBQSxJQUFBLEVBQUE2dEIsT0FBQUMsV0FBQTQyQyxFQUFBeCtELEtBQUEsT0FBQXVqQixFQUFBenBCLFFBQUEwa0UsRUFBQTFrRSxRQUFBLEVBQUEwa0UsRUFBQWw2RCxLQUFBLE1BQUFpZixFQUFBamYsS0FBQSxJQUFBLFFBQUFrMEQsR0FBQS9yRCxFQUFBOFcsR0FBQSxNQUFBeXZELEdBQUF2bUUsS0FBQTZ6RCxFQUFBLzhDLEdBQUFtekQsRUFBQWpxRSxHQUFBbW5FLEVBQUFyd0QsSUFBQXl2RCxFQUFBdm1FLElBQUFpcUUsRUFBQWpxRSxLQUFBaXFFLEVBQUFDLFdBQUFscUUsS0FBQWlxRSxFQUFBQyxXQUFBbHFFLEdBQUFpcUUsRUFBQWpxRSxJQUFBaXFFLEVBQUFqcUUsR0FBQThXLEVBQUE1WCxNQUFBQSxLQUFBLFFBQUF3bkUsR0FBQTFtRSxFQUFBOFcsR0FBQSxNQUFBMnZELEdBQUF6bUUsR0FBQThXLEVBQUE5VyxFQUFBOFcsRUFBQXJlLEtBQUF1SCxFQUFBd21FLEVBQUExdkQsR0FBQTVYLEtBQUEsUUFBQTh2QixHQUFBaHZCLEVBQUFuSixFQUFBaTFELEVBQUEzOEQsRUFBQTRkLEVBQUF5TixFQUFBRSxFQUFBOHJELEVBQUF6YSxHQUFBLFFBQUEyYSxHQUFBNXZELEVBQUFpN0MsRUFBQWpoQyxFQUFBZzdCLEdBQUEsR0FBQWthLEdBQUFobUUsRUFBQSs4QixXQUFBLGlCQUFBam1CLEVBQUFpN0MsRUFBQWpoQyxFQUFBLElBQUFrMUMsRUFBQTUxRCxpQkFBQSxNQUFBc0ssR0FBQTh1RCxTQUFBZSxDQUFBLEtBQUF2RSxFQUFBd0UsTUFBQSxNQUFBLEtBQUEsSUFBQTFlLEVBQUEyZSxPQUFBLE1BQUEvdkQsR0FBQTh1RCxTQUFBa0IsQ0FBQSxJQUFBdjdFLEdBQUFza0UsRUFBQWtYLFdBQUE5ekUsRUFBQW84QixLQUFBK3lDLEVBQUF3RSxNQUFBLE9BQUFyN0UsR0FBQThDLEtBQUEsV0FBQSxNQUFBOUMsS0FBQXNrRSxFQUFBa1gsV0FBQTVCLEdBQUFqeUQsRUFBQU0sUUFBQXF6RCxRQUFBLEVBQUFoWCxFQUFBNlcsYUFBQXh6RCxFQUFBeXlDLEdBQUF6eUMsRUFBQTh6RCxTQUFBOXpELEVBQUFNLFdBQUEsV0FBQSxNQUFBbXpELEtBQUE3dkQsRUFBQTh1RCxTQUFBcjZFLEVBQUEsUUFBQTYvQixHQUFBaHZCLEVBQUEreEQsRUFBQWpoQyxFQUFBazFDLEVBQUF2NUUsRUFBQWtELEdBQUEsUUFBQW1wRCxLQUFBLEdBQUFpWixLQUFBLE9BQUE2QixHQUFBNXpELEVBQUE2cUUsTUFBQSxTQUFBLzVDLEVBQUFqNkIsR0FBQSxHQUFBbXZFLEdBQUFsMUMsRUFBQXVELFNBQUF2RCxFQUFBdUQsVUFBQXIwQixFQUFBcTBCLFFBQUF2RCxFQUFBdUQsVUFBQTJ4QyxHQUFBcGdELFdBQUEsV0FBQSxNQUFBa21DLEdBQUFnZixLQUFBajBFLEdBQUFrMEUsS0FBQWo2QyxFQUFBaGMsT0FBQXJvQixFQUFBNGhDLFFBQUFhLE9BQUExVSxFQUFBcWUsT0FBQWxwQyxFQUFBa3BDLFVBQUEsS0FBQWs1QixFQUFBeCtELEtBQUF3WixFQUFBc25CLFFBQUEyeEMsRUFBQXY1RSxFQUFBNGhDLFFBQUE1aEMsRUFBQTRuQyxRQUFBcjBCLEdBQUEvTixLQUFBLFNBQUE4L0QsR0FBQSxHQUFBb1YsRUFBQXIyQyxFQUFBazZDLHFCQUFBOUUsRUFBQXAxQyxFQUFBazZDLG9CQUFBLENBQUEsR0FBQWxmLEdBQUFoMUMsRUFBQXZtQixVQUFBeTFFLEVBQUF2NUUsRUFBQTRoQyxRQUFBMGpDLEdBQUFrWixhQUFBOTdFLEVBQUFxSyxPQUFBczNCLEVBQUFrNkMsbUJBQUEsS0FBQWxmLE9BQUFpRyxHQUFBa1osYUFBQW42QyxFQUFBdDFCLFVBQUF1MkQsR0FBQWwxQixRQUFBNzhCLEVBQUEreEQsRUFBQW1aLGVBQUFwNkMsRUFBQXJVLGFBQUFod0IsRUFBQW9LLEdBQUFrN0QsT0FBQWw3RCxFQUFBNmIsSUFBQXEvQyxHQUFBOS9ELEtBQUEsV0FBQSxNQUFBeEYsR0FBQTRoQyxVQUFBLEdBQUE3VCxHQUFBc1csRUFBQWloQyxFQUFBL21DLEVBQUFockIsRUFBQWt2QixPQUFBZzZDLFNBQUFuWCxHQUFBb1UsR0FBQWdGLGFBQUEzd0QsRUFBQS90QixHQUFBNG5DLFFBQUF0bkIsRUFBQXNuQixRQUFBcjBCLEVBQUFxMEIsUUFBQTh4QyxFQUFBMTVFLEVBQUE0bkMsUUFBQXIwQixFQUFBLElBQUEwYSxJQUFBanVCLEVBQUE0bkMsUUFBQXBpQyxLQUFBLFNBQUErTixHQUFBdlQsRUFBQTRoQyxRQUFBcnVCLElBQUEsT0FBQWdtRSxJQUFBdHJELEVBQUFubkIsS0FBQXl5RSxHQUFBbnZFLEVBQUE2YixJQUFBZ0ksR0FBQXpvQixLQUFBNm1ELEdBQUE3bUQsS0FBQSxTQUFBK04sR0FBQSxNQUFBdlQsS0FBQSxHQUFBczhFLEdBQUFseUUsRUFBQWk3QixPQUFBLEdBQUF2bEMsT0FBQSwwQkFBQTA5RSxFQUFBcHpFLEVBQUFpN0IsT0FBQSxHQUFBdmxDLE9BQUEseUJBQUFnK0UsRUFBQTF6RSxFQUFBaTdCLE9BQUEsR0FBQXZsQyxPQUFBLHVCQUFBbStFLEVBQUE3ekUsRUFBQWk3QixPQUFBLEdBQUF2bEMsT0FBQSxxQkFBQSxPQUFBczZFLEdBQUEveEQsUUFBQXVmLFFBQUEsS0FBQWhHLFNBQUE4OEMsa0JBQUExWCxHQUFBdmtDLFVBQUFzYSxRQUFBcTlCLEVBQUE3eEUsS0FBQW8xRSxTQUFBdkQsRUFBQThELFdBQUEsTUFBQWxYLEVBQUFwNUQsT0FBQSxTQUFBMkYsR0FBQSxNQUFBeXpELEdBQUE2VyxhQUFBN1csRUFBQWpxQixRQUFBaHZCLEdBQUFuZ0IsT0FBQTJGLElBQUEsRUFBQXBQLFNBQUEsRUFBQWlvQyxRQUFBLEtBQUE0NkIsRUFBQTJYLEdBQUEsU0FBQXByRSxFQUFBOFcsRUFBQWk3QyxHQUFBLE1BQUEwQixHQUFBNlcsYUFBQXRxRSxFQUFBOFcsRUFBQWl2RCxHQUFBbjFFLFNBQUEsRUFBQXk2RSxTQUFBNVgsRUFBQTJXLFVBQUFyWSxLQUFBMEIsRUFBQTZXLGFBQUEsU0FBQXh6RCxFQUFBaTdDLEVBQUFqRyxHQUFBaUcsRUFBQUEsTUFBQWpHLEVBQUFpYSxHQUFBM3JFLFVBQUEsRUFBQXhKLFNBQUEsRUFBQXk2RSxTQUFBLEtBQUF4eUMsUUFBQSxFQUFBeCtCLFFBQUEsRUFBQW93RSxRQUFBLEdBQUEzZSxNQUFBLElBQUFrYSxHQUFBcjJFLEVBQUE4akUsRUFBQTJXLFNBQUFyOUQsRUFBQTBtRCxFQUFBdmtDLE9BQUFpM0MsRUFBQXgyRSxFQUFBK00sS0FBQThwRSxFQUFBMXRCLEVBQUFoaUMsRUFBQWcxQyxFQUFBdWYsVUFBQXhyQyxFQUFBa3lCLEVBQUEsSUFBQSxLQUFBOEIsRUFBQTJTLEdBQUEsQ0FBQSxHQUFBenRCLElBQUF3USxHQUFBenlDLEVBQUE4ekQsU0FBQTdZLEVBQUEzNkMsUUFBQTAwQyxHQUFBQyxFQUFBMmEsRUFBQTN0QixFQUFBcHBELEVBQUFxRixLQUFBK1gsRUFBQSsrQyxFQUFBLElBQUFDLEVBQUEsTUFBQUEsRUFBQSxJQUFBajFDLEVBQUFpaUMsRUFBQXdRLEdBQUF3SSxFQUFBaFosRUFBQTZ4QixTQUFBOWUsRUFBQS9TLEVBQUEzaEMsUUFBQW92RCxFQUFBMXRCLEVBQUFoaUMsRUFBQWcxQyxFQUFBdWYsV0FBQXhYLEVBQUEyUyxHQUFBLENBQUEsSUFBQTFhLEVBQUF1ZixTQUFBLEtBQUEsSUFBQTkrRSxPQUFBLGtCQUFBdXFCLEVBQUEsSUFBQSxNQUFBLElBQUF2cUIsT0FBQSxzQkFBQXVxQixFQUFBLGlCQUFBZzFDLEVBQUF1ZixTQUFBLE1BQUEsR0FBQTdFLEVBQUEyRCxHQUFBLEtBQUEsSUFBQTU5RSxPQUFBLHdDQUFBdXFCLEVBQUEsSUFBQSxJQUFBZzFDLEVBQUFsN0QsVUFBQW1oRSxFQUFBdGxFLEVBQUErdEIsRUFBQXUzQyxNQUFBMEIsRUFBQTJXLFNBQUE1RCxLQUFBQSxFQUFBdDNDLE9BQUFrNkMsWUFBQXJYLEdBQUEsTUFBQTJZLEVBQUEzWSxHQUFBeVUsRUFBQXQzQyxPQUFBbTNDLFNBQUF0VSxHQUFBajdDLEVBQUEwdkQsQ0FBQSxJQUFBcUMsR0FBQS94RCxFQUFBcGEsS0FBQTZ0RSxFQUFBLEVBQUFlLEVBQUF6QyxFQUFBMEIsR0FBQW5XLEVBQUF5UyxFQUFBL3hELE9BQUFxeUQsSUFBQSxJQUFBcmIsRUFBQXp4RCxRQUFBLEdBQUFrc0UsRUFBQXphLEVBQUF6eEQsU0FBQW9zRSxFQUFBM2EsRUFBQXp4RCxRQUFBLENBQUEsR0FBQW9zRSxFQUFBM2EsRUFBQXp4RCxVQUFBeXhELEVBQUF6eEQsT0FBQTVCLEtBQUEsS0FBQSxJQUFBbE0sT0FBQSw4QkFBQSxJQUFBMjVFLEdBQUFwYSxFQUFBenhELFVBQUEsRUFBQThyRSxFQUFBLEdBQUFydEIsRUFBQWdULEVBQUF6eEQsT0FBQSxJQUFBeXhELEVBQUF6eEQsU0FBQTZyRSxFQUFBLEtBQUEsSUFBQTM1RSxPQUFBLDBCQUFBZzZFLEVBQUF6YSxFQUFBenhELFFBQUF5eEQsRUFBQXp4RCxPQUFBeXhELEVBQUF6eEQsT0FBQTVCLE1BQUEsSUFBQSxNQUFBNnlFLEdBQUFBLElBQUFuRixFQUFBb0UsSUFBQWUsSUFBQXBGLEdBQUE5UixFQUFBK1MsRUFBQW9ELEdBQUFlLEVBQUF4MkQsT0FBQXkxRCxJQUFBZSxFQUFBekMsRUFBQTBCLFFBQUEsTUFBQWUsR0FBQUEsSUFBQW5GLEVBQUFvRSxJQUFBZSxFQUFBQyxVQUFBcEMsU0FBQXBYLEVBQUFobEQsSUFBQXFuRCxFQUFBK1MsRUFBQW9ELEdBQUFlLEVBQUF4MkQsT0FBQXkxRCxJQUFBZSxFQUFBekMsRUFBQTBCLEVBQUEsSUFBQXBXLEVBQUFyOUMsRUFBQWk3QyxFQUFBcGlFLEVBQUFvZCxFQUFBcW5ELEVBQUF0SSxHQUFBLE1BQUFqc0IsS0FBQWt5QixFQUFBLEtBQUFseUIsR0FBQTR6QixFQUFBdmtDLE9BQUE2aUMsRUFBQXlaLEVBQUEvWCxFQUFBdmtDLE9BQUExVSxHQUFBc3hDLEVBQUExeEQsVUFBQTBjLEVBQUF1ekQsV0FBQXZ6RCxFQUFBdXpELFVBQUF6eUQsTUFBQThDLEVBQUFubkIsS0FBQXVqQixFQUFBdXpELFVBQUF6eUQsSUFBQW02QyxHQUFBMFgsZUFBQSxFQUFBejhFLFFBQUEsWUFBQTgrRCxFQUFBMXhELFdBQUFzZ0IsRUFBQTh1RCxRQUFBLElBQUEvVixFQUFBa1gsV0FBQSxLQUFBOXpFLEVBQUFvOEIsS0FBQXdnQyxFQUFBanFCLFFBQUEsSUFBQXVvQixFQUFBL21DLEVBQUFsVSxFQUFBb1ksT0FBQWc2QyxTQUFBblgsT0FBQWpHLEVBQUFqekIsUUFBQTc0QixFQUFBKzhCLFdBQUEsb0JBQUFqbUIsRUFBQTloQixLQUFBKzhELEVBQUFwaUUsRUFBQXFGLEtBQUErWCxHQUFBcUQsaUJBQUEsTUFBQXBRLEdBQUErOEIsV0FBQSxxQkFBQWptQixFQUFBOWhCLEtBQUErOEQsRUFBQXBpRSxFQUFBcUYsS0FBQStYLEdBQUEyTixFQUFBOHVELFNBQUFTLENBQUEsS0FBQSxHQUFBclcsR0FBQS84RCxFQUFBbzhCLEtBQUFtaEMsR0FBQWdULEVBQUFtRCxFQUFBbkQsRUFBQXlCLEVBQUF4N0UsT0FBQSs1RSxJQUFBa0UsRUFBQXpDLEVBQUF6QixHQUFBaFQsRUFBQStTLEVBQUFDLEdBQUF0MkMsRUFBQXNqQyxHQUFBUixFQUFBNWtDLEVBQUFzOEMsRUFBQXZaLEVBQUF1WixJQUFBeDBELEVBQUE4OEMsRUFBQVEsRUFBQXRJLEVBQUEsSUFBQTVrQixHQUFBdXNCLEVBQUFrWCxXQUFBL1csRUFBQTNoRSxLQUFBLFdBQUEsR0FBQTYrQixHQUFBajZCLEVBQUFtdkUsQ0FBQSxJQUFBdlMsRUFBQWtYLGFBQUF6akMsRUFBQSxNQUFBNmhDLEVBQUEsS0FBQWo0QyxFQUFBcTFDLEVBQUE5NEUsT0FBQSxFQUFBeWpDLEdBQUF5NUMsRUFBQXo1QyxJQUFBazFDLEVBQUFHLEVBQUFyMUMsR0FBQWsxQyxFQUFBaHhFLEtBQUF5MkUsUUFBQXQ4RSxFQUFBcUssT0FBQXdzRSxFQUFBaHhFLEtBQUF5MkUsT0FBQXpGLEVBQUFoeEUsS0FBQWd4RSxFQUFBbHhELE9BQUF1WixTQUFBMjNDLEVBQUFseEQsT0FBQSxJQUFBLEtBQUFnYyxFQUFBeTVDLEVBQUF6NUMsRUFBQSszQyxFQUFBeDdFLE9BQUF5akMsSUFBQWo2QixFQUFBZ3lFLEVBQUEvM0MsR0FBQWo2QixFQUFBaWUsT0FBQXF5RCxFQUFBcjJDLEdBQUFqNkIsRUFBQTdCLEtBQUEwMkUsU0FBQXY4RSxFQUFBcUssT0FBQTNDLEVBQUE3QixLQUFBMDJFLFFBQUE3MEUsRUFBQTdCLEtBQUE2QixFQUFBaWUsT0FBQXVaLFFBQUEsT0FBQXdSLEtBQUFreUIsRUFBQSxLQUFBbHlCLEdBQUE0ekIsRUFBQWtYLGFBQUF6akMsRUFBQTZoQyxHQUFBdFYsRUFBQTJXLFNBQUF0ekQsRUFBQTI4QyxFQUFBanFCLFFBQUExeUIsRUFBQTloQixLQUFBeStELEVBQUF2a0MsT0FBQTZpQyxFQUFBeVosRUFBQS9YLEVBQUF2a0MsT0FBQTFVLEdBQUFpNUMsRUFBQWtYLFdBQUEsS0FBQTdlLEVBQUExeEQsVUFBQTBjLEVBQUF1ekQsV0FBQTN2RCxFQUFBbm5CLEtBQUF1akIsRUFBQXV6RCxVQUFBenlELElBQUFkLEVBQUF1ekQsVUFBQXYxRCxPQUFBdVosUUFBQTg4QyxjQUFBMUIsZUFBQSxFQUFBejhFLFFBQUEsWUFBQTgrRCxFQUFBMXhELFdBQUEweEQsRUFBQWp6QixRQUFBNzRCLEVBQUErOEIsV0FBQSxzQkFBQWptQixFQUFBOWhCLEtBQUErOEQsRUFBQXBpRSxFQUFBcUYsS0FBQStYLEdBQUEyTixFQUFBOHVELFFBQUEsR0FBQS9WLEVBQUFqcUIsVUFBQSxTQUFBMVksR0FBQSxNQUFBMmlDLEdBQUFrWCxhQUFBempDLEVBQUE2aEMsR0FBQXRWLEVBQUFrWCxXQUFBLEtBQUEzRSxFQUFBaG1FLEVBQUErOEIsV0FBQSxvQkFBQWptQixFQUFBOWhCLEtBQUErOEQsRUFBQXBpRSxFQUFBcUYsS0FBQStYLEVBQUErakIsR0FBQWsxQyxFQUFBNTFELGtCQUFBc0ssRUFBQTh1RCxTQUFBM3lFLEVBQUFpN0IsT0FBQWhCLEtBQUEsT0FBQW9XLElBQUF1c0IsRUFBQWhILEdBQUEsU0FBQXpzRCxFQUFBOFcsRUFBQWdhLEdBQUFBLEVBQUFpMUMsR0FBQXNGLFNBQUE1WCxFQUFBMlcsVUFBQXQ1QyxNQUFBLElBQUFqNkIsR0FBQWlpRCxFQUFBOTRDLEVBQUE4d0IsRUFBQXU2QyxTQUFBLE9BQUF4WCxHQUFBaDlELEdBQUE0OEQsRUFBQTJXLFdBQUF2ekUsR0FBQSxFQUFBaWdCLEVBQUFubkIsRUFBQWtILEVBQUFxNEIsT0FBQW0zQyxTQUFBdnZELEdBQUEwRCxJQUFBLEVBQUF1M0MsR0FBQTBCLEVBQUFrWSxTQUFBLFNBQUEzckUsRUFBQThXLEVBQUFnYSxHQUFBLEdBQUFBLEVBQUFpMUMsR0FBQXNGLFNBQUE1WCxFQUFBMlcsVUFBQXQ1QyxPQUFBeTFDLEVBQUF2bUUsSUFBQTYvQixFQUFBNy9CLEdBQUEsQ0FBQSxJQUFBKzRDLEVBQUEvNEMsR0FBQSxPQUFBLENBQUFBLEdBQUF5ekQsRUFBQTJXLFNBQUEzeEUsS0FBQSxHQUFBNUIsR0FBQWlpRCxFQUFBOTRDLEVBQUE4d0IsRUFBQXU2QyxTQUFBLE9BQUF4WCxHQUFBaDlELEdBQUFnOUQsRUFBQUosRUFBQTJXLFNBQUF1QixTQUFBOTBFLEVBQUE0QixPQUFBcWUsRUFBQW5uQixFQUFBa0gsRUFBQXE0QixPQUFBbTNDLFNBQUF2dkQsR0FBQTBELEVBQUF3ckQsRUFBQWx2RCxLQUFBLEdBQUEsRUFBQWk3QyxHQUFBMEIsRUFBQXY2QyxLQUFBLFNBQUFsWixFQUFBOFcsRUFBQWdhLEdBQUFBLEVBQUFpMUMsR0FBQTZGLE9BQUEsRUFBQWg3RSxTQUFBLEVBQUErNEUsVUFBQSxFQUFBMEIsU0FBQTVYLEVBQUEyVyxVQUFBdDVDLE1BQUEsSUFBQWo2QixHQUFBaWlELEVBQUE5NEMsRUFBQTh3QixFQUFBdTZDLFNBQUEsS0FBQXhYLEVBQUFoOUQsR0FBQSxNQUFBLEtBQUFpNkIsR0FBQWxnQyxVQUFBa21CLEVBQUFycUIsRUFBQSt0QixFQUFBMUQsTUFBQTI4QyxFQUFBMlcsU0FBQXZ6RSxHQUFBLElBQUFpMUQsR0FBQWoxRCxHQUFBaTZCLEVBQUE4NkMsTUFBQS8wRSxFQUFBd3pFLFVBQUF4ekUsQ0FBQSxPQUFBaTFELElBQUFBLEVBQUFsMEMsTUFBQW02QyxHQUFBLE9BQUFqRyxFQUFBbDBDLElBQUE4QyxFQUFBeEIsS0FBQTR5QyxFQUFBbDBDLElBQUFvVCxFQUFBbjBCLEVBQUFxNEIsT0FBQWc2QyxTQUFBejBFLE9BQUEsS0FBQXFpQixRQUFBNnlELFNBQUE3NEMsRUFBQTY0QyxXQUFBLE1BQUFsVyxFQUFBajVELElBQUEsU0FBQXdGLEVBQUE4VyxHQUFBLEdBQUEsSUFBQWxxQixVQUFBUyxPQUFBLE1BQUE4NEUsR0FBQUgsRUFBQTZDLEdBQUEsU0FBQTdvRSxHQUFBLE1BQUE2b0UsR0FBQTdvRSxHQUFBaEwsTUFBQSxJQUFBKzhELEdBQUFqWixFQUFBOTRDLEVBQUE4VyxHQUFBMjhDLEVBQUEyVyxTQUFBLE9BQUFyWSxJQUFBQSxFQUFBLzhELEtBQUErOEQsRUFBQS84RCxLQUFBLE1BQUF5K0QsRUFBQSxRQUFBVSxHQUFBbjBELEVBQUE4VyxFQUFBaTdDLEVBQUFqaEMsRUFBQWo2QixFQUFBaTFELEdBQUEsUUFBQWthLEdBQUFobUUsRUFBQThXLEVBQUFpN0MsR0FBQSxRQUFBamhDLEdBQUFoYSxHQUFBLE1BQUEsVUFBQTlXLEVBQUFrdkIsT0FBQXBZLEdBQUExYyxTQUFBLEdBQUF2RCxHQUFBbUosRUFBQWt2QixPQUFBZzZDLFNBQUFwcUUsT0FBQWd5QixHQUFBZzdCLEVBQUEvK0MsRUFBQTVYLFVBQUE2SyxFQUFBa3ZCLFFBQUF6NkIsT0FBQW9DLElBQUFtdkUsRUFBQSxHQUFBb0IsR0FBQU0sU0FBQTViLEVBQUEsT0FBQWthLEdBQUFtRCxTQUFBcnlELEVBQUFpN0MsR0FBQSxPQUFBakcsRUFBQXp4RCxRQUFBMkYsSUFBQSt4RCxJQUFBbDdELElBQUFrN0QsRUFBQWo5QyxRQUFBOVUsRUFBQWhMLEtBQUE2MkUsa0JBQUEsR0FBQTdGLEVBQUFqVSxFQUFBamhDLEVBQUFoYSxLQUFBLEVBQUEsT0FBQSxHQUFBK3ZELEdBQUFwVCxFQUFBb1YsS0FBQUUsS0FBQW9CLEVBQUEsV0FBQUYsR0FBQXA1RSxPQUFBLFNBQUFtUCxHQUFBLEdBQUE2ekQsRUFBQTd6RCxFQUFBblAsU0FBQW1QLEVBQUFuUCxPQUFBLE1BQUFpb0QsR0FBQTk0QyxFQUFBblAsT0FBQSxJQUFBaW1CLEdBQUEsZ0JBQUFyTCxLQUFBekwsRUFBQXZILEtBQUEsT0FBQXFlLEdBQUFnaUMsRUFBQWhpQyxFQUFBLElBQUErdkQsR0FBQWp0RSxLQUFBLFNBQUFvRyxHQUFBLE1BQUFBLEdBQUFuUCxRQUFBbVAsRUFBQW5QLE9BQUErSSxPQUFBb0csRUFBQXBHLEtBQUFvRyxFQUFBaEwsS0FBQTRFLEtBQUFtc0UsS0FBQS9sRSxFQUFBblAsT0FBQStJLEtBQUFvRyxFQUFBcEcsT0FBQW9HLEVBQUFwRyxNQUFBZ2UsSUFBQSxTQUFBNVgsR0FBQSxHQUFBOFcsR0FBQTlXLEVBQUE0WCxJQUFBbTZDLEdBQUE3aUMsT0FBQWx2QixFQUFBa3ZCLFdBQUEsSUFBQXEzQyxFQUFBenZELEdBQUEsTUFBQSxLQUFBQSxFQUFBN2lCLE9BQUEsR0FBQTRDLEVBQUE2QyxRQUFBb2QsRUFBQXRmLFVBQUEsR0FBQXU2RCxJQUFBL3hELEVBQUFuUCxPQUFBdzVFLFdBQUF4RCxHQUFBanZELElBQUFuakIsT0FBQXFpQixFQUFBaTdDLEVBQUEsS0FBQWo3QyxHQUFBamdCLEVBQUE4eEUsVUFBQTd4RCxHQUFBLE1BQUFBLEVBQUEsTUFBQSxJQUFBdnFCLE9BQUEsZ0JBQUF1cUIsRUFBQSxlQUFBOVcsRUFBQSxNQUFBcXFFLFVBQUEsU0FBQXJxRSxHQUFBLE1BQUFBLEdBQUE0WCxJQUFBNVgsRUFBQUEsRUFBQW5QLE9BQUFtUCxFQUFBblAsT0FBQXc1RSxVQUFBLE1BQUFrQixVQUFBLFNBQUF2ckUsR0FBQSxHQUFBOFcsR0FBQTlXLEVBQUE0WCxLQUFBNVgsRUFBQTRYLElBQUFzWCxRQUFBLEdBQUFrNEMsR0FBQU0sUUFBQSxPQUFBOVQsR0FBQTV6RCxFQUFBa3ZCLFdBQUEsU0FBQWx2QixFQUFBK3hELEdBQUFqN0MsRUFBQWk3QyxLQUFBajdDLEVBQUFpN0MsR0FBQSxHQUFBcVYsR0FBQUMsTUFBQXRWLEVBQUEsS0FBQS94RCxFQUFBLGFBQUE4VyxHQUFBb1ksT0FBQSxTQUFBbHZCLEdBQUEsTUFBQUEsR0FBQW5QLFFBQUFtUCxFQUFBblAsT0FBQXErQixPQUFBNjJDLEVBQUEvbEUsRUFBQW5QLE9BQUFxK0IsT0FBQXU0QyxRQUFBem5FLEVBQUF1ckUsV0FBQSxHQUFBbkUsR0FBQU0sVUFBQW1ELE1BQUEsU0FBQTdxRSxHQUFBLEdBQUE4VyxLQUFBLE9BQUE4OEMsR0FBQUMsRUFBQTd6RCxFQUFBNnFFLE9BQUE3cUUsRUFBQTZxRSxPQUFBaUIsR0FBQTlyRSxHQUFBLFNBQUEreEQsRUFBQWpoQyxHQUFBQSxFQUFBNzlCLFFBQUEsS0FBQSxJQUFBNjlCLEdBQUEsSUFBQTl3QixFQUFBblAsT0FBQTRILE1BQUFxZSxFQUFBZ2EsR0FBQWloQyxJQUFBajdDLEdBQUFwYSxLQUFBLFNBQUFzRCxHQUFBLE1BQUFBLEdBQUFuUCxPQUFBbVAsRUFBQW5QLE9BQUE2TCxLQUFBakksT0FBQXVMLE9BQUEyckUsU0FBQSxTQUFBM3JFLEdBQUEsR0FBQThXLEdBQUE5VyxFQUFBblAsT0FBQWsxRSxLQUFBL2xFLEVBQUFuUCxPQUFBODZFLFlBQUEsT0FBQTcwRCxHQUFBOVcsRUFBQXZILE9BQUEsRUFBQXFlLEdBQUFvekQsY0FBQXJELEdBQUFMLEdBQUEvdEUsS0FBQSxHQUFBbWYsSUFBQSxJQUFBaXpELE1BQUEsS0FBQWtCLFlBQUEsSUFBQWxGLEVBQUF3RCxVQUFBLEtBQUFuckUsS0FBQU4sVUFBQW10RCxFQUFBN3NELEtBQUFrWixNQUFBc3VELEVBQUF4bkUsS0FBQW1TLEtBQUEyZCxFQUFBQSxFQUFBM2MsU0FBQSxhQUFBLEtBQUEsUUFBQSxZQUFBLFdBQUEsZUFBQSxhQUFBLFlBQUEsc0JBQUEsUUFBQThoRCxLQUFBLFFBQUFuMEQsR0FBQUEsRUFBQThXLEdBQUEsT0FBQWcwRCxLQUFBLFNBQUEvWSxFQUFBamhDLEdBQUEsR0FBQWo2QixHQUFBaTFELEdBQUEvK0QsU0FBQSxLQUFBeU8sV0FBQSxLQUFBdXZFLEtBQUEsS0FBQWoyRCxPQUFBLEtBQUErakIsUUFBQSxFQUFBcEQsT0FBQSxFQUFBdkcsVUFBQSxPQUFBNEIsR0FBQWkxQyxFQUFBamEsRUFBQWg3QixHQUFBQSxFQUFBaTZDLE9BQUFsMEUsRUFBQWlnQixFQUFBZ3dELFdBQUFoMkMsRUFBQWk2QyxLQUFBajZDLEVBQUE1QixPQUFBNEIsRUFBQWhjLFNBQUFqZSxHQUFBaTZCLEVBQUErSCxRQUFBNzRCLEVBQUErOEIsV0FBQSxzQkFBQWpNLEdBQUFqNkIsSUFBQXFJLEtBQUFtUyxLQUFBclIsRUFBQUEsRUFBQXFTLFNBQUEsYUFBQSxvQkFBQSxRQUFBdzBELEtBQUEsR0FBQTdtRSxJQUFBLENBQUFkLE1BQUE4c0UsZ0JBQUEsV0FBQWhzRSxHQUFBLEdBQUFkLEtBQUFtUyxNQUFBLGdCQUFBLFdBQUEsU0FBQXlGLEVBQUFpN0MsR0FBQSxNQUFBL3hELEdBQUE4VyxFQUFBLFNBQUE5VyxHQUFBLE1BQUEreEQsR0FBQSxXQUFBL3hELEVBQUEsR0FBQW1XLGtCQUFBLEdBQUEsTUFBQSxRQUFBczlDLEdBQUF6ekQsRUFBQSt4RCxFQUFBamhDLEVBQUFqNkIsR0FBQSxRQUFBaTFELEtBQUEsTUFBQWlHLEdBQUEzOEMsSUFBQSxTQUFBcFYsR0FBQSxNQUFBK3hELEdBQUEzOEMsSUFBQXBWLEdBQUEreEQsRUFBQXYzRCxJQUFBd0YsR0FBQSxNQUFBLFNBQUFBLEdBQUEsSUFBQSxNQUFBK3hELEdBQUF2M0QsSUFBQXdGLEdBQUEsTUFBQThXLEdBQUEsTUFBQSxRQUFBLFFBQUFrdkQsR0FBQWhtRSxFQUFBOFcsR0FBQSxHQUFBaTdDLEdBQUEsV0FBQSxPQUFBOUgsTUFBQSxTQUFBanFELEVBQUE4VyxFQUFBaTdDLEdBQUFqN0MsRUFBQXd3QyxNQUFBdG5ELEdBQUEreEQsS0FBQTVILE1BQUEsU0FBQW5xRCxFQUFBOFcsR0FBQTlXLEVBQUFzYixTQUFBeEUsTUFBQSxJQUFBbm5CLEVBQUEsT0FBQXM2RCxNQUFBLFNBQUFqcUQsRUFBQThXLEVBQUFpN0MsR0FBQSxHQUFBamhDLEdBQUFuaEMsRUFBQXM2RCxNQUFBanFELEVBQUEsS0FBQThXLEVBQUFpN0MsRUFBQWpoQyxJQUFBQSxFQUFBNytCLE1BQUE2K0IsRUFBQTcrQixLQUFBOC9ELElBQUE1SCxNQUFBLFNBQUFucUQsRUFBQThXLEdBQUEsR0FBQWk3QyxHQUFBcGlFLEVBQUF3NkQsTUFBQW5xRCxFQUFBOFcsRUFBQWk3QyxJQUFBQSxFQUFBOS9ELE1BQUE4L0QsRUFBQTkvRCxLQUFBNmtCLElBQUEsSUFBQXJxQixFQUFBLENBQUEsR0FBQXFrQyxHQUFBcmtDLEdBQUFBLEVBQUFxcUIsRUFBQTlXLEVBQUEsUUFBQWlxRCxNQUFBLFNBQUFqcUQsRUFBQThXLEVBQUFpN0MsR0FBQWpoQyxFQUFBbTVCLE1BQUFqcUQsRUFBQSxLQUFBOFcsR0FBQWk3QyxLQUFBNUgsTUFBQSxTQUFBbnFELEVBQUE4VyxHQUFBZ2EsRUFBQXE1QixNQUFBbnFELEdBQUE4VyxNQUFBLE1BQUFpN0MsS0FBQSxHQUFBNWlFLEdBQUEyOEQsSUFBQXIvRCxFQUFBMEMsRUFBQSxhQUFBUSxFQUFBUixFQUFBLFlBQUE2N0IsR0FBQXhOLFNBQUEsTUFBQXVELFVBQUEsRUFBQXpELFNBQUEsSUFBQWlELFdBQUEsVUFBQTdtQixRQUFBLFNBQUFxNEQsRUFBQWpHLEVBQUEzOEQsR0FBQSxNQUFBLFVBQUE0aUUsRUFBQWpHLEVBQUFyL0QsR0FBQSxRQUFBa0QsS0FBQW9kLElBQUFBLEVBQUF1TyxTQUFBdk8sRUFBQSxNQUFBeU4sSUFBQUEsRUFBQXhlLFdBQUF3ZSxFQUFBLE1BQUFzK0IsSUFBQWpaLEVBQUFzcUIsTUFBQXJSLEVBQUEsV0FBQS9yQyxFQUFBLE9BQUFBLEVBQUErckMsRUFBQUEsRUFBQSxNQUFBLFFBQUE5dEIsR0FBQWc3QyxHQUFBLEdBQUFoN0MsR0FBQWplLEVBQUFnOEQsRUFBQWhYLEVBQUF0bEUsRUFBQXEvRCxFQUFBajFELEdBQUFraUQsRUFBQWhzQyxHQUFBL00sRUFBQW9xRSxVQUFBcHFFLEVBQUFvcUUsU0FBQXQxRCxPQUFBL0gsRUFBQSxJQUFBaTVELEdBQUFqdEIsSUFBQW90QixFQUFBLENBQUFuN0MsRUFBQSttQyxFQUFBaHpDLE9BQUFvbkQsRUFBQW5tRSxFQUFBb3FFLFNBQUF0MUQsT0FBQS9ILEVBQUEsSUFBQWcvQyxHQUFBNThELEVBQUE2N0IsRUFBQSxTQUFBaHJCLEdBQUE2L0IsRUFBQW9xQixNQUFBanFELEVBQUE4ckQsRUFBQSxXQUFBdHhDLEdBQUFBLEVBQUFteUIsTUFBQSwrQkFBQTcxQixFQUFBdmxCLFVBQUFpMUUsS0FBQUEsR0FBQXpVLEVBQUE1bEIsTUFBQXE2QixLQUFBMTFDLEVBQUE5d0IsS0FBQXJRLEtBQUFtcEQsR0FBQWlULEVBQUF2eEMsRUFBQXdRLEVBQUF4USxFQUFBbXlCLE1BQUEsc0JBQUFueUIsRUFBQTJ4QixNQUFBenhCLElBQUEsR0FBQTNOLEdBQUErckMsRUFBQXQrQixFQUFBMnJELEVBQUF6ckQsRUFBQWp1QixFQUFBMnBDLFFBQUEsR0FBQW93QyxFQUFBLzVFLEVBQUEycUUsV0FBQXYzQixFQUFBbW1DLEVBQUF2NUUsRUFBQXNsRSxFQUFBQSxHQUFBenNDLElBQUEsc0JBQUEsV0FBQTBGLEdBQUEsS0FBQSttQyxFQUFBenNDLElBQUEsc0JBQUEsV0FBQTBGLEdBQUEsS0FBQUEsR0FBQSxLQUFBLE9BQUFBLEdBQUEsUUFBQTY5QyxHQUFBN29FLEVBQUE4VyxFQUFBaTdDLEVBQUFqaEMsR0FBQSxPQUFBdFQsU0FBQSxNQUFBRixTQUFBLEtBQUE1akIsUUFBQSxTQUFBN0MsR0FBQSxHQUFBaTFELEdBQUFqMUQsRUFBQUcsTUFBQSxPQUFBLFVBQUFILEVBQUFtdkUsRUFBQTcyRSxHQUFBLEdBQUExQyxHQUFBc2xFLEVBQUFxWSxTQUFBejZFLEVBQUFvNUUsRUFBQWx5RSxFQUFBMUgsRUFBQTYyRSxFQUFBbDFDLEdBQUE5RixFQUFBditCLEdBQUFBLEVBQUFxb0IsT0FBQW5sQixFQUFBLElBQUFxN0IsRUFBQSxDQUFBZzdDLEVBQUFwc0UsS0FBQSxXQUFBbkIsS0FBQTlJLEVBQUF5b0IsTUFBQTRTLEVBQUE2UixVQUFBbXBDLEVBQUFodkUsS0FBQWcwQixFQUFBcEYsVUFBQW9GLEVBQUFwRixVQUFBa21DLEVBQUEsSUFBQS8rQyxHQUFBL00sRUFBQWdtRSxFQUFBci9DLFdBQUEsSUFBQXFFLEVBQUFpZ0QsYUFBQSxDQUFBamdELEVBQUExRyxPQUFBenRCLEVBQUFtMEIsRUFBQWhOLFNBQUFnb0QsQ0FBQSxJQUFBbHRCLEdBQUFoaUMsRUFBQWtVLEVBQUFpZ0QsYUFBQWpnRCxFQUFBQSxHQUFBa2dELGlCQUFBcjBFLEVBQUFtMEIsRUFBQWtnRCxnQkFBQXB5QixHQUFBa3RCLEVBQUFwc0UsS0FBQSwwQkFBQWsvQyxHQUFBa3RCLEVBQUE1bUMsV0FBQXhsQyxLQUFBLDBCQUFBay9DLEdBQUEvckMsRUFBQWxXLE9BQUEsUUFBQWt5RSxHQUFBL29FLEVBQUE4VyxFQUFBaTdDLEVBQUFqaEMsR0FBQSxHQUFBajZCLEdBQUFpNkIsRUFBQWhhLEVBQUFtMUQsUUFBQW4xRCxFQUFBcmUsTUFBQSxJQUFBdUgsR0FBQThyRCxFQUFBaUcsRUFBQXQyRCxjQUFBLFVBQUEsT0FBQTVFLEdBQUE1RCxRQUFBLE1BQUEsRUFBQTRELEVBQUFBLEVBQUEsS0FBQWkxRCxFQUFBQSxFQUFBMXpDLE1BQUEzZixLQUFBLElBQUEsUUFBQTB4RSxHQUFBbnFFLEVBQUE4VyxHQUFBLEdBQUFpN0MsR0FBQWpoQyxFQUFBOXdCLEVBQUEvUyxNQUFBLG9CQUFBLElBQUE2akMsSUFBQTl3QixFQUFBOFcsRUFBQSxJQUFBZ2EsRUFBQSxHQUFBLEtBQUFpaEMsRUFBQS94RCxFQUFBaFQsUUFBQSxNQUFBLEtBQUFDLE1BQUEsNkJBQUE4a0UsR0FBQSxJQUFBQSxFQUFBMWtFLE9BQUEsS0FBQSxJQUFBZCxPQUFBLHNCQUFBeVQsRUFBQSxJQUFBLFFBQUFvWSxNQUFBMjVDLEVBQUEsR0FBQW1hLFVBQUFuYSxFQUFBLElBQUEsTUFBQSxRQUFBa1ksR0FBQWpxRSxHQUFBLEdBQUE4VyxHQUFBOVcsRUFBQW5QLFNBQUE0SyxjQUFBLFVBQUEsT0FBQXFiLElBQUFBLEVBQUFzQixPQUFBdEIsRUFBQXNCLE1BQUEzZixLQUFBcWUsRUFBQXNCLE1BQUEsT0FBQSxRQUFBbXlELEdBQUF2cUUsRUFBQSt4RCxHQUFBLEdBQUFqaEMsSUFBQSxXQUFBLFVBQUEsU0FBQSxXQUFBLFFBQUF0VCxTQUFBLElBQUFELFNBQUEsaUJBQUEsb0JBQUE5QyxLQUFBLFNBQUE1akIsRUFBQWkxRCxFQUFBa2EsRUFBQTcyRSxHQUFBLEdBQUExQyxHQUFBMDlFLEVBQUFuRSxFQUFBbUcsT0FBQW5zRSxFQUFBd3BDLFFBQUEvd0MsTUFBQTlJLEVBQUEsS0FBQXE3QixFQUFBaS9DLEVBQUFuZSxJQUFBOXJELEVBQUFvcUUsU0FBQXI5RCxFQUFBLCtCQUFBamYsT0FBQW9uQixVQUFBN2pCLFNBQUE5QyxLQUFBdTlELEVBQUF4NUQsS0FBQSxTQUFBLGFBQUEsT0FBQXdtRCxFQUFBLEtBQUF0K0IsRUFBQSxNQUFBc3hDLEVBQUF4NUQsS0FBQSxXQUFBZ1ksY0FBQTY3RCxFQUFBLFNBQUFyYSxFQUFBLEdBQUEzN0QsU0FBQXVxQixFQUFBeXJELEVBQUEsU0FBQXA1RCxFQUFBeTVELEdBQUEsRUFBQTNtQyxHQUFBd3JDLFNBQUFyZ0QsRUFBQXA2QixTQUFBLEdBQUFtb0QsRUFBQWxpRCxFQUFBczFDLE1BQUE2NUIsRUFBQW9HLGVBQUF0MUQsR0FBQTdvQixRQUFBNmlDLEVBQUEsU0FBQTl3QixHQUFBQSxJQUFBKzRDLEtBQUFsWixFQUFBNy9CLEdBQUErNEMsRUFBQS80QyxLQUFBLElBQUErckQsR0FBQSxTQUFBZ0csR0FBQSxHQUFBQSxJQUFBcGlFLEVBQUFtbkIsRUFBQTNqQixLQUFBNCtELElBQUF5VSxFQUFBLENBQUExdEIsRUFBQTk0QyxFQUFBa1osS0FBQXpzQixFQUFBMnJCLE1BQUF6b0IsRUFBQWt3QyxFQUFBLElBQUEvTyxHQUFBM2hDLEVBQUEsSUFBQUEsRUFBQSxFQUFBLE9BQUEyaEMsSUFBQUEsRUFBQXU3QyxlQUFBNS9FLEVBQUEyckIsTUFBQXpvQixHQUFBLE9BQUFtcEQsR0FBQTB0QixHQUFBLEdBQUEsT0FBQVIsR0FBQWorQyxLQUFBck4sRUFBQW8rQixJQUFBcnNELEdBQUF5L0UsWUFBQXIxRSxFQUFBbEYsT0FBQWxGLEVBQUF5L0UsVUFBQSxTQUFBbHNFLEVBQUE4VyxHQUFBOVcsSUFBQXJRLEdBQUFvOEQsRUFBQS9yRCxLQUFBLEdBQUFyUSxFQUFBbW5CLEVBQUEzakIsS0FBQTBELEVBQUFzMUMsTUFBQTEvQyxFQUFBeS9FLGFBQUFuZ0IsSUFBQW9hLEdBQUFyYSxFQUFBLzJELEtBQUEsUUFBQSxTQUFBK2hCLEdBQUEsR0FBQWdhLEdBQUFoYSxFQUFBeW1CLE9BQUF6bUIsRUFBQTBtQixNQUFBLE1BQUExTSxFQUFBLEdBQUFoYSxFQUFBc21CLFNBQUF0bUIsRUFBQXVtQixTQUFBdm1CLEVBQUF3bUIsVUFBQXd1QixFQUFBdjVELEtBQUEsV0FBQSxDQUFBLEdBQUFzRSxHQUFBazdELEVBQUEsV0FBQS94RCxFQUFBb3JFLEdBQUEzK0UsRUFBQTJyQixNQUFBem9CLEVBQUFrd0MsSUFBQS9vQixHQUFBNG1CLGdCQUFBLElBQUFzb0MsR0FBQXhyRCxJQUFBcytCLEVBQUEsRUFBQSxDQUFBaGlDLEdBQUE0bUIsZUFBQSxXQUFBc29DLEtBQUEsR0FBQWpVLEVBQUEvM0MsT0FBQW5qQixTQUFBLFFBQUE2ekUsR0FBQTFxRSxFQUFBOFcsRUFBQWk3QyxHQUFBLE9BQUF2MEMsU0FBQSxJQUFBaGlCLFlBQUEsU0FBQSxXQUFBLFNBQUEsU0FBQXNiLEVBQUFnYSxFQUFBajZCLEdBQUEsUUFBQWkxRCxLQUFBa2EsSUFBQWwxQyxFQUFBdGYsU0FBQS9rQixHQUFBcWtDLEVBQUFyZixZQUFBaGxCLEdBQUEsUUFBQXU1RSxLQUFBLElBQUEsR0FBQWhtRSxHQUFBLEVBQUFBLEVBQUFyUSxFQUFBdEMsT0FBQTJTLElBQUEsR0FBQTdRLEVBQUFRLEVBQUFxUSxHQUFBb1ksTUFBQXpvQixFQUFBcVEsR0FBQWt2QixRQUFBLE9BQUEsQ0FBQSxRQUFBLEVBQUEsUUFBQS8vQixHQUFBMm5CLEVBQUFpN0MsR0FBQSxNQUFBLG1CQUFBbDdELEdBQUF5MUUsZUFBQXRzRSxFQUFBeXNELEdBQUEzMUMsRUFBQXJlLEtBQUFzNUQsR0FBQS94RCxFQUFBMnJFLFNBQUE3MEQsRUFBQXJlLEtBQUFzNUQsR0FBQSxHQUFBdGxFLEdBQUFrRCxJQUFBbEQsR0FBQXNsRSxFQUFBbDdELEVBQUF5MUUsZ0JBQUF6MUUsRUFBQTAxRSxjQUFBLElBQUEsR0FBQXoxRCxHQUFBNVgsS0FBQW10RSxlQUFBLFNBQUF2MUQsRUFBQWk3QyxHQUFBLEdBQUFsN0QsR0FBQW1KLEVBQUF4RixJQUFBc2MsRUFBQW16RCxFQUFBbjVDLEdBQUFuaEMsR0FBQTRELE1BQUE2a0IsTUFBQXZoQixJQUFBNEIsS0FBQXFlLEdBQUFvWSxPQUFBNmlDLElBQUFqRyxLQUFBaDFDLEVBQUF3TyxJQUFBLHNCQUFBd21DLE1BQUEsUUFBQXdmLEdBQUF0ckUsR0FBQSxHQUFBOFcsR0FBQSxTQUFBQSxHQUFBLE1BQUE5VyxHQUFBeXNELEdBQUEzMUMsR0FBQSxPQUFBQSxHQUFBK1UsV0FBQSxFQUFBL1UsRUFBQSxRQUFBczlDLEdBQUFwMEQsR0FBQSxHQUFBOFcsR0FBQSxTQUFBQSxHQUFBLE1BQUE5VyxHQUFBMnJFLFNBQUE3MEQsR0FBQSxPQUFBQSxHQUFBK1UsV0FBQSxFQUFBL1UsRUFBQSxHQUFBKzhDLEdBQUEvOEMsRUFBQXZsQixVQUFBNDFFLEVBQUFyd0QsRUFBQXpvQixXQUFBazRFLEVBQUF6dkQsRUFBQWxwQixTQUFBNjRFLEVBQUEzdkQsRUFBQXBuQixTQUFBdzJFLEVBQUFwdkQsRUFBQW5wQixRQUFBaW1FLEVBQUE5OEMsRUFBQTdvQixRQUFBODNFLEVBQUFqdkQsRUFBQXZtQixPQUFBaTdFLEVBQUExMEQsRUFBQTNqQixJQUFBMmpCLEdBQUF6cUIsT0FBQSxrQkFBQSxPQUFBeXFCLEVBQUF6cUIsT0FBQSxvQkFBQSxtQkFBQXlxQixFQUFBenFCLE9BQUEsbUJBQUEsbUJBQUEsbUJBQUF5cUIsRUFBQXpxQixPQUFBLGFBQUEsb0JBQUF5cUIsRUFBQXpxQixPQUFBLG9CQUFBLGNBQUFxdUIsRUFBQXJJLFNBQUEsS0FBQSxhQUFBeUUsRUFBQXpxQixPQUFBLGtCQUFBcVMsUUFBQSxXQUFBZ2MsR0FBQThyRCxFQUFBbjBELFNBQUEsUUFBQSxpQkFBQSxhQUFBeUUsRUFBQXpxQixPQUFBLGtCQUFBcVMsUUFBQSxtQkFBQThuRSxFQUFBLElBQUFZLEVBQUF2bkMsR0FBQTNxQixVQUFBemdCLE9BQUEsU0FBQXVMLEVBQUE4VyxHQUFBLEdBQUFpN0MsSUFBQXVWLGdCQUFBRixFQUFBRSxrQkFBQVMsT0FBQVgsRUFBQXFCLGFBQUFkLE9BQUFQLEVBQUFzQixzQkFBQSxPQUFBLElBQUE3b0MsR0FBQTNnQyxLQUFBNG9FLFdBQUE5bkUsRUFBQWQsS0FBQTJvRSxhQUFBOUIsRUFBQWhVLEVBQUFqN0MsR0FBQTVYLE9BQUEyZ0MsRUFBQTNxQixVQUFBN2pCLFNBQUEsV0FBQSxNQUFBNk4sTUFBQTlMLFFBQUF5c0MsRUFBQTNxQixVQUFBekosS0FBQSxTQUFBekwsRUFBQThXLEdBQUEsUUFBQWk3QyxHQUFBL3hELEdBQUEsUUFBQThXLEdBQUE5VyxHQUFBLE1BQUFBLEdBQUFyTixNQUFBLElBQUE2RCxVQUFBcUIsS0FBQSxJQUFBLFFBQUFrNkQsR0FBQS94RCxHQUFBLE1BQUFBLEdBQUFoVCxRQUFBLE9BQUEsS0FBQSxHQUFBOGpDLEdBQUFoYSxFQUFBOVcsR0FBQXJOLE1BQUEsV0FBQWtFLEVBQUFzdkUsRUFBQXIxQyxFQUFBaGEsRUFBQSxPQUFBcXZELEdBQUF0dkUsRUFBQWs3RCxHQUFBdjdELFVBQUEsR0FBQXM2QixHQUFBNXhCLEtBQUEwZSxPQUFBblMsS0FBQXpMLEVBQUEsS0FBQTh3QixFQUFBLE1BQUEsS0FBQWhhLEdBQUFBLEtBQUEsSUFBQWpnQixHQUFBaTFELEVBQUFrYSxFQUFBNzJFLEVBQUErUCxLQUFBc3RFLGFBQUEvL0UsRUFBQTBDLEVBQUE5QixPQUFBc0MsRUFBQXVQLEtBQUE4NUIsU0FBQTNyQyxPQUFBLEVBQUEyOUIsSUFBQSxJQUFBcjdCLElBQUFtaEMsRUFBQXpqQyxPQUFBLEVBQUEsS0FBQSxJQUFBZCxPQUFBLHNDQUFBMlMsS0FBQTlMLE9BQUEsSUFBQSxLQUFBeUQsRUFBQSxFQUFBbEgsRUFBQWtILEVBQUFBLElBQUEsQ0FBQW12RSxFQUFBNzJFLEVBQUEwSCxFQUFBLElBQUFrVyxHQUFBN04sS0FBQWd3QixPQUFBODJDLEdBQUFsdEIsRUFBQWhvQixFQUFBajZCLEVBQUEsRUFBQSxLQUFBaTFELEVBQUEsRUFBQUEsRUFBQS8rQyxFQUFBL2YsUUFBQTgrRCxJQUFBLytDLEVBQUEvZixRQUFBOCtELEdBQUF4QyxPQUFBeFEsSUFBQUEsRUFBQS9yQyxFQUFBL2YsUUFBQTgrRCxHQUFBdkMsR0FBQXpRLElBQUEvckMsRUFBQS9aLFNBQUEsSUFBQThsRCxFQUFBaVosRUFBQWpaLElBQUE5dEIsRUFBQWc3QyxHQUFBajVELEVBQUFoZSxNQUFBK3BELEdBQUEsS0FBQXJzRCxFQUFBb0ssRUFBQUEsSUFBQW12RSxFQUFBNzJFLEVBQUEwSCxHQUFBbTBCLEVBQUFnN0MsR0FBQTltRSxLQUFBZ3dCLE9BQUE4MkMsR0FBQWozRSxNQUFBK25CLEVBQUFrdkQsR0FBQSxPQUFBaDdDLElBQUE2VSxFQUFBM3FCLFVBQUFzM0QsV0FBQSxTQUFBeHNFLEdBQUEsTUFBQTZ6RCxHQUFBN3pELEdBQUFkLEtBQUFnd0IsT0FBQWx2QixJQUFBLEtBQUFkLEtBQUE4b0UsY0FBQW5vQyxFQUFBM3FCLFVBQUF3MEQsVUFBQSxTQUFBMXBFLEdBQUEsTUFBQWQsTUFBQWd3QixPQUFBazZDLFlBQUFwcEUsSUFBQTYvQixFQUFBM3FCLFVBQUErakMsT0FBQSxTQUFBajVDLEdBQUEsUUFBQThXLEdBQUE5VyxHQUFBLE1BQUF6UyxvQkFBQXlTLEdBQUFoVCxRQUFBLEtBQUEsU0FBQWdULEdBQUEsTUFBQSxPQUFBQSxFQUFBNmpELFdBQUEsR0FBQXh5RCxTQUFBLElBQUFpWixnQkFBQXRLLEVBQUFBLEtBQUEsSUFBQSt4RCxHQUFBN3lELEtBQUE4NUIsU0FBQWxJLEVBQUE1eEIsS0FBQXN0RSxhQUFBMzFFLEVBQUFxSSxLQUFBZ3dCLE1BQUEsS0FBQWh3QixLQUFBd3FFLFVBQUExcEUsR0FBQSxNQUFBLEtBQUEsSUFBQThyRCxHQUFBa2EsR0FBQSxFQUFBNzJFLEVBQUE0aUUsRUFBQTFrRSxPQUFBLEVBQUFaLEVBQUFxa0MsRUFBQXpqQyxPQUFBc0MsRUFBQW9pRSxFQUFBLEVBQUEsS0FBQWpHLEVBQUEsRUFBQXIvRCxFQUFBcS9ELEVBQUFBLElBQUEsQ0FBQSxHQUFBOWdDLEdBQUE3N0IsRUFBQTI4RCxFQUFBLytDLEVBQUErakIsRUFBQWc3QixHQUFBaFQsRUFBQWppRCxFQUFBa1csR0FBQXlOLEVBQUFzK0IsRUFBQS9wRCxNQUFBaVIsRUFBQStNLElBQUEyTixFQUFBbytCLEVBQUE4dUIsWUFBQTl1QixFQUFBN3JDLEtBQUEvWSxPQUFBNGtELEVBQUEvcEQsUUFBQXlyQixHQUFBZ3NELEVBQUE5ckQsRUFBQW8rQixFQUFBNnVCLFFBQUEsRUFBQTluQyxFQUFBaVosRUFBQTdyQyxLQUFBaTdELE9BQUExdEQsRUFBQSxJQUFBd1EsRUFBQSxDQUFBLEdBQUErdEIsR0FBQWdaLEVBQUFqRyxFQUFBLEVBQUEsSUFBQTBhLEtBQUEsRUFBQSxNQUFBM21DLElBQUFsd0MsR0FBQXUyRSxFQUFBcm1DLEdBQUFzbUMsRUFBQXRtQyxFQUFBL29CLEdBQUFqZixLQUFBLEtBQUF0SyxtQkFBQXN5QyxJQUFBbHdDLEdBQUFvcEQsTUFBQSxJQUFBeXRCLEtBQUEsRUFBQSxDQUFBLEdBQUF6YSxHQUFBcDhELEVBQUExQyxNQUFBLE9BQUEsVUFBQSxNQUFBMEMsSUFBQW9wRCxFQUFBOXJELE1BQUE4K0QsR0FBQSxPQUFBd2EsR0FBQUMsS0FBQTcyRSxHQUFBNjJFLEVBQUF6dEIsT0FBQSxDQUFBLEdBQUEsTUFBQWxaLEdBQUFubEIsR0FBQThyRCxLQUFBLEVBQUEsUUFBQU4sR0FBQXJtQyxLQUFBQSxHQUFBQSxJQUFBQSxFQUFBc21DLEVBQUF0bUMsRUFBQXR5QyxvQkFBQXNLLEtBQUEsSUFBQWtWLEVBQUEsS0FBQXBkLElBQUFxMkUsRUFBQSxJQUFBLE1BQUFqNUQsRUFBQSxJQUFBOHlCLEdBQUFtbUMsR0FBQSxHQUFBLE1BQUFyMkUsSUFBQW9wRCxFQUFBN2pDLFVBQUF1M0MsR0FBQSxTQUFBenNELEVBQUE4VyxHQUFBLE9BQUEsR0FBQWlpQyxFQUFBN2pDLFVBQUFnekQsT0FBQSxTQUFBbG9FLEVBQUE4VyxHQUFBLE1BQUE5VyxJQUFBKzRDLEVBQUE3akMsVUFBQWl6RCxPQUFBLFNBQUFub0UsRUFBQThXLEdBQUEsTUFBQTlXLElBQUErNEMsRUFBQTdqQyxVQUFBaGhCLE9BQUEsU0FBQThMLEVBQUE4VyxHQUFBLE1BQUE5VyxJQUFBOFcsR0FBQWlpQyxFQUFBN2pDLFVBQUF1M0QsWUFBQSxXQUFBLEdBQUF6c0UsR0FBQWQsS0FBQWlGLFFBQUE5UyxVQUFBLE9BQUEyTyxHQUFBNlgsT0FBQSxFQUFBN1gsRUFBQTNTLE9BQUEsSUFBQTByRCxFQUFBN2pDLFVBQUEvUSxRQUFBLEtBQUE0MEMsRUFBQTdqQyxVQUFBN2pCLFNBQUEsV0FBQSxNQUFBLFNBQUE2TixLQUFBekcsS0FBQSxLQUFBc2dELEVBQUE3akMsVUFBQStXLFdBQUEsU0FBQWpzQixHQUFBLE1BQUFkLE1BQUF1dEQsR0FBQXpzRCxHQUFBQSxFQUFBZCxLQUFBaXBFLE9BQUFub0UsSUFBQSs0QyxFQUFBN2pDLFVBQUE0ekQsU0FBQSxTQUFBOW9FLEVBQUE4VyxHQUFBLFFBQUFnYSxHQUFBOXdCLEVBQUE4VyxHQUFBLFFBQUFnYSxHQUFBOXdCLEVBQUE4VyxHQUFBLE1BQUEsWUFBQSxNQUFBOVcsR0FBQThXLEdBQUEzaEIsTUFBQTZLLEVBQUFwVCxZQUFBLFFBQUFpSyxHQUFBbUosR0FBQSxNQUFBa21FLEdBQUFsbUUsR0FBQUEsRUFBQTZ6RCxFQUFBN3pELElBQUFBLE1BQUEsUUFBQThyRCxHQUFBOXJELEdBQUEsT0FBQUEsRUFBQTNTLFFBQUEsSUFBQSxHQUFBLE1BQUEwa0UsRUFBQSxLQUFBLEdBQUEsTUFBQSxTQUFBajdDLEVBQUE5VyxFQUFBLEdBQUFBLENBQUEsU0FBQSxNQUFBQSxJQUFBLFFBQUFnbUUsR0FBQWhtRSxHQUFBLE9BQUFBLEVBQUEsUUFBQTdRLEdBQUE2USxFQUFBOFcsR0FBQSxNQUFBLFVBQUFpN0MsR0FBQUEsRUFBQWw3RCxFQUFBazdELEVBQUEsSUFBQWpoQyxHQUFBcTFDLEVBQUFwVSxFQUFBL3hELEVBQUEsT0FBQThXLE1BQUEsRUFBQSxJQUFBMEQsRUFBQXNXLEVBQUFrMUMsR0FBQTM0RSxPQUFBeStELEVBQUFoN0IsSUFBQSxRQUFBcmtDLEdBQUF1VCxHQUFBLE1BQUEsVUFBQThXLEVBQUFpN0MsR0FBQSxHQUFBamhDLEdBQUFqNkIsRUFBQWlnQixHQUFBZzFDLEVBQUFqMUQsRUFBQWs3RCxFQUFBLElBQUFqaEMsRUFBQXpqQyxTQUFBeStELEVBQUF6K0QsT0FBQSxPQUFBLENBQUEsS0FBQSxHQUFBMjRFLEdBQUEsRUFBQUEsRUFBQWwxQyxFQUFBempDLE9BQUEyNEUsSUFBQSxJQUFBaG1FLEVBQUE4d0IsRUFBQWsxQyxHQUFBbGEsRUFBQWthLElBQUEsT0FBQSxDQUFBLFFBQUEsR0FBQTltRSxLQUFBZ3BFLE9BQUEvNEUsRUFBQTJoQyxFQUFBOXdCLEVBQUEsV0FBQWQsS0FBQWlwRSxPQUFBaDVFLEVBQUEyaEMsRUFBQTl3QixFQUFBLFdBQUFkLEtBQUF1dEQsR0FBQXQ5RCxFQUFBMmhDLEVBQUE5d0IsRUFBQSxPQUFBLEdBQUFkLEtBQUFoTCxPQUFBekgsRUFBQXFrQyxFQUFBOXdCLEVBQUEsV0FBQWQsS0FBQWlGLFFBQUFuRSxFQUFBbUUsUUFBQWpGLEtBQUErc0IsV0FBQTk4QixFQUFBMmhDLEVBQUE5d0IsRUFBQSxlQUFBZCxLQUFBekcsS0FBQXVILEVBQUF2SCxLQUFBeUcsS0FBQXd0RSxXQUFBNTFELEVBQUEsSUFBQTlXLEVBQUEsTUFBQWQsS0FBQSxJQUFBLFNBQUFjLElBQUE4VyxFQUFBLEtBQUEsSUFBQXZxQixPQUFBLGlEQUFBLE9BQUEsSUFBQXVrQyxHQUFBNXhCLEtBQUFjLElBQUE4VyxFQUFBenFCLE9BQUEsa0JBQUFzUixTQUFBLHFCQUFBb3VELEdBQUFqMUMsRUFBQXpxQixPQUFBLGtCQUFBMlMsS0FBQSxxQkFBQSxTQUFBZ0IsT0FBQTBtRSxFQUFBcjBELFNBQUEsb0JBQUEsOEJBQUF5RSxFQUFBenFCLE9BQUEsb0JBQUFzUixTQUFBLGFBQUErb0UsR0FBQTEzQyxFQUFBM2MsU0FBQSxxQkFBQSw4QkFBQXlFLEVBQUF6cUIsT0FBQSxtQkFBQTBDLE1BQUEsbUJBQUE0TyxTQUFBLFNBQUFxeEIsR0FBQW1sQyxFQUFBOWhELFdBQUF5RSxFQUFBenFCLE9BQUEsbUJBQUFzUixTQUFBLFFBQUF3MkQsR0FBQXI5QyxFQUFBenFCLE9BQUEsbUJBQUFzUixTQUFBLGdCQUFBa3BFLEdBQUFwVCxFQUFBcGhELFNBQUEsU0FBQSxZQUFBLGdCQUFBLGdCQUFBdzJELEVBQUF4MkQsU0FBQSxXQUFBLGNBQUEsU0FBQSxnQkFBQXlFLEVBQUF6cUIsT0FBQSxtQkFBQTBTLFVBQUEsU0FBQTAwRCxHQUFBMzhDLEVBQUF6cUIsT0FBQSxtQkFBQTBTLFVBQUEsU0FBQThwRSxHQUFBMEIsRUFBQWw0RCxTQUFBLFNBQUEsWUFBQXE0RCxFQUFBcjRELFNBQUEsU0FBQSxlQUFBLGdCQUFBeUUsRUFBQXpxQixPQUFBLG1CQUFBMFMsVUFBQSxTQUFBd3JFLEdBQUF4ckUsVUFBQSxlQUFBMnJFLEdBQUEzckUsVUFBQSxpQkFBQTJyRSxHQUFBWSxFQUFBajVELFNBQUEsVUFBQStoRCxFQUFBL2hELFNBQUEsVUFBQXlFLEVBQUF6cUIsT0FBQSxtQkFBQXlTLE9BQUEsVUFBQXdzRSxHQUFBeHNFLE9BQUEsa0JBQUFzMUQsSUFBQW5vRSxPQUFBQSxPQUFBOE4iLCJmaWxlIjoidmVuZG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBBbmd1bGFySlMgdjEuNC44XG4gKiAoYykgMjAxMC0yMDE1IEdvb2dsZSwgSW5jLiBodHRwOi8vYW5ndWxhcmpzLm9yZ1xuICogTGljZW5zZTogTUlUXG4gKi9cbihmdW5jdGlvbih3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHsndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhpcyBvYmplY3QgcHJvdmlkZXMgYSB1dGlsaXR5IGZvciBwcm9kdWNpbmcgcmljaCBFcnJvciBtZXNzYWdlcyB3aXRoaW5cbiAqIEFuZ3VsYXIuIEl0IGNhbiBiZSBjYWxsZWQgYXMgZm9sbG93czpcbiAqXG4gKiB2YXIgZXhhbXBsZU1pbkVyciA9IG1pbkVycignZXhhbXBsZScpO1xuICogdGhyb3cgZXhhbXBsZU1pbkVycignb25lJywgJ1RoaXMgezB9IGlzIHsxfScsIGZvbywgYmFyKTtcbiAqXG4gKiBUaGUgYWJvdmUgY3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBtaW5FcnIgaW4gdGhlIGV4YW1wbGUgbmFtZXNwYWNlLiBUaGVcbiAqIHJlc3VsdGluZyBlcnJvciB3aWxsIGhhdmUgYSBuYW1lc3BhY2VkIGVycm9yIGNvZGUgb2YgZXhhbXBsZS5vbmUuICBUaGVcbiAqIHJlc3VsdGluZyBlcnJvciB3aWxsIHJlcGxhY2UgezB9IHdpdGggdGhlIHZhbHVlIG9mIGZvbywgYW5kIHsxfSB3aXRoIHRoZVxuICogdmFsdWUgb2YgYmFyLiBUaGUgb2JqZWN0IGlzIG5vdCByZXN0cmljdGVkIGluIHRoZSBudW1iZXIgb2YgYXJndW1lbnRzIGl0IGNhblxuICogdGFrZS5cbiAqXG4gKiBJZiBmZXdlciBhcmd1bWVudHMgYXJlIHNwZWNpZmllZCB0aGFuIG5lY2Vzc2FyeSBmb3IgaW50ZXJwb2xhdGlvbiwgdGhlIGV4dHJhXG4gKiBpbnRlcnBvbGF0aW9uIG1hcmtlcnMgd2lsbCBiZSBwcmVzZXJ2ZWQgaW4gdGhlIGZpbmFsIHN0cmluZy5cbiAqXG4gKiBTaW5jZSBkYXRhIHdpbGwgYmUgcGFyc2VkIHN0YXRpY2FsbHkgZHVyaW5nIGEgYnVpbGQgc3RlcCwgc29tZSByZXN0cmljdGlvbnNcbiAqIGFyZSBhcHBsaWVkIHdpdGggcmVzcGVjdCB0byBob3cgbWluRXJyIGluc3RhbmNlcyBhcmUgY3JlYXRlZCBhbmQgY2FsbGVkLlxuICogSW5zdGFuY2VzIHNob3VsZCBoYXZlIG5hbWVzIG9mIHRoZSBmb3JtIG5hbWVzcGFjZU1pbkVyciBmb3IgYSBtaW5FcnIgY3JlYXRlZFxuICogdXNpbmcgbWluRXJyKCduYW1lc3BhY2UnKSAuIEVycm9yIGNvZGVzLCBuYW1lc3BhY2VzIGFuZCB0ZW1wbGF0ZSBzdHJpbmdzXG4gKiBzaG91bGQgYWxsIGJlIHN0YXRpYyBzdHJpbmdzLCBub3QgdmFyaWFibGVzIG9yIGdlbmVyYWwgZXhwcmVzc2lvbnMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZSBUaGUgbmFtZXNwYWNlIHRvIHVzZSBmb3IgdGhlIG5ldyBtaW5FcnIgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBFcnJvckNvbnN0cnVjdG9yIEN1c3RvbSBlcnJvciBjb25zdHJ1Y3RvciB0byBiZSBpbnN0YW50aWF0ZWQgd2hlbiByZXR1cm5pbmdcbiAqICAgZXJyb3IgZnJvbSByZXR1cm5lZCBmdW5jdGlvbiwgZm9yIGNhc2VzIHdoZW4gYSBwYXJ0aWN1bGFyIHR5cGUgb2YgZXJyb3IgaXMgdXNlZnVsLlxuICogQHJldHVybnMge2Z1bmN0aW9uKGNvZGU6c3RyaW5nLCB0ZW1wbGF0ZTpzdHJpbmcsIC4uLnRlbXBsYXRlQXJncyk6IEVycm9yfSBtaW5FcnIgaW5zdGFuY2VcbiAqL1xuXG5mdW5jdGlvbiBtaW5FcnIobW9kdWxlLCBFcnJvckNvbnN0cnVjdG9yKSB7XG4gIEVycm9yQ29uc3RydWN0b3IgPSBFcnJvckNvbnN0cnVjdG9yIHx8IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIFNLSVBfSU5ERVhFUyA9IDI7XG5cbiAgICB2YXIgdGVtcGxhdGVBcmdzID0gYXJndW1lbnRzLFxuICAgICAgY29kZSA9IHRlbXBsYXRlQXJnc1swXSxcbiAgICAgIG1lc3NhZ2UgPSAnWycgKyAobW9kdWxlID8gbW9kdWxlICsgJzonIDogJycpICsgY29kZSArICddICcsXG4gICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlQXJnc1sxXSxcbiAgICAgIHBhcmFtUHJlZml4LCBpO1xuXG4gICAgbWVzc2FnZSArPSB0ZW1wbGF0ZS5yZXBsYWNlKC9cXHtcXGQrXFx9L2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgICB2YXIgaW5kZXggPSArbWF0Y2guc2xpY2UoMSwgLTEpLFxuICAgICAgICBzaGlmdGVkSW5kZXggPSBpbmRleCArIFNLSVBfSU5ERVhFUztcblxuICAgICAgaWYgKHNoaWZ0ZWRJbmRleCA8IHRlbXBsYXRlQXJncy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRvRGVidWdTdHJpbmcodGVtcGxhdGVBcmdzW3NoaWZ0ZWRJbmRleF0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG5cbiAgICBtZXNzYWdlICs9ICdcXG5odHRwOi8vZXJyb3JzLmFuZ3VsYXJqcy5vcmcvMS40LjgvJyArXG4gICAgICAobW9kdWxlID8gbW9kdWxlICsgJy8nIDogJycpICsgY29kZTtcblxuICAgIGZvciAoaSA9IFNLSVBfSU5ERVhFUywgcGFyYW1QcmVmaXggPSAnPyc7IGkgPCB0ZW1wbGF0ZUFyZ3MubGVuZ3RoOyBpKyssIHBhcmFtUHJlZml4ID0gJyYnKSB7XG4gICAgICBtZXNzYWdlICs9IHBhcmFtUHJlZml4ICsgJ3AnICsgKGkgLSBTS0lQX0lOREVYRVMpICsgJz0nICtcbiAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHRvRGVidWdTdHJpbmcodGVtcGxhdGVBcmdzW2ldKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBFcnJvckNvbnN0cnVjdG9yKG1lc3NhZ2UpO1xuICB9O1xufVxuXG4vKiBXZSBuZWVkIHRvIHRlbGwganNoaW50IHdoYXQgdmFyaWFibGVzIGFyZSBiZWluZyBleHBvcnRlZCAqL1xuLyogZ2xvYmFsIGFuZ3VsYXI6IHRydWUsXG4gIG1zaWU6IHRydWUsXG4gIGpxTGl0ZTogdHJ1ZSxcbiAgalF1ZXJ5OiB0cnVlLFxuICBzbGljZTogdHJ1ZSxcbiAgc3BsaWNlOiB0cnVlLFxuICBwdXNoOiB0cnVlLFxuICB0b1N0cmluZzogdHJ1ZSxcbiAgbmdNaW5FcnI6IHRydWUsXG4gIGFuZ3VsYXJNb2R1bGU6IHRydWUsXG4gIHVpZDogdHJ1ZSxcbiAgUkVHRVhfU1RSSU5HX1JFR0VYUDogdHJ1ZSxcbiAgVkFMSURJVFlfU1RBVEVfUFJPUEVSVFk6IHRydWUsXG5cbiAgbG93ZXJjYXNlOiB0cnVlLFxuICB1cHBlcmNhc2U6IHRydWUsXG4gIG1hbnVhbExvd2VyY2FzZTogdHJ1ZSxcbiAgbWFudWFsVXBwZXJjYXNlOiB0cnVlLFxuICBub2RlTmFtZV86IHRydWUsXG4gIGlzQXJyYXlMaWtlOiB0cnVlLFxuICBmb3JFYWNoOiB0cnVlLFxuICBmb3JFYWNoU29ydGVkOiB0cnVlLFxuICByZXZlcnNlUGFyYW1zOiB0cnVlLFxuICBuZXh0VWlkOiB0cnVlLFxuICBzZXRIYXNoS2V5OiB0cnVlLFxuICBleHRlbmQ6IHRydWUsXG4gIHRvSW50OiB0cnVlLFxuICBpbmhlcml0OiB0cnVlLFxuICBtZXJnZTogdHJ1ZSxcbiAgbm9vcDogdHJ1ZSxcbiAgaWRlbnRpdHk6IHRydWUsXG4gIHZhbHVlRm46IHRydWUsXG4gIGlzVW5kZWZpbmVkOiB0cnVlLFxuICBpc0RlZmluZWQ6IHRydWUsXG4gIGlzT2JqZWN0OiB0cnVlLFxuICBpc0JsYW5rT2JqZWN0OiB0cnVlLFxuICBpc1N0cmluZzogdHJ1ZSxcbiAgaXNOdW1iZXI6IHRydWUsXG4gIGlzRGF0ZTogdHJ1ZSxcbiAgaXNBcnJheTogdHJ1ZSxcbiAgaXNGdW5jdGlvbjogdHJ1ZSxcbiAgaXNSZWdFeHA6IHRydWUsXG4gIGlzV2luZG93OiB0cnVlLFxuICBpc1Njb3BlOiB0cnVlLFxuICBpc0ZpbGU6IHRydWUsXG4gIGlzRm9ybURhdGE6IHRydWUsXG4gIGlzQmxvYjogdHJ1ZSxcbiAgaXNCb29sZWFuOiB0cnVlLFxuICBpc1Byb21pc2VMaWtlOiB0cnVlLFxuICB0cmltOiB0cnVlLFxuICBlc2NhcGVGb3JSZWdleHA6IHRydWUsXG4gIGlzRWxlbWVudDogdHJ1ZSxcbiAgbWFrZU1hcDogdHJ1ZSxcbiAgaW5jbHVkZXM6IHRydWUsXG4gIGFycmF5UmVtb3ZlOiB0cnVlLFxuICBjb3B5OiB0cnVlLFxuICBzaGFsbG93Q29weTogdHJ1ZSxcbiAgZXF1YWxzOiB0cnVlLFxuICBjc3A6IHRydWUsXG4gIGpxOiB0cnVlLFxuICBjb25jYXQ6IHRydWUsXG4gIHNsaWNlQXJnczogdHJ1ZSxcbiAgYmluZDogdHJ1ZSxcbiAgdG9Kc29uUmVwbGFjZXI6IHRydWUsXG4gIHRvSnNvbjogdHJ1ZSxcbiAgZnJvbUpzb246IHRydWUsXG4gIGNvbnZlcnRUaW1lem9uZVRvTG9jYWw6IHRydWUsXG4gIHRpbWV6b25lVG9PZmZzZXQ6IHRydWUsXG4gIHN0YXJ0aW5nVGFnOiB0cnVlLFxuICB0cnlEZWNvZGVVUklDb21wb25lbnQ6IHRydWUsXG4gIHBhcnNlS2V5VmFsdWU6IHRydWUsXG4gIHRvS2V5VmFsdWU6IHRydWUsXG4gIGVuY29kZVVyaVNlZ21lbnQ6IHRydWUsXG4gIGVuY29kZVVyaVF1ZXJ5OiB0cnVlLFxuICBhbmd1bGFySW5pdDogdHJ1ZSxcbiAgYm9vdHN0cmFwOiB0cnVlLFxuICBnZXRUZXN0YWJpbGl0eTogdHJ1ZSxcbiAgc25ha2VfY2FzZTogdHJ1ZSxcbiAgYmluZEpRdWVyeTogdHJ1ZSxcbiAgYXNzZXJ0QXJnOiB0cnVlLFxuICBhc3NlcnRBcmdGbjogdHJ1ZSxcbiAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHk6IHRydWUsXG4gIGdldHRlcjogdHJ1ZSxcbiAgZ2V0QmxvY2tOb2RlczogdHJ1ZSxcbiAgaGFzT3duUHJvcGVydHk6IHRydWUsXG4gIGNyZWF0ZU1hcDogdHJ1ZSxcblxuICBOT0RFX1RZUEVfRUxFTUVOVDogdHJ1ZSxcbiAgTk9ERV9UWVBFX0FUVFJJQlVURTogdHJ1ZSxcbiAgTk9ERV9UWVBFX1RFWFQ6IHRydWUsXG4gIE5PREVfVFlQRV9DT01NRU5UOiB0cnVlLFxuICBOT0RFX1RZUEVfRE9DVU1FTlQ6IHRydWUsXG4gIE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVDogdHJ1ZSxcbiovXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG5nXG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiAjIG5nIChjb3JlIG1vZHVsZSlcbiAqIFRoZSBuZyBtb2R1bGUgaXMgbG9hZGVkIGJ5IGRlZmF1bHQgd2hlbiBhbiBBbmd1bGFySlMgYXBwbGljYXRpb24gaXMgc3RhcnRlZC4gVGhlIG1vZHVsZSBpdHNlbGZcbiAqIGNvbnRhaW5zIHRoZSBlc3NlbnRpYWwgY29tcG9uZW50cyBmb3IgYW4gQW5ndWxhckpTIGFwcGxpY2F0aW9uIHRvIGZ1bmN0aW9uLiBUaGUgdGFibGUgYmVsb3dcbiAqIGxpc3RzIGEgaGlnaCBsZXZlbCBicmVha2Rvd24gb2YgZWFjaCBvZiB0aGUgc2VydmljZXMvZmFjdG9yaWVzLCBmaWx0ZXJzLCBkaXJlY3RpdmVzIGFuZCB0ZXN0aW5nXG4gKiBjb21wb25lbnRzIGF2YWlsYWJsZSB3aXRoaW4gdGhpcyBjb3JlIG1vZHVsZS5cbiAqXG4gKiA8ZGl2IGRvYy1tb2R1bGUtY29tcG9uZW50cz1cIm5nXCI+PC9kaXY+XG4gKi9cblxudmFyIFJFR0VYX1NUUklOR19SRUdFWFAgPSAvXlxcLyguKylcXC8oW2Etel0qKSQvO1xuXG4vLyBUaGUgbmFtZSBvZiBhIGZvcm0gY29udHJvbCdzIFZhbGlkaXR5U3RhdGUgcHJvcGVydHkuXG4vLyBUaGlzIGlzIHVzZWQgc28gdGhhdCBpdCdzIHBvc3NpYmxlIGZvciBpbnRlcm5hbCB0ZXN0cyB0byBjcmVhdGUgbW9jayBWYWxpZGl0eVN0YXRlcy5cbnZhciBWQUxJRElUWV9TVEFURV9QUk9QRVJUWSA9ICd2YWxpZGl0eSc7XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmxvd2VyY2FzZVxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb24gQ29udmVydHMgdGhlIHNwZWNpZmllZCBzdHJpbmcgdG8gbG93ZXJjYXNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTdHJpbmcgdG8gYmUgY29udmVydGVkIHRvIGxvd2VyY2FzZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IExvd2VyY2FzZWQgc3RyaW5nLlxuICovXG52YXIgbG93ZXJjYXNlID0gZnVuY3Rpb24oc3RyaW5nKSB7cmV0dXJuIGlzU3RyaW5nKHN0cmluZykgPyBzdHJpbmcudG9Mb3dlckNhc2UoKSA6IHN0cmluZzt9O1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIudXBwZXJjYXNlXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0cyB0aGUgc3BlY2lmaWVkIHN0cmluZyB0byB1cHBlcmNhc2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFN0cmluZyB0byBiZSBjb252ZXJ0ZWQgdG8gdXBwZXJjYXNlLlxuICogQHJldHVybnMge3N0cmluZ30gVXBwZXJjYXNlZCBzdHJpbmcuXG4gKi9cbnZhciB1cHBlcmNhc2UgPSBmdW5jdGlvbihzdHJpbmcpIHtyZXR1cm4gaXNTdHJpbmcoc3RyaW5nKSA/IHN0cmluZy50b1VwcGVyQ2FzZSgpIDogc3RyaW5nO307XG5cblxudmFyIG1hbnVhbExvd2VyY2FzZSA9IGZ1bmN0aW9uKHMpIHtcbiAgLyoganNoaW50IGJpdHdpc2U6IGZhbHNlICovXG4gIHJldHVybiBpc1N0cmluZyhzKVxuICAgICAgPyBzLnJlcGxhY2UoL1tBLVpdL2csIGZ1bmN0aW9uKGNoKSB7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY2guY2hhckNvZGVBdCgwKSB8IDMyKTt9KVxuICAgICAgOiBzO1xufTtcbnZhciBtYW51YWxVcHBlcmNhc2UgPSBmdW5jdGlvbihzKSB7XG4gIC8qIGpzaGludCBiaXR3aXNlOiBmYWxzZSAqL1xuICByZXR1cm4gaXNTdHJpbmcocylcbiAgICAgID8gcy5yZXBsYWNlKC9bYS16XS9nLCBmdW5jdGlvbihjaCkge3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoLmNoYXJDb2RlQXQoMCkgJiB+MzIpO30pXG4gICAgICA6IHM7XG59O1xuXG5cbi8vIFN0cmluZyN0b0xvd2VyQ2FzZSBhbmQgU3RyaW5nI3RvVXBwZXJDYXNlIGRvbid0IHByb2R1Y2UgY29ycmVjdCByZXN1bHRzIGluIGJyb3dzZXJzIHdpdGggVHVya2lzaFxuLy8gbG9jYWxlLCBmb3IgdGhpcyByZWFzb24gd2UgbmVlZCB0byBkZXRlY3QgdGhpcyBjYXNlIGFuZCByZWRlZmluZSBsb3dlcmNhc2UvdXBwZXJjYXNlIG1ldGhvZHNcbi8vIHdpdGggY29ycmVjdCBidXQgc2xvd2VyIGFsdGVybmF0aXZlcy5cbmlmICgnaScgIT09ICdJJy50b0xvd2VyQ2FzZSgpKSB7XG4gIGxvd2VyY2FzZSA9IG1hbnVhbExvd2VyY2FzZTtcbiAgdXBwZXJjYXNlID0gbWFudWFsVXBwZXJjYXNlO1xufVxuXG5cbnZhclxuICAgIG1zaWUsICAgICAgICAgICAgIC8vIGhvbGRzIG1ham9yIHZlcnNpb24gbnVtYmVyIGZvciBJRSwgb3IgTmFOIGlmIFVBIGlzIG5vdCBJRS5cbiAgICBqcUxpdGUsICAgICAgICAgICAvLyBkZWxheSBiaW5kaW5nIHNpbmNlIGpRdWVyeSBjb3VsZCBiZSBsb2FkZWQgYWZ0ZXIgdXMuXG4gICAgalF1ZXJ5LCAgICAgICAgICAgLy8gZGVsYXkgYmluZGluZ1xuICAgIHNsaWNlICAgICAgICAgICAgID0gW10uc2xpY2UsXG4gICAgc3BsaWNlICAgICAgICAgICAgPSBbXS5zcGxpY2UsXG4gICAgcHVzaCAgICAgICAgICAgICAgPSBbXS5wdXNoLFxuICAgIHRvU3RyaW5nICAgICAgICAgID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxcbiAgICBnZXRQcm90b3R5cGVPZiAgICA9IE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgICBuZ01pbkVyciAgICAgICAgICA9IG1pbkVycignbmcnKSxcblxuICAgIC8qKiBAbmFtZSBhbmd1bGFyICovXG4gICAgYW5ndWxhciAgICAgICAgICAgPSB3aW5kb3cuYW5ndWxhciB8fCAod2luZG93LmFuZ3VsYXIgPSB7fSksXG4gICAgYW5ndWxhck1vZHVsZSxcbiAgICB1aWQgICAgICAgICAgICAgICA9IDA7XG5cbi8qKlxuICogZG9jdW1lbnRNb2RlIGlzIGFuIElFLW9ubHkgcHJvcGVydHlcbiAqIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9jYzE5Njk4OCh2PXZzLjg1KS5hc3B4XG4gKi9cbm1zaWUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGU7XG5cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSBvYmpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBgb2JqYCBpcyBhbiBhcnJheSBvciBhcnJheS1saWtlIG9iamVjdCAoTm9kZUxpc3QsIEFyZ3VtZW50cyxcbiAqICAgICAgICAgICAgICAgICAgIFN0cmluZyAuLi4pXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKG9iaikge1xuXG4gIC8vIGBudWxsYCwgYHVuZGVmaW5lZGAgYW5kIGB3aW5kb3dgIGFyZSBub3QgYXJyYXktbGlrZVxuICBpZiAob2JqID09IG51bGwgfHwgaXNXaW5kb3cob2JqKSkgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIGFycmF5cywgc3RyaW5ncyBhbmQgalF1ZXJ5L2pxTGl0ZSBvYmplY3RzIGFyZSBhcnJheSBsaWtlXG4gIC8vICoganFMaXRlIGlzIGVpdGhlciB0aGUgalF1ZXJ5IG9yIGpxTGl0ZSBjb25zdHJ1Y3RvciBmdW5jdGlvblxuICAvLyAqIHdlIGhhdmUgdG8gY2hlY2sgdGhlIGV4aXN0YW5jZSBvZiBqcUxpdGUgZmlyc3QgYXMgdGhpcyBtZXRob2QgaXMgY2FsbGVkXG4gIC8vICAgdmlhIHRoZSBmb3JFYWNoIG1ldGhvZCB3aGVuIGNvbnN0cnVjdGluZyB0aGUganFMaXRlIG9iamVjdCBpbiB0aGUgZmlyc3QgcGxhY2VcbiAgaWYgKGlzQXJyYXkob2JqKSB8fCBpc1N0cmluZyhvYmopIHx8IChqcUxpdGUgJiYgb2JqIGluc3RhbmNlb2YganFMaXRlKSkgcmV0dXJuIHRydWU7XG5cbiAgLy8gU3VwcG9ydDogaU9TIDguMiAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG4gIC8vIFwibGVuZ3RoXCIgaW4gb2JqIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTExNTA4KVxuICB2YXIgbGVuZ3RoID0gXCJsZW5ndGhcIiBpbiBPYmplY3Qob2JqKSAmJiBvYmoubGVuZ3RoO1xuXG4gIC8vIE5vZGVMaXN0IG9iamVjdHMgKHdpdGggYGl0ZW1gIG1ldGhvZCkgYW5kXG4gIC8vIG90aGVyIG9iamVjdHMgd2l0aCBzdWl0YWJsZSBsZW5ndGggY2hhcmFjdGVyaXN0aWNzIGFyZSBhcnJheS1saWtlXG4gIHJldHVybiBpc051bWJlcihsZW5ndGgpICYmXG4gICAgKGxlbmd0aCA+PSAwICYmIChsZW5ndGggLSAxKSBpbiBvYmogfHwgdHlwZW9mIG9iai5pdGVtID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5mb3JFYWNoXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSW52b2tlcyB0aGUgYGl0ZXJhdG9yYCBmdW5jdGlvbiBvbmNlIGZvciBlYWNoIGl0ZW0gaW4gYG9iamAgY29sbGVjdGlvbiwgd2hpY2ggY2FuIGJlIGVpdGhlciBhblxuICogb2JqZWN0IG9yIGFuIGFycmF5LiBUaGUgYGl0ZXJhdG9yYCBmdW5jdGlvbiBpcyBpbnZva2VkIHdpdGggYGl0ZXJhdG9yKHZhbHVlLCBrZXksIG9iailgLCB3aGVyZSBgdmFsdWVgXG4gKiBpcyB0aGUgdmFsdWUgb2YgYW4gb2JqZWN0IHByb3BlcnR5IG9yIGFuIGFycmF5IGVsZW1lbnQsIGBrZXlgIGlzIHRoZSBvYmplY3QgcHJvcGVydHkga2V5IG9yXG4gKiBhcnJheSBlbGVtZW50IGluZGV4IGFuZCBvYmogaXMgdGhlIGBvYmpgIGl0c2VsZi4gU3BlY2lmeWluZyBhIGBjb250ZXh0YCBmb3IgdGhlIGZ1bmN0aW9uIGlzIG9wdGlvbmFsLlxuICpcbiAqIEl0IGlzIHdvcnRoIG5vdGluZyB0aGF0IGAuZm9yRWFjaGAgZG9lcyBub3QgaXRlcmF0ZSBvdmVyIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGJlY2F1c2UgaXQgZmlsdGVyc1xuICogdXNpbmcgdGhlIGBoYXNPd25Qcm9wZXJ0eWAgbWV0aG9kLlxuICpcbiAqIFVubGlrZSBFUzI2MidzXG4gKiBbQXJyYXkucHJvdG90eXBlLmZvckVhY2hdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy0xNS40LjQuMTgpLFxuICogUHJvdmlkaW5nICd1bmRlZmluZWQnIG9yICdudWxsJyB2YWx1ZXMgZm9yIGBvYmpgIHdpbGwgbm90IHRocm93IGEgVHlwZUVycm9yLCBidXQgcmF0aGVyIGp1c3RcbiAqIHJldHVybiB0aGUgdmFsdWUgcHJvdmlkZWQuXG4gKlxuICAgYGBganNcbiAgICAgdmFyIHZhbHVlcyA9IHtuYW1lOiAnbWlza28nLCBnZW5kZXI6ICdtYWxlJ307XG4gICAgIHZhciBsb2cgPSBbXTtcbiAgICAgYW5ndWxhci5mb3JFYWNoKHZhbHVlcywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgIHRoaXMucHVzaChrZXkgKyAnOiAnICsgdmFsdWUpO1xuICAgICB9LCBsb2cpO1xuICAgICBleHBlY3QobG9nKS50b0VxdWFsKFsnbmFtZTogbWlza28nLCAnZ2VuZGVyOiBtYWxlJ10pO1xuICAgYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBPYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0b3IgSXRlcmF0b3IgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdD19IGNvbnRleHQgT2JqZWN0IHRvIGJlY29tZSBjb250ZXh0IChgdGhpc2ApIGZvciB0aGUgaXRlcmF0b3IgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fEFycmF5fSBSZWZlcmVuY2UgdG8gYG9iamAuXG4gKi9cblxuZnVuY3Rpb24gZm9yRWFjaChvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gIHZhciBrZXksIGxlbmd0aDtcbiAgaWYgKG9iaikge1xuICAgIGlmIChpc0Z1bmN0aW9uKG9iaikpIHtcbiAgICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgICAvLyBOZWVkIHRvIGNoZWNrIGlmIGhhc093blByb3BlcnR5IGV4aXN0cyxcbiAgICAgICAgLy8gYXMgb24gSUU4IHRoZSByZXN1bHQgb2YgcXVlcnlTZWxlY3RvckFsbCBpcyBhbiBvYmplY3Qgd2l0aG91dCBhIGhhc093blByb3BlcnR5IGZ1bmN0aW9uXG4gICAgICAgIGlmIChrZXkgIT0gJ3Byb3RvdHlwZScgJiYga2V5ICE9ICdsZW5ndGgnICYmIGtleSAhPSAnbmFtZScgJiYgKCFvYmouaGFzT3duUHJvcGVydHkgfHwgb2JqLmhhc093blByb3BlcnR5KGtleSkpKSB7XG4gICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9iaikgfHwgaXNBcnJheUxpa2Uob2JqKSkge1xuICAgICAgdmFyIGlzUHJpbWl0aXZlID0gdHlwZW9mIG9iaiAhPT0gJ29iamVjdCc7XG4gICAgICBmb3IgKGtleSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGtleSA8IGxlbmd0aDsga2V5KyspIHtcbiAgICAgICAgaWYgKGlzUHJpbWl0aXZlIHx8IGtleSBpbiBvYmopIHtcbiAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9iai5mb3JFYWNoICYmIG9iai5mb3JFYWNoICE9PSBmb3JFYWNoKSB7XG4gICAgICAgIG9iai5mb3JFYWNoKGl0ZXJhdG9yLCBjb250ZXh0LCBvYmopO1xuICAgIH0gZWxzZSBpZiAoaXNCbGFua09iamVjdChvYmopKSB7XG4gICAgICAvLyBjcmVhdGVNYXAoKSBmYXN0IHBhdGggLS0tIFNhZmUgdG8gYXZvaWQgaGFzT3duUHJvcGVydHkgY2hlY2sgYmVjYXVzZSBwcm90b3R5cGUgY2hhaW4gaXMgZW1wdHlcbiAgICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqLmhhc093blByb3BlcnR5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBTbG93IHBhdGggZm9yIG9iamVjdHMgaW5oZXJpdGluZyBPYmplY3QucHJvdG90eXBlLCBoYXNPd25Qcm9wZXJ0eSBjaGVjayBuZWVkZWRcbiAgICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2xvdyBwYXRoIGZvciBvYmplY3RzIHdoaWNoIGRvIG5vdCBoYXZlIGEgbWV0aG9kIGBoYXNPd25Qcm9wZXJ0eWBcbiAgICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaFNvcnRlZChvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKS5zb3J0KCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleXNbaV1dLCBrZXlzW2ldKTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn1cblxuXG4vKipcbiAqIHdoZW4gdXNpbmcgZm9yRWFjaCB0aGUgcGFyYW1zIGFyZSB2YWx1ZSwga2V5LCBidXQgaXQgaXMgb2Z0ZW4gdXNlZnVsIHRvIGhhdmUga2V5LCB2YWx1ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nLCAqKX0gaXRlcmF0b3JGblxuICogQHJldHVybnMge2Z1bmN0aW9uKCosIHN0cmluZyl9XG4gKi9cbmZ1bmN0aW9uIHJldmVyc2VQYXJhbXMoaXRlcmF0b3JGbikge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIGtleSkgeyBpdGVyYXRvckZuKGtleSwgdmFsdWUpOyB9O1xufVxuXG4vKipcbiAqIEEgY29uc2lzdGVudCB3YXkgb2YgY3JlYXRpbmcgdW5pcXVlIElEcyBpbiBhbmd1bGFyLlxuICpcbiAqIFVzaW5nIHNpbXBsZSBudW1iZXJzIGFsbG93cyB1cyB0byBnZW5lcmF0ZSAyOC42IG1pbGxpb24gdW5pcXVlIGlkcyBwZXIgc2Vjb25kIGZvciAxMCB5ZWFycyBiZWZvcmVcbiAqIHdlIGhpdCBudW1iZXIgcHJlY2lzaW9uIGlzc3VlcyBpbiBKYXZhU2NyaXB0LlxuICpcbiAqIE1hdGgucG93KDIsNTMpIC8gNjAgLyA2MCAvIDI0IC8gMzY1IC8gMTAgPSAyOC42TVxuICpcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFuIHVuaXF1ZSBhbHBoYS1udW1lcmljIHN0cmluZ1xuICovXG5mdW5jdGlvbiBuZXh0VWlkKCkge1xuICByZXR1cm4gKyt1aWQ7XG59XG5cblxuLyoqXG4gKiBTZXQgb3IgY2xlYXIgdGhlIGhhc2hrZXkgZm9yIGFuIG9iamVjdC5cbiAqIEBwYXJhbSBvYmogb2JqZWN0XG4gKiBAcGFyYW0gaCB0aGUgaGFzaGtleSAoIXRydXRoeSB0byBkZWxldGUgdGhlIGhhc2hrZXkpXG4gKi9cbmZ1bmN0aW9uIHNldEhhc2hLZXkob2JqLCBoKSB7XG4gIGlmIChoKSB7XG4gICAgb2JqLiQkaGFzaEtleSA9IGg7XG4gIH0gZWxzZSB7XG4gICAgZGVsZXRlIG9iai4kJGhhc2hLZXk7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBiYXNlRXh0ZW5kKGRzdCwgb2JqcywgZGVlcCkge1xuICB2YXIgaCA9IGRzdC4kJGhhc2hLZXk7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGlpID0gb2Jqcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgdmFyIG9iaiA9IG9ianNbaV07XG4gICAgaWYgKCFpc09iamVjdChvYmopICYmICFpc0Z1bmN0aW9uKG9iaikpIGNvbnRpbnVlO1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICBmb3IgKHZhciBqID0gMCwgamogPSBrZXlzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2pdO1xuICAgICAgdmFyIHNyYyA9IG9ialtrZXldO1xuXG4gICAgICBpZiAoZGVlcCAmJiBpc09iamVjdChzcmMpKSB7XG4gICAgICAgIGlmIChpc0RhdGUoc3JjKSkge1xuICAgICAgICAgIGRzdFtrZXldID0gbmV3IERhdGUoc3JjLnZhbHVlT2YoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNSZWdFeHAoc3JjKSkge1xuICAgICAgICAgIGRzdFtrZXldID0gbmV3IFJlZ0V4cChzcmMpO1xuICAgICAgICB9IGVsc2UgaWYgKHNyYy5ub2RlTmFtZSkge1xuICAgICAgICAgIGRzdFtrZXldID0gc3JjLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0VsZW1lbnQoc3JjKSkge1xuICAgICAgICAgIGRzdFtrZXldID0gc3JjLmNsb25lKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFpc09iamVjdChkc3Rba2V5XSkpIGRzdFtrZXldID0gaXNBcnJheShzcmMpID8gW10gOiB7fTtcbiAgICAgICAgICBiYXNlRXh0ZW5kKGRzdFtrZXldLCBbc3JjXSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRzdFtrZXldID0gc3JjO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNldEhhc2hLZXkoZHN0LCBoKTtcbiAgcmV0dXJuIGRzdDtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuZXh0ZW5kXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRXh0ZW5kcyB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGBkc3RgIGJ5IGNvcHlpbmcgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBmcm9tIHRoZSBgc3JjYCBvYmplY3QocylcbiAqIHRvIGBkc3RgLiBZb3UgY2FuIHNwZWNpZnkgbXVsdGlwbGUgYHNyY2Agb2JqZWN0cy4gSWYgeW91IHdhbnQgdG8gcHJlc2VydmUgb3JpZ2luYWwgb2JqZWN0cywgeW91IGNhbiBkbyBzb1xuICogYnkgcGFzc2luZyBhbiBlbXB0eSBvYmplY3QgYXMgdGhlIHRhcmdldDogYHZhciBvYmplY3QgPSBhbmd1bGFyLmV4dGVuZCh7fSwgb2JqZWN0MSwgb2JqZWN0MilgLlxuICpcbiAqICoqTm90ZToqKiBLZWVwIGluIG1pbmQgdGhhdCBgYW5ndWxhci5leHRlbmRgIGRvZXMgbm90IHN1cHBvcnQgcmVjdXJzaXZlIG1lcmdlIChkZWVwIGNvcHkpLiBVc2VcbiAqIHtAbGluayBhbmd1bGFyLm1lcmdlfSBmb3IgdGhpcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZHN0IERlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzcmMgU291cmNlIG9iamVjdChzKS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlZmVyZW5jZSB0byBgZHN0YC5cbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGRzdCkge1xuICByZXR1cm4gYmFzZUV4dGVuZChkc3QsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgZmFsc2UpO1xufVxuXG5cbi8qKlxuKiBAbmdkb2MgZnVuY3Rpb25cbiogQG5hbWUgYW5ndWxhci5tZXJnZVxuKiBAbW9kdWxlIG5nXG4qIEBraW5kIGZ1bmN0aW9uXG4qXG4qIEBkZXNjcmlwdGlvblxuKiBEZWVwbHkgZXh0ZW5kcyB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGBkc3RgIGJ5IGNvcHlpbmcgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBmcm9tIHRoZSBgc3JjYCBvYmplY3QocylcbiogdG8gYGRzdGAuIFlvdSBjYW4gc3BlY2lmeSBtdWx0aXBsZSBgc3JjYCBvYmplY3RzLiBJZiB5b3Ugd2FudCB0byBwcmVzZXJ2ZSBvcmlnaW5hbCBvYmplY3RzLCB5b3UgY2FuIGRvIHNvXG4qIGJ5IHBhc3NpbmcgYW4gZW1wdHkgb2JqZWN0IGFzIHRoZSB0YXJnZXQ6IGB2YXIgb2JqZWN0ID0gYW5ndWxhci5tZXJnZSh7fSwgb2JqZWN0MSwgb2JqZWN0MilgLlxuKlxuKiBVbmxpa2Uge0BsaW5rIGFuZ3VsYXIuZXh0ZW5kIGV4dGVuZCgpfSwgYG1lcmdlKClgIHJlY3Vyc2l2ZWx5IGRlc2NlbmRzIGludG8gb2JqZWN0IHByb3BlcnRpZXMgb2Ygc291cmNlXG4qIG9iamVjdHMsIHBlcmZvcm1pbmcgYSBkZWVwIGNvcHkuXG4qXG4qIEBwYXJhbSB7T2JqZWN0fSBkc3QgRGVzdGluYXRpb24gb2JqZWN0LlxuKiBAcGFyYW0gey4uLk9iamVjdH0gc3JjIFNvdXJjZSBvYmplY3QocykuXG4qIEByZXR1cm5zIHtPYmplY3R9IFJlZmVyZW5jZSB0byBgZHN0YC5cbiovXG5mdW5jdGlvbiBtZXJnZShkc3QpIHtcbiAgcmV0dXJuIGJhc2VFeHRlbmQoZHN0LCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIHRydWUpO1xufVxuXG5cblxuZnVuY3Rpb24gdG9JbnQoc3RyKSB7XG4gIHJldHVybiBwYXJzZUludChzdHIsIDEwKTtcbn1cblxuXG5mdW5jdGlvbiBpbmhlcml0KHBhcmVudCwgZXh0cmEpIHtcbiAgcmV0dXJuIGV4dGVuZChPYmplY3QuY3JlYXRlKHBhcmVudCksIGV4dHJhKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIubm9vcFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBubyBvcGVyYXRpb25zLiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VmdWwgd2hlbiB3cml0aW5nIGNvZGUgaW4gdGhlXG4gKiBmdW5jdGlvbmFsIHN0eWxlLlxuICAgYGBganNcbiAgICAgZnVuY3Rpb24gZm9vKGNhbGxiYWNrKSB7XG4gICAgICAgdmFyIHJlc3VsdCA9IGNhbGN1bGF0ZVJlc3VsdCgpO1xuICAgICAgIChjYWxsYmFjayB8fCBhbmd1bGFyLm5vb3ApKHJlc3VsdCk7XG4gICAgIH1cbiAgIGBgYFxuICovXG5mdW5jdGlvbiBub29wKCkge31cbm5vb3AuJGluamVjdCA9IFtdO1xuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlkZW50aXR5XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgaXRzIGZpcnN0IGFyZ3VtZW50LiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY29kZSBpbiB0aGVcbiAqIGZ1bmN0aW9uYWwgc3R5bGUuXG4gKlxuICAgYGBganNcbiAgICAgZnVuY3Rpb24gdHJhbnNmb3JtZXIodHJhbnNmb3JtYXRpb25GbiwgdmFsdWUpIHtcbiAgICAgICByZXR1cm4gKHRyYW5zZm9ybWF0aW9uRm4gfHwgYW5ndWxhci5pZGVudGl0eSkodmFsdWUpO1xuICAgICB9O1xuICAgYGBgXG4gICogQHBhcmFtIHsqfSB2YWx1ZSB0byBiZSByZXR1cm5lZC5cbiAgKiBAcmV0dXJucyB7Kn0gdGhlIHZhbHVlIHBhc3NlZCBpbi5cbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkoJCkge3JldHVybiAkO31cbmlkZW50aXR5LiRpbmplY3QgPSBbXTtcblxuXG5mdW5jdGlvbiB2YWx1ZUZuKHZhbHVlKSB7cmV0dXJuIGZ1bmN0aW9uKCkge3JldHVybiB2YWx1ZTt9O31cblxuZnVuY3Rpb24gaGFzQ3VzdG9tVG9TdHJpbmcob2JqKSB7XG4gIHJldHVybiBpc0Z1bmN0aW9uKG9iai50b1N0cmluZykgJiYgb2JqLnRvU3RyaW5nICE9PSB0b1N0cmluZztcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc1VuZGVmaW5lZFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgdW5kZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyB1bmRlZmluZWQuXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7fVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzRGVmaW5lZFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgZGVmaW5lZC5cbiAqL1xuZnVuY3Rpb24gaXNEZWZpbmVkKHZhbHVlKSB7cmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCc7fVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzT2JqZWN0XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhbiBgT2JqZWN0YC4gVW5saWtlIGB0eXBlb2ZgIGluIEphdmFTY3JpcHQsIGBudWxsYHMgYXJlIG5vdFxuICogY29uc2lkZXJlZCB0byBiZSBvYmplY3RzLiBOb3RlIHRoYXQgSmF2YVNjcmlwdCBhcnJheXMgYXJlIG9iamVjdHMuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGBPYmplY3RgIGJ1dCBub3QgYG51bGxgLlxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAvLyBodHRwOi8vanNwZXJmLmNvbS9pc29iamVjdDRcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG59XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhIG51bGwgcHJvdG90eXBlXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhbiBgT2JqZWN0YCB3aXRoIGEgbnVsbCBwcm90b3R5cGVcbiAqL1xuZnVuY3Rpb24gaXNCbGFua09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAhZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzU3RyaW5nXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhIGBTdHJpbmdgLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBTdHJpbmdgLlxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge3JldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO31cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc051bWJlclxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYSBgTnVtYmVyYC5cbiAqXG4gKiBUaGlzIGluY2x1ZGVzIHRoZSBcInNwZWNpYWxcIiBudW1iZXJzIGBOYU5gLCBgK0luZmluaXR5YCBhbmQgYC1JbmZpbml0eWAuXG4gKlxuICogSWYgeW91IHdpc2ggdG8gZXhjbHVkZSB0aGVzZSB0aGVuIHlvdSBjYW4gdXNlIHRoZSBuYXRpdmVcbiAqIFtgaXNGaW5pdGUnXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9pc0Zpbml0ZSlcbiAqIG1ldGhvZC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgTnVtYmVyYC5cbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJzt9XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNEYXRlXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHZhbHVlIGlzIGEgZGF0ZS5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgRGF0ZWAuXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc0FycmF5XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhbiBgQXJyYXlgLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhbiBgQXJyYXlgLlxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzRnVuY3Rpb25cbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYEZ1bmN0aW9uYC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgRnVuY3Rpb25gLlxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJzt9XG5cblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgdmFsdWUgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgUmVnRXhwYC5cbiAqL1xuZnVuY3Rpb24gaXNSZWdFeHAodmFsdWUpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cblxuXG4vKipcbiAqIENoZWNrcyBpZiBgb2JqYCBpcyBhIHdpbmRvdyBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gb2JqIE9iamVjdCB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYG9iamAgaXMgYSB3aW5kb3cgb2JqLlxuICovXG5mdW5jdGlvbiBpc1dpbmRvdyhvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmoud2luZG93ID09PSBvYmo7XG59XG5cblxuZnVuY3Rpb24gaXNTY29wZShvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouJGV2YWxBc3luYyAmJiBvYmouJHdhdGNoO1xufVxuXG5cbmZ1bmN0aW9uIGlzRmlsZShvYmopIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG5cbmZ1bmN0aW9uIGlzRm9ybURhdGEob2JqKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEZvcm1EYXRhXSc7XG59XG5cblxuZnVuY3Rpb24gaXNCbG9iKG9iaikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cblxuZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcbn1cblxuXG5mdW5jdGlvbiBpc1Byb21pc2VMaWtlKG9iaikge1xuICByZXR1cm4gb2JqICYmIGlzRnVuY3Rpb24ob2JqLnRoZW4pO1xufVxuXG5cbnZhciBUWVBFRF9BUlJBWV9SRUdFWFAgPSAvXlxcW29iamVjdCAoPzpVaW50OHxVaW50OENsYW1wZWR8VWludDE2fFVpbnQzMnxJbnQ4fEludDE2fEludDMyfEZsb2F0MzJ8RmxvYXQ2NClBcnJheVxcXSQvO1xuZnVuY3Rpb24gaXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAmJiBpc051bWJlcih2YWx1ZS5sZW5ndGgpICYmIFRZUEVEX0FSUkFZX1JFR0VYUC50ZXN0KHRvU3RyaW5nLmNhbGwodmFsdWUpKTtcbn1cblxuXG52YXIgdHJpbSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTtcbn07XG5cbi8vIENvcGllZCBmcm9tOlxuLy8gaHR0cDovL2RvY3MuY2xvc3VyZS1saWJyYXJ5Lmdvb2dsZWNvZGUuY29tL2dpdC9sb2NhbF9jbG9zdXJlX2dvb2dfc3RyaW5nX3N0cmluZy5qcy5zb3VyY2UuaHRtbCNsaW5lMTAyMVxuLy8gUHJlcmVxOiBzIGlzIGEgc3RyaW5nLlxudmFyIGVzY2FwZUZvclJlZ2V4cCA9IGZ1bmN0aW9uKHMpIHtcbiAgcmV0dXJuIHMucmVwbGFjZSgvKFstKClcXFtcXF17fSs/Ki4kXFxefCw6IzwhXFxcXF0pL2csICdcXFxcJDEnKS5cbiAgICAgICAgICAgcmVwbGFjZSgvXFx4MDgvZywgJ1xcXFx4MDgnKTtcbn07XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNFbGVtZW50XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhIERPTSBlbGVtZW50IChvciB3cmFwcGVkIGpRdWVyeSBlbGVtZW50KS5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCAob3Igd3JhcHBlZCBqUXVlcnkgZWxlbWVudCkuXG4gKi9cbmZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7XG4gIHJldHVybiAhIShub2RlICYmXG4gICAgKG5vZGUubm9kZU5hbWUgIC8vIHdlIGFyZSBhIGRpcmVjdCBlbGVtZW50XG4gICAgfHwgKG5vZGUucHJvcCAmJiBub2RlLmF0dHIgJiYgbm9kZS5maW5kKSkpOyAgLy8gd2UgaGF2ZSBhbiBvbiBhbmQgZmluZCBtZXRob2QgcGFydCBvZiBqUXVlcnkgQVBJXG59XG5cbi8qKlxuICogQHBhcmFtIHN0ciAna2V5MSxrZXkyLC4uLidcbiAqIEByZXR1cm5zIHtvYmplY3R9IGluIHRoZSBmb3JtIG9mIHtrZXkxOnRydWUsIGtleTI6dHJ1ZSwgLi4ufVxuICovXG5mdW5jdGlvbiBtYWtlTWFwKHN0cikge1xuICB2YXIgb2JqID0ge30sIGl0ZW1zID0gc3RyLnNwbGl0KFwiLFwiKSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgb2JqW2l0ZW1zW2ldXSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuXG5mdW5jdGlvbiBub2RlTmFtZV8oZWxlbWVudCkge1xuICByZXR1cm4gbG93ZXJjYXNlKGVsZW1lbnQubm9kZU5hbWUgfHwgKGVsZW1lbnRbMF0gJiYgZWxlbWVudFswXS5ub2RlTmFtZSkpO1xufVxuXG5mdW5jdGlvbiBpbmNsdWRlcyhhcnJheSwgb2JqKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGFycmF5LCBvYmopICE9IC0xO1xufVxuXG5mdW5jdGlvbiBhcnJheVJlbW92ZShhcnJheSwgdmFsdWUpIHtcbiAgdmFyIGluZGV4ID0gYXJyYXkuaW5kZXhPZih2YWx1ZSk7XG4gIGlmIChpbmRleCA+PSAwKSB7XG4gICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICByZXR1cm4gaW5kZXg7XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmNvcHlcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGVzIGEgZGVlcCBjb3B5IG9mIGBzb3VyY2VgLCB3aGljaCBzaG91bGQgYmUgYW4gb2JqZWN0IG9yIGFuIGFycmF5LlxuICpcbiAqICogSWYgbm8gZGVzdGluYXRpb24gaXMgc3VwcGxpZWQsIGEgY29weSBvZiB0aGUgb2JqZWN0IG9yIGFycmF5IGlzIGNyZWF0ZWQuXG4gKiAqIElmIGEgZGVzdGluYXRpb24gaXMgcHJvdmlkZWQsIGFsbCBvZiBpdHMgZWxlbWVudHMgKGZvciBhcnJheXMpIG9yIHByb3BlcnRpZXMgKGZvciBvYmplY3RzKVxuICogICBhcmUgZGVsZXRlZCBhbmQgdGhlbiBhbGwgZWxlbWVudHMvcHJvcGVydGllcyBmcm9tIHRoZSBzb3VyY2UgYXJlIGNvcGllZCB0byBpdC5cbiAqICogSWYgYHNvdXJjZWAgaXMgbm90IGFuIG9iamVjdCBvciBhcnJheSAoaW5jLiBgbnVsbGAgYW5kIGB1bmRlZmluZWRgKSwgYHNvdXJjZWAgaXMgcmV0dXJuZWQuXG4gKiAqIElmIGBzb3VyY2VgIGlzIGlkZW50aWNhbCB0byAnZGVzdGluYXRpb24nIGFuIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93bi5cbiAqXG4gKiBAcGFyYW0geyp9IHNvdXJjZSBUaGUgc291cmNlIHRoYXQgd2lsbCBiZSB1c2VkIHRvIG1ha2UgYSBjb3B5LlxuICogICAgICAgICAgICAgICAgICAgQ2FuIGJlIGFueSB0eXBlLCBpbmNsdWRpbmcgcHJpbWl0aXZlcywgYG51bGxgLCBhbmQgYHVuZGVmaW5lZGAuXG4gKiBAcGFyYW0geyhPYmplY3R8QXJyYXkpPX0gZGVzdGluYXRpb24gRGVzdGluYXRpb24gaW50byB3aGljaCB0aGUgc291cmNlIGlzIGNvcGllZC4gSWZcbiAqICAgICBwcm92aWRlZCwgbXVzdCBiZSBvZiB0aGUgc2FtZSB0eXBlIGFzIGBzb3VyY2VgLlxuICogQHJldHVybnMgeyp9IFRoZSBjb3B5IG9yIHVwZGF0ZWQgYGRlc3RpbmF0aW9uYCwgaWYgYGRlc3RpbmF0aW9uYCB3YXMgc3BlY2lmaWVkLlxuICpcbiAqIEBleGFtcGxlXG4gPGV4YW1wbGUgbW9kdWxlPVwiY29weUV4YW1wbGVcIj5cbiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gPGZvcm0gbm92YWxpZGF0ZSBjbGFzcz1cInNpbXBsZS1mb3JtXCI+XG4gTmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJ1c2VyLm5hbWVcIiAvPjxiciAvPlxuIEUtbWFpbDogPGlucHV0IHR5cGU9XCJlbWFpbFwiIG5nLW1vZGVsPVwidXNlci5lbWFpbFwiIC8+PGJyIC8+XG4gR2VuZGVyOiA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmctbW9kZWw9XCJ1c2VyLmdlbmRlclwiIHZhbHVlPVwibWFsZVwiIC8+bWFsZVxuIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBuZy1tb2RlbD1cInVzZXIuZ2VuZGVyXCIgdmFsdWU9XCJmZW1hbGVcIiAvPmZlbWFsZTxiciAvPlxuIDxidXR0b24gbmctY2xpY2s9XCJyZXNldCgpXCI+UkVTRVQ8L2J1dHRvbj5cbiA8YnV0dG9uIG5nLWNsaWNrPVwidXBkYXRlKHVzZXIpXCI+U0FWRTwvYnV0dG9uPlxuIDwvZm9ybT5cbiA8cHJlPmZvcm0gPSB7e3VzZXIgfCBqc29ufX08L3ByZT5cbiA8cHJlPm1hc3RlciA9IHt7bWFzdGVyIHwganNvbn19PC9wcmU+XG4gPC9kaXY+XG5cbiA8c2NyaXB0PlxuICBhbmd1bGFyLm1vZHVsZSgnY29weUV4YW1wbGUnLCBbXSlcbiAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgJHNjb3BlLm1hc3Rlcj0ge307XG5cbiAgICAgICRzY29wZS51cGRhdGUgPSBmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgIC8vIEV4YW1wbGUgd2l0aCAxIGFyZ3VtZW50XG4gICAgICAgICRzY29wZS5tYXN0ZXI9IGFuZ3VsYXIuY29weSh1c2VyKTtcbiAgICAgIH07XG5cbiAgICAgICRzY29wZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBFeGFtcGxlIHdpdGggMiBhcmd1bWVudHNcbiAgICAgICAgYW5ndWxhci5jb3B5KCRzY29wZS5tYXN0ZXIsICRzY29wZS51c2VyKTtcbiAgICAgIH07XG5cbiAgICAgICRzY29wZS5yZXNldCgpO1xuICAgIH1dKTtcbiA8L3NjcmlwdD5cbiA8L2ZpbGU+XG4gPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiBjb3B5KHNvdXJjZSwgZGVzdGluYXRpb24pIHtcbiAgdmFyIHN0YWNrU291cmNlID0gW107XG4gIHZhciBzdGFja0Rlc3QgPSBbXTtcblxuICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICBpZiAoaXNUeXBlZEFycmF5KGRlc3RpbmF0aW9uKSkge1xuICAgICAgdGhyb3cgbmdNaW5FcnIoJ2NwdGEnLCBcIkNhbid0IGNvcHkhIFR5cGVkQXJyYXkgZGVzdGluYXRpb24gY2Fubm90IGJlIG11dGF0ZWQuXCIpO1xuICAgIH1cbiAgICBpZiAoc291cmNlID09PSBkZXN0aW5hdGlvbikge1xuICAgICAgdGhyb3cgbmdNaW5FcnIoJ2NwaScsIFwiQ2FuJ3QgY29weSEgU291cmNlIGFuZCBkZXN0aW5hdGlvbiBhcmUgaWRlbnRpY2FsLlwiKTtcbiAgICB9XG5cbiAgICAvLyBFbXB0eSB0aGUgZGVzdGluYXRpb24gb2JqZWN0XG4gICAgaWYgKGlzQXJyYXkoZGVzdGluYXRpb24pKSB7XG4gICAgICBkZXN0aW5hdGlvbi5sZW5ndGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JFYWNoKGRlc3RpbmF0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChrZXkgIT09ICckJGhhc2hLZXknKSB7XG4gICAgICAgICAgZGVsZXRlIGRlc3RpbmF0aW9uW2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YWNrU291cmNlLnB1c2goc291cmNlKTtcbiAgICBzdGFja0Rlc3QucHVzaChkZXN0aW5hdGlvbik7XG4gICAgcmV0dXJuIGNvcHlSZWN1cnNlKHNvdXJjZSwgZGVzdGluYXRpb24pO1xuICB9XG5cbiAgcmV0dXJuIGNvcHlFbGVtZW50KHNvdXJjZSk7XG5cbiAgZnVuY3Rpb24gY29weVJlY3Vyc2Uoc291cmNlLCBkZXN0aW5hdGlvbikge1xuICAgIHZhciBoID0gZGVzdGluYXRpb24uJCRoYXNoS2V5O1xuICAgIHZhciByZXN1bHQsIGtleTtcbiAgICBpZiAoaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBzb3VyY2UubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBkZXN0aW5hdGlvbi5wdXNoKGNvcHlFbGVtZW50KHNvdXJjZVtpXSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNCbGFua09iamVjdChzb3VyY2UpKSB7XG4gICAgICAvLyBjcmVhdGVNYXAoKSBmYXN0IHBhdGggLS0tIFNhZmUgdG8gYXZvaWQgaGFzT3duUHJvcGVydHkgY2hlY2sgYmVjYXVzZSBwcm90b3R5cGUgY2hhaW4gaXMgZW1wdHlcbiAgICAgIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY29weUVsZW1lbnQoc291cmNlW2tleV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc291cmNlICYmIHR5cGVvZiBzb3VyY2UuaGFzT3duUHJvcGVydHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIFNsb3cgcGF0aCwgd2hpY2ggbXVzdCByZWx5IG9uIGhhc093blByb3BlcnR5XG4gICAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IGNvcHlFbGVtZW50KHNvdXJjZVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTbG93ZXN0IHBhdGggLS0tIGhhc093blByb3BlcnR5IGNhbid0IGJlIGNhbGxlZCBhcyBhIG1ldGhvZFxuICAgICAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBjb3B5RWxlbWVudChzb3VyY2Vba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgc2V0SGFzaEtleShkZXN0aW5hdGlvbiwgaCk7XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gY29weUVsZW1lbnQoc291cmNlKSB7XG4gICAgLy8gU2ltcGxlIHZhbHVlc1xuICAgIGlmICghaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9XG5cbiAgICAvLyBBbHJlYWR5IGNvcGllZCB2YWx1ZXNcbiAgICB2YXIgaW5kZXggPSBzdGFja1NvdXJjZS5pbmRleE9mKHNvdXJjZSk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgcmV0dXJuIHN0YWNrRGVzdFtpbmRleF07XG4gICAgfVxuXG4gICAgaWYgKGlzV2luZG93KHNvdXJjZSkgfHwgaXNTY29wZShzb3VyY2UpKSB7XG4gICAgICB0aHJvdyBuZ01pbkVycignY3B3cycsXG4gICAgICAgIFwiQ2FuJ3QgY29weSEgTWFraW5nIGNvcGllcyBvZiBXaW5kb3cgb3IgU2NvcGUgaW5zdGFuY2VzIGlzIG5vdCBzdXBwb3J0ZWQuXCIpO1xuICAgIH1cblxuICAgIHZhciBuZWVkc1JlY3Vyc2UgPSBmYWxzZTtcbiAgICB2YXIgZGVzdGluYXRpb247XG5cbiAgICBpZiAoaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICBkZXN0aW5hdGlvbiA9IFtdO1xuICAgICAgbmVlZHNSZWN1cnNlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGlzVHlwZWRBcnJheShzb3VyY2UpKSB7XG4gICAgICBkZXN0aW5hdGlvbiA9IG5ldyBzb3VyY2UuY29uc3RydWN0b3Ioc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKGlzRGF0ZShzb3VyY2UpKSB7XG4gICAgICBkZXN0aW5hdGlvbiA9IG5ldyBEYXRlKHNvdXJjZS5nZXRUaW1lKCkpO1xuICAgIH0gZWxzZSBpZiAoaXNSZWdFeHAoc291cmNlKSkge1xuICAgICAgZGVzdGluYXRpb24gPSBuZXcgUmVnRXhwKHNvdXJjZS5zb3VyY2UsIHNvdXJjZS50b1N0cmluZygpLm1hdGNoKC9bXlxcL10qJC8pWzBdKTtcbiAgICAgIGRlc3RpbmF0aW9uLmxhc3RJbmRleCA9IHNvdXJjZS5sYXN0SW5kZXg7XG4gICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHNvdXJjZS5jbG9uZU5vZGUpKSB7XG4gICAgICAgIGRlc3RpbmF0aW9uID0gc291cmNlLmNsb25lTm9kZSh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVzdGluYXRpb24gPSBPYmplY3QuY3JlYXRlKGdldFByb3RvdHlwZU9mKHNvdXJjZSkpO1xuICAgICAgbmVlZHNSZWN1cnNlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBzdGFja1NvdXJjZS5wdXNoKHNvdXJjZSk7XG4gICAgc3RhY2tEZXN0LnB1c2goZGVzdGluYXRpb24pO1xuXG4gICAgcmV0dXJuIG5lZWRzUmVjdXJzZVxuICAgICAgPyBjb3B5UmVjdXJzZShzb3VyY2UsIGRlc3RpbmF0aW9uKVxuICAgICAgOiBkZXN0aW5hdGlvbjtcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzaGFsbG93IGNvcHkgb2YgYW4gb2JqZWN0LCBhbiBhcnJheSBvciBhIHByaW1pdGl2ZS5cbiAqXG4gKiBBc3N1bWVzIHRoYXQgdGhlcmUgYXJlIG5vIHByb3RvIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dDb3B5KHNyYywgZHN0KSB7XG4gIGlmIChpc0FycmF5KHNyYykpIHtcbiAgICBkc3QgPSBkc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBzcmMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgZHN0W2ldID0gc3JjW2ldO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChzcmMpKSB7XG4gICAgZHN0ID0gZHN0IHx8IHt9O1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgICAgaWYgKCEoa2V5LmNoYXJBdCgwKSA9PT0gJyQnICYmIGtleS5jaGFyQXQoMSkgPT09ICckJykpIHtcbiAgICAgICAgZHN0W2tleV0gPSBzcmNba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZHN0IHx8IHNyYztcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5lcXVhbHNcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIHR3byBvYmplY3RzIG9yIHR3byB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQuIFN1cHBvcnRzIHZhbHVlIHR5cGVzLCByZWd1bGFyXG4gKiBleHByZXNzaW9ucywgYXJyYXlzIGFuZCBvYmplY3RzLlxuICpcbiAqIFR3byBvYmplY3RzIG9yIHZhbHVlcyBhcmUgY29uc2lkZXJlZCBlcXVpdmFsZW50IGlmIGF0IGxlYXN0IG9uZSBvZiB0aGUgZm9sbG93aW5nIGlzIHRydWU6XG4gKlxuICogKiBCb3RoIG9iamVjdHMgb3IgdmFsdWVzIHBhc3MgYD09PWAgY29tcGFyaXNvbi5cbiAqICogQm90aCBvYmplY3RzIG9yIHZhbHVlcyBhcmUgb2YgdGhlIHNhbWUgdHlwZSBhbmQgYWxsIG9mIHRoZWlyIHByb3BlcnRpZXMgYXJlIGVxdWFsIGJ5XG4gKiAgIGNvbXBhcmluZyB0aGVtIHdpdGggYGFuZ3VsYXIuZXF1YWxzYC5cbiAqICogQm90aCB2YWx1ZXMgYXJlIE5hTi4gKEluIEphdmFTY3JpcHQsIE5hTiA9PSBOYU4gPT4gZmFsc2UuIEJ1dCB3ZSBjb25zaWRlciB0d28gTmFOIGFzIGVxdWFsKVxuICogKiBCb3RoIHZhbHVlcyByZXByZXNlbnQgdGhlIHNhbWUgcmVndWxhciBleHByZXNzaW9uIChJbiBKYXZhU2NyaXB0LFxuICogICAvYWJjLyA9PSAvYWJjLyA9PiBmYWxzZS4gQnV0IHdlIGNvbnNpZGVyIHR3byByZWd1bGFyIGV4cHJlc3Npb25zIGFzIGVxdWFsIHdoZW4gdGhlaXIgdGV4dHVhbFxuICogICByZXByZXNlbnRhdGlvbiBtYXRjaGVzKS5cbiAqXG4gKiBEdXJpbmcgYSBwcm9wZXJ0eSBjb21wYXJpc29uLCBwcm9wZXJ0aWVzIG9mIGBmdW5jdGlvbmAgdHlwZSBhbmQgcHJvcGVydGllcyB3aXRoIG5hbWVzXG4gKiB0aGF0IGJlZ2luIHdpdGggYCRgIGFyZSBpZ25vcmVkLlxuICpcbiAqIFNjb3BlIGFuZCBET01XaW5kb3cgb2JqZWN0cyBhcmUgYmVpbmcgY29tcGFyZWQgb25seSBieSBpZGVudGlmeSAoYD09PWApLlxuICpcbiAqIEBwYXJhbSB7Kn0gbzEgT2JqZWN0IG9yIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG8yIE9iamVjdCBvciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYXJndW1lbnRzIGFyZSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxzKG8xLCBvMikge1xuICBpZiAobzEgPT09IG8yKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKG8xID09PSBudWxsIHx8IG8yID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIGlmIChvMSAhPT0gbzEgJiYgbzIgIT09IG8yKSByZXR1cm4gdHJ1ZTsgLy8gTmFOID09PSBOYU5cbiAgdmFyIHQxID0gdHlwZW9mIG8xLCB0MiA9IHR5cGVvZiBvMiwgbGVuZ3RoLCBrZXksIGtleVNldDtcbiAgaWYgKHQxID09IHQyKSB7XG4gICAgaWYgKHQxID09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoaXNBcnJheShvMSkpIHtcbiAgICAgICAgaWYgKCFpc0FycmF5KG8yKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoKGxlbmd0aCA9IG8xLmxlbmd0aCkgPT0gbzIubGVuZ3RoKSB7XG4gICAgICAgICAgZm9yIChrZXkgPSAwOyBrZXkgPCBsZW5ndGg7IGtleSsrKSB7XG4gICAgICAgICAgICBpZiAoIWVxdWFscyhvMVtrZXldLCBvMltrZXldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc0RhdGUobzEpKSB7XG4gICAgICAgIGlmICghaXNEYXRlKG8yKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gZXF1YWxzKG8xLmdldFRpbWUoKSwgbzIuZ2V0VGltZSgpKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNSZWdFeHAobzEpKSB7XG4gICAgICAgIHJldHVybiBpc1JlZ0V4cChvMikgPyBvMS50b1N0cmluZygpID09IG8yLnRvU3RyaW5nKCkgOiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1Njb3BlKG8xKSB8fCBpc1Njb3BlKG8yKSB8fCBpc1dpbmRvdyhvMSkgfHwgaXNXaW5kb3cobzIpIHx8XG4gICAgICAgICAgaXNBcnJheShvMikgfHwgaXNEYXRlKG8yKSB8fCBpc1JlZ0V4cChvMikpIHJldHVybiBmYWxzZTtcbiAgICAgICAga2V5U2V0ID0gY3JlYXRlTWFwKCk7XG4gICAgICAgIGZvciAoa2V5IGluIG8xKSB7XG4gICAgICAgICAgaWYgKGtleS5jaGFyQXQoMCkgPT09ICckJyB8fCBpc0Z1bmN0aW9uKG8xW2tleV0pKSBjb250aW51ZTtcbiAgICAgICAgICBpZiAoIWVxdWFscyhvMVtrZXldLCBvMltrZXldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGtleVNldFtrZXldID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGtleSBpbiBvMikge1xuICAgICAgICAgIGlmICghKGtleSBpbiBrZXlTZXQpICYmXG4gICAgICAgICAgICAgIGtleS5jaGFyQXQoMCkgIT09ICckJyAmJlxuICAgICAgICAgICAgICBpc0RlZmluZWQobzJba2V5XSkgJiZcbiAgICAgICAgICAgICAgIWlzRnVuY3Rpb24obzJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgY3NwID0gZnVuY3Rpb24oKSB7XG4gIGlmICghaXNEZWZpbmVkKGNzcC5ydWxlcykpIHtcblxuXG4gICAgdmFyIG5nQ3NwRWxlbWVudCA9IChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbbmctY3NwXScpIHx8XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW5nLWNzcF0nKSk7XG5cbiAgICBpZiAobmdDc3BFbGVtZW50KSB7XG4gICAgICB2YXIgbmdDc3BBdHRyaWJ1dGUgPSBuZ0NzcEVsZW1lbnQuZ2V0QXR0cmlidXRlKCduZy1jc3AnKSB8fFxuICAgICAgICAgICAgICAgICAgICBuZ0NzcEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW5nLWNzcCcpO1xuICAgICAgY3NwLnJ1bGVzID0ge1xuICAgICAgICBub1Vuc2FmZUV2YWw6ICFuZ0NzcEF0dHJpYnV0ZSB8fCAobmdDc3BBdHRyaWJ1dGUuaW5kZXhPZignbm8tdW5zYWZlLWV2YWwnKSAhPT0gLTEpLFxuICAgICAgICBub0lubGluZVN0eWxlOiAhbmdDc3BBdHRyaWJ1dGUgfHwgKG5nQ3NwQXR0cmlidXRlLmluZGV4T2YoJ25vLWlubGluZS1zdHlsZScpICE9PSAtMSlcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzcC5ydWxlcyA9IHtcbiAgICAgICAgbm9VbnNhZmVFdmFsOiBub1Vuc2FmZUV2YWwoKSxcbiAgICAgICAgbm9JbmxpbmVTdHlsZTogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNzcC5ydWxlcztcblxuICBmdW5jdGlvbiBub1Vuc2FmZUV2YWwoKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8qIGpzaGludCAtVzAzMSwgLVcwNTQgKi9cbiAgICAgIG5ldyBGdW5jdGlvbignJyk7XG4gICAgICAvKiBqc2hpbnQgK1cwMzEsICtXMDU0ICovXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBtb2R1bGUgbmdcbiAqIEBuYW1lIG5nSnFcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdKcSB0aGUgbmFtZSBvZiB0aGUgbGlicmFyeSBhdmFpbGFibGUgdW5kZXIgYHdpbmRvd2BcbiAqIHRvIGJlIHVzZWQgZm9yIGFuZ3VsYXIuZWxlbWVudFxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2UgdGhpcyBkaXJlY3RpdmUgdG8gZm9yY2UgdGhlIGFuZ3VsYXIuZWxlbWVudCBsaWJyYXJ5LiAgVGhpcyBzaG91bGQgYmVcbiAqIHVzZWQgdG8gZm9yY2UgZWl0aGVyIGpxTGl0ZSBieSBsZWF2aW5nIG5nLWpxIGJsYW5rIG9yIHNldHRpbmcgdGhlIG5hbWUgb2ZcbiAqIHRoZSBqcXVlcnkgdmFyaWFibGUgdW5kZXIgd2luZG93IChlZy4galF1ZXJ5KS5cbiAqXG4gKiBTaW5jZSBhbmd1bGFyIGxvb2tzIGZvciB0aGlzIGRpcmVjdGl2ZSB3aGVuIGl0IGlzIGxvYWRlZCAoZG9lc24ndCB3YWl0IGZvciB0aGVcbiAqIERPTUNvbnRlbnRMb2FkZWQgZXZlbnQpLCBpdCBtdXN0IGJlIHBsYWNlZCBvbiBhbiBlbGVtZW50IHRoYXQgY29tZXMgYmVmb3JlIHRoZSBzY3JpcHRcbiAqIHdoaWNoIGxvYWRzIGFuZ3VsYXIuIEFsc28sIG9ubHkgdGhlIGZpcnN0IGluc3RhbmNlIG9mIGBuZy1qcWAgd2lsbCBiZSB1c2VkIGFuZCBhbGxcbiAqIG90aGVycyBpZ25vcmVkLlxuICpcbiAqIEBleGFtcGxlXG4gKiBUaGlzIGV4YW1wbGUgc2hvd3MgaG93IHRvIGZvcmNlIGpxTGl0ZSB1c2luZyB0aGUgYG5nSnFgIGRpcmVjdGl2ZSB0byB0aGUgYGh0bWxgIHRhZy5cbiBgYGBodG1sXG4gPCFkb2N0eXBlIGh0bWw+XG4gPGh0bWwgbmctYXBwIG5nLWpxPlxuIC4uLlxuIC4uLlxuIDwvaHRtbD5cbiBgYGBcbiAqIEBleGFtcGxlXG4gKiBUaGlzIGV4YW1wbGUgc2hvd3MgaG93IHRvIHVzZSBhIGpRdWVyeSBiYXNlZCBsaWJyYXJ5IG9mIGEgZGlmZmVyZW50IG5hbWUuXG4gKiBUaGUgbGlicmFyeSBuYW1lIG11c3QgYmUgYXZhaWxhYmxlIGF0IHRoZSB0b3AgbW9zdCAnd2luZG93Jy5cbiBgYGBodG1sXG4gPCFkb2N0eXBlIGh0bWw+XG4gPGh0bWwgbmctYXBwIG5nLWpxPVwialF1ZXJ5TGliXCI+XG4gLi4uXG4gLi4uXG4gPC9odG1sPlxuIGBgYFxuICovXG52YXIganEgPSBmdW5jdGlvbigpIHtcbiAgaWYgKGlzRGVmaW5lZChqcS5uYW1lXykpIHJldHVybiBqcS5uYW1lXztcbiAgdmFyIGVsO1xuICB2YXIgaSwgaWkgPSBuZ0F0dHJQcmVmaXhlcy5sZW5ndGgsIHByZWZpeCwgbmFtZTtcbiAgZm9yIChpID0gMDsgaSA8IGlpOyArK2kpIHtcbiAgICBwcmVmaXggPSBuZ0F0dHJQcmVmaXhlc1tpXTtcbiAgICBpZiAoZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbJyArIHByZWZpeC5yZXBsYWNlKCc6JywgJ1xcXFw6JykgKyAnanFdJykpIHtcbiAgICAgIG5hbWUgPSBlbC5nZXRBdHRyaWJ1dGUocHJlZml4ICsgJ2pxJyk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGpxLm5hbWVfID0gbmFtZSk7XG59O1xuXG5mdW5jdGlvbiBjb25jYXQoYXJyYXkxLCBhcnJheTIsIGluZGV4KSB7XG4gIHJldHVybiBhcnJheTEuY29uY2F0KHNsaWNlLmNhbGwoYXJyYXkyLCBpbmRleCkpO1xufVxuXG5mdW5jdGlvbiBzbGljZUFyZ3MoYXJncywgc3RhcnRJbmRleCkge1xuICByZXR1cm4gc2xpY2UuY2FsbChhcmdzLCBzdGFydEluZGV4IHx8IDApO1xufVxuXG5cbi8qIGpzaGludCAtVzEwMSAqL1xuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuYmluZFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBjYWxscyBmdW5jdGlvbiBgZm5gIGJvdW5kIHRvIGBzZWxmYCAoYHNlbGZgIGJlY29tZXMgdGhlIGB0aGlzYCBmb3JcbiAqIGBmbmApLiBZb3UgY2FuIHN1cHBseSBvcHRpb25hbCBgYXJnc2AgdGhhdCBhcmUgcHJlYm91bmQgdG8gdGhlIGZ1bmN0aW9uLiBUaGlzIGZlYXR1cmUgaXMgYWxzb1xuICoga25vd24gYXMgW3BhcnRpYWwgYXBwbGljYXRpb25dKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGFydGlhbF9hcHBsaWNhdGlvbiksIGFzXG4gKiBkaXN0aW5ndWlzaGVkIGZyb20gW2Z1bmN0aW9uIGN1cnJ5aW5nXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N1cnJ5aW5nI0NvbnRyYXN0X3dpdGhfcGFydGlhbF9mdW5jdGlvbl9hcHBsaWNhdGlvbikuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHNlbGYgQ29udGV4dCB3aGljaCBgZm5gIHNob3VsZCBiZSBldmFsdWF0ZWQgaW4uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEZ1bmN0aW9uIHRvIGJlIGJvdW5kLlxuICogQHBhcmFtIHsuLi4qfSBhcmdzIE9wdGlvbmFsIGFyZ3VtZW50cyB0byBiZSBwcmVib3VuZCB0byB0aGUgYGZuYCBmdW5jdGlvbiBjYWxsLlxuICogQHJldHVybnMge2Z1bmN0aW9uKCl9IEZ1bmN0aW9uIHRoYXQgd3JhcHMgdGhlIGBmbmAgd2l0aCBhbGwgdGhlIHNwZWNpZmllZCBiaW5kaW5ncy5cbiAqL1xuLyoganNoaW50ICtXMTAxICovXG5mdW5jdGlvbiBiaW5kKHNlbGYsIGZuKSB7XG4gIHZhciBjdXJyeUFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IHNsaWNlQXJncyhhcmd1bWVudHMsIDIpIDogW107XG4gIGlmIChpc0Z1bmN0aW9uKGZuKSAmJiAhKGZuIGluc3RhbmNlb2YgUmVnRXhwKSkge1xuICAgIHJldHVybiBjdXJyeUFyZ3MubGVuZ3RoXG4gICAgICA/IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgICAgICA/IGZuLmFwcGx5KHNlbGYsIGNvbmNhdChjdXJyeUFyZ3MsIGFyZ3VtZW50cywgMCkpXG4gICAgICAgICAgICA6IGZuLmFwcGx5KHNlbGYsIGN1cnJ5QXJncyk7XG4gICAgICAgIH1cbiAgICAgIDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgICAgID8gZm4uYXBwbHkoc2VsZiwgYXJndW1lbnRzKVxuICAgICAgICAgICAgOiBmbi5jYWxsKHNlbGYpO1xuICAgICAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIGluIElFLCBuYXRpdmUgbWV0aG9kcyBhcmUgbm90IGZ1bmN0aW9ucyBzbyB0aGV5IGNhbm5vdCBiZSBib3VuZCAobm90ZTogdGhleSBkb24ndCBuZWVkIHRvIGJlKVxuICAgIHJldHVybiBmbjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHRvSnNvblJlcGxhY2VyKGtleSwgdmFsdWUpIHtcbiAgdmFyIHZhbCA9IHZhbHVlO1xuXG4gIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnJCcgJiYga2V5LmNoYXJBdCgxKSA9PT0gJyQnKSB7XG4gICAgdmFsID0gdW5kZWZpbmVkO1xuICB9IGVsc2UgaWYgKGlzV2luZG93KHZhbHVlKSkge1xuICAgIHZhbCA9ICckV0lORE9XJztcbiAgfSBlbHNlIGlmICh2YWx1ZSAmJiAgZG9jdW1lbnQgPT09IHZhbHVlKSB7XG4gICAgdmFsID0gJyRET0NVTUVOVCc7XG4gIH0gZWxzZSBpZiAoaXNTY29wZSh2YWx1ZSkpIHtcbiAgICB2YWwgPSAnJFNDT1BFJztcbiAgfVxuXG4gIHJldHVybiB2YWw7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIudG9Kc29uXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2VyaWFsaXplcyBpbnB1dCBpbnRvIGEgSlNPTi1mb3JtYXR0ZWQgc3RyaW5nLiBQcm9wZXJ0aWVzIHdpdGggbGVhZGluZyAkJCBjaGFyYWN0ZXJzIHdpbGwgYmVcbiAqIHN0cmlwcGVkIHNpbmNlIGFuZ3VsYXIgdXNlcyB0aGlzIG5vdGF0aW9uIGludGVybmFsbHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl8RGF0ZXxzdHJpbmd8bnVtYmVyfSBvYmogSW5wdXQgdG8gYmUgc2VyaWFsaXplZCBpbnRvIEpTT04uXG4gKiBAcGFyYW0ge2Jvb2xlYW58bnVtYmVyfSBbcHJldHR5PTJdIElmIHNldCB0byB0cnVlLCB0aGUgSlNPTiBvdXRwdXQgd2lsbCBjb250YWluIG5ld2xpbmVzIGFuZCB3aGl0ZXNwYWNlLlxuICogICAgSWYgc2V0IHRvIGFuIGludGVnZXIsIHRoZSBKU09OIG91dHB1dCB3aWxsIGNvbnRhaW4gdGhhdCBtYW55IHNwYWNlcyBwZXIgaW5kZW50YXRpb24uXG4gKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gSlNPTi1pZmllZCBzdHJpbmcgcmVwcmVzZW50aW5nIGBvYmpgLlxuICovXG5mdW5jdGlvbiB0b0pzb24ob2JqLCBwcmV0dHkpIHtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSByZXR1cm4gdW5kZWZpbmVkO1xuICBpZiAoIWlzTnVtYmVyKHByZXR0eSkpIHtcbiAgICBwcmV0dHkgPSBwcmV0dHkgPyAyIDogbnVsbDtcbiAgfVxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCB0b0pzb25SZXBsYWNlciwgcHJldHR5KTtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5mcm9tSnNvblxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERlc2VyaWFsaXplcyBhIEpTT04gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBqc29uIEpTT04gc3RyaW5nIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybnMge09iamVjdHxBcnJheXxzdHJpbmd8bnVtYmVyfSBEZXNlcmlhbGl6ZWQgSlNPTiBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGZyb21Kc29uKGpzb24pIHtcbiAgcmV0dXJuIGlzU3RyaW5nKGpzb24pXG4gICAgICA/IEpTT04ucGFyc2UoanNvbilcbiAgICAgIDoganNvbjtcbn1cblxuXG5mdW5jdGlvbiB0aW1lem9uZVRvT2Zmc2V0KHRpbWV6b25lLCBmYWxsYmFjaykge1xuICB2YXIgcmVxdWVzdGVkVGltZXpvbmVPZmZzZXQgPSBEYXRlLnBhcnNlKCdKYW4gMDEsIDE5NzAgMDA6MDA6MDAgJyArIHRpbWV6b25lKSAvIDYwMDAwO1xuICByZXR1cm4gaXNOYU4ocmVxdWVzdGVkVGltZXpvbmVPZmZzZXQpID8gZmFsbGJhY2sgOiByZXF1ZXN0ZWRUaW1lem9uZU9mZnNldDtcbn1cblxuXG5mdW5jdGlvbiBhZGREYXRlTWludXRlcyhkYXRlLCBtaW51dGVzKSB7XG4gIGRhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7XG4gIGRhdGUuc2V0TWludXRlcyhkYXRlLmdldE1pbnV0ZXMoKSArIG1pbnV0ZXMpO1xuICByZXR1cm4gZGF0ZTtcbn1cblxuXG5mdW5jdGlvbiBjb252ZXJ0VGltZXpvbmVUb0xvY2FsKGRhdGUsIHRpbWV6b25lLCByZXZlcnNlKSB7XG4gIHJldmVyc2UgPSByZXZlcnNlID8gLTEgOiAxO1xuICB2YXIgdGltZXpvbmVPZmZzZXQgPSB0aW1lem9uZVRvT2Zmc2V0KHRpbWV6b25lLCBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICByZXR1cm4gYWRkRGF0ZU1pbnV0ZXMoZGF0ZSwgcmV2ZXJzZSAqICh0aW1lem9uZU9mZnNldCAtIGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSkpO1xufVxuXG5cbi8qKlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBlbGVtZW50LlxuICovXG5mdW5jdGlvbiBzdGFydGluZ1RhZyhlbGVtZW50KSB7XG4gIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCkuY2xvbmUoKTtcbiAgdHJ5IHtcbiAgICAvLyB0dXJucyBvdXQgSUUgZG9lcyBub3QgbGV0IHlvdSBzZXQgLmh0bWwoKSBvbiBlbGVtZW50cyB3aGljaFxuICAgIC8vIGFyZSBub3QgYWxsb3dlZCB0byBoYXZlIGNoaWxkcmVuLiBTbyB3ZSBqdXN0IGlnbm9yZSBpdC5cbiAgICBlbGVtZW50LmVtcHR5KCk7XG4gIH0gY2F0Y2ggKGUpIHt9XG4gIHZhciBlbGVtSHRtbCA9IGpxTGl0ZSgnPGRpdj4nKS5hcHBlbmQoZWxlbWVudCkuaHRtbCgpO1xuICB0cnkge1xuICAgIHJldHVybiBlbGVtZW50WzBdLm5vZGVUeXBlID09PSBOT0RFX1RZUEVfVEVYVCA/IGxvd2VyY2FzZShlbGVtSHRtbCkgOlxuICAgICAgICBlbGVtSHRtbC5cbiAgICAgICAgICBtYXRjaCgvXig8W14+XSs+KS8pWzFdLlxuICAgICAgICAgIHJlcGxhY2UoL148KFtcXHdcXC1dKykvLCBmdW5jdGlvbihtYXRjaCwgbm9kZU5hbWUpIHsgcmV0dXJuICc8JyArIGxvd2VyY2FzZShub2RlTmFtZSk7IH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGxvd2VyY2FzZShlbGVtSHRtbCk7XG4gIH1cblxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBUcmllcyB0byBkZWNvZGUgdGhlIFVSSSBjb21wb25lbnQgd2l0aG91dCB0aHJvd2luZyBhbiBleGNlcHRpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSBzdHIgdmFsdWUgcG90ZW50aWFsIFVSSSBjb21wb25lbnQgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGNhbiBiZSBkZWNvZGVkXG4gKiB3aXRoIHRoZSBkZWNvZGVVUklDb21wb25lbnQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRyeURlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSWdub3JlIGFueSBpbnZhbGlkIHVyaSBjb21wb25lbnRcbiAgfVxufVxuXG5cbi8qKlxuICogUGFyc2VzIGFuIGVzY2FwZWQgdXJsIHF1ZXJ5IHN0cmluZyBpbnRvIGtleS12YWx1ZSBwYWlycy5cbiAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZyxib29sZWFufEFycmF5Pn1cbiAqL1xuZnVuY3Rpb24gcGFyc2VLZXlWYWx1ZSgvKipzdHJpbmcqL2tleVZhbHVlKSB7XG4gIHZhciBvYmogPSB7fTtcbiAgZm9yRWFjaCgoa2V5VmFsdWUgfHwgXCJcIikuc3BsaXQoJyYnKSwgZnVuY3Rpb24oa2V5VmFsdWUpIHtcbiAgICB2YXIgc3BsaXRQb2ludCwga2V5LCB2YWw7XG4gICAgaWYgKGtleVZhbHVlKSB7XG4gICAgICBrZXkgPSBrZXlWYWx1ZSA9IGtleVZhbHVlLnJlcGxhY2UoL1xcKy9nLCclMjAnKTtcbiAgICAgIHNwbGl0UG9pbnQgPSBrZXlWYWx1ZS5pbmRleE9mKCc9Jyk7XG4gICAgICBpZiAoc3BsaXRQb2ludCAhPT0gLTEpIHtcbiAgICAgICAga2V5ID0ga2V5VmFsdWUuc3Vic3RyaW5nKDAsIHNwbGl0UG9pbnQpO1xuICAgICAgICB2YWwgPSBrZXlWYWx1ZS5zdWJzdHJpbmcoc3BsaXRQb2ludCArIDEpO1xuICAgICAgfVxuICAgICAga2V5ID0gdHJ5RGVjb2RlVVJJQ29tcG9uZW50KGtleSk7XG4gICAgICBpZiAoaXNEZWZpbmVkKGtleSkpIHtcbiAgICAgICAgdmFsID0gaXNEZWZpbmVkKHZhbCkgPyB0cnlEZWNvZGVVUklDb21wb25lbnQodmFsKSA6IHRydWU7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICBvYmpba2V5XSA9IHZhbDtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KG9ialtrZXldKSkge1xuICAgICAgICAgIG9ialtrZXldLnB1c2godmFsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvYmpba2V5XSA9IFtvYmpba2V5XSx2YWxdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gdG9LZXlWYWx1ZShvYmopIHtcbiAgdmFyIHBhcnRzID0gW107XG4gIGZvckVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBmb3JFYWNoKHZhbHVlLCBmdW5jdGlvbihhcnJheVZhbHVlKSB7XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5LCB0cnVlKSArXG4gICAgICAgICAgICAgICAgICAgKGFycmF5VmFsdWUgPT09IHRydWUgPyAnJyA6ICc9JyArIGVuY29kZVVyaVF1ZXJ5KGFycmF5VmFsdWUsIHRydWUpKSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5LCB0cnVlKSArXG4gICAgICAgICAgICAgICAodmFsdWUgPT09IHRydWUgPyAnJyA6ICc9JyArIGVuY29kZVVyaVF1ZXJ5KHZhbHVlLCB0cnVlKSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBwYXJ0cy5sZW5ndGggPyBwYXJ0cy5qb2luKCcmJykgOiAnJztcbn1cblxuXG4vKipcbiAqIFdlIG5lZWQgb3VyIGN1c3RvbSBtZXRob2QgYmVjYXVzZSBlbmNvZGVVUklDb21wb25lbnQgaXMgdG9vIGFnZ3Jlc3NpdmUgYW5kIGRvZXNuJ3QgZm9sbG93XG4gKiBodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmMzOTg2LnR4dCB3aXRoIHJlZ2FyZHMgdG8gdGhlIGNoYXJhY3RlciBzZXQgKHBjaGFyKSBhbGxvd2VkIGluIHBhdGhcbiAqIHNlZ21lbnRzOlxuICogICAgc2VnbWVudCAgICAgICA9ICpwY2hhclxuICogICAgcGNoYXIgICAgICAgICA9IHVucmVzZXJ2ZWQgLyBwY3QtZW5jb2RlZCAvIHN1Yi1kZWxpbXMgLyBcIjpcIiAvIFwiQFwiXG4gKiAgICBwY3QtZW5jb2RlZCAgID0gXCIlXCIgSEVYRElHIEhFWERJR1xuICogICAgdW5yZXNlcnZlZCAgICA9IEFMUEhBIC8gRElHSVQgLyBcIi1cIiAvIFwiLlwiIC8gXCJfXCIgLyBcIn5cIlxuICogICAgc3ViLWRlbGltcyAgICA9IFwiIVwiIC8gXCIkXCIgLyBcIiZcIiAvIFwiJ1wiIC8gXCIoXCIgLyBcIilcIlxuICogICAgICAgICAgICAgICAgICAgICAvIFwiKlwiIC8gXCIrXCIgLyBcIixcIiAvIFwiO1wiIC8gXCI9XCJcbiAqL1xuZnVuY3Rpb24gZW5jb2RlVXJpU2VnbWVudCh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVyaVF1ZXJ5KHZhbCwgdHJ1ZSkuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTI2L2dpLCAnJicpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUzRC9naSwgJz0nKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lMkIvZ2ksICcrJyk7XG59XG5cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgZW5jb2RpbmcgKmtleSogb3IgKnZhbHVlKiBwYXJ0cyBvZiBxdWVyeSBjb21wb25lbnQuIFdlIG5lZWQgYSBjdXN0b21cbiAqIG1ldGhvZCBiZWNhdXNlIGVuY29kZVVSSUNvbXBvbmVudCBpcyB0b28gYWdncmVzc2l2ZSBhbmQgZW5jb2RlcyBzdHVmZiB0aGF0IGRvZXNuJ3QgaGF2ZSB0byBiZVxuICogZW5jb2RlZCBwZXIgaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NjpcbiAqICAgIHF1ZXJ5ICAgICAgID0gKiggcGNoYXIgLyBcIi9cIiAvIFwiP1wiIClcbiAqICAgIHBjaGFyICAgICAgICAgPSB1bnJlc2VydmVkIC8gcGN0LWVuY29kZWQgLyBzdWItZGVsaW1zIC8gXCI6XCIgLyBcIkBcIlxuICogICAgdW5yZXNlcnZlZCAgICA9IEFMUEhBIC8gRElHSVQgLyBcIi1cIiAvIFwiLlwiIC8gXCJfXCIgLyBcIn5cIlxuICogICAgcGN0LWVuY29kZWQgICA9IFwiJVwiIEhFWERJRyBIRVhESUdcbiAqICAgIHN1Yi1kZWxpbXMgICAgPSBcIiFcIiAvIFwiJFwiIC8gXCImXCIgLyBcIidcIiAvIFwiKFwiIC8gXCIpXCJcbiAqICAgICAgICAgICAgICAgICAgICAgLyBcIipcIiAvIFwiK1wiIC8gXCIsXCIgLyBcIjtcIiAvIFwiPVwiXG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVyaVF1ZXJ5KHZhbCwgcGN0RW5jb2RlU3BhY2VzKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lM0IvZ2ksICc7JykuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTIwL2csIChwY3RFbmNvZGVTcGFjZXMgPyAnJTIwJyA6ICcrJykpO1xufVxuXG52YXIgbmdBdHRyUHJlZml4ZXMgPSBbJ25nLScsICdkYXRhLW5nLScsICduZzonLCAneC1uZy0nXTtcblxuZnVuY3Rpb24gZ2V0TmdBdHRyaWJ1dGUoZWxlbWVudCwgbmdBdHRyKSB7XG4gIHZhciBhdHRyLCBpLCBpaSA9IG5nQXR0clByZWZpeGVzLmxlbmd0aDtcbiAgZm9yIChpID0gMDsgaSA8IGlpOyArK2kpIHtcbiAgICBhdHRyID0gbmdBdHRyUHJlZml4ZXNbaV0gKyBuZ0F0dHI7XG4gICAgaWYgKGlzU3RyaW5nKGF0dHIgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyKSkpIHtcbiAgICAgIHJldHVybiBhdHRyO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0FwcFxuICogQG1vZHVsZSBuZ1xuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHthbmd1bGFyLk1vZHVsZX0gbmdBcHAgYW4gb3B0aW9uYWwgYXBwbGljYXRpb25cbiAqICAge0BsaW5rIGFuZ3VsYXIubW9kdWxlIG1vZHVsZX0gbmFtZSB0byBsb2FkLlxuICogQHBhcmFtIHtib29sZWFuPX0gbmdTdHJpY3REaSBpZiB0aGlzIGF0dHJpYnV0ZSBpcyBwcmVzZW50IG9uIHRoZSBhcHAgZWxlbWVudCwgdGhlIGluamVjdG9yIHdpbGwgYmVcbiAqICAgY3JlYXRlZCBpbiBcInN0cmljdC1kaVwiIG1vZGUuIFRoaXMgbWVhbnMgdGhhdCB0aGUgYXBwbGljYXRpb24gd2lsbCBmYWlsIHRvIGludm9rZSBmdW5jdGlvbnMgd2hpY2hcbiAqICAgZG8gbm90IHVzZSBleHBsaWNpdCBmdW5jdGlvbiBhbm5vdGF0aW9uIChhbmQgYXJlIHRodXMgdW5zdWl0YWJsZSBmb3IgbWluaWZpY2F0aW9uKSwgYXMgZGVzY3JpYmVkXG4gKiAgIGluIHtAbGluayBndWlkZS9kaSB0aGUgRGVwZW5kZW5jeSBJbmplY3Rpb24gZ3VpZGV9LCBhbmQgdXNlZnVsIGRlYnVnZ2luZyBpbmZvIHdpbGwgYXNzaXN0IGluXG4gKiAgIHRyYWNraW5nIGRvd24gdGhlIHJvb3Qgb2YgdGhlc2UgYnVncy5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBVc2UgdGhpcyBkaXJlY3RpdmUgdG8gKiphdXRvLWJvb3RzdHJhcCoqIGFuIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbi4gVGhlIGBuZ0FwcGAgZGlyZWN0aXZlXG4gKiBkZXNpZ25hdGVzIHRoZSAqKnJvb3QgZWxlbWVudCoqIG9mIHRoZSBhcHBsaWNhdGlvbiBhbmQgaXMgdHlwaWNhbGx5IHBsYWNlZCBuZWFyIHRoZSByb290IGVsZW1lbnRcbiAqIG9mIHRoZSBwYWdlIC0gZS5nLiBvbiB0aGUgYDxib2R5PmAgb3IgYDxodG1sPmAgdGFncy5cbiAqXG4gKiBPbmx5IG9uZSBBbmd1bGFySlMgYXBwbGljYXRpb24gY2FuIGJlIGF1dG8tYm9vdHN0cmFwcGVkIHBlciBIVE1MIGRvY3VtZW50LiBUaGUgZmlyc3QgYG5nQXBwYFxuICogZm91bmQgaW4gdGhlIGRvY3VtZW50IHdpbGwgYmUgdXNlZCB0byBkZWZpbmUgdGhlIHJvb3QgZWxlbWVudCB0byBhdXRvLWJvb3RzdHJhcCBhcyBhblxuICogYXBwbGljYXRpb24uIFRvIHJ1biBtdWx0aXBsZSBhcHBsaWNhdGlvbnMgaW4gYW4gSFRNTCBkb2N1bWVudCB5b3UgbXVzdCBtYW51YWxseSBib290c3RyYXAgdGhlbSB1c2luZ1xuICoge0BsaW5rIGFuZ3VsYXIuYm9vdHN0cmFwfSBpbnN0ZWFkLiBBbmd1bGFySlMgYXBwbGljYXRpb25zIGNhbm5vdCBiZSBuZXN0ZWQgd2l0aGluIGVhY2ggb3RoZXIuXG4gKlxuICogWW91IGNhbiBzcGVjaWZ5IGFuICoqQW5ndWxhckpTIG1vZHVsZSoqIHRvIGJlIHVzZWQgYXMgdGhlIHJvb3QgbW9kdWxlIGZvciB0aGUgYXBwbGljYXRpb24uICBUaGlzXG4gKiBtb2R1bGUgd2lsbCBiZSBsb2FkZWQgaW50byB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yfSB3aGVuIHRoZSBhcHBsaWNhdGlvbiBpcyBib290c3RyYXBwZWQuIEl0XG4gKiBzaG91bGQgY29udGFpbiB0aGUgYXBwbGljYXRpb24gY29kZSBuZWVkZWQgb3IgaGF2ZSBkZXBlbmRlbmNpZXMgb24gb3RoZXIgbW9kdWxlcyB0aGF0IHdpbGxcbiAqIGNvbnRhaW4gdGhlIGNvZGUuIFNlZSB7QGxpbmsgYW5ndWxhci5tb2R1bGV9IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIEluIHRoZSBleGFtcGxlIGJlbG93IGlmIHRoZSBgbmdBcHBgIGRpcmVjdGl2ZSB3ZXJlIG5vdCBwbGFjZWQgb24gdGhlIGBodG1sYCBlbGVtZW50IHRoZW4gdGhlXG4gKiBkb2N1bWVudCB3b3VsZCBub3QgYmUgY29tcGlsZWQsIHRoZSBgQXBwQ29udHJvbGxlcmAgd291bGQgbm90IGJlIGluc3RhbnRpYXRlZCBhbmQgdGhlIGB7eyBhK2IgfX1gXG4gKiB3b3VsZCBub3QgYmUgcmVzb2x2ZWQgdG8gYDNgLlxuICpcbiAqIGBuZ0FwcGAgaXMgdGhlIGVhc2llc3QsIGFuZCBtb3N0IGNvbW1vbiB3YXkgdG8gYm9vdHN0cmFwIGFuIGFwcGxpY2F0aW9uLlxuICpcbiA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FwcERlbW9cIj5cbiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJuZ0FwcERlbW9Db250cm9sbGVyXCI+XG4gICAgIEkgY2FuIGFkZDoge3thfX0gKyB7e2J9fSA9ICB7eyBhK2IgfX1cbiAgIDwvZGl2PlxuICAgPC9maWxlPlxuICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgYW5ndWxhci5tb2R1bGUoJ25nQXBwRGVtbycsIFtdKS5jb250cm9sbGVyKCduZ0FwcERlbW9Db250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICRzY29wZS5hID0gMTtcbiAgICAgJHNjb3BlLmIgPSAyO1xuICAgfSk7XG4gICA8L2ZpbGU+XG4gPC9leGFtcGxlPlxuICpcbiAqIFVzaW5nIGBuZ1N0cmljdERpYCwgeW91IHdvdWxkIHNlZSBzb21ldGhpbmcgbGlrZSB0aGlzOlxuICpcbiA8ZXhhbXBsZSBuZy1hcHAtaW5jbHVkZWQ9XCJ0cnVlXCI+XG4gICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgPGRpdiBuZy1hcHA9XCJuZ0FwcFN0cmljdERlbW9cIiBuZy1zdHJpY3QtZGk+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiR29vZENvbnRyb2xsZXIxXCI+XG4gICAgICAgICAgIEkgY2FuIGFkZDoge3thfX0gKyB7e2J9fSA9ICB7eyBhK2IgfX1cblxuICAgICAgICAgICA8cD5UaGlzIHJlbmRlcnMgYmVjYXVzZSB0aGUgY29udHJvbGxlciBkb2VzIG5vdCBmYWlsIHRvXG4gICAgICAgICAgICAgIGluc3RhbnRpYXRlLCBieSB1c2luZyBleHBsaWNpdCBhbm5vdGF0aW9uIHN0eWxlIChzZWVcbiAgICAgICAgICAgICAgc2NyaXB0LmpzIGZvciBkZXRhaWxzKVxuICAgICAgICAgICA8L3A+XG4gICAgICAgPC9kaXY+XG5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJHb29kQ29udHJvbGxlcjJcIj5cbiAgICAgICAgICAgTmFtZTogPGlucHV0IG5nLW1vZGVsPVwibmFtZVwiPjxiciAvPlxuICAgICAgICAgICBIZWxsbywge3tuYW1lfX0hXG5cbiAgICAgICAgICAgPHA+VGhpcyByZW5kZXJzIGJlY2F1c2UgdGhlIGNvbnRyb2xsZXIgZG9lcyBub3QgZmFpbCB0b1xuICAgICAgICAgICAgICBpbnN0YW50aWF0ZSwgYnkgdXNpbmcgZXhwbGljaXQgYW5ub3RhdGlvbiBzdHlsZVxuICAgICAgICAgICAgICAoc2VlIHNjcmlwdC5qcyBmb3IgZGV0YWlscylcbiAgICAgICAgICAgPC9wPlxuICAgICAgIDwvZGl2PlxuXG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiQmFkQ29udHJvbGxlclwiPlxuICAgICAgICAgICBJIGNhbiBhZGQ6IHt7YX19ICsge3tifX0gPSAge3sgYStiIH19XG5cbiAgICAgICAgICAgPHA+VGhlIGNvbnRyb2xsZXIgY291bGQgbm90IGJlIGluc3RhbnRpYXRlZCwgZHVlIHRvIHJlbHlpbmdcbiAgICAgICAgICAgICAgb24gYXV0b21hdGljIGZ1bmN0aW9uIGFubm90YXRpb25zICh3aGljaCBhcmUgZGlzYWJsZWQgaW5cbiAgICAgICAgICAgICAgc3RyaWN0IG1vZGUpLiBBcyBzdWNoLCB0aGUgY29udGVudCBvZiB0aGlzIHNlY3Rpb24gaXMgbm90XG4gICAgICAgICAgICAgIGludGVycG9sYXRlZCwgYW5kIHRoZXJlIHNob3VsZCBiZSBhbiBlcnJvciBpbiB5b3VyIHdlYiBjb25zb2xlLlxuICAgICAgICAgICA8L3A+XG4gICAgICAgPC9kaXY+XG4gICA8L2Rpdj5cbiAgIDwvZmlsZT5cbiAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgIGFuZ3VsYXIubW9kdWxlKCduZ0FwcFN0cmljdERlbW8nLCBbXSlcbiAgICAgLy8gQmFkQ29udHJvbGxlciB3aWxsIGZhaWwgdG8gaW5zdGFudGlhdGUsIGR1ZSB0byByZWx5aW5nIG9uIGF1dG9tYXRpYyBmdW5jdGlvbiBhbm5vdGF0aW9uLFxuICAgICAvLyByYXRoZXIgdGhhbiBhbiBleHBsaWNpdCBhbm5vdGF0aW9uXG4gICAgIC5jb250cm9sbGVyKCdCYWRDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgJHNjb3BlLmEgPSAxO1xuICAgICAgICRzY29wZS5iID0gMjtcbiAgICAgfSlcbiAgICAgLy8gVW5saWtlIEJhZENvbnRyb2xsZXIsIEdvb2RDb250cm9sbGVyMSBhbmQgR29vZENvbnRyb2xsZXIyIHdpbGwgbm90IGZhaWwgdG8gYmUgaW5zdGFudGlhdGVkLFxuICAgICAvLyBkdWUgdG8gdXNpbmcgZXhwbGljaXQgYW5ub3RhdGlvbnMgdXNpbmcgdGhlIGFycmF5IHN0eWxlIGFuZCAkaW5qZWN0IHByb3BlcnR5LCByZXNwZWN0aXZlbHkuXG4gICAgIC5jb250cm9sbGVyKCdHb29kQ29udHJvbGxlcjEnLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICRzY29wZS5hID0gMTtcbiAgICAgICAkc2NvcGUuYiA9IDI7XG4gICAgIH1dKVxuICAgICAuY29udHJvbGxlcignR29vZENvbnRyb2xsZXIyJywgR29vZENvbnRyb2xsZXIyKTtcbiAgICAgZnVuY3Rpb24gR29vZENvbnRyb2xsZXIyKCRzY29wZSkge1xuICAgICAgICRzY29wZS5uYW1lID0gXCJXb3JsZFwiO1xuICAgICB9XG4gICAgIEdvb2RDb250cm9sbGVyMi4kaW5qZWN0ID0gWyckc2NvcGUnXTtcbiAgIDwvZmlsZT5cbiAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgIGRpdltuZy1jb250cm9sbGVyXSB7XG4gICAgICAgbWFyZ2luLWJvdHRvbTogMWVtO1xuICAgICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICBib3JkZXI6IDFweCBzb2xpZDtcbiAgICAgICBwYWRkaW5nOiAuNWVtO1xuICAgfVxuICAgZGl2W25nLWNvbnRyb2xsZXJePUdvb2RdIHtcbiAgICAgICBib3JkZXItY29sb3I6ICNkNmU5YzY7XG4gICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2RmZjBkODtcbiAgICAgICBjb2xvcjogIzNjNzYzZDtcbiAgIH1cbiAgIGRpdltuZy1jb250cm9sbGVyXj1CYWRdIHtcbiAgICAgICBib3JkZXItY29sb3I6ICNlYmNjZDE7XG4gICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2YyZGVkZTtcbiAgICAgICBjb2xvcjogI2E5NDQ0MjtcbiAgICAgICBtYXJnaW4tYm90dG9tOiAwO1xuICAgfVxuICAgPC9maWxlPlxuIDwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gYW5ndWxhckluaXQoZWxlbWVudCwgYm9vdHN0cmFwKSB7XG4gIHZhciBhcHBFbGVtZW50LFxuICAgICAgbW9kdWxlLFxuICAgICAgY29uZmlnID0ge307XG5cbiAgLy8gVGhlIGVsZW1lbnQgYGVsZW1lbnRgIGhhcyBwcmlvcml0eSBvdmVyIGFueSBvdGhlciBlbGVtZW50XG4gIGZvckVhY2gobmdBdHRyUHJlZml4ZXMsIGZ1bmN0aW9uKHByZWZpeCkge1xuICAgIHZhciBuYW1lID0gcHJlZml4ICsgJ2FwcCc7XG5cbiAgICBpZiAoIWFwcEVsZW1lbnQgJiYgZWxlbWVudC5oYXNBdHRyaWJ1dGUgJiYgZWxlbWVudC5oYXNBdHRyaWJ1dGUobmFtZSkpIHtcbiAgICAgIGFwcEVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgbW9kdWxlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgfVxuICB9KTtcbiAgZm9yRWFjaChuZ0F0dHJQcmVmaXhlcywgZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgdmFyIG5hbWUgPSBwcmVmaXggKyAnYXBwJztcbiAgICB2YXIgY2FuZGlkYXRlO1xuXG4gICAgaWYgKCFhcHBFbGVtZW50ICYmIChjYW5kaWRhdGUgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1snICsgbmFtZS5yZXBsYWNlKCc6JywgJ1xcXFw6JykgKyAnXScpKSkge1xuICAgICAgYXBwRWxlbWVudCA9IGNhbmRpZGF0ZTtcbiAgICAgIG1vZHVsZSA9IGNhbmRpZGF0ZS5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgfVxuICB9KTtcbiAgaWYgKGFwcEVsZW1lbnQpIHtcbiAgICBjb25maWcuc3RyaWN0RGkgPSBnZXROZ0F0dHJpYnV0ZShhcHBFbGVtZW50LCBcInN0cmljdC1kaVwiKSAhPT0gbnVsbDtcbiAgICBib290c3RyYXAoYXBwRWxlbWVudCwgbW9kdWxlID8gW21vZHVsZV0gOiBbXSwgY29uZmlnKTtcbiAgfVxufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5ib290c3RyYXBcbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHRoaXMgZnVuY3Rpb24gdG8gbWFudWFsbHkgc3RhcnQgdXAgYW5ndWxhciBhcHBsaWNhdGlvbi5cbiAqXG4gKiBTZWU6IHtAbGluayBndWlkZS9ib290c3RyYXAgQm9vdHN0cmFwfVxuICpcbiAqIE5vdGUgdGhhdCBQcm90cmFjdG9yIGJhc2VkIGVuZC10by1lbmQgdGVzdHMgY2Fubm90IHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGJvb3RzdHJhcCBtYW51YWxseS5cbiAqIFRoZXkgbXVzdCB1c2Uge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0FwcCBuZ0FwcH0uXG4gKlxuICogQW5ndWxhciB3aWxsIGRldGVjdCBpZiBpdCBoYXMgYmVlbiBsb2FkZWQgaW50byB0aGUgYnJvd3NlciBtb3JlIHRoYW4gb25jZSBhbmQgb25seSBhbGxvdyB0aGVcbiAqIGZpcnN0IGxvYWRlZCBzY3JpcHQgdG8gYmUgYm9vdHN0cmFwcGVkIGFuZCB3aWxsIHJlcG9ydCBhIHdhcm5pbmcgdG8gdGhlIGJyb3dzZXIgY29uc29sZSBmb3JcbiAqIGVhY2ggb2YgdGhlIHN1YnNlcXVlbnQgc2NyaXB0cy4gVGhpcyBwcmV2ZW50cyBzdHJhbmdlIHJlc3VsdHMgaW4gYXBwbGljYXRpb25zLCB3aGVyZSBvdGhlcndpc2VcbiAqIG11bHRpcGxlIGluc3RhbmNlcyBvZiBBbmd1bGFyIHRyeSB0byB3b3JrIG9uIHRoZSBET00uXG4gKlxuICogYGBgaHRtbFxuICogPCFkb2N0eXBlIGh0bWw+XG4gKiA8aHRtbD5cbiAqIDxib2R5PlxuICogPGRpdiBuZy1jb250cm9sbGVyPVwiV2VsY29tZUNvbnRyb2xsZXJcIj5cbiAqICAge3tncmVldGluZ319XG4gKiA8L2Rpdj5cbiAqXG4gKiA8c2NyaXB0IHNyYz1cImFuZ3VsYXIuanNcIj48L3NjcmlwdD5cbiAqIDxzY3JpcHQ+XG4gKiAgIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnZGVtbycsIFtdKVxuICogICAuY29udHJvbGxlcignV2VsY29tZUNvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICRzY29wZS5ncmVldGluZyA9ICdXZWxjb21lISc7XG4gKiAgIH0pO1xuICogICBhbmd1bGFyLmJvb3RzdHJhcChkb2N1bWVudCwgWydkZW1vJ10pO1xuICogPC9zY3JpcHQ+XG4gKiA8L2JvZHk+XG4gKiA8L2h0bWw+XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgRE9NIGVsZW1lbnQgd2hpY2ggaXMgdGhlIHJvb3Qgb2YgYW5ndWxhciBhcHBsaWNhdGlvbi5cbiAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nfEZ1bmN0aW9ufEFycmF5Pj19IG1vZHVsZXMgYW4gYXJyYXkgb2YgbW9kdWxlcyB0byBsb2FkIGludG8gdGhlIGFwcGxpY2F0aW9uLlxuICogICAgIEVhY2ggaXRlbSBpbiB0aGUgYXJyYXkgc2hvdWxkIGJlIHRoZSBuYW1lIG9mIGEgcHJlZGVmaW5lZCBtb2R1bGUgb3IgYSAoREkgYW5ub3RhdGVkKVxuICogICAgIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnZva2VkIGJ5IHRoZSBpbmplY3RvciBhcyBhIGBjb25maWdgIGJsb2NrLlxuICogICAgIFNlZToge0BsaW5rIGFuZ3VsYXIubW9kdWxlIG1vZHVsZXN9XG4gKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBhbiBvYmplY3QgZm9yIGRlZmluaW5nIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGFwcGxpY2F0aW9uLiBUaGVcbiAqICAgICBmb2xsb3dpbmcga2V5cyBhcmUgc3VwcG9ydGVkOlxuICpcbiAqICogYHN0cmljdERpYCAtIGRpc2FibGUgYXV0b21hdGljIGZ1bmN0aW9uIGFubm90YXRpb24gZm9yIHRoZSBhcHBsaWNhdGlvbi4gVGhpcyBpcyBtZWFudCB0b1xuICogICBhc3Npc3QgaW4gZmluZGluZyBidWdzIHdoaWNoIGJyZWFrIG1pbmlmaWVkIGNvZGUuIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gKlxuICogQHJldHVybnMge2F1dG8uJGluamVjdG9yfSBSZXR1cm5zIHRoZSBuZXdseSBjcmVhdGVkIGluamVjdG9yIGZvciB0aGlzIGFwcC5cbiAqL1xuZnVuY3Rpb24gYm9vdHN0cmFwKGVsZW1lbnQsIG1vZHVsZXMsIGNvbmZpZykge1xuICBpZiAoIWlzT2JqZWN0KGNvbmZpZykpIGNvbmZpZyA9IHt9O1xuICB2YXIgZGVmYXVsdENvbmZpZyA9IHtcbiAgICBzdHJpY3REaTogZmFsc2VcbiAgfTtcbiAgY29uZmlnID0gZXh0ZW5kKGRlZmF1bHRDb25maWcsIGNvbmZpZyk7XG4gIHZhciBkb0Jvb3RzdHJhcCA9IGZ1bmN0aW9uKCkge1xuICAgIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCk7XG5cbiAgICBpZiAoZWxlbWVudC5pbmplY3RvcigpKSB7XG4gICAgICB2YXIgdGFnID0gKGVsZW1lbnRbMF0gPT09IGRvY3VtZW50KSA/ICdkb2N1bWVudCcgOiBzdGFydGluZ1RhZyhlbGVtZW50KTtcbiAgICAgIC8vRW5jb2RlIGFuZ2xlIGJyYWNrZXRzIHRvIHByZXZlbnQgaW5wdXQgZnJvbSBiZWluZyBzYW5pdGl6ZWQgdG8gZW1wdHkgc3RyaW5nICM4NjgzXG4gICAgICB0aHJvdyBuZ01pbkVycihcbiAgICAgICAgICAnYnRzdHJwZCcsXG4gICAgICAgICAgXCJBcHAgQWxyZWFkeSBCb290c3RyYXBwZWQgd2l0aCB0aGlzIEVsZW1lbnQgJ3swfSdcIixcbiAgICAgICAgICB0YWcucmVwbGFjZSgvPC8sJyZsdDsnKS5yZXBsYWNlKC8+LywnJmd0OycpKTtcbiAgICB9XG5cbiAgICBtb2R1bGVzID0gbW9kdWxlcyB8fCBbXTtcbiAgICBtb2R1bGVzLnVuc2hpZnQoWyckcHJvdmlkZScsIGZ1bmN0aW9uKCRwcm92aWRlKSB7XG4gICAgICAkcHJvdmlkZS52YWx1ZSgnJHJvb3RFbGVtZW50JywgZWxlbWVudCk7XG4gICAgfV0pO1xuXG4gICAgaWYgKGNvbmZpZy5kZWJ1Z0luZm9FbmFibGVkKSB7XG4gICAgICAvLyBQdXNoaW5nIHNvIHRoYXQgdGhpcyBvdmVycmlkZXMgYGRlYnVnSW5mb0VuYWJsZWRgIHNldHRpbmcgZGVmaW5lZCBpbiB1c2VyJ3MgYG1vZHVsZXNgLlxuICAgICAgbW9kdWxlcy5wdXNoKFsnJGNvbXBpbGVQcm92aWRlcicsIGZ1bmN0aW9uKCRjb21waWxlUHJvdmlkZXIpIHtcbiAgICAgICAgJGNvbXBpbGVQcm92aWRlci5kZWJ1Z0luZm9FbmFibGVkKHRydWUpO1xuICAgICAgfV0pO1xuICAgIH1cblxuICAgIG1vZHVsZXMudW5zaGlmdCgnbmcnKTtcbiAgICB2YXIgaW5qZWN0b3IgPSBjcmVhdGVJbmplY3Rvcihtb2R1bGVzLCBjb25maWcuc3RyaWN0RGkpO1xuICAgIGluamVjdG9yLmludm9rZShbJyRyb290U2NvcGUnLCAnJHJvb3RFbGVtZW50JywgJyRjb21waWxlJywgJyRpbmplY3RvcicsXG4gICAgICAgZnVuY3Rpb24gYm9vdHN0cmFwQXBwbHkoc2NvcGUsIGVsZW1lbnQsIGNvbXBpbGUsIGluamVjdG9yKSB7XG4gICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50LmRhdGEoJyRpbmplY3RvcicsIGluamVjdG9yKTtcbiAgICAgICAgICBjb21waWxlKGVsZW1lbnQpKHNjb3BlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XVxuICAgICk7XG4gICAgcmV0dXJuIGluamVjdG9yO1xuICB9O1xuXG4gIHZhciBOR19FTkFCTEVfREVCVUdfSU5GTyA9IC9eTkdfRU5BQkxFX0RFQlVHX0lORk8hLztcbiAgdmFyIE5HX0RFRkVSX0JPT1RTVFJBUCA9IC9eTkdfREVGRVJfQk9PVFNUUkFQIS87XG5cbiAgaWYgKHdpbmRvdyAmJiBOR19FTkFCTEVfREVCVUdfSU5GTy50ZXN0KHdpbmRvdy5uYW1lKSkge1xuICAgIGNvbmZpZy5kZWJ1Z0luZm9FbmFibGVkID0gdHJ1ZTtcbiAgICB3aW5kb3cubmFtZSA9IHdpbmRvdy5uYW1lLnJlcGxhY2UoTkdfRU5BQkxFX0RFQlVHX0lORk8sICcnKTtcbiAgfVxuXG4gIGlmICh3aW5kb3cgJiYgIU5HX0RFRkVSX0JPT1RTVFJBUC50ZXN0KHdpbmRvdy5uYW1lKSkge1xuICAgIHJldHVybiBkb0Jvb3RzdHJhcCgpO1xuICB9XG5cbiAgd2luZG93Lm5hbWUgPSB3aW5kb3cubmFtZS5yZXBsYWNlKE5HX0RFRkVSX0JPT1RTVFJBUCwgJycpO1xuICBhbmd1bGFyLnJlc3VtZUJvb3RzdHJhcCA9IGZ1bmN0aW9uKGV4dHJhTW9kdWxlcykge1xuICAgIGZvckVhY2goZXh0cmFNb2R1bGVzLCBmdW5jdGlvbihtb2R1bGUpIHtcbiAgICAgIG1vZHVsZXMucHVzaChtb2R1bGUpO1xuICAgIH0pO1xuICAgIHJldHVybiBkb0Jvb3RzdHJhcCgpO1xuICB9O1xuXG4gIGlmIChpc0Z1bmN0aW9uKGFuZ3VsYXIucmVzdW1lRGVmZXJyZWRCb290c3RyYXApKSB7XG4gICAgYW5ndWxhci5yZXN1bWVEZWZlcnJlZEJvb3RzdHJhcCgpO1xuICB9XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLnJlbG9hZFdpdGhEZWJ1Z0luZm9cbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHRoaXMgZnVuY3Rpb24gdG8gcmVsb2FkIHRoZSBjdXJyZW50IGFwcGxpY2F0aW9uIHdpdGggZGVidWcgaW5mb3JtYXRpb24gdHVybmVkIG9uLlxuICogVGhpcyB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgYSBjYWxsIHRvIGAkY29tcGlsZVByb3ZpZGVyLmRlYnVnSW5mb0VuYWJsZWQoZmFsc2UpYC5cbiAqXG4gKiBTZWUge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGVidWdJbmZvRW5hYmxlZH0gZm9yIG1vcmUuXG4gKi9cbmZ1bmN0aW9uIHJlbG9hZFdpdGhEZWJ1Z0luZm8oKSB7XG4gIHdpbmRvdy5uYW1lID0gJ05HX0VOQUJMRV9ERUJVR19JTkZPIScgKyB3aW5kb3cubmFtZTtcbiAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xufVxuXG4vKipcbiAqIEBuYW1lIGFuZ3VsYXIuZ2V0VGVzdGFiaWxpdHlcbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSB0ZXN0YWJpbGl0eSBzZXJ2aWNlIGZvciB0aGUgaW5zdGFuY2Ugb2YgQW5ndWxhciBvbiB0aGUgZ2l2ZW5cbiAqIGVsZW1lbnQuXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgRE9NIGVsZW1lbnQgd2hpY2ggaXMgdGhlIHJvb3Qgb2YgYW5ndWxhciBhcHBsaWNhdGlvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0VGVzdGFiaWxpdHkocm9vdEVsZW1lbnQpIHtcbiAgdmFyIGluamVjdG9yID0gYW5ndWxhci5lbGVtZW50KHJvb3RFbGVtZW50KS5pbmplY3RvcigpO1xuICBpZiAoIWluamVjdG9yKSB7XG4gICAgdGhyb3cgbmdNaW5FcnIoJ3Rlc3QnLFxuICAgICAgJ25vIGluamVjdG9yIGZvdW5kIGZvciBlbGVtZW50IGFyZ3VtZW50IHRvIGdldFRlc3RhYmlsaXR5Jyk7XG4gIH1cbiAgcmV0dXJuIGluamVjdG9yLmdldCgnJCR0ZXN0YWJpbGl0eScpO1xufVxuXG52YXIgU05BS0VfQ0FTRV9SRUdFWFAgPSAvW0EtWl0vZztcbmZ1bmN0aW9uIHNuYWtlX2Nhc2UobmFtZSwgc2VwYXJhdG9yKSB7XG4gIHNlcGFyYXRvciA9IHNlcGFyYXRvciB8fCAnXyc7XG4gIHJldHVybiBuYW1lLnJlcGxhY2UoU05BS0VfQ0FTRV9SRUdFWFAsIGZ1bmN0aW9uKGxldHRlciwgcG9zKSB7XG4gICAgcmV0dXJuIChwb3MgPyBzZXBhcmF0b3IgOiAnJykgKyBsZXR0ZXIudG9Mb3dlckNhc2UoKTtcbiAgfSk7XG59XG5cbnZhciBiaW5kSlF1ZXJ5RmlyZWQgPSBmYWxzZTtcbnZhciBza2lwRGVzdHJveU9uTmV4dEpRdWVyeUNsZWFuRGF0YTtcbmZ1bmN0aW9uIGJpbmRKUXVlcnkoKSB7XG4gIHZhciBvcmlnaW5hbENsZWFuRGF0YTtcblxuICBpZiAoYmluZEpRdWVyeUZpcmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gYmluZCB0byBqUXVlcnkgaWYgcHJlc2VudDtcbiAgdmFyIGpxTmFtZSA9IGpxKCk7XG4gIGpRdWVyeSA9IGlzVW5kZWZpbmVkKGpxTmFtZSkgPyB3aW5kb3cualF1ZXJ5IDogICAvLyB1c2UgalF1ZXJ5IChpZiBwcmVzZW50KVxuICAgICAgICAgICAhanFOYW1lICAgICAgICAgICAgID8gdW5kZWZpbmVkICAgICA6ICAgLy8gdXNlIGpxTGl0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93W2pxTmFtZV07ICAgLy8gdXNlIGpRdWVyeSBzcGVjaWZpZWQgYnkgYG5nSnFgXG5cbiAgLy8gVXNlIGpRdWVyeSBpZiBpdCBleGlzdHMgd2l0aCBwcm9wZXIgZnVuY3Rpb25hbGl0eSwgb3RoZXJ3aXNlIGRlZmF1bHQgdG8gdXMuXG4gIC8vIEFuZ3VsYXIgMS4yKyByZXF1aXJlcyBqUXVlcnkgMS43KyBmb3Igb24oKS9vZmYoKSBzdXBwb3J0LlxuICAvLyBBbmd1bGFyIDEuMysgdGVjaG5pY2FsbHkgcmVxdWlyZXMgYXQgbGVhc3QgalF1ZXJ5IDIuMSsgYnV0IGl0IG1heSB3b3JrIHdpdGggb2xkZXJcbiAgLy8gdmVyc2lvbnMuIEl0IHdpbGwgbm90IHdvcmsgZm9yIHN1cmUgd2l0aCBqUXVlcnkgPDEuNywgdGhvdWdoLlxuICBpZiAoalF1ZXJ5ICYmIGpRdWVyeS5mbi5vbikge1xuICAgIGpxTGl0ZSA9IGpRdWVyeTtcbiAgICBleHRlbmQoalF1ZXJ5LmZuLCB7XG4gICAgICBzY29wZTogSlFMaXRlUHJvdG90eXBlLnNjb3BlLFxuICAgICAgaXNvbGF0ZVNjb3BlOiBKUUxpdGVQcm90b3R5cGUuaXNvbGF0ZVNjb3BlLFxuICAgICAgY29udHJvbGxlcjogSlFMaXRlUHJvdG90eXBlLmNvbnRyb2xsZXIsXG4gICAgICBpbmplY3RvcjogSlFMaXRlUHJvdG90eXBlLmluamVjdG9yLFxuICAgICAgaW5oZXJpdGVkRGF0YTogSlFMaXRlUHJvdG90eXBlLmluaGVyaXRlZERhdGFcbiAgICB9KTtcblxuICAgIC8vIEFsbCBub2RlcyByZW1vdmVkIGZyb20gdGhlIERPTSB2aWEgdmFyaW91cyBqUXVlcnkgQVBJcyBsaWtlIC5yZW1vdmUoKVxuICAgIC8vIGFyZSBwYXNzZWQgdGhyb3VnaCBqUXVlcnkuY2xlYW5EYXRhLiBNb25rZXktcGF0Y2ggdGhpcyBtZXRob2QgdG8gZmlyZVxuICAgIC8vIHRoZSAkZGVzdHJveSBldmVudCBvbiBhbGwgcmVtb3ZlZCBub2Rlcy5cbiAgICBvcmlnaW5hbENsZWFuRGF0YSA9IGpRdWVyeS5jbGVhbkRhdGE7XG4gICAgalF1ZXJ5LmNsZWFuRGF0YSA9IGZ1bmN0aW9uKGVsZW1zKSB7XG4gICAgICB2YXIgZXZlbnRzO1xuICAgICAgaWYgKCFza2lwRGVzdHJveU9uTmV4dEpRdWVyeUNsZWFuRGF0YSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgZWxlbTsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrKSB7XG4gICAgICAgICAgZXZlbnRzID0galF1ZXJ5Ll9kYXRhKGVsZW0sIFwiZXZlbnRzXCIpO1xuICAgICAgICAgIGlmIChldmVudHMgJiYgZXZlbnRzLiRkZXN0cm95KSB7XG4gICAgICAgICAgICBqUXVlcnkoZWxlbSkudHJpZ2dlckhhbmRsZXIoJyRkZXN0cm95Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBza2lwRGVzdHJveU9uTmV4dEpRdWVyeUNsZWFuRGF0YSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgb3JpZ2luYWxDbGVhbkRhdGEoZWxlbXMpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAganFMaXRlID0gSlFMaXRlO1xuICB9XG5cbiAgYW5ndWxhci5lbGVtZW50ID0ganFMaXRlO1xuXG4gIC8vIFByZXZlbnQgZG91YmxlLXByb3h5aW5nLlxuICBiaW5kSlF1ZXJ5RmlyZWQgPSB0cnVlO1xufVxuXG4vKipcbiAqIHRocm93IGVycm9yIGlmIHRoZSBhcmd1bWVudCBpcyBmYWxzeS5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0QXJnKGFyZywgbmFtZSwgcmVhc29uKSB7XG4gIGlmICghYXJnKSB7XG4gICAgdGhyb3cgbmdNaW5FcnIoJ2FyZXEnLCBcIkFyZ3VtZW50ICd7MH0nIGlzIHsxfVwiLCAobmFtZSB8fCAnPycpLCAocmVhc29uIHx8IFwicmVxdWlyZWRcIikpO1xuICB9XG4gIHJldHVybiBhcmc7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEFyZ0ZuKGFyZywgbmFtZSwgYWNjZXB0QXJyYXlBbm5vdGF0aW9uKSB7XG4gIGlmIChhY2NlcHRBcnJheUFubm90YXRpb24gJiYgaXNBcnJheShhcmcpKSB7XG4gICAgICBhcmcgPSBhcmdbYXJnLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgYXNzZXJ0QXJnKGlzRnVuY3Rpb24oYXJnKSwgbmFtZSwgJ25vdCBhIGZ1bmN0aW9uLCBnb3QgJyArXG4gICAgICAoYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnID8gYXJnLmNvbnN0cnVjdG9yLm5hbWUgfHwgJ09iamVjdCcgOiB0eXBlb2YgYXJnKSk7XG4gIHJldHVybiBhcmc7XG59XG5cbi8qKlxuICogdGhyb3cgZXJyb3IgaWYgdGhlIG5hbWUgZ2l2ZW4gaXMgaGFzT3duUHJvcGVydHlcbiAqIEBwYXJhbSAge1N0cmluZ30gbmFtZSAgICB0aGUgbmFtZSB0byB0ZXN0XG4gKiBAcGFyYW0gIHtTdHJpbmd9IGNvbnRleHQgdGhlIGNvbnRleHQgaW4gd2hpY2ggdGhlIG5hbWUgaXMgdXNlZCwgc3VjaCBhcyBtb2R1bGUgb3IgZGlyZWN0aXZlXG4gKi9cbmZ1bmN0aW9uIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsIGNvbnRleHQpIHtcbiAgaWYgKG5hbWUgPT09ICdoYXNPd25Qcm9wZXJ0eScpIHtcbiAgICB0aHJvdyBuZ01pbkVycignYmFkbmFtZScsIFwiaGFzT3duUHJvcGVydHkgaXMgbm90IGEgdmFsaWQgezB9IG5hbWVcIiwgY29udGV4dCk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHZhbHVlIGFjY2Vzc2libGUgZnJvbSB0aGUgb2JqZWN0IGJ5IHBhdGguIEFueSB1bmRlZmluZWQgdHJhdmVyc2FscyBhcmUgaWdub3JlZFxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBzdGFydGluZyBvYmplY3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoIHBhdGggdG8gdHJhdmVyc2VcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2JpbmRGblRvU2NvcGU9dHJ1ZV1cbiAqIEByZXR1cm5zIHtPYmplY3R9IHZhbHVlIGFzIGFjY2Vzc2libGUgYnkgcGF0aFxuICovXG4vL1RPRE8obWlza28pOiB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJlbW92ZWRcbmZ1bmN0aW9uIGdldHRlcihvYmosIHBhdGgsIGJpbmRGblRvU2NvcGUpIHtcbiAgaWYgKCFwYXRoKSByZXR1cm4gb2JqO1xuICB2YXIga2V5cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgdmFyIGtleTtcbiAgdmFyIGxhc3RJbnN0YW5jZSA9IG9iajtcbiAgdmFyIGxlbiA9IGtleXMubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChvYmopIHtcbiAgICAgIG9iaiA9IChsYXN0SW5zdGFuY2UgPSBvYmopW2tleV07XG4gICAgfVxuICB9XG4gIGlmICghYmluZEZuVG9TY29wZSAmJiBpc0Z1bmN0aW9uKG9iaikpIHtcbiAgICByZXR1cm4gYmluZChsYXN0SW5zdGFuY2UsIG9iaik7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIERPTSBzaWJsaW5ncyBiZXR3ZWVuIHRoZSBmaXJzdCBhbmQgbGFzdCBub2RlIGluIHRoZSBnaXZlbiBhcnJheS5cbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IGxpa2Ugb2JqZWN0XG4gKiBAcmV0dXJucyB7QXJyYXl9IHRoZSBpbnB1dHRlZCBvYmplY3Qgb3IgYSBqcUxpdGUgY29sbGVjdGlvbiBjb250YWluaW5nIHRoZSBub2Rlc1xuICovXG5mdW5jdGlvbiBnZXRCbG9ja05vZGVzKG5vZGVzKSB7XG4gIC8vIFRPRE8ocGVyZik6IHVwZGF0ZSBgbm9kZXNgIGluc3RlYWQgb2YgY3JlYXRpbmcgYSBuZXcgb2JqZWN0P1xuICB2YXIgbm9kZSA9IG5vZGVzWzBdO1xuICB2YXIgZW5kTm9kZSA9IG5vZGVzW25vZGVzLmxlbmd0aCAtIDFdO1xuICB2YXIgYmxvY2tOb2RlcztcblxuICBmb3IgKHZhciBpID0gMTsgbm9kZSAhPT0gZW5kTm9kZSAmJiAobm9kZSA9IG5vZGUubmV4dFNpYmxpbmcpOyBpKyspIHtcbiAgICBpZiAoYmxvY2tOb2RlcyB8fCBub2Rlc1tpXSAhPT0gbm9kZSkge1xuICAgICAgaWYgKCFibG9ja05vZGVzKSB7XG4gICAgICAgIGJsb2NrTm9kZXMgPSBqcUxpdGUoc2xpY2UuY2FsbChub2RlcywgMCwgaSkpO1xuICAgICAgfVxuICAgICAgYmxvY2tOb2Rlcy5wdXNoKG5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBibG9ja05vZGVzIHx8IG5vZGVzO1xufVxuXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBvYmplY3Qgd2l0aG91dCBhIHByb3RvdHlwZS4gVGhpcyBvYmplY3QgaXMgdXNlZnVsIGZvciBsb29rdXAgd2l0aG91dCBoYXZpbmcgdG9cbiAqIGd1YXJkIGFnYWluc3QgcHJvdG90eXBpY2FsbHkgaW5oZXJpdGVkIHByb3BlcnRpZXMgdmlhIGhhc093blByb3BlcnR5LlxuICpcbiAqIFJlbGF0ZWQgbWljcm8tYmVuY2htYXJrczpcbiAqIC0gaHR0cDovL2pzcGVyZi5jb20vb2JqZWN0LWNyZWF0ZTJcbiAqIC0gaHR0cDovL2pzcGVyZi5jb20vcHJvdG8tbWFwLWxvb2t1cC8yXG4gKiAtIGh0dHA6Ly9qc3BlcmYuY29tL2Zvci1pbi12cy1vYmplY3Qta2V5czJcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBjcmVhdGVNYXAoKSB7XG4gIHJldHVybiBPYmplY3QuY3JlYXRlKG51bGwpO1xufVxuXG52YXIgTk9ERV9UWVBFX0VMRU1FTlQgPSAxO1xudmFyIE5PREVfVFlQRV9BVFRSSUJVVEUgPSAyO1xudmFyIE5PREVfVFlQRV9URVhUID0gMztcbnZhciBOT0RFX1RZUEVfQ09NTUVOVCA9IDg7XG52YXIgTk9ERV9UWVBFX0RPQ1VNRU5UID0gOTtcbnZhciBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQgPSAxMTtcblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgYW5ndWxhci5Nb2R1bGVcbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEludGVyZmFjZSBmb3IgY29uZmlndXJpbmcgYW5ndWxhciB7QGxpbmsgYW5ndWxhci5tb2R1bGUgbW9kdWxlc30uXG4gKi9cblxuZnVuY3Rpb24gc2V0dXBNb2R1bGVMb2FkZXIod2luZG93KSB7XG5cbiAgdmFyICRpbmplY3Rvck1pbkVyciA9IG1pbkVycignJGluamVjdG9yJyk7XG4gIHZhciBuZ01pbkVyciA9IG1pbkVycignbmcnKTtcblxuICBmdW5jdGlvbiBlbnN1cmUob2JqLCBuYW1lLCBmYWN0b3J5KSB7XG4gICAgcmV0dXJuIG9ialtuYW1lXSB8fCAob2JqW25hbWVdID0gZmFjdG9yeSgpKTtcbiAgfVxuXG4gIHZhciBhbmd1bGFyID0gZW5zdXJlKHdpbmRvdywgJ2FuZ3VsYXInLCBPYmplY3QpO1xuXG4gIC8vIFdlIG5lZWQgdG8gZXhwb3NlIGBhbmd1bGFyLiQkbWluRXJyYCB0byBtb2R1bGVzIHN1Y2ggYXMgYG5nUmVzb3VyY2VgIHRoYXQgcmVmZXJlbmNlIGl0IGR1cmluZyBib290c3RyYXBcbiAgYW5ndWxhci4kJG1pbkVyciA9IGFuZ3VsYXIuJCRtaW5FcnIgfHwgbWluRXJyO1xuXG4gIHJldHVybiBlbnN1cmUoYW5ndWxhciwgJ21vZHVsZScsIGZ1bmN0aW9uKCkge1xuICAgIC8qKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsIGFuZ3VsYXIuTW9kdWxlPn0gKi9cbiAgICB2YXIgbW9kdWxlcyA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgYW5ndWxhci5tb2R1bGVcbiAgICAgKiBAbW9kdWxlIG5nXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBUaGUgYGFuZ3VsYXIubW9kdWxlYCBpcyBhIGdsb2JhbCBwbGFjZSBmb3IgY3JlYXRpbmcsIHJlZ2lzdGVyaW5nIGFuZCByZXRyaWV2aW5nIEFuZ3VsYXJcbiAgICAgKiBtb2R1bGVzLlxuICAgICAqIEFsbCBtb2R1bGVzIChhbmd1bGFyIGNvcmUgb3IgM3JkIHBhcnR5KSB0aGF0IHNob3VsZCBiZSBhdmFpbGFibGUgdG8gYW4gYXBwbGljYXRpb24gbXVzdCBiZVxuICAgICAqIHJlZ2lzdGVyZWQgdXNpbmcgdGhpcyBtZWNoYW5pc20uXG4gICAgICpcbiAgICAgKiBQYXNzaW5nIG9uZSBhcmd1bWVudCByZXRyaWV2ZXMgYW4gZXhpc3Rpbmcge0BsaW5rIGFuZ3VsYXIuTW9kdWxlfSxcbiAgICAgKiB3aGVyZWFzIHBhc3NpbmcgbW9yZSB0aGFuIG9uZSBhcmd1bWVudCBjcmVhdGVzIGEgbmV3IHtAbGluayBhbmd1bGFyLk1vZHVsZX1cbiAgICAgKlxuICAgICAqXG4gICAgICogIyBNb2R1bGVcbiAgICAgKlxuICAgICAqIEEgbW9kdWxlIGlzIGEgY29sbGVjdGlvbiBvZiBzZXJ2aWNlcywgZGlyZWN0aXZlcywgY29udHJvbGxlcnMsIGZpbHRlcnMsIGFuZCBjb25maWd1cmF0aW9uIGluZm9ybWF0aW9uLlxuICAgICAqIGBhbmd1bGFyLm1vZHVsZWAgaXMgdXNlZCB0byBjb25maWd1cmUgdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAvLyBDcmVhdGUgYSBuZXcgbW9kdWxlXG4gICAgICogdmFyIG15TW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ215TW9kdWxlJywgW10pO1xuICAgICAqXG4gICAgICogLy8gcmVnaXN0ZXIgYSBuZXcgc2VydmljZVxuICAgICAqIG15TW9kdWxlLnZhbHVlKCdhcHBOYW1lJywgJ015Q29vbEFwcCcpO1xuICAgICAqXG4gICAgICogLy8gY29uZmlndXJlIGV4aXN0aW5nIHNlcnZpY2VzIGluc2lkZSBpbml0aWFsaXphdGlvbiBibG9ja3MuXG4gICAgICogbXlNb2R1bGUuY29uZmlnKFsnJGxvY2F0aW9uUHJvdmlkZXInLCBmdW5jdGlvbigkbG9jYXRpb25Qcm92aWRlcikge1xuICAgICAqICAgLy8gQ29uZmlndXJlIGV4aXN0aW5nIHByb3ZpZGVyc1xuICAgICAqICAgJGxvY2F0aW9uUHJvdmlkZXIuaGFzaFByZWZpeCgnIScpO1xuICAgICAqIH1dKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFRoZW4geW91IGNhbiBjcmVhdGUgYW4gaW5qZWN0b3IgYW5kIGxvYWQgeW91ciBtb2R1bGVzIGxpa2UgdGhpczpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogdmFyIGluamVjdG9yID0gYW5ndWxhci5pbmplY3RvcihbJ25nJywgJ215TW9kdWxlJ10pXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBIb3dldmVyIGl0J3MgbW9yZSBsaWtlbHkgdGhhdCB5b3UnbGwganVzdCB1c2VcbiAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQXBwIG5nQXBwfSBvclxuICAgICAqIHtAbGluayBhbmd1bGFyLmJvb3RzdHJhcH0gdG8gc2ltcGxpZnkgdGhpcyBwcm9jZXNzIGZvciB5b3UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIG1vZHVsZSB0byBjcmVhdGUgb3IgcmV0cmlldmUuXG4gICAgICogQHBhcmFtIHshQXJyYXkuPHN0cmluZz49fSByZXF1aXJlcyBJZiBzcGVjaWZpZWQgdGhlbiBuZXcgbW9kdWxlIGlzIGJlaW5nIGNyZWF0ZWQuIElmXG4gICAgICogICAgICAgIHVuc3BlY2lmaWVkIHRoZW4gdGhlIG1vZHVsZSBpcyBiZWluZyByZXRyaWV2ZWQgZm9yIGZ1cnRoZXIgY29uZmlndXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gY29uZmlnRm4gT3B0aW9uYWwgY29uZmlndXJhdGlvbiBmdW5jdGlvbiBmb3IgdGhlIG1vZHVsZS4gU2FtZSBhc1xuICAgICAqICAgICAgICB7QGxpbmsgYW5ndWxhci5Nb2R1bGUjY29uZmlnIE1vZHVsZSNjb25maWcoKX0uXG4gICAgICogQHJldHVybnMge21vZHVsZX0gbmV3IG1vZHVsZSB3aXRoIHRoZSB7QGxpbmsgYW5ndWxhci5Nb2R1bGV9IGFwaS5cbiAgICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gbW9kdWxlKG5hbWUsIHJlcXVpcmVzLCBjb25maWdGbikge1xuICAgICAgdmFyIGFzc2VydE5vdEhhc093blByb3BlcnR5ID0gZnVuY3Rpb24obmFtZSwgY29udGV4dCkge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ2hhc093blByb3BlcnR5Jykge1xuICAgICAgICAgIHRocm93IG5nTWluRXJyKCdiYWRuYW1lJywgJ2hhc093blByb3BlcnR5IGlzIG5vdCBhIHZhbGlkIHswfSBuYW1lJywgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdtb2R1bGUnKTtcbiAgICAgIGlmIChyZXF1aXJlcyAmJiBtb2R1bGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIG1vZHVsZXNbbmFtZV0gPSBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVuc3VyZShtb2R1bGVzLCBuYW1lLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCFyZXF1aXJlcykge1xuICAgICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignbm9tb2QnLCBcIk1vZHVsZSAnezB9JyBpcyBub3QgYXZhaWxhYmxlISBZb3UgZWl0aGVyIG1pc3NwZWxsZWQgXCIgK1xuICAgICAgICAgICAgIFwidGhlIG1vZHVsZSBuYW1lIG9yIGZvcmdvdCB0byBsb2FkIGl0LiBJZiByZWdpc3RlcmluZyBhIG1vZHVsZSBlbnN1cmUgdGhhdCB5b3UgXCIgK1xuICAgICAgICAgICAgIFwic3BlY2lmeSB0aGUgZGVwZW5kZW5jaWVzIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXCIsIG5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIEB0eXBlIHshQXJyYXkuPEFycmF5LjwqPj59ICovXG4gICAgICAgIHZhciBpbnZva2VRdWV1ZSA9IFtdO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7IUFycmF5LjxGdW5jdGlvbj59ICovXG4gICAgICAgIHZhciBjb25maWdCbG9ja3MgPSBbXTtcblxuICAgICAgICAvKiogQHR5cGUgeyFBcnJheS48RnVuY3Rpb24+fSAqL1xuICAgICAgICB2YXIgcnVuQmxvY2tzID0gW107XG5cbiAgICAgICAgdmFyIGNvbmZpZyA9IGludm9rZUxhdGVyKCckaW5qZWN0b3InLCAnaW52b2tlJywgJ3B1c2gnLCBjb25maWdCbG9ja3MpO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7YW5ndWxhci5Nb2R1bGV9ICovXG4gICAgICAgIHZhciBtb2R1bGVJbnN0YW5jZSA9IHtcbiAgICAgICAgICAvLyBQcml2YXRlIHN0YXRlXG4gICAgICAgICAgX2ludm9rZVF1ZXVlOiBpbnZva2VRdWV1ZSxcbiAgICAgICAgICBfY29uZmlnQmxvY2tzOiBjb25maWdCbG9ja3MsXG4gICAgICAgICAgX3J1bkJsb2NrczogcnVuQmxvY2tzLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjcmVxdWlyZXNcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBIb2xkcyB0aGUgbGlzdCBvZiBtb2R1bGVzIHdoaWNoIHRoZSBpbmplY3RvciB3aWxsIGxvYWQgYmVmb3JlIHRoZSBjdXJyZW50IG1vZHVsZSBpc1xuICAgICAgICAgICAqIGxvYWRlZC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICByZXF1aXJlczogcmVxdWlyZXMsXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNuYW1lXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogTmFtZSBvZiB0aGUgbW9kdWxlLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIG5hbWU6IG5hbWUsXG5cblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNwcm92aWRlclxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm92aWRlclR5cGUgQ29uc3RydWN0aW9uIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgdGhlXG4gICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI3Byb3ZpZGVyICRwcm92aWRlLnByb3ZpZGVyKCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHByb3ZpZGVyOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRwcm92aWRlJywgJ3Byb3ZpZGVyJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjZmFjdG9yeVxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm92aWRlckZ1bmN0aW9uIEZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgdGhlIHNlcnZpY2UuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI2ZhY3RvcnkgJHByb3ZpZGUuZmFjdG9yeSgpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBmYWN0b3J5OiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRwcm92aWRlJywgJ2ZhY3RvcnknKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNzZXJ2aWNlXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIEEgY29uc3RydWN0b3IgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGluc3RhbnRpYXRlZC5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjc2VydmljZSAkcHJvdmlkZS5zZXJ2aWNlKCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHNlcnZpY2U6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJHByb3ZpZGUnLCAnc2VydmljZScpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3ZhbHVlXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0IFNlcnZpY2UgaW5zdGFuY2Ugb2JqZWN0LlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSN2YWx1ZSAkcHJvdmlkZS52YWx1ZSgpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICB2YWx1ZTogaW52b2tlTGF0ZXIoJyRwcm92aWRlJywgJ3ZhbHVlJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjY29uc3RhbnRcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgY29uc3RhbnQgbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0IENvbnN0YW50IHZhbHVlLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIEJlY2F1c2UgdGhlIGNvbnN0YW50cyBhcmUgZml4ZWQsIHRoZXkgZ2V0IGFwcGxpZWQgYmVmb3JlIG90aGVyIHByb3ZpZGUgbWV0aG9kcy5cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjY29uc3RhbnQgJHByb3ZpZGUuY29uc3RhbnQoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgY29uc3RhbnQ6IGludm9rZUxhdGVyKCckcHJvdmlkZScsICdjb25zdGFudCcsICd1bnNoaWZ0JyksXG5cbiAgICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2RlY29yYXRvclxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UgdG8gZGVjb3JhdGUuXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgc2VydmljZSBuZWVkcyB0byBiZVxuICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFudGlhdGVkIGFuZCBzaG91bGQgcmV0dXJuIHRoZSBkZWNvcmF0ZWQgc2VydmljZSBpbnN0YW5jZS5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjZGVjb3JhdG9yICRwcm92aWRlLmRlY29yYXRvcigpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBkZWNvcmF0b3I6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJHByb3ZpZGUnLCAnZGVjb3JhdG9yJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjYW5pbWF0aW9uXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIGFuaW1hdGlvbiBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYW5pbWF0aW9uRmFjdG9yeSBGYWN0b3J5IGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgYW5cbiAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqICoqTk9URSoqOiBhbmltYXRpb25zIHRha2UgZWZmZWN0IG9ubHkgaWYgdGhlICoqbmdBbmltYXRlKiogbW9kdWxlIGlzIGxvYWRlZC5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogRGVmaW5lcyBhbiBhbmltYXRpb24gaG9vayB0aGF0IGNhbiBiZSBsYXRlciB1c2VkIHdpdGhcbiAgICAgICAgICAgKiB7QGxpbmsgJGFuaW1hdGUgJGFuaW1hdGV9IHNlcnZpY2UgYW5kIGRpcmVjdGl2ZXMgdGhhdCB1c2UgdGhpcyBzZXJ2aWNlLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogYGBganNcbiAgICAgICAgICAgKiBtb2R1bGUuYW5pbWF0aW9uKCcuYW5pbWF0aW9uLW5hbWUnLCBmdW5jdGlvbigkaW5qZWN0MSwgJGluamVjdDIpIHtcbiAgICAgICAgICAgKiAgIHJldHVybiB7XG4gICAgICAgICAgICogICAgIGV2ZW50TmFtZSA6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmUpIHtcbiAgICAgICAgICAgKiAgICAgICAvL2NvZGUgdG8gcnVuIHRoZSBhbmltYXRpb25cbiAgICAgICAgICAgKiAgICAgICAvL29uY2UgY29tcGxldGUsIHRoZW4gcnVuIGRvbmUoKVxuICAgICAgICAgICAqICAgICAgIHJldHVybiBmdW5jdGlvbiBjYW5jZWxsYXRpb25GdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICogICAgICAgICAvL2NvZGUgdG8gY2FuY2VsIHRoZSBhbmltYXRpb25cbiAgICAgICAgICAgKiAgICAgICB9XG4gICAgICAgICAgICogICAgIH1cbiAgICAgICAgICAgKiAgIH1cbiAgICAgICAgICAgKiB9KVxuICAgICAgICAgICAqIGBgYFxuICAgICAgICAgICAqXG4gICAgICAgICAgICogU2VlIHtAbGluayBuZy4kYW5pbWF0ZVByb3ZpZGVyI3JlZ2lzdGVyICRhbmltYXRlUHJvdmlkZXIucmVnaXN0ZXIoKX0gYW5kXG4gICAgICAgICAgICoge0BsaW5rIG5nQW5pbWF0ZSBuZ0FuaW1hdGUgbW9kdWxlfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBhbmltYXRpb246IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJGFuaW1hdGVQcm92aWRlcicsICdyZWdpc3RlcicpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2ZpbHRlclxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBGaWx0ZXIgbmFtZSAtIHRoaXMgbXVzdCBiZSBhIHZhbGlkIGFuZ3VsYXIgZXhwcmVzc2lvbiBpZGVudGlmaWVyXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmlsdGVyRmFjdG9yeSBGYWN0b3J5IGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgZmlsdGVyLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGZpbHRlclByb3ZpZGVyI3JlZ2lzdGVyICRmaWx0ZXJQcm92aWRlci5yZWdpc3RlcigpfS5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAgICAgICAgICogKipOb3RlOioqIEZpbHRlciBuYW1lcyBtdXN0IGJlIHZhbGlkIGFuZ3VsYXIge0BsaW5rIGV4cHJlc3Npb259IGlkZW50aWZpZXJzLCBzdWNoIGFzIGB1cHBlcmNhc2VgIG9yIGBvcmRlckJ5YC5cbiAgICAgICAgICAgKiBOYW1lcyB3aXRoIHNwZWNpYWwgY2hhcmFjdGVycywgc3VjaCBhcyBoeXBoZW5zIGFuZCBkb3RzLCBhcmUgbm90IGFsbG93ZWQuIElmIHlvdSB3aXNoIHRvIG5hbWVzcGFjZVxuICAgICAgICAgICAqIHlvdXIgZmlsdGVycywgdGhlbiB5b3UgY2FuIHVzZSBjYXBpdGFsaXphdGlvbiAoYG15YXBwU3Vic2VjdGlvbkZpbHRlcnhgKSBvciB1bmRlcnNjb3Jlc1xuICAgICAgICAgICAqIChgbXlhcHBfc3Vic2VjdGlvbl9maWx0ZXJ4YCkuXG4gICAgICAgICAgICogPC9kaXY+XG4gICAgICAgICAgICovXG4gICAgICAgICAgZmlsdGVyOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRmaWx0ZXJQcm92aWRlcicsICdyZWdpc3RlcicpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbnRyb2xsZXJcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIENvbnRyb2xsZXIgbmFtZSwgb3IgYW4gb2JqZWN0IG1hcCBvZiBjb250cm9sbGVycyB3aGVyZSB0aGVcbiAgICAgICAgICAgKiAgICBrZXlzIGFyZSB0aGUgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBjb25zdHJ1Y3RvcnMuXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQ29udHJvbGxlciBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nLiRjb250cm9sbGVyUHJvdmlkZXIjcmVnaXN0ZXIgJGNvbnRyb2xsZXJQcm92aWRlci5yZWdpc3RlcigpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBjb250cm9sbGVyOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRjb250cm9sbGVyUHJvdmlkZXInLCAncmVnaXN0ZXInKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNkaXJlY3RpdmVcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIERpcmVjdGl2ZSBuYW1lLCBvciBhbiBvYmplY3QgbWFwIG9mIGRpcmVjdGl2ZXMgd2hlcmUgdGhlXG4gICAgICAgICAgICogICAga2V5cyBhcmUgdGhlIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgZmFjdG9yaWVzLlxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGRpcmVjdGl2ZUZhY3RvcnkgRmFjdG9yeSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mXG4gICAgICAgICAgICogZGlyZWN0aXZlcy5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlICRjb21waWxlUHJvdmlkZXIuZGlyZWN0aXZlKCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGRpcmVjdGl2ZTogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckY29tcGlsZVByb3ZpZGVyJywgJ2RpcmVjdGl2ZScpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZ1xuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25maWdGbiBFeGVjdXRlIHRoaXMgZnVuY3Rpb24gb24gbW9kdWxlIGxvYWQuIFVzZWZ1bCBmb3Igc2VydmljZVxuICAgICAgICAgICAqICAgIGNvbmZpZ3VyYXRpb24uXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogVXNlIHRoaXMgbWV0aG9kIHRvIHJlZ2lzdGVyIHdvcmsgd2hpY2ggbmVlZHMgdG8gYmUgcGVyZm9ybWVkIG9uIG1vZHVsZSBsb2FkaW5nLlxuICAgICAgICAgICAqIEZvciBtb3JlIGFib3V0IGhvdyB0byBjb25maWd1cmUgc2VydmljZXMsIHNlZVxuICAgICAgICAgICAqIHtAbGluayBwcm92aWRlcnMjcHJvdmlkZXItcmVjaXBlIFByb3ZpZGVyIFJlY2lwZX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgY29uZmlnOiBjb25maWcsXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjcnVuXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGluaXRpYWxpemF0aW9uRm4gRXhlY3V0ZSB0aGlzIGZ1bmN0aW9uIGFmdGVyIGluamVjdG9yIGNyZWF0aW9uLlxuICAgICAgICAgICAqICAgIFVzZWZ1bCBmb3IgYXBwbGljYXRpb24gaW5pdGlhbGl6YXRpb24uXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogVXNlIHRoaXMgbWV0aG9kIHRvIHJlZ2lzdGVyIHdvcmsgd2hpY2ggc2hvdWxkIGJlIHBlcmZvcm1lZCB3aGVuIHRoZSBpbmplY3RvciBpcyBkb25lXG4gICAgICAgICAgICogbG9hZGluZyBhbGwgbW9kdWxlcy5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBydW46IGZ1bmN0aW9uKGJsb2NrKSB7XG4gICAgICAgICAgICBydW5CbG9ja3MucHVzaChibG9jayk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGNvbmZpZ0ZuKSB7XG4gICAgICAgICAgY29uZmlnKGNvbmZpZ0ZuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtb2R1bGVJbnN0YW5jZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3ZpZGVyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2RcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmc9fSBpbnNlcnRNZXRob2RcbiAgICAgICAgICogQHJldHVybnMge2FuZ3VsYXIuTW9kdWxlfVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gaW52b2tlTGF0ZXIocHJvdmlkZXIsIG1ldGhvZCwgaW5zZXJ0TWV0aG9kLCBxdWV1ZSkge1xuICAgICAgICAgIGlmICghcXVldWUpIHF1ZXVlID0gaW52b2tlUXVldWU7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcXVldWVbaW5zZXJ0TWV0aG9kIHx8ICdwdXNoJ10oW3Byb3ZpZGVyLCBtZXRob2QsIGFyZ3VtZW50c10pO1xuICAgICAgICAgICAgcmV0dXJuIG1vZHVsZUluc3RhbmNlO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3ZpZGVyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2RcbiAgICAgICAgICogQHJldHVybnMge2FuZ3VsYXIuTW9kdWxlfVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKHByb3ZpZGVyLCBtZXRob2QpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVjaXBlTmFtZSwgZmFjdG9yeUZ1bmN0aW9uKSB7XG4gICAgICAgICAgICBpZiAoZmFjdG9yeUZ1bmN0aW9uICYmIGlzRnVuY3Rpb24oZmFjdG9yeUZ1bmN0aW9uKSkgZmFjdG9yeUZ1bmN0aW9uLiQkbW9kdWxlTmFtZSA9IG5hbWU7XG4gICAgICAgICAgICBpbnZva2VRdWV1ZS5wdXNoKFtwcm92aWRlciwgbWV0aG9kLCBhcmd1bWVudHNdKTtcbiAgICAgICAgICAgIHJldHVybiBtb2R1bGVJbnN0YW5jZTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcblxufVxuXG4vKiBnbG9iYWw6IHRvRGVidWdTdHJpbmc6IHRydWUgKi9cblxuZnVuY3Rpb24gc2VyaWFsaXplT2JqZWN0KG9iaikge1xuICB2YXIgc2VlbiA9IFtdO1xuXG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIGZ1bmN0aW9uKGtleSwgdmFsKSB7XG4gICAgdmFsID0gdG9Kc29uUmVwbGFjZXIoa2V5LCB2YWwpO1xuICAgIGlmIChpc09iamVjdCh2YWwpKSB7XG5cbiAgICAgIGlmIChzZWVuLmluZGV4T2YodmFsKSA+PSAwKSByZXR1cm4gJy4uLic7XG5cbiAgICAgIHNlZW4ucHVzaCh2YWwpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gdG9EZWJ1Z1N0cmluZyhvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gb2JqLnRvU3RyaW5nKCkucmVwbGFjZSgvIFxce1tcXHNcXFNdKiQvLCAnJyk7XG4gIH0gZWxzZSBpZiAoaXNVbmRlZmluZWQob2JqKSkge1xuICAgIHJldHVybiAndW5kZWZpbmVkJztcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzZXJpYWxpemVPYmplY3Qob2JqKTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKiBnbG9iYWwgYW5ndWxhck1vZHVsZTogdHJ1ZSxcbiAgdmVyc2lvbjogdHJ1ZSxcblxuICAkQ29tcGlsZVByb3ZpZGVyLFxuXG4gIGh0bWxBbmNob3JEaXJlY3RpdmUsXG4gIGlucHV0RGlyZWN0aXZlLFxuICBpbnB1dERpcmVjdGl2ZSxcbiAgZm9ybURpcmVjdGl2ZSxcbiAgc2NyaXB0RGlyZWN0aXZlLFxuICBzZWxlY3REaXJlY3RpdmUsXG4gIHN0eWxlRGlyZWN0aXZlLFxuICBvcHRpb25EaXJlY3RpdmUsXG4gIG5nQmluZERpcmVjdGl2ZSxcbiAgbmdCaW5kSHRtbERpcmVjdGl2ZSxcbiAgbmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUsXG4gIG5nQ2xhc3NEaXJlY3RpdmUsXG4gIG5nQ2xhc3NFdmVuRGlyZWN0aXZlLFxuICBuZ0NsYXNzT2RkRGlyZWN0aXZlLFxuICBuZ0Nsb2FrRGlyZWN0aXZlLFxuICBuZ0NvbnRyb2xsZXJEaXJlY3RpdmUsXG4gIG5nRm9ybURpcmVjdGl2ZSxcbiAgbmdIaWRlRGlyZWN0aXZlLFxuICBuZ0lmRGlyZWN0aXZlLFxuICBuZ0luY2x1ZGVEaXJlY3RpdmUsXG4gIG5nSW5jbHVkZUZpbGxDb250ZW50RGlyZWN0aXZlLFxuICBuZ0luaXREaXJlY3RpdmUsXG4gIG5nTm9uQmluZGFibGVEaXJlY3RpdmUsXG4gIG5nUGx1cmFsaXplRGlyZWN0aXZlLFxuICBuZ1JlcGVhdERpcmVjdGl2ZSxcbiAgbmdTaG93RGlyZWN0aXZlLFxuICBuZ1N0eWxlRGlyZWN0aXZlLFxuICBuZ1N3aXRjaERpcmVjdGl2ZSxcbiAgbmdTd2l0Y2hXaGVuRGlyZWN0aXZlLFxuICBuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUsXG4gIG5nT3B0aW9uc0RpcmVjdGl2ZSxcbiAgbmdUcmFuc2NsdWRlRGlyZWN0aXZlLFxuICBuZ01vZGVsRGlyZWN0aXZlLFxuICBuZ0xpc3REaXJlY3RpdmUsXG4gIG5nQ2hhbmdlRGlyZWN0aXZlLFxuICBwYXR0ZXJuRGlyZWN0aXZlLFxuICBwYXR0ZXJuRGlyZWN0aXZlLFxuICByZXF1aXJlZERpcmVjdGl2ZSxcbiAgcmVxdWlyZWREaXJlY3RpdmUsXG4gIG1pbmxlbmd0aERpcmVjdGl2ZSxcbiAgbWlubGVuZ3RoRGlyZWN0aXZlLFxuICBtYXhsZW5ndGhEaXJlY3RpdmUsXG4gIG1heGxlbmd0aERpcmVjdGl2ZSxcbiAgbmdWYWx1ZURpcmVjdGl2ZSxcbiAgbmdNb2RlbE9wdGlvbnNEaXJlY3RpdmUsXG4gIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzLFxuICBuZ0V2ZW50RGlyZWN0aXZlcyxcblxuICAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIsXG4gICRBbmltYXRlUHJvdmlkZXIsXG4gICRDb3JlQW5pbWF0ZUNzc1Byb3ZpZGVyLFxuICAkJENvcmVBbmltYXRlUXVldWVQcm92aWRlcixcbiAgJCRDb3JlQW5pbWF0ZVJ1bm5lclByb3ZpZGVyLFxuICAkQnJvd3NlclByb3ZpZGVyLFxuICAkQ2FjaGVGYWN0b3J5UHJvdmlkZXIsXG4gICRDb250cm9sbGVyUHJvdmlkZXIsXG4gICREb2N1bWVudFByb3ZpZGVyLFxuICAkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyLFxuICAkRmlsdGVyUHJvdmlkZXIsXG4gICQkRm9yY2VSZWZsb3dQcm92aWRlcixcbiAgJEludGVycG9sYXRlUHJvdmlkZXIsXG4gICRJbnRlcnZhbFByb3ZpZGVyLFxuICAkJEhhc2hNYXBQcm92aWRlcixcbiAgJEh0dHBQcm92aWRlcixcbiAgJEh0dHBQYXJhbVNlcmlhbGl6ZXJQcm92aWRlcixcbiAgJEh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2VQcm92aWRlcixcbiAgJEh0dHBCYWNrZW5kUHJvdmlkZXIsXG4gICR4aHJGYWN0b3J5UHJvdmlkZXIsXG4gICRMb2NhdGlvblByb3ZpZGVyLFxuICAkTG9nUHJvdmlkZXIsXG4gICRQYXJzZVByb3ZpZGVyLFxuICAkUm9vdFNjb3BlUHJvdmlkZXIsXG4gICRRUHJvdmlkZXIsXG4gICQkUVByb3ZpZGVyLFxuICAkJFNhbml0aXplVXJpUHJvdmlkZXIsXG4gICRTY2VQcm92aWRlcixcbiAgJFNjZURlbGVnYXRlUHJvdmlkZXIsXG4gICRTbmlmZmVyUHJvdmlkZXIsXG4gICRUZW1wbGF0ZUNhY2hlUHJvdmlkZXIsXG4gICRUZW1wbGF0ZVJlcXVlc3RQcm92aWRlcixcbiAgJCRUZXN0YWJpbGl0eVByb3ZpZGVyLFxuICAkVGltZW91dFByb3ZpZGVyLFxuICAkJFJBRlByb3ZpZGVyLFxuICAkV2luZG93UHJvdmlkZXIsXG4gICQkanFMaXRlUHJvdmlkZXIsXG4gICQkQ29va2llUmVhZGVyUHJvdmlkZXJcbiovXG5cblxuLyoqXG4gKiBAbmdkb2Mgb2JqZWN0XG4gKiBAbmFtZSBhbmd1bGFyLnZlcnNpb25cbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICogQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgQW5ndWxhckpTIHZlcnNpb24uXG4gKlxuICogVGhpcyBvYmplY3QgaGFzIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAtIGBmdWxsYCDigJMgYHtzdHJpbmd9YCDigJMgRnVsbCB2ZXJzaW9uIHN0cmluZywgc3VjaCBhcyBcIjAuOS4xOFwiLlxuICogLSBgbWFqb3JgIOKAkyBge251bWJlcn1gIOKAkyBNYWpvciB2ZXJzaW9uIG51bWJlciwgc3VjaCBhcyBcIjBcIi5cbiAqIC0gYG1pbm9yYCDigJMgYHtudW1iZXJ9YCDigJMgTWlub3IgdmVyc2lvbiBudW1iZXIsIHN1Y2ggYXMgXCI5XCIuXG4gKiAtIGBkb3RgIOKAkyBge251bWJlcn1gIOKAkyBEb3QgdmVyc2lvbiBudW1iZXIsIHN1Y2ggYXMgXCIxOFwiLlxuICogLSBgY29kZU5hbWVgIOKAkyBge3N0cmluZ31gIOKAkyBDb2RlIG5hbWUgb2YgdGhlIHJlbGVhc2UsIHN1Y2ggYXMgXCJqaWdnbGluZy1hcm1mYXRcIi5cbiAqL1xudmFyIHZlcnNpb24gPSB7XG4gIGZ1bGw6ICcxLjQuOCcsICAgIC8vIGFsbCBvZiB0aGVzZSBwbGFjZWhvbGRlciBzdHJpbmdzIHdpbGwgYmUgcmVwbGFjZWQgYnkgZ3J1bnQnc1xuICBtYWpvcjogMSwgICAgLy8gcGFja2FnZSB0YXNrXG4gIG1pbm9yOiA0LFxuICBkb3Q6IDgsXG4gIGNvZGVOYW1lOiAnaWNlLW1hbmlwdWxhdGlvbidcbn07XG5cblxuZnVuY3Rpb24gcHVibGlzaEV4dGVybmFsQVBJKGFuZ3VsYXIpIHtcbiAgZXh0ZW5kKGFuZ3VsYXIsIHtcbiAgICAnYm9vdHN0cmFwJzogYm9vdHN0cmFwLFxuICAgICdjb3B5JzogY29weSxcbiAgICAnZXh0ZW5kJzogZXh0ZW5kLFxuICAgICdtZXJnZSc6IG1lcmdlLFxuICAgICdlcXVhbHMnOiBlcXVhbHMsXG4gICAgJ2VsZW1lbnQnOiBqcUxpdGUsXG4gICAgJ2ZvckVhY2gnOiBmb3JFYWNoLFxuICAgICdpbmplY3Rvcic6IGNyZWF0ZUluamVjdG9yLFxuICAgICdub29wJzogbm9vcCxcbiAgICAnYmluZCc6IGJpbmQsXG4gICAgJ3RvSnNvbic6IHRvSnNvbixcbiAgICAnZnJvbUpzb24nOiBmcm9tSnNvbixcbiAgICAnaWRlbnRpdHknOiBpZGVudGl0eSxcbiAgICAnaXNVbmRlZmluZWQnOiBpc1VuZGVmaW5lZCxcbiAgICAnaXNEZWZpbmVkJzogaXNEZWZpbmVkLFxuICAgICdpc1N0cmluZyc6IGlzU3RyaW5nLFxuICAgICdpc0Z1bmN0aW9uJzogaXNGdW5jdGlvbixcbiAgICAnaXNPYmplY3QnOiBpc09iamVjdCxcbiAgICAnaXNOdW1iZXInOiBpc051bWJlcixcbiAgICAnaXNFbGVtZW50JzogaXNFbGVtZW50LFxuICAgICdpc0FycmF5JzogaXNBcnJheSxcbiAgICAndmVyc2lvbic6IHZlcnNpb24sXG4gICAgJ2lzRGF0ZSc6IGlzRGF0ZSxcbiAgICAnbG93ZXJjYXNlJzogbG93ZXJjYXNlLFxuICAgICd1cHBlcmNhc2UnOiB1cHBlcmNhc2UsXG4gICAgJ2NhbGxiYWNrcyc6IHtjb3VudGVyOiAwfSxcbiAgICAnZ2V0VGVzdGFiaWxpdHknOiBnZXRUZXN0YWJpbGl0eSxcbiAgICAnJCRtaW5FcnInOiBtaW5FcnIsXG4gICAgJyQkY3NwJzogY3NwLFxuICAgICdyZWxvYWRXaXRoRGVidWdJbmZvJzogcmVsb2FkV2l0aERlYnVnSW5mb1xuICB9KTtcblxuICBhbmd1bGFyTW9kdWxlID0gc2V0dXBNb2R1bGVMb2FkZXIod2luZG93KTtcblxuICBhbmd1bGFyTW9kdWxlKCduZycsIFsnbmdMb2NhbGUnXSwgWyckcHJvdmlkZScsXG4gICAgZnVuY3Rpb24gbmdNb2R1bGUoJHByb3ZpZGUpIHtcbiAgICAgIC8vICQkc2FuaXRpemVVcmlQcm92aWRlciBuZWVkcyB0byBiZSBiZWZvcmUgJGNvbXBpbGVQcm92aWRlciBhcyBpdCBpcyB1c2VkIGJ5IGl0LlxuICAgICAgJHByb3ZpZGUucHJvdmlkZXIoe1xuICAgICAgICAkJHNhbml0aXplVXJpOiAkJFNhbml0aXplVXJpUHJvdmlkZXJcbiAgICAgIH0pO1xuICAgICAgJHByb3ZpZGUucHJvdmlkZXIoJyRjb21waWxlJywgJENvbXBpbGVQcm92aWRlcikuXG4gICAgICAgIGRpcmVjdGl2ZSh7XG4gICAgICAgICAgICBhOiBodG1sQW5jaG9yRGlyZWN0aXZlLFxuICAgICAgICAgICAgaW5wdXQ6IGlucHV0RGlyZWN0aXZlLFxuICAgICAgICAgICAgdGV4dGFyZWE6IGlucHV0RGlyZWN0aXZlLFxuICAgICAgICAgICAgZm9ybTogZm9ybURpcmVjdGl2ZSxcbiAgICAgICAgICAgIHNjcmlwdDogc2NyaXB0RGlyZWN0aXZlLFxuICAgICAgICAgICAgc2VsZWN0OiBzZWxlY3REaXJlY3RpdmUsXG4gICAgICAgICAgICBzdHlsZTogc3R5bGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBvcHRpb246IG9wdGlvbkRpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQmluZDogbmdCaW5kRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdCaW5kSHRtbDogbmdCaW5kSHRtbERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQmluZFRlbXBsYXRlOiBuZ0JpbmRUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQ2xhc3M6IG5nQ2xhc3NEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0NsYXNzRXZlbjogbmdDbGFzc0V2ZW5EaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0NsYXNzT2RkOiBuZ0NsYXNzT2RkRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdDbG9hazogbmdDbG9ha0RpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQ29udHJvbGxlcjogbmdDb250cm9sbGVyRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdGb3JtOiBuZ0Zvcm1EaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0hpZGU6IG5nSGlkZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nSWY6IG5nSWZEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0luY2x1ZGU6IG5nSW5jbHVkZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nSW5pdDogbmdJbml0RGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdOb25CaW5kYWJsZTogbmdOb25CaW5kYWJsZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nUGx1cmFsaXplOiBuZ1BsdXJhbGl6ZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nUmVwZWF0OiBuZ1JlcGVhdERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU2hvdzogbmdTaG93RGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdTdHlsZTogbmdTdHlsZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU3dpdGNoOiBuZ1N3aXRjaERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU3dpdGNoV2hlbjogbmdTd2l0Y2hXaGVuRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdTd2l0Y2hEZWZhdWx0OiBuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ09wdGlvbnM6IG5nT3B0aW9uc0RpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nVHJhbnNjbHVkZTogbmdUcmFuc2NsdWRlRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdNb2RlbDogbmdNb2RlbERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nTGlzdDogbmdMaXN0RGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdDaGFuZ2U6IG5nQ2hhbmdlRGlyZWN0aXZlLFxuICAgICAgICAgICAgcGF0dGVybjogcGF0dGVybkRpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nUGF0dGVybjogcGF0dGVybkRpcmVjdGl2ZSxcbiAgICAgICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nUmVxdWlyZWQ6IHJlcXVpcmVkRGlyZWN0aXZlLFxuICAgICAgICAgICAgbWlubGVuZ3RoOiBtaW5sZW5ndGhEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ01pbmxlbmd0aDogbWlubGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICAgICAgbWF4bGVuZ3RoOiBtYXhsZW5ndGhEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ01heGxlbmd0aDogbWF4bGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdWYWx1ZTogbmdWYWx1ZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nTW9kZWxPcHRpb25zOiBuZ01vZGVsT3B0aW9uc0RpcmVjdGl2ZVxuICAgICAgICB9KS5cbiAgICAgICAgZGlyZWN0aXZlKHtcbiAgICAgICAgICBuZ0luY2x1ZGU6IG5nSW5jbHVkZUZpbGxDb250ZW50RGlyZWN0aXZlXG4gICAgICAgIH0pLlxuICAgICAgICBkaXJlY3RpdmUobmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXMpLlxuICAgICAgICBkaXJlY3RpdmUobmdFdmVudERpcmVjdGl2ZXMpO1xuICAgICAgJHByb3ZpZGUucHJvdmlkZXIoe1xuICAgICAgICAkYW5jaG9yU2Nyb2xsOiAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIsXG4gICAgICAgICRhbmltYXRlOiAkQW5pbWF0ZVByb3ZpZGVyLFxuICAgICAgICAkYW5pbWF0ZUNzczogJENvcmVBbmltYXRlQ3NzUHJvdmlkZXIsXG4gICAgICAgICQkYW5pbWF0ZVF1ZXVlOiAkJENvcmVBbmltYXRlUXVldWVQcm92aWRlcixcbiAgICAgICAgJCRBbmltYXRlUnVubmVyOiAkJENvcmVBbmltYXRlUnVubmVyUHJvdmlkZXIsXG4gICAgICAgICRicm93c2VyOiAkQnJvd3NlclByb3ZpZGVyLFxuICAgICAgICAkY2FjaGVGYWN0b3J5OiAkQ2FjaGVGYWN0b3J5UHJvdmlkZXIsXG4gICAgICAgICRjb250cm9sbGVyOiAkQ29udHJvbGxlclByb3ZpZGVyLFxuICAgICAgICAkZG9jdW1lbnQ6ICREb2N1bWVudFByb3ZpZGVyLFxuICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcjogJEV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlcixcbiAgICAgICAgJGZpbHRlcjogJEZpbHRlclByb3ZpZGVyLFxuICAgICAgICAkJGZvcmNlUmVmbG93OiAkJEZvcmNlUmVmbG93UHJvdmlkZXIsXG4gICAgICAgICRpbnRlcnBvbGF0ZTogJEludGVycG9sYXRlUHJvdmlkZXIsXG4gICAgICAgICRpbnRlcnZhbDogJEludGVydmFsUHJvdmlkZXIsXG4gICAgICAgICRodHRwOiAkSHR0cFByb3ZpZGVyLFxuICAgICAgICAkaHR0cFBhcmFtU2VyaWFsaXplcjogJEh0dHBQYXJhbVNlcmlhbGl6ZXJQcm92aWRlcixcbiAgICAgICAgJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2U6ICRIdHRwUGFyYW1TZXJpYWxpemVySlFMaWtlUHJvdmlkZXIsXG4gICAgICAgICRodHRwQmFja2VuZDogJEh0dHBCYWNrZW5kUHJvdmlkZXIsXG4gICAgICAgICR4aHJGYWN0b3J5OiAkeGhyRmFjdG9yeVByb3ZpZGVyLFxuICAgICAgICAkbG9jYXRpb246ICRMb2NhdGlvblByb3ZpZGVyLFxuICAgICAgICAkbG9nOiAkTG9nUHJvdmlkZXIsXG4gICAgICAgICRwYXJzZTogJFBhcnNlUHJvdmlkZXIsXG4gICAgICAgICRyb290U2NvcGU6ICRSb290U2NvcGVQcm92aWRlcixcbiAgICAgICAgJHE6ICRRUHJvdmlkZXIsXG4gICAgICAgICQkcTogJCRRUHJvdmlkZXIsXG4gICAgICAgICRzY2U6ICRTY2VQcm92aWRlcixcbiAgICAgICAgJHNjZURlbGVnYXRlOiAkU2NlRGVsZWdhdGVQcm92aWRlcixcbiAgICAgICAgJHNuaWZmZXI6ICRTbmlmZmVyUHJvdmlkZXIsXG4gICAgICAgICR0ZW1wbGF0ZUNhY2hlOiAkVGVtcGxhdGVDYWNoZVByb3ZpZGVyLFxuICAgICAgICAkdGVtcGxhdGVSZXF1ZXN0OiAkVGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIsXG4gICAgICAgICQkdGVzdGFiaWxpdHk6ICQkVGVzdGFiaWxpdHlQcm92aWRlcixcbiAgICAgICAgJHRpbWVvdXQ6ICRUaW1lb3V0UHJvdmlkZXIsXG4gICAgICAgICR3aW5kb3c6ICRXaW5kb3dQcm92aWRlcixcbiAgICAgICAgJCRyQUY6ICQkUkFGUHJvdmlkZXIsXG4gICAgICAgICQkanFMaXRlOiAkJGpxTGl0ZVByb3ZpZGVyLFxuICAgICAgICAkJEhhc2hNYXA6ICQkSGFzaE1hcFByb3ZpZGVyLFxuICAgICAgICAkJGNvb2tpZVJlYWRlcjogJCRDb29raWVSZWFkZXJQcm92aWRlclxuICAgICAgfSk7XG4gICAgfVxuICBdKTtcbn1cblxuLyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuICogICAgIEFueSBjb21taXRzIHRvIHRoaXMgZmlsZSBzaG91bGQgYmUgcmV2aWV3ZWQgd2l0aCBzZWN1cml0eSBpbiBtaW5kLiAgKlxuICogICBDaGFuZ2VzIHRvIHRoaXMgZmlsZSBjYW4gcG90ZW50aWFsbHkgY3JlYXRlIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcy4gKlxuICogICAgICAgICAgQW4gYXBwcm92YWwgZnJvbSAyIENvcmUgbWVtYmVycyB3aXRoIGhpc3Rvcnkgb2YgbW9kaWZ5aW5nICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBmaWxlIGlzIHJlcXVpcmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogIERvZXMgdGhlIGNoYW5nZSBzb21laG93IGFsbG93IGZvciBhcmJpdHJhcnkgamF2YXNjcmlwdCB0byBiZSBleGVjdXRlZD8gKlxuICogICAgT3IgYWxsb3dzIGZvciBzb21lb25lIHRvIGNoYW5nZSB0aGUgcHJvdG90eXBlIG9mIGJ1aWx0LWluIG9iamVjdHM/ICAgKlxuICogICAgIE9yIGdpdmVzIHVuZGVzaXJlZCBhY2Nlc3MgdG8gdmFyaWFibGVzIGxpa2VzIGRvY3VtZW50IG9yIHdpbmRvdz8gICAgKlxuICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKi9cblxuLyogZ2xvYmFsIEpRTGl0ZVByb3RvdHlwZTogdHJ1ZSxcbiAgYWRkRXZlbnRMaXN0ZW5lckZuOiB0cnVlLFxuICByZW1vdmVFdmVudExpc3RlbmVyRm46IHRydWUsXG4gIEJPT0xFQU5fQVRUUjogdHJ1ZSxcbiAgQUxJQVNFRF9BVFRSOiB0cnVlLFxuKi9cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy9KUUxpdGVcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuZWxlbWVudFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFdyYXBzIGEgcmF3IERPTSBlbGVtZW50IG9yIEhUTUwgc3RyaW5nIGFzIGEgW2pRdWVyeV0oaHR0cDovL2pxdWVyeS5jb20pIGVsZW1lbnQuXG4gKlxuICogSWYgalF1ZXJ5IGlzIGF2YWlsYWJsZSwgYGFuZ3VsYXIuZWxlbWVudGAgaXMgYW4gYWxpYXMgZm9yIHRoZVxuICogW2pRdWVyeV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2pRdWVyeS8pIGZ1bmN0aW9uLiBJZiBqUXVlcnkgaXMgbm90IGF2YWlsYWJsZSwgYGFuZ3VsYXIuZWxlbWVudGBcbiAqIGRlbGVnYXRlcyB0byBBbmd1bGFyJ3MgYnVpbHQtaW4gc3Vic2V0IG9mIGpRdWVyeSwgY2FsbGVkIFwialF1ZXJ5IGxpdGVcIiBvciBcImpxTGl0ZS5cIlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1zdWNjZXNzXCI+anFMaXRlIGlzIGEgdGlueSwgQVBJLWNvbXBhdGlibGUgc3Vic2V0IG9mIGpRdWVyeSB0aGF0IGFsbG93c1xuICogQW5ndWxhciB0byBtYW5pcHVsYXRlIHRoZSBET00gaW4gYSBjcm9zcy1icm93c2VyIGNvbXBhdGlibGUgd2F5LiAqKmpxTGl0ZSoqIGltcGxlbWVudHMgb25seSB0aGUgbW9zdFxuICogY29tbW9ubHkgbmVlZGVkIGZ1bmN0aW9uYWxpdHkgd2l0aCB0aGUgZ29hbCBvZiBoYXZpbmcgYSB2ZXJ5IHNtYWxsIGZvb3RwcmludC48L2Rpdj5cbiAqXG4gKiBUbyB1c2UgYGpRdWVyeWAsIHNpbXBseSBlbnN1cmUgaXQgaXMgbG9hZGVkIGJlZm9yZSB0aGUgYGFuZ3VsYXIuanNgIGZpbGUuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0XCI+KipOb3RlOioqIGFsbCBlbGVtZW50IHJlZmVyZW5jZXMgaW4gQW5ndWxhciBhcmUgYWx3YXlzIHdyYXBwZWQgd2l0aCBqUXVlcnkgb3JcbiAqIGpxTGl0ZTsgdGhleSBhcmUgbmV2ZXIgcmF3IERPTSByZWZlcmVuY2VzLjwvZGl2PlxuICpcbiAqICMjIEFuZ3VsYXIncyBqcUxpdGVcbiAqIGpxTGl0ZSBwcm92aWRlcyBvbmx5IHRoZSBmb2xsb3dpbmcgalF1ZXJ5IG1ldGhvZHM6XG4gKlxuICogLSBbYGFkZENsYXNzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYWRkQ2xhc3MvKVxuICogLSBbYGFmdGVyKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYWZ0ZXIvKVxuICogLSBbYGFwcGVuZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2FwcGVuZC8pXG4gKiAtIFtgYXR0cigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2F0dHIvKSAtIERvZXMgbm90IHN1cHBvcnQgZnVuY3Rpb25zIGFzIHBhcmFtZXRlcnNcbiAqIC0gW2BiaW5kKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYmluZC8pIC0gRG9lcyBub3Qgc3VwcG9ydCBuYW1lc3BhY2VzLCBzZWxlY3RvcnMgb3IgZXZlbnREYXRhXG4gKiAtIFtgY2hpbGRyZW4oKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9jaGlsZHJlbi8pIC0gRG9lcyBub3Qgc3VwcG9ydCBzZWxlY3RvcnNcbiAqIC0gW2BjbG9uZSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2Nsb25lLylcbiAqIC0gW2Bjb250ZW50cygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2NvbnRlbnRzLylcbiAqIC0gW2Bjc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9jc3MvKSAtIE9ubHkgcmV0cmlldmVzIGlubGluZS1zdHlsZXMsIGRvZXMgbm90IGNhbGwgYGdldENvbXB1dGVkU3R5bGUoKWAuIEFzIGEgc2V0dGVyLCBkb2VzIG5vdCBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5ncyBvciBhcHBlbmQgJ3B4Jy5cbiAqIC0gW2BkYXRhKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZGF0YS8pXG4gKiAtIFtgZGV0YWNoKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZGV0YWNoLylcbiAqIC0gW2BlbXB0eSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2VtcHR5LylcbiAqIC0gW2BlcSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2VxLylcbiAqIC0gW2BmaW5kKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZmluZC8pIC0gTGltaXRlZCB0byBsb29rdXBzIGJ5IHRhZyBuYW1lXG4gKiAtIFtgaGFzQ2xhc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9oYXNDbGFzcy8pXG4gKiAtIFtgaHRtbCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2h0bWwvKVxuICogLSBbYG5leHQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9uZXh0LykgLSBEb2VzIG5vdCBzdXBwb3J0IHNlbGVjdG9yc1xuICogLSBbYG9uKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vb24vKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcywgc2VsZWN0b3JzIG9yIGV2ZW50RGF0YVxuICogLSBbYG9mZigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL29mZi8pIC0gRG9lcyBub3Qgc3VwcG9ydCBuYW1lc3BhY2VzLCBzZWxlY3RvcnMgb3IgZXZlbnQgb2JqZWN0IGFzIHBhcmFtZXRlclxuICogLSBbYG9uZSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL29uZS8pIC0gRG9lcyBub3Qgc3VwcG9ydCBuYW1lc3BhY2VzIG9yIHNlbGVjdG9yc1xuICogLSBbYHBhcmVudCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3BhcmVudC8pIC0gRG9lcyBub3Qgc3VwcG9ydCBzZWxlY3RvcnNcbiAqIC0gW2BwcmVwZW5kKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcHJlcGVuZC8pXG4gKiAtIFtgcHJvcCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3Byb3AvKVxuICogLSBbYHJlYWR5KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVhZHkvKVxuICogLSBbYHJlbW92ZSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZS8pXG4gKiAtIFtgcmVtb3ZlQXR0cigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZUF0dHIvKVxuICogLSBbYHJlbW92ZUNsYXNzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlQ2xhc3MvKVxuICogLSBbYHJlbW92ZURhdGEoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmVEYXRhLylcbiAqIC0gW2ByZXBsYWNlV2l0aCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlcGxhY2VXaXRoLylcbiAqIC0gW2B0ZXh0KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vdGV4dC8pXG4gKiAtIFtgdG9nZ2xlQ2xhc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90b2dnbGVDbGFzcy8pXG4gKiAtIFtgdHJpZ2dlckhhbmRsZXIoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90cmlnZ2VySGFuZGxlci8pIC0gUGFzc2VzIGEgZHVtbXkgZXZlbnQgb2JqZWN0IHRvIGhhbmRsZXJzLlxuICogLSBbYHVuYmluZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3VuYmluZC8pIC0gRG9lcyBub3Qgc3VwcG9ydCBuYW1lc3BhY2VzIG9yIGV2ZW50IG9iamVjdCBhcyBwYXJhbWV0ZXJcbiAqIC0gW2B2YWwoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS92YWwvKVxuICogLSBbYHdyYXAoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS93cmFwLylcbiAqXG4gKiAjIyBqUXVlcnkvanFMaXRlIEV4dHJhc1xuICogQW5ndWxhciBhbHNvIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgYWRkaXRpb25hbCBtZXRob2RzIGFuZCBldmVudHMgdG8gYm90aCBqUXVlcnkgYW5kIGpxTGl0ZTpcbiAqXG4gKiAjIyMgRXZlbnRzXG4gKiAtIGAkZGVzdHJveWAgLSBBbmd1bGFySlMgaW50ZXJjZXB0cyBhbGwganFMaXRlL2pRdWVyeSdzIERPTSBkZXN0cnVjdGlvbiBhcGlzIGFuZCBmaXJlcyB0aGlzIGV2ZW50XG4gKiAgICBvbiBhbGwgRE9NIG5vZGVzIGJlaW5nIHJlbW92ZWQuICBUaGlzIGNhbiBiZSB1c2VkIHRvIGNsZWFuIHVwIGFueSAzcmQgcGFydHkgYmluZGluZ3MgdG8gdGhlIERPTVxuICogICAgZWxlbWVudCBiZWZvcmUgaXQgaXMgcmVtb3ZlZC5cbiAqXG4gKiAjIyMgTWV0aG9kc1xuICogLSBgY29udHJvbGxlcihuYW1lKWAgLSByZXRyaWV2ZXMgdGhlIGNvbnRyb2xsZXIgb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBvciBpdHMgcGFyZW50LiBCeSBkZWZhdWx0XG4gKiAgIHJldHJpZXZlcyBjb250cm9sbGVyIGFzc29jaWF0ZWQgd2l0aCB0aGUgYG5nQ29udHJvbGxlcmAgZGlyZWN0aXZlLiBJZiBgbmFtZWAgaXMgcHJvdmlkZWQgYXNcbiAqICAgY2FtZWxDYXNlIGRpcmVjdGl2ZSBuYW1lLCB0aGVuIHRoZSBjb250cm9sbGVyIGZvciB0aGlzIGRpcmVjdGl2ZSB3aWxsIGJlIHJldHJpZXZlZCAoZS5nLlxuICogICBgJ25nTW9kZWwnYCkuXG4gKiAtIGBpbmplY3RvcigpYCAtIHJldHJpZXZlcyB0aGUgaW5qZWN0b3Igb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBvciBpdHMgcGFyZW50LlxuICogLSBgc2NvcGUoKWAgLSByZXRyaWV2ZXMgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIHNjb3BlfSBvZiB0aGUgY3VycmVudFxuICogICBlbGVtZW50IG9yIGl0cyBwYXJlbnQuIFJlcXVpcmVzIHtAbGluayBndWlkZS9wcm9kdWN0aW9uI2Rpc2FibGluZy1kZWJ1Zy1kYXRhIERlYnVnIERhdGF9IHRvXG4gKiAgIGJlIGVuYWJsZWQuXG4gKiAtIGBpc29sYXRlU2NvcGUoKWAgLSByZXRyaWV2ZXMgYW4gaXNvbGF0ZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0gaWYgb25lIGlzIGF0dGFjaGVkIGRpcmVjdGx5IHRvIHRoZVxuICogICBjdXJyZW50IGVsZW1lbnQuIFRoaXMgZ2V0dGVyIHNob3VsZCBiZSB1c2VkIG9ubHkgb24gZWxlbWVudHMgdGhhdCBjb250YWluIGEgZGlyZWN0aXZlIHdoaWNoIHN0YXJ0cyBhIG5ldyBpc29sYXRlXG4gKiAgIHNjb3BlLiBDYWxsaW5nIGBzY29wZSgpYCBvbiB0aGlzIGVsZW1lbnQgYWx3YXlzIHJldHVybnMgdGhlIG9yaWdpbmFsIG5vbi1pc29sYXRlIHNjb3BlLlxuICogICBSZXF1aXJlcyB7QGxpbmsgZ3VpZGUvcHJvZHVjdGlvbiNkaXNhYmxpbmctZGVidWctZGF0YSBEZWJ1ZyBEYXRhfSB0byBiZSBlbmFibGVkLlxuICogLSBgaW5oZXJpdGVkRGF0YSgpYCAtIHNhbWUgYXMgYGRhdGEoKWAsIGJ1dCB3YWxrcyB1cCB0aGUgRE9NIHVudGlsIGEgdmFsdWUgaXMgZm91bmQgb3IgdGhlIHRvcFxuICogICBwYXJlbnQgZWxlbWVudCBpcyByZWFjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfERPTUVsZW1lbnR9IGVsZW1lbnQgSFRNTCBzdHJpbmcgb3IgRE9NRWxlbWVudCB0byBiZSB3cmFwcGVkIGludG8galF1ZXJ5LlxuICogQHJldHVybnMge09iamVjdH0galF1ZXJ5IG9iamVjdC5cbiAqL1xuXG5KUUxpdGUuZXhwYW5kbyA9ICduZzMzOSc7XG5cbnZhciBqcUNhY2hlID0gSlFMaXRlLmNhY2hlID0ge30sXG4gICAganFJZCA9IDEsXG4gICAgYWRkRXZlbnRMaXN0ZW5lckZuID0gZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgZm4pIHtcbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgZmFsc2UpO1xuICAgIH0sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuID0gZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgZm4pIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgZmFsc2UpO1xuICAgIH07XG5cbi8qXG4gKiAhISEgVGhpcyBpcyBhbiB1bmRvY3VtZW50ZWQgXCJwcml2YXRlXCIgZnVuY3Rpb24gISEhXG4gKi9cbkpRTGl0ZS5fZGF0YSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgLy9qUXVlcnkgYWx3YXlzIHJldHVybnMgYW4gb2JqZWN0IG9uIGNhY2hlIG1pc3NcbiAgcmV0dXJuIHRoaXMuY2FjaGVbbm9kZVt0aGlzLmV4cGFuZG9dXSB8fCB7fTtcbn07XG5cbmZ1bmN0aW9uIGpxTmV4dElkKCkgeyByZXR1cm4gKytqcUlkOyB9XG5cblxudmFyIFNQRUNJQUxfQ0hBUlNfUkVHRVhQID0gLyhbXFw6XFwtXFxfXSsoLikpL2c7XG52YXIgTU9aX0hBQ0tfUkVHRVhQID0gL15tb3ooW0EtWl0pLztcbnZhciBNT1VTRV9FVkVOVF9NQVA9IHsgbW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLCBtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwifTtcbnZhciBqcUxpdGVNaW5FcnIgPSBtaW5FcnIoJ2pxTGl0ZScpO1xuXG4vKipcbiAqIENvbnZlcnRzIHNuYWtlX2Nhc2UgdG8gY2FtZWxDYXNlLlxuICogQWxzbyB0aGVyZSBpcyBzcGVjaWFsIGNhc2UgZm9yIE1veiBwcmVmaXggc3RhcnRpbmcgd2l0aCB1cHBlciBjYXNlIGxldHRlci5cbiAqIEBwYXJhbSBuYW1lIE5hbWUgdG8gbm9ybWFsaXplXG4gKi9cbmZ1bmN0aW9uIGNhbWVsQ2FzZShuYW1lKSB7XG4gIHJldHVybiBuYW1lLlxuICAgIHJlcGxhY2UoU1BFQ0lBTF9DSEFSU19SRUdFWFAsIGZ1bmN0aW9uKF8sIHNlcGFyYXRvciwgbGV0dGVyLCBvZmZzZXQpIHtcbiAgICAgIHJldHVybiBvZmZzZXQgPyBsZXR0ZXIudG9VcHBlckNhc2UoKSA6IGxldHRlcjtcbiAgICB9KS5cbiAgICByZXBsYWNlKE1PWl9IQUNLX1JFR0VYUCwgJ01veiQxJyk7XG59XG5cbnZhciBTSU5HTEVfVEFHX1JFR0VYUCA9IC9ePChbXFx3LV0rKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLztcbnZhciBIVE1MX1JFR0VYUCA9IC88fCYjP1xcdys7LztcbnZhciBUQUdfTkFNRV9SRUdFWFAgPSAvPChbXFx3Oi1dKykvO1xudmFyIFhIVE1MX1RBR19SRUdFWFAgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbXFx3Oi1dKylbXj5dKilcXC8+L2dpO1xuXG52YXIgd3JhcE1hcCA9IHtcbiAgJ29wdGlvbic6IFsxLCAnPHNlbGVjdCBtdWx0aXBsZT1cIm11bHRpcGxlXCI+JywgJzwvc2VsZWN0PiddLFxuXG4gICd0aGVhZCc6IFsxLCAnPHRhYmxlPicsICc8L3RhYmxlPiddLFxuICAnY29sJzogWzIsICc8dGFibGU+PGNvbGdyb3VwPicsICc8L2NvbGdyb3VwPjwvdGFibGU+J10sXG4gICd0cic6IFsyLCAnPHRhYmxlPjx0Ym9keT4nLCAnPC90Ym9keT48L3RhYmxlPiddLFxuICAndGQnOiBbMywgJzx0YWJsZT48dGJvZHk+PHRyPicsICc8L3RyPjwvdGJvZHk+PC90YWJsZT4nXSxcbiAgJ19kZWZhdWx0JzogWzAsIFwiXCIsIFwiXCJdXG59O1xuXG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblxuZnVuY3Rpb24ganFMaXRlSXNUZXh0Tm9kZShodG1sKSB7XG4gIHJldHVybiAhSFRNTF9SRUdFWFAudGVzdChodG1sKTtcbn1cblxuZnVuY3Rpb24ganFMaXRlQWNjZXB0c0RhdGEobm9kZSkge1xuICAvLyBUaGUgd2luZG93IG9iamVjdCBjYW4gYWNjZXB0IGRhdGEgYnV0IGhhcyBubyBub2RlVHlwZVxuICAvLyBPdGhlcndpc2Ugd2UgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiBlbGVtZW50cyAoMSkgYW5kIGRvY3VtZW50cyAoOSlcbiAgdmFyIG5vZGVUeXBlID0gbm9kZS5ub2RlVHlwZTtcbiAgcmV0dXJuIG5vZGVUeXBlID09PSBOT0RFX1RZUEVfRUxFTUVOVCB8fCAhbm9kZVR5cGUgfHwgbm9kZVR5cGUgPT09IE5PREVfVFlQRV9ET0NVTUVOVDtcbn1cblxuZnVuY3Rpb24ganFMaXRlSGFzRGF0YShub2RlKSB7XG4gIGZvciAodmFyIGtleSBpbiBqcUNhY2hlW25vZGUubmczMzldKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBqcUxpdGVCdWlsZEZyYWdtZW50KGh0bWwsIGNvbnRleHQpIHtcbiAgdmFyIHRtcCwgdGFnLCB3cmFwLFxuICAgICAgZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcbiAgICAgIG5vZGVzID0gW10sIGk7XG5cbiAgaWYgKGpxTGl0ZUlzVGV4dE5vZGUoaHRtbCkpIHtcbiAgICAvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcbiAgICBub2Rlcy5wdXNoKGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoaHRtbCkpO1xuICB9IGVsc2Uge1xuICAgIC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuICAgIHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZChjb250ZXh0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpO1xuICAgIHRhZyA9IChUQUdfTkFNRV9SRUdFWFAuZXhlYyhodG1sKSB8fCBbXCJcIiwgXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCk7XG4gICAgd3JhcCA9IHdyYXBNYXBbdGFnXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuICAgIHRtcC5pbm5lckhUTUwgPSB3cmFwWzFdICsgaHRtbC5yZXBsYWNlKFhIVE1MX1RBR19SRUdFWFAsIFwiPCQxPjwvJDI+XCIpICsgd3JhcFsyXTtcblxuICAgIC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuICAgIGkgPSB3cmFwWzBdO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG4gICAgfVxuXG4gICAgbm9kZXMgPSBjb25jYXQobm9kZXMsIHRtcC5jaGlsZE5vZGVzKTtcblxuICAgIHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG4gICAgdG1wLnRleHRDb250ZW50ID0gXCJcIjtcbiAgfVxuXG4gIC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcbiAgZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuICBmcmFnbWVudC5pbm5lckhUTUwgPSBcIlwiOyAvLyBDbGVhciBpbm5lciBIVE1MXG4gIGZvckVhY2gobm9kZXMsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChub2RlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZyYWdtZW50O1xufVxuXG5mdW5jdGlvbiBqcUxpdGVQYXJzZUhUTUwoaHRtbCwgY29udGV4dCkge1xuICBjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcbiAgdmFyIHBhcnNlZDtcblxuICBpZiAoKHBhcnNlZCA9IFNJTkdMRV9UQUdfUkVHRVhQLmV4ZWMoaHRtbCkpKSB7XG4gICAgcmV0dXJuIFtjb250ZXh0LmNyZWF0ZUVsZW1lbnQocGFyc2VkWzFdKV07XG4gIH1cblxuICBpZiAoKHBhcnNlZCA9IGpxTGl0ZUJ1aWxkRnJhZ21lbnQoaHRtbCwgY29udGV4dCkpKSB7XG4gICAgcmV0dXJuIHBhcnNlZC5jaGlsZE5vZGVzO1xuICB9XG5cbiAgcmV0dXJuIFtdO1xufVxuXG5cbi8vIElFOS0xMSBoYXMgbm8gbWV0aG9kIFwiY29udGFpbnNcIiBpbiBTVkcgZWxlbWVudCBhbmQgaW4gTm9kZS5wcm90b3R5cGUuIEJ1ZyAjMTAyNTkuXG52YXIganFMaXRlQ29udGFpbnMgPSBOb2RlLnByb3RvdHlwZS5jb250YWlucyB8fCBmdW5jdGlvbihhcmcpIHtcbiAgLy8ganNoaW50IGJpdHdpc2U6IGZhbHNlXG4gIHJldHVybiAhISh0aGlzLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGFyZykgJiAxNik7XG4gIC8vIGpzaGludCBiaXR3aXNlOiB0cnVlXG59O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbmZ1bmN0aW9uIEpRTGl0ZShlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50IGluc3RhbmNlb2YgSlFMaXRlKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICB2YXIgYXJnSXNTdHJpbmc7XG5cbiAgaWYgKGlzU3RyaW5nKGVsZW1lbnQpKSB7XG4gICAgZWxlbWVudCA9IHRyaW0oZWxlbWVudCk7XG4gICAgYXJnSXNTdHJpbmcgPSB0cnVlO1xuICB9XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBKUUxpdGUpKSB7XG4gICAgaWYgKGFyZ0lzU3RyaW5nICYmIGVsZW1lbnQuY2hhckF0KDApICE9ICc8Jykge1xuICAgICAgdGhyb3cganFMaXRlTWluRXJyKCdub3NlbCcsICdMb29raW5nIHVwIGVsZW1lbnRzIHZpYSBzZWxlY3RvcnMgaXMgbm90IHN1cHBvcnRlZCBieSBqcUxpdGUhIFNlZTogaHR0cDovL2RvY3MuYW5ndWxhcmpzLm9yZy9hcGkvYW5ndWxhci5lbGVtZW50Jyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgSlFMaXRlKGVsZW1lbnQpO1xuICB9XG5cbiAgaWYgKGFyZ0lzU3RyaW5nKSB7XG4gICAganFMaXRlQWRkTm9kZXModGhpcywganFMaXRlUGFyc2VIVE1MKGVsZW1lbnQpKTtcbiAgfSBlbHNlIHtcbiAgICBqcUxpdGVBZGROb2Rlcyh0aGlzLCBlbGVtZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVDbG9uZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LmNsb25lTm9kZSh0cnVlKTtcbn1cblxuZnVuY3Rpb24ganFMaXRlRGVhbG9jKGVsZW1lbnQsIG9ubHlEZXNjZW5kYW50cykge1xuICBpZiAoIW9ubHlEZXNjZW5kYW50cykganFMaXRlUmVtb3ZlRGF0YShlbGVtZW50KTtcblxuICBpZiAoZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKSB7XG4gICAgdmFyIGRlc2NlbmRhbnRzID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcqJyk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBkZXNjZW5kYW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGpxTGl0ZVJlbW92ZURhdGEoZGVzY2VuZGFudHNbaV0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVPZmYoZWxlbWVudCwgdHlwZSwgZm4sIHVuc3VwcG9ydGVkKSB7XG4gIGlmIChpc0RlZmluZWQodW5zdXBwb3J0ZWQpKSB0aHJvdyBqcUxpdGVNaW5FcnIoJ29mZmFyZ3MnLCAnanFMaXRlI29mZigpIGRvZXMgbm90IHN1cHBvcnQgdGhlIGBzZWxlY3RvcmAgYXJndW1lbnQnKTtcblxuICB2YXIgZXhwYW5kb1N0b3JlID0ganFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQpO1xuICB2YXIgZXZlbnRzID0gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZS5ldmVudHM7XG4gIHZhciBoYW5kbGUgPSBleHBhbmRvU3RvcmUgJiYgZXhwYW5kb1N0b3JlLmhhbmRsZTtcblxuICBpZiAoIWhhbmRsZSkgcmV0dXJuOyAvL25vIGxpc3RlbmVycyByZWdpc3RlcmVkXG5cbiAgaWYgKCF0eXBlKSB7XG4gICAgZm9yICh0eXBlIGluIGV2ZW50cykge1xuICAgICAgaWYgKHR5cGUgIT09ICckZGVzdHJveScpIHtcbiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuKGVsZW1lbnQsIHR5cGUsIGhhbmRsZSk7XG4gICAgICB9XG4gICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgIH1cbiAgfSBlbHNlIHtcblxuICAgIHZhciByZW1vdmVIYW5kbGVyID0gZnVuY3Rpb24odHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVyRm5zID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGlzRGVmaW5lZChmbikpIHtcbiAgICAgICAgYXJyYXlSZW1vdmUobGlzdGVuZXJGbnMgfHwgW10sIGZuKTtcbiAgICAgIH1cbiAgICAgIGlmICghKGlzRGVmaW5lZChmbikgJiYgbGlzdGVuZXJGbnMgJiYgbGlzdGVuZXJGbnMubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuKGVsZW1lbnQsIHR5cGUsIGhhbmRsZSk7XG4gICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvckVhY2godHlwZS5zcGxpdCgnICcpLCBmdW5jdGlvbih0eXBlKSB7XG4gICAgICByZW1vdmVIYW5kbGVyKHR5cGUpO1xuICAgICAgaWYgKE1PVVNFX0VWRU5UX01BUFt0eXBlXSkge1xuICAgICAgICByZW1vdmVIYW5kbGVyKE1PVVNFX0VWRU5UX01BUFt0eXBlXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlUmVtb3ZlRGF0YShlbGVtZW50LCBuYW1lKSB7XG4gIHZhciBleHBhbmRvSWQgPSBlbGVtZW50Lm5nMzM5O1xuICB2YXIgZXhwYW5kb1N0b3JlID0gZXhwYW5kb0lkICYmIGpxQ2FjaGVbZXhwYW5kb0lkXTtcblxuICBpZiAoZXhwYW5kb1N0b3JlKSB7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIGRlbGV0ZSBleHBhbmRvU3RvcmUuZGF0YVtuYW1lXTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXhwYW5kb1N0b3JlLmhhbmRsZSkge1xuICAgICAgaWYgKGV4cGFuZG9TdG9yZS5ldmVudHMuJGRlc3Ryb3kpIHtcbiAgICAgICAgZXhwYW5kb1N0b3JlLmhhbmRsZSh7fSwgJyRkZXN0cm95Jyk7XG4gICAgICB9XG4gICAgICBqcUxpdGVPZmYoZWxlbWVudCk7XG4gICAgfVxuICAgIGRlbGV0ZSBqcUNhY2hlW2V4cGFuZG9JZF07XG4gICAgZWxlbWVudC5uZzMzOSA9IHVuZGVmaW5lZDsgLy8gZG9uJ3QgZGVsZXRlIERPTSBleHBhbmRvcy4gSUUgYW5kIENocm9tZSBkb24ndCBsaWtlIGl0XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgY3JlYXRlSWZOZWNlc3NhcnkpIHtcbiAgdmFyIGV4cGFuZG9JZCA9IGVsZW1lbnQubmczMzksXG4gICAgICBleHBhbmRvU3RvcmUgPSBleHBhbmRvSWQgJiYganFDYWNoZVtleHBhbmRvSWRdO1xuXG4gIGlmIChjcmVhdGVJZk5lY2Vzc2FyeSAmJiAhZXhwYW5kb1N0b3JlKSB7XG4gICAgZWxlbWVudC5uZzMzOSA9IGV4cGFuZG9JZCA9IGpxTmV4dElkKCk7XG4gICAgZXhwYW5kb1N0b3JlID0ganFDYWNoZVtleHBhbmRvSWRdID0ge2V2ZW50czoge30sIGRhdGE6IHt9LCBoYW5kbGU6IHVuZGVmaW5lZH07XG4gIH1cblxuICByZXR1cm4gZXhwYW5kb1N0b3JlO1xufVxuXG5cbmZ1bmN0aW9uIGpxTGl0ZURhdGEoZWxlbWVudCwga2V5LCB2YWx1ZSkge1xuICBpZiAoanFMaXRlQWNjZXB0c0RhdGEoZWxlbWVudCkpIHtcblxuICAgIHZhciBpc1NpbXBsZVNldHRlciA9IGlzRGVmaW5lZCh2YWx1ZSk7XG4gICAgdmFyIGlzU2ltcGxlR2V0dGVyID0gIWlzU2ltcGxlU2V0dGVyICYmIGtleSAmJiAhaXNPYmplY3Qoa2V5KTtcbiAgICB2YXIgbWFzc0dldHRlciA9ICFrZXk7XG4gICAgdmFyIGV4cGFuZG9TdG9yZSA9IGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAhaXNTaW1wbGVHZXR0ZXIpO1xuICAgIHZhciBkYXRhID0gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZS5kYXRhO1xuXG4gICAgaWYgKGlzU2ltcGxlU2V0dGVyKSB7IC8vIGRhdGEoJ2tleScsIHZhbHVlKVxuICAgICAgZGF0YVtrZXldID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChtYXNzR2V0dGVyKSB7ICAvLyBkYXRhKClcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNTaW1wbGVHZXR0ZXIpIHsgLy8gZGF0YSgna2V5JylcbiAgICAgICAgICAvLyBkb24ndCBmb3JjZSBjcmVhdGlvbiBvZiBleHBhbmRvU3RvcmUgaWYgaXQgZG9lc24ndCBleGlzdCB5ZXRcbiAgICAgICAgICByZXR1cm4gZGF0YSAmJiBkYXRhW2tleV07XG4gICAgICAgIH0gZWxzZSB7IC8vIG1hc3Mtc2V0dGVyOiBkYXRhKHtrZXkxOiB2YWwxLCBrZXkyOiB2YWwyfSlcbiAgICAgICAgICBleHRlbmQoZGF0YSwga2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVIYXNDbGFzcyhlbGVtZW50LCBzZWxlY3Rvcikge1xuICBpZiAoIWVsZW1lbnQuZ2V0QXR0cmlidXRlKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiAoKFwiIFwiICsgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiKS5yZXBsYWNlKC9bXFxuXFx0XS9nLCBcIiBcIikuXG4gICAgICBpbmRleE9mKFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIikgPiAtMSk7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZVJlbW92ZUNsYXNzKGVsZW1lbnQsIGNzc0NsYXNzZXMpIHtcbiAgaWYgKGNzc0NsYXNzZXMgJiYgZWxlbWVudC5zZXRBdHRyaWJ1dGUpIHtcbiAgICBmb3JFYWNoKGNzc0NsYXNzZXMuc3BsaXQoJyAnKSwgZnVuY3Rpb24oY3NzQ2xhc3MpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIHRyaW0oXG4gICAgICAgICAgKFwiIFwiICsgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiKVxuICAgICAgICAgIC5yZXBsYWNlKC9bXFxuXFx0XS9nLCBcIiBcIilcbiAgICAgICAgICAucmVwbGFjZShcIiBcIiArIHRyaW0oY3NzQ2xhc3MpICsgXCIgXCIsIFwiIFwiKSlcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlQWRkQ2xhc3MoZWxlbWVudCwgY3NzQ2xhc3Nlcykge1xuICBpZiAoY3NzQ2xhc3NlcyAmJiBlbGVtZW50LnNldEF0dHJpYnV0ZSkge1xuICAgIHZhciBleGlzdGluZ0NsYXNzZXMgPSAoJyAnICsgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArICcgJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvW1xcblxcdF0vZywgXCIgXCIpO1xuXG4gICAgZm9yRWFjaChjc3NDbGFzc2VzLnNwbGl0KCcgJyksIGZ1bmN0aW9uKGNzc0NsYXNzKSB7XG4gICAgICBjc3NDbGFzcyA9IHRyaW0oY3NzQ2xhc3MpO1xuICAgICAgaWYgKGV4aXN0aW5nQ2xhc3Nlcy5pbmRleE9mKCcgJyArIGNzc0NsYXNzICsgJyAnKSA9PT0gLTEpIHtcbiAgICAgICAgZXhpc3RpbmdDbGFzc2VzICs9IGNzc0NsYXNzICsgJyAnO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdHJpbShleGlzdGluZ0NsYXNzZXMpKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGpxTGl0ZUFkZE5vZGVzKHJvb3QsIGVsZW1lbnRzKSB7XG4gIC8vIFRISVMgQ09ERSBJUyBWRVJZIEhPVC4gRG9uJ3QgbWFrZSBjaGFuZ2VzIHdpdGhvdXQgYmVuY2htYXJraW5nLlxuXG4gIGlmIChlbGVtZW50cykge1xuXG4gICAgLy8gaWYgYSBOb2RlICh0aGUgbW9zdCBjb21tb24gY2FzZSlcbiAgICBpZiAoZWxlbWVudHMubm9kZVR5cGUpIHtcbiAgICAgIHJvb3Rbcm9vdC5sZW5ndGgrK10gPSBlbGVtZW50cztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuICAgICAgLy8gaWYgYW4gQXJyYXkgb3IgTm9kZUxpc3QgYW5kIG5vdCBhIFdpbmRvd1xuICAgICAgaWYgKHR5cGVvZiBsZW5ndGggPT09ICdudW1iZXInICYmIGVsZW1lbnRzLndpbmRvdyAhPT0gZWxlbWVudHMpIHtcbiAgICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJvb3Rbcm9vdC5sZW5ndGgrK10gPSBlbGVtZW50c1tpXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3Rbcm9vdC5sZW5ndGgrK10gPSBlbGVtZW50cztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBqcUxpdGVDb250cm9sbGVyKGVsZW1lbnQsIG5hbWUpIHtcbiAgcmV0dXJuIGpxTGl0ZUluaGVyaXRlZERhdGEoZWxlbWVudCwgJyQnICsgKG5hbWUgfHwgJ25nQ29udHJvbGxlcicpICsgJ0NvbnRyb2xsZXInKTtcbn1cblxuZnVuY3Rpb24ganFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LCBuYW1lLCB2YWx1ZSkge1xuICAvLyBpZiBlbGVtZW50IGlzIHRoZSBkb2N1bWVudCBvYmplY3Qgd29yayB3aXRoIHRoZSBodG1sIGVsZW1lbnQgaW5zdGVhZFxuICAvLyB0aGlzIG1ha2VzICQoZG9jdW1lbnQpLnNjb3BlKCkgcG9zc2libGVcbiAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT0gTk9ERV9UWVBFX0RPQ1VNRU5UKSB7XG4gICAgZWxlbWVudCA9IGVsZW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG4gIHZhciBuYW1lcyA9IGlzQXJyYXkobmFtZSkgPyBuYW1lIDogW25hbWVdO1xuXG4gIHdoaWxlIChlbGVtZW50KSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gbmFtZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSA9IGpxTGl0ZS5kYXRhKGVsZW1lbnQsIG5hbWVzW2ldKSkpIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvLyBJZiBkZWFsaW5nIHdpdGggYSBkb2N1bWVudCBmcmFnbWVudCBub2RlIHdpdGggYSBob3N0IGVsZW1lbnQsIGFuZCBubyBwYXJlbnQsIHVzZSB0aGUgaG9zdFxuICAgIC8vIGVsZW1lbnQgYXMgdGhlIHBhcmVudC4gVGhpcyBlbmFibGVzIGRpcmVjdGl2ZXMgd2l0aGluIGEgU2hhZG93IERPTSBvciBwb2x5ZmlsbGVkIFNoYWRvdyBET01cbiAgICAvLyB0byBsb29rdXAgcGFyZW50IGNvbnRyb2xsZXJzLlxuICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGUgfHwgKGVsZW1lbnQubm9kZVR5cGUgPT09IE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVCAmJiBlbGVtZW50Lmhvc3QpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUVtcHR5KGVsZW1lbnQpIHtcbiAganFMaXRlRGVhbG9jKGVsZW1lbnQsIHRydWUpO1xuICB3aGlsZSAoZWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgZWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50LmZpcnN0Q2hpbGQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZVJlbW92ZShlbGVtZW50LCBrZWVwRGF0YSkge1xuICBpZiAoIWtlZXBEYXRhKSBqcUxpdGVEZWFsb2MoZWxlbWVudCk7XG4gIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZChlbGVtZW50KTtcbn1cblxuXG5mdW5jdGlvbiBqcUxpdGVEb2N1bWVudExvYWRlZChhY3Rpb24sIHdpbikge1xuICB3aW4gPSB3aW4gfHwgd2luZG93O1xuICBpZiAod2luLmRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAvLyBGb3JjZSB0aGUgYWN0aW9uIHRvIGJlIHJ1biBhc3luYyBmb3IgY29uc2lzdGVudCBiZWhhdmlvdXJcbiAgICAvLyBmcm9tIHRoZSBhY3Rpb24ncyBwb2ludCBvZiB2aWV3XG4gICAgLy8gaS5lLiBpdCB3aWxsIGRlZmluaXRlbHkgbm90IGJlIGluIGEgJGFwcGx5XG4gICAgd2luLnNldFRpbWVvdXQoYWN0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBObyBuZWVkIHRvIHVuYmluZCB0aGlzIGhhbmRsZXIgYXMgbG9hZCBpcyBvbmx5IGV2ZXIgY2FsbGVkIG9uY2VcbiAgICBqcUxpdGUod2luKS5vbignbG9hZCcsIGFjdGlvbik7XG4gIH1cbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBGdW5jdGlvbnMgd2hpY2ggYXJlIGRlY2xhcmVkIGRpcmVjdGx5LlxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG52YXIgSlFMaXRlUHJvdG90eXBlID0gSlFMaXRlLnByb3RvdHlwZSA9IHtcbiAgcmVhZHk6IGZ1bmN0aW9uKGZuKSB7XG4gICAgdmFyIGZpcmVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiB0cmlnZ2VyKCkge1xuICAgICAgaWYgKGZpcmVkKSByZXR1cm47XG4gICAgICBmaXJlZCA9IHRydWU7XG4gICAgICBmbigpO1xuICAgIH1cblxuICAgIC8vIGNoZWNrIGlmIGRvY3VtZW50IGlzIGFscmVhZHkgbG9hZGVkXG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgIHNldFRpbWVvdXQodHJpZ2dlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub24oJ0RPTUNvbnRlbnRMb2FkZWQnLCB0cmlnZ2VyKTsgLy8gd29ya3MgZm9yIG1vZGVybiBicm93c2VycyBhbmQgSUU5XG4gICAgICAvLyB3ZSBjYW4gbm90IHVzZSBqcUxpdGUgc2luY2Ugd2UgYXJlIG5vdCBkb25lIGxvYWRpbmcgYW5kIGpRdWVyeSBjb3VsZCBiZSBsb2FkZWQgbGF0ZXIuXG4gICAgICAvLyBqc2hpbnQgLVcwNjRcbiAgICAgIEpRTGl0ZSh3aW5kb3cpLm9uKCdsb2FkJywgdHJpZ2dlcik7IC8vIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQgZm9yIG90aGVyc1xuICAgICAgLy8ganNoaW50ICtXMDY0XG4gICAgfVxuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gW107XG4gICAgZm9yRWFjaCh0aGlzLCBmdW5jdGlvbihlKSB7IHZhbHVlLnB1c2goJycgKyBlKTt9KTtcbiAgICByZXR1cm4gJ1snICsgdmFsdWUuam9pbignLCAnKSArICddJztcbiAgfSxcblxuICBlcTogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIHJldHVybiAoaW5kZXggPj0gMCkgPyBqcUxpdGUodGhpc1tpbmRleF0pIDoganFMaXRlKHRoaXNbdGhpcy5sZW5ndGggKyBpbmRleF0pO1xuICB9LFxuXG4gIGxlbmd0aDogMCxcbiAgcHVzaDogcHVzaCxcbiAgc29ydDogW10uc29ydCxcbiAgc3BsaWNlOiBbXS5zcGxpY2Vcbn07XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRnVuY3Rpb25zIGl0ZXJhdGluZyBnZXR0ZXIvc2V0dGVycy5cbi8vIHRoZXNlIGZ1bmN0aW9ucyByZXR1cm4gc2VsZiBvbiBzZXR0ZXIgYW5kXG4vLyB2YWx1ZSBvbiBnZXQuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbnZhciBCT09MRUFOX0FUVFIgPSB7fTtcbmZvckVhY2goJ211bHRpcGxlLHNlbGVjdGVkLGNoZWNrZWQsZGlzYWJsZWQscmVhZE9ubHkscmVxdWlyZWQsb3Blbicuc3BsaXQoJywnKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgQk9PTEVBTl9BVFRSW2xvd2VyY2FzZSh2YWx1ZSldID0gdmFsdWU7XG59KTtcbnZhciBCT09MRUFOX0VMRU1FTlRTID0ge307XG5mb3JFYWNoKCdpbnB1dCxzZWxlY3Qsb3B0aW9uLHRleHRhcmVhLGJ1dHRvbixmb3JtLGRldGFpbHMnLnNwbGl0KCcsJyksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gIEJPT0xFQU5fRUxFTUVOVFNbdmFsdWVdID0gdHJ1ZTtcbn0pO1xudmFyIEFMSUFTRURfQVRUUiA9IHtcbiAgJ25nTWlubGVuZ3RoJzogJ21pbmxlbmd0aCcsXG4gICduZ01heGxlbmd0aCc6ICdtYXhsZW5ndGgnLFxuICAnbmdNaW4nOiAnbWluJyxcbiAgJ25nTWF4JzogJ21heCcsXG4gICduZ1BhdHRlcm4nOiAncGF0dGVybidcbn07XG5cbmZ1bmN0aW9uIGdldEJvb2xlYW5BdHRyTmFtZShlbGVtZW50LCBuYW1lKSB7XG4gIC8vIGNoZWNrIGRvbSBsYXN0IHNpbmNlIHdlIHdpbGwgbW9zdCBsaWtlbHkgZmFpbCBvbiBuYW1lXG4gIHZhciBib29sZWFuQXR0ciA9IEJPT0xFQU5fQVRUUltuYW1lLnRvTG93ZXJDYXNlKCldO1xuXG4gIC8vIGJvb2xlYW5BdHRyIGlzIGhlcmUgdHdpY2UgdG8gbWluaW1pemUgRE9NIGFjY2Vzc1xuICByZXR1cm4gYm9vbGVhbkF0dHIgJiYgQk9PTEVBTl9FTEVNRU5UU1tub2RlTmFtZV8oZWxlbWVudCldICYmIGJvb2xlYW5BdHRyO1xufVxuXG5mdW5jdGlvbiBnZXRBbGlhc2VkQXR0ck5hbWUobmFtZSkge1xuICByZXR1cm4gQUxJQVNFRF9BVFRSW25hbWVdO1xufVxuXG5mb3JFYWNoKHtcbiAgZGF0YToganFMaXRlRGF0YSxcbiAgcmVtb3ZlRGF0YToganFMaXRlUmVtb3ZlRGF0YSxcbiAgaGFzRGF0YToganFMaXRlSGFzRGF0YVxufSwgZnVuY3Rpb24oZm4sIG5hbWUpIHtcbiAgSlFMaXRlW25hbWVdID0gZm47XG59KTtcblxuZm9yRWFjaCh7XG4gIGRhdGE6IGpxTGl0ZURhdGEsXG4gIGluaGVyaXRlZERhdGE6IGpxTGl0ZUluaGVyaXRlZERhdGEsXG5cbiAgc2NvcGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAvLyBDYW4ndCB1c2UganFMaXRlRGF0YSBoZXJlIGRpcmVjdGx5IHNvIHdlIHN0YXkgY29tcGF0aWJsZSB3aXRoIGpRdWVyeSFcbiAgICByZXR1cm4ganFMaXRlLmRhdGEoZWxlbWVudCwgJyRzY29wZScpIHx8IGpxTGl0ZUluaGVyaXRlZERhdGEoZWxlbWVudC5wYXJlbnROb2RlIHx8IGVsZW1lbnQsIFsnJGlzb2xhdGVTY29wZScsICckc2NvcGUnXSk7XG4gIH0sXG5cbiAgaXNvbGF0ZVNjb3BlOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgLy8gQ2FuJ3QgdXNlIGpxTGl0ZURhdGEgaGVyZSBkaXJlY3RseSBzbyB3ZSBzdGF5IGNvbXBhdGlibGUgd2l0aCBqUXVlcnkhXG4gICAgcmV0dXJuIGpxTGl0ZS5kYXRhKGVsZW1lbnQsICckaXNvbGF0ZVNjb3BlJykgfHwganFMaXRlLmRhdGEoZWxlbWVudCwgJyRpc29sYXRlU2NvcGVOb1RlbXBsYXRlJyk7XG4gIH0sXG5cbiAgY29udHJvbGxlcjoganFMaXRlQ29udHJvbGxlcixcblxuICBpbmplY3RvcjogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHJldHVybiBqcUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsICckaW5qZWN0b3InKTtcbiAgfSxcblxuICByZW1vdmVBdHRyOiBmdW5jdGlvbihlbGVtZW50LCBuYW1lKSB7XG4gICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH0sXG5cbiAgaGFzQ2xhc3M6IGpxTGl0ZUhhc0NsYXNzLFxuXG4gIGNzczogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gY2FtZWxDYXNlKG5hbWUpO1xuXG4gICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIGVsZW1lbnQuc3R5bGVbbmFtZV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuc3R5bGVbbmFtZV07XG4gICAgfVxuICB9LFxuXG4gIGF0dHI6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIG5vZGVUeXBlID0gZWxlbWVudC5ub2RlVHlwZTtcbiAgICBpZiAobm9kZVR5cGUgPT09IE5PREVfVFlQRV9URVhUIHx8IG5vZGVUeXBlID09PSBOT0RFX1RZUEVfQVRUUklCVVRFIHx8IG5vZGVUeXBlID09PSBOT0RFX1RZUEVfQ09NTUVOVCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgbG93ZXJjYXNlZE5hbWUgPSBsb3dlcmNhc2UobmFtZSk7XG4gICAgaWYgKEJPT0xFQU5fQVRUUltsb3dlcmNhc2VkTmFtZV0pIHtcbiAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgIGlmICghIXZhbHVlKSB7XG4gICAgICAgICAgZWxlbWVudFtuYW1lXSA9IHRydWU7XG4gICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgbG93ZXJjYXNlZE5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsZW1lbnRbbmFtZV0gPSBmYWxzZTtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShsb3dlcmNhc2VkTmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAoZWxlbWVudFtuYW1lXSB8fFxuICAgICAgICAgICAgICAgICAoZWxlbWVudC5hdHRyaWJ1dGVzLmdldE5hbWVkSXRlbShuYW1lKSB8fCBub29wKS5zcGVjaWZpZWQpXG4gICAgICAgICAgICAgICA/IGxvd2VyY2FzZWROYW1lXG4gICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKSB7XG4gICAgICAvLyB0aGUgZXh0cmEgYXJndW1lbnQgXCIyXCIgaXMgdG8gZ2V0IHRoZSByaWdodCB0aGluZyBmb3IgYS5ocmVmIGluIElFLCBzZWUgalF1ZXJ5IGNvZGVcbiAgICAgIC8vIHNvbWUgZWxlbWVudHMgKGUuZy4gRG9jdW1lbnQpIGRvbid0IGhhdmUgZ2V0IGF0dHJpYnV0ZSwgc28gcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgdmFyIHJldCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUsIDIpO1xuICAgICAgLy8gbm9ybWFsaXplIG5vbi1leGlzdGluZyBhdHRyaWJ1dGVzIHRvIHVuZGVmaW5lZCAoYXMgalF1ZXJ5KVxuICAgICAgcmV0dXJuIHJldCA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcbiAgICB9XG4gIH0sXG5cbiAgcHJvcDogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgZWxlbWVudFtuYW1lXSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZWxlbWVudFtuYW1lXTtcbiAgICB9XG4gIH0sXG5cbiAgdGV4dDogKGZ1bmN0aW9uKCkge1xuICAgIGdldFRleHQuJGR2ID0gJyc7XG4gICAgcmV0dXJuIGdldFRleHQ7XG5cbiAgICBmdW5jdGlvbiBnZXRUZXh0KGVsZW1lbnQsIHZhbHVlKSB7XG4gICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgIHZhciBub2RlVHlwZSA9IGVsZW1lbnQubm9kZVR5cGU7XG4gICAgICAgIHJldHVybiAobm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UIHx8IG5vZGVUeXBlID09PSBOT0RFX1RZUEVfVEVYVCkgPyBlbGVtZW50LnRleHRDb250ZW50IDogJyc7XG4gICAgICB9XG4gICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgfVxuICB9KSgpLFxuXG4gIHZhbDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWUpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICBpZiAoZWxlbWVudC5tdWx0aXBsZSAmJiBub2RlTmFtZV8oZWxlbWVudCkgPT09ICdzZWxlY3QnKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yRWFjaChlbGVtZW50Lm9wdGlvbnMsIGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9wdGlvbi52YWx1ZSB8fCBvcHRpb24udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDAgPyBudWxsIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVsZW1lbnQudmFsdWU7XG4gICAgfVxuICAgIGVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgfSxcblxuICBodG1sOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZSkge1xuICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBlbGVtZW50LmlubmVySFRNTDtcbiAgICB9XG4gICAganFMaXRlRGVhbG9jKGVsZW1lbnQsIHRydWUpO1xuICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gdmFsdWU7XG4gIH0sXG5cbiAgZW1wdHk6IGpxTGl0ZUVtcHR5XG59LCBmdW5jdGlvbihmbiwgbmFtZSkge1xuICAvKipcbiAgICogUHJvcGVydGllczogd3JpdGVzIHJldHVybiBzZWxlY3Rpb24sIHJlYWRzIHJldHVybiBmaXJzdCB2YWx1ZVxuICAgKi9cbiAgSlFMaXRlLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKGFyZzEsIGFyZzIpIHtcbiAgICB2YXIgaSwga2V5O1xuICAgIHZhciBub2RlQ291bnQgPSB0aGlzLmxlbmd0aDtcblxuICAgIC8vIGpxTGl0ZUhhc0NsYXNzIGhhcyBvbmx5IHR3byBhcmd1bWVudHMsIGJ1dCBpcyBhIGdldHRlci1vbmx5IGZuLCBzbyB3ZSBuZWVkIHRvIHNwZWNpYWwtY2FzZSBpdFxuICAgIC8vIGluIGEgd2F5IHRoYXQgc3Vydml2ZXMgbWluaWZpY2F0aW9uLlxuICAgIC8vIGpxTGl0ZUVtcHR5IHRha2VzIG5vIGFyZ3VtZW50cyBidXQgaXMgYSBzZXR0ZXIuXG4gICAgaWYgKGZuICE9PSBqcUxpdGVFbXB0eSAmJlxuICAgICAgICAoaXNVbmRlZmluZWQoKGZuLmxlbmd0aCA9PSAyICYmIChmbiAhPT0ganFMaXRlSGFzQ2xhc3MgJiYgZm4gIT09IGpxTGl0ZUNvbnRyb2xsZXIpKSA/IGFyZzEgOiBhcmcyKSkpIHtcbiAgICAgIGlmIChpc09iamVjdChhcmcxKSkge1xuXG4gICAgICAgIC8vIHdlIGFyZSBhIHdyaXRlLCBidXQgdGhlIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSB0aGUga2V5L3ZhbHVlc1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbm9kZUNvdW50OyBpKyspIHtcbiAgICAgICAgICBpZiAoZm4gPT09IGpxTGl0ZURhdGEpIHtcbiAgICAgICAgICAgIC8vIGRhdGEoKSB0YWtlcyB0aGUgd2hvbGUgb2JqZWN0IGluIGpRdWVyeVxuICAgICAgICAgICAgZm4odGhpc1tpXSwgYXJnMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoa2V5IGluIGFyZzEpIHtcbiAgICAgICAgICAgICAgZm4odGhpc1tpXSwga2V5LCBhcmcxW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyByZXR1cm4gc2VsZiBmb3IgY2hhaW5pbmdcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB3ZSBhcmUgYSByZWFkLCBzbyByZWFkIHRoZSBmaXJzdCBjaGlsZC5cbiAgICAgICAgLy8gVE9ETzogZG8gd2Ugc3RpbGwgbmVlZCB0aGlzP1xuICAgICAgICB2YXIgdmFsdWUgPSBmbi4kZHY7XG4gICAgICAgIC8vIE9ubHkgaWYgd2UgaGF2ZSAkZHYgZG8gd2UgaXRlcmF0ZSBvdmVyIGFsbCwgb3RoZXJ3aXNlIGl0IGlzIGp1c3QgdGhlIGZpcnN0IGVsZW1lbnQuXG4gICAgICAgIHZhciBqaiA9IChpc1VuZGVmaW5lZCh2YWx1ZSkpID8gTWF0aC5taW4obm9kZUNvdW50LCAxKSA6IG5vZGVDb3VudDtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBqajsgaisrKSB7XG4gICAgICAgICAgdmFyIG5vZGVWYWx1ZSA9IGZuKHRoaXNbal0sIGFyZzEsIGFyZzIpO1xuICAgICAgICAgIHZhbHVlID0gdmFsdWUgPyB2YWx1ZSArIG5vZGVWYWx1ZSA6IG5vZGVWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHdlIGFyZSBhIHdyaXRlLCBzbyBhcHBseSB0byBhbGwgY2hpbGRyZW5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBub2RlQ291bnQ7IGkrKykge1xuICAgICAgICBmbih0aGlzW2ldLCBhcmcxLCBhcmcyKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzZWxmIGZvciBjaGFpbmluZ1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50SGFuZGxlcihlbGVtZW50LCBldmVudHMpIHtcbiAgdmFyIGV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50LCB0eXBlKSB7XG4gICAgLy8galF1ZXJ5IHNwZWNpZmljIGFwaVxuICAgIGV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQ7XG4gICAgfTtcblxuICAgIHZhciBldmVudEZucyA9IGV2ZW50c1t0eXBlIHx8IGV2ZW50LnR5cGVdO1xuICAgIHZhciBldmVudEZuc0xlbmd0aCA9IGV2ZW50Rm5zID8gZXZlbnRGbnMubGVuZ3RoIDogMDtcblxuICAgIGlmICghZXZlbnRGbnNMZW5ndGgpIHJldHVybjtcblxuICAgIGlmIChpc1VuZGVmaW5lZChldmVudC5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQpKSB7XG4gICAgICB2YXIgb3JpZ2luYWxTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gPSBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb247XG4gICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZXZlbnQuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3JpZ2luYWxTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICBvcmlnaW5hbFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbi5jYWxsKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV2ZW50LmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9PT0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgLy8gU29tZSBldmVudHMgaGF2ZSBzcGVjaWFsIGhhbmRsZXJzIHRoYXQgd3JhcCB0aGUgcmVhbCBoYW5kbGVyXG4gICAgdmFyIGhhbmRsZXJXcmFwcGVyID0gZXZlbnRGbnMuc3BlY2lhbEhhbmRsZXJXcmFwcGVyIHx8IGRlZmF1bHRIYW5kbGVyV3JhcHBlcjtcblxuICAgIC8vIENvcHkgZXZlbnQgaGFuZGxlcnMgaW4gY2FzZSBldmVudCBoYW5kbGVycyBhcnJheSBpcyBtb2RpZmllZCBkdXJpbmcgZXhlY3V0aW9uLlxuICAgIGlmICgoZXZlbnRGbnNMZW5ndGggPiAxKSkge1xuICAgICAgZXZlbnRGbnMgPSBzaGFsbG93Q29weShldmVudEZucyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudEZuc0xlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgaGFuZGxlcldyYXBwZXIoZWxlbWVudCwgZXZlbnQsIGV2ZW50Rm5zW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2sgZm9yIGFuZ3VsYXJNb2Nrcy9jbGVhckRhdGFDYWNoZSB0aGF0IG1ha2VzIGl0IHBvc3NpYmxlIHRvIGRlcmVnaXN0ZXIgYWxsXG4gIC8vICAgICAgIGV2ZW50cyBvbiBgZWxlbWVudGBcbiAgZXZlbnRIYW5kbGVyLmVsZW0gPSBlbGVtZW50O1xuICByZXR1cm4gZXZlbnRIYW5kbGVyO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0SGFuZGxlcldyYXBwZXIoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIpIHtcbiAgaGFuZGxlci5jYWxsKGVsZW1lbnQsIGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gc3BlY2lhbE1vdXNlSGFuZGxlcldyYXBwZXIodGFyZ2V0LCBldmVudCwgaGFuZGxlcikge1xuICAvLyBSZWZlciB0byBqUXVlcnkncyBpbXBsZW1lbnRhdGlvbiBvZiBtb3VzZWVudGVyICYgbW91c2VsZWF2ZVxuICAvLyBSZWFkIGFib3V0IG1vdXNlZW50ZXIgYW5kIG1vdXNlbGVhdmU6XG4gIC8vIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvanMvZXZlbnRzX21vdXNlLmh0bWwjbGluazhcbiAgdmFyIHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAvLyBGb3IgbW91c2VudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG4gIC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG4gIGlmICghcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqcUxpdGVDb250YWlucy5jYWxsKHRhcmdldCwgcmVsYXRlZCkpKSB7XG4gICAgaGFuZGxlci5jYWxsKHRhcmdldCwgZXZlbnQpO1xuICB9XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRnVuY3Rpb25zIGl0ZXJhdGluZyB0cmF2ZXJzYWwuXG4vLyBUaGVzZSBmdW5jdGlvbnMgY2hhaW4gcmVzdWx0cyBpbnRvIGEgc2luZ2xlXG4vLyBzZWxlY3Rvci5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuZm9yRWFjaCh7XG4gIHJlbW92ZURhdGE6IGpxTGl0ZVJlbW92ZURhdGEsXG5cbiAgb246IGZ1bmN0aW9uIGpxTGl0ZU9uKGVsZW1lbnQsIHR5cGUsIGZuLCB1bnN1cHBvcnRlZCkge1xuICAgIGlmIChpc0RlZmluZWQodW5zdXBwb3J0ZWQpKSB0aHJvdyBqcUxpdGVNaW5FcnIoJ29uYXJncycsICdqcUxpdGUjb24oKSBkb2VzIG5vdCBzdXBwb3J0IHRoZSBgc2VsZWN0b3JgIG9yIGBldmVudERhdGFgIHBhcmFtZXRlcnMnKTtcblxuICAgIC8vIERvIG5vdCBhZGQgZXZlbnQgaGFuZGxlcnMgdG8gbm9uLWVsZW1lbnRzIGJlY2F1c2UgdGhleSB3aWxsIG5vdCBiZSBjbGVhbmVkIHVwLlxuICAgIGlmICghanFMaXRlQWNjZXB0c0RhdGEoZWxlbWVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZXhwYW5kb1N0b3JlID0ganFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQsIHRydWUpO1xuICAgIHZhciBldmVudHMgPSBleHBhbmRvU3RvcmUuZXZlbnRzO1xuICAgIHZhciBoYW5kbGUgPSBleHBhbmRvU3RvcmUuaGFuZGxlO1xuXG4gICAgaWYgKCFoYW5kbGUpIHtcbiAgICAgIGhhbmRsZSA9IGV4cGFuZG9TdG9yZS5oYW5kbGUgPSBjcmVhdGVFdmVudEhhbmRsZXIoZWxlbWVudCwgZXZlbnRzKTtcbiAgICB9XG5cbiAgICAvLyBodHRwOi8vanNwZXJmLmNvbS9zdHJpbmctaW5kZXhvZi12cy1zcGxpdFxuICAgIHZhciB0eXBlcyA9IHR5cGUuaW5kZXhPZignICcpID49IDAgPyB0eXBlLnNwbGl0KCcgJykgOiBbdHlwZV07XG4gICAgdmFyIGkgPSB0eXBlcy5sZW5ndGg7XG5cbiAgICB2YXIgYWRkSGFuZGxlciA9IGZ1bmN0aW9uKHR5cGUsIHNwZWNpYWxIYW5kbGVyV3JhcHBlciwgbm9FdmVudExpc3RlbmVyKSB7XG4gICAgICB2YXIgZXZlbnRGbnMgPSBldmVudHNbdHlwZV07XG5cbiAgICAgIGlmICghZXZlbnRGbnMpIHtcbiAgICAgICAgZXZlbnRGbnMgPSBldmVudHNbdHlwZV0gPSBbXTtcbiAgICAgICAgZXZlbnRGbnMuc3BlY2lhbEhhbmRsZXJXcmFwcGVyID0gc3BlY2lhbEhhbmRsZXJXcmFwcGVyO1xuICAgICAgICBpZiAodHlwZSAhPT0gJyRkZXN0cm95JyAmJiAhbm9FdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lckZuKGVsZW1lbnQsIHR5cGUsIGhhbmRsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZXZlbnRGbnMucHVzaChmbik7XG4gICAgfTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHR5cGUgPSB0eXBlc1tpXTtcbiAgICAgIGlmIChNT1VTRV9FVkVOVF9NQVBbdHlwZV0pIHtcbiAgICAgICAgYWRkSGFuZGxlcihNT1VTRV9FVkVOVF9NQVBbdHlwZV0sIHNwZWNpYWxNb3VzZUhhbmRsZXJXcmFwcGVyKTtcbiAgICAgICAgYWRkSGFuZGxlcih0eXBlLCB1bmRlZmluZWQsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWRkSGFuZGxlcih0eXBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgb2ZmOiBqcUxpdGVPZmYsXG5cbiAgb25lOiBmdW5jdGlvbihlbGVtZW50LCB0eXBlLCBmbikge1xuICAgIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCk7XG5cbiAgICAvL2FkZCB0aGUgbGlzdGVuZXIgdHdpY2Ugc28gdGhhdCB3aGVuIGl0IGlzIGNhbGxlZFxuICAgIC8veW91IGNhbiByZW1vdmUgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIGFuZCBzdGlsbCBiZVxuICAgIC8vYWJsZSB0byBjYWxsIGVsZW1lbnQub2ZmKGV2LCBmbikgbm9ybWFsbHlcbiAgICBlbGVtZW50Lm9uKHR5cGUsIGZ1bmN0aW9uIG9uRm4oKSB7XG4gICAgICBlbGVtZW50Lm9mZih0eXBlLCBmbik7XG4gICAgICBlbGVtZW50Lm9mZih0eXBlLCBvbkZuKTtcbiAgICB9KTtcbiAgICBlbGVtZW50Lm9uKHR5cGUsIGZuKTtcbiAgfSxcblxuICByZXBsYWNlV2l0aDogZnVuY3Rpb24oZWxlbWVudCwgcmVwbGFjZU5vZGUpIHtcbiAgICB2YXIgaW5kZXgsIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICBqcUxpdGVEZWFsb2MoZWxlbWVudCk7XG4gICAgZm9yRWFjaChuZXcgSlFMaXRlKHJlcGxhY2VOb2RlKSwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKGluZGV4KSB7XG4gICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgaW5kZXgubmV4dFNpYmxpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50LnJlcGxhY2VDaGlsZChub2RlLCBlbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIGluZGV4ID0gbm9kZTtcbiAgICB9KTtcbiAgfSxcblxuICBjaGlsZHJlbjogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuICAgIGZvckVhY2goZWxlbWVudC5jaGlsZE5vZGVzLCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0VMRU1FTlQpIHtcbiAgICAgICAgY2hpbGRyZW4ucHVzaChlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH0sXG5cbiAgY29udGVudHM6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5jb250ZW50RG9jdW1lbnQgfHwgZWxlbWVudC5jaGlsZE5vZGVzIHx8IFtdO1xuICB9LFxuXG4gIGFwcGVuZDogZnVuY3Rpb24oZWxlbWVudCwgbm9kZSkge1xuICAgIHZhciBub2RlVHlwZSA9IGVsZW1lbnQubm9kZVR5cGU7XG4gICAgaWYgKG5vZGVUeXBlICE9PSBOT0RFX1RZUEVfRUxFTUVOVCAmJiBub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0RPQ1VNRU5UX0ZSQUdNRU5UKSByZXR1cm47XG5cbiAgICBub2RlID0gbmV3IEpRTGl0ZShub2RlKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG5vZGUubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gbm9kZVtpXTtcbiAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwZW5kOiBmdW5jdGlvbihlbGVtZW50LCBub2RlKSB7XG4gICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UKSB7XG4gICAgICB2YXIgaW5kZXggPSBlbGVtZW50LmZpcnN0Q2hpbGQ7XG4gICAgICBmb3JFYWNoKG5ldyBKUUxpdGUobm9kZSksIGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgIGVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBpbmRleCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgd3JhcDogZnVuY3Rpb24oZWxlbWVudCwgd3JhcE5vZGUpIHtcbiAgICB3cmFwTm9kZSA9IGpxTGl0ZSh3cmFwTm9kZSkuZXEoMCkuY2xvbmUoKVswXTtcbiAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQod3JhcE5vZGUsIGVsZW1lbnQpO1xuICAgIH1cbiAgICB3cmFwTm9kZS5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgfSxcblxuICByZW1vdmU6IGpxTGl0ZVJlbW92ZSxcblxuICBkZXRhY2g6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICBqcUxpdGVSZW1vdmUoZWxlbWVudCwgdHJ1ZSk7XG4gIH0sXG5cbiAgYWZ0ZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIG5ld0VsZW1lbnQpIHtcbiAgICB2YXIgaW5kZXggPSBlbGVtZW50LCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgbmV3RWxlbWVudCA9IG5ldyBKUUxpdGUobmV3RWxlbWVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBuZXdFbGVtZW50Lmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIHZhciBub2RlID0gbmV3RWxlbWVudFtpXTtcbiAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgaW5kZXgubmV4dFNpYmxpbmcpO1xuICAgICAgaW5kZXggPSBub2RlO1xuICAgIH1cbiAgfSxcblxuICBhZGRDbGFzczoganFMaXRlQWRkQ2xhc3MsXG4gIHJlbW92ZUNsYXNzOiBqcUxpdGVSZW1vdmVDbGFzcyxcblxuICB0b2dnbGVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgc2VsZWN0b3IsIGNvbmRpdGlvbikge1xuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgZm9yRWFjaChzZWxlY3Rvci5zcGxpdCgnICcpLCBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICAgICAgdmFyIGNsYXNzQ29uZGl0aW9uID0gY29uZGl0aW9uO1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQoY2xhc3NDb25kaXRpb24pKSB7XG4gICAgICAgICAgY2xhc3NDb25kaXRpb24gPSAhanFMaXRlSGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICAoY2xhc3NDb25kaXRpb24gPyBqcUxpdGVBZGRDbGFzcyA6IGpxTGl0ZVJlbW92ZUNsYXNzKShlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIHBhcmVudDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgcmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVCA/IHBhcmVudCA6IG51bGw7XG4gIH0sXG5cbiAgbmV4dDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZztcbiAgfSxcblxuICBmaW5kOiBmdW5jdGlvbihlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgIGlmIChlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShzZWxlY3Rvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH0sXG5cbiAgY2xvbmU6IGpxTGl0ZUNsb25lLFxuXG4gIHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgZXh0cmFQYXJhbWV0ZXJzKSB7XG5cbiAgICB2YXIgZHVtbXlFdmVudCwgZXZlbnRGbnNDb3B5LCBoYW5kbGVyQXJncztcbiAgICB2YXIgZXZlbnROYW1lID0gZXZlbnQudHlwZSB8fCBldmVudDtcbiAgICB2YXIgZXhwYW5kb1N0b3JlID0ganFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQpO1xuICAgIHZhciBldmVudHMgPSBleHBhbmRvU3RvcmUgJiYgZXhwYW5kb1N0b3JlLmV2ZW50cztcbiAgICB2YXIgZXZlbnRGbnMgPSBldmVudHMgJiYgZXZlbnRzW2V2ZW50TmFtZV07XG5cbiAgICBpZiAoZXZlbnRGbnMpIHtcbiAgICAgIC8vIENyZWF0ZSBhIGR1bW15IGV2ZW50IHRvIHBhc3MgdG8gdGhlIGhhbmRsZXJzXG4gICAgICBkdW1teUV2ZW50ID0ge1xuICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7IHRoaXMuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7IH0sXG4gICAgICAgIGlzRGVmYXVsdFByZXZlbnRlZDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHRydWU7IH0sXG4gICAgICAgIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7IHRoaXMuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTsgfSxcbiAgICAgICAgaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPT09IHRydWU7IH0sXG4gICAgICAgIHN0b3BQcm9wYWdhdGlvbjogbm9vcCxcbiAgICAgICAgdHlwZTogZXZlbnROYW1lLFxuICAgICAgICB0YXJnZXQ6IGVsZW1lbnRcbiAgICAgIH07XG5cbiAgICAgIC8vIElmIGEgY3VzdG9tIGV2ZW50IHdhcyBwcm92aWRlZCB0aGVuIGV4dGVuZCBvdXIgZHVtbXkgZXZlbnQgd2l0aCBpdFxuICAgICAgaWYgKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgZHVtbXlFdmVudCA9IGV4dGVuZChkdW1teUV2ZW50LCBldmVudCk7XG4gICAgICB9XG5cbiAgICAgIC8vIENvcHkgZXZlbnQgaGFuZGxlcnMgaW4gY2FzZSBldmVudCBoYW5kbGVycyBhcnJheSBpcyBtb2RpZmllZCBkdXJpbmcgZXhlY3V0aW9uLlxuICAgICAgZXZlbnRGbnNDb3B5ID0gc2hhbGxvd0NvcHkoZXZlbnRGbnMpO1xuICAgICAgaGFuZGxlckFyZ3MgPSBleHRyYVBhcmFtZXRlcnMgPyBbZHVtbXlFdmVudF0uY29uY2F0KGV4dHJhUGFyYW1ldGVycykgOiBbZHVtbXlFdmVudF07XG5cbiAgICAgIGZvckVhY2goZXZlbnRGbnNDb3B5LCBmdW5jdGlvbihmbikge1xuICAgICAgICBpZiAoIWR1bW15RXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICAgIGZuLmFwcGx5KGVsZW1lbnQsIGhhbmRsZXJBcmdzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59LCBmdW5jdGlvbihmbiwgbmFtZSkge1xuICAvKipcbiAgICogY2hhaW5pbmcgZnVuY3Rpb25zXG4gICAqL1xuICBKUUxpdGUucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIHZhciB2YWx1ZTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHRoaXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IGZuKHRoaXNbaV0sIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgIC8vIGFueSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgdmFsdWUgbmVlZHMgdG8gYmUgd3JhcHBlZFxuICAgICAgICAgIHZhbHVlID0ganFMaXRlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAganFMaXRlQWRkTm9kZXModmFsdWUsIGZuKHRoaXNbaV0sIGFyZzEsIGFyZzIsIGFyZzMpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlzRGVmaW5lZCh2YWx1ZSkgPyB2YWx1ZSA6IHRoaXM7XG4gIH07XG5cbiAgLy8gYmluZCBsZWdhY3kgYmluZC91bmJpbmQgdG8gb24vb2ZmXG4gIEpRTGl0ZS5wcm90b3R5cGUuYmluZCA9IEpRTGl0ZS5wcm90b3R5cGUub247XG4gIEpRTGl0ZS5wcm90b3R5cGUudW5iaW5kID0gSlFMaXRlLnByb3RvdHlwZS5vZmY7XG59KTtcblxuXG4vLyBQcm92aWRlciBmb3IgcHJpdmF0ZSAkJGpxTGl0ZSBzZXJ2aWNlXG5mdW5jdGlvbiAkJGpxTGl0ZVByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBmdW5jdGlvbiAkJGpxTGl0ZSgpIHtcbiAgICByZXR1cm4gZXh0ZW5kKEpRTGl0ZSwge1xuICAgICAgaGFzQ2xhc3M6IGZ1bmN0aW9uKG5vZGUsIGNsYXNzZXMpIHtcbiAgICAgICAgaWYgKG5vZGUuYXR0cikgbm9kZSA9IG5vZGVbMF07XG4gICAgICAgIHJldHVybiBqcUxpdGVIYXNDbGFzcyhub2RlLCBjbGFzc2VzKTtcbiAgICAgIH0sXG4gICAgICBhZGRDbGFzczogZnVuY3Rpb24obm9kZSwgY2xhc3Nlcykge1xuICAgICAgICBpZiAobm9kZS5hdHRyKSBub2RlID0gbm9kZVswXTtcbiAgICAgICAgcmV0dXJuIGpxTGl0ZUFkZENsYXNzKG5vZGUsIGNsYXNzZXMpO1xuICAgICAgfSxcbiAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbihub2RlLCBjbGFzc2VzKSB7XG4gICAgICAgIGlmIChub2RlLmF0dHIpIG5vZGUgPSBub2RlWzBdO1xuICAgICAgICByZXR1cm4ganFMaXRlUmVtb3ZlQ2xhc3Mobm9kZSwgY2xhc3Nlcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59XG5cbi8qKlxuICogQ29tcHV0ZXMgYSBoYXNoIG9mIGFuICdvYmonLlxuICogSGFzaCBvZiBhOlxuICogIHN0cmluZyBpcyBzdHJpbmdcbiAqICBudW1iZXIgaXMgbnVtYmVyIGFzIHN0cmluZ1xuICogIG9iamVjdCBpcyBlaXRoZXIgcmVzdWx0IG9mIGNhbGxpbmcgJCRoYXNoS2V5IGZ1bmN0aW9uIG9uIHRoZSBvYmplY3Qgb3IgdW5pcXVlbHkgZ2VuZXJhdGVkIGlkLFxuICogICAgICAgICB0aGF0IGlzIGFsc28gYXNzaWduZWQgdG8gdGhlICQkaGFzaEtleSBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSBvYmpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGhhc2ggc3RyaW5nIHN1Y2ggdGhhdCB0aGUgc2FtZSBpbnB1dCB3aWxsIGhhdmUgdGhlIHNhbWUgaGFzaCBzdHJpbmcuXG4gKiAgICAgICAgIFRoZSByZXN1bHRpbmcgc3RyaW5nIGtleSBpcyBpbiAndHlwZTpoYXNoS2V5JyBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIGhhc2hLZXkob2JqLCBuZXh0VWlkRm4pIHtcbiAgdmFyIGtleSA9IG9iaiAmJiBvYmouJCRoYXNoS2V5O1xuXG4gIGlmIChrZXkpIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAga2V5ID0gb2JqLiQkaGFzaEtleSgpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9XG5cbiAgdmFyIG9ialR5cGUgPSB0eXBlb2Ygb2JqO1xuICBpZiAob2JqVHlwZSA9PSAnZnVuY3Rpb24nIHx8IChvYmpUeXBlID09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbCkpIHtcbiAgICBrZXkgPSBvYmouJCRoYXNoS2V5ID0gb2JqVHlwZSArICc6JyArIChuZXh0VWlkRm4gfHwgbmV4dFVpZCkoKTtcbiAgfSBlbHNlIHtcbiAgICBrZXkgPSBvYmpUeXBlICsgJzonICsgb2JqO1xuICB9XG5cbiAgcmV0dXJuIGtleTtcbn1cblxuLyoqXG4gKiBIYXNoTWFwIHdoaWNoIGNhbiB1c2Ugb2JqZWN0cyBhcyBrZXlzXG4gKi9cbmZ1bmN0aW9uIEhhc2hNYXAoYXJyYXksIGlzb2xhdGVkVWlkKSB7XG4gIGlmIChpc29sYXRlZFVpZCkge1xuICAgIHZhciB1aWQgPSAwO1xuICAgIHRoaXMubmV4dFVpZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICsrdWlkO1xuICAgIH07XG4gIH1cbiAgZm9yRWFjaChhcnJheSwgdGhpcy5wdXQsIHRoaXMpO1xufVxuSGFzaE1hcC5wcm90b3R5cGUgPSB7XG4gIC8qKlxuICAgKiBTdG9yZSBrZXkgdmFsdWUgcGFpclxuICAgKiBAcGFyYW0ga2V5IGtleSB0byBzdG9yZSBjYW4gYmUgYW55IHR5cGVcbiAgICogQHBhcmFtIHZhbHVlIHZhbHVlIHRvIHN0b3JlIGNhbiBiZSBhbnkgdHlwZVxuICAgKi9cbiAgcHV0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdGhpc1toYXNoS2V5KGtleSwgdGhpcy5uZXh0VWlkKV0gPSB2YWx1ZTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIGtleVxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSB0aGUgdmFsdWUgZm9yIHRoZSBrZXlcbiAgICovXG4gIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIHRoaXNbaGFzaEtleShrZXksIHRoaXMubmV4dFVpZCldO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIGtleS92YWx1ZSBwYWlyXG4gICAqIEBwYXJhbSBrZXlcbiAgICovXG4gIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIHZhbHVlID0gdGhpc1trZXkgPSBoYXNoS2V5KGtleSwgdGhpcy5uZXh0VWlkKV07XG4gICAgZGVsZXRlIHRoaXNba2V5XTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn07XG5cbnZhciAkJEhhc2hNYXBQcm92aWRlciA9IFtmdW5jdGlvbigpIHtcbiAgdGhpcy4kZ2V0ID0gW2Z1bmN0aW9uKCkge1xuICAgIHJldHVybiBIYXNoTWFwO1xuICB9XTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG1vZHVsZSBuZ1xuICogQG5hbWUgYW5ndWxhci5pbmplY3RvclxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYW4gaW5qZWN0b3Igb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgZm9yIHJldHJpZXZpbmcgc2VydmljZXMgYXMgd2VsbCBhcyBmb3JcbiAqIGRlcGVuZGVuY3kgaW5qZWN0aW9uIChzZWUge0BsaW5rIGd1aWRlL2RpIGRlcGVuZGVuY3kgaW5qZWN0aW9ufSkuXG4gKlxuICogQHBhcmFtIHtBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gbW9kdWxlcyBBIGxpc3Qgb2YgbW9kdWxlIGZ1bmN0aW9ucyBvciB0aGVpciBhbGlhc2VzLiBTZWVcbiAqICAgICB7QGxpbmsgYW5ndWxhci5tb2R1bGV9LiBUaGUgYG5nYCBtb2R1bGUgbXVzdCBiZSBleHBsaWNpdGx5IGFkZGVkLlxuICogQHBhcmFtIHtib29sZWFuPX0gW3N0cmljdERpPWZhbHNlXSBXaGV0aGVyIHRoZSBpbmplY3RvciBzaG91bGQgYmUgaW4gc3RyaWN0IG1vZGUsIHdoaWNoXG4gKiAgICAgZGlzYWxsb3dzIGFyZ3VtZW50IG5hbWUgYW5ub3RhdGlvbiBpbmZlcmVuY2UuXG4gKiBAcmV0dXJucyB7aW5qZWN0b3J9IEluamVjdG9yIG9iamVjdC4gU2VlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LlxuICpcbiAqIEBleGFtcGxlXG4gKiBUeXBpY2FsIHVzYWdlXG4gKiBgYGBqc1xuICogICAvLyBjcmVhdGUgYW4gaW5qZWN0b3JcbiAqICAgdmFyICRpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoWyduZyddKTtcbiAqXG4gKiAgIC8vIHVzZSB0aGUgaW5qZWN0b3IgdG8ga2ljayBvZmYgeW91ciBhcHBsaWNhdGlvblxuICogICAvLyB1c2UgdGhlIHR5cGUgaW5mZXJlbmNlIHRvIGF1dG8gaW5qZWN0IGFyZ3VtZW50cywgb3IgdXNlIGltcGxpY2l0IGluamVjdGlvblxuICogICAkaW5qZWN0b3IuaW52b2tlKGZ1bmN0aW9uKCRyb290U2NvcGUsICRjb21waWxlLCAkZG9jdW1lbnQpIHtcbiAqICAgICAkY29tcGlsZSgkZG9jdW1lbnQpKCRyb290U2NvcGUpO1xuICogICAgICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICogICB9KTtcbiAqIGBgYFxuICpcbiAqIFNvbWV0aW1lcyB5b3Ugd2FudCB0byBnZXQgYWNjZXNzIHRvIHRoZSBpbmplY3RvciBvZiBhIGN1cnJlbnRseSBydW5uaW5nIEFuZ3VsYXIgYXBwXG4gKiBmcm9tIG91dHNpZGUgQW5ndWxhci4gUGVyaGFwcywgeW91IHdhbnQgdG8gaW5qZWN0IGFuZCBjb21waWxlIHNvbWUgbWFya3VwIGFmdGVyIHRoZVxuICogYXBwbGljYXRpb24gaGFzIGJlZW4gYm9vdHN0cmFwcGVkLiBZb3UgY2FuIGRvIHRoaXMgdXNpbmcgdGhlIGV4dHJhIGBpbmplY3RvcigpYCBhZGRlZFxuICogdG8gSlF1ZXJ5L2pxTGl0ZSBlbGVtZW50cy4gU2VlIHtAbGluayBhbmd1bGFyLmVsZW1lbnR9LlxuICpcbiAqICpUaGlzIGlzIGZhaXJseSByYXJlIGJ1dCBjb3VsZCBiZSB0aGUgY2FzZSBpZiBhIHRoaXJkIHBhcnR5IGxpYnJhcnkgaXMgaW5qZWN0aW5nIHRoZVxuICogbWFya3VwLipcbiAqXG4gKiBJbiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgYSBuZXcgYmxvY2sgb2YgSFRNTCBjb250YWluaW5nIGEgYG5nLWNvbnRyb2xsZXJgXG4gKiBkaXJlY3RpdmUgaXMgYWRkZWQgdG8gdGhlIGVuZCBvZiB0aGUgZG9jdW1lbnQgYm9keSBieSBKUXVlcnkuIFdlIHRoZW4gY29tcGlsZSBhbmQgbGlua1xuICogaXQgaW50byB0aGUgY3VycmVudCBBbmd1bGFySlMgc2NvcGUuXG4gKlxuICogYGBganNcbiAqIHZhciAkZGl2ID0gJCgnPGRpdiBuZy1jb250cm9sbGVyPVwiTXlDdHJsXCI+e3tjb250ZW50LmxhYmVsfX08L2Rpdj4nKTtcbiAqICQoZG9jdW1lbnQuYm9keSkuYXBwZW5kKCRkaXYpO1xuICpcbiAqIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkuaW5qZWN0b3IoKS5pbnZva2UoZnVuY3Rpb24oJGNvbXBpbGUpIHtcbiAqICAgdmFyIHNjb3BlID0gYW5ndWxhci5lbGVtZW50KCRkaXYpLnNjb3BlKCk7XG4gKiAgICRjb21waWxlKCRkaXYpKHNjb3BlKTtcbiAqIH0pO1xuICogYGBgXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIGF1dG9cbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEltcGxpY2l0IG1vZHVsZSB3aGljaCBnZXRzIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gZWFjaCB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS5cbiAqL1xuXG52YXIgRk5fQVJHUyA9IC9eW15cXChdKlxcKFxccyooW15cXCldKilcXCkvbTtcbnZhciBGTl9BUkdfU1BMSVQgPSAvLC87XG52YXIgRk5fQVJHID0gL15cXHMqKF8/KShcXFMrPylcXDFcXHMqJC87XG52YXIgU1RSSVBfQ09NTUVOVFMgPSAvKChcXC9cXC8uKiQpfChcXC9cXCpbXFxzXFxTXSo/XFwqXFwvKSkvbWc7XG52YXIgJGluamVjdG9yTWluRXJyID0gbWluRXJyKCckaW5qZWN0b3InKTtcblxuZnVuY3Rpb24gYW5vbkZuKGZuKSB7XG4gIC8vIEZvciBhbm9ueW1vdXMgZnVuY3Rpb25zLCBzaG93aW5nIGF0IHRoZSB2ZXJ5IGxlYXN0IHRoZSBmdW5jdGlvbiBzaWduYXR1cmUgY2FuIGhlbHAgaW5cbiAgLy8gZGVidWdnaW5nLlxuICB2YXIgZm5UZXh0ID0gZm4udG9TdHJpbmcoKS5yZXBsYWNlKFNUUklQX0NPTU1FTlRTLCAnJyksXG4gICAgICBhcmdzID0gZm5UZXh0Lm1hdGNoKEZOX0FSR1MpO1xuICBpZiAoYXJncykge1xuICAgIHJldHVybiAnZnVuY3Rpb24oJyArIChhcmdzWzFdIHx8ICcnKS5yZXBsYWNlKC9bXFxzXFxyXFxuXSsvLCAnICcpICsgJyknO1xuICB9XG4gIHJldHVybiAnZm4nO1xufVxuXG5mdW5jdGlvbiBhbm5vdGF0ZShmbiwgc3RyaWN0RGksIG5hbWUpIHtcbiAgdmFyICRpbmplY3QsXG4gICAgICBmblRleHQsXG4gICAgICBhcmdEZWNsLFxuICAgICAgbGFzdDtcblxuICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKCEoJGluamVjdCA9IGZuLiRpbmplY3QpKSB7XG4gICAgICAkaW5qZWN0ID0gW107XG4gICAgICBpZiAoZm4ubGVuZ3RoKSB7XG4gICAgICAgIGlmIChzdHJpY3REaSkge1xuICAgICAgICAgIGlmICghaXNTdHJpbmcobmFtZSkgfHwgIW5hbWUpIHtcbiAgICAgICAgICAgIG5hbWUgPSBmbi5uYW1lIHx8IGFub25Gbihmbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignc3RyaWN0ZGknLFxuICAgICAgICAgICAgJ3swfSBpcyBub3QgdXNpbmcgZXhwbGljaXQgYW5ub3RhdGlvbiBhbmQgY2Fubm90IGJlIGludm9rZWQgaW4gc3RyaWN0IG1vZGUnLCBuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBmblRleHQgPSBmbi50b1N0cmluZygpLnJlcGxhY2UoU1RSSVBfQ09NTUVOVFMsICcnKTtcbiAgICAgICAgYXJnRGVjbCA9IGZuVGV4dC5tYXRjaChGTl9BUkdTKTtcbiAgICAgICAgZm9yRWFjaChhcmdEZWNsWzFdLnNwbGl0KEZOX0FSR19TUExJVCksIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICAgIGFyZy5yZXBsYWNlKEZOX0FSRywgZnVuY3Rpb24oYWxsLCB1bmRlcnNjb3JlLCBuYW1lKSB7XG4gICAgICAgICAgICAkaW5qZWN0LnB1c2gobmFtZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZm4uJGluamVjdCA9ICRpbmplY3Q7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQXJyYXkoZm4pKSB7XG4gICAgbGFzdCA9IGZuLmxlbmd0aCAtIDE7XG4gICAgYXNzZXJ0QXJnRm4oZm5bbGFzdF0sICdmbicpO1xuICAgICRpbmplY3QgPSBmbi5zbGljZSgwLCBsYXN0KTtcbiAgfSBlbHNlIHtcbiAgICBhc3NlcnRBcmdGbihmbiwgJ2ZuJywgdHJ1ZSk7XG4gIH1cbiAgcmV0dXJuICRpbmplY3Q7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkaW5qZWN0b3JcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBgJGluamVjdG9yYCBpcyB1c2VkIHRvIHJldHJpZXZlIG9iamVjdCBpbnN0YW5jZXMgYXMgZGVmaW5lZCBieVxuICoge0BsaW5rIGF1dG8uJHByb3ZpZGUgcHJvdmlkZXJ9LCBpbnN0YW50aWF0ZSB0eXBlcywgaW52b2tlIG1ldGhvZHMsXG4gKiBhbmQgbG9hZCBtb2R1bGVzLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgYWx3YXlzIGhvbGRzIHRydWU6XG4gKlxuICogYGBganNcbiAqICAgdmFyICRpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoKTtcbiAqICAgZXhwZWN0KCRpbmplY3Rvci5nZXQoJyRpbmplY3RvcicpKS50b0JlKCRpbmplY3Rvcik7XG4gKiAgIGV4cGVjdCgkaW5qZWN0b3IuaW52b2tlKGZ1bmN0aW9uKCRpbmplY3Rvcikge1xuICogICAgIHJldHVybiAkaW5qZWN0b3I7XG4gKiAgIH0pKS50b0JlKCRpbmplY3Rvcik7XG4gKiBgYGBcbiAqXG4gKiAjIEluamVjdGlvbiBGdW5jdGlvbiBBbm5vdGF0aW9uXG4gKlxuICogSmF2YVNjcmlwdCBkb2VzIG5vdCBoYXZlIGFubm90YXRpb25zLCBhbmQgYW5ub3RhdGlvbnMgYXJlIG5lZWRlZCBmb3IgZGVwZW5kZW5jeSBpbmplY3Rpb24uIFRoZVxuICogZm9sbG93aW5nIGFyZSBhbGwgdmFsaWQgd2F5cyBvZiBhbm5vdGF0aW5nIGZ1bmN0aW9uIHdpdGggaW5qZWN0aW9uIGFyZ3VtZW50cyBhbmQgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogYGBganNcbiAqICAgLy8gaW5mZXJyZWQgKG9ubHkgd29ya3MgaWYgY29kZSBub3QgbWluaWZpZWQvb2JmdXNjYXRlZClcbiAqICAgJGluamVjdG9yLmludm9rZShmdW5jdGlvbihzZXJ2aWNlQSl7fSk7XG4gKlxuICogICAvLyBhbm5vdGF0ZWRcbiAqICAgZnVuY3Rpb24gZXhwbGljaXQoc2VydmljZUEpIHt9O1xuICogICBleHBsaWNpdC4kaW5qZWN0ID0gWydzZXJ2aWNlQSddO1xuICogICAkaW5qZWN0b3IuaW52b2tlKGV4cGxpY2l0KTtcbiAqXG4gKiAgIC8vIGlubGluZVxuICogICAkaW5qZWN0b3IuaW52b2tlKFsnc2VydmljZUEnLCBmdW5jdGlvbihzZXJ2aWNlQSl7fV0pO1xuICogYGBgXG4gKlxuICogIyMgSW5mZXJlbmNlXG4gKlxuICogSW4gSmF2YVNjcmlwdCBjYWxsaW5nIGB0b1N0cmluZygpYCBvbiBhIGZ1bmN0aW9uIHJldHVybnMgdGhlIGZ1bmN0aW9uIGRlZmluaXRpb24uIFRoZSBkZWZpbml0aW9uXG4gKiBjYW4gdGhlbiBiZSBwYXJzZWQgYW5kIHRoZSBmdW5jdGlvbiBhcmd1bWVudHMgY2FuIGJlIGV4dHJhY3RlZC4gVGhpcyBtZXRob2Qgb2YgZGlzY292ZXJpbmdcbiAqIGFubm90YXRpb25zIGlzIGRpc2FsbG93ZWQgd2hlbiB0aGUgaW5qZWN0b3IgaXMgaW4gc3RyaWN0IG1vZGUuXG4gKiAqTk9URToqIFRoaXMgZG9lcyBub3Qgd29yayB3aXRoIG1pbmlmaWNhdGlvbiwgYW5kIG9iZnVzY2F0aW9uIHRvb2xzIHNpbmNlIHRoZXNlIHRvb2xzIGNoYW5nZSB0aGVcbiAqIGFyZ3VtZW50IG5hbWVzLlxuICpcbiAqICMjIGAkaW5qZWN0YCBBbm5vdGF0aW9uXG4gKiBCeSBhZGRpbmcgYW4gYCRpbmplY3RgIHByb3BlcnR5IG9udG8gYSBmdW5jdGlvbiB0aGUgaW5qZWN0aW9uIHBhcmFtZXRlcnMgY2FuIGJlIHNwZWNpZmllZC5cbiAqXG4gKiAjIyBJbmxpbmVcbiAqIEFzIGFuIGFycmF5IG9mIGluamVjdGlvbiBuYW1lcywgd2hlcmUgdGhlIGxhc3QgaXRlbSBpbiB0aGUgYXJyYXkgaXMgdGhlIGZ1bmN0aW9uIHRvIGNhbGwuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkaW5qZWN0b3IjZ2V0XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gYW4gaW5zdGFuY2Ugb2YgdGhlIHNlcnZpY2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlIHRvIHJldHJpZXZlLlxuICogQHBhcmFtIHtzdHJpbmc9fSBjYWxsZXIgQW4gb3B0aW9uYWwgc3RyaW5nIHRvIHByb3ZpZGUgdGhlIG9yaWdpbiBvZiB0aGUgZnVuY3Rpb24gY2FsbCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4gKiBAcmV0dXJuIHsqfSBUaGUgaW5zdGFuY2UuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkaW5qZWN0b3IjaW52b2tlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJbnZva2UgdGhlIG1ldGhvZCBhbmQgc3VwcGx5IHRoZSBtZXRob2QgYXJndW1lbnRzIGZyb20gdGhlIGAkaW5qZWN0b3JgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXkuPHN0cmluZ3xGdW5jdGlvbj59IGZuIFRoZSBpbmplY3RhYmxlIGZ1bmN0aW9uIHRvIGludm9rZS4gRnVuY3Rpb24gcGFyYW1ldGVycyBhcmVcbiAqICAgaW5qZWN0ZWQgYWNjb3JkaW5nIHRvIHRoZSB7QGxpbmsgZ3VpZGUvZGkgJGluamVjdCBBbm5vdGF0aW9ufSBydWxlcy5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gc2VsZiBUaGUgYHRoaXNgIGZvciB0aGUgaW52b2tlZCBtZXRob2QuXG4gKiBAcGFyYW0ge09iamVjdD19IGxvY2FscyBPcHRpb25hbCBvYmplY3QuIElmIHByZXNldCB0aGVuIGFueSBhcmd1bWVudCBuYW1lcyBhcmUgcmVhZCBmcm9tIHRoaXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdCBmaXJzdCwgYmVmb3JlIHRoZSBgJGluamVjdG9yYCBpcyBjb25zdWx0ZWQuXG4gKiBAcmV0dXJucyB7Kn0gdGhlIHZhbHVlIHJldHVybmVkIGJ5IHRoZSBpbnZva2VkIGBmbmAgZnVuY3Rpb24uXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkaW5qZWN0b3IjaGFzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBbGxvd3MgdGhlIHVzZXIgdG8gcXVlcnkgaWYgdGhlIHBhcnRpY3VsYXIgc2VydmljZSBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgc2VydmljZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgaW5qZWN0b3IgaGFzIGdpdmVuIHNlcnZpY2UuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkaW5qZWN0b3IjaW5zdGFudGlhdGVcbiAqIEBkZXNjcmlwdGlvblxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEpTIHR5cGUuIFRoZSBtZXRob2QgdGFrZXMgYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiwgaW52b2tlcyB0aGUgbmV3XG4gKiBvcGVyYXRvciwgYW5kIHN1cHBsaWVzIGFsbCBvZiB0aGUgYXJndW1lbnRzIHRvIHRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBhcyBzcGVjaWZpZWQgYnkgdGhlXG4gKiBjb25zdHJ1Y3RvciBhbm5vdGF0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFR5cGUgQW5ub3RhdGVkIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtPYmplY3Q9fSBsb2NhbHMgT3B0aW9uYWwgb2JqZWN0LiBJZiBwcmVzZXQgdGhlbiBhbnkgYXJndW1lbnQgbmFtZXMgYXJlIHJlYWQgZnJvbSB0aGlzXG4gKiBvYmplY3QgZmlyc3QsIGJlZm9yZSB0aGUgYCRpbmplY3RvcmAgaXMgY29uc3VsdGVkLlxuICogQHJldHVybnMge09iamVjdH0gbmV3IGluc3RhbmNlIG9mIGBUeXBlYC5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRpbmplY3RvciNhbm5vdGF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBhbiBhcnJheSBvZiBzZXJ2aWNlIG5hbWVzIHdoaWNoIHRoZSBmdW5jdGlvbiBpcyByZXF1ZXN0aW5nIGZvciBpbmplY3Rpb24uIFRoaXMgQVBJIGlzXG4gKiB1c2VkIGJ5IHRoZSBpbmplY3RvciB0byBkZXRlcm1pbmUgd2hpY2ggc2VydmljZXMgbmVlZCB0byBiZSBpbmplY3RlZCBpbnRvIHRoZSBmdW5jdGlvbiB3aGVuIHRoZVxuICogZnVuY3Rpb24gaXMgaW52b2tlZC4gVGhlcmUgYXJlIHRocmVlIHdheXMgaW4gd2hpY2ggdGhlIGZ1bmN0aW9uIGNhbiBiZSBhbm5vdGF0ZWQgd2l0aCB0aGUgbmVlZGVkXG4gKiBkZXBlbmRlbmNpZXMuXG4gKlxuICogIyBBcmd1bWVudCBuYW1lc1xuICpcbiAqIFRoZSBzaW1wbGVzdCBmb3JtIGlzIHRvIGV4dHJhY3QgdGhlIGRlcGVuZGVuY2llcyBmcm9tIHRoZSBhcmd1bWVudHMgb2YgdGhlIGZ1bmN0aW9uLiBUaGlzIGlzIGRvbmVcbiAqIGJ5IGNvbnZlcnRpbmcgdGhlIGZ1bmN0aW9uIGludG8gYSBzdHJpbmcgdXNpbmcgYHRvU3RyaW5nKClgIG1ldGhvZCBhbmQgZXh0cmFjdGluZyB0aGUgYXJndW1lbnRcbiAqIG5hbWVzLlxuICogYGBganNcbiAqICAgLy8gR2l2ZW5cbiAqICAgZnVuY3Rpb24gTXlDb250cm9sbGVyKCRzY29wZSwgJHJvdXRlKSB7XG4gKiAgICAgLy8gLi4uXG4gKiAgIH1cbiAqXG4gKiAgIC8vIFRoZW5cbiAqICAgZXhwZWN0KGluamVjdG9yLmFubm90YXRlKE15Q29udHJvbGxlcikpLnRvRXF1YWwoWyckc2NvcGUnLCAnJHJvdXRlJ10pO1xuICogYGBgXG4gKlxuICogWW91IGNhbiBkaXNhbGxvdyB0aGlzIG1ldGhvZCBieSB1c2luZyBzdHJpY3QgaW5qZWN0aW9uIG1vZGUuXG4gKlxuICogVGhpcyBtZXRob2QgZG9lcyBub3Qgd29yayB3aXRoIGNvZGUgbWluaWZpY2F0aW9uIC8gb2JmdXNjYXRpb24uIEZvciB0aGlzIHJlYXNvbiB0aGUgZm9sbG93aW5nXG4gKiBhbm5vdGF0aW9uIHN0cmF0ZWdpZXMgYXJlIHN1cHBvcnRlZC5cbiAqXG4gKiAjIFRoZSBgJGluamVjdGAgcHJvcGVydHlcbiAqXG4gKiBJZiBhIGZ1bmN0aW9uIGhhcyBhbiBgJGluamVjdGAgcHJvcGVydHkgYW5kIGl0cyB2YWx1ZSBpcyBhbiBhcnJheSBvZiBzdHJpbmdzLCB0aGVuIHRoZSBzdHJpbmdzXG4gKiByZXByZXNlbnQgbmFtZXMgb2Ygc2VydmljZXMgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgZnVuY3Rpb24uXG4gKiBgYGBqc1xuICogICAvLyBHaXZlblxuICogICB2YXIgTXlDb250cm9sbGVyID0gZnVuY3Rpb24ob2JmdXNjYXRlZFNjb3BlLCBvYmZ1c2NhdGVkUm91dGUpIHtcbiAqICAgICAvLyAuLi5cbiAqICAgfVxuICogICAvLyBEZWZpbmUgZnVuY3Rpb24gZGVwZW5kZW5jaWVzXG4gKiAgIE15Q29udHJvbGxlclsnJGluamVjdCddID0gWyckc2NvcGUnLCAnJHJvdXRlJ107XG4gKlxuICogICAvLyBUaGVuXG4gKiAgIGV4cGVjdChpbmplY3Rvci5hbm5vdGF0ZShNeUNvbnRyb2xsZXIpKS50b0VxdWFsKFsnJHNjb3BlJywgJyRyb3V0ZSddKTtcbiAqIGBgYFxuICpcbiAqICMgVGhlIGFycmF5IG5vdGF0aW9uXG4gKlxuICogSXQgaXMgb2Z0ZW4gZGVzaXJhYmxlIHRvIGlubGluZSBJbmplY3RlZCBmdW5jdGlvbnMgYW5kIHRoYXQncyB3aGVuIHNldHRpbmcgdGhlIGAkaW5qZWN0YCBwcm9wZXJ0eVxuICogaXMgdmVyeSBpbmNvbnZlbmllbnQuIEluIHRoZXNlIHNpdHVhdGlvbnMgdXNpbmcgdGhlIGFycmF5IG5vdGF0aW9uIHRvIHNwZWNpZnkgdGhlIGRlcGVuZGVuY2llcyBpblxuICogYSB3YXkgdGhhdCBzdXJ2aXZlcyBtaW5pZmljYXRpb24gaXMgYSBiZXR0ZXIgY2hvaWNlOlxuICpcbiAqIGBgYGpzXG4gKiAgIC8vIFdlIHdpc2ggdG8gd3JpdGUgdGhpcyAobm90IG1pbmlmaWNhdGlvbiAvIG9iZnVzY2F0aW9uIHNhZmUpXG4gKiAgIGluamVjdG9yLmludm9rZShmdW5jdGlvbigkY29tcGlsZSwgJHJvb3RTY29wZSkge1xuICogICAgIC8vIC4uLlxuICogICB9KTtcbiAqXG4gKiAgIC8vIFdlIGFyZSBmb3JjZWQgdG8gd3JpdGUgYnJlYWsgaW5saW5pbmdcbiAqICAgdmFyIHRtcEZuID0gZnVuY3Rpb24ob2JmdXNjYXRlZENvbXBpbGUsIG9iZnVzY2F0ZWRSb290U2NvcGUpIHtcbiAqICAgICAvLyAuLi5cbiAqICAgfTtcbiAqICAgdG1wRm4uJGluamVjdCA9IFsnJGNvbXBpbGUnLCAnJHJvb3RTY29wZSddO1xuICogICBpbmplY3Rvci5pbnZva2UodG1wRm4pO1xuICpcbiAqICAgLy8gVG8gYmV0dGVyIHN1cHBvcnQgaW5saW5lIGZ1bmN0aW9uIHRoZSBpbmxpbmUgYW5ub3RhdGlvbiBpcyBzdXBwb3J0ZWRcbiAqICAgaW5qZWN0b3IuaW52b2tlKFsnJGNvbXBpbGUnLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKG9iZkNvbXBpbGUsIG9iZlJvb3RTY29wZSkge1xuICogICAgIC8vIC4uLlxuICogICB9XSk7XG4gKlxuICogICAvLyBUaGVyZWZvcmVcbiAqICAgZXhwZWN0KGluamVjdG9yLmFubm90YXRlKFxuICogICAgICBbJyRjb21waWxlJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbihvYmZ1c18kY29tcGlsZSwgb2JmdXNfJHJvb3RTY29wZSkge31dKVxuICogICAgKS50b0VxdWFsKFsnJGNvbXBpbGUnLCAnJHJvb3RTY29wZSddKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXkuPHN0cmluZ3xGdW5jdGlvbj59IGZuIEZ1bmN0aW9uIGZvciB3aGljaCBkZXBlbmRlbnQgc2VydmljZSBuYW1lcyBuZWVkIHRvXG4gKiBiZSByZXRyaWV2ZWQgYXMgZGVzY3JpYmVkIGFib3ZlLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IFtzdHJpY3REaT1mYWxzZV0gRGlzYWxsb3cgYXJndW1lbnQgbmFtZSBhbm5vdGF0aW9uIGluZmVyZW5jZS5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXkuPHN0cmluZz59IFRoZSBuYW1lcyBvZiB0aGUgc2VydmljZXMgd2hpY2ggdGhlIGZ1bmN0aW9uIHJlcXVpcmVzLlxuICovXG5cblxuXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRwcm92aWRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhlIHtAbGluayBhdXRvLiRwcm92aWRlICRwcm92aWRlfSBzZXJ2aWNlIGhhcyBhIG51bWJlciBvZiBtZXRob2RzIGZvciByZWdpc3RlcmluZyBjb21wb25lbnRzXG4gKiB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS4gTWFueSBvZiB0aGVzZSBmdW5jdGlvbnMgYXJlIGFsc28gZXhwb3NlZCBvblxuICoge0BsaW5rIGFuZ3VsYXIuTW9kdWxlfS5cbiAqXG4gKiBBbiBBbmd1bGFyICoqc2VydmljZSoqIGlzIGEgc2luZ2xldG9uIG9iamVjdCBjcmVhdGVkIGJ5IGEgKipzZXJ2aWNlIGZhY3RvcnkqKi4gIFRoZXNlICoqc2VydmljZVxuICogZmFjdG9yaWVzKiogYXJlIGZ1bmN0aW9ucyB3aGljaCwgaW4gdHVybiwgYXJlIGNyZWF0ZWQgYnkgYSAqKnNlcnZpY2UgcHJvdmlkZXIqKi5cbiAqIFRoZSAqKnNlcnZpY2UgcHJvdmlkZXJzKiogYXJlIGNvbnN0cnVjdG9yIGZ1bmN0aW9ucy4gV2hlbiBpbnN0YW50aWF0ZWQgdGhleSBtdXN0IGNvbnRhaW4gYVxuICogcHJvcGVydHkgY2FsbGVkIGAkZ2V0YCwgd2hpY2ggaG9sZHMgdGhlICoqc2VydmljZSBmYWN0b3J5KiogZnVuY3Rpb24uXG4gKlxuICogV2hlbiB5b3UgcmVxdWVzdCBhIHNlcnZpY2UsIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfSBpcyByZXNwb25zaWJsZSBmb3IgZmluZGluZyB0aGVcbiAqIGNvcnJlY3QgKipzZXJ2aWNlIHByb3ZpZGVyKiosIGluc3RhbnRpYXRpbmcgaXQgYW5kIHRoZW4gY2FsbGluZyBpdHMgYCRnZXRgICoqc2VydmljZSBmYWN0b3J5KipcbiAqIGZ1bmN0aW9uIHRvIGdldCB0aGUgaW5zdGFuY2Ugb2YgdGhlICoqc2VydmljZSoqLlxuICpcbiAqIE9mdGVuIHNlcnZpY2VzIGhhdmUgbm8gY29uZmlndXJhdGlvbiBvcHRpb25zIGFuZCB0aGVyZSBpcyBubyBuZWVkIHRvIGFkZCBtZXRob2RzIHRvIHRoZSBzZXJ2aWNlXG4gKiBwcm92aWRlci4gIFRoZSBwcm92aWRlciB3aWxsIGJlIG5vIG1vcmUgdGhhbiBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHdpdGggYSBgJGdldGAgcHJvcGVydHkuIEZvclxuICogdGhlc2UgY2FzZXMgdGhlIHtAbGluayBhdXRvLiRwcm92aWRlICRwcm92aWRlfSBzZXJ2aWNlIGhhcyBhZGRpdGlvbmFsIGhlbHBlciBtZXRob2RzIHRvIHJlZ2lzdGVyXG4gKiBzZXJ2aWNlcyB3aXRob3V0IHNwZWNpZnlpbmcgYSBwcm92aWRlci5cbiAqXG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3Byb3ZpZGVyIHByb3ZpZGVyKHByb3ZpZGVyKX0gLSByZWdpc3RlcnMgYSAqKnNlcnZpY2UgcHJvdmlkZXIqKiB3aXRoIHRoZVxuICogICAgIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9XG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI2NvbnN0YW50IGNvbnN0YW50KG9iail9IC0gcmVnaXN0ZXJzIGEgdmFsdWUvb2JqZWN0IHRoYXQgY2FuIGJlIGFjY2Vzc2VkIGJ5XG4gKiAgICAgcHJvdmlkZXJzIGFuZCBzZXJ2aWNlcy5cbiAqICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjdmFsdWUgdmFsdWUob2JqKX0gLSByZWdpc3RlcnMgYSB2YWx1ZS9vYmplY3QgdGhhdCBjYW4gb25seSBiZSBhY2Nlc3NlZCBieVxuICogICAgIHNlcnZpY2VzLCBub3QgcHJvdmlkZXJzLlxuICogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNmYWN0b3J5IGZhY3RvcnkoZm4pfSAtIHJlZ2lzdGVycyBhIHNlcnZpY2UgKipmYWN0b3J5IGZ1bmN0aW9uKiosIGBmbmAsXG4gKiAgICAgdGhhdCB3aWxsIGJlIHdyYXBwZWQgaW4gYSAqKnNlcnZpY2UgcHJvdmlkZXIqKiBvYmplY3QsIHdob3NlIGAkZ2V0YCBwcm9wZXJ0eSB3aWxsIGNvbnRhaW4gdGhlXG4gKiAgICAgZ2l2ZW4gZmFjdG9yeSBmdW5jdGlvbi5cbiAqICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjc2VydmljZSBzZXJ2aWNlKGNsYXNzKX0gLSByZWdpc3RlcnMgYSAqKmNvbnN0cnVjdG9yIGZ1bmN0aW9uKiosIGBjbGFzc2BcbiAqICAgICB0aGF0IHdpbGwgYmUgd3JhcHBlZCBpbiBhICoqc2VydmljZSBwcm92aWRlcioqIG9iamVjdCwgd2hvc2UgYCRnZXRgIHByb3BlcnR5IHdpbGwgaW5zdGFudGlhdGVcbiAqICAgICAgYSBuZXcgb2JqZWN0IHVzaW5nIHRoZSBnaXZlbiBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqXG4gKiBTZWUgdGhlIGluZGl2aWR1YWwgbWV0aG9kcyBmb3IgbW9yZSBpbmZvcm1hdGlvbiBhbmQgZXhhbXBsZXMuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcHJvdmlkZSNwcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVnaXN0ZXIgYSAqKnByb3ZpZGVyIGZ1bmN0aW9uKiogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uIFByb3ZpZGVyIGZ1bmN0aW9uc1xuICogYXJlIGNvbnN0cnVjdG9yIGZ1bmN0aW9ucywgd2hvc2UgaW5zdGFuY2VzIGFyZSByZXNwb25zaWJsZSBmb3IgXCJwcm92aWRpbmdcIiBhIGZhY3RvcnkgZm9yIGFcbiAqIHNlcnZpY2UuXG4gKlxuICogU2VydmljZSBwcm92aWRlciBuYW1lcyBzdGFydCB3aXRoIHRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlIHRoZXkgcHJvdmlkZSBmb2xsb3dlZCBieSBgUHJvdmlkZXJgLlxuICogRm9yIGV4YW1wbGUsIHRoZSB7QGxpbmsgbmcuJGxvZyAkbG9nfSBzZXJ2aWNlIGhhcyBhIHByb3ZpZGVyIGNhbGxlZFxuICoge0BsaW5rIG5nLiRsb2dQcm92aWRlciAkbG9nUHJvdmlkZXJ9LlxuICpcbiAqIFNlcnZpY2UgcHJvdmlkZXIgb2JqZWN0cyBjYW4gaGF2ZSBhZGRpdGlvbmFsIG1ldGhvZHMgd2hpY2ggYWxsb3cgY29uZmlndXJhdGlvbiBvZiB0aGUgcHJvdmlkZXJcbiAqIGFuZCBpdHMgc2VydmljZS4gSW1wb3J0YW50bHksIHlvdSBjYW4gY29uZmlndXJlIHdoYXQga2luZCBvZiBzZXJ2aWNlIGlzIGNyZWF0ZWQgYnkgdGhlIGAkZ2V0YFxuICogbWV0aG9kLCBvciBob3cgdGhhdCBzZXJ2aWNlIHdpbGwgYWN0LiBGb3IgZXhhbXBsZSwgdGhlIHtAbGluayBuZy4kbG9nUHJvdmlkZXIgJGxvZ1Byb3ZpZGVyfSBoYXMgYVxuICogbWV0aG9kIHtAbGluayBuZy4kbG9nUHJvdmlkZXIjZGVidWdFbmFibGVkIGRlYnVnRW5hYmxlZH1cbiAqIHdoaWNoIGxldHMgeW91IHNwZWNpZnkgd2hldGhlciB0aGUge0BsaW5rIG5nLiRsb2cgJGxvZ30gc2VydmljZSB3aWxsIGxvZyBkZWJ1ZyBtZXNzYWdlcyB0byB0aGVcbiAqIGNvbnNvbGUgb3Igbm90LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZS4gTk9URTogdGhlIHByb3ZpZGVyIHdpbGwgYmUgYXZhaWxhYmxlIHVuZGVyIGBuYW1lICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdQcm92aWRlcidgIGtleS5cbiAqIEBwYXJhbSB7KE9iamVjdHxmdW5jdGlvbigpKX0gcHJvdmlkZXIgSWYgdGhlIHByb3ZpZGVyIGlzOlxuICpcbiAqICAgLSBgT2JqZWN0YDogdGhlbiBpdCBzaG91bGQgaGF2ZSBhIGAkZ2V0YCBtZXRob2QuIFRoZSBgJGdldGAgbWV0aG9kIHdpbGwgYmUgaW52b2tlZCB1c2luZ1xuICogICAgIHtAbGluayBhdXRvLiRpbmplY3RvciNpbnZva2UgJGluamVjdG9yLmludm9rZSgpfSB3aGVuIGFuIGluc3RhbmNlIG5lZWRzIHRvIGJlIGNyZWF0ZWQuXG4gKiAgIC0gYENvbnN0cnVjdG9yYDogYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIHByb3ZpZGVyIHdpbGwgYmUgY3JlYXRlZCB1c2luZ1xuICogICAgIHtAbGluayBhdXRvLiRpbmplY3RvciNpbnN0YW50aWF0ZSAkaW5qZWN0b3IuaW5zdGFudGlhdGUoKX0sIHRoZW4gdHJlYXRlZCBhcyBgb2JqZWN0YC5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIHByb3ZpZGVyIGluc3RhbmNlXG5cbiAqIEBleGFtcGxlXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBjcmVhdGUgYSBzaW1wbGUgZXZlbnQgdHJhY2tpbmcgc2VydmljZSBhbmQgcmVnaXN0ZXIgaXQgdXNpbmdcbiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3Byb3ZpZGVyICRwcm92aWRlLnByb3ZpZGVyKCl9LlxuICpcbiAqIGBgYGpzXG4gKiAgLy8gRGVmaW5lIHRoZSBldmVudFRyYWNrZXIgcHJvdmlkZXJcbiAqICBmdW5jdGlvbiBFdmVudFRyYWNrZXJQcm92aWRlcigpIHtcbiAqICAgIHZhciB0cmFja2luZ1VybCA9ICcvdHJhY2snO1xuICpcbiAqICAgIC8vIEEgcHJvdmlkZXIgbWV0aG9kIGZvciBjb25maWd1cmluZyB3aGVyZSB0aGUgdHJhY2tlZCBldmVudHMgc2hvdWxkIGJlZW4gc2F2ZWRcbiAqICAgIHRoaXMuc2V0VHJhY2tpbmdVcmwgPSBmdW5jdGlvbih1cmwpIHtcbiAqICAgICAgdHJhY2tpbmdVcmwgPSB1cmw7XG4gKiAgICB9O1xuICpcbiAqICAgIC8vIFRoZSBzZXJ2aWNlIGZhY3RvcnkgZnVuY3Rpb25cbiAqICAgIHRoaXMuJGdldCA9IFsnJGh0dHAnLCBmdW5jdGlvbigkaHR0cCkge1xuICogICAgICB2YXIgdHJhY2tlZEV2ZW50cyA9IHt9O1xuICogICAgICByZXR1cm4ge1xuICogICAgICAgIC8vIENhbGwgdGhpcyB0byB0cmFjayBhbiBldmVudFxuICogICAgICAgIGV2ZW50OiBmdW5jdGlvbihldmVudCkge1xuICogICAgICAgICAgdmFyIGNvdW50ID0gdHJhY2tlZEV2ZW50c1tldmVudF0gfHwgMDtcbiAqICAgICAgICAgIGNvdW50ICs9IDE7XG4gKiAgICAgICAgICB0cmFja2VkRXZlbnRzW2V2ZW50XSA9IGNvdW50O1xuICogICAgICAgICAgcmV0dXJuIGNvdW50O1xuICogICAgICAgIH0sXG4gKiAgICAgICAgLy8gQ2FsbCB0aGlzIHRvIHNhdmUgdGhlIHRyYWNrZWQgZXZlbnRzIHRvIHRoZSB0cmFja2luZ1VybFxuICogICAgICAgIHNhdmU6IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgJGh0dHAucG9zdCh0cmFja2luZ1VybCwgdHJhY2tlZEV2ZW50cyk7XG4gKiAgICAgICAgfVxuICogICAgICB9O1xuICogICAgfV07XG4gKiAgfVxuICpcbiAqICBkZXNjcmliZSgnZXZlbnRUcmFja2VyJywgZnVuY3Rpb24oKSB7XG4gKiAgICB2YXIgcG9zdFNweTtcbiAqXG4gKiAgICBiZWZvcmVFYWNoKG1vZHVsZShmdW5jdGlvbigkcHJvdmlkZSkge1xuICogICAgICAvLyBSZWdpc3RlciB0aGUgZXZlbnRUcmFja2VyIHByb3ZpZGVyXG4gKiAgICAgICRwcm92aWRlLnByb3ZpZGVyKCdldmVudFRyYWNrZXInLCBFdmVudFRyYWNrZXJQcm92aWRlcik7XG4gKiAgICB9KSk7XG4gKlxuICogICAgYmVmb3JlRWFjaChtb2R1bGUoZnVuY3Rpb24oZXZlbnRUcmFja2VyUHJvdmlkZXIpIHtcbiAqICAgICAgLy8gQ29uZmlndXJlIGV2ZW50VHJhY2tlciBwcm92aWRlclxuICogICAgICBldmVudFRyYWNrZXJQcm92aWRlci5zZXRUcmFja2luZ1VybCgnL2N1c3RvbS10cmFjaycpO1xuICogICAgfSkpO1xuICpcbiAqICAgIGl0KCd0cmFja3MgZXZlbnRzJywgaW5qZWN0KGZ1bmN0aW9uKGV2ZW50VHJhY2tlcikge1xuICogICAgICBleHBlY3QoZXZlbnRUcmFja2VyLmV2ZW50KCdsb2dpbicpKS50b0VxdWFsKDEpO1xuICogICAgICBleHBlY3QoZXZlbnRUcmFja2VyLmV2ZW50KCdsb2dpbicpKS50b0VxdWFsKDIpO1xuICogICAgfSkpO1xuICpcbiAqICAgIGl0KCdzYXZlcyB0byB0aGUgdHJhY2tpbmcgdXJsJywgaW5qZWN0KGZ1bmN0aW9uKGV2ZW50VHJhY2tlciwgJGh0dHApIHtcbiAqICAgICAgcG9zdFNweSA9IHNweU9uKCRodHRwLCAncG9zdCcpO1xuICogICAgICBldmVudFRyYWNrZXIuZXZlbnQoJ2xvZ2luJyk7XG4gKiAgICAgIGV2ZW50VHJhY2tlci5zYXZlKCk7XG4gKiAgICAgIGV4cGVjdChwb3N0U3B5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gKiAgICAgIGV4cGVjdChwb3N0U3B5Lm1vc3RSZWNlbnRDYWxsLmFyZ3NbMF0pLm5vdC50b0VxdWFsKCcvdHJhY2snKTtcbiAqICAgICAgZXhwZWN0KHBvc3RTcHkubW9zdFJlY2VudENhbGwuYXJnc1swXSkudG9FcXVhbCgnL2N1c3RvbS10cmFjaycpO1xuICogICAgICBleHBlY3QocG9zdFNweS5tb3N0UmVjZW50Q2FsbC5hcmdzWzFdKS50b0VxdWFsKHsgJ2xvZ2luJzogMSB9KTtcbiAqICAgIH0pKTtcbiAqICB9KTtcbiAqIGBgYFxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjZmFjdG9yeVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVnaXN0ZXIgYSAqKnNlcnZpY2UgZmFjdG9yeSoqLCB3aGljaCB3aWxsIGJlIGNhbGxlZCB0byByZXR1cm4gdGhlIHNlcnZpY2UgaW5zdGFuY2UuXG4gKiBUaGlzIGlzIHNob3J0IGZvciByZWdpc3RlcmluZyBhIHNlcnZpY2Ugd2hlcmUgaXRzIHByb3ZpZGVyIGNvbnNpc3RzIG9mIG9ubHkgYSBgJGdldGAgcHJvcGVydHksXG4gKiB3aGljaCBpcyB0aGUgZ2l2ZW4gc2VydmljZSBmYWN0b3J5IGZ1bmN0aW9uLlxuICogWW91IHNob3VsZCB1c2Uge0BsaW5rIGF1dG8uJHByb3ZpZGUjZmFjdG9yeSAkcHJvdmlkZS5mYWN0b3J5KGdldEZuKX0gaWYgeW91IGRvIG5vdCBuZWVkIHRvXG4gKiBjb25maWd1cmUgeW91ciBzZXJ2aWNlIGluIGEgcHJvdmlkZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLlxuICogQHBhcmFtIHtGdW5jdGlvbnxBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gJGdldEZuIFRoZSBpbmplY3RhYmxlICRnZXRGbiBmb3IgdGhlIGluc3RhbmNlIGNyZWF0aW9uLlxuICogICAgICAgICAgICAgICAgICAgICAgSW50ZXJuYWxseSB0aGlzIGlzIGEgc2hvcnQgaGFuZCBmb3IgYCRwcm92aWRlLnByb3ZpZGVyKG5hbWUsIHskZ2V0OiAkZ2V0Rm59KWAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIHByb3ZpZGVyIGluc3RhbmNlXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUgaXMgYW4gZXhhbXBsZSBvZiByZWdpc3RlcmluZyBhIHNlcnZpY2VcbiAqIGBgYGpzXG4gKiAgICRwcm92aWRlLmZhY3RvcnkoJ3BpbmcnLCBbJyRodHRwJywgZnVuY3Rpb24oJGh0dHApIHtcbiAqICAgICByZXR1cm4gZnVuY3Rpb24gcGluZygpIHtcbiAqICAgICAgIHJldHVybiAkaHR0cC5zZW5kKCcvcGluZycpO1xuICogICAgIH07XG4gKiAgIH1dKTtcbiAqIGBgYFxuICogWW91IHdvdWxkIHRoZW4gaW5qZWN0IGFuZCB1c2UgdGhpcyBzZXJ2aWNlIGxpa2UgdGhpczpcbiAqIGBgYGpzXG4gKiAgIHNvbWVNb2R1bGUuY29udHJvbGxlcignQ3RybCcsIFsncGluZycsIGZ1bmN0aW9uKHBpbmcpIHtcbiAqICAgICBwaW5nKCk7XG4gKiAgIH1dKTtcbiAqIGBgYFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcHJvdmlkZSNzZXJ2aWNlXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBSZWdpc3RlciBhICoqc2VydmljZSBjb25zdHJ1Y3RvcioqLCB3aGljaCB3aWxsIGJlIGludm9rZWQgd2l0aCBgbmV3YCB0byBjcmVhdGUgdGhlIHNlcnZpY2VcbiAqIGluc3RhbmNlLlxuICogVGhpcyBpcyBzaG9ydCBmb3IgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlIHdoZXJlIGl0cyBwcm92aWRlcidzIGAkZ2V0YCBwcm9wZXJ0eSBpcyB0aGUgc2VydmljZVxuICogY29uc3RydWN0b3IgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gaW5zdGFudGlhdGUgdGhlIHNlcnZpY2UgaW5zdGFuY2UuXG4gKlxuICogWW91IHNob3VsZCB1c2Uge0BsaW5rIGF1dG8uJHByb3ZpZGUjc2VydmljZSAkcHJvdmlkZS5zZXJ2aWNlKGNsYXNzKX0gaWYgeW91IGRlZmluZSB5b3VyIHNlcnZpY2VcbiAqIGFzIGEgdHlwZS9jbGFzcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBjb25zdHJ1Y3RvciBBbiBpbmplY3RhYmxlIGNsYXNzIChjb25zdHJ1Y3RvciBmdW5jdGlvbilcbiAqICAgICB0aGF0IHdpbGwgYmUgaW5zdGFudGlhdGVkLlxuICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZVxuICpcbiAqIEBleGFtcGxlXG4gKiBIZXJlIGlzIGFuIGV4YW1wbGUgb2YgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlIHVzaW5nXG4gKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNzZXJ2aWNlICRwcm92aWRlLnNlcnZpY2UoY2xhc3MpfS5cbiAqIGBgYGpzXG4gKiAgIHZhciBQaW5nID0gZnVuY3Rpb24oJGh0dHApIHtcbiAqICAgICB0aGlzLiRodHRwID0gJGh0dHA7XG4gKiAgIH07XG4gKlxuICogICBQaW5nLiRpbmplY3QgPSBbJyRodHRwJ107XG4gKlxuICogICBQaW5nLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgcmV0dXJuIHRoaXMuJGh0dHAuZ2V0KCcvcGluZycpO1xuICogICB9O1xuICogICAkcHJvdmlkZS5zZXJ2aWNlKCdwaW5nJywgUGluZyk7XG4gKiBgYGBcbiAqIFlvdSB3b3VsZCB0aGVuIGluamVjdCBhbmQgdXNlIHRoaXMgc2VydmljZSBsaWtlIHRoaXM6XG4gKiBgYGBqc1xuICogICBzb21lTW9kdWxlLmNvbnRyb2xsZXIoJ0N0cmwnLCBbJ3BpbmcnLCBmdW5jdGlvbihwaW5nKSB7XG4gKiAgICAgcGluZy5zZW5kKCk7XG4gKiAgIH1dKTtcbiAqIGBgYFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcHJvdmlkZSN2YWx1ZVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVnaXN0ZXIgYSAqKnZhbHVlIHNlcnZpY2UqKiB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfSwgc3VjaCBhcyBhIHN0cmluZywgYVxuICogbnVtYmVyLCBhbiBhcnJheSwgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24uICBUaGlzIGlzIHNob3J0IGZvciByZWdpc3RlcmluZyBhIHNlcnZpY2Ugd2hlcmUgaXRzXG4gKiBwcm92aWRlcidzIGAkZ2V0YCBwcm9wZXJ0eSBpcyBhIGZhY3RvcnkgZnVuY3Rpb24gdGhhdCB0YWtlcyBubyBhcmd1bWVudHMgYW5kIHJldHVybnMgdGhlICoqdmFsdWVcbiAqIHNlcnZpY2UqKi5cbiAqXG4gKiBWYWx1ZSBzZXJ2aWNlcyBhcmUgc2ltaWxhciB0byBjb25zdGFudCBzZXJ2aWNlcywgZXhjZXB0IHRoYXQgdGhleSBjYW5ub3QgYmUgaW5qZWN0ZWQgaW50byBhXG4gKiBtb2R1bGUgY29uZmlndXJhdGlvbiBmdW5jdGlvbiAoc2VlIHtAbGluayBhbmd1bGFyLk1vZHVsZSNjb25maWd9KSBidXQgdGhleSBjYW4gYmUgb3ZlcnJpZGRlbiBieVxuICogYW4gQW5ndWxhclxuICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjZGVjb3JhdG9yIGRlY29yYXRvcn0uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIHByb3ZpZGVyIGluc3RhbmNlXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUgYXJlIHNvbWUgZXhhbXBsZXMgb2YgY3JlYXRpbmcgdmFsdWUgc2VydmljZXMuXG4gKiBgYGBqc1xuICogICAkcHJvdmlkZS52YWx1ZSgnQURNSU5fVVNFUicsICdhZG1pbicpO1xuICpcbiAqICAgJHByb3ZpZGUudmFsdWUoJ1JvbGVMb29rdXAnLCB7IGFkbWluOiAwLCB3cml0ZXI6IDEsIHJlYWRlcjogMiB9KTtcbiAqXG4gKiAgICRwcm92aWRlLnZhbHVlKCdoYWxmT2YnLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICAgIHJldHVybiB2YWx1ZSAvIDI7XG4gKiAgIH0pO1xuICogYGBgXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRwcm92aWRlI2NvbnN0YW50XG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBSZWdpc3RlciBhICoqY29uc3RhbnQgc2VydmljZSoqLCBzdWNoIGFzIGEgc3RyaW5nLCBhIG51bWJlciwgYW4gYXJyYXksIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLFxuICogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uIFVubGlrZSB7QGxpbmsgYXV0by4kcHJvdmlkZSN2YWx1ZSB2YWx1ZX0gaXQgY2FuIGJlXG4gKiBpbmplY3RlZCBpbnRvIGEgbW9kdWxlIGNvbmZpZ3VyYXRpb24gZnVuY3Rpb24gKHNlZSB7QGxpbmsgYW5ndWxhci5Nb2R1bGUjY29uZmlnfSkgYW5kIGl0IGNhbm5vdFxuICogYmUgb3ZlcnJpZGRlbiBieSBhbiBBbmd1bGFyIHtAbGluayBhdXRvLiRwcm92aWRlI2RlY29yYXRvciBkZWNvcmF0b3J9LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBjb25zdGFudC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIGNvbnN0YW50IHZhbHVlLlxuICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBpbnN0YW5jZVxuICpcbiAqIEBleGFtcGxlXG4gKiBIZXJlIGEgc29tZSBleGFtcGxlcyBvZiBjcmVhdGluZyBjb25zdGFudHM6XG4gKiBgYGBqc1xuICogICAkcHJvdmlkZS5jb25zdGFudCgnU0hBUkRfSEVJR0hUJywgMzA2KTtcbiAqXG4gKiAgICRwcm92aWRlLmNvbnN0YW50KCdNWV9DT0xPVVJTJywgWydyZWQnLCAnYmx1ZScsICdncmV5J10pO1xuICpcbiAqICAgJHByb3ZpZGUuY29uc3RhbnQoJ2RvdWJsZScsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gKiAgICAgcmV0dXJuIHZhbHVlICogMjtcbiAqICAgfSk7XG4gKiBgYGBcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjZGVjb3JhdG9yXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBSZWdpc3RlciBhICoqc2VydmljZSBkZWNvcmF0b3IqKiB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS4gQSBzZXJ2aWNlIGRlY29yYXRvclxuICogaW50ZXJjZXB0cyB0aGUgY3JlYXRpb24gb2YgYSBzZXJ2aWNlLCBhbGxvd2luZyBpdCB0byBvdmVycmlkZSBvciBtb2RpZnkgdGhlIGJlaGF2aW91ciBvZiB0aGVcbiAqIHNlcnZpY2UuIFRoZSBvYmplY3QgcmV0dXJuZWQgYnkgdGhlIGRlY29yYXRvciBtYXkgYmUgdGhlIG9yaWdpbmFsIHNlcnZpY2UsIG9yIGEgbmV3IHNlcnZpY2VcbiAqIG9iamVjdCB3aGljaCByZXBsYWNlcyBvciB3cmFwcyBhbmQgZGVsZWdhdGVzIHRvIHRoZSBvcmlnaW5hbCBzZXJ2aWNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlIHRvIGRlY29yYXRlLlxuICogQHBhcmFtIHtGdW5jdGlvbnxBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gZGVjb3JhdG9yIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIHNlcnZpY2UgbmVlZHMgdG8gYmVcbiAqICAgIGluc3RhbnRpYXRlZCBhbmQgc2hvdWxkIHJldHVybiB0aGUgZGVjb3JhdGVkIHNlcnZpY2UgaW5zdGFuY2UuIFRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgdXNpbmdcbiAqICAgIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IjaW52b2tlIGluamVjdG9yLmludm9rZX0gbWV0aG9kIGFuZCBpcyB0aGVyZWZvcmUgZnVsbHkgaW5qZWN0YWJsZS5cbiAqICAgIExvY2FsIGluamVjdGlvbiBhcmd1bWVudHM6XG4gKlxuICogICAgKiBgJGRlbGVnYXRlYCAtIFRoZSBvcmlnaW5hbCBzZXJ2aWNlIGluc3RhbmNlLCB3aGljaCBjYW4gYmUgbW9ua2V5IHBhdGNoZWQsIGNvbmZpZ3VyZWQsXG4gKiAgICAgIGRlY29yYXRlZCBvciBkZWxlZ2F0ZWQgdG8uXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUgd2UgZGVjb3JhdGUgdGhlIHtAbGluayBuZy4kbG9nICRsb2d9IHNlcnZpY2UgdG8gY29udmVydCB3YXJuaW5ncyB0byBlcnJvcnMgYnkgaW50ZXJjZXB0aW5nXG4gKiBjYWxscyB0byB7QGxpbmsgbmcuJGxvZyNlcnJvciAkbG9nLndhcm4oKX0uXG4gKiBgYGBqc1xuICogICAkcHJvdmlkZS5kZWNvcmF0b3IoJyRsb2cnLCBbJyRkZWxlZ2F0ZScsIGZ1bmN0aW9uKCRkZWxlZ2F0ZSkge1xuICogICAgICRkZWxlZ2F0ZS53YXJuID0gJGRlbGVnYXRlLmVycm9yO1xuICogICAgIHJldHVybiAkZGVsZWdhdGU7XG4gKiAgIH1dKTtcbiAqIGBgYFxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlSW5qZWN0b3IobW9kdWxlc1RvTG9hZCwgc3RyaWN0RGkpIHtcbiAgc3RyaWN0RGkgPSAoc3RyaWN0RGkgPT09IHRydWUpO1xuICB2YXIgSU5TVEFOVElBVElORyA9IHt9LFxuICAgICAgcHJvdmlkZXJTdWZmaXggPSAnUHJvdmlkZXInLFxuICAgICAgcGF0aCA9IFtdLFxuICAgICAgbG9hZGVkTW9kdWxlcyA9IG5ldyBIYXNoTWFwKFtdLCB0cnVlKSxcbiAgICAgIHByb3ZpZGVyQ2FjaGUgPSB7XG4gICAgICAgICRwcm92aWRlOiB7XG4gICAgICAgICAgICBwcm92aWRlcjogc3VwcG9ydE9iamVjdChwcm92aWRlciksXG4gICAgICAgICAgICBmYWN0b3J5OiBzdXBwb3J0T2JqZWN0KGZhY3RvcnkpLFxuICAgICAgICAgICAgc2VydmljZTogc3VwcG9ydE9iamVjdChzZXJ2aWNlKSxcbiAgICAgICAgICAgIHZhbHVlOiBzdXBwb3J0T2JqZWN0KHZhbHVlKSxcbiAgICAgICAgICAgIGNvbnN0YW50OiBzdXBwb3J0T2JqZWN0KGNvbnN0YW50KSxcbiAgICAgICAgICAgIGRlY29yYXRvcjogZGVjb3JhdG9yXG4gICAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHByb3ZpZGVySW5qZWN0b3IgPSAocHJvdmlkZXJDYWNoZS4kaW5qZWN0b3IgPVxuICAgICAgICAgIGNyZWF0ZUludGVybmFsSW5qZWN0b3IocHJvdmlkZXJDYWNoZSwgZnVuY3Rpb24oc2VydmljZU5hbWUsIGNhbGxlcikge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNTdHJpbmcoY2FsbGVyKSkge1xuICAgICAgICAgICAgICBwYXRoLnB1c2goY2FsbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycigndW5wcicsIFwiVW5rbm93biBwcm92aWRlcjogezB9XCIsIHBhdGguam9pbignIDwtICcpKTtcbiAgICAgICAgICB9KSksXG4gICAgICBpbnN0YW5jZUNhY2hlID0ge30sXG4gICAgICBpbnN0YW5jZUluamVjdG9yID0gKGluc3RhbmNlQ2FjaGUuJGluamVjdG9yID1cbiAgICAgICAgICBjcmVhdGVJbnRlcm5hbEluamVjdG9yKGluc3RhbmNlQ2FjaGUsIGZ1bmN0aW9uKHNlcnZpY2VOYW1lLCBjYWxsZXIpIHtcbiAgICAgICAgICAgIHZhciBwcm92aWRlciA9IHByb3ZpZGVySW5qZWN0b3IuZ2V0KHNlcnZpY2VOYW1lICsgcHJvdmlkZXJTdWZmaXgsIGNhbGxlcik7XG4gICAgICAgICAgICByZXR1cm4gaW5zdGFuY2VJbmplY3Rvci5pbnZva2UocHJvdmlkZXIuJGdldCwgcHJvdmlkZXIsIHVuZGVmaW5lZCwgc2VydmljZU5hbWUpO1xuICAgICAgICAgIH0pKTtcblxuXG4gIGZvckVhY2gobG9hZE1vZHVsZXMobW9kdWxlc1RvTG9hZCksIGZ1bmN0aW9uKGZuKSB7IGlmIChmbikgaW5zdGFuY2VJbmplY3Rvci5pbnZva2UoZm4pOyB9KTtcblxuICByZXR1cm4gaW5zdGFuY2VJbmplY3RvcjtcblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gJHByb3ZpZGVyXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIGZ1bmN0aW9uIHN1cHBvcnRPYmplY3QoZGVsZWdhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgICAgZm9yRWFjaChrZXksIHJldmVyc2VQYXJhbXMoZGVsZWdhdGUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWxlZ2F0ZShrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvdmlkZXIobmFtZSwgcHJvdmlkZXJfKSB7XG4gICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgJ3NlcnZpY2UnKTtcbiAgICBpZiAoaXNGdW5jdGlvbihwcm92aWRlcl8pIHx8IGlzQXJyYXkocHJvdmlkZXJfKSkge1xuICAgICAgcHJvdmlkZXJfID0gcHJvdmlkZXJJbmplY3Rvci5pbnN0YW50aWF0ZShwcm92aWRlcl8pO1xuICAgIH1cbiAgICBpZiAoIXByb3ZpZGVyXy4kZ2V0KSB7XG4gICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3BnZXQnLCBcIlByb3ZpZGVyICd7MH0nIG11c3QgZGVmaW5lICRnZXQgZmFjdG9yeSBtZXRob2QuXCIsIG5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvdmlkZXJDYWNoZVtuYW1lICsgcHJvdmlkZXJTdWZmaXhdID0gcHJvdmlkZXJfO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5mb3JjZVJldHVyblZhbHVlKG5hbWUsIGZhY3RvcnkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZW5mb3JjZWRSZXR1cm5WYWx1ZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBpbnN0YW5jZUluamVjdG9yLmludm9rZShmYWN0b3J5LCB0aGlzKTtcbiAgICAgIGlmIChpc1VuZGVmaW5lZChyZXN1bHQpKSB7XG4gICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycigndW5kZWYnLCBcIlByb3ZpZGVyICd7MH0nIG11c3QgcmV0dXJuIGEgdmFsdWUgZnJvbSAkZ2V0IGZhY3RvcnkgbWV0aG9kLlwiLCBuYW1lKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZhY3RvcnkobmFtZSwgZmFjdG9yeUZuLCBlbmZvcmNlKSB7XG4gICAgcmV0dXJuIHByb3ZpZGVyKG5hbWUsIHtcbiAgICAgICRnZXQ6IGVuZm9yY2UgIT09IGZhbHNlID8gZW5mb3JjZVJldHVyblZhbHVlKG5hbWUsIGZhY3RvcnlGbikgOiBmYWN0b3J5Rm5cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlcnZpY2UobmFtZSwgY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gZmFjdG9yeShuYW1lLCBbJyRpbmplY3RvcicsIGZ1bmN0aW9uKCRpbmplY3Rvcikge1xuICAgICAgcmV0dXJuICRpbmplY3Rvci5pbnN0YW50aWF0ZShjb25zdHJ1Y3Rvcik7XG4gICAgfV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdmFsdWUobmFtZSwgdmFsKSB7IHJldHVybiBmYWN0b3J5KG5hbWUsIHZhbHVlRm4odmFsKSwgZmFsc2UpOyB9XG5cbiAgZnVuY3Rpb24gY29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnY29uc3RhbnQnKTtcbiAgICBwcm92aWRlckNhY2hlW25hbWVdID0gdmFsdWU7XG4gICAgaW5zdGFuY2VDYWNoZVtuYW1lXSA9IHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVjb3JhdG9yKHNlcnZpY2VOYW1lLCBkZWNvckZuKSB7XG4gICAgdmFyIG9yaWdQcm92aWRlciA9IHByb3ZpZGVySW5qZWN0b3IuZ2V0KHNlcnZpY2VOYW1lICsgcHJvdmlkZXJTdWZmaXgpLFxuICAgICAgICBvcmlnJGdldCA9IG9yaWdQcm92aWRlci4kZ2V0O1xuXG4gICAgb3JpZ1Byb3ZpZGVyLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcmlnSW5zdGFuY2UgPSBpbnN0YW5jZUluamVjdG9yLmludm9rZShvcmlnJGdldCwgb3JpZ1Byb3ZpZGVyKTtcbiAgICAgIHJldHVybiBpbnN0YW5jZUluamVjdG9yLmludm9rZShkZWNvckZuLCBudWxsLCB7JGRlbGVnYXRlOiBvcmlnSW5zdGFuY2V9KTtcbiAgICB9O1xuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIE1vZHVsZSBMb2FkaW5nXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBmdW5jdGlvbiBsb2FkTW9kdWxlcyhtb2R1bGVzVG9Mb2FkKSB7XG4gICAgYXNzZXJ0QXJnKGlzVW5kZWZpbmVkKG1vZHVsZXNUb0xvYWQpIHx8IGlzQXJyYXkobW9kdWxlc1RvTG9hZCksICdtb2R1bGVzVG9Mb2FkJywgJ25vdCBhbiBhcnJheScpO1xuICAgIHZhciBydW5CbG9ja3MgPSBbXSwgbW9kdWxlRm47XG4gICAgZm9yRWFjaChtb2R1bGVzVG9Mb2FkLCBmdW5jdGlvbihtb2R1bGUpIHtcbiAgICAgIGlmIChsb2FkZWRNb2R1bGVzLmdldChtb2R1bGUpKSByZXR1cm47XG4gICAgICBsb2FkZWRNb2R1bGVzLnB1dChtb2R1bGUsIHRydWUpO1xuXG4gICAgICBmdW5jdGlvbiBydW5JbnZva2VRdWV1ZShxdWV1ZSkge1xuICAgICAgICB2YXIgaSwgaWk7XG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gcXVldWUubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIHZhciBpbnZva2VBcmdzID0gcXVldWVbaV0sXG4gICAgICAgICAgICAgIHByb3ZpZGVyID0gcHJvdmlkZXJJbmplY3Rvci5nZXQoaW52b2tlQXJnc1swXSk7XG5cbiAgICAgICAgICBwcm92aWRlcltpbnZva2VBcmdzWzFdXS5hcHBseShwcm92aWRlciwgaW52b2tlQXJnc1syXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGlzU3RyaW5nKG1vZHVsZSkpIHtcbiAgICAgICAgICBtb2R1bGVGbiA9IGFuZ3VsYXJNb2R1bGUobW9kdWxlKTtcbiAgICAgICAgICBydW5CbG9ja3MgPSBydW5CbG9ja3MuY29uY2F0KGxvYWRNb2R1bGVzKG1vZHVsZUZuLnJlcXVpcmVzKSkuY29uY2F0KG1vZHVsZUZuLl9ydW5CbG9ja3MpO1xuICAgICAgICAgIHJ1bkludm9rZVF1ZXVlKG1vZHVsZUZuLl9pbnZva2VRdWV1ZSk7XG4gICAgICAgICAgcnVuSW52b2tlUXVldWUobW9kdWxlRm4uX2NvbmZpZ0Jsb2Nrcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihtb2R1bGUpKSB7XG4gICAgICAgICAgICBydW5CbG9ja3MucHVzaChwcm92aWRlckluamVjdG9yLmludm9rZShtb2R1bGUpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKHByb3ZpZGVySW5qZWN0b3IuaW52b2tlKG1vZHVsZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFzc2VydEFyZ0ZuKG1vZHVsZSwgJ21vZHVsZScpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChpc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgICAgICBtb2R1bGUgPSBtb2R1bGVbbW9kdWxlLmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlLm1lc3NhZ2UgJiYgZS5zdGFjayAmJiBlLnN0YWNrLmluZGV4T2YoZS5tZXNzYWdlKSA9PSAtMSkge1xuICAgICAgICAgIC8vIFNhZmFyaSAmIEZGJ3Mgc3RhY2sgdHJhY2VzIGRvbid0IGNvbnRhaW4gZXJyb3IubWVzc2FnZSBjb250ZW50XG4gICAgICAgICAgLy8gdW5saWtlIHRob3NlIG9mIENocm9tZSBhbmQgSUVcbiAgICAgICAgICAvLyBTbyBpZiBzdGFjayBkb2Vzbid0IGNvbnRhaW4gbWVzc2FnZSwgd2UgY3JlYXRlIGEgbmV3IHN0cmluZyB0aGF0IGNvbnRhaW5zIGJvdGguXG4gICAgICAgICAgLy8gU2luY2UgZXJyb3Iuc3RhY2sgaXMgcmVhZC1vbmx5IGluIFNhZmFyaSwgSSdtIG92ZXJyaWRpbmcgZSBhbmQgbm90IGUuc3RhY2sgaGVyZS5cbiAgICAgICAgICAvKiBqc2hpbnQgLVcwMjIgKi9cbiAgICAgICAgICBlID0gZS5tZXNzYWdlICsgJ1xcbicgKyBlLnN0YWNrO1xuICAgICAgICB9XG4gICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignbW9kdWxlcnInLCBcIkZhaWxlZCB0byBpbnN0YW50aWF0ZSBtb2R1bGUgezB9IGR1ZSB0bzpcXG57MX1cIixcbiAgICAgICAgICAgICAgICAgIG1vZHVsZSwgZS5zdGFjayB8fCBlLm1lc3NhZ2UgfHwgZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJ1bkJsb2NrcztcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBpbnRlcm5hbCBJbmplY3RvclxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICBmdW5jdGlvbiBjcmVhdGVJbnRlcm5hbEluamVjdG9yKGNhY2hlLCBmYWN0b3J5KSB7XG5cbiAgICBmdW5jdGlvbiBnZXRTZXJ2aWNlKHNlcnZpY2VOYW1lLCBjYWxsZXIpIHtcbiAgICAgIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShzZXJ2aWNlTmFtZSkpIHtcbiAgICAgICAgaWYgKGNhY2hlW3NlcnZpY2VOYW1lXSA9PT0gSU5TVEFOVElBVElORykge1xuICAgICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignY2RlcCcsICdDaXJjdWxhciBkZXBlbmRlbmN5IGZvdW5kOiB7MH0nLFxuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZSArICcgPC0gJyArIHBhdGguam9pbignIDwtICcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGVbc2VydmljZU5hbWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBwYXRoLnVuc2hpZnQoc2VydmljZU5hbWUpO1xuICAgICAgICAgIGNhY2hlW3NlcnZpY2VOYW1lXSA9IElOU1RBTlRJQVRJTkc7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlW3NlcnZpY2VOYW1lXSA9IGZhY3Rvcnkoc2VydmljZU5hbWUsIGNhbGxlcik7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGlmIChjYWNoZVtzZXJ2aWNlTmFtZV0gPT09IElOU1RBTlRJQVRJTkcpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjYWNoZVtzZXJ2aWNlTmFtZV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBwYXRoLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZva2UoZm4sIHNlbGYsIGxvY2Fscywgc2VydmljZU5hbWUpIHtcbiAgICAgIGlmICh0eXBlb2YgbG9jYWxzID09PSAnc3RyaW5nJykge1xuICAgICAgICBzZXJ2aWNlTmFtZSA9IGxvY2FscztcbiAgICAgICAgbG9jYWxzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGFyZ3MgPSBbXSxcbiAgICAgICAgICAkaW5qZWN0ID0gY3JlYXRlSW5qZWN0b3IuJCRhbm5vdGF0ZShmbiwgc3RyaWN0RGksIHNlcnZpY2VOYW1lKSxcbiAgICAgICAgICBsZW5ndGgsIGksXG4gICAgICAgICAga2V5O1xuXG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSAkaW5qZWN0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGtleSA9ICRpbmplY3RbaV07XG4gICAgICAgIGlmICh0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignaXRrbicsXG4gICAgICAgICAgICAgICAgICAnSW5jb3JyZWN0IGluamVjdGlvbiB0b2tlbiEgRXhwZWN0ZWQgc2VydmljZSBuYW1lIGFzIHN0cmluZywgZ290IHswfScsIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgYXJncy5wdXNoKFxuICAgICAgICAgIGxvY2FscyAmJiBsb2NhbHMuaGFzT3duUHJvcGVydHkoa2V5KVxuICAgICAgICAgID8gbG9jYWxzW2tleV1cbiAgICAgICAgICA6IGdldFNlcnZpY2Uoa2V5LCBzZXJ2aWNlTmFtZSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5KGZuKSkge1xuICAgICAgICBmbiA9IGZuW2xlbmd0aF07XG4gICAgICB9XG5cbiAgICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2FuZ3VsYXJqcy1pbnZva2UtYXBwbHktdnMtc3dpdGNoXG4gICAgICAvLyAjNTM4OFxuICAgICAgcmV0dXJuIGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbnRpYXRlKFR5cGUsIGxvY2Fscywgc2VydmljZU5hbWUpIHtcbiAgICAgIC8vIENoZWNrIGlmIFR5cGUgaXMgYW5ub3RhdGVkIGFuZCB1c2UganVzdCB0aGUgZ2l2ZW4gZnVuY3Rpb24gYXQgbi0xIGFzIHBhcmFtZXRlclxuICAgICAgLy8gZS5nLiBzb21lTW9kdWxlLmZhY3RvcnkoJ2dyZWV0ZXInLCBbJyR3aW5kb3cnLCBmdW5jdGlvbihyZW5hbWVkJHdpbmRvdykge31dKTtcbiAgICAgIC8vIE9iamVjdCBjcmVhdGlvbjogaHR0cDovL2pzcGVyZi5jb20vY3JlYXRlLWNvbnN0cnVjdG9yLzJcbiAgICAgIHZhciBpbnN0YW5jZSA9IE9iamVjdC5jcmVhdGUoKGlzQXJyYXkoVHlwZSkgPyBUeXBlW1R5cGUubGVuZ3RoIC0gMV0gOiBUeXBlKS5wcm90b3R5cGUgfHwgbnVsbCk7XG4gICAgICB2YXIgcmV0dXJuZWRWYWx1ZSA9IGludm9rZShUeXBlLCBpbnN0YW5jZSwgbG9jYWxzLCBzZXJ2aWNlTmFtZSk7XG5cbiAgICAgIHJldHVybiBpc09iamVjdChyZXR1cm5lZFZhbHVlKSB8fCBpc0Z1bmN0aW9uKHJldHVybmVkVmFsdWUpID8gcmV0dXJuZWRWYWx1ZSA6IGluc3RhbmNlO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBpbnZva2U6IGludm9rZSxcbiAgICAgIGluc3RhbnRpYXRlOiBpbnN0YW50aWF0ZSxcbiAgICAgIGdldDogZ2V0U2VydmljZSxcbiAgICAgIGFubm90YXRlOiBjcmVhdGVJbmplY3Rvci4kJGFubm90YXRlLFxuICAgICAgaGFzOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHJldHVybiBwcm92aWRlckNhY2hlLmhhc093blByb3BlcnR5KG5hbWUgKyBwcm92aWRlclN1ZmZpeCkgfHwgY2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5jcmVhdGVJbmplY3Rvci4kJGFubm90YXRlID0gYW5ub3RhdGU7XG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkYW5jaG9yU2Nyb2xsUHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSBgJGFuY2hvclNjcm9sbFByb3ZpZGVyYCB0byBkaXNhYmxlIGF1dG9tYXRpYyBzY3JvbGxpbmcgd2hlbmV2ZXJcbiAqIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIoKSB7XG5cbiAgdmFyIGF1dG9TY3JvbGxpbmdFbmFibGVkID0gdHJ1ZTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkYW5jaG9yU2Nyb2xsUHJvdmlkZXIjZGlzYWJsZUF1dG9TY3JvbGxpbmdcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEJ5IGRlZmF1bHQsIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsICRhbmNob3JTY3JvbGwoKX0gd2lsbCBhdXRvbWF0aWNhbGx5IGRldGVjdCBjaGFuZ2VzIHRvXG4gICAqIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSBhbmQgc2Nyb2xsIHRvIHRoZSBlbGVtZW50IG1hdGNoaW5nIHRoZSBuZXcgaGFzaC48YnIgLz5cbiAgICogVXNlIHRoaXMgbWV0aG9kIHRvIGRpc2FibGUgYXV0b21hdGljIHNjcm9sbGluZy5cbiAgICpcbiAgICogSWYgYXV0b21hdGljIHNjcm9sbGluZyBpcyBkaXNhYmxlZCwgb25lIG11c3QgZXhwbGljaXRseSBjYWxsXG4gICAqIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsICRhbmNob3JTY3JvbGwoKX0gaW4gb3JkZXIgdG8gc2Nyb2xsIHRvIHRoZSBlbGVtZW50IHJlbGF0ZWQgdG8gdGhlXG4gICAqIGN1cnJlbnQgaGFzaC5cbiAgICovXG4gIHRoaXMuZGlzYWJsZUF1dG9TY3JvbGxpbmcgPSBmdW5jdGlvbigpIHtcbiAgICBhdXRvU2Nyb2xsaW5nRW5hYmxlZCA9IGZhbHNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2Mgc2VydmljZVxuICAgKiBAbmFtZSAkYW5jaG9yU2Nyb2xsXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqIEByZXF1aXJlcyAkd2luZG93XG4gICAqIEByZXF1aXJlcyAkbG9jYXRpb25cbiAgICogQHJlcXVpcmVzICRyb290U2NvcGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFdoZW4gY2FsbGVkLCBpdCBzY3JvbGxzIHRvIHRoZSBlbGVtZW50IHJlbGF0ZWQgdG8gdGhlIHNwZWNpZmllZCBgaGFzaGAgb3IgKGlmIG9taXR0ZWQpIHRvIHRoZVxuICAgKiBjdXJyZW50IHZhbHVlIG9mIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSwgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBzcGVjaWZpZWRcbiAgICogaW4gdGhlXG4gICAqIFtIVE1MNSBzcGVjXShodHRwOi8vd3d3LnczLm9yZy9odG1sL3dnL2RyYWZ0cy9odG1sL21hc3Rlci9icm93c2Vycy5odG1sI3RoZS1pbmRpY2F0ZWQtcGFydC1vZi10aGUtZG9jdW1lbnQpLlxuICAgKlxuICAgKiBJdCBhbHNvIHdhdGNoZXMgdGhlIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSBhbmQgYXV0b21hdGljYWxseSBzY3JvbGxzIHRvXG4gICAqIG1hdGNoIGFueSBhbmNob3Igd2hlbmV2ZXIgaXQgY2hhbmdlcy4gVGhpcyBjYW4gYmUgZGlzYWJsZWQgYnkgY2FsbGluZ1xuICAgKiB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbFByb3ZpZGVyI2Rpc2FibGVBdXRvU2Nyb2xsaW5nICRhbmNob3JTY3JvbGxQcm92aWRlci5kaXNhYmxlQXV0b1Njcm9sbGluZygpfS5cbiAgICpcbiAgICogQWRkaXRpb25hbGx5LCB5b3UgY2FuIHVzZSBpdHMge0BsaW5rIG5nLiRhbmNob3JTY3JvbGwjeU9mZnNldCB5T2Zmc2V0fSBwcm9wZXJ0eSB0byBzcGVjaWZ5IGFcbiAgICogdmVydGljYWwgc2Nyb2xsLW9mZnNldCAoZWl0aGVyIGZpeGVkIG9yIGR5bmFtaWMpLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IGhhc2ggVGhlIGhhc2ggc3BlY2lmeWluZyB0aGUgZWxlbWVudCB0byBzY3JvbGwgdG8uIElmIG9taXR0ZWQsIHRoZSB2YWx1ZSBvZlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAge0BsaW5rIG5nLiRsb2NhdGlvbiNoYXNoICRsb2NhdGlvbi5oYXNoKCl9IHdpbGwgYmUgdXNlZC5cbiAgICpcbiAgICogQHByb3BlcnR5IHsobnVtYmVyfGZ1bmN0aW9ufGpxTGl0ZSl9IHlPZmZzZXRcbiAgICogSWYgc2V0LCBzcGVjaWZpZXMgYSB2ZXJ0aWNhbCBzY3JvbGwtb2Zmc2V0LiBUaGlzIGlzIG9mdGVuIHVzZWZ1bCB3aGVuIHRoZXJlIGFyZSBmaXhlZFxuICAgKiBwb3NpdGlvbmVkIGVsZW1lbnRzIGF0IHRoZSB0b3Agb2YgdGhlIHBhZ2UsIHN1Y2ggYXMgbmF2YmFycywgaGVhZGVycyBldGMuXG4gICAqXG4gICAqIGB5T2Zmc2V0YCBjYW4gYmUgc3BlY2lmaWVkIGluIHZhcmlvdXMgd2F5czpcbiAgICogLSAqKm51bWJlcioqOiBBIGZpeGVkIG51bWJlciBvZiBwaXhlbHMgdG8gYmUgdXNlZCBhcyBvZmZzZXQuPGJyIC8+PGJyIC8+XG4gICAqIC0gKipmdW5jdGlvbioqOiBBIGdldHRlciBmdW5jdGlvbiBjYWxsZWQgZXZlcnl0aW1lIGAkYW5jaG9yU2Nyb2xsKClgIGlzIGV4ZWN1dGVkLiBNdXN0IHJldHVyblxuICAgKiAgIGEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgb2Zmc2V0IChpbiBwaXhlbHMpLjxiciAvPjxiciAvPlxuICAgKiAtICoqanFMaXRlKio6IEEganFMaXRlL2pRdWVyeSBlbGVtZW50IHRvIGJlIHVzZWQgZm9yIHNwZWNpZnlpbmcgdGhlIG9mZnNldC4gVGhlIGRpc3RhbmNlIGZyb21cbiAgICogICB0aGUgdG9wIG9mIHRoZSBwYWdlIHRvIHRoZSBlbGVtZW50J3MgYm90dG9tIHdpbGwgYmUgdXNlZCBhcyBvZmZzZXQuPGJyIC8+XG4gICAqICAgKipOb3RlKio6IFRoZSBlbGVtZW50IHdpbGwgYmUgdGFrZW4gaW50byBhY2NvdW50IG9ubHkgYXMgbG9uZyBhcyBpdHMgYHBvc2l0aW9uYCBpcyBzZXQgdG9cbiAgICogICBgZml4ZWRgLiBUaGlzIG9wdGlvbiBpcyB1c2VmdWwsIHdoZW4gZGVhbGluZyB3aXRoIHJlc3BvbnNpdmUgbmF2YmFycy9oZWFkZXJzIHRoYXQgYWRqdXN0XG4gICAqICAgdGhlaXIgaGVpZ2h0IGFuZC9vciBwb3NpdGlvbmluZyBhY2NvcmRpbmcgdG8gdGhlIHZpZXdwb3J0J3Mgc2l6ZS5cbiAgICpcbiAgICogPGJyIC8+XG4gICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAqIEluIG9yZGVyIGZvciBgeU9mZnNldGAgdG8gd29yayBwcm9wZXJseSwgc2Nyb2xsaW5nIHNob3VsZCB0YWtlIHBsYWNlIG9uIHRoZSBkb2N1bWVudCdzIHJvb3QgYW5kXG4gICAqIG5vdCBzb21lIGNoaWxkIGVsZW1lbnQuXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBtb2R1bGU9XCJhbmNob3JTY3JvbGxFeGFtcGxlXCI+XG4gICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxkaXYgaWQ9XCJzY3JvbGxBcmVhXCIgbmctY29udHJvbGxlcj1cIlNjcm9sbENvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGEgbmctY2xpY2s9XCJnb3RvQm90dG9tKClcIj5HbyB0byBib3R0b208L2E+XG4gICAgICAgICAgIDxhIGlkPVwiYm90dG9tXCI+PC9hPiBZb3UncmUgYXQgdGhlIGJvdHRvbSFcbiAgICAgICAgIDwvZGl2PlxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnYW5jaG9yU2Nyb2xsRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignU2Nyb2xsQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRsb2NhdGlvbicsICckYW5jaG9yU2Nyb2xsJyxcbiAgICAgICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sICRhbmNob3JTY3JvbGwpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5nb3RvQm90dG9tID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgbG9jYXRpb24uaGFzaCB0byB0aGUgaWQgb2ZcbiAgICAgICAgICAgICAgICAgLy8gdGhlIGVsZW1lbnQgeW91IHdpc2ggdG8gc2Nyb2xsIHRvLlxuICAgICAgICAgICAgICAgICAkbG9jYXRpb24uaGFzaCgnYm90dG9tJyk7XG5cbiAgICAgICAgICAgICAgICAgLy8gY2FsbCAkYW5jaG9yU2Nyb2xsKClcbiAgICAgICAgICAgICAgICAgJGFuY2hvclNjcm9sbCgpO1xuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAgICNzY3JvbGxBcmVhIHtcbiAgICAgICAgICAgaGVpZ2h0OiAyODBweDtcbiAgICAgICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICAgICB9XG5cbiAgICAgICAgICNib3R0b20ge1xuICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgbWFyZ2luLXRvcDogMjAwMHB4O1xuICAgICAgICAgfVxuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKlxuICAgKiA8aHIgLz5cbiAgICogVGhlIGV4YW1wbGUgYmVsb3cgaWxsdXN0cmF0ZXMgdGhlIHVzZSBvZiBhIHZlcnRpY2FsIHNjcm9sbC1vZmZzZXQgKHNwZWNpZmllZCBhcyBhIGZpeGVkIHZhbHVlKS5cbiAgICogU2VlIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsI3lPZmZzZXQgJGFuY2hvclNjcm9sbC55T2Zmc2V0fSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBtb2R1bGU9XCJhbmNob3JTY3JvbGxPZmZzZXRFeGFtcGxlXCI+XG4gICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxkaXYgY2xhc3M9XCJmaXhlZC1oZWFkZXJcIiBuZy1jb250cm9sbGVyPVwiaGVhZGVyQ3RybFwiPlxuICAgICAgICAgICA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJnb3RvQW5jaG9yKHgpXCIgbmctcmVwZWF0PVwieCBpbiBbMSwyLDMsNCw1XVwiPlxuICAgICAgICAgICAgIEdvIHRvIGFuY2hvciB7e3h9fVxuICAgICAgICAgICA8L2E+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICAgIDxkaXYgaWQ9XCJhbmNob3J7e3h9fVwiIGNsYXNzPVwiYW5jaG9yXCIgbmctcmVwZWF0PVwieCBpbiBbMSwyLDMsNCw1XVwiPlxuICAgICAgICAgICBBbmNob3Ige3t4fX0gb2YgNVxuICAgICAgICAgPC9kaXY+XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdhbmNob3JTY3JvbGxPZmZzZXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5ydW4oWyckYW5jaG9yU2Nyb2xsJywgZnVuY3Rpb24oJGFuY2hvclNjcm9sbCkge1xuICAgICAgICAgICAgICRhbmNob3JTY3JvbGwueU9mZnNldCA9IDUwOyAgIC8vIGFsd2F5cyBzY3JvbGwgYnkgNTAgZXh0cmEgcGl4ZWxzXG4gICAgICAgICAgIH1dKVxuICAgICAgICAgICAuY29udHJvbGxlcignaGVhZGVyQ3RybCcsIFsnJGFuY2hvclNjcm9sbCcsICckbG9jYXRpb24nLCAnJHNjb3BlJyxcbiAgICAgICAgICAgICBmdW5jdGlvbiAoJGFuY2hvclNjcm9sbCwgJGxvY2F0aW9uLCAkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5nb3RvQW5jaG9yID0gZnVuY3Rpb24oeCkge1xuICAgICAgICAgICAgICAgICB2YXIgbmV3SGFzaCA9ICdhbmNob3InICsgeDtcbiAgICAgICAgICAgICAgICAgaWYgKCRsb2NhdGlvbi5oYXNoKCkgIT09IG5ld0hhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAvLyBzZXQgdGhlICRsb2NhdGlvbi5oYXNoIHRvIGBuZXdIYXNoYCBhbmRcbiAgICAgICAgICAgICAgICAgICAvLyAkYW5jaG9yU2Nyb2xsIHdpbGwgYXV0b21hdGljYWxseSBzY3JvbGwgdG8gaXRcbiAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24uaGFzaCgnYW5jaG9yJyArIHgpO1xuICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgIC8vIGNhbGwgJGFuY2hvclNjcm9sbCgpIGV4cGxpY2l0bHksXG4gICAgICAgICAgICAgICAgICAgLy8gc2luY2UgJGxvY2F0aW9uLmhhc2ggaGFzbid0IGNoYW5nZWRcbiAgICAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsKCk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICBdKTtcbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgICAgYm9keSB7XG4gICAgICAgICAgIHBhZGRpbmctdG9wOiA1MHB4O1xuICAgICAgICAgfVxuXG4gICAgICAgICAuYW5jaG9yIHtcbiAgICAgICAgICAgYm9yZGVyOiAycHggZGFzaGVkIERhcmtPcmNoaWQ7XG4gICAgICAgICAgIHBhZGRpbmc6IDEwcHggMTBweCAyMDBweCAxMHB4O1xuICAgICAgICAgfVxuXG4gICAgICAgICAuZml4ZWQtaGVhZGVyIHtcbiAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjIpO1xuICAgICAgICAgICBoZWlnaHQ6IDUwcHg7XG4gICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgICAgdG9wOiAwOyBsZWZ0OiAwOyByaWdodDogMDtcbiAgICAgICAgIH1cblxuICAgICAgICAgLmZpeGVkLWhlYWRlciA+IGEge1xuICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgIG1hcmdpbjogNXB4IDE1cHg7XG4gICAgICAgICB9XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJGxvY2F0aW9uJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbigkd2luZG93LCAkbG9jYXRpb24sICRyb290U2NvcGUpIHtcbiAgICB2YXIgZG9jdW1lbnQgPSAkd2luZG93LmRvY3VtZW50O1xuXG4gICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGdldCBmaXJzdCBhbmNob3IgZnJvbSBhIE5vZGVMaXN0XG4gICAgLy8gKHVzaW5nIGBBcnJheSNzb21lKClgIGluc3RlYWQgb2YgYGFuZ3VsYXIjZm9yRWFjaCgpYCBzaW5jZSBpdCdzIG1vcmUgcGVyZm9ybWFudFxuICAgIC8vICBhbmQgd29ya2luZyBpbiBhbGwgc3VwcG9ydGVkIGJyb3dzZXJzLilcbiAgICBmdW5jdGlvbiBnZXRGaXJzdEFuY2hvcihsaXN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbnVsbDtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5zb21lLmNhbGwobGlzdCwgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICBpZiAobm9kZU5hbWVfKGVsZW1lbnQpID09PSAnYScpIHtcbiAgICAgICAgICByZXN1bHQgPSBlbGVtZW50O1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0WU9mZnNldCgpIHtcblxuICAgICAgdmFyIG9mZnNldCA9IHNjcm9sbC55T2Zmc2V0O1xuXG4gICAgICBpZiAoaXNGdW5jdGlvbihvZmZzZXQpKSB7XG4gICAgICAgIG9mZnNldCA9IG9mZnNldCgpO1xuICAgICAgfSBlbHNlIGlmIChpc0VsZW1lbnQob2Zmc2V0KSkge1xuICAgICAgICB2YXIgZWxlbSA9IG9mZnNldFswXTtcbiAgICAgICAgdmFyIHN0eWxlID0gJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW0pO1xuICAgICAgICBpZiAoc3R5bGUucG9zaXRpb24gIT09ICdmaXhlZCcpIHtcbiAgICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFpc051bWJlcihvZmZzZXQpKSB7XG4gICAgICAgIG9mZnNldCA9IDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2Nyb2xsVG8oZWxlbSkge1xuICAgICAgaWYgKGVsZW0pIHtcbiAgICAgICAgZWxlbS5zY3JvbGxJbnRvVmlldygpO1xuXG4gICAgICAgIHZhciBvZmZzZXQgPSBnZXRZT2Zmc2V0KCk7XG5cbiAgICAgICAgaWYgKG9mZnNldCkge1xuICAgICAgICAgIC8vIGBvZmZzZXRgIGlzIHRoZSBudW1iZXIgb2YgcGl4ZWxzIHdlIHNob3VsZCBzY3JvbGwgVVAgaW4gb3JkZXIgdG8gYWxpZ24gYGVsZW1gIHByb3Blcmx5LlxuICAgICAgICAgIC8vIFRoaXMgaXMgdHJ1ZSBPTkxZIGlmIHRoZSBjYWxsIHRvIGBlbGVtLnNjcm9sbEludG9WaWV3KClgIGluaXRpYWxseSBhbGlnbnMgYGVsZW1gIGF0IHRoZVxuICAgICAgICAgIC8vIHRvcCBvZiB0aGUgdmlld3BvcnQuXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBJRiB0aGUgbnVtYmVyIG9mIHBpeGVscyBmcm9tIHRoZSB0b3Agb2YgYGVsZW1gIHRvIHRoZSBlbmQgb2YgdGhlIHBhZ2UncyBjb250ZW50IGlzIGxlc3NcbiAgICAgICAgICAvLyB0aGFuIHRoZSBoZWlnaHQgb2YgdGhlIHZpZXdwb3J0LCB0aGVuIGBlbGVtLnNjcm9sbEludG9WaWV3KClgIHdpbGwgYWxpZ24gdGhlIGBlbGVtYCBzb21lXG4gICAgICAgICAgLy8gd2F5IGRvd24gdGhlIHBhZ2UuXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBUaGlzIGlzIG9mdGVuIHRoZSBjYXNlIGZvciBlbGVtZW50cyBuZWFyIHRoZSBib3R0b20gb2YgdGhlIHBhZ2UuXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBJbiBzdWNoIGNhc2VzIHdlIGRvIG5vdCBuZWVkIHRvIHNjcm9sbCB0aGUgd2hvbGUgYG9mZnNldGAgdXAsIGp1c3QgdGhlIGRpZmZlcmVuY2UgYmV0d2VlblxuICAgICAgICAgIC8vIHRoZSB0b3Agb2YgdGhlIGVsZW1lbnQgYW5kIHRoZSBvZmZzZXQsIHdoaWNoIGlzIGVub3VnaCB0byBhbGlnbiB0aGUgdG9wIG9mIGBlbGVtYCBhdCB0aGVcbiAgICAgICAgICAvLyBkZXNpcmVkIHBvc2l0aW9uLlxuICAgICAgICAgIHZhciBlbGVtVG9wID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICAgICAgJHdpbmRvdy5zY3JvbGxCeSgwLCBlbGVtVG9wIC0gb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY3JvbGwoaGFzaCkge1xuICAgICAgaGFzaCA9IGlzU3RyaW5nKGhhc2gpID8gaGFzaCA6ICRsb2NhdGlvbi5oYXNoKCk7XG4gICAgICB2YXIgZWxtO1xuXG4gICAgICAvLyBlbXB0eSBoYXNoLCBzY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZVxuICAgICAgaWYgKCFoYXNoKSBzY3JvbGxUbyhudWxsKTtcblxuICAgICAgLy8gZWxlbWVudCB3aXRoIGdpdmVuIGlkXG4gICAgICBlbHNlIGlmICgoZWxtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaGFzaCkpKSBzY3JvbGxUbyhlbG0pO1xuXG4gICAgICAvLyBmaXJzdCBhbmNob3Igd2l0aCBnaXZlbiBuYW1lIDotRFxuICAgICAgZWxzZSBpZiAoKGVsbSA9IGdldEZpcnN0QW5jaG9yKGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKGhhc2gpKSkpIHNjcm9sbFRvKGVsbSk7XG5cbiAgICAgIC8vIG5vIGVsZW1lbnQgYW5kIGhhc2ggPT0gJ3RvcCcsIHNjcm9sbCB0byB0aGUgdG9wIG9mIHRoZSBwYWdlXG4gICAgICBlbHNlIGlmIChoYXNoID09PSAndG9wJykgc2Nyb2xsVG8obnVsbCk7XG4gICAgfVxuXG4gICAgLy8gZG9lcyBub3Qgc2Nyb2xsIHdoZW4gdXNlciBjbGlja3Mgb24gYW5jaG9yIGxpbmsgdGhhdCBpcyBjdXJyZW50bHkgb25cbiAgICAvLyAobm8gdXJsIGNoYW5nZSwgbm8gJGxvY2F0aW9uLmhhc2goKSBjaGFuZ2UpLCBicm93c2VyIG5hdGl2ZSBkb2VzIHNjcm9sbFxuICAgIGlmIChhdXRvU2Nyb2xsaW5nRW5hYmxlZCkge1xuICAgICAgJHJvb3RTY29wZS4kd2F0Y2goZnVuY3Rpb24gYXV0b1Njcm9sbFdhdGNoKCkge3JldHVybiAkbG9jYXRpb24uaGFzaCgpO30sXG4gICAgICAgIGZ1bmN0aW9uIGF1dG9TY3JvbGxXYXRjaEFjdGlvbihuZXdWYWwsIG9sZFZhbCkge1xuICAgICAgICAgIC8vIHNraXAgdGhlIGluaXRpYWwgc2Nyb2xsIGlmICRsb2NhdGlvbi5oYXNoIGlzIGVtcHR5XG4gICAgICAgICAgaWYgKG5ld1ZhbCA9PT0gb2xkVmFsICYmIG5ld1ZhbCA9PT0gJycpIHJldHVybjtcblxuICAgICAgICAgIGpxTGl0ZURvY3VtZW50TG9hZGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKHNjcm9sbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBzY3JvbGw7XG4gIH1dO1xufVxuXG52YXIgJGFuaW1hdGVNaW5FcnIgPSBtaW5FcnIoJyRhbmltYXRlJyk7XG52YXIgRUxFTUVOVF9OT0RFID0gMTtcbnZhciBOR19BTklNQVRFX0NMQVNTTkFNRSA9ICduZy1hbmltYXRlJztcblxuZnVuY3Rpb24gbWVyZ2VDbGFzc2VzKGEsYikge1xuICBpZiAoIWEgJiYgIWIpIHJldHVybiAnJztcbiAgaWYgKCFhKSByZXR1cm4gYjtcbiAgaWYgKCFiKSByZXR1cm4gYTtcbiAgaWYgKGlzQXJyYXkoYSkpIGEgPSBhLmpvaW4oJyAnKTtcbiAgaWYgKGlzQXJyYXkoYikpIGIgPSBiLmpvaW4oJyAnKTtcbiAgcmV0dXJuIGEgKyAnICcgKyBiO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0RWxlbWVudE5vZGUoZWxlbWVudCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZWxtID0gZWxlbWVudFtpXTtcbiAgICBpZiAoZWxtLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgIHJldHVybiBlbG07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNwbGl0Q2xhc3NlcyhjbGFzc2VzKSB7XG4gIGlmIChpc1N0cmluZyhjbGFzc2VzKSkge1xuICAgIGNsYXNzZXMgPSBjbGFzc2VzLnNwbGl0KCcgJyk7XG4gIH1cblxuICAvLyBVc2UgY3JlYXRlTWFwKCkgdG8gcHJldmVudCBjbGFzcyBhc3N1bXB0aW9ucyBpbnZvbHZpbmcgcHJvcGVydHkgbmFtZXMgaW5cbiAgLy8gT2JqZWN0LnByb3RvdHlwZVxuICB2YXIgb2JqID0gY3JlYXRlTWFwKCk7XG4gIGZvckVhY2goY2xhc3NlcywgZnVuY3Rpb24oa2xhc3MpIHtcbiAgICAvLyBzb21ldGltZXMgdGhlIHNwbGl0IGxlYXZlcyBlbXB0eSBzdHJpbmcgdmFsdWVzXG4gICAgLy8gaW5jYXNlIGV4dHJhIHNwYWNlcyB3ZXJlIGFwcGxpZWQgdG8gdGhlIG9wdGlvbnNcbiAgICBpZiAoa2xhc3MubGVuZ3RoKSB7XG4gICAgICBvYmpba2xhc3NdID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb2JqO1xufVxuXG4vLyBpZiBhbnkgb3RoZXIgdHlwZSBvZiBvcHRpb25zIHZhbHVlIGJlc2lkZXMgYW4gT2JqZWN0IHZhbHVlIGlzXG4vLyBwYXNzZWQgaW50byB0aGUgJGFuaW1hdGUubWV0aG9kKCkgYW5pbWF0aW9uIHRoZW4gdGhpcyBoZWxwZXIgY29kZVxuLy8gd2lsbCBiZSBydW4gd2hpY2ggd2lsbCBpZ25vcmUgaXQuIFdoaWxlIHRoaXMgcGF0Y2ggaXMgbm90IHRoZVxuLy8gZ3JlYXRlc3Qgc29sdXRpb24gdG8gdGhpcywgYSBsb3Qgb2YgZXhpc3RpbmcgcGx1Z2lucyBkZXBlbmQgb25cbi8vICRhbmltYXRlIHRvIGVpdGhlciBjYWxsIHRoZSBjYWxsYmFjayAoPCAxLjIpIG9yIHJldHVybiBhIHByb21pc2Vcbi8vIHRoYXQgY2FuIGJlIGNoYW5nZWQuIFRoaXMgaGVscGVyIGZ1bmN0aW9uIGVuc3VyZXMgdGhhdCB0aGUgb3B0aW9uc1xuLy8gYXJlIHdpcGVkIGNsZWFuIGluY2FzZSBhIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIHByb3ZpZGVkLlxuZnVuY3Rpb24gcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KG9wdGlvbnMpXG4gICAgICA/IG9wdGlvbnNcbiAgICAgIDoge307XG59XG5cbnZhciAkJENvcmVBbmltYXRlUnVubmVyUHJvdmlkZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckcScsICckJHJBRicsIGZ1bmN0aW9uKCRxLCAkJHJBRikge1xuICAgIGZ1bmN0aW9uIEFuaW1hdGVSdW5uZXIoKSB7fVxuICAgIEFuaW1hdGVSdW5uZXIuYWxsID0gbm9vcDtcbiAgICBBbmltYXRlUnVubmVyLmNoYWluID0gbm9vcDtcbiAgICBBbmltYXRlUnVubmVyLnByb3RvdHlwZSA9IHtcbiAgICAgIGVuZDogbm9vcCxcbiAgICAgIGNhbmNlbDogbm9vcCxcbiAgICAgIHJlc3VtZTogbm9vcCxcbiAgICAgIHBhdXNlOiBub29wLFxuICAgICAgY29tcGxldGU6IG5vb3AsXG4gICAgICB0aGVuOiBmdW5jdGlvbihwYXNzLCBmYWlsKSB7XG4gICAgICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICAgICAgJCRyQUYoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLnRoZW4ocGFzcywgZmFpbCk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQW5pbWF0ZVJ1bm5lcjtcbiAgfV07XG59O1xuXG4vLyB0aGlzIGlzIHByZWZpeGVkIHdpdGggQ29yZSBzaW5jZSBpdCBjb25mbGljdHMgd2l0aFxuLy8gdGhlIGFuaW1hdGVRdWV1ZVByb3ZpZGVyIGRlZmluZWQgaW4gbmdBbmltYXRlL2FuaW1hdGVRdWV1ZS5qc1xudmFyICQkQ29yZUFuaW1hdGVRdWV1ZVByb3ZpZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwb3N0RGlnZXN0UXVldWUgPSBuZXcgSGFzaE1hcCgpO1xuICB2YXIgcG9zdERpZ2VzdEVsZW1lbnRzID0gW107XG5cbiAgdGhpcy4kZ2V0ID0gWyckJEFuaW1hdGVSdW5uZXInLCAnJHJvb3RTY29wZScsXG4gICAgICAgZnVuY3Rpb24oJCRBbmltYXRlUnVubmVyLCAgICRyb290U2NvcGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZW5hYmxlZDogbm9vcCxcbiAgICAgIG9uOiBub29wLFxuICAgICAgb2ZmOiBub29wLFxuICAgICAgcGluOiBub29wLFxuXG4gICAgICBwdXNoOiBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgb3B0aW9ucywgZG9tT3BlcmF0aW9uKSB7XG4gICAgICAgIGRvbU9wZXJhdGlvbiAgICAgICAgJiYgZG9tT3BlcmF0aW9uKCk7XG5cbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIG9wdGlvbnMuZnJvbSAgICAgICAgJiYgZWxlbWVudC5jc3Mob3B0aW9ucy5mcm9tKTtcbiAgICAgICAgb3B0aW9ucy50byAgICAgICAgICAmJiBlbGVtZW50LmNzcyhvcHRpb25zLnRvKTtcblxuICAgICAgICBpZiAob3B0aW9ucy5hZGRDbGFzcyB8fCBvcHRpb25zLnJlbW92ZUNsYXNzKSB7XG4gICAgICAgICAgYWRkUmVtb3ZlQ2xhc3Nlc1Bvc3REaWdlc3QoZWxlbWVudCwgb3B0aW9ucy5hZGRDbGFzcywgb3B0aW9ucy5yZW1vdmVDbGFzcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3ICQkQW5pbWF0ZVJ1bm5lcigpOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbiAgICAgIH1cbiAgICB9O1xuXG5cbiAgICBmdW5jdGlvbiB1cGRhdGVEYXRhKGRhdGEsIGNsYXNzZXMsIHZhbHVlKSB7XG4gICAgICB2YXIgY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgaWYgKGNsYXNzZXMpIHtcbiAgICAgICAgY2xhc3NlcyA9IGlzU3RyaW5nKGNsYXNzZXMpID8gY2xhc3Nlcy5zcGxpdCgnICcpIDpcbiAgICAgICAgICAgICAgICAgIGlzQXJyYXkoY2xhc3NlcykgPyBjbGFzc2VzIDogW107XG4gICAgICAgIGZvckVhY2goY2xhc3NlcywgZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICAgICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICBkYXRhW2NsYXNzTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNoYW5nZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlQ1NTQ2xhc3NDaGFuZ2VzKCkge1xuICAgICAgZm9yRWFjaChwb3N0RGlnZXN0RWxlbWVudHMsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGRhdGEgPSBwb3N0RGlnZXN0UXVldWUuZ2V0KGVsZW1lbnQpO1xuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgIHZhciBleGlzdGluZyA9IHNwbGl0Q2xhc3NlcyhlbGVtZW50LmF0dHIoJ2NsYXNzJykpO1xuICAgICAgICAgIHZhciB0b0FkZCA9ICcnO1xuICAgICAgICAgIHZhciB0b1JlbW92ZSA9ICcnO1xuICAgICAgICAgIGZvckVhY2goZGF0YSwgZnVuY3Rpb24oc3RhdHVzLCBjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIHZhciBoYXNDbGFzcyA9ICEhZXhpc3RpbmdbY2xhc3NOYW1lXTtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgIT09IGhhc0NsYXNzKSB7XG4gICAgICAgICAgICAgIGlmIChzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICB0b0FkZCArPSAodG9BZGQubGVuZ3RoID8gJyAnIDogJycpICsgY2xhc3NOYW1lO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRvUmVtb3ZlICs9ICh0b1JlbW92ZS5sZW5ndGggPyAnICcgOiAnJykgKyBjbGFzc05hbWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGZvckVhY2goZWxlbWVudCwgZnVuY3Rpb24oZWxtKSB7XG4gICAgICAgICAgICB0b0FkZCAgICAmJiBqcUxpdGVBZGRDbGFzcyhlbG0sIHRvQWRkKTtcbiAgICAgICAgICAgIHRvUmVtb3ZlICYmIGpxTGl0ZVJlbW92ZUNsYXNzKGVsbSwgdG9SZW1vdmUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHBvc3REaWdlc3RRdWV1ZS5yZW1vdmUoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcG9zdERpZ2VzdEVsZW1lbnRzLmxlbmd0aCA9IDA7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBhZGRSZW1vdmVDbGFzc2VzUG9zdERpZ2VzdChlbGVtZW50LCBhZGQsIHJlbW92ZSkge1xuICAgICAgdmFyIGRhdGEgPSBwb3N0RGlnZXN0UXVldWUuZ2V0KGVsZW1lbnQpIHx8IHt9O1xuXG4gICAgICB2YXIgY2xhc3Nlc0FkZGVkID0gdXBkYXRlRGF0YShkYXRhLCBhZGQsIHRydWUpO1xuICAgICAgdmFyIGNsYXNzZXNSZW1vdmVkID0gdXBkYXRlRGF0YShkYXRhLCByZW1vdmUsIGZhbHNlKTtcblxuICAgICAgaWYgKGNsYXNzZXNBZGRlZCB8fCBjbGFzc2VzUmVtb3ZlZCkge1xuXG4gICAgICAgIHBvc3REaWdlc3RRdWV1ZS5wdXQoZWxlbWVudCwgZGF0YSk7XG4gICAgICAgIHBvc3REaWdlc3RFbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuXG4gICAgICAgIGlmIChwb3N0RGlnZXN0RWxlbWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kJHBvc3REaWdlc3QoaGFuZGxlQ1NTQ2xhc3NDaGFuZ2VzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfV07XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGFuaW1hdGVQcm92aWRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiAkYW5pbWF0ZSB0aGF0IGRvZXNuJ3QgcGVyZm9ybSBhbnkgYW5pbWF0aW9ucywgaW5zdGVhZCBqdXN0XG4gKiBzeW5jaHJvbm91c2x5IHBlcmZvcm1zIERPTSB1cGRhdGVzIGFuZCByZXNvbHZlcyB0aGUgcmV0dXJuZWQgcnVubmVyIHByb21pc2UuXG4gKlxuICogSW4gb3JkZXIgdG8gZW5hYmxlIGFuaW1hdGlvbnMgdGhlIGBuZ0FuaW1hdGVgIG1vZHVsZSBoYXMgdG8gYmUgbG9hZGVkLlxuICpcbiAqIFRvIHNlZSB0aGUgZnVuY3Rpb25hbCBpbXBsZW1lbnRhdGlvbiBjaGVjayBvdXQgYHNyYy9uZ0FuaW1hdGUvYW5pbWF0ZS5qc2AuXG4gKi9cbnZhciAkQW5pbWF0ZVByb3ZpZGVyID0gWyckcHJvdmlkZScsIGZ1bmN0aW9uKCRwcm92aWRlKSB7XG4gIHZhciBwcm92aWRlciA9IHRoaXM7XG5cbiAgdGhpcy4kJHJlZ2lzdGVyZWRBbmltYXRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGFuaW1hdGVQcm92aWRlciNyZWdpc3RlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmVnaXN0ZXJzIGEgbmV3IGluamVjdGFibGUgYW5pbWF0aW9uIGZhY3RvcnkgZnVuY3Rpb24uIFRoZSBmYWN0b3J5IGZ1bmN0aW9uIHByb2R1Y2VzIHRoZVxuICAgKiBhbmltYXRpb24gb2JqZWN0IHdoaWNoIGNvbnRhaW5zIGNhbGxiYWNrIGZ1bmN0aW9ucyBmb3IgZWFjaCBldmVudCB0aGF0IGlzIGV4cGVjdGVkIHRvIGJlXG4gICAqIGFuaW1hdGVkLlxuICAgKlxuICAgKiAgICogYGV2ZW50Rm5gOiBgZnVuY3Rpb24oZWxlbWVudCwgLi4uICwgZG9uZUZ1bmN0aW9uLCBvcHRpb25zKWBcbiAgICogICBUaGUgZWxlbWVudCB0byBhbmltYXRlLCB0aGUgYGRvbmVGdW5jdGlvbmAgYW5kIHRoZSBvcHRpb25zIGZlZCBpbnRvIHRoZSBhbmltYXRpb24uIERlcGVuZGluZ1xuICAgKiAgIG9uIHRoZSB0eXBlIG9mIGFuaW1hdGlvbiBhZGRpdGlvbmFsIGFyZ3VtZW50cyB3aWxsIGJlIGluamVjdGVkIGludG8gdGhlIGFuaW1hdGlvbiBmdW5jdGlvbi4gVGhlXG4gICAqICAgbGlzdCBiZWxvdyBleHBsYWlucyB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlcyBmb3IgdGhlIGRpZmZlcmVudCBhbmltYXRpb24gbWV0aG9kczpcbiAgICpcbiAgICogICAtIHNldENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBhZGRlZENsYXNzZXMsIHJlbW92ZWRDbGFzc2VzLCBkb25lRnVuY3Rpb24sIG9wdGlvbnMpXG4gICAqICAgLSBhZGRDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgYWRkZWRDbGFzc2VzLCBkb25lRnVuY3Rpb24sIG9wdGlvbnMpXG4gICAqICAgLSByZW1vdmVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgcmVtb3ZlZENsYXNzZXMsIGRvbmVGdW5jdGlvbiwgb3B0aW9ucylcbiAgICogICAtIGVudGVyLCBsZWF2ZSwgbW92ZTogZnVuY3Rpb24oZWxlbWVudCwgZG9uZUZ1bmN0aW9uLCBvcHRpb25zKVxuICAgKiAgIC0gYW5pbWF0ZTogZnVuY3Rpb24oZWxlbWVudCwgZnJvbVN0eWxlcywgdG9TdHlsZXMsIGRvbmVGdW5jdGlvbiwgb3B0aW9ucylcbiAgICpcbiAgICogICBNYWtlIHN1cmUgdG8gdHJpZ2dlciB0aGUgYGRvbmVGdW5jdGlvbmAgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGZ1bGx5IGNvbXBsZXRlLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgIHJldHVybiB7XG4gICAqICAgICAvL2VudGVyLCBsZWF2ZSwgbW92ZSBzaWduYXR1cmVcbiAgICogICAgIGV2ZW50Rm4gOiBmdW5jdGlvbihlbGVtZW50LCBkb25lLCBvcHRpb25zKSB7XG4gICAqICAgICAgIC8vY29kZSB0byBydW4gdGhlIGFuaW1hdGlvblxuICAgKiAgICAgICAvL29uY2UgY29tcGxldGUsIHRoZW4gcnVuIGRvbmUoKVxuICAgKiAgICAgICByZXR1cm4gZnVuY3Rpb24gZW5kRnVuY3Rpb24od2FzQ2FuY2VsbGVkKSB7XG4gICAqICAgICAgICAgLy9jb2RlIHRvIGNhbmNlbCB0aGUgYW5pbWF0aW9uXG4gICAqICAgICAgIH1cbiAgICogICAgIH1cbiAgICogICB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgYW5pbWF0aW9uICh0aGlzIGlzIHdoYXQgdGhlIGNsYXNzLWJhc2VkIENTUyB2YWx1ZSB3aWxsIGJlIGNvbXBhcmVkIHRvKS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmFjdG9yeSBUaGUgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgdG8gcmV0dXJuIHRoZSBhbmltYXRpb25cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuXG4gICAqL1xuICB0aGlzLnJlZ2lzdGVyID0gZnVuY3Rpb24obmFtZSwgZmFjdG9yeSkge1xuICAgIGlmIChuYW1lICYmIG5hbWUuY2hhckF0KDApICE9PSAnLicpIHtcbiAgICAgIHRocm93ICRhbmltYXRlTWluRXJyKCdub3Rjc2VsJywgXCJFeHBlY3RpbmcgY2xhc3Mgc2VsZWN0b3Igc3RhcnRpbmcgd2l0aCAnLicgZ290ICd7MH0nLlwiLCBuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIga2V5ID0gbmFtZSArICctYW5pbWF0aW9uJztcbiAgICBwcm92aWRlci4kJHJlZ2lzdGVyZWRBbmltYXRpb25zW25hbWUuc3Vic3RyKDEpXSA9IGtleTtcbiAgICAkcHJvdmlkZS5mYWN0b3J5KGtleSwgZmFjdG9yeSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGFuaW1hdGVQcm92aWRlciNjbGFzc05hbWVGaWx0ZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgYW5kL29yIHJldHVybnMgdGhlIENTUyBjbGFzcyByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyBjaGVja2VkIHdoZW4gcGVyZm9ybWluZ1xuICAgKiBhbiBhbmltYXRpb24uIFVwb24gYm9vdHN0cmFwIHRoZSBjbGFzc05hbWVGaWx0ZXIgdmFsdWUgaXMgbm90IHNldCBhdCBhbGwgYW5kIHdpbGxcbiAgICogdGhlcmVmb3JlIGVuYWJsZSAkYW5pbWF0ZSB0byBhdHRlbXB0IHRvIHBlcmZvcm0gYW4gYW5pbWF0aW9uIG9uIGFueSBlbGVtZW50IHRoYXQgaXMgdHJpZ2dlcmVkLlxuICAgKiBXaGVuIHNldHRpbmcgdGhlIGBjbGFzc05hbWVGaWx0ZXJgIHZhbHVlLCBhbmltYXRpb25zIHdpbGwgb25seSBiZSBwZXJmb3JtZWQgb24gZWxlbWVudHNcbiAgICogdGhhdCBzdWNjZXNzZnVsbHkgbWF0Y2ggdGhlIGZpbHRlciBleHByZXNzaW9uLiBUaGlzIGluIHR1cm4gY2FuIGJvb3N0IHBlcmZvcm1hbmNlXG4gICAqIGZvciBsb3ctcG93ZXJlZCBkZXZpY2VzIGFzIHdlbGwgYXMgYXBwbGljYXRpb25zIGNvbnRhaW5pbmcgYSBsb3Qgb2Ygc3RydWN0dXJhbCBvcGVyYXRpb25zLlxuICAgKiBAcGFyYW0ge1JlZ0V4cD19IGV4cHJlc3Npb24gVGhlIGNsYXNzTmFtZSBleHByZXNzaW9uIHdoaWNoIHdpbGwgYmUgY2hlY2tlZCBhZ2FpbnN0IGFsbCBhbmltYXRpb25zXG4gICAqIEByZXR1cm4ge1JlZ0V4cH0gVGhlIGN1cnJlbnQgQ1NTIGNsYXNzTmFtZSBleHByZXNzaW9uIHZhbHVlLiBJZiBudWxsIHRoZW4gdGhlcmUgaXMgbm8gZXhwcmVzc2lvbiB2YWx1ZVxuICAgKi9cbiAgdGhpcy5jbGFzc05hbWVGaWx0ZXIgPSBmdW5jdGlvbihleHByZXNzaW9uKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHRoaXMuJCRjbGFzc05hbWVGaWx0ZXIgPSAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIFJlZ0V4cCkgPyBleHByZXNzaW9uIDogbnVsbDtcbiAgICAgIGlmICh0aGlzLiQkY2xhc3NOYW1lRmlsdGVyKSB7XG4gICAgICAgIHZhciByZXNlcnZlZFJlZ2V4ID0gbmV3IFJlZ0V4cChcIihcXFxccyt8XFxcXC8pXCIgKyBOR19BTklNQVRFX0NMQVNTTkFNRSArIFwiKFxcXFxzK3xcXFxcLylcIik7XG4gICAgICAgIGlmIChyZXNlcnZlZFJlZ2V4LnRlc3QodGhpcy4kJGNsYXNzTmFtZUZpbHRlci50b1N0cmluZygpKSkge1xuICAgICAgICAgIHRocm93ICRhbmltYXRlTWluRXJyKCdub25nY2xzJywnJGFuaW1hdGVQcm92aWRlci5jbGFzc05hbWVGaWx0ZXIocmVnZXgpIHByb2hpYml0cyBhY2NlcHRpbmcgYSByZWdleCB2YWx1ZSB3aGljaCBtYXRjaGVzL2NvbnRhaW5zIHRoZSBcInswfVwiIENTUyBjbGFzcy4nLCBOR19BTklNQVRFX0NMQVNTTkFNRSk7XG5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy4kJGNsYXNzTmFtZUZpbHRlcjtcbiAgfTtcblxuICB0aGlzLiRnZXQgPSBbJyQkYW5pbWF0ZVF1ZXVlJywgZnVuY3Rpb24oJCRhbmltYXRlUXVldWUpIHtcbiAgICBmdW5jdGlvbiBkb21JbnNlcnQoZWxlbWVudCwgcGFyZW50RWxlbWVudCwgYWZ0ZXJFbGVtZW50KSB7XG4gICAgICAvLyBpZiBmb3Igc29tZSByZWFzb24gdGhlIHByZXZpb3VzIGVsZW1lbnQgd2FzIHJlbW92ZWRcbiAgICAgIC8vIGZyb20gdGhlIGRvbSBzb21ldGltZSBiZWZvcmUgdGhpcyBjb2RlIHJ1bnMgdGhlbiBsZXQnc1xuICAgICAgLy8ganVzdCBzdGljayB0byB1c2luZyB0aGUgcGFyZW50IGVsZW1lbnQgYXMgdGhlIGFuY2hvclxuICAgICAgaWYgKGFmdGVyRWxlbWVudCkge1xuICAgICAgICB2YXIgYWZ0ZXJOb2RlID0gZXh0cmFjdEVsZW1lbnROb2RlKGFmdGVyRWxlbWVudCk7XG4gICAgICAgIGlmIChhZnRlck5vZGUgJiYgIWFmdGVyTm9kZS5wYXJlbnROb2RlICYmICFhZnRlck5vZGUucHJldmlvdXNFbGVtZW50U2libGluZykge1xuICAgICAgICAgIGFmdGVyRWxlbWVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFmdGVyRWxlbWVudCA/IGFmdGVyRWxlbWVudC5hZnRlcihlbGVtZW50KSA6IHBhcmVudEVsZW1lbnQucHJlcGVuZChlbGVtZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAqIEBuYW1lICRhbmltYXRlXG4gICAgICogQGRlc2NyaXB0aW9uIFRoZSAkYW5pbWF0ZSBzZXJ2aWNlIGV4cG9zZXMgYSBzZXJpZXMgb2YgRE9NIHV0aWxpdHkgbWV0aG9kcyB0aGF0IHByb3ZpZGUgc3VwcG9ydFxuICAgICAqIGZvciBhbmltYXRpb24gaG9va3MuIFRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzIHRoZSBhcHBsaWNhdGlvbiBvZiBET00gb3BlcmF0aW9ucywgaG93ZXZlcixcbiAgICAgKiB3aGVuIGFuIGFuaW1hdGlvbiBpcyBkZXRlY3RlZCAoYW5kIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQpLCAkYW5pbWF0ZSB3aWxsIGRvIHRoZSBoZWF2eSBsaWZ0aW5nXG4gICAgICogdG8gZW5zdXJlIHRoYXQgYW5pbWF0aW9uIHJ1bnMgd2l0aCB0aGUgdHJpZ2dlcmVkIERPTSBvcGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0ICRhbmltYXRlIGRvZXNuJ3QgdHJpZ2dlciBhbnkgYW5pbWF0aW9ucy4gVGhpcyBpcyBiZWNhdXNlIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgaXNuJ3RcbiAgICAgKiBpbmNsdWRlZCBhbmQgb25seSB3aGVuIGl0IGlzIGFjdGl2ZSB0aGVuIHRoZSBhbmltYXRpb24gaG9va3MgdGhhdCBgJGFuaW1hdGVgIHRyaWdnZXJzIHdpbGwgYmVcbiAgICAgKiBmdW5jdGlvbmFsLiBPbmNlIGFjdGl2ZSB0aGVuIGFsbCBzdHJ1Y3R1cmFsIGBuZy1gIGRpcmVjdGl2ZXMgd2lsbCB0cmlnZ2VyIGFuaW1hdGlvbnMgYXMgdGhleSBwZXJmb3JtXG4gICAgICogdGhlaXIgRE9NLXJlbGF0ZWQgb3BlcmF0aW9ucyAoZW50ZXIsIGxlYXZlIGFuZCBtb3ZlKS4gT3RoZXIgZGlyZWN0aXZlcyBzdWNoIGFzIGBuZ0NsYXNzYCxcbiAgICAgKiBgbmdTaG93YCwgYG5nSGlkZWAgYW5kIGBuZ01lc3NhZ2VzYCBhbHNvIHByb3ZpZGUgc3VwcG9ydCBmb3IgYW5pbWF0aW9ucy5cbiAgICAgKlxuICAgICAqIEl0IGlzIHJlY29tbWVuZGVkIHRoYXQgdGhlYCRhbmltYXRlYCBzZXJ2aWNlIGlzIGFsd2F5cyB1c2VkIHdoZW4gZXhlY3V0aW5nIERPTS1yZWxhdGVkIHByb2NlZHVyZXMgd2l0aGluIGRpcmVjdGl2ZXMuXG4gICAgICpcbiAgICAgKiBUbyBsZWFybiBtb3JlIGFib3V0IGVuYWJsaW5nIGFuaW1hdGlvbiBzdXBwb3J0LCBjbGljayBoZXJlIHRvIHZpc2l0IHRoZVxuICAgICAqIHtAbGluayBuZ0FuaW1hdGUgbmdBbmltYXRlIG1vZHVsZSBwYWdlfS5cbiAgICAgKi9cbiAgICByZXR1cm4ge1xuICAgICAgLy8gd2UgZG9uJ3QgY2FsbCBpdCBkaXJlY3RseSBzaW5jZSBub24tZXhpc3RhbnQgYXJndW1lbnRzIG1heVxuICAgICAgLy8gYmUgaW50ZXJwcmV0ZWQgYXMgbnVsbCB3aXRoaW4gdGhlIHN1YiBlbmFibGVkIGZ1bmN0aW9uXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI29uXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIFNldHMgdXAgYW4gZXZlbnQgbGlzdGVuZXIgdG8gZmlyZSB3aGVuZXZlciB0aGUgYW5pbWF0aW9uIGV2ZW50IChlbnRlciwgbGVhdmUsIG1vdmUsIGV0Yy4uLilcbiAgICAgICAqICAgIGhhcyBmaXJlZCBvbiB0aGUgZ2l2ZW4gZWxlbWVudCBvciBhbW9uZyBhbnkgb2YgaXRzIGNoaWxkcmVuLiBPbmNlIHRoZSBsaXN0ZW5lciBpcyBmaXJlZCwgdGhlIHByb3ZpZGVkIGNhbGxiYWNrXG4gICAgICAgKiAgICBpcyBmaXJlZCB3aXRoIHRoZSBmb2xsb3dpbmcgcGFyYW1zOlxuICAgICAgICpcbiAgICAgICAqIGBgYGpzXG4gICAgICAgKiAkYW5pbWF0ZS5vbignZW50ZXInLCBjb250YWluZXIsXG4gICAgICAgKiAgICBmdW5jdGlvbiBjYWxsYmFjayhlbGVtZW50LCBwaGFzZSkge1xuICAgICAgICogICAgICAvLyBjb29sIHdlIGRldGVjdGVkIGFuIGVudGVyIGFuaW1hdGlvbiB3aXRoaW4gdGhlIGNvbnRhaW5lclxuICAgICAgICogICAgfVxuICAgICAgICogKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCB0aGUgYW5pbWF0aW9uIGV2ZW50IHRoYXQgd2lsbCBiZSBjYXB0dXJlZCAoZS5nLiBlbnRlciwgbGVhdmUsIG1vdmUsIGFkZENsYXNzLCByZW1vdmVDbGFzcywgZXRjLi4uKVxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgdGhlIGNvbnRhaW5lciBlbGVtZW50IHRoYXQgd2lsbCBjYXB0dXJlIGVhY2ggb2YgdGhlIGFuaW1hdGlvbiBldmVudHMgdGhhdCBhcmUgZmlyZWQgb24gaXRzZWxmXG4gICAgICAgKiAgICAgYXMgd2VsbCBhcyBhbW9uZyBpdHMgY2hpbGRyZW5cbiAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIHRoZSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZmlyZWQgd2hlbiB0aGUgbGlzdGVuZXIgaXMgdHJpZ2dlcmVkXG4gICAgICAgKlxuICAgICAgICogVGhlIGFyZ3VtZW50cyBwcmVzZW50IGluIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBhcmU6XG4gICAgICAgKiAqIGBlbGVtZW50YCAtIFRoZSBjYXB0dXJlZCBET00gZWxlbWVudCB0aGF0IHRoZSBhbmltYXRpb24gd2FzIGZpcmVkIG9uLlxuICAgICAgICogKiBgcGhhc2VgIC0gVGhlIHBoYXNlIG9mIHRoZSBhbmltYXRpb24uIFRoZSB0d28gcG9zc2libGUgcGhhc2VzIGFyZSAqKnN0YXJ0KiogKHdoZW4gdGhlIGFuaW1hdGlvbiBzdGFydHMpIGFuZCAqKmNsb3NlKiogKHdoZW4gaXQgZW5kcykuXG4gICAgICAgKi9cbiAgICAgIG9uOiAkJGFuaW1hdGVRdWV1ZS5vbixcblxuICAgICAgLyoqXG4gICAgICAgKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjb2ZmXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIERlcmVnaXN0ZXJzIGFuIGV2ZW50IGxpc3RlbmVyIGJhc2VkIG9uIHRoZSBldmVudCB3aGljaCBoYXMgYmVlbiBhc3NvY2lhdGVkIHdpdGggdGhlIHByb3ZpZGVkIGVsZW1lbnQuIFRoaXMgbWV0aG9kXG4gICAgICAgKiBjYW4gYmUgdXNlZCBpbiB0aHJlZSBkaWZmZXJlbnQgd2F5cyBkZXBlbmRpbmcgb24gdGhlIGFyZ3VtZW50czpcbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogLy8gcmVtb3ZlIGFsbCB0aGUgYW5pbWF0aW9uIGV2ZW50IGxpc3RlbmVycyBsaXN0ZW5pbmcgZm9yIGBlbnRlcmBcbiAgICAgICAqICRhbmltYXRlLm9mZignZW50ZXInKTtcbiAgICAgICAqXG4gICAgICAgKiAvLyByZW1vdmUgYWxsIHRoZSBhbmltYXRpb24gZXZlbnQgbGlzdGVuZXJzIGxpc3RlbmluZyBmb3IgYGVudGVyYCBvbiB0aGUgZ2l2ZW4gZWxlbWVudCBhbmQgaXRzIGNoaWxkcmVuXG4gICAgICAgKiAkYW5pbWF0ZS5vZmYoJ2VudGVyJywgY29udGFpbmVyKTtcbiAgICAgICAqXG4gICAgICAgKiAvLyByZW1vdmUgdGhlIGV2ZW50IGxpc3RlbmVyIGZ1bmN0aW9uIHByb3ZpZGVkIGJ5IGBsaXN0ZW5lckZuYCB0aGF0IGlzIHNldFxuICAgICAgICogLy8gdG8gbGlzdGVuIGZvciBgZW50ZXJgIG9uIHRoZSBnaXZlbiBgZWxlbWVudGAgYXMgd2VsbCBhcyBpdHMgY2hpbGRyZW5cbiAgICAgICAqICRhbmltYXRlLm9mZignZW50ZXInLCBjb250YWluZXIsIGNhbGxiYWNrKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCB0aGUgYW5pbWF0aW9uIGV2ZW50IChlLmcuIGVudGVyLCBsZWF2ZSwgbW92ZSwgYWRkQ2xhc3MsIHJlbW92ZUNsYXNzLCBldGMuLi4pXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnQ9fSBjb250YWluZXIgdGhlIGNvbnRhaW5lciBlbGVtZW50IHRoZSBldmVudCBsaXN0ZW5lciB3YXMgcGxhY2VkIG9uXG4gICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gY2FsbGJhY2sgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2FzIHJlZ2lzdGVyZWQgYXMgdGhlIGxpc3RlbmVyXG4gICAgICAgKi9cbiAgICAgIG9mZjogJCRhbmltYXRlUXVldWUub2ZmLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI3BpblxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqIEBkZXNjcmlwdGlvbiBBc3NvY2lhdGVzIHRoZSBwcm92aWRlZCBlbGVtZW50IHdpdGggYSBob3N0IHBhcmVudCBlbGVtZW50IHRvIGFsbG93IHRoZSBlbGVtZW50IHRvIGJlIGFuaW1hdGVkIGV2ZW4gaWYgaXQgZXhpc3RzXG4gICAgICAgKiAgICBvdXRzaWRlIG9mIHRoZSBET00gc3RydWN0dXJlIG9mIHRoZSBBbmd1bGFyIGFwcGxpY2F0aW9uLiBCeSBkb2luZyBzbywgYW55IGFuaW1hdGlvbiB0cmlnZ2VyZWQgdmlhIGAkYW5pbWF0ZWAgY2FuIGJlIGlzc3VlZCBvbiB0aGVcbiAgICAgICAqICAgIGVsZW1lbnQgZGVzcGl0ZSBiZWluZyBvdXRzaWRlIHRoZSByZWFsbSBvZiB0aGUgYXBwbGljYXRpb24gb3Igd2l0aGluIGFub3RoZXIgYXBwbGljYXRpb24uIFNheSBmb3IgZXhhbXBsZSBpZiB0aGUgYXBwbGljYXRpb25cbiAgICAgICAqICAgIHdhcyBib290c3RyYXBwZWQgb24gYW4gZWxlbWVudCB0aGF0IGlzIHNvbWV3aGVyZSBpbnNpZGUgb2YgdGhlIGA8Ym9keT5gIHRhZywgYnV0IHdlIHdhbnRlZCB0byBhbGxvdyBmb3IgYW4gZWxlbWVudCB0byBiZSBzaXR1YXRlZFxuICAgICAgICogICAgYXMgYSBkaXJlY3QgY2hpbGQgb2YgYGRvY3VtZW50LmJvZHlgLCB0aGVuIHRoaXMgY2FuIGJlIGFjaGlldmVkIGJ5IHBpbm5pbmcgdGhlIGVsZW1lbnQgdmlhIGAkYW5pbWF0ZS5waW4oZWxlbWVudClgLiBLZWVwIGluIG1pbmRcbiAgICAgICAqICAgIHRoYXQgY2FsbGluZyBgJGFuaW1hdGUucGluKGVsZW1lbnQsIHBhcmVudEVsZW1lbnQpYCB3aWxsIG5vdCBhY3R1YWxseSBpbnNlcnQgaW50byB0aGUgRE9NIGFueXdoZXJlOyBpdCB3aWxsIGp1c3QgY3JlYXRlIHRoZSBhc3NvY2lhdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiAgICBOb3RlIHRoYXQgdGhpcyBmZWF0dXJlIGlzIG9ubHkgYWN0aXZlIHdoZW4gdGhlIGBuZ0FuaW1hdGVgIG1vZHVsZSBpcyB1c2VkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZXh0ZXJuYWwgZWxlbWVudCB0aGF0IHdpbGwgYmUgcGlubmVkXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudEVsZW1lbnQgdGhlIGhvc3QgcGFyZW50IGVsZW1lbnQgdGhhdCB3aWxsIGJlIGFzc29jaWF0ZWQgd2l0aCB0aGUgZXh0ZXJuYWwgZWxlbWVudFxuICAgICAgICovXG4gICAgICBwaW46ICQkYW5pbWF0ZVF1ZXVlLnBpbixcblxuICAgICAgLyoqXG4gICAgICAgKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjZW5hYmxlZFxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqIEBkZXNjcmlwdGlvbiBVc2VkIHRvIGdldCBhbmQgc2V0IHdoZXRoZXIgYW5pbWF0aW9ucyBhcmUgZW5hYmxlZCBvciBub3Qgb24gdGhlIGVudGlyZSBhcHBsaWNhdGlvbiBvciBvbiBhbiBlbGVtZW50IGFuZCBpdHMgY2hpbGRyZW4uIFRoaXNcbiAgICAgICAqIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgaW4gZm91ciB3YXlzOlxuICAgICAgICpcbiAgICAgICAqIGBgYGpzXG4gICAgICAgKiAvLyByZXR1cm5zIHRydWUgb3IgZmFsc2VcbiAgICAgICAqICRhbmltYXRlLmVuYWJsZWQoKTtcbiAgICAgICAqXG4gICAgICAgKiAvLyBjaGFuZ2VzIHRoZSBlbmFibGVkIHN0YXRlIGZvciBhbGwgYW5pbWF0aW9uc1xuICAgICAgICogJGFuaW1hdGUuZW5hYmxlZChmYWxzZSk7XG4gICAgICAgKiAkYW5pbWF0ZS5lbmFibGVkKHRydWUpO1xuICAgICAgICpcbiAgICAgICAqIC8vIHJldHVybnMgdHJ1ZSBvciBmYWxzZSBpZiBhbmltYXRpb25zIGFyZSBlbmFibGVkIGZvciBhbiBlbGVtZW50XG4gICAgICAgKiAkYW5pbWF0ZS5lbmFibGVkKGVsZW1lbnQpO1xuICAgICAgICpcbiAgICAgICAqIC8vIGNoYW5nZXMgdGhlIGVuYWJsZWQgc3RhdGUgZm9yIGFuIGVsZW1lbnQgYW5kIGl0cyBjaGlsZHJlblxuICAgICAgICogJGFuaW1hdGUuZW5hYmxlZChlbGVtZW50LCB0cnVlKTtcbiAgICAgICAqICRhbmltYXRlLmVuYWJsZWQoZWxlbWVudCwgZmFsc2UpO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50PX0gZWxlbWVudCB0aGUgZWxlbWVudCB0aGF0IHdpbGwgYmUgY29uc2lkZXJlZCBmb3IgY2hlY2tpbmcvc2V0dGluZyB0aGUgZW5hYmxlZCBzdGF0ZVxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gZW5hYmxlZCB3aGV0aGVyIG9yIG5vdCB0aGUgYW5pbWF0aW9ucyB3aWxsIGJlIGVuYWJsZWQgZm9yIHRoZSBlbGVtZW50XG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Ym9vbGVhbn0gd2hldGhlciBvciBub3QgYW5pbWF0aW9ucyBhcmUgZW5hYmxlZFxuICAgICAgICovXG4gICAgICBlbmFibGVkOiAkJGFuaW1hdGVRdWV1ZS5lbmFibGVkLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2NhbmNlbFxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqIEBkZXNjcmlwdGlvbiBDYW5jZWxzIHRoZSBwcm92aWRlZCBhbmltYXRpb24uXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtQcm9taXNlfSBhbmltYXRpb25Qcm9taXNlIFRoZSBhbmltYXRpb24gcHJvbWlzZSB0aGF0IGlzIHJldHVybmVkIHdoZW4gYW4gYW5pbWF0aW9uIGlzIHN0YXJ0ZWQuXG4gICAgICAgKi9cbiAgICAgIGNhbmNlbDogZnVuY3Rpb24ocnVubmVyKSB7XG4gICAgICAgIHJ1bm5lci5lbmQgJiYgcnVubmVyLmVuZCgpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjZW50ZXJcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gSW5zZXJ0cyB0aGUgZWxlbWVudCBpbnRvIHRoZSBET00gZWl0aGVyIGFmdGVyIHRoZSBgYWZ0ZXJgIGVsZW1lbnQgKGlmIHByb3ZpZGVkKSBvclxuICAgICAgICogICBhcyB0aGUgZmlyc3QgY2hpbGQgd2l0aGluIHRoZSBgcGFyZW50YCBlbGVtZW50IGFuZCB0aGVuIHRyaWdnZXJzIGFuIGFuaW1hdGlvbi5cbiAgICAgICAqICAgQSBwcm9taXNlIGlzIHJldHVybmVkIHRoYXQgd2lsbCBiZSByZXNvbHZlZCBkdXJpbmcgdGhlIG5leHQgZGlnZXN0IG9uY2UgdGhlIGFuaW1hdGlvblxuICAgICAgICogICBoYXMgY29tcGxldGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB3aWxsIGJlIGluc2VydGVkIGludG8gdGhlIERPTVxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBwYXJlbnQgdGhlIHBhcmVudCBlbGVtZW50IHdoaWNoIHdpbGwgYXBwZW5kIHRoZSBlbGVtZW50IGFzXG4gICAgICAgKiAgIGEgY2hpbGQgKHNvIGxvbmcgYXMgdGhlIGFmdGVyIGVsZW1lbnQgaXMgbm90IHByZXNlbnQpXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnQ9fSBhZnRlciB0aGUgc2libGluZyBlbGVtZW50IGFmdGVyIHdoaWNoIHRoZSBlbGVtZW50IHdpbGwgYmUgYXBwZW5kZWRcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIGVudGVyOiBmdW5jdGlvbihlbGVtZW50LCBwYXJlbnQsIGFmdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudCAmJiBqcUxpdGUocGFyZW50KTtcbiAgICAgICAgYWZ0ZXIgPSBhZnRlciAmJiBqcUxpdGUoYWZ0ZXIpO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQgfHwgYWZ0ZXIucGFyZW50KCk7XG4gICAgICAgIGRvbUluc2VydChlbGVtZW50LCBwYXJlbnQsIGFmdGVyKTtcbiAgICAgICAgcmV0dXJuICQkYW5pbWF0ZVF1ZXVlLnB1c2goZWxlbWVudCwgJ2VudGVyJywgcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI21vdmVcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gSW5zZXJ0cyAobW92ZXMpIHRoZSBlbGVtZW50IGludG8gaXRzIG5ldyBwb3NpdGlvbiBpbiB0aGUgRE9NIGVpdGhlciBhZnRlclxuICAgICAgICogICB0aGUgYGFmdGVyYCBlbGVtZW50IChpZiBwcm92aWRlZCkgb3IgYXMgdGhlIGZpcnN0IGNoaWxkIHdpdGhpbiB0aGUgYHBhcmVudGAgZWxlbWVudFxuICAgICAgICogICBhbmQgdGhlbiB0cmlnZ2VycyBhbiBhbmltYXRpb24uIEEgcHJvbWlzZSBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWRcbiAgICAgICAqICAgZHVyaW5nIHRoZSBuZXh0IGRpZ2VzdCBvbmNlIHRoZSBhbmltYXRpb24gaGFzIGNvbXBsZXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBiZSBtb3ZlZCBpbnRvIHRoZSBuZXcgRE9NIHBvc2l0aW9uXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudCB0aGUgcGFyZW50IGVsZW1lbnQgd2hpY2ggd2lsbCBhcHBlbmQgdGhlIGVsZW1lbnQgYXNcbiAgICAgICAqICAgYSBjaGlsZCAoc28gbG9uZyBhcyB0aGUgYWZ0ZXIgZWxlbWVudCBpcyBub3QgcHJlc2VudClcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudD19IGFmdGVyIHRoZSBzaWJsaW5nIGVsZW1lbnQgYWZ0ZXIgd2hpY2ggdGhlIGVsZW1lbnQgd2lsbCBiZSBhcHBlbmRlZFxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucy9zdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAqL1xuICAgICAgbW92ZTogZnVuY3Rpb24oZWxlbWVudCwgcGFyZW50LCBhZnRlciwgb3B0aW9ucykge1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQgJiYganFMaXRlKHBhcmVudCk7XG4gICAgICAgIGFmdGVyID0gYWZ0ZXIgJiYganFMaXRlKGFmdGVyKTtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50IHx8IGFmdGVyLnBhcmVudCgpO1xuICAgICAgICBkb21JbnNlcnQoZWxlbWVudCwgcGFyZW50LCBhZnRlcik7XG4gICAgICAgIHJldHVybiAkJGFuaW1hdGVRdWV1ZS5wdXNoKGVsZW1lbnQsICdtb3ZlJywgcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjbGVhdmVcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gVHJpZ2dlcnMgYW4gYW5pbWF0aW9uIGFuZCB0aGVuIHJlbW92ZXMgdGhlIGVsZW1lbnQgZnJvbSB0aGUgRE9NLlxuICAgICAgICogV2hlbiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIGEgcHJvbWlzZSBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgZHVyaW5nIHRoZSBuZXh0XG4gICAgICAgKiBkaWdlc3Qgb25jZSB0aGUgYW5pbWF0aW9uIGhhcyBjb21wbGV0ZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBET01cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIGxlYXZlOiBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAkJGFuaW1hdGVRdWV1ZS5wdXNoKGVsZW1lbnQsICdsZWF2ZScsIHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2FkZENsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvbiBUcmlnZ2VycyBhbiBhZGRDbGFzcyBhbmltYXRpb24gc3Vycm91bmRpbmcgdGhlIGFkZGl0aW9uIG9mIHRoZSBwcm92aWRlZCBDU1MgY2xhc3MoZXMpLiBVcG9uXG4gICAgICAgKiAgIGV4ZWN1dGlvbiwgdGhlIGFkZENsYXNzIG9wZXJhdGlvbiB3aWxsIG9ubHkgYmUgaGFuZGxlZCBhZnRlciB0aGUgbmV4dCBkaWdlc3QgYW5kIGl0IHdpbGwgbm90IHRyaWdnZXIgYW5cbiAgICAgICAqICAgYW5pbWF0aW9uIGlmIGVsZW1lbnQgYWxyZWFkeSBjb250YWlucyB0aGUgQ1NTIGNsYXNzIG9yIGlmIHRoZSBjbGFzcyBpcyByZW1vdmVkIGF0IGEgbGF0ZXIgc3RlcC5cbiAgICAgICAqICAgTm90ZSB0aGF0IGNsYXNzLWJhc2VkIGFuaW1hdGlvbnMgYXJlIHRyZWF0ZWQgZGlmZmVyZW50bHkgY29tcGFyZWQgdG8gc3RydWN0dXJhbCBhbmltYXRpb25zXG4gICAgICAgKiAgIChsaWtlIGVudGVyLCBtb3ZlIGFuZCBsZWF2ZSkgc2luY2UgdGhlIENTUyBjbGFzc2VzIG1heSBiZSBhZGRlZC9yZW1vdmVkIGF0IGRpZmZlcmVudCBwb2ludHNcbiAgICAgICAqICAgZGVwZW5kaW5nIGlmIENTUyBvciBKYXZhU2NyaXB0IGFuaW1hdGlvbnMgYXJlIHVzZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHRoZSBDU1MgY2xhc3NlcyB3aWxsIGJlIGFwcGxpZWQgdG9cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgdGhlIENTUyBjbGFzcyhlcykgdGhhdCB3aWxsIGJlIGFkZGVkIChtdWx0aXBsZSBjbGFzc2VzIGFyZSBzZXBhcmF0ZWQgdmlhIHNwYWNlcylcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIGFkZENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgb3B0aW9ucy5hZGRDbGFzcyA9IG1lcmdlQ2xhc3NlcyhvcHRpb25zLmFkZGNsYXNzLCBjbGFzc05hbWUpO1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnYWRkQ2xhc3MnLCBvcHRpb25zKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjcmVtb3ZlQ2xhc3NcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uIFRyaWdnZXJzIGEgcmVtb3ZlQ2xhc3MgYW5pbWF0aW9uIHN1cnJvdW5kaW5nIHRoZSByZW1vdmFsIG9mIHRoZSBwcm92aWRlZCBDU1MgY2xhc3MoZXMpLiBVcG9uXG4gICAgICAgKiAgIGV4ZWN1dGlvbiwgdGhlIHJlbW92ZUNsYXNzIG9wZXJhdGlvbiB3aWxsIG9ubHkgYmUgaGFuZGxlZCBhZnRlciB0aGUgbmV4dCBkaWdlc3QgYW5kIGl0IHdpbGwgbm90IHRyaWdnZXIgYW5cbiAgICAgICAqICAgYW5pbWF0aW9uIGlmIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiB0aGUgQ1NTIGNsYXNzIG9yIGlmIHRoZSBjbGFzcyBpcyBhZGRlZCBhdCBhIGxhdGVyIHN0ZXAuXG4gICAgICAgKiAgIE5vdGUgdGhhdCBjbGFzcy1iYXNlZCBhbmltYXRpb25zIGFyZSB0cmVhdGVkIGRpZmZlcmVudGx5IGNvbXBhcmVkIHRvIHN0cnVjdHVyYWwgYW5pbWF0aW9uc1xuICAgICAgICogICAobGlrZSBlbnRlciwgbW92ZSBhbmQgbGVhdmUpIHNpbmNlIHRoZSBDU1MgY2xhc3NlcyBtYXkgYmUgYWRkZWQvcmVtb3ZlZCBhdCBkaWZmZXJlbnQgcG9pbnRzXG4gICAgICAgKiAgIGRlcGVuZGluZyBpZiBDU1Mgb3IgSmF2YVNjcmlwdCBhbmltYXRpb25zIGFyZSB1c2VkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB0aGUgQ1NTIGNsYXNzZXMgd2lsbCBiZSBhcHBsaWVkIHRvXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBDU1MgY2xhc3MoZXMpIHRoYXQgd2lsbCBiZSByZW1vdmVkIChtdWx0aXBsZSBjbGFzc2VzIGFyZSBzZXBhcmF0ZWQgdmlhIHNwYWNlcylcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgb3B0aW9ucy5yZW1vdmVDbGFzcyA9IG1lcmdlQ2xhc3NlcyhvcHRpb25zLnJlbW92ZUNsYXNzLCBjbGFzc05hbWUpO1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAncmVtb3ZlQ2xhc3MnLCBvcHRpb25zKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjc2V0Q2xhc3NcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uIFBlcmZvcm1zIGJvdGggdGhlIGFkZGl0aW9uIGFuZCByZW1vdmFsIG9mIGEgQ1NTIGNsYXNzZXMgb24gYW4gZWxlbWVudCBhbmQgKGR1cmluZyB0aGUgcHJvY2VzcylcbiAgICAgICAqICAgIHRyaWdnZXJzIGFuIGFuaW1hdGlvbiBzdXJyb3VuZGluZyB0aGUgY2xhc3MgYWRkaXRpb24vcmVtb3ZhbC4gTXVjaCBsaWtlIGAkYW5pbWF0ZS5hZGRDbGFzc2AgYW5kXG4gICAgICAgKiAgICBgJGFuaW1hdGUucmVtb3ZlQ2xhc3NgLCBgc2V0Q2xhc3NgIHdpbGwgb25seSBldmFsdWF0ZSB0aGUgY2xhc3NlcyBiZWluZyBhZGRlZC9yZW1vdmVkIG9uY2UgYSBkaWdlc3QgaGFzXG4gICAgICAgKiAgICBwYXNzZWQuIE5vdGUgdGhhdCBjbGFzcy1iYXNlZCBhbmltYXRpb25zIGFyZSB0cmVhdGVkIGRpZmZlcmVudGx5IGNvbXBhcmVkIHRvIHN0cnVjdHVyYWwgYW5pbWF0aW9uc1xuICAgICAgICogICAgKGxpa2UgZW50ZXIsIG1vdmUgYW5kIGxlYXZlKSBzaW5jZSB0aGUgQ1NTIGNsYXNzZXMgbWF5IGJlIGFkZGVkL3JlbW92ZWQgYXQgZGlmZmVyZW50IHBvaW50c1xuICAgICAgICogICAgZGVwZW5kaW5nIGlmIENTUyBvciBKYXZhU2NyaXB0IGFuaW1hdGlvbnMgYXJlIHVzZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHRoZSBDU1MgY2xhc3NlcyB3aWxsIGJlIGFwcGxpZWQgdG9cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhZGQgdGhlIENTUyBjbGFzcyhlcykgdGhhdCB3aWxsIGJlIGFkZGVkIChtdWx0aXBsZSBjbGFzc2VzIGFyZSBzZXBhcmF0ZWQgdmlhIHNwYWNlcylcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZW1vdmUgdGhlIENTUyBjbGFzcyhlcykgdGhhdCB3aWxsIGJlIHJlbW92ZWQgKG11bHRpcGxlIGNsYXNzZXMgYXJlIHNlcGFyYXRlZCB2aWEgc3BhY2VzKVxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucy9zdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAqL1xuICAgICAgc2V0Q2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGFkZCwgcmVtb3ZlLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMuYWRkQ2xhc3MgPSBtZXJnZUNsYXNzZXMob3B0aW9ucy5hZGRDbGFzcywgYWRkKTtcbiAgICAgICAgb3B0aW9ucy5yZW1vdmVDbGFzcyA9IG1lcmdlQ2xhc3NlcyhvcHRpb25zLnJlbW92ZUNsYXNzLCByZW1vdmUpO1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnc2V0Q2xhc3MnLCBvcHRpb25zKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjYW5pbWF0ZVxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb24gUGVyZm9ybXMgYW4gaW5saW5lIGFuaW1hdGlvbiBvbiB0aGUgZWxlbWVudCB3aGljaCBhcHBsaWVzIHRoZSBwcm92aWRlZCB0byBhbmQgZnJvbSBDU1Mgc3R5bGVzIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogSWYgYW55IGRldGVjdGVkIENTUyB0cmFuc2l0aW9uLCBrZXlmcmFtZSBvciBKYXZhU2NyaXB0IG1hdGNoZXMgdGhlIHByb3ZpZGVkIGNsYXNzTmFtZSB2YWx1ZSB0aGVuIHRoZSBhbmltYXRpb24gd2lsbCB0YWtlXG4gICAgICAgKiBvbiB0aGUgcHJvdmlkZWQgc3R5bGVzLiBGb3IgZXhhbXBsZSwgaWYgYSB0cmFuc2l0aW9uIGFuaW1hdGlvbiBpcyBzZXQgZm9yIHRoZSBnaXZlbiBjbGFzc05hbWUgdGhlbiB0aGUgcHJvdmlkZWQgZnJvbSBhbmRcbiAgICAgICAqIHRvIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgYWxvbmdzaWRlIHRoZSBnaXZlbiB0cmFuc2l0aW9uLiBJZiBhIEphdmFTY3JpcHQgYW5pbWF0aW9uIGlzIGRldGVjdGVkIHRoZW4gdGhlIHByb3ZpZGVkIHN0eWxlc1xuICAgICAgICogd2lsbCBiZSBnaXZlbiBpbiBhcyBmdW5jdGlvbiBwYXJhbXRlcnMgaW50byB0aGUgYGFuaW1hdGVgIG1ldGhvZCAob3IgYXMgYXBhcnQgb2YgdGhlIGBvcHRpb25zYCBwYXJhbWV0ZXIpLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB0aGUgQ1NTIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgdG9cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBmcm9tIHRoZSBmcm9tIChzdGFydGluZykgQ1NTIHN0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudCBhbmQgYWNyb3NzIHRoZSBhbmltYXRpb24uXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gdG8gdGhlIHRvIChkZXN0aW5hdGlvbikgQ1NTIHN0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudCBhbmQgYWNyb3NzIHRoZSBhbmltYXRpb24uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZz19IGNsYXNzTmFtZSBhbiBvcHRpb25hbCBDU1MgY2xhc3MgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uLiBJZlxuICAgICAgICogICAgdGhpcyB2YWx1ZSBpcyBsZWZ0IGFzIGVtcHR5IHRoZW4gYSBDU1MgY2xhc3Mgb2YgYG5nLWlubGluZS1hbmltYXRlYCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuXG4gICAgICAgKiAgICAoTm90ZSB0aGF0IGlmIG5vIGFuaW1hdGlvbiBpcyBkZXRlY3RlZCB0aGVuIHRoaXMgdmFsdWUgd2lsbCBub3QgYmUgYXBwcGxpZWQgdG8gdGhlIGVsZW1lbnQuKVxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucy9zdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAqL1xuICAgICAgYW5pbWF0ZTogZnVuY3Rpb24oZWxlbWVudCwgZnJvbSwgdG8sIGNsYXNzTmFtZSwgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBvcHRpb25zLmZyb20gPSBvcHRpb25zLmZyb20gPyBleHRlbmQob3B0aW9ucy5mcm9tLCBmcm9tKSA6IGZyb207XG4gICAgICAgIG9wdGlvbnMudG8gICA9IG9wdGlvbnMudG8gICA/IGV4dGVuZChvcHRpb25zLnRvLCB0bykgICAgIDogdG87XG5cbiAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lIHx8ICduZy1pbmxpbmUtYW5pbWF0ZSc7XG4gICAgICAgIG9wdGlvbnMudGVtcENsYXNzZXMgPSBtZXJnZUNsYXNzZXMob3B0aW9ucy50ZW1wQ2xhc3NlcywgY2xhc3NOYW1lKTtcbiAgICAgICAgcmV0dXJuICQkYW5pbWF0ZVF1ZXVlLnB1c2goZWxlbWVudCwgJ2FuaW1hdGUnLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkYW5pbWF0ZUNzc1xuICogQGtpbmQgb2JqZWN0XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIGlzIHRoZSBjb3JlIHZlcnNpb24gb2YgYCRhbmltYXRlQ3NzYC4gQnkgZGVmYXVsdCwgb25seSB3aGVuIHRoZSBgbmdBbmltYXRlYCBpcyBpbmNsdWRlZCxcbiAqIHRoZW4gdGhlIGAkYW5pbWF0ZUNzc2Agc2VydmljZSB3aWxsIGFjdHVhbGx5IHBlcmZvcm0gYW5pbWF0aW9ucy5cbiAqXG4gKiBDbGljayBoZXJlIHtAbGluayBuZ0FuaW1hdGUuJGFuaW1hdGVDc3MgdG8gcmVhZCB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgJGFuaW1hdGVDc3N9LlxuICovXG52YXIgJENvcmVBbmltYXRlQ3NzUHJvdmlkZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckJHJBRicsICckcScsIGZ1bmN0aW9uKCQkckFGLCAkcSkge1xuXG4gICAgdmFyIFJBRlByb21pc2UgPSBmdW5jdGlvbigpIHt9O1xuICAgIFJBRlByb21pc2UucHJvdG90eXBlID0ge1xuICAgICAgZG9uZTogZnVuY3Rpb24oY2FuY2VsKSB7XG4gICAgICAgIHRoaXMuZGVmZXIgJiYgdGhpcy5kZWZlcltjYW5jZWwgPT09IHRydWUgPyAncmVqZWN0JyA6ICdyZXNvbHZlJ10oKTtcbiAgICAgIH0sXG4gICAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmRvbmUoKTtcbiAgICAgIH0sXG4gICAgICBjYW5jZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmRvbmUodHJ1ZSk7XG4gICAgICB9LFxuICAgICAgZ2V0UHJvbWlzZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghdGhpcy5kZWZlcikge1xuICAgICAgICAgIHRoaXMuZGVmZXIgPSAkcS5kZWZlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmVyLnByb21pc2U7XG4gICAgICB9LFxuICAgICAgdGhlbjogZnVuY3Rpb24oZjEsZjIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UHJvbWlzZSgpLnRoZW4oZjEsZjIpO1xuICAgICAgfSxcbiAgICAgICdjYXRjaCc6IGZ1bmN0aW9uKGYxKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFByb21pc2UoKVsnY2F0Y2gnXShmMSk7XG4gICAgICB9LFxuICAgICAgJ2ZpbmFsbHknOiBmdW5jdGlvbihmMSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9taXNlKClbJ2ZpbmFsbHknXShmMSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAvLyB0aGVyZSBpcyBubyBwb2ludCBpbiBhcHBseWluZyB0aGUgc3R5bGVzIHNpbmNlXG4gICAgICAvLyB0aGVyZSBpcyBubyBhbmltYXRpb24gdGhhdCBnb2VzIG9uIGF0IGFsbCBpblxuICAgICAgLy8gdGhpcyB2ZXJzaW9uIG9mICRhbmltYXRlQ3NzLlxuICAgICAgaWYgKG9wdGlvbnMuY2xlYW51cFN0eWxlcykge1xuICAgICAgICBvcHRpb25zLmZyb20gPSBvcHRpb25zLnRvID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuZnJvbSkge1xuICAgICAgICBlbGVtZW50LmNzcyhvcHRpb25zLmZyb20pO1xuICAgICAgICBvcHRpb25zLmZyb20gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2xvc2VkLCBydW5uZXIgPSBuZXcgUkFGUHJvbWlzZSgpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IHJ1bixcbiAgICAgICAgZW5kOiBydW5cbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIHJ1bigpIHtcbiAgICAgICAgJCRyQUYoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgICBpZiAoIWNsb3NlZCkge1xuICAgICAgICAgICAgcnVubmVyLmRvbmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgICBpZiAob3B0aW9ucy5hZGRDbGFzcykge1xuICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3Mob3B0aW9ucy5hZGRDbGFzcyk7XG4gICAgICAgICAgb3B0aW9ucy5hZGRDbGFzcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMucmVtb3ZlQ2xhc3MpIHtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKG9wdGlvbnMucmVtb3ZlQ2xhc3MpO1xuICAgICAgICAgIG9wdGlvbnMucmVtb3ZlQ2xhc3MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnRvKSB7XG4gICAgICAgICAgZWxlbWVudC5jc3Mob3B0aW9ucy50byk7XG4gICAgICAgICAgb3B0aW9ucy50byA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XTtcbn07XG5cbi8qIGdsb2JhbCBzdHJpcEhhc2g6IHRydWUgKi9cblxuLyoqXG4gKiAhIFRoaXMgaXMgYSBwcml2YXRlIHVuZG9jdW1lbnRlZCBzZXJ2aWNlICFcbiAqXG4gKiBAbmFtZSAkYnJvd3NlclxuICogQHJlcXVpcmVzICRsb2dcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBvYmplY3QgaGFzIHR3byBnb2FsczpcbiAqXG4gKiAtIGhpZGUgYWxsIHRoZSBnbG9iYWwgc3RhdGUgaW4gdGhlIGJyb3dzZXIgY2F1c2VkIGJ5IHRoZSB3aW5kb3cgb2JqZWN0XG4gKiAtIGFic3RyYWN0IGF3YXkgYWxsIHRoZSBicm93c2VyIHNwZWNpZmljIGZlYXR1cmVzIGFuZCBpbmNvbnNpc3RlbmNpZXNcbiAqXG4gKiBGb3IgdGVzdHMgd2UgcHJvdmlkZSB7QGxpbmsgbmdNb2NrLiRicm93c2VyIG1vY2sgaW1wbGVtZW50YXRpb259IG9mIHRoZSBgJGJyb3dzZXJgXG4gKiBzZXJ2aWNlLCB3aGljaCBjYW4gYmUgdXNlZCBmb3IgY29udmVuaWVudCB0ZXN0aW5nIG9mIHRoZSBhcHBsaWNhdGlvbiB3aXRob3V0IHRoZSBpbnRlcmFjdGlvbiB3aXRoXG4gKiB0aGUgcmVhbCBicm93c2VyIGFwaXMuXG4gKi9cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHdpbmRvdyBUaGUgZ2xvYmFsIHdpbmRvdyBvYmplY3QuXG4gKiBAcGFyYW0ge29iamVjdH0gZG9jdW1lbnQgalF1ZXJ5IHdyYXBwZWQgZG9jdW1lbnQuXG4gKiBAcGFyYW0ge29iamVjdH0gJGxvZyB3aW5kb3cuY29uc29sZSBvciBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBpbnRlcmZhY2UuXG4gKiBAcGFyYW0ge29iamVjdH0gJHNuaWZmZXIgJHNuaWZmZXIgc2VydmljZVxuICovXG5mdW5jdGlvbiBCcm93c2VyKHdpbmRvdywgZG9jdW1lbnQsICRsb2csICRzbmlmZmVyKSB7XG4gIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIHJhd0RvY3VtZW50ID0gZG9jdW1lbnRbMF0sXG4gICAgICBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgIGhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeSxcbiAgICAgIHNldFRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCxcbiAgICAgIGNsZWFyVGltZW91dCA9IHdpbmRvdy5jbGVhclRpbWVvdXQsXG4gICAgICBwZW5kaW5nRGVmZXJJZHMgPSB7fTtcblxuICBzZWxmLmlzTW9jayA9IGZhbHNlO1xuXG4gIHZhciBvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9IDA7XG4gIHZhciBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MgPSBbXTtcblxuICAvLyBUT0RPKHZvanRhKTogcmVtb3ZlIHRoaXMgdGVtcG9yYXJ5IGFwaVxuICBzZWxmLiQkY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QgPSBjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdDtcbiAgc2VsZi4kJGluY091dHN0YW5kaW5nUmVxdWVzdENvdW50ID0gZnVuY3Rpb24oKSB7IG91dHN0YW5kaW5nUmVxdWVzdENvdW50Kys7IH07XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIHRoZSBgZm5gIGZ1bmN0aW9uKHN1cHBvcnRzIGN1cnJ5aW5nKSBhbmQgZGVjcmVtZW50cyB0aGUgYG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrc2BcbiAgICogY291bnRlci4gSWYgdGhlIGNvdW50ZXIgcmVhY2hlcyAwLCBhbGwgdGhlIGBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3NgIGFyZSBleGVjdXRlZC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuLmFwcGx5KG51bGwsIHNsaWNlQXJncyhhcmd1bWVudHMsIDEpKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQtLTtcbiAgICAgIGlmIChvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9PT0gMCkge1xuICAgICAgICB3aGlsZSAob3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzLmxlbmd0aCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MucG9wKCkoKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAkbG9nLmVycm9yKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEhhc2godXJsKSB7XG4gICAgdmFyIGluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICByZXR1cm4gaW5kZXggPT09IC0xID8gJycgOiB1cmwuc3Vic3RyKGluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBOb3RlOiB0aGlzIG1ldGhvZCBpcyB1c2VkIG9ubHkgYnkgc2NlbmFyaW8gcnVubmVyXG4gICAqIFRPRE8odm9qdGEpOiBwcmVmaXggdGhpcyBtZXRob2Qgd2l0aCAkJCA/XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gY2FsbGJhY2sgRnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIG5vIG91dHN0YW5kaW5nIHJlcXVlc3RcbiAgICovXG4gIHNlbGYubm90aWZ5V2hlbk5vT3V0c3RhbmRpbmdSZXF1ZXN0cyA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgaWYgKG91dHN0YW5kaW5nUmVxdWVzdENvdW50ID09PSAwKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgfVxuICB9O1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFVSTCBBUElcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICB2YXIgY2FjaGVkU3RhdGUsIGxhc3RIaXN0b3J5U3RhdGUsXG4gICAgICBsYXN0QnJvd3NlclVybCA9IGxvY2F0aW9uLmhyZWYsXG4gICAgICBiYXNlRWxlbWVudCA9IGRvY3VtZW50LmZpbmQoJ2Jhc2UnKSxcbiAgICAgIHBlbmRpbmdMb2NhdGlvbiA9IG51bGw7XG5cbiAgY2FjaGVTdGF0ZSgpO1xuICBsYXN0SGlzdG9yeVN0YXRlID0gY2FjaGVkU3RhdGU7XG5cbiAgLyoqXG4gICAqIEBuYW1lICRicm93c2VyI3VybFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogR0VUVEVSOlxuICAgKiBXaXRob3V0IGFueSBhcmd1bWVudCwgdGhpcyBtZXRob2QganVzdCByZXR1cm5zIGN1cnJlbnQgdmFsdWUgb2YgbG9jYXRpb24uaHJlZi5cbiAgICpcbiAgICogU0VUVEVSOlxuICAgKiBXaXRoIGF0IGxlYXN0IG9uZSBhcmd1bWVudCwgdGhpcyBtZXRob2Qgc2V0cyB1cmwgdG8gbmV3IHZhbHVlLlxuICAgKiBJZiBodG1sNSBoaXN0b3J5IGFwaSBzdXBwb3J0ZWQsIHB1c2hTdGF0ZS9yZXBsYWNlU3RhdGUgaXMgdXNlZCwgb3RoZXJ3aXNlXG4gICAqIGxvY2F0aW9uLmhyZWYvbG9jYXRpb24ucmVwbGFjZSBpcyB1c2VkLlxuICAgKiBSZXR1cm5zIGl0cyBvd24gaW5zdGFuY2UgdG8gYWxsb3cgY2hhaW5pbmdcbiAgICpcbiAgICogTk9URTogdGhpcyBhcGkgaXMgaW50ZW5kZWQgZm9yIHVzZSBvbmx5IGJ5IHRoZSAkbG9jYXRpb24gc2VydmljZS4gUGxlYXNlIHVzZSB0aGVcbiAgICoge0BsaW5rIG5nLiRsb2NhdGlvbiAkbG9jYXRpb24gc2VydmljZX0gdG8gY2hhbmdlIHVybC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBOZXcgdXJsICh3aGVuIHVzZWQgYXMgc2V0dGVyKVxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSByZXBsYWNlIFNob3VsZCBuZXcgdXJsIHJlcGxhY2UgY3VycmVudCBoaXN0b3J5IHJlY29yZD9cbiAgICogQHBhcmFtIHtvYmplY3Q9fSBzdGF0ZSBvYmplY3QgdG8gdXNlIHdpdGggcHVzaFN0YXRlL3JlcGxhY2VTdGF0ZVxuICAgKi9cbiAgc2VsZi51cmwgPSBmdW5jdGlvbih1cmwsIHJlcGxhY2UsIHN0YXRlKSB7XG4gICAgLy8gSW4gbW9kZXJuIGJyb3dzZXJzIGBoaXN0b3J5LnN0YXRlYCBpcyBgbnVsbGAgYnkgZGVmYXVsdDsgdHJlYXRpbmcgaXQgc2VwYXJhdGVseVxuICAgIC8vIGZyb20gYHVuZGVmaW5lZGAgd291bGQgY2F1c2UgYCRicm93c2VyLnVybCgnL2ZvbycpYCB0byBjaGFuZ2UgYGhpc3Rvcnkuc3RhdGVgXG4gICAgLy8gdG8gdW5kZWZpbmVkIHZpYSBgcHVzaFN0YXRlYC4gSW5zdGVhZCwgbGV0J3MgY2hhbmdlIGB1bmRlZmluZWRgIHRvIGBudWxsYCBoZXJlLlxuICAgIGlmIChpc1VuZGVmaW5lZChzdGF0ZSkpIHtcbiAgICAgIHN0YXRlID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBBbmRyb2lkIEJyb3dzZXIgQkZDYWNoZSBjYXVzZXMgbG9jYXRpb24sIGhpc3RvcnkgcmVmZXJlbmNlIHRvIGJlY29tZSBzdGFsZS5cbiAgICBpZiAobG9jYXRpb24gIT09IHdpbmRvdy5sb2NhdGlvbikgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG4gICAgaWYgKGhpc3RvcnkgIT09IHdpbmRvdy5oaXN0b3J5KSBoaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG5cbiAgICAvLyBzZXR0ZXJcbiAgICBpZiAodXJsKSB7XG4gICAgICB2YXIgc2FtZVN0YXRlID0gbGFzdEhpc3RvcnlTdGF0ZSA9PT0gc3RhdGU7XG5cbiAgICAgIC8vIERvbid0IGNoYW5nZSBhbnl0aGluZyBpZiBwcmV2aW91cyBhbmQgY3VycmVudCBVUkxzIGFuZCBzdGF0ZXMgbWF0Y2guIFRoaXMgYWxzbyBwcmV2ZW50c1xuICAgICAgLy8gSUU8MTAgZnJvbSBnZXR0aW5nIGludG8gcmVkaXJlY3QgbG9vcCB3aGVuIGluIExvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsIG1vZGUuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9jb21taXQvZmZiMjcwMVxuICAgICAgaWYgKGxhc3RCcm93c2VyVXJsID09PSB1cmwgJiYgKCEkc25pZmZlci5oaXN0b3J5IHx8IHNhbWVTdGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9XG4gICAgICB2YXIgc2FtZUJhc2UgPSBsYXN0QnJvd3NlclVybCAmJiBzdHJpcEhhc2gobGFzdEJyb3dzZXJVcmwpID09PSBzdHJpcEhhc2godXJsKTtcbiAgICAgIGxhc3RCcm93c2VyVXJsID0gdXJsO1xuICAgICAgbGFzdEhpc3RvcnlTdGF0ZSA9IHN0YXRlO1xuICAgICAgLy8gRG9uJ3QgdXNlIGhpc3RvcnkgQVBJIGlmIG9ubHkgdGhlIGhhc2ggY2hhbmdlZFxuICAgICAgLy8gZHVlIHRvIGEgYnVnIGluIElFMTAvSUUxMSB3aGljaCBsZWFkc1xuICAgICAgLy8gdG8gbm90IGZpcmluZyBhIGBoYXNoY2hhbmdlYCBub3IgYHBvcHN0YXRlYCBldmVudFxuICAgICAgLy8gaW4gc29tZSBjYXNlcyAoc2VlICM5MTQzKS5cbiAgICAgIGlmICgkc25pZmZlci5oaXN0b3J5ICYmICghc2FtZUJhc2UgfHwgIXNhbWVTdGF0ZSkpIHtcbiAgICAgICAgaGlzdG9yeVtyZXBsYWNlID8gJ3JlcGxhY2VTdGF0ZScgOiAncHVzaFN0YXRlJ10oc3RhdGUsICcnLCB1cmwpO1xuICAgICAgICBjYWNoZVN0YXRlKCk7XG4gICAgICAgIC8vIERvIHRoZSBhc3NpZ25tZW50IGFnYWluIHNvIHRoYXQgdGhvc2UgdHdvIHZhcmlhYmxlcyBhcmUgcmVmZXJlbnRpYWxseSBpZGVudGljYWwuXG4gICAgICAgIGxhc3RIaXN0b3J5U3RhdGUgPSBjYWNoZWRTdGF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghc2FtZUJhc2UgfHwgcGVuZGluZ0xvY2F0aW9uKSB7XG4gICAgICAgICAgcGVuZGluZ0xvY2F0aW9uID0gdXJsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgICAgbG9jYXRpb24ucmVwbGFjZSh1cmwpO1xuICAgICAgICB9IGVsc2UgaWYgKCFzYW1lQmFzZSkge1xuICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSB1cmw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9jYXRpb24uaGFzaCA9IGdldEhhc2godXJsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG9jYXRpb24uaHJlZiAhPT0gdXJsKSB7XG4gICAgICAgICAgcGVuZGluZ0xvY2F0aW9uID0gdXJsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICAvLyBnZXR0ZXJcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gLSBwZW5kaW5nTG9jYXRpb24gaXMgbmVlZGVkIGFzIGJyb3dzZXJzIGRvbid0IGFsbG93IHRvIHJlYWQgb3V0XG4gICAgICAvLyAgIHRoZSBuZXcgbG9jYXRpb24uaHJlZiBpZiBhIHJlbG9hZCBoYXBwZW5lZCBvciBpZiB0aGVyZSBpcyBhIGJ1ZyBsaWtlIGluIGlPUyA5IChzZWVcbiAgICAgIC8vICAgaHR0cHM6Ly9vcGVucmFkYXIuYXBwc3BvdC5jb20vMjIxODYxMDkpLlxuICAgICAgLy8gLSB0aGUgcmVwbGFjZW1lbnQgaXMgYSB3b3JrYXJvdW5kIGZvciBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD00MDcxNzJcbiAgICAgIHJldHVybiBwZW5kaW5nTG9jYXRpb24gfHwgbG9jYXRpb24uaHJlZi5yZXBsYWNlKC8lMjcvZyxcIidcIik7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmFtZSAkYnJvd3NlciNzdGF0ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgYSBnZXR0ZXIuXG4gICAqXG4gICAqIFJldHVybiBoaXN0b3J5LnN0YXRlIG9yIG51bGwgaWYgaGlzdG9yeS5zdGF0ZSBpcyB1bmRlZmluZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IHN0YXRlXG4gICAqL1xuICBzZWxmLnN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNhY2hlZFN0YXRlO1xuICB9O1xuXG4gIHZhciB1cmxDaGFuZ2VMaXN0ZW5lcnMgPSBbXSxcbiAgICAgIHVybENoYW5nZUluaXQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBjYWNoZVN0YXRlQW5kRmlyZVVybENoYW5nZSgpIHtcbiAgICBwZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuICAgIGNhY2hlU3RhdGUoKTtcbiAgICBmaXJlVXJsQ2hhbmdlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDdXJyZW50U3RhdGUoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBoaXN0b3J5LnN0YXRlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIE1TSUUgY2FuIHJlcG9ydGVkbHkgdGhyb3cgd2hlbiB0aGVyZSBpcyBubyBzdGF0ZSAoVU5DT05GSVJNRUQpLlxuICAgIH1cbiAgfVxuXG4gIC8vIFRoaXMgdmFyaWFibGUgc2hvdWxkIGJlIHVzZWQgKm9ubHkqIGluc2lkZSB0aGUgY2FjaGVTdGF0ZSBmdW5jdGlvbi5cbiAgdmFyIGxhc3RDYWNoZWRTdGF0ZSA9IG51bGw7XG4gIGZ1bmN0aW9uIGNhY2hlU3RhdGUoKSB7XG4gICAgLy8gVGhpcyBzaG91bGQgYmUgdGhlIG9ubHkgcGxhY2UgaW4gJGJyb3dzZXIgd2hlcmUgYGhpc3Rvcnkuc3RhdGVgIGlzIHJlYWQuXG4gICAgY2FjaGVkU3RhdGUgPSBnZXRDdXJyZW50U3RhdGUoKTtcbiAgICBjYWNoZWRTdGF0ZSA9IGlzVW5kZWZpbmVkKGNhY2hlZFN0YXRlKSA/IG51bGwgOiBjYWNoZWRTdGF0ZTtcblxuICAgIC8vIFByZXZlbnQgY2FsbGJhY2tzIGZvIGZpcmUgdHdpY2UgaWYgYm90aCBoYXNoY2hhbmdlICYgcG9wc3RhdGUgd2VyZSBmaXJlZC5cbiAgICBpZiAoZXF1YWxzKGNhY2hlZFN0YXRlLCBsYXN0Q2FjaGVkU3RhdGUpKSB7XG4gICAgICBjYWNoZWRTdGF0ZSA9IGxhc3RDYWNoZWRTdGF0ZTtcbiAgICB9XG4gICAgbGFzdENhY2hlZFN0YXRlID0gY2FjaGVkU3RhdGU7XG4gIH1cblxuICBmdW5jdGlvbiBmaXJlVXJsQ2hhbmdlKCkge1xuICAgIGlmIChsYXN0QnJvd3NlclVybCA9PT0gc2VsZi51cmwoKSAmJiBsYXN0SGlzdG9yeVN0YXRlID09PSBjYWNoZWRTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxhc3RCcm93c2VyVXJsID0gc2VsZi51cmwoKTtcbiAgICBsYXN0SGlzdG9yeVN0YXRlID0gY2FjaGVkU3RhdGU7XG4gICAgZm9yRWFjaCh1cmxDaGFuZ2VMaXN0ZW5lcnMsIGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcihzZWxmLnVybCgpLCBjYWNoZWRTdGF0ZSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjb25VcmxDaGFuZ2VcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVyIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQsIHdoZW4gdXJsIGNoYW5nZXMuXG4gICAqXG4gICAqIEl0J3Mgb25seSBjYWxsZWQgd2hlbiB0aGUgdXJsIGlzIGNoYW5nZWQgZnJvbSBvdXRzaWRlIG9mIGFuZ3VsYXI6XG4gICAqIC0gdXNlciB0eXBlcyBkaWZmZXJlbnQgdXJsIGludG8gYWRkcmVzcyBiYXJcbiAgICogLSB1c2VyIGNsaWNrcyBvbiBoaXN0b3J5IChmb3J3YXJkL2JhY2spIGJ1dHRvblxuICAgKiAtIHVzZXIgY2xpY2tzIG9uIGEgbGlua1xuICAgKlxuICAgKiBJdCdzIG5vdCBjYWxsZWQgd2hlbiB1cmwgaXMgY2hhbmdlZCBieSAkYnJvd3Nlci51cmwoKSBtZXRob2RcbiAgICpcbiAgICogVGhlIGxpc3RlbmVyIGdldHMgY2FsbGVkIHdpdGggbmV3IHVybCBhcyBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIE5PVEU6IHRoaXMgYXBpIGlzIGludGVuZGVkIGZvciB1c2Ugb25seSBieSB0aGUgJGxvY2F0aW9uIHNlcnZpY2UuIFBsZWFzZSB1c2UgdGhlXG4gICAqIHtAbGluayBuZy4kbG9jYXRpb24gJGxvY2F0aW9uIHNlcnZpY2V9IHRvIG1vbml0b3IgdXJsIGNoYW5nZXMgaW4gYW5ndWxhciBhcHBzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZyl9IGxpc3RlbmVyIExpc3RlbmVyIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHVybCBjaGFuZ2VzLlxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbihzdHJpbmcpfSBSZXR1cm5zIHRoZSByZWdpc3RlcmVkIGxpc3RlbmVyIGZuIC0gaGFuZHkgaWYgdGhlIGZuIGlzIGFub255bW91cy5cbiAgICovXG4gIHNlbGYub25VcmxDaGFuZ2UgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIC8vIFRPRE8odm9qdGEpOiByZWZhY3RvciB0byB1c2Ugbm9kZSdzIHN5bnRheCBmb3IgZXZlbnRzXG4gICAgaWYgKCF1cmxDaGFuZ2VJbml0KSB7XG4gICAgICAvLyBXZSBsaXN0ZW4gb24gYm90aCAoaGFzaGNoYW5nZS9wb3BzdGF0ZSkgd2hlbiBhdmFpbGFibGUsIGFzIHNvbWUgYnJvd3NlcnMgKGUuZy4gT3BlcmEpXG4gICAgICAvLyBkb24ndCBmaXJlIHBvcHN0YXRlIHdoZW4gdXNlciBjaGFuZ2UgdGhlIGFkZHJlc3MgYmFyIGFuZCBkb24ndCBmaXJlIGhhc2hjaGFuZ2Ugd2hlbiB1cmxcbiAgICAgIC8vIGNoYW5nZWQgYnkgcHVzaC9yZXBsYWNlU3RhdGVcblxuICAgICAgLy8gaHRtbDUgaGlzdG9yeSBhcGkgLSBwb3BzdGF0ZSBldmVudFxuICAgICAgaWYgKCRzbmlmZmVyLmhpc3RvcnkpIGpxTGl0ZSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlKTtcbiAgICAgIC8vIGhhc2hjaGFuZ2UgZXZlbnRcbiAgICAgIGpxTGl0ZSh3aW5kb3cpLm9uKCdoYXNoY2hhbmdlJywgY2FjaGVTdGF0ZUFuZEZpcmVVcmxDaGFuZ2UpO1xuXG4gICAgICB1cmxDaGFuZ2VJbml0ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB1cmxDaGFuZ2VMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gICAgcmV0dXJuIGNhbGxiYWNrO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBSZW1vdmUgcG9wc3RhdGUgYW5kIGhhc2hjaGFuZ2UgaGFuZGxlciBmcm9tIHdpbmRvdy5cbiAgICpcbiAgICogTk9URTogdGhpcyBhcGkgaXMgaW50ZW5kZWQgZm9yIHVzZSBvbmx5IGJ5ICRyb290U2NvcGUuXG4gICAqL1xuICBzZWxmLiQkYXBwbGljYXRpb25EZXN0cm95ZWQgPSBmdW5jdGlvbigpIHtcbiAgICBqcUxpdGUod2luZG93KS5vZmYoJ2hhc2hjaGFuZ2UgcG9wc3RhdGUnLCBjYWNoZVN0YXRlQW5kRmlyZVVybENoYW5nZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIHRoZSB1cmwgaGFzIGNoYW5nZWQgb3V0c2lkZSBvZiBBbmd1bGFyLlxuICAgKiBOZWVkcyB0byBiZSBleHBvcnRlZCB0byBiZSBhYmxlIHRvIGNoZWNrIGZvciBjaGFuZ2VzIHRoYXQgaGF2ZSBiZWVuIGRvbmUgaW4gc3luYyxcbiAgICogYXMgaGFzaGNoYW5nZS9wb3BzdGF0ZSBldmVudHMgZmlyZSBpbiBhc3luYy5cbiAgICovXG4gIHNlbGYuJCRjaGVja1VybENoYW5nZSA9IGZpcmVVcmxDaGFuZ2U7XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gTWlzYyBBUElcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjYmFzZUhyZWZcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHVybnMgY3VycmVudCA8YmFzZSBocmVmPlxuICAgKiAoYWx3YXlzIHJlbGF0aXZlIC0gd2l0aG91dCBkb21haW4pXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjdXJyZW50IGJhc2UgaHJlZlxuICAgKi9cbiAgc2VsZi5iYXNlSHJlZiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBocmVmID0gYmFzZUVsZW1lbnQuYXR0cignaHJlZicpO1xuICAgIHJldHVybiBocmVmID8gaHJlZi5yZXBsYWNlKC9eKGh0dHBzP1xcOik/XFwvXFwvW15cXC9dKi8sICcnKSA6ICcnO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmFtZSAkYnJvd3NlciNkZWZlclxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEEgZnVuY3Rpb24sIHdobydzIGV4ZWN1dGlvbiBzaG91bGQgYmUgZGVmZXJyZWQuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gW2RlbGF5PTBdIG9mIG1pbGxpc2Vjb25kcyB0byBkZWZlciB0aGUgZnVuY3Rpb24gZXhlY3V0aW9uLlxuICAgKiBAcmV0dXJucyB7Kn0gRGVmZXJJZCB0aGF0IGNhbiBiZSB1c2VkIHRvIGNhbmNlbCB0aGUgdGFzayB2aWEgYCRicm93c2VyLmRlZmVyLmNhbmNlbCgpYC5cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEV4ZWN1dGVzIGEgZm4gYXN5bmNocm9ub3VzbHkgdmlhIGBzZXRUaW1lb3V0KGZuLCBkZWxheSlgLlxuICAgKlxuICAgKiBVbmxpa2Ugd2hlbiBjYWxsaW5nIGBzZXRUaW1lb3V0YCBkaXJlY3RseSwgaW4gdGVzdCB0aGlzIGZ1bmN0aW9uIGlzIG1vY2tlZCBhbmQgaW5zdGVhZCBvZiB1c2luZ1xuICAgKiBgc2V0VGltZW91dGAgaW4gdGVzdHMsIHRoZSBmbnMgYXJlIHF1ZXVlZCBpbiBhbiBhcnJheSwgd2hpY2ggY2FuIGJlIHByb2dyYW1tYXRpY2FsbHkgZmx1c2hlZFxuICAgKiB2aWEgYCRicm93c2VyLmRlZmVyLmZsdXNoKClgLlxuICAgKlxuICAgKi9cbiAgc2VsZi5kZWZlciA9IGZ1bmN0aW9uKGZuLCBkZWxheSkge1xuICAgIHZhciB0aW1lb3V0SWQ7XG4gICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQrKztcbiAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgZGVsZXRlIHBlbmRpbmdEZWZlcklkc1t0aW1lb3V0SWRdO1xuICAgICAgY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QoZm4pO1xuICAgIH0sIGRlbGF5IHx8IDApO1xuICAgIHBlbmRpbmdEZWZlcklkc1t0aW1lb3V0SWRdID0gdHJ1ZTtcbiAgICByZXR1cm4gdGltZW91dElkO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBuYW1lICRicm93c2VyI2RlZmVyLmNhbmNlbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ2FuY2VscyBhIGRlZmVycmVkIHRhc2sgaWRlbnRpZmllZCB3aXRoIGBkZWZlcklkYC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBkZWZlcklkIFRva2VuIHJldHVybmVkIGJ5IHRoZSBgJGJyb3dzZXIuZGVmZXJgIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRhc2sgaGFzbid0IGV4ZWN1dGVkIHlldCBhbmQgd2FzIHN1Y2Nlc3NmdWxseVxuICAgKiAgICAgICAgICAgICAgICAgICAgY2FuY2VsZWQuXG4gICAqL1xuICBzZWxmLmRlZmVyLmNhbmNlbCA9IGZ1bmN0aW9uKGRlZmVySWQpIHtcbiAgICBpZiAocGVuZGluZ0RlZmVySWRzW2RlZmVySWRdKSB7XG4gICAgICBkZWxldGUgcGVuZGluZ0RlZmVySWRzW2RlZmVySWRdO1xuICAgICAgY2xlYXJUaW1lb3V0KGRlZmVySWQpO1xuICAgICAgY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3Qobm9vcCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG59XG5cbmZ1bmN0aW9uICRCcm93c2VyUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckbG9nJywgJyRzbmlmZmVyJywgJyRkb2N1bWVudCcsXG4gICAgICBmdW5jdGlvbigkd2luZG93LCAkbG9nLCAkc25pZmZlciwgJGRvY3VtZW50KSB7XG4gICAgICAgIHJldHVybiBuZXcgQnJvd3Nlcigkd2luZG93LCAkZG9jdW1lbnQsICRsb2csICRzbmlmZmVyKTtcbiAgICAgIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkY2FjaGVGYWN0b3J5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBGYWN0b3J5IHRoYXQgY29uc3RydWN0cyB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0gb2JqZWN0cyBhbmQgZ2l2ZXMgYWNjZXNzIHRvXG4gKiB0aGVtLlxuICpcbiAqIGBgYGpzXG4gKlxuICogIHZhciBjYWNoZSA9ICRjYWNoZUZhY3RvcnkoJ2NhY2hlSWQnKTtcbiAqICBleHBlY3QoJGNhY2hlRmFjdG9yeS5nZXQoJ2NhY2hlSWQnKSkudG9CZShjYWNoZSk7XG4gKiAgZXhwZWN0KCRjYWNoZUZhY3RvcnkuZ2V0KCdub1N1Y2hDYWNoZUlkJykpLm5vdC50b0JlRGVmaW5lZCgpO1xuICpcbiAqICBjYWNoZS5wdXQoXCJrZXlcIiwgXCJ2YWx1ZVwiKTtcbiAqICBjYWNoZS5wdXQoXCJhbm90aGVyIGtleVwiLCBcImFub3RoZXIgdmFsdWVcIik7XG4gKlxuICogIC8vIFdlJ3ZlIHNwZWNpZmllZCBubyBvcHRpb25zIG9uIGNyZWF0aW9uXG4gKiAgZXhwZWN0KGNhY2hlLmluZm8oKSkudG9FcXVhbCh7aWQ6ICdjYWNoZUlkJywgc2l6ZTogMn0pO1xuICpcbiAqIGBgYFxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY2FjaGVJZCBOYW1lIG9yIGlkIG9mIHRoZSBuZXdseSBjcmVhdGVkIGNhY2hlLlxuICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0IHRoYXQgc3BlY2lmaWVzIHRoZSBjYWNoZSBiZWhhdmlvci4gUHJvcGVydGllczpcbiAqXG4gKiAgIC0gYHtudW1iZXI9fWAgYGNhcGFjaXR5YCDigJQgdHVybnMgdGhlIGNhY2hlIGludG8gTFJVIGNhY2hlLlxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IE5ld2x5IGNyZWF0ZWQgY2FjaGUgb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBzZXQgb2YgbWV0aG9kczpcbiAqXG4gKiAtIGB7b2JqZWN0fWAgYGluZm8oKWAg4oCUIFJldHVybnMgaWQsIHNpemUsIGFuZCBvcHRpb25zIG9mIGNhY2hlLlxuICogLSBge3sqfX1gIGBwdXQoe3N0cmluZ30ga2V5LCB7Kn0gdmFsdWUpYCDigJQgUHV0cyBhIG5ldyBrZXktdmFsdWUgcGFpciBpbnRvIHRoZSBjYWNoZSBhbmQgcmV0dXJuc1xuICogICBpdC5cbiAqIC0gYHt7Kn19YCBgZ2V0KHtzdHJpbmd9IGtleSlgIOKAlCBSZXR1cm5zIGNhY2hlZCB2YWx1ZSBmb3IgYGtleWAgb3IgdW5kZWZpbmVkIGZvciBjYWNoZSBtaXNzLlxuICogLSBge3ZvaWR9YCBgcmVtb3ZlKHtzdHJpbmd9IGtleSlgIOKAlCBSZW1vdmVzIGEga2V5LXZhbHVlIHBhaXIgZnJvbSB0aGUgY2FjaGUuXG4gKiAtIGB7dm9pZH1gIGByZW1vdmVBbGwoKWAg4oCUIFJlbW92ZXMgYWxsIGNhY2hlZCB2YWx1ZXMuXG4gKiAtIGB7dm9pZH1gIGBkZXN0cm95KClgIOKAlCBSZW1vdmVzIHJlZmVyZW5jZXMgdG8gdGhpcyBjYWNoZSBmcm9tICRjYWNoZUZhY3RvcnkuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImNhY2hlRXhhbXBsZUFwcFwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkNhY2hlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwibmV3Q2FjaGVLZXlcIiBwbGFjZWhvbGRlcj1cIktleVwiPlxuICAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwibmV3Q2FjaGVWYWx1ZVwiIHBsYWNlaG9sZGVyPVwiVmFsdWVcIj5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJwdXQobmV3Q2FjaGVLZXksIG5ld0NhY2hlVmFsdWUpXCI+Q2FjaGU8L2J1dHRvbj5cblxuICAgICAgICAgPHAgbmctaWY9XCJrZXlzLmxlbmd0aFwiPkNhY2hlZCBWYWx1ZXM8L3A+XG4gICAgICAgICA8ZGl2IG5nLXJlcGVhdD1cImtleSBpbiBrZXlzXCI+XG4gICAgICAgICAgIDxzcGFuIG5nLWJpbmQ9XCJrZXlcIj48L3NwYW4+XG4gICAgICAgICAgIDxzcGFuPjogPC9zcGFuPlxuICAgICAgICAgICA8YiBuZy1iaW5kPVwiY2FjaGUuZ2V0KGtleSlcIj48L2I+XG4gICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgPHA+Q2FjaGUgSW5mbzwvcD5cbiAgICAgICAgIDxkaXYgbmctcmVwZWF0PVwiKGtleSwgdmFsdWUpIGluIGNhY2hlLmluZm8oKVwiPlxuICAgICAgICAgICA8c3BhbiBuZy1iaW5kPVwia2V5XCI+PC9zcGFuPlxuICAgICAgICAgICA8c3Bhbj46IDwvc3Bhbj5cbiAgICAgICAgICAgPGIgbmctYmluZD1cInZhbHVlXCI+PC9iPlxuICAgICAgICAgPC9kaXY+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjYWNoZUV4YW1wbGVBcHAnLCBbXSkuXG4gICAgICAgICBjb250cm9sbGVyKCdDYWNoZUNvbnRyb2xsZXInLCBbJyRzY29wZScsICckY2FjaGVGYWN0b3J5JywgZnVuY3Rpb24oJHNjb3BlLCAkY2FjaGVGYWN0b3J5KSB7XG4gICAgICAgICAgICRzY29wZS5rZXlzID0gW107XG4gICAgICAgICAgICRzY29wZS5jYWNoZSA9ICRjYWNoZUZhY3RvcnkoJ2NhY2hlSWQnKTtcbiAgICAgICAgICAgJHNjb3BlLnB1dCA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZCgkc2NvcGUuY2FjaGUuZ2V0KGtleSkpKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUua2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgICRzY29wZS5jYWNoZS5wdXQoa2V5LCBhbmd1bGFyLmlzVW5kZWZpbmVkKHZhbHVlKSA/IG51bGwgOiB2YWx1ZSk7XG4gICAgICAgICAgIH07XG4gICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgIHAge1xuICAgICAgICAgbWFyZ2luOiAxMHB4IDAgM3B4O1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiAkQ2FjaGVGYWN0b3J5UHJvdmlkZXIoKSB7XG5cbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNhY2hlcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gY2FjaGVGYWN0b3J5KGNhY2hlSWQsIG9wdGlvbnMpIHtcbiAgICAgIGlmIChjYWNoZUlkIGluIGNhY2hlcykge1xuICAgICAgICB0aHJvdyBtaW5FcnIoJyRjYWNoZUZhY3RvcnknKSgnaWlkJywgXCJDYWNoZUlkICd7MH0nIGlzIGFscmVhZHkgdGFrZW4hXCIsIGNhY2hlSWQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2l6ZSA9IDAsXG4gICAgICAgICAgc3RhdHMgPSBleHRlbmQoe30sIG9wdGlvbnMsIHtpZDogY2FjaGVJZH0pLFxuICAgICAgICAgIGRhdGEgPSBjcmVhdGVNYXAoKSxcbiAgICAgICAgICBjYXBhY2l0eSA9IChvcHRpb25zICYmIG9wdGlvbnMuY2FwYWNpdHkpIHx8IE51bWJlci5NQVhfVkFMVUUsXG4gICAgICAgICAgbHJ1SGFzaCA9IGNyZWF0ZU1hcCgpLFxuICAgICAgICAgIGZyZXNoRW5kID0gbnVsbCxcbiAgICAgICAgICBzdGFsZUVuZCA9IG51bGw7XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIHR5cGVcbiAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEEgY2FjaGUgb2JqZWN0IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIGRhdGEsIHByaW1hcmlseSB1c2VkIGJ5XG4gICAgICAgKiB7QGxpbmsgJGh0dHAgJGh0dHB9IGFuZCB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpzY3JpcHQgc2NyaXB0fSBkaXJlY3RpdmUgdG8gY2FjaGVcbiAgICAgICAqIHRlbXBsYXRlcyBhbmQgb3RoZXIgZGF0YS5cbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogIGFuZ3VsYXIubW9kdWxlKCdzdXBlckNhY2hlJylcbiAgICAgICAqICAgIC5mYWN0b3J5KCdzdXBlckNhY2hlJywgWyckY2FjaGVGYWN0b3J5JywgZnVuY3Rpb24oJGNhY2hlRmFjdG9yeSkge1xuICAgICAgICogICAgICByZXR1cm4gJGNhY2hlRmFjdG9yeSgnc3VwZXItY2FjaGUnKTtcbiAgICAgICAqICAgIH1dKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEV4YW1wbGUgdGVzdDpcbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogIGl0KCdzaG91bGQgYmVoYXZlIGxpa2UgYSBjYWNoZScsIGluamVjdChmdW5jdGlvbihzdXBlckNhY2hlKSB7XG4gICAgICAgKiAgICBzdXBlckNhY2hlLnB1dCgna2V5JywgJ3ZhbHVlJyk7XG4gICAgICAgKiAgICBzdXBlckNhY2hlLnB1dCgnYW5vdGhlciBrZXknLCAnYW5vdGhlciB2YWx1ZScpO1xuICAgICAgICpcbiAgICAgICAqICAgIGV4cGVjdChzdXBlckNhY2hlLmluZm8oKSkudG9FcXVhbCh7XG4gICAgICAgKiAgICAgIGlkOiAnc3VwZXItY2FjaGUnLFxuICAgICAgICogICAgICBzaXplOiAyXG4gICAgICAgKiAgICB9KTtcbiAgICAgICAqXG4gICAgICAgKiAgICBzdXBlckNhY2hlLnJlbW92ZSgnYW5vdGhlciBrZXknKTtcbiAgICAgICAqICAgIGV4cGVjdChzdXBlckNhY2hlLmdldCgnYW5vdGhlciBrZXknKSkudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgICpcbiAgICAgICAqICAgIHN1cGVyQ2FjaGUucmVtb3ZlQWxsKCk7XG4gICAgICAgKiAgICBleHBlY3Qoc3VwZXJDYWNoZS5pbmZvKCkpLnRvRXF1YWwoe1xuICAgICAgICogICAgICBpZDogJ3N1cGVyLWNhY2hlJyxcbiAgICAgICAqICAgICAgc2l6ZTogMFxuICAgICAgICogICAgfSk7XG4gICAgICAgKiAgfSkpO1xuICAgICAgICogYGBgXG4gICAgICAgKi9cbiAgICAgIHJldHVybiBjYWNoZXNbY2FjaGVJZF0gPSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNwdXRcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIEluc2VydHMgYSBuYW1lZCBlbnRyeSBpbnRvIHRoZSB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0gb2JqZWN0IHRvIGJlXG4gICAgICAgICAqIHJldHJpZXZlZCBsYXRlciwgYW5kIGluY3JlbWVudGluZyB0aGUgc2l6ZSBvZiB0aGUgY2FjaGUgaWYgdGhlIGtleSB3YXMgbm90IGFscmVhZHlcbiAgICAgICAgICogcHJlc2VudCBpbiB0aGUgY2FjaGUuIElmIGJlaGF2aW5nIGxpa2UgYW4gTFJVIGNhY2hlLCBpdCB3aWxsIGFsc28gcmVtb3ZlIHN0YWxlXG4gICAgICAgICAqIGVudHJpZXMgZnJvbSB0aGUgc2V0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBJdCB3aWxsIG5vdCBpbnNlcnQgdW5kZWZpbmVkIHZhbHVlcyBpbnRvIHRoZSBjYWNoZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSB0aGUga2V5IHVuZGVyIHdoaWNoIHRoZSBjYWNoZWQgZGF0YSBpcyBzdG9yZWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgdGhlIHZhbHVlIHRvIHN0b3JlIGFsb25nc2lkZSB0aGUga2V5LiBJZiBpdCBpcyB1bmRlZmluZWQsIHRoZSBrZXlcbiAgICAgICAgICogICAgd2lsbCBub3QgYmUgc3RvcmVkLlxuICAgICAgICAgKiBAcmV0dXJucyB7Kn0gdGhlIHZhbHVlIHN0b3JlZC5cbiAgICAgICAgICovXG4gICAgICAgIHB1dDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjtcbiAgICAgICAgICBpZiAoY2FwYWNpdHkgPCBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgICAgICB2YXIgbHJ1RW50cnkgPSBscnVIYXNoW2tleV0gfHwgKGxydUhhc2hba2V5XSA9IHtrZXk6IGtleX0pO1xuXG4gICAgICAgICAgICByZWZyZXNoKGxydUVudHJ5KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIShrZXkgaW4gZGF0YSkpIHNpemUrKztcbiAgICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZTtcblxuICAgICAgICAgIGlmIChzaXplID4gY2FwYWNpdHkpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKHN0YWxlRW5kLmtleSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGUjZ2V0XG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBSZXRyaWV2ZXMgbmFtZWQgZGF0YSBzdG9yZWQgaW4gdGhlIHtAbGluayAkY2FjaGVGYWN0b3J5LkNhY2hlIENhY2hlfSBvYmplY3QuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdGhlIGtleSBvZiB0aGUgZGF0YSB0byBiZSByZXRyaWV2ZWRcbiAgICAgICAgICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSBzdG9yZWQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIGlmIChjYXBhY2l0eSA8IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XTtcblxuICAgICAgICAgICAgaWYgKCFscnVFbnRyeSkgcmV0dXJuO1xuXG4gICAgICAgICAgICByZWZyZXNoKGxydUVudHJ5KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZGF0YVtrZXldO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNyZW1vdmVcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFJlbW92ZXMgYW4gZW50cnkgZnJvbSB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSB0aGUga2V5IG9mIHRoZSBlbnRyeSB0byBiZSByZW1vdmVkXG4gICAgICAgICAqL1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIGlmIChjYXBhY2l0eSA8IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XTtcblxuICAgICAgICAgICAgaWYgKCFscnVFbnRyeSkgcmV0dXJuO1xuXG4gICAgICAgICAgICBpZiAobHJ1RW50cnkgPT0gZnJlc2hFbmQpIGZyZXNoRW5kID0gbHJ1RW50cnkucDtcbiAgICAgICAgICAgIGlmIChscnVFbnRyeSA9PSBzdGFsZUVuZCkgc3RhbGVFbmQgPSBscnVFbnRyeS5uO1xuICAgICAgICAgICAgbGluayhscnVFbnRyeS5uLGxydUVudHJ5LnApO1xuXG4gICAgICAgICAgICBkZWxldGUgbHJ1SGFzaFtrZXldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghKGtleSBpbiBkYXRhKSkgcmV0dXJuO1xuXG4gICAgICAgICAgZGVsZXRlIGRhdGFba2V5XTtcbiAgICAgICAgICBzaXplLS07XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI3JlbW92ZUFsbFxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogQ2xlYXJzIHRoZSBjYWNoZSBvYmplY3Qgb2YgYW55IGVudHJpZXMuXG4gICAgICAgICAqL1xuICAgICAgICByZW1vdmVBbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGRhdGEgPSBjcmVhdGVNYXAoKTtcbiAgICAgICAgICBzaXplID0gMDtcbiAgICAgICAgICBscnVIYXNoID0gY3JlYXRlTWFwKCk7XG4gICAgICAgICAgZnJlc2hFbmQgPSBzdGFsZUVuZCA9IG51bGw7XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI2Rlc3Ryb3lcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIERlc3Ryb3lzIHRoZSB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0gb2JqZWN0IGVudGlyZWx5LFxuICAgICAgICAgKiByZW1vdmluZyBpdCBmcm9tIHRoZSB7QGxpbmsgJGNhY2hlRmFjdG9yeSAkY2FjaGVGYWN0b3J5fSBzZXQuXG4gICAgICAgICAqL1xuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkYXRhID0gbnVsbDtcbiAgICAgICAgICBzdGF0cyA9IG51bGw7XG4gICAgICAgICAgbHJ1SGFzaCA9IG51bGw7XG4gICAgICAgICAgZGVsZXRlIGNhY2hlc1tjYWNoZUlkXTtcbiAgICAgICAgfSxcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGUjaW5mb1xuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogUmV0cmlldmUgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGEgcGFydGljdWxhciB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0uXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtvYmplY3R9IGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAgICogICA8dWw+XG4gICAgICAgICAqICAgICA8bGk+KippZCoqOiB0aGUgaWQgb2YgdGhlIGNhY2hlIGluc3RhbmNlPC9saT5cbiAgICAgICAgICogICAgIDxsaT4qKnNpemUqKjogdGhlIG51bWJlciBvZiBlbnRyaWVzIGtlcHQgaW4gdGhlIGNhY2hlIGluc3RhbmNlPC9saT5cbiAgICAgICAgICogICAgIDxsaT4qKi4uLioqOiBhbnkgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIGZyb20gdGhlIG9wdGlvbnMgb2JqZWN0IHdoZW4gY3JlYXRpbmcgdGhlXG4gICAgICAgICAqICAgICAgIGNhY2hlLjwvbGk+XG4gICAgICAgICAqICAgPC91bD5cbiAgICAgICAgICovXG4gICAgICAgIGluZm86IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBleHRlbmQoe30sIHN0YXRzLCB7c2l6ZTogc2l6ZX0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG5cbiAgICAgIC8qKlxuICAgICAgICogbWFrZXMgdGhlIGBlbnRyeWAgdGhlIGZyZXNoRW5kIG9mIHRoZSBMUlUgbGlua2VkIGxpc3RcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVmcmVzaChlbnRyeSkge1xuICAgICAgICBpZiAoZW50cnkgIT0gZnJlc2hFbmQpIHtcbiAgICAgICAgICBpZiAoIXN0YWxlRW5kKSB7XG4gICAgICAgICAgICBzdGFsZUVuZCA9IGVudHJ5O1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhbGVFbmQgPT0gZW50cnkpIHtcbiAgICAgICAgICAgIHN0YWxlRW5kID0gZW50cnkubjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsaW5rKGVudHJ5Lm4sIGVudHJ5LnApO1xuICAgICAgICAgIGxpbmsoZW50cnksIGZyZXNoRW5kKTtcbiAgICAgICAgICBmcmVzaEVuZCA9IGVudHJ5O1xuICAgICAgICAgIGZyZXNoRW5kLm4gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBiaWRpcmVjdGlvbmFsbHkgbGlua3MgdHdvIGVudHJpZXMgb2YgdGhlIExSVSBsaW5rZWQgbGlzdFxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBsaW5rKG5leHRFbnRyeSwgcHJldkVudHJ5KSB7XG4gICAgICAgIGlmIChuZXh0RW50cnkgIT0gcHJldkVudHJ5KSB7XG4gICAgICAgICAgaWYgKG5leHRFbnRyeSkgbmV4dEVudHJ5LnAgPSBwcmV2RW50cnk7IC8vcCBzdGFuZHMgZm9yIHByZXZpb3VzLCAncHJldicgZGlkbid0IG1pbmlmeVxuICAgICAgICAgIGlmIChwcmV2RW50cnkpIHByZXZFbnRyeS5uID0gbmV4dEVudHJ5OyAvL24gc3RhbmRzIGZvciBuZXh0LCAnbmV4dCcgZGlkbid0IG1pbmlmeVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNhY2hlRmFjdG9yeSNpbmZvXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBHZXQgaW5mb3JtYXRpb24gYWJvdXQgYWxsIHRoZSBjYWNoZXMgdGhhdCBoYXZlIGJlZW4gY3JlYXRlZFxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSAtIGtleS12YWx1ZSBtYXAgb2YgYGNhY2hlSWRgIHRvIHRoZSByZXN1bHQgb2YgY2FsbGluZyBgY2FjaGUjaW5mb2BcbiAgICovXG4gICAgY2FjaGVGYWN0b3J5LmluZm8gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpbmZvID0ge307XG4gICAgICBmb3JFYWNoKGNhY2hlcywgZnVuY3Rpb24oY2FjaGUsIGNhY2hlSWQpIHtcbiAgICAgICAgaW5mb1tjYWNoZUlkXSA9IGNhY2hlLmluZm8oKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGluZm87XG4gICAgfTtcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjYWNoZUZhY3RvcnkjZ2V0XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBHZXQgYWNjZXNzIHRvIGEgY2FjaGUgb2JqZWN0IGJ5IHRoZSBgY2FjaGVJZGAgdXNlZCB3aGVuIGl0IHdhcyBjcmVhdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2FjaGVJZCBOYW1lIG9yIGlkIG9mIGEgY2FjaGUgdG8gYWNjZXNzLlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBDYWNoZSBvYmplY3QgaWRlbnRpZmllZCBieSB0aGUgY2FjaGVJZCBvciB1bmRlZmluZWQgaWYgbm8gc3VjaCBjYWNoZS5cbiAgICovXG4gICAgY2FjaGVGYWN0b3J5LmdldCA9IGZ1bmN0aW9uKGNhY2hlSWQpIHtcbiAgICAgIHJldHVybiBjYWNoZXNbY2FjaGVJZF07XG4gICAgfTtcblxuXG4gICAgcmV0dXJuIGNhY2hlRmFjdG9yeTtcbiAgfTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHRlbXBsYXRlQ2FjaGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBmaXJzdCB0aW1lIGEgdGVtcGxhdGUgaXMgdXNlZCwgaXQgaXMgbG9hZGVkIGluIHRoZSB0ZW1wbGF0ZSBjYWNoZSBmb3IgcXVpY2sgcmV0cmlldmFsLiBZb3VcbiAqIGNhbiBsb2FkIHRlbXBsYXRlcyBkaXJlY3RseSBpbnRvIHRoZSBjYWNoZSBpbiBhIGBzY3JpcHRgIHRhZywgb3IgYnkgY29uc3VtaW5nIHRoZVxuICogYCR0ZW1wbGF0ZUNhY2hlYCBzZXJ2aWNlIGRpcmVjdGx5LlxuICpcbiAqIEFkZGluZyB2aWEgdGhlIGBzY3JpcHRgIHRhZzpcbiAqXG4gKiBgYGBodG1sXG4gKiAgIDxzY3JpcHQgdHlwZT1cInRleHQvbmctdGVtcGxhdGVcIiBpZD1cInRlbXBsYXRlSWQuaHRtbFwiPlxuICogICAgIDxwPlRoaXMgaXMgdGhlIGNvbnRlbnQgb2YgdGhlIHRlbXBsYXRlPC9wPlxuICogICA8L3NjcmlwdD5cbiAqIGBgYFxuICpcbiAqICoqTm90ZToqKiB0aGUgYHNjcmlwdGAgdGFnIGNvbnRhaW5pbmcgdGhlIHRlbXBsYXRlIGRvZXMgbm90IG5lZWQgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIGBoZWFkYCBvZlxuICogdGhlIGRvY3VtZW50LCBidXQgaXQgbXVzdCBiZSBhIGRlc2NlbmRlbnQgb2YgdGhlIHtAbGluayBuZy4kcm9vdEVsZW1lbnQgJHJvb3RFbGVtZW50fSAoSUUsXG4gKiBlbGVtZW50IHdpdGggbmctYXBwIGF0dHJpYnV0ZSksIG90aGVyd2lzZSB0aGUgdGVtcGxhdGUgd2lsbCBiZSBpZ25vcmVkLlxuICpcbiAqIEFkZGluZyB2aWEgdGhlIGAkdGVtcGxhdGVDYWNoZWAgc2VydmljZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIG15QXBwID0gYW5ndWxhci5tb2R1bGUoJ215QXBwJywgW10pO1xuICogbXlBcHAucnVuKGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gKiAgICR0ZW1wbGF0ZUNhY2hlLnB1dCgndGVtcGxhdGVJZC5odG1sJywgJ1RoaXMgaXMgdGhlIGNvbnRlbnQgb2YgdGhlIHRlbXBsYXRlJyk7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIFRvIHJldHJpZXZlIHRoZSB0ZW1wbGF0ZSBsYXRlciwgc2ltcGx5IHVzZSBpdCBpbiB5b3VyIEhUTUw6XG4gKiBgYGBodG1sXG4gKiA8ZGl2IG5nLWluY2x1ZGU9XCIgJ3RlbXBsYXRlSWQuaHRtbCcgXCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBvciBnZXQgaXQgdmlhIEphdmFzY3JpcHQ6XG4gKiBgYGBqc1xuICogJHRlbXBsYXRlQ2FjaGUuZ2V0KCd0ZW1wbGF0ZUlkLmh0bWwnKVxuICogYGBgXG4gKlxuICogU2VlIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5ICRjYWNoZUZhY3Rvcnl9LlxuICpcbiAqL1xuZnVuY3Rpb24gJFRlbXBsYXRlQ2FjaGVQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckY2FjaGVGYWN0b3J5JywgZnVuY3Rpb24oJGNhY2hlRmFjdG9yeSkge1xuICAgIHJldHVybiAkY2FjaGVGYWN0b3J5KCd0ZW1wbGF0ZXMnKTtcbiAgfV07XG59XG5cbi8qICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbiAqICAgICBBbnkgY29tbWl0cyB0byB0aGlzIGZpbGUgc2hvdWxkIGJlIHJldmlld2VkIHdpdGggc2VjdXJpdHkgaW4gbWluZC4gICpcbiAqICAgQ2hhbmdlcyB0byB0aGlzIGZpbGUgY2FuIHBvdGVudGlhbGx5IGNyZWF0ZSBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMuICpcbiAqICAgICAgICAgIEFuIGFwcHJvdmFsIGZyb20gMiBDb3JlIG1lbWJlcnMgd2l0aCBoaXN0b3J5IG9mIG1vZGlmeWluZyAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgZmlsZSBpcyByZXF1aXJlZC4gICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICBEb2VzIHRoZSBjaGFuZ2Ugc29tZWhvdyBhbGxvdyBmb3IgYXJiaXRyYXJ5IGphdmFzY3JpcHQgdG8gYmUgZXhlY3V0ZWQ/ICpcbiAqICAgIE9yIGFsbG93cyBmb3Igc29tZW9uZSB0byBjaGFuZ2UgdGhlIHByb3RvdHlwZSBvZiBidWlsdC1pbiBvYmplY3RzPyAgICpcbiAqICAgICBPciBnaXZlcyB1bmRlc2lyZWQgYWNjZXNzIHRvIHZhcmlhYmxlcyBsaWtlcyBkb2N1bWVudCBvciB3aW5kb3c/ICAgICpcbiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICovXG5cbi8qICEgVkFSSUFCTEUvRlVOQ1RJT04gTkFNSU5HIENPTlZFTlRJT05TIFRIQVQgQVBQTFkgVE8gVEhJUyBGSUxFIVxuICpcbiAqIERPTS1yZWxhdGVkIHZhcmlhYmxlczpcbiAqXG4gKiAtIFwibm9kZVwiIC0gRE9NIE5vZGVcbiAqIC0gXCJlbGVtZW50XCIgLSBET00gRWxlbWVudCBvciBOb2RlXG4gKiAtIFwiJG5vZGVcIiBvciBcIiRlbGVtZW50XCIgLSBqcUxpdGUtd3JhcHBlZCBub2RlIG9yIGVsZW1lbnRcbiAqXG4gKlxuICogQ29tcGlsZXIgcmVsYXRlZCBzdHVmZjpcbiAqXG4gKiAtIFwibGlua0ZuXCIgLSBsaW5raW5nIGZuIG9mIGEgc2luZ2xlIGRpcmVjdGl2ZVxuICogLSBcIm5vZGVMaW5rRm5cIiAtIGZ1bmN0aW9uIHRoYXQgYWdncmVnYXRlcyBhbGwgbGlua2luZyBmbnMgZm9yIGEgcGFydGljdWxhciBub2RlXG4gKiAtIFwiY2hpbGRMaW5rRm5cIiAtICBmdW5jdGlvbiB0aGF0IGFnZ3JlZ2F0ZXMgYWxsIGxpbmtpbmcgZm5zIGZvciBjaGlsZCBub2RlcyBvZiBhIHBhcnRpY3VsYXIgbm9kZVxuICogLSBcImNvbXBvc2l0ZUxpbmtGblwiIC0gZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGFsbCBsaW5raW5nIGZucyBmb3IgYSBjb21waWxhdGlvbiByb290IChub2RlTGlzdClcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRjb21waWxlXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29tcGlsZXMgYW4gSFRNTCBzdHJpbmcgb3IgRE9NIGludG8gYSB0ZW1wbGF0ZSBhbmQgcHJvZHVjZXMgYSB0ZW1wbGF0ZSBmdW5jdGlvbiwgd2hpY2hcbiAqIGNhbiB0aGVuIGJlIHVzZWQgdG8gbGluayB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBgc2NvcGVgfSBhbmQgdGhlIHRlbXBsYXRlIHRvZ2V0aGVyLlxuICpcbiAqIFRoZSBjb21waWxhdGlvbiBpcyBhIHByb2Nlc3Mgb2Ygd2Fsa2luZyB0aGUgRE9NIHRyZWUgYW5kIG1hdGNoaW5nIERPTSBlbGVtZW50cyB0b1xuICoge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogVGhpcyBkb2N1bWVudCBpcyBhbiBpbi1kZXB0aCByZWZlcmVuY2Ugb2YgYWxsIGRpcmVjdGl2ZSBvcHRpb25zLlxuICogRm9yIGEgZ2VudGxlIGludHJvZHVjdGlvbiB0byBkaXJlY3RpdmVzIHdpdGggZXhhbXBsZXMgb2YgY29tbW9uIHVzZSBjYXNlcyxcbiAqIHNlZSB0aGUge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSBkaXJlY3RpdmUgZ3VpZGV9LlxuICogPC9kaXY+XG4gKlxuICogIyMgQ29tcHJlaGVuc2l2ZSBEaXJlY3RpdmUgQVBJXG4gKlxuICogVGhlcmUgYXJlIG1hbnkgZGlmZmVyZW50IG9wdGlvbnMgZm9yIGEgZGlyZWN0aXZlLlxuICpcbiAqIFRoZSBkaWZmZXJlbmNlIHJlc2lkZXMgaW4gdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZmFjdG9yeSBmdW5jdGlvbi5cbiAqIFlvdSBjYW4gZWl0aGVyIHJldHVybiBhIFwiRGlyZWN0aXZlIERlZmluaXRpb24gT2JqZWN0XCIgKHNlZSBiZWxvdykgdGhhdCBkZWZpbmVzIHRoZSBkaXJlY3RpdmUgcHJvcGVydGllcyxcbiAqIG9yIGp1c3QgdGhlIGBwb3N0TGlua2AgZnVuY3Rpb24gKGFsbCBvdGhlciBwcm9wZXJ0aWVzIHdpbGwgaGF2ZSB0aGUgZGVmYXVsdCB2YWx1ZXMpLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1zdWNjZXNzXCI+XG4gKiAqKkJlc3QgUHJhY3RpY2U6KiogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIFwiZGlyZWN0aXZlIGRlZmluaXRpb24gb2JqZWN0XCIgZm9ybS5cbiAqIDwvZGl2PlxuICpcbiAqIEhlcmUncyBhbiBleGFtcGxlIGRpcmVjdGl2ZSBkZWNsYXJlZCB3aXRoIGEgRGlyZWN0aXZlIERlZmluaXRpb24gT2JqZWN0OlxuICpcbiAqIGBgYGpzXG4gKiAgIHZhciBteU1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKC4uLik7XG4gKlxuICogICBteU1vZHVsZS5kaXJlY3RpdmUoJ2RpcmVjdGl2ZU5hbWUnLCBmdW5jdGlvbiBmYWN0b3J5KGluamVjdGFibGVzKSB7XG4gKiAgICAgdmFyIGRpcmVjdGl2ZURlZmluaXRpb25PYmplY3QgPSB7XG4gKiAgICAgICBwcmlvcml0eTogMCxcbiAqICAgICAgIHRlbXBsYXRlOiAnPGRpdj48L2Rpdj4nLCAvLyBvciAvLyBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7IC4uLiB9LFxuICogICAgICAgLy8gb3JcbiAqICAgICAgIC8vIHRlbXBsYXRlVXJsOiAnZGlyZWN0aXZlLmh0bWwnLCAvLyBvciAvLyBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7IC4uLiB9LFxuICogICAgICAgdHJhbnNjbHVkZTogZmFsc2UsXG4gKiAgICAgICByZXN0cmljdDogJ0EnLFxuICogICAgICAgdGVtcGxhdGVOYW1lc3BhY2U6ICdodG1sJyxcbiAqICAgICAgIHNjb3BlOiBmYWxzZSxcbiAqICAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJHRyYW5zY2x1ZGUsIG90aGVySW5qZWN0YWJsZXMpIHsgLi4uIH0sXG4gKiAgICAgICBjb250cm9sbGVyQXM6ICdzdHJpbmdJZGVudGlmaWVyJyxcbiAqICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IGZhbHNlLFxuICogICAgICAgcmVxdWlyZTogJ3NpYmxpbmdEaXJlY3RpdmVOYW1lJywgLy8gb3IgLy8gWydecGFyZW50RGlyZWN0aXZlTmFtZScsICc/b3B0aW9uYWxEaXJlY3RpdmVOYW1lJywgJz9eb3B0aW9uYWxQYXJlbnQnXSxcbiAqICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIGNvbXBpbGUodEVsZW1lbnQsIHRBdHRycywgdHJhbnNjbHVkZSkge1xuICogICAgICAgICByZXR1cm4ge1xuICogICAgICAgICAgIHByZTogZnVuY3Rpb24gcHJlTGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlcikgeyAuLi4gfSxcbiAqICAgICAgICAgICBwb3N0OiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlcikgeyAuLi4gfVxuICogICAgICAgICB9XG4gKiAgICAgICAgIC8vIG9yXG4gKiAgICAgICAgIC8vIHJldHVybiBmdW5jdGlvbiBwb3N0TGluayggLi4uICkgeyAuLi4gfVxuICogICAgICAgfSxcbiAqICAgICAgIC8vIG9yXG4gKiAgICAgICAvLyBsaW5rOiB7XG4gKiAgICAgICAvLyAgcHJlOiBmdW5jdGlvbiBwcmVMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjb250cm9sbGVyKSB7IC4uLiB9LFxuICogICAgICAgLy8gIHBvc3Q6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjb250cm9sbGVyKSB7IC4uLiB9XG4gKiAgICAgICAvLyB9XG4gKiAgICAgICAvLyBvclxuICogICAgICAgLy8gbGluazogZnVuY3Rpb24gcG9zdExpbmsoIC4uLiApIHsgLi4uIH1cbiAqICAgICB9O1xuICogICAgIHJldHVybiBkaXJlY3RpdmVEZWZpbml0aW9uT2JqZWN0O1xuICogICB9KTtcbiAqIGBgYFxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogQW55IHVuc3BlY2lmaWVkIG9wdGlvbnMgd2lsbCB1c2UgdGhlIGRlZmF1bHQgdmFsdWUuIFlvdSBjYW4gc2VlIHRoZSBkZWZhdWx0IHZhbHVlcyBiZWxvdy5cbiAqIDwvZGl2PlxuICpcbiAqIFRoZXJlZm9yZSB0aGUgYWJvdmUgY2FuIGJlIHNpbXBsaWZpZWQgYXM6XG4gKlxuICogYGBganNcbiAqICAgdmFyIG15TW9kdWxlID0gYW5ndWxhci5tb2R1bGUoLi4uKTtcbiAqXG4gKiAgIG15TW9kdWxlLmRpcmVjdGl2ZSgnZGlyZWN0aXZlTmFtZScsIGZ1bmN0aW9uIGZhY3RvcnkoaW5qZWN0YWJsZXMpIHtcbiAqICAgICB2YXIgZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdCA9IHtcbiAqICAgICAgIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzKSB7IC4uLiB9XG4gKiAgICAgfTtcbiAqICAgICByZXR1cm4gZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdDtcbiAqICAgICAvLyBvclxuICogICAgIC8vIHJldHVybiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycykgeyAuLi4gfVxuICogICB9KTtcbiAqIGBgYFxuICpcbiAqXG4gKlxuICogIyMjIERpcmVjdGl2ZSBEZWZpbml0aW9uIE9iamVjdFxuICpcbiAqIFRoZSBkaXJlY3RpdmUgZGVmaW5pdGlvbiBvYmplY3QgcHJvdmlkZXMgaW5zdHJ1Y3Rpb25zIHRvIHRoZSB7QGxpbmsgbmcuJGNvbXBpbGVcbiAqIGNvbXBpbGVyfS4gVGhlIGF0dHJpYnV0ZXMgYXJlOlxuICpcbiAqICMjIyMgYG11bHRpRWxlbWVudGBcbiAqIFdoZW4gdGhpcyBwcm9wZXJ0eSBpcyBzZXQgdG8gdHJ1ZSwgdGhlIEhUTUwgY29tcGlsZXIgd2lsbCBjb2xsZWN0IERPTSBub2RlcyBiZXR3ZWVuXG4gKiBub2RlcyB3aXRoIHRoZSBhdHRyaWJ1dGVzIGBkaXJlY3RpdmUtbmFtZS1zdGFydGAgYW5kIGBkaXJlY3RpdmUtbmFtZS1lbmRgLCBhbmQgZ3JvdXAgdGhlbVxuICogdG9nZXRoZXIgYXMgdGhlIGRpcmVjdGl2ZSBlbGVtZW50cy4gSXQgaXMgcmVjb21tZW5kZWQgdGhhdCB0aGlzIGZlYXR1cmUgYmUgdXNlZCBvbiBkaXJlY3RpdmVzXG4gKiB3aGljaCBhcmUgbm90IHN0cmljdGx5IGJlaGF2aW91cmFsIChzdWNoIGFzIHtAbGluayBuZ0NsaWNrfSksIGFuZCB3aGljaFxuICogZG8gbm90IG1hbmlwdWxhdGUgb3IgcmVwbGFjZSBjaGlsZCBub2RlcyAoc3VjaCBhcyB7QGxpbmsgbmdJbmNsdWRlfSkuXG4gKlxuICogIyMjIyBgcHJpb3JpdHlgXG4gKiBXaGVuIHRoZXJlIGFyZSBtdWx0aXBsZSBkaXJlY3RpdmVzIGRlZmluZWQgb24gYSBzaW5nbGUgRE9NIGVsZW1lbnQsIHNvbWV0aW1lcyBpdFxuICogaXMgbmVjZXNzYXJ5IHRvIHNwZWNpZnkgdGhlIG9yZGVyIGluIHdoaWNoIHRoZSBkaXJlY3RpdmVzIGFyZSBhcHBsaWVkLiBUaGUgYHByaW9yaXR5YCBpcyB1c2VkXG4gKiB0byBzb3J0IHRoZSBkaXJlY3RpdmVzIGJlZm9yZSB0aGVpciBgY29tcGlsZWAgZnVuY3Rpb25zIGdldCBjYWxsZWQuIFByaW9yaXR5IGlzIGRlZmluZWQgYXMgYVxuICogbnVtYmVyLiBEaXJlY3RpdmVzIHdpdGggZ3JlYXRlciBudW1lcmljYWwgYHByaW9yaXR5YCBhcmUgY29tcGlsZWQgZmlyc3QuIFByZS1saW5rIGZ1bmN0aW9uc1xuICogYXJlIGFsc28gcnVuIGluIHByaW9yaXR5IG9yZGVyLCBidXQgcG9zdC1saW5rIGZ1bmN0aW9ucyBhcmUgcnVuIGluIHJldmVyc2Ugb3JkZXIuIFRoZSBvcmRlclxuICogb2YgZGlyZWN0aXZlcyB3aXRoIHRoZSBzYW1lIHByaW9yaXR5IGlzIHVuZGVmaW5lZC4gVGhlIGRlZmF1bHQgcHJpb3JpdHkgaXMgYDBgLlxuICpcbiAqICMjIyMgYHRlcm1pbmFsYFxuICogSWYgc2V0IHRvIHRydWUgdGhlbiB0aGUgY3VycmVudCBgcHJpb3JpdHlgIHdpbGwgYmUgdGhlIGxhc3Qgc2V0IG9mIGRpcmVjdGl2ZXNcbiAqIHdoaWNoIHdpbGwgZXhlY3V0ZSAoYW55IGRpcmVjdGl2ZXMgYXQgdGhlIGN1cnJlbnQgcHJpb3JpdHkgd2lsbCBzdGlsbCBleGVjdXRlXG4gKiBhcyB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uIG9uIHNhbWUgYHByaW9yaXR5YCBpcyB1bmRlZmluZWQpLiBOb3RlIHRoYXQgZXhwcmVzc2lvbnNcbiAqIGFuZCBvdGhlciBkaXJlY3RpdmVzIHVzZWQgaW4gdGhlIGRpcmVjdGl2ZSdzIHRlbXBsYXRlIHdpbGwgYWxzbyBiZSBleGNsdWRlZCBmcm9tIGV4ZWN1dGlvbi5cbiAqXG4gKiAjIyMjIGBzY29wZWBcbiAqIFRoZSBzY29wZSBwcm9wZXJ0eSBjYW4gYmUgYHRydWVgLCBhbiBvYmplY3Qgb3IgYSBmYWxzeSB2YWx1ZTpcbiAqXG4gKiAqICoqZmFsc3k6KiogTm8gc2NvcGUgd2lsbCBiZSBjcmVhdGVkIGZvciB0aGUgZGlyZWN0aXZlLiBUaGUgZGlyZWN0aXZlIHdpbGwgdXNlIGl0cyBwYXJlbnQncyBzY29wZS5cbiAqXG4gKiAqICoqYHRydWVgOioqIEEgbmV3IGNoaWxkIHNjb3BlIHRoYXQgcHJvdG90eXBpY2FsbHkgaW5oZXJpdHMgZnJvbSBpdHMgcGFyZW50IHdpbGwgYmUgY3JlYXRlZCBmb3JcbiAqIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50LiBJZiBtdWx0aXBsZSBkaXJlY3RpdmVzIG9uIHRoZSBzYW1lIGVsZW1lbnQgcmVxdWVzdCBhIG5ldyBzY29wZSxcbiAqIG9ubHkgb25lIG5ldyBzY29wZSBpcyBjcmVhdGVkLiBUaGUgbmV3IHNjb3BlIHJ1bGUgZG9lcyBub3QgYXBwbHkgZm9yIHRoZSByb290IG9mIHRoZSB0ZW1wbGF0ZVxuICogc2luY2UgdGhlIHJvb3Qgb2YgdGhlIHRlbXBsYXRlIGFsd2F5cyBnZXRzIGEgbmV3IHNjb3BlLlxuICpcbiAqICogKipgey4uLn1gIChhbiBvYmplY3QgaGFzaCk6KiogQSBuZXcgXCJpc29sYXRlXCIgc2NvcGUgaXMgY3JlYXRlZCBmb3IgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQuIFRoZVxuICogJ2lzb2xhdGUnIHNjb3BlIGRpZmZlcnMgZnJvbSBub3JtYWwgc2NvcGUgaW4gdGhhdCBpdCBkb2VzIG5vdCBwcm90b3R5cGljYWxseSBpbmhlcml0IGZyb20gaXRzIHBhcmVudFxuICogc2NvcGUuIFRoaXMgaXMgdXNlZnVsIHdoZW4gY3JlYXRpbmcgcmV1c2FibGUgY29tcG9uZW50cywgd2hpY2ggc2hvdWxkIG5vdCBhY2NpZGVudGFsbHkgcmVhZCBvciBtb2RpZnlcbiAqIGRhdGEgaW4gdGhlIHBhcmVudCBzY29wZS5cbiAqXG4gKiBUaGUgJ2lzb2xhdGUnIHNjb3BlIG9iamVjdCBoYXNoIGRlZmluZXMgYSBzZXQgb2YgbG9jYWwgc2NvcGUgcHJvcGVydGllcyBkZXJpdmVkIGZyb20gYXR0cmlidXRlcyBvbiB0aGVcbiAqIGRpcmVjdGl2ZSdzIGVsZW1lbnQuIFRoZXNlIGxvY2FsIHByb3BlcnRpZXMgYXJlIHVzZWZ1bCBmb3IgYWxpYXNpbmcgdmFsdWVzIGZvciB0ZW1wbGF0ZXMuIFRoZSBrZXlzIGluXG4gKiB0aGUgb2JqZWN0IGhhc2ggbWFwIHRvIHRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSBvbiB0aGUgaXNvbGF0ZSBzY29wZTsgdGhlIHZhbHVlcyBkZWZpbmUgaG93IHRoZSBwcm9wZXJ0eVxuICogaXMgYm91bmQgdG8gdGhlIHBhcmVudCBzY29wZSwgdmlhIG1hdGNoaW5nIGF0dHJpYnV0ZXMgb24gdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQ6XG4gKlxuICogKiBgQGAgb3IgYEBhdHRyYCAtIGJpbmQgYSBsb2NhbCBzY29wZSBwcm9wZXJ0eSB0byB0aGUgdmFsdWUgb2YgRE9NIGF0dHJpYnV0ZS4gVGhlIHJlc3VsdCBpc1xuICogICBhbHdheXMgYSBzdHJpbmcgc2luY2UgRE9NIGF0dHJpYnV0ZXMgYXJlIHN0cmluZ3MuIElmIG5vIGBhdHRyYCBuYW1lIGlzIHNwZWNpZmllZCAgdGhlbiB0aGVcbiAqICAgYXR0cmlidXRlIG5hbWUgaXMgYXNzdW1lZCB0byBiZSB0aGUgc2FtZSBhcyB0aGUgbG9jYWwgbmFtZS5cbiAqICAgR2l2ZW4gYDx3aWRnZXQgbXktYXR0cj1cImhlbGxvIHt7bmFtZX19XCI+YCBhbmQgd2lkZ2V0IGRlZmluaXRpb25cbiAqICAgb2YgYHNjb3BlOiB7IGxvY2FsTmFtZTonQG15QXR0cicgfWAsIHRoZW4gd2lkZ2V0IHNjb3BlIHByb3BlcnR5IGBsb2NhbE5hbWVgIHdpbGwgcmVmbGVjdFxuICogICB0aGUgaW50ZXJwb2xhdGVkIHZhbHVlIG9mIGBoZWxsbyB7e25hbWV9fWAuIEFzIHRoZSBgbmFtZWAgYXR0cmlidXRlIGNoYW5nZXMgc28gd2lsbCB0aGVcbiAqICAgYGxvY2FsTmFtZWAgcHJvcGVydHkgb24gdGhlIHdpZGdldCBzY29wZS4gVGhlIGBuYW1lYCBpcyByZWFkIGZyb20gdGhlIHBhcmVudCBzY29wZSAobm90XG4gKiAgIGNvbXBvbmVudCBzY29wZSkuXG4gKlxuICogKiBgPWAgb3IgYD1hdHRyYCAtIHNldCB1cCBiaS1kaXJlY3Rpb25hbCBiaW5kaW5nIGJldHdlZW4gYSBsb2NhbCBzY29wZSBwcm9wZXJ0eSBhbmQgdGhlXG4gKiAgIHBhcmVudCBzY29wZSBwcm9wZXJ0eSBvZiBuYW1lIGRlZmluZWQgdmlhIHRoZSB2YWx1ZSBvZiB0aGUgYGF0dHJgIGF0dHJpYnV0ZS4gSWYgbm8gYGF0dHJgXG4gKiAgIG5hbWUgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGF0dHJpYnV0ZSBuYW1lIGlzIGFzc3VtZWQgdG8gYmUgdGhlIHNhbWUgYXMgdGhlIGxvY2FsIG5hbWUuXG4gKiAgIEdpdmVuIGA8d2lkZ2V0IG15LWF0dHI9XCJwYXJlbnRNb2RlbFwiPmAgYW5kIHdpZGdldCBkZWZpbml0aW9uIG9mXG4gKiAgIGBzY29wZTogeyBsb2NhbE1vZGVsOic9bXlBdHRyJyB9YCwgdGhlbiB3aWRnZXQgc2NvcGUgcHJvcGVydHkgYGxvY2FsTW9kZWxgIHdpbGwgcmVmbGVjdCB0aGVcbiAqICAgdmFsdWUgb2YgYHBhcmVudE1vZGVsYCBvbiB0aGUgcGFyZW50IHNjb3BlLiBBbnkgY2hhbmdlcyB0byBgcGFyZW50TW9kZWxgIHdpbGwgYmUgcmVmbGVjdGVkXG4gKiAgIGluIGBsb2NhbE1vZGVsYCBhbmQgYW55IGNoYW5nZXMgaW4gYGxvY2FsTW9kZWxgIHdpbGwgcmVmbGVjdCBpbiBgcGFyZW50TW9kZWxgLiBJZiB0aGUgcGFyZW50XG4gKiAgIHNjb3BlIHByb3BlcnR5IGRvZXNuJ3QgZXhpc3QsIGl0IHdpbGwgdGhyb3cgYSBOT05fQVNTSUdOQUJMRV9NT0RFTF9FWFBSRVNTSU9OIGV4Y2VwdGlvbi4gWW91XG4gKiAgIGNhbiBhdm9pZCB0aGlzIGJlaGF2aW9yIHVzaW5nIGA9P2Agb3IgYD0/YXR0cmAgaW4gb3JkZXIgdG8gZmxhZyB0aGUgcHJvcGVydHkgYXMgb3B0aW9uYWwuIElmXG4gKiAgIHlvdSB3YW50IHRvIHNoYWxsb3cgd2F0Y2ggZm9yIGNoYW5nZXMgKGkuZS4gJHdhdGNoQ29sbGVjdGlvbiBpbnN0ZWFkIG9mICR3YXRjaCkgeW91IGNhbiB1c2VcbiAqICAgYD0qYCBvciBgPSphdHRyYCAoYD0qP2Agb3IgYD0qP2F0dHJgIGlmIHRoZSBwcm9wZXJ0eSBpcyBvcHRpb25hbCkuXG4gKlxuICogKiBgJmAgb3IgYCZhdHRyYCAtIHByb3ZpZGVzIGEgd2F5IHRvIGV4ZWN1dGUgYW4gZXhwcmVzc2lvbiBpbiB0aGUgY29udGV4dCBvZiB0aGUgcGFyZW50IHNjb3BlLlxuICogICBJZiBubyBgYXR0cmAgbmFtZSBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgYXR0cmlidXRlIG5hbWUgaXMgYXNzdW1lZCB0byBiZSB0aGUgc2FtZSBhcyB0aGVcbiAqICAgbG9jYWwgbmFtZS4gR2l2ZW4gYDx3aWRnZXQgbXktYXR0cj1cImNvdW50ID0gY291bnQgKyB2YWx1ZVwiPmAgYW5kIHdpZGdldCBkZWZpbml0aW9uIG9mXG4gKiAgIGBzY29wZTogeyBsb2NhbEZuOicmbXlBdHRyJyB9YCwgdGhlbiBpc29sYXRlIHNjb3BlIHByb3BlcnR5IGBsb2NhbEZuYCB3aWxsIHBvaW50IHRvXG4gKiAgIGEgZnVuY3Rpb24gd3JhcHBlciBmb3IgdGhlIGBjb3VudCA9IGNvdW50ICsgdmFsdWVgIGV4cHJlc3Npb24uIE9mdGVuIGl0J3MgZGVzaXJhYmxlIHRvXG4gKiAgIHBhc3MgZGF0YSBmcm9tIHRoZSBpc29sYXRlZCBzY29wZSB2aWEgYW4gZXhwcmVzc2lvbiB0byB0aGUgcGFyZW50IHNjb3BlLCB0aGlzIGNhbiBiZVxuICogICBkb25lIGJ5IHBhc3NpbmcgYSBtYXAgb2YgbG9jYWwgdmFyaWFibGUgbmFtZXMgYW5kIHZhbHVlcyBpbnRvIHRoZSBleHByZXNzaW9uIHdyYXBwZXIgZm4uXG4gKiAgIEZvciBleGFtcGxlLCBpZiB0aGUgZXhwcmVzc2lvbiBpcyBgaW5jcmVtZW50KGFtb3VudClgIHRoZW4gd2UgY2FuIHNwZWNpZnkgdGhlIGFtb3VudCB2YWx1ZVxuICogICBieSBjYWxsaW5nIHRoZSBgbG9jYWxGbmAgYXMgYGxvY2FsRm4oe2Ftb3VudDogMjJ9KWAuXG4gKlxuICogSW4gZ2VuZXJhbCBpdCdzIHBvc3NpYmxlIHRvIGFwcGx5IG1vcmUgdGhhbiBvbmUgZGlyZWN0aXZlIHRvIG9uZSBlbGVtZW50LCBidXQgdGhlcmUgbWlnaHQgYmUgbGltaXRhdGlvbnNcbiAqIGRlcGVuZGluZyBvbiB0aGUgdHlwZSBvZiBzY29wZSByZXF1aXJlZCBieSB0aGUgZGlyZWN0aXZlcy4gVGhlIGZvbGxvd2luZyBwb2ludHMgd2lsbCBoZWxwIGV4cGxhaW4gdGhlc2UgbGltaXRhdGlvbnMuXG4gKiBGb3Igc2ltcGxpY2l0eSBvbmx5IHR3byBkaXJlY3RpdmVzIGFyZSB0YWtlbiBpbnRvIGFjY291bnQsIGJ1dCBpdCBpcyBhbHNvIGFwcGxpY2FibGUgZm9yIHNldmVyYWwgZGlyZWN0aXZlczpcbiAqXG4gKiAqICoqbm8gc2NvcGUqKiArICoqbm8gc2NvcGUqKiA9PiBUd28gZGlyZWN0aXZlcyB3aGljaCBkb24ndCByZXF1aXJlIHRoZWlyIG93biBzY29wZSB3aWxsIHVzZSB0aGVpciBwYXJlbnQncyBzY29wZVxuICogKiAqKmNoaWxkIHNjb3BlKiogKyAqKm5vIHNjb3BlKiogPT4gIEJvdGggZGlyZWN0aXZlcyB3aWxsIHNoYXJlIG9uZSBzaW5nbGUgY2hpbGQgc2NvcGVcbiAqICogKipjaGlsZCBzY29wZSoqICsgKipjaGlsZCBzY29wZSoqID0+ICBCb3RoIGRpcmVjdGl2ZXMgd2lsbCBzaGFyZSBvbmUgc2luZ2xlIGNoaWxkIHNjb3BlXG4gKiAqICoqaXNvbGF0ZWQgc2NvcGUqKiArICoqbm8gc2NvcGUqKiA9PiAgVGhlIGlzb2xhdGVkIGRpcmVjdGl2ZSB3aWxsIHVzZSBpdCdzIG93biBjcmVhdGVkIGlzb2xhdGVkIHNjb3BlLiBUaGUgb3RoZXIgZGlyZWN0aXZlIHdpbGwgdXNlXG4gKiBpdHMgcGFyZW50J3Mgc2NvcGVcbiAqICogKippc29sYXRlZCBzY29wZSoqICsgKipjaGlsZCBzY29wZSoqID0+ICAqKldvbid0IHdvcmshKiogT25seSBvbmUgc2NvcGUgY2FuIGJlIHJlbGF0ZWQgdG8gb25lIGVsZW1lbnQuIFRoZXJlZm9yZSB0aGVzZSBkaXJlY3RpdmVzIGNhbm5vdFxuICogYmUgYXBwbGllZCB0byB0aGUgc2FtZSBlbGVtZW50LlxuICogKiAqKmlzb2xhdGVkIHNjb3BlKiogKyAqKmlzb2xhdGVkIHNjb3BlKiogID0+ICAqKldvbid0IHdvcmshKiogT25seSBvbmUgc2NvcGUgY2FuIGJlIHJlbGF0ZWQgdG8gb25lIGVsZW1lbnQuIFRoZXJlZm9yZSB0aGVzZSBkaXJlY3RpdmVzXG4gKiBjYW5ub3QgYmUgYXBwbGllZCB0byB0aGUgc2FtZSBlbGVtZW50LlxuICpcbiAqXG4gKiAjIyMjIGBiaW5kVG9Db250cm9sbGVyYFxuICogV2hlbiBhbiBpc29sYXRlIHNjb3BlIGlzIHVzZWQgZm9yIGEgY29tcG9uZW50IChzZWUgYWJvdmUpLCBhbmQgYGNvbnRyb2xsZXJBc2AgaXMgdXNlZCwgYGJpbmRUb0NvbnRyb2xsZXI6IHRydWVgIHdpbGxcbiAqIGFsbG93IGEgY29tcG9uZW50IHRvIGhhdmUgaXRzIHByb3BlcnRpZXMgYm91bmQgdG8gdGhlIGNvbnRyb2xsZXIsIHJhdGhlciB0aGFuIHRvIHNjb3BlLiBXaGVuIHRoZSBjb250cm9sbGVyXG4gKiBpcyBpbnN0YW50aWF0ZWQsIHRoZSBpbml0aWFsIHZhbHVlcyBvZiB0aGUgaXNvbGF0ZSBzY29wZSBiaW5kaW5ncyBhcmUgYWxyZWFkeSBhdmFpbGFibGUuXG4gKlxuICogIyMjIyBgY29udHJvbGxlcmBcbiAqIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uIFRoZSBjb250cm9sbGVyIGlzIGluc3RhbnRpYXRlZCBiZWZvcmUgdGhlXG4gKiBwcmUtbGlua2luZyBwaGFzZSBhbmQgY2FuIGJlIGFjY2Vzc2VkIGJ5IG90aGVyIGRpcmVjdGl2ZXMgKHNlZVxuICogYHJlcXVpcmVgIGF0dHJpYnV0ZSkuIFRoaXMgYWxsb3dzIHRoZSBkaXJlY3RpdmVzIHRvIGNvbW11bmljYXRlIHdpdGggZWFjaCBvdGhlciBhbmQgYXVnbWVudFxuICogZWFjaCBvdGhlcidzIGJlaGF2aW9yLiBUaGUgY29udHJvbGxlciBpcyBpbmplY3RhYmxlIChhbmQgc3VwcG9ydHMgYnJhY2tldCBub3RhdGlvbikgd2l0aCB0aGUgZm9sbG93aW5nIGxvY2FsczpcbiAqXG4gKiAqIGAkc2NvcGVgIC0gQ3VycmVudCBzY29wZSBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnRcbiAqICogYCRlbGVtZW50YCAtIEN1cnJlbnQgZWxlbWVudFxuICogKiBgJGF0dHJzYCAtIEN1cnJlbnQgYXR0cmlidXRlcyBvYmplY3QgZm9yIHRoZSBlbGVtZW50XG4gKiAqIGAkdHJhbnNjbHVkZWAgLSBBIHRyYW5zY2x1ZGUgbGlua2luZyBmdW5jdGlvbiBwcmUtYm91bmQgdG8gdGhlIGNvcnJlY3QgdHJhbnNjbHVzaW9uIHNjb3BlOlxuICogICBgZnVuY3Rpb24oW3Njb3BlXSwgY2xvbmVMaW5raW5nRm4sIGZ1dHVyZVBhcmVudEVsZW1lbnQpYC5cbiAqICAgICogYHNjb3BlYDogb3B0aW9uYWwgYXJndW1lbnQgdG8gb3ZlcnJpZGUgdGhlIHNjb3BlLlxuICogICAgKiBgY2xvbmVMaW5raW5nRm5gOiBvcHRpb25hbCBhcmd1bWVudCB0byBjcmVhdGUgY2xvbmVzIG9mIHRoZSBvcmlnaW5hbCB0cmFuc2NsdWRlZCBjb250ZW50LlxuICogICAgKiBgZnV0dXJlUGFyZW50RWxlbWVudGA6XG4gKiAgICAgICAgKiBkZWZpbmVzIHRoZSBwYXJlbnQgdG8gd2hpY2ggdGhlIGBjbG9uZUxpbmtpbmdGbmAgd2lsbCBhZGQgdGhlIGNsb25lZCBlbGVtZW50cy5cbiAqICAgICAgICAqIGRlZmF1bHQ6IGAkZWxlbWVudC5wYXJlbnQoKWAgcmVzcC4gYCRlbGVtZW50YCBmb3IgYHRyYW5zY2x1ZGU6J2VsZW1lbnQnYCByZXNwLiBgdHJhbnNjbHVkZTp0cnVlYC5cbiAqICAgICAgICAqIG9ubHkgbmVlZGVkIGZvciB0cmFuc2NsdWRlcyB0aGF0IGFyZSBhbGxvd2VkIHRvIGNvbnRhaW4gbm9uIGh0bWwgZWxlbWVudHMgKGUuZy4gU1ZHIGVsZW1lbnRzKVxuICogICAgICAgICAgYW5kIHdoZW4gdGhlIGBjbG9uZUxpbmtpbkZuYCBpcyBwYXNzZWQsXG4gKiAgICAgICAgICBhcyB0aG9zZSBlbGVtZW50cyBuZWVkIHRvIGNyZWF0ZWQgYW5kIGNsb25lZCBpbiBhIHNwZWNpYWwgd2F5IHdoZW4gdGhleSBhcmUgZGVmaW5lZCBvdXRzaWRlIHRoZWlyXG4gKiAgICAgICAgICB1c3VhbCBjb250YWluZXJzIChlLmcuIGxpa2UgYDxzdmc+YCkuXG4gKiAgICAgICAgKiBTZWUgYWxzbyB0aGUgYGRpcmVjdGl2ZS50ZW1wbGF0ZU5hbWVzcGFjZWAgcHJvcGVydHkuXG4gKlxuICpcbiAqICMjIyMgYHJlcXVpcmVgXG4gKiBSZXF1aXJlIGFub3RoZXIgZGlyZWN0aXZlIGFuZCBpbmplY3QgaXRzIGNvbnRyb2xsZXIgYXMgdGhlIGZvdXJ0aCBhcmd1bWVudCB0byB0aGUgbGlua2luZyBmdW5jdGlvbi4gVGhlXG4gKiBgcmVxdWlyZWAgdGFrZXMgYSBzdHJpbmcgbmFtZSAob3IgYXJyYXkgb2Ygc3RyaW5ncykgb2YgdGhlIGRpcmVjdGl2ZShzKSB0byBwYXNzIGluLiBJZiBhbiBhcnJheSBpcyB1c2VkLCB0aGVcbiAqIGluamVjdGVkIGFyZ3VtZW50IHdpbGwgYmUgYW4gYXJyYXkgaW4gY29ycmVzcG9uZGluZyBvcmRlci4gSWYgbm8gc3VjaCBkaXJlY3RpdmUgY2FuIGJlXG4gKiBmb3VuZCwgb3IgaWYgdGhlIGRpcmVjdGl2ZSBkb2VzIG5vdCBoYXZlIGEgY29udHJvbGxlciwgdGhlbiBhbiBlcnJvciBpcyByYWlzZWQgKHVubGVzcyBubyBsaW5rIGZ1bmN0aW9uXG4gKiBpcyBzcGVjaWZpZWQsIGluIHdoaWNoIGNhc2UgZXJyb3IgY2hlY2tpbmcgaXMgc2tpcHBlZCkuIFRoZSBuYW1lIGNhbiBiZSBwcmVmaXhlZCB3aXRoOlxuICpcbiAqICogKG5vIHByZWZpeCkgLSBMb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgb24gdGhlIGN1cnJlbnQgZWxlbWVudC4gVGhyb3cgYW4gZXJyb3IgaWYgbm90IGZvdW5kLlxuICogKiBgP2AgLSBBdHRlbXB0IHRvIGxvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBvciBwYXNzIGBudWxsYCB0byB0aGUgYGxpbmtgIGZuIGlmIG5vdCBmb3VuZC5cbiAqICogYF5gIC0gTG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIGJ5IHNlYXJjaGluZyB0aGUgZWxlbWVudCBhbmQgaXRzIHBhcmVudHMuIFRocm93IGFuIGVycm9yIGlmIG5vdCBmb3VuZC5cbiAqICogYF5eYCAtIExvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBieSBzZWFyY2hpbmcgdGhlIGVsZW1lbnQncyBwYXJlbnRzLiBUaHJvdyBhbiBlcnJvciBpZiBub3QgZm91bmQuXG4gKiAqIGA/XmAgLSBBdHRlbXB0IHRvIGxvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBieSBzZWFyY2hpbmcgdGhlIGVsZW1lbnQgYW5kIGl0cyBwYXJlbnRzIG9yIHBhc3NcbiAqICAgYG51bGxgIHRvIHRoZSBgbGlua2AgZm4gaWYgbm90IGZvdW5kLlxuICogKiBgP15eYCAtIEF0dGVtcHQgdG8gbG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIGJ5IHNlYXJjaGluZyB0aGUgZWxlbWVudCdzIHBhcmVudHMsIG9yIHBhc3NcbiAqICAgYG51bGxgIHRvIHRoZSBgbGlua2AgZm4gaWYgbm90IGZvdW5kLlxuICpcbiAqXG4gKiAjIyMjIGBjb250cm9sbGVyQXNgXG4gKiBJZGVudGlmaWVyIG5hbWUgZm9yIGEgcmVmZXJlbmNlIHRvIHRoZSBjb250cm9sbGVyIGluIHRoZSBkaXJlY3RpdmUncyBzY29wZS5cbiAqIFRoaXMgYWxsb3dzIHRoZSBjb250cm9sbGVyIHRvIGJlIHJlZmVyZW5jZWQgZnJvbSB0aGUgZGlyZWN0aXZlIHRlbXBsYXRlLiBUaGlzIGlzIGVzcGVjaWFsbHlcbiAqIHVzZWZ1bCB3aGVuIGEgZGlyZWN0aXZlIGlzIHVzZWQgYXMgY29tcG9uZW50LCBpLmUuIHdpdGggYW4gYGlzb2xhdGVgIHNjb3BlLiBJdCdzIGFsc28gcG9zc2libGVcbiAqIHRvIHVzZSBpdCBpbiBhIGRpcmVjdGl2ZSB3aXRob3V0IGFuIGBpc29sYXRlYCAvIGBuZXdgIHNjb3BlLCBidXQgeW91IG5lZWQgdG8gYmUgYXdhcmUgdGhhdCB0aGVcbiAqIGBjb250cm9sbGVyQXNgIHJlZmVyZW5jZSBtaWdodCBvdmVyd3JpdGUgYSBwcm9wZXJ0eSB0aGF0IGFscmVhZHkgZXhpc3RzIG9uIHRoZSBwYXJlbnQgc2NvcGUuXG4gKlxuICpcbiAqICMjIyMgYHJlc3RyaWN0YFxuICogU3RyaW5nIG9mIHN1YnNldCBvZiBgRUFDTWAgd2hpY2ggcmVzdHJpY3RzIHRoZSBkaXJlY3RpdmUgdG8gYSBzcGVjaWZpYyBkaXJlY3RpdmVcbiAqIGRlY2xhcmF0aW9uIHN0eWxlLiBJZiBvbWl0dGVkLCB0aGUgZGVmYXVsdHMgKGVsZW1lbnRzIGFuZCBhdHRyaWJ1dGVzKSBhcmUgdXNlZC5cbiAqXG4gKiAqIGBFYCAtIEVsZW1lbnQgbmFtZSAoZGVmYXVsdCk6IGA8bXktZGlyZWN0aXZlPjwvbXktZGlyZWN0aXZlPmBcbiAqICogYEFgIC0gQXR0cmlidXRlIChkZWZhdWx0KTogYDxkaXYgbXktZGlyZWN0aXZlPVwiZXhwXCI+PC9kaXY+YFxuICogKiBgQ2AgLSBDbGFzczogYDxkaXYgY2xhc3M9XCJteS1kaXJlY3RpdmU6IGV4cDtcIj48L2Rpdj5gXG4gKiAqIGBNYCAtIENvbW1lbnQ6IGA8IS0tIGRpcmVjdGl2ZTogbXktZGlyZWN0aXZlIGV4cCAtLT5gXG4gKlxuICpcbiAqICMjIyMgYHRlbXBsYXRlTmFtZXNwYWNlYFxuICogU3RyaW5nIHJlcHJlc2VudGluZyB0aGUgZG9jdW1lbnQgdHlwZSB1c2VkIGJ5IHRoZSBtYXJrdXAgaW4gdGhlIHRlbXBsYXRlLlxuICogQW5ndWxhckpTIG5lZWRzIHRoaXMgaW5mb3JtYXRpb24gYXMgdGhvc2UgZWxlbWVudHMgbmVlZCB0byBiZSBjcmVhdGVkIGFuZCBjbG9uZWRcbiAqIGluIGEgc3BlY2lhbCB3YXkgd2hlbiB0aGV5IGFyZSBkZWZpbmVkIG91dHNpZGUgdGhlaXIgdXN1YWwgY29udGFpbmVycyBsaWtlIGA8c3ZnPmAgYW5kIGA8bWF0aD5gLlxuICpcbiAqICogYGh0bWxgIC0gQWxsIHJvb3Qgbm9kZXMgaW4gdGhlIHRlbXBsYXRlIGFyZSBIVE1MLiBSb290IG5vZGVzIG1heSBhbHNvIGJlXG4gKiAgIHRvcC1sZXZlbCBlbGVtZW50cyBzdWNoIGFzIGA8c3ZnPmAgb3IgYDxtYXRoPmAuXG4gKiAqIGBzdmdgIC0gVGhlIHJvb3Qgbm9kZXMgaW4gdGhlIHRlbXBsYXRlIGFyZSBTVkcgZWxlbWVudHMgKGV4Y2x1ZGluZyBgPG1hdGg+YCkuXG4gKiAqIGBtYXRoYCAtIFRoZSByb290IG5vZGVzIGluIHRoZSB0ZW1wbGF0ZSBhcmUgTWF0aE1MIGVsZW1lbnRzIChleGNsdWRpbmcgYDxzdmc+YCkuXG4gKlxuICogSWYgbm8gYHRlbXBsYXRlTmFtZXNwYWNlYCBpcyBzcGVjaWZpZWQsIHRoZW4gdGhlIG5hbWVzcGFjZSBpcyBjb25zaWRlcmVkIHRvIGJlIGBodG1sYC5cbiAqXG4gKiAjIyMjIGB0ZW1wbGF0ZWBcbiAqIEhUTUwgbWFya3VwIHRoYXQgbWF5OlxuICogKiBSZXBsYWNlIHRoZSBjb250ZW50cyBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudCAoZGVmYXVsdCkuXG4gKiAqIFJlcGxhY2UgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQgaXRzZWxmIChpZiBgcmVwbGFjZWAgaXMgdHJ1ZSAtIERFUFJFQ0FURUQpLlxuICogKiBXcmFwIHRoZSBjb250ZW50cyBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudCAoaWYgYHRyYW5zY2x1ZGVgIGlzIHRydWUpLlxuICpcbiAqIFZhbHVlIG1heSBiZTpcbiAqXG4gKiAqIEEgc3RyaW5nLiBGb3IgZXhhbXBsZSBgPGRpdiByZWQtb24taG92ZXI+e3tkZWxldGVfc3RyfX08L2Rpdj5gLlxuICogKiBBIGZ1bmN0aW9uIHdoaWNoIHRha2VzIHR3byBhcmd1bWVudHMgYHRFbGVtZW50YCBhbmQgYHRBdHRyc2AgKGRlc2NyaWJlZCBpbiB0aGUgYGNvbXBpbGVgXG4gKiAgIGZ1bmN0aW9uIGFwaSBiZWxvdykgYW5kIHJldHVybnMgYSBzdHJpbmcgdmFsdWUuXG4gKlxuICpcbiAqICMjIyMgYHRlbXBsYXRlVXJsYFxuICogVGhpcyBpcyBzaW1pbGFyIHRvIGB0ZW1wbGF0ZWAgYnV0IHRoZSB0ZW1wbGF0ZSBpcyBsb2FkZWQgZnJvbSB0aGUgc3BlY2lmaWVkIFVSTCwgYXN5bmNocm9ub3VzbHkuXG4gKlxuICogQmVjYXVzZSB0ZW1wbGF0ZSBsb2FkaW5nIGlzIGFzeW5jaHJvbm91cyB0aGUgY29tcGlsZXIgd2lsbCBzdXNwZW5kIGNvbXBpbGF0aW9uIG9mIGRpcmVjdGl2ZXMgb24gdGhhdCBlbGVtZW50XG4gKiBmb3IgbGF0ZXIgd2hlbiB0aGUgdGVtcGxhdGUgaGFzIGJlZW4gcmVzb2x2ZWQuICBJbiB0aGUgbWVhbnRpbWUgaXQgd2lsbCBjb250aW51ZSB0byBjb21waWxlIGFuZCBsaW5rXG4gKiBzaWJsaW5nIGFuZCBwYXJlbnQgZWxlbWVudHMgYXMgdGhvdWdoIHRoaXMgZWxlbWVudCBoYWQgbm90IGNvbnRhaW5lZCBhbnkgZGlyZWN0aXZlcy5cbiAqXG4gKiBUaGUgY29tcGlsZXIgZG9lcyBub3Qgc3VzcGVuZCB0aGUgZW50aXJlIGNvbXBpbGF0aW9uIHRvIHdhaXQgZm9yIHRlbXBsYXRlcyB0byBiZSBsb2FkZWQgYmVjYXVzZSB0aGlzXG4gKiB3b3VsZCByZXN1bHQgaW4gdGhlIHdob2xlIGFwcCBcInN0YWxsaW5nXCIgdW50aWwgYWxsIHRlbXBsYXRlcyBhcmUgbG9hZGVkIGFzeW5jaHJvbm91c2x5IC0gZXZlbiBpbiB0aGVcbiAqIGNhc2Ugd2hlbiBvbmx5IG9uZSBkZWVwbHkgbmVzdGVkIGRpcmVjdGl2ZSBoYXMgYHRlbXBsYXRlVXJsYC5cbiAqXG4gKiBUZW1wbGF0ZSBsb2FkaW5nIGlzIGFzeW5jaHJvbm91cyBldmVuIGlmIHRoZSB0ZW1wbGF0ZSBoYXMgYmVlbiBwcmVsb2FkZWQgaW50byB0aGUge0BsaW5rICR0ZW1wbGF0ZUNhY2hlfVxuICpcbiAqIFlvdSBjYW4gc3BlY2lmeSBgdGVtcGxhdGVVcmxgIGFzIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgVVJMIG9yIGFzIGEgZnVuY3Rpb24gd2hpY2ggdGFrZXMgdHdvXG4gKiBhcmd1bWVudHMgYHRFbGVtZW50YCBhbmQgYHRBdHRyc2AgKGRlc2NyaWJlZCBpbiB0aGUgYGNvbXBpbGVgIGZ1bmN0aW9uIGFwaSBiZWxvdykgYW5kIHJldHVybnNcbiAqIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgdXJsLiAgSW4gZWl0aGVyIGNhc2UsIHRoZSB0ZW1wbGF0ZSBVUkwgaXMgcGFzc2VkIHRocm91Z2gge0BsaW5rXG4gKiAkc2NlI2dldFRydXN0ZWRSZXNvdXJjZVVybCAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybH0uXG4gKlxuICpcbiAqICMjIyMgYHJlcGxhY2VgIChbKkRFUFJFQ0FURUQqIV0sIHdpbGwgYmUgcmVtb3ZlZCBpbiBuZXh0IG1ham9yIHJlbGVhc2UgLSBpLmUuIHYyLjApXG4gKiBzcGVjaWZ5IHdoYXQgdGhlIHRlbXBsYXRlIHNob3VsZCByZXBsYWNlLiBEZWZhdWx0cyB0byBgZmFsc2VgLlxuICpcbiAqICogYHRydWVgIC0gdGhlIHRlbXBsYXRlIHdpbGwgcmVwbGFjZSB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudC5cbiAqICogYGZhbHNlYCAtIHRoZSB0ZW1wbGF0ZSB3aWxsIHJlcGxhY2UgdGhlIGNvbnRlbnRzIG9mIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50LlxuICpcbiAqIFRoZSByZXBsYWNlbWVudCBwcm9jZXNzIG1pZ3JhdGVzIGFsbCBvZiB0aGUgYXR0cmlidXRlcyAvIGNsYXNzZXMgZnJvbSB0aGUgb2xkIGVsZW1lbnQgdG8gdGhlIG5ld1xuICogb25lLiBTZWUgdGhlIHtAbGluayBndWlkZS9kaXJlY3RpdmUjdGVtcGxhdGUtZXhwYW5kaW5nLWRpcmVjdGl2ZVxuICogRGlyZWN0aXZlcyBHdWlkZX0gZm9yIGFuIGV4YW1wbGUuXG4gKlxuICogVGhlcmUgYXJlIHZlcnkgZmV3IHNjZW5hcmlvcyB3aGVyZSBlbGVtZW50IHJlcGxhY2VtZW50IGlzIHJlcXVpcmVkIGZvciB0aGUgYXBwbGljYXRpb24gZnVuY3Rpb24sXG4gKiB0aGUgbWFpbiBvbmUgYmVpbmcgcmV1c2FibGUgY3VzdG9tIGNvbXBvbmVudHMgdGhhdCBhcmUgdXNlZCB3aXRoaW4gU1ZHIGNvbnRleHRzXG4gKiAoYmVjYXVzZSBTVkcgZG9lc24ndCB3b3JrIHdpdGggY3VzdG9tIGVsZW1lbnRzIGluIHRoZSBET00gdHJlZSkuXG4gKlxuICogIyMjIyBgdHJhbnNjbHVkZWBcbiAqIEV4dHJhY3QgdGhlIGNvbnRlbnRzIG9mIHRoZSBlbGVtZW50IHdoZXJlIHRoZSBkaXJlY3RpdmUgYXBwZWFycyBhbmQgbWFrZSBpdCBhdmFpbGFibGUgdG8gdGhlIGRpcmVjdGl2ZS5cbiAqIFRoZSBjb250ZW50cyBhcmUgY29tcGlsZWQgYW5kIHByb3ZpZGVkIHRvIHRoZSBkaXJlY3RpdmUgYXMgYSAqKnRyYW5zY2x1c2lvbiBmdW5jdGlvbioqLiBTZWUgdGhlXG4gKiB7QGxpbmsgJGNvbXBpbGUjdHJhbnNjbHVzaW9uIFRyYW5zY2x1c2lvbn0gc2VjdGlvbiBiZWxvdy5cbiAqXG4gKiBUaGVyZSBhcmUgdHdvIGtpbmRzIG9mIHRyYW5zY2x1c2lvbiBkZXBlbmRpbmcgdXBvbiB3aGV0aGVyIHlvdSB3YW50IHRvIHRyYW5zY2x1ZGUganVzdCB0aGUgY29udGVudHMgb2YgdGhlXG4gKiBkaXJlY3RpdmUncyBlbGVtZW50IG9yIHRoZSBlbnRpcmUgZWxlbWVudDpcbiAqXG4gKiAqIGB0cnVlYCAtIHRyYW5zY2x1ZGUgdGhlIGNvbnRlbnQgKGkuZS4gdGhlIGNoaWxkIG5vZGVzKSBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudC5cbiAqICogYCdlbGVtZW50J2AgLSB0cmFuc2NsdWRlIHRoZSB3aG9sZSBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudCBpbmNsdWRpbmcgYW55IGRpcmVjdGl2ZXMgb24gdGhpc1xuICogICBlbGVtZW50IHRoYXQgZGVmaW5lZCBhdCBhIGxvd2VyIHByaW9yaXR5IHRoYW4gdGhpcyBkaXJlY3RpdmUuIFdoZW4gdXNlZCwgdGhlIGB0ZW1wbGF0ZWBcbiAqICAgcHJvcGVydHkgaXMgaWdub3JlZC5cbiAqXG4gKlxuICogIyMjIyBgY29tcGlsZWBcbiAqXG4gKiBgYGBqc1xuICogICBmdW5jdGlvbiBjb21waWxlKHRFbGVtZW50LCB0QXR0cnMsIHRyYW5zY2x1ZGUpIHsgLi4uIH1cbiAqIGBgYFxuICpcbiAqIFRoZSBjb21waWxlIGZ1bmN0aW9uIGRlYWxzIHdpdGggdHJhbnNmb3JtaW5nIHRoZSB0ZW1wbGF0ZSBET00uIFNpbmNlIG1vc3QgZGlyZWN0aXZlcyBkbyBub3QgZG9cbiAqIHRlbXBsYXRlIHRyYW5zZm9ybWF0aW9uLCBpdCBpcyBub3QgdXNlZCBvZnRlbi4gVGhlIGNvbXBpbGUgZnVuY3Rpb24gdGFrZXMgdGhlIGZvbGxvd2luZyBhcmd1bWVudHM6XG4gKlxuICogICAqIGB0RWxlbWVudGAgLSB0ZW1wbGF0ZSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgd2hlcmUgdGhlIGRpcmVjdGl2ZSBoYXMgYmVlbiBkZWNsYXJlZC4gSXQgaXNcbiAqICAgICBzYWZlIHRvIGRvIHRlbXBsYXRlIHRyYW5zZm9ybWF0aW9uIG9uIHRoZSBlbGVtZW50IGFuZCBjaGlsZCBlbGVtZW50cyBvbmx5LlxuICpcbiAqICAgKiBgdEF0dHJzYCAtIHRlbXBsYXRlIGF0dHJpYnV0ZXMgLSBOb3JtYWxpemVkIGxpc3Qgb2YgYXR0cmlidXRlcyBkZWNsYXJlZCBvbiB0aGlzIGVsZW1lbnQgc2hhcmVkXG4gKiAgICAgYmV0d2VlbiBhbGwgZGlyZWN0aXZlIGNvbXBpbGUgZnVuY3Rpb25zLlxuICpcbiAqICAgKiBgdHJhbnNjbHVkZWAgLSAgWypERVBSRUNBVEVEKiFdIEEgdHJhbnNjbHVkZSBsaW5raW5nIGZ1bmN0aW9uOiBgZnVuY3Rpb24oc2NvcGUsIGNsb25lTGlua2luZ0ZuKWBcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIFRoZSB0ZW1wbGF0ZSBpbnN0YW5jZSBhbmQgdGhlIGxpbmsgaW5zdGFuY2UgbWF5IGJlIGRpZmZlcmVudCBvYmplY3RzIGlmIHRoZSB0ZW1wbGF0ZSBoYXNcbiAqIGJlZW4gY2xvbmVkLiBGb3IgdGhpcyByZWFzb24gaXQgaXMgKipub3QqKiBzYWZlIHRvIGRvIGFueXRoaW5nIG90aGVyIHRoYW4gRE9NIHRyYW5zZm9ybWF0aW9ucyB0aGF0XG4gKiBhcHBseSB0byBhbGwgY2xvbmVkIERPTSBub2RlcyB3aXRoaW4gdGhlIGNvbXBpbGUgZnVuY3Rpb24uIFNwZWNpZmljYWxseSwgRE9NIGxpc3RlbmVyIHJlZ2lzdHJhdGlvblxuICogc2hvdWxkIGJlIGRvbmUgaW4gYSBsaW5raW5nIGZ1bmN0aW9uIHJhdGhlciB0aGFuIGluIGEgY29tcGlsZSBmdW5jdGlvbi5cbiAqIDwvZGl2PlxuXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIFRoZSBjb21waWxlIGZ1bmN0aW9uIGNhbm5vdCBoYW5kbGUgZGlyZWN0aXZlcyB0aGF0IHJlY3Vyc2l2ZWx5IHVzZSB0aGVtc2VsdmVzIGluIHRoZWlyXG4gKiBvd24gdGVtcGxhdGVzIG9yIGNvbXBpbGUgZnVuY3Rpb25zLiBDb21waWxpbmcgdGhlc2UgZGlyZWN0aXZlcyByZXN1bHRzIGluIGFuIGluZmluaXRlIGxvb3AgYW5kIGFcbiAqIHN0YWNrIG92ZXJmbG93IGVycm9ycy5cbiAqXG4gKiBUaGlzIGNhbiBiZSBhdm9pZGVkIGJ5IG1hbnVhbGx5IHVzaW5nICRjb21waWxlIGluIHRoZSBwb3N0TGluayBmdW5jdGlvbiB0byBpbXBlcmF0aXZlbHkgY29tcGlsZVxuICogYSBkaXJlY3RpdmUncyB0ZW1wbGF0ZSBpbnN0ZWFkIG9mIHJlbHlpbmcgb24gYXV0b21hdGljIHRlbXBsYXRlIGNvbXBpbGF0aW9uIHZpYSBgdGVtcGxhdGVgIG9yXG4gKiBgdGVtcGxhdGVVcmxgIGRlY2xhcmF0aW9uIG9yIG1hbnVhbCBjb21waWxhdGlvbiBpbnNpZGUgdGhlIGNvbXBpbGUgZnVuY3Rpb24uXG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG4gKiAqKk5vdGU6KiogVGhlIGB0cmFuc2NsdWRlYCBmdW5jdGlvbiB0aGF0IGlzIHBhc3NlZCB0byB0aGUgY29tcGlsZSBmdW5jdGlvbiBpcyBkZXByZWNhdGVkLCBhcyBpdFxuICogICBlLmcuIGRvZXMgbm90IGtub3cgYWJvdXQgdGhlIHJpZ2h0IG91dGVyIHNjb3BlLiBQbGVhc2UgdXNlIHRoZSB0cmFuc2NsdWRlIGZ1bmN0aW9uIHRoYXQgaXMgcGFzc2VkXG4gKiAgIHRvIHRoZSBsaW5rIGZ1bmN0aW9uIGluc3RlYWQuXG4gKiA8L2Rpdj5cblxuICogQSBjb21waWxlIGZ1bmN0aW9uIGNhbiBoYXZlIGEgcmV0dXJuIHZhbHVlIHdoaWNoIGNhbiBiZSBlaXRoZXIgYSBmdW5jdGlvbiBvciBhbiBvYmplY3QuXG4gKlxuICogKiByZXR1cm5pbmcgYSAocG9zdC1saW5rKSBmdW5jdGlvbiAtIGlzIGVxdWl2YWxlbnQgdG8gcmVnaXN0ZXJpbmcgdGhlIGxpbmtpbmcgZnVuY3Rpb24gdmlhIHRoZVxuICogICBgbGlua2AgcHJvcGVydHkgb2YgdGhlIGNvbmZpZyBvYmplY3Qgd2hlbiB0aGUgY29tcGlsZSBmdW5jdGlvbiBpcyBlbXB0eS5cbiAqXG4gKiAqIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBmdW5jdGlvbihzKSByZWdpc3RlcmVkIHZpYSBgcHJlYCBhbmQgYHBvc3RgIHByb3BlcnRpZXMgLSBhbGxvd3MgeW91IHRvXG4gKiAgIGNvbnRyb2wgd2hlbiBhIGxpbmtpbmcgZnVuY3Rpb24gc2hvdWxkIGJlIGNhbGxlZCBkdXJpbmcgdGhlIGxpbmtpbmcgcGhhc2UuIFNlZSBpbmZvIGFib3V0XG4gKiAgIHByZS1saW5raW5nIGFuZCBwb3N0LWxpbmtpbmcgZnVuY3Rpb25zIGJlbG93LlxuICpcbiAqXG4gKiAjIyMjIGBsaW5rYFxuICogVGhpcyBwcm9wZXJ0eSBpcyB1c2VkIG9ubHkgaWYgdGhlIGBjb21waWxlYCBwcm9wZXJ0eSBpcyBub3QgZGVmaW5lZC5cbiAqXG4gKiBgYGBqc1xuICogICBmdW5jdGlvbiBsaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjb250cm9sbGVyLCB0cmFuc2NsdWRlRm4pIHsgLi4uIH1cbiAqIGBgYFxuICpcbiAqIFRoZSBsaW5rIGZ1bmN0aW9uIGlzIHJlc3BvbnNpYmxlIGZvciByZWdpc3RlcmluZyBET00gbGlzdGVuZXJzIGFzIHdlbGwgYXMgdXBkYXRpbmcgdGhlIERPTS4gSXQgaXNcbiAqIGV4ZWN1dGVkIGFmdGVyIHRoZSB0ZW1wbGF0ZSBoYXMgYmVlbiBjbG9uZWQuIFRoaXMgaXMgd2hlcmUgbW9zdCBvZiB0aGUgZGlyZWN0aXZlIGxvZ2ljIHdpbGwgYmVcbiAqIHB1dC5cbiAqXG4gKiAgICogYHNjb3BlYCAtIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIFNjb3BlfSAtIFRoZSBzY29wZSB0byBiZSB1c2VkIGJ5IHRoZVxuICogICAgIGRpcmVjdGl2ZSBmb3IgcmVnaXN0ZXJpbmcge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNoZXN9LlxuICpcbiAqICAgKiBgaUVsZW1lbnRgIC0gaW5zdGFuY2UgZWxlbWVudCAtIFRoZSBlbGVtZW50IHdoZXJlIHRoZSBkaXJlY3RpdmUgaXMgdG8gYmUgdXNlZC4gSXQgaXMgc2FmZSB0b1xuICogICAgIG1hbmlwdWxhdGUgdGhlIGNoaWxkcmVuIG9mIHRoZSBlbGVtZW50IG9ubHkgaW4gYHBvc3RMaW5rYCBmdW5jdGlvbiBzaW5jZSB0aGUgY2hpbGRyZW4gaGF2ZVxuICogICAgIGFscmVhZHkgYmVlbiBsaW5rZWQuXG4gKlxuICogICAqIGBpQXR0cnNgIC0gaW5zdGFuY2UgYXR0cmlidXRlcyAtIE5vcm1hbGl6ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzIGRlY2xhcmVkIG9uIHRoaXMgZWxlbWVudCBzaGFyZWRcbiAqICAgICBiZXR3ZWVuIGFsbCBkaXJlY3RpdmUgbGlua2luZyBmdW5jdGlvbnMuXG4gKlxuICogICAqIGBjb250cm9sbGVyYCAtIHRoZSBkaXJlY3RpdmUncyByZXF1aXJlZCBjb250cm9sbGVyIGluc3RhbmNlKHMpIC0gSW5zdGFuY2VzIGFyZSBzaGFyZWRcbiAqICAgICBhbW9uZyBhbGwgZGlyZWN0aXZlcywgd2hpY2ggYWxsb3dzIHRoZSBkaXJlY3RpdmVzIHRvIHVzZSB0aGUgY29udHJvbGxlcnMgYXMgYSBjb21tdW5pY2F0aW9uXG4gKiAgICAgY2hhbm5lbC4gVGhlIGV4YWN0IHZhbHVlIGRlcGVuZHMgb24gdGhlIGRpcmVjdGl2ZSdzIGByZXF1aXJlYCBwcm9wZXJ0eTpcbiAqICAgICAgICogbm8gY29udHJvbGxlcihzKSByZXF1aXJlZDogdGhlIGRpcmVjdGl2ZSdzIG93biBjb250cm9sbGVyLCBvciBgdW5kZWZpbmVkYCBpZiBpdCBkb2Vzbid0IGhhdmUgb25lXG4gKiAgICAgICAqIGBzdHJpbmdgOiB0aGUgY29udHJvbGxlciBpbnN0YW5jZVxuICogICAgICAgKiBgYXJyYXlgOiBhcnJheSBvZiBjb250cm9sbGVyIGluc3RhbmNlc1xuICpcbiAqICAgICBJZiBhIHJlcXVpcmVkIGNvbnRyb2xsZXIgY2Fubm90IGJlIGZvdW5kLCBhbmQgaXQgaXMgb3B0aW9uYWwsIHRoZSBpbnN0YW5jZSBpcyBgbnVsbGAsXG4gKiAgICAgb3RoZXJ3aXNlIHRoZSB7QGxpbmsgZXJyb3I6JGNvbXBpbGU6Y3RyZXEgTWlzc2luZyBSZXF1aXJlZCBDb250cm9sbGVyfSBlcnJvciBpcyB0aHJvd24uXG4gKlxuICogICAgIE5vdGUgdGhhdCB5b3UgY2FuIGFsc28gcmVxdWlyZSB0aGUgZGlyZWN0aXZlJ3Mgb3duIGNvbnRyb2xsZXIgLSBpdCB3aWxsIGJlIG1hZGUgYXZhaWxhYmxlIGxpa2VcbiAqICAgICBhbnkgb3RoZXIgY29udHJvbGxlci5cbiAqXG4gKiAgICogYHRyYW5zY2x1ZGVGbmAgLSBBIHRyYW5zY2x1ZGUgbGlua2luZyBmdW5jdGlvbiBwcmUtYm91bmQgdG8gdGhlIGNvcnJlY3QgdHJhbnNjbHVzaW9uIHNjb3BlLlxuICogICAgIFRoaXMgaXMgdGhlIHNhbWUgYXMgdGhlIGAkdHJhbnNjbHVkZWBcbiAqICAgICBwYXJhbWV0ZXIgb2YgZGlyZWN0aXZlIGNvbnRyb2xsZXJzLCBzZWUgdGhlcmUgZm9yIGRldGFpbHMuXG4gKiAgICAgYGZ1bmN0aW9uKFtzY29wZV0sIGNsb25lTGlua2luZ0ZuLCBmdXR1cmVQYXJlbnRFbGVtZW50KWAuXG4gKlxuICogIyMjIyBQcmUtbGlua2luZyBmdW5jdGlvblxuICpcbiAqIEV4ZWN1dGVkIGJlZm9yZSB0aGUgY2hpbGQgZWxlbWVudHMgYXJlIGxpbmtlZC4gTm90IHNhZmUgdG8gZG8gRE9NIHRyYW5zZm9ybWF0aW9uIHNpbmNlIHRoZVxuICogY29tcGlsZXIgbGlua2luZyBmdW5jdGlvbiB3aWxsIGZhaWwgdG8gbG9jYXRlIHRoZSBjb3JyZWN0IGVsZW1lbnRzIGZvciBsaW5raW5nLlxuICpcbiAqICMjIyMgUG9zdC1saW5raW5nIGZ1bmN0aW9uXG4gKlxuICogRXhlY3V0ZWQgYWZ0ZXIgdGhlIGNoaWxkIGVsZW1lbnRzIGFyZSBsaW5rZWQuXG4gKlxuICogTm90ZSB0aGF0IGNoaWxkIGVsZW1lbnRzIHRoYXQgY29udGFpbiBgdGVtcGxhdGVVcmxgIGRpcmVjdGl2ZXMgd2lsbCBub3QgaGF2ZSBiZWVuIGNvbXBpbGVkXG4gKiBhbmQgbGlua2VkIHNpbmNlIHRoZXkgYXJlIHdhaXRpbmcgZm9yIHRoZWlyIHRlbXBsYXRlIHRvIGxvYWQgYXN5bmNocm9ub3VzbHkgYW5kIHRoZWlyIG93blxuICogY29tcGlsYXRpb24gYW5kIGxpbmtpbmcgaGFzIGJlZW4gc3VzcGVuZGVkIHVudGlsIHRoYXQgb2NjdXJzLlxuICpcbiAqIEl0IGlzIHNhZmUgdG8gZG8gRE9NIHRyYW5zZm9ybWF0aW9uIGluIHRoZSBwb3N0LWxpbmtpbmcgZnVuY3Rpb24gb24gZWxlbWVudHMgdGhhdCBhcmUgbm90IHdhaXRpbmdcbiAqIGZvciB0aGVpciBhc3luYyB0ZW1wbGF0ZXMgdG8gYmUgcmVzb2x2ZWQuXG4gKlxuICpcbiAqICMjIyBUcmFuc2NsdXNpb25cbiAqXG4gKiBUcmFuc2NsdXNpb24gaXMgdGhlIHByb2Nlc3Mgb2YgZXh0cmFjdGluZyBhIGNvbGxlY3Rpb24gb2YgRE9NIGVsZW1lbnRzIGZyb20gb25lIHBhcnQgb2YgdGhlIERPTSBhbmRcbiAqIGNvcHlpbmcgdGhlbSB0byBhbm90aGVyIHBhcnQgb2YgdGhlIERPTSwgd2hpbGUgbWFpbnRhaW5pbmcgdGhlaXIgY29ubmVjdGlvbiB0byB0aGUgb3JpZ2luYWwgQW5ndWxhckpTXG4gKiBzY29wZSBmcm9tIHdoZXJlIHRoZXkgd2VyZSB0YWtlbi5cbiAqXG4gKiBUcmFuc2NsdXNpb24gaXMgdXNlZCAob2Z0ZW4gd2l0aCB7QGxpbmsgbmdUcmFuc2NsdWRlfSkgdG8gaW5zZXJ0IHRoZVxuICogb3JpZ2luYWwgY29udGVudHMgb2YgYSBkaXJlY3RpdmUncyBlbGVtZW50IGludG8gYSBzcGVjaWZpZWQgcGxhY2UgaW4gdGhlIHRlbXBsYXRlIG9mIHRoZSBkaXJlY3RpdmUuXG4gKiBUaGUgYmVuZWZpdCBvZiB0cmFuc2NsdXNpb24sIG92ZXIgc2ltcGx5IG1vdmluZyB0aGUgRE9NIGVsZW1lbnRzIG1hbnVhbGx5LCBpcyB0aGF0IHRoZSB0cmFuc2NsdWRlZFxuICogY29udGVudCBoYXMgYWNjZXNzIHRvIHRoZSBwcm9wZXJ0aWVzIG9uIHRoZSBzY29wZSBmcm9tIHdoaWNoIGl0IHdhcyB0YWtlbiwgZXZlbiBpZiB0aGUgZGlyZWN0aXZlXG4gKiBoYXMgaXNvbGF0ZWQgc2NvcGUuXG4gKiBTZWUgdGhlIHtAbGluayBndWlkZS9kaXJlY3RpdmUjY3JlYXRpbmctYS1kaXJlY3RpdmUtdGhhdC13cmFwcy1vdGhlci1lbGVtZW50cyBEaXJlY3RpdmVzIEd1aWRlfS5cbiAqXG4gKiBUaGlzIG1ha2VzIGl0IHBvc3NpYmxlIGZvciB0aGUgd2lkZ2V0IHRvIGhhdmUgcHJpdmF0ZSBzdGF0ZSBmb3IgaXRzIHRlbXBsYXRlLCB3aGlsZSB0aGUgdHJhbnNjbHVkZWRcbiAqIGNvbnRlbnQgaGFzIGFjY2VzcyB0byBpdHMgb3JpZ2luYXRpbmcgc2NvcGUuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBXaGVuIHRlc3RpbmcgYW4gZWxlbWVudCB0cmFuc2NsdWRlIGRpcmVjdGl2ZSB5b3UgbXVzdCBub3QgcGxhY2UgdGhlIGRpcmVjdGl2ZSBhdCB0aGUgcm9vdCBvZiB0aGVcbiAqIERPTSBmcmFnbWVudCB0aGF0IGlzIGJlaW5nIGNvbXBpbGVkLiBTZWUge0BsaW5rIGd1aWRlL3VuaXQtdGVzdGluZyN0ZXN0aW5nLXRyYW5zY2x1c2lvbi1kaXJlY3RpdmVzXG4gKiBUZXN0aW5nIFRyYW5zY2x1c2lvbiBEaXJlY3RpdmVzfS5cbiAqIDwvZGl2PlxuICpcbiAqICMjIyMgVHJhbnNjbHVzaW9uIEZ1bmN0aW9uc1xuICpcbiAqIFdoZW4gYSBkaXJlY3RpdmUgcmVxdWVzdHMgdHJhbnNjbHVzaW9uLCB0aGUgY29tcGlsZXIgZXh0cmFjdHMgaXRzIGNvbnRlbnRzIGFuZCBwcm92aWRlcyBhICoqdHJhbnNjbHVzaW9uXG4gKiBmdW5jdGlvbioqIHRvIHRoZSBkaXJlY3RpdmUncyBgbGlua2AgZnVuY3Rpb24gYW5kIGBjb250cm9sbGVyYC4gVGhpcyB0cmFuc2NsdXNpb24gZnVuY3Rpb24gaXMgYSBzcGVjaWFsXG4gKiAqKmxpbmtpbmcgZnVuY3Rpb24qKiB0aGF0IHdpbGwgcmV0dXJuIHRoZSBjb21waWxlZCBjb250ZW50cyBsaW5rZWQgdG8gYSBuZXcgdHJhbnNjbHVzaW9uIHNjb3BlLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiBJZiB5b3UgYXJlIGp1c3QgdXNpbmcge0BsaW5rIG5nVHJhbnNjbHVkZX0gdGhlbiB5b3UgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCB0aGlzIGZ1bmN0aW9uLCBzaW5jZVxuICogbmdUcmFuc2NsdWRlIHdpbGwgZGVhbCB3aXRoIGl0IGZvciB1cy5cbiAqIDwvZGl2PlxuICpcbiAqIElmIHlvdSB3YW50IHRvIG1hbnVhbGx5IGNvbnRyb2wgdGhlIGluc2VydGlvbiBhbmQgcmVtb3ZhbCBvZiB0aGUgdHJhbnNjbHVkZWQgY29udGVudCBpbiB5b3VyIGRpcmVjdGl2ZVxuICogdGhlbiB5b3UgbXVzdCB1c2UgdGhpcyB0cmFuc2NsdWRlIGZ1bmN0aW9uLiBXaGVuIHlvdSBjYWxsIGEgdHJhbnNjbHVkZSBmdW5jdGlvbiBpdCByZXR1cm5zIGEgYSBqcUxpdGUvSlF1ZXJ5XG4gKiBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgY29tcGlsZWQgRE9NLCB3aGljaCBpcyBsaW5rZWQgdG8gdGhlIGNvcnJlY3QgdHJhbnNjbHVzaW9uIHNjb3BlLlxuICpcbiAqIFdoZW4geW91IGNhbGwgYSB0cmFuc2NsdXNpb24gZnVuY3Rpb24geW91IGNhbiBwYXNzIGluIGEgKipjbG9uZSBhdHRhY2ggZnVuY3Rpb24qKi4gVGhpcyBmdW5jdGlvbiBhY2NlcHRzXG4gKiB0d28gcGFyYW1ldGVycywgYGZ1bmN0aW9uKGNsb25lLCBzY29wZSkgeyAuLi4gfWAsIHdoZXJlIHRoZSBgY2xvbmVgIGlzIGEgZnJlc2ggY29tcGlsZWQgY29weSBvZiB5b3VyIHRyYW5zY2x1ZGVkXG4gKiBjb250ZW50IGFuZCB0aGUgYHNjb3BlYCBpcyB0aGUgbmV3bHkgY3JlYXRlZCB0cmFuc2NsdXNpb24gc2NvcGUsIHRvIHdoaWNoIHRoZSBjbG9uZSBpcyBib3VuZC5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogKipCZXN0IFByYWN0aWNlKio6IEFsd2F5cyBwcm92aWRlIGEgYGNsb25lRm5gIChjbG9uZSBhdHRhY2ggZnVuY3Rpb24pIHdoZW4geW91IGNhbGwgYSB0cmFuc2x1ZGUgZnVuY3Rpb25cbiAqIHNpbmNlIHlvdSB0aGVuIGdldCBhIGZyZXNoIGNsb25lIG9mIHRoZSBvcmlnaW5hbCBET00gYW5kIGFsc28gaGF2ZSBhY2Nlc3MgdG8gdGhlIG5ldyB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKiA8L2Rpdj5cbiAqXG4gKiBJdCBpcyBub3JtYWwgcHJhY3RpY2UgdG8gYXR0YWNoIHlvdXIgdHJhbnNjbHVkZWQgY29udGVudCAoYGNsb25lYCkgdG8gdGhlIERPTSBpbnNpZGUgeW91ciAqKmNsb25lXG4gKiBhdHRhY2ggZnVuY3Rpb24qKjpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHRyYW5zY2x1ZGVkQ29udGVudCwgdHJhbnNjbHVzaW9uU2NvcGU7XG4gKlxuICogJHRyYW5zY2x1ZGUoZnVuY3Rpb24oY2xvbmUsIHNjb3BlKSB7XG4gKiAgIGVsZW1lbnQuYXBwZW5kKGNsb25lKTtcbiAqICAgdHJhbnNjbHVkZWRDb250ZW50ID0gY2xvbmU7XG4gKiAgIHRyYW5zY2x1c2lvblNjb3BlID0gc2NvcGU7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIExhdGVyLCBpZiB5b3Ugd2FudCB0byByZW1vdmUgdGhlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgZnJvbSB5b3VyIERPTSB0aGVuIHlvdSBzaG91bGQgYWxzbyBkZXN0cm95IHRoZVxuICogYXNzb2NpYXRlZCB0cmFuc2NsdXNpb24gc2NvcGU6XG4gKlxuICogYGBganNcbiAqIHRyYW5zY2x1ZGVkQ29udGVudC5yZW1vdmUoKTtcbiAqIHRyYW5zY2x1c2lvblNjb3BlLiRkZXN0cm95KCk7XG4gKiBgYGBcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogKipCZXN0IFByYWN0aWNlKio6IGlmIHlvdSBpbnRlbmQgdG8gYWRkIGFuZCByZW1vdmUgdHJhbnNjbHVkZWQgY29udGVudCBtYW51YWxseSBpbiB5b3VyIGRpcmVjdGl2ZVxuICogKGJ5IGNhbGxpbmcgdGhlIHRyYW5zY2x1ZGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBET00gYW5kIGNhbGxpbmcgYGVsZW1lbnQucmVtb3ZlKClgIHRvIHJlbW92ZSBpdCksXG4gKiB0aGVuIHlvdSBhcmUgYWxzbyByZXNwb25zaWJsZSBmb3IgY2FsbGluZyBgJGRlc3Ryb3lgIG9uIHRoZSB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKiA8L2Rpdj5cbiAqXG4gKiBUaGUgYnVpbHQtaW4gRE9NIG1hbmlwdWxhdGlvbiBkaXJlY3RpdmVzLCBzdWNoIGFzIHtAbGluayBuZ0lmfSwge0BsaW5rIG5nU3dpdGNofSBhbmQge0BsaW5rIG5nUmVwZWF0fVxuICogYXV0b21hdGljYWxseSBkZXN0cm95IHRoZWlyIHRyYW5zbHVkZWQgY2xvbmVzIGFzIG5lY2Vzc2FyeSBzbyB5b3UgZG8gbm90IG5lZWQgdG8gd29ycnkgYWJvdXQgdGhpcyBpZlxuICogeW91IGFyZSBzaW1wbHkgdXNpbmcge0BsaW5rIG5nVHJhbnNjbHVkZX0gdG8gaW5qZWN0IHRoZSB0cmFuc2NsdXNpb24gaW50byB5b3VyIGRpcmVjdGl2ZS5cbiAqXG4gKlxuICogIyMjIyBUcmFuc2NsdXNpb24gU2NvcGVzXG4gKlxuICogV2hlbiB5b3UgY2FsbCBhIHRyYW5zY2x1ZGUgZnVuY3Rpb24gaXQgcmV0dXJucyBhIERPTSBmcmFnbWVudCB0aGF0IGlzIHByZS1ib3VuZCB0byBhICoqdHJhbnNjbHVzaW9uXG4gKiBzY29wZSoqLiBUaGlzIHNjb3BlIGlzIHNwZWNpYWwsIGluIHRoYXQgaXQgaXMgYSBjaGlsZCBvZiB0aGUgZGlyZWN0aXZlJ3Mgc2NvcGUgKGFuZCBzbyBnZXRzIGRlc3Ryb3llZFxuICogd2hlbiB0aGUgZGlyZWN0aXZlJ3Mgc2NvcGUgZ2V0cyBkZXN0cm95ZWQpIGJ1dCBpdCBpbmhlcml0cyB0aGUgcHJvcGVydGllcyBvZiB0aGUgc2NvcGUgZnJvbSB3aGljaCBpdFxuICogd2FzIHRha2VuLlxuICpcbiAqIEZvciBleGFtcGxlIGNvbnNpZGVyIGEgZGlyZWN0aXZlIHRoYXQgdXNlcyB0cmFuc2NsdXNpb24gYW5kIGlzb2xhdGVkIHNjb3BlLiBUaGUgRE9NIGhpZXJhcmNoeSBtaWdodCBsb29rXG4gKiBsaWtlIHRoaXM6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBuZy1hcHA+XG4gKiAgIDxkaXYgaXNvbGF0ZT5cbiAqICAgICA8ZGl2IHRyYW5zY2x1c2lvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9kaXY+XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIFRoZSBgJHBhcmVudGAgc2NvcGUgaGllcmFyY2h5IHdpbGwgbG9vayBsaWtlIHRoaXM6XG4gKlxuICogYGBgXG4gKiAtICRyb290U2NvcGVcbiAqICAgLSBpc29sYXRlXG4gKiAgICAgLSB0cmFuc2NsdXNpb25cbiAqIGBgYFxuICpcbiAqIGJ1dCB0aGUgc2NvcGVzIHdpbGwgaW5oZXJpdCBwcm90b3R5cGljYWxseSBmcm9tIGRpZmZlcmVudCBzY29wZXMgdG8gdGhlaXIgYCRwYXJlbnRgLlxuICpcbiAqIGBgYFxuICogLSAkcm9vdFNjb3BlXG4gKiAgIC0gdHJhbnNjbHVzaW9uXG4gKiAtIGlzb2xhdGVcbiAqIGBgYFxuICpcbiAqXG4gKiAjIyMgQXR0cmlidXRlc1xuICpcbiAqIFRoZSB7QGxpbmsgbmcuJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMgQXR0cmlidXRlc30gb2JqZWN0IC0gcGFzc2VkIGFzIGEgcGFyYW1ldGVyIGluIHRoZVxuICogYGxpbmsoKWAgb3IgYGNvbXBpbGUoKWAgZnVuY3Rpb25zLiBJdCBoYXMgYSB2YXJpZXR5IG9mIHVzZXMuXG4gKlxuICogYWNjZXNzaW5nICpOb3JtYWxpemVkIGF0dHJpYnV0ZSBuYW1lczoqXG4gKiBEaXJlY3RpdmVzIGxpa2UgJ25nQmluZCcgY2FuIGJlIGV4cHJlc3NlZCBpbiBtYW55IHdheXM6ICduZzpiaW5kJywgYGRhdGEtbmctYmluZGAsIG9yICd4LW5nLWJpbmQnLlxuICogdGhlIGF0dHJpYnV0ZXMgb2JqZWN0IGFsbG93cyBmb3Igbm9ybWFsaXplZCBhY2Nlc3MgdG9cbiAqICAgdGhlIGF0dHJpYnV0ZXMuXG4gKlxuICogKiAqRGlyZWN0aXZlIGludGVyLWNvbW11bmljYXRpb246KiBBbGwgZGlyZWN0aXZlcyBzaGFyZSB0aGUgc2FtZSBpbnN0YW5jZSBvZiB0aGUgYXR0cmlidXRlc1xuICogICBvYmplY3Qgd2hpY2ggYWxsb3dzIHRoZSBkaXJlY3RpdmVzIHRvIHVzZSB0aGUgYXR0cmlidXRlcyBvYmplY3QgYXMgaW50ZXIgZGlyZWN0aXZlXG4gKiAgIGNvbW11bmljYXRpb24uXG4gKlxuICogKiAqU3VwcG9ydHMgaW50ZXJwb2xhdGlvbjoqIEludGVycG9sYXRpb24gYXR0cmlidXRlcyBhcmUgYXNzaWduZWQgdG8gdGhlIGF0dHJpYnV0ZSBvYmplY3RcbiAqICAgYWxsb3dpbmcgb3RoZXIgZGlyZWN0aXZlcyB0byByZWFkIHRoZSBpbnRlcnBvbGF0ZWQgdmFsdWUuXG4gKlxuICogKiAqT2JzZXJ2aW5nIGludGVycG9sYXRlZCBhdHRyaWJ1dGVzOiogVXNlIGAkb2JzZXJ2ZWAgdG8gb2JzZXJ2ZSB0aGUgdmFsdWUgY2hhbmdlcyBvZiBhdHRyaWJ1dGVzXG4gKiAgIHRoYXQgY29udGFpbiBpbnRlcnBvbGF0aW9uIChlLmcuIGBzcmM9XCJ7e2Jhcn19XCJgKS4gTm90IG9ubHkgaXMgdGhpcyB2ZXJ5IGVmZmljaWVudCBidXQgaXQncyBhbHNvXG4gKiAgIHRoZSBvbmx5IHdheSB0byBlYXNpbHkgZ2V0IHRoZSBhY3R1YWwgdmFsdWUgYmVjYXVzZSBkdXJpbmcgdGhlIGxpbmtpbmcgcGhhc2UgdGhlIGludGVycG9sYXRpb25cbiAqICAgaGFzbid0IGJlZW4gZXZhbHVhdGVkIHlldCBhbmQgc28gdGhlIHZhbHVlIGlzIGF0IHRoaXMgdGltZSBzZXQgdG8gYHVuZGVmaW5lZGAuXG4gKlxuICogYGBganNcbiAqIGZ1bmN0aW9uIGxpbmtpbmdGbihzY29wZSwgZWxtLCBhdHRycywgY3RybCkge1xuICogICAvLyBnZXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZVxuICogICBjb25zb2xlLmxvZyhhdHRycy5uZ01vZGVsKTtcbiAqXG4gKiAgIC8vIGNoYW5nZSB0aGUgYXR0cmlidXRlXG4gKiAgIGF0dHJzLiRzZXQoJ25nTW9kZWwnLCAnbmV3IHZhbHVlJyk7XG4gKlxuICogICAvLyBvYnNlcnZlIGNoYW5nZXMgdG8gaW50ZXJwb2xhdGVkIGF0dHJpYnV0ZVxuICogICBhdHRycy4kb2JzZXJ2ZSgnbmdNb2RlbCcsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gKiAgICAgY29uc29sZS5sb2coJ25nTW9kZWwgaGFzIGNoYW5nZWQgdmFsdWUgdG8gJyArIHZhbHVlKTtcbiAqICAgfSk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiAjIyBFeGFtcGxlXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZSoqOiBUeXBpY2FsbHkgZGlyZWN0aXZlcyBhcmUgcmVnaXN0ZXJlZCB3aXRoIGBtb2R1bGUuZGlyZWN0aXZlYC4gVGhlIGV4YW1wbGUgYmVsb3cgaXNcbiAqIHRvIGlsbHVzdHJhdGUgaG93IGAkY29tcGlsZWAgd29ya3MuXG4gKiA8L2Rpdj5cbiAqXG4gPGV4YW1wbGUgbW9kdWxlPVwiY29tcGlsZUV4YW1wbGVcIj5cbiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgPHNjcmlwdD5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdjb21waWxlRXhhbXBsZScsIFtdLCBmdW5jdGlvbigkY29tcGlsZVByb3ZpZGVyKSB7XG4gICAgICAgIC8vIGNvbmZpZ3VyZSBuZXcgJ2NvbXBpbGUnIGRpcmVjdGl2ZSBieSBwYXNzaW5nIGEgZGlyZWN0aXZlXG4gICAgICAgIC8vIGZhY3RvcnkgZnVuY3Rpb24uIFRoZSBmYWN0b3J5IGZ1bmN0aW9uIGluamVjdHMgdGhlICckY29tcGlsZSdcbiAgICAgICAgJGNvbXBpbGVQcm92aWRlci5kaXJlY3RpdmUoJ2NvbXBpbGUnLCBmdW5jdGlvbigkY29tcGlsZSkge1xuICAgICAgICAgIC8vIGRpcmVjdGl2ZSBmYWN0b3J5IGNyZWF0ZXMgYSBsaW5rIGZ1bmN0aW9uXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgICAgc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgICBmdW5jdGlvbihzY29wZSkge1xuICAgICAgICAgICAgICAgICAvLyB3YXRjaCB0aGUgJ2NvbXBpbGUnIGV4cHJlc3Npb24gZm9yIGNoYW5nZXNcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGUuJGV2YWwoYXR0cnMuY29tcGlsZSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgJ2NvbXBpbGUnIGV4cHJlc3Npb24gY2hhbmdlc1xuICAgICAgICAgICAgICAgIC8vIGFzc2lnbiBpdCBpbnRvIHRoZSBjdXJyZW50IERPTVxuICAgICAgICAgICAgICAgIGVsZW1lbnQuaHRtbCh2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBjb21waWxlIHRoZSBuZXcgRE9NIGFuZCBsaW5rIGl0IHRvIHRoZSBjdXJyZW50XG4gICAgICAgICAgICAgICAgLy8gc2NvcGUuXG4gICAgICAgICAgICAgICAgLy8gTk9URTogd2Ugb25seSBjb21waWxlIC5jaGlsZE5vZGVzIHNvIHRoYXRcbiAgICAgICAgICAgICAgICAvLyB3ZSBkb24ndCBnZXQgaW50byBpbmZpbml0ZSBsb29wIGNvbXBpbGluZyBvdXJzZWx2ZXNcbiAgICAgICAgICAgICAgICAkY29tcGlsZShlbGVtZW50LmNvbnRlbnRzKCkpKHNjb3BlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAuY29udHJvbGxlcignR3JlZXRlckNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAkc2NvcGUubmFtZSA9ICdBbmd1bGFyJztcbiAgICAgICAgJHNjb3BlLmh0bWwgPSAnSGVsbG8ge3tuYW1lfX0nO1xuICAgICAgfV0pO1xuICAgIDwvc2NyaXB0PlxuICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkdyZWV0ZXJDb250cm9sbGVyXCI+XG4gICAgICA8aW5wdXQgbmctbW9kZWw9XCJuYW1lXCI+IDxici8+XG4gICAgICA8dGV4dGFyZWEgbmctbW9kZWw9XCJodG1sXCI+PC90ZXh0YXJlYT4gPGJyLz5cbiAgICAgIDxkaXYgY29tcGlsZT1cImh0bWxcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgIDwvZmlsZT5cbiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgaXQoJ3Nob3VsZCBhdXRvIGNvbXBpbGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICB2YXIgdGV4dGFyZWEgPSAkKCd0ZXh0YXJlYScpO1xuICAgICAgIHZhciBvdXRwdXQgPSAkKCdkaXZbY29tcGlsZV0nKTtcbiAgICAgICAvLyBUaGUgaW5pdGlhbCBzdGF0ZSByZWFkcyAnSGVsbG8gQW5ndWxhcicuXG4gICAgICAgZXhwZWN0KG91dHB1dC5nZXRUZXh0KCkpLnRvQmUoJ0hlbGxvIEFuZ3VsYXInKTtcbiAgICAgICB0ZXh0YXJlYS5jbGVhcigpO1xuICAgICAgIHRleHRhcmVhLnNlbmRLZXlzKCd7e25hbWV9fSEnKTtcbiAgICAgICBleHBlY3Qob3V0cHV0LmdldFRleHQoKSkudG9CZSgnQW5ndWxhciEnKTtcbiAgICAgfSk7XG4gICA8L2ZpbGU+XG4gPC9leGFtcGxlPlxuXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfERPTUVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCBvciBIVE1MIHN0cmluZyB0byBjb21waWxlIGludG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oYW5ndWxhci5TY29wZSwgY2xvbmVBdHRhY2hGbj0pfSB0cmFuc2NsdWRlIGZ1bmN0aW9uIGF2YWlsYWJsZSB0byBkaXJlY3RpdmVzIC0gREVQUkVDQVRFRC5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG4gKiAqKk5vdGU6KiogUGFzc2luZyBhIGB0cmFuc2NsdWRlYCBmdW5jdGlvbiB0byB0aGUgJGNvbXBpbGUgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZCwgYXMgaXRcbiAqICAgZS5nLiB3aWxsIG5vdCB1c2UgdGhlIHJpZ2h0IG91dGVyIHNjb3BlLiBQbGVhc2UgcGFzcyB0aGUgdHJhbnNjbHVkZSBmdW5jdGlvbiBhcyBhXG4gKiAgIGBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbmAgdG8gdGhlIGxpbmsgZnVuY3Rpb24gaW5zdGVhZC5cbiAqIDwvZGl2PlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhQcmlvcml0eSBvbmx5IGFwcGx5IGRpcmVjdGl2ZXMgbG93ZXIgdGhhbiBnaXZlbiBwcmlvcml0eSAoT25seSBlZmZlY3RzIHRoZVxuICogICAgICAgICAgICAgICAgIHJvb3QgZWxlbWVudChzKSwgbm90IHRoZWlyIGNoaWxkcmVuKVxuICogQHJldHVybnMge2Z1bmN0aW9uKHNjb3BlLCBjbG9uZUF0dGFjaEZuPSwgb3B0aW9ucz0pfSBhIGxpbmsgZnVuY3Rpb24gd2hpY2ggaXMgdXNlZCB0byBiaW5kIHRlbXBsYXRlXG4gKiAoYSBET00gZWxlbWVudC90cmVlKSB0byBhIHNjb3BlLiBXaGVyZTpcbiAqXG4gKiAgKiBgc2NvcGVgIC0gQSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBTY29wZX0gdG8gYmluZCB0by5cbiAqICAqIGBjbG9uZUF0dGFjaEZuYCAtIElmIGBjbG9uZUF0dGFjaEZuYCBpcyBwcm92aWRlZCwgdGhlbiB0aGUgbGluayBmdW5jdGlvbiB3aWxsIGNsb25lIHRoZVxuICogIGB0ZW1wbGF0ZWAgYW5kIGNhbGwgdGhlIGBjbG9uZUF0dGFjaEZuYCBmdW5jdGlvbiBhbGxvd2luZyB0aGUgY2FsbGVyIHRvIGF0dGFjaCB0aGVcbiAqICBjbG9uZWQgZWxlbWVudHMgdG8gdGhlIERPTSBkb2N1bWVudCBhdCB0aGUgYXBwcm9wcmlhdGUgcGxhY2UuIFRoZSBgY2xvbmVBdHRhY2hGbmAgaXNcbiAqICBjYWxsZWQgYXM6IDxici8+IGBjbG9uZUF0dGFjaEZuKGNsb25lZEVsZW1lbnQsIHNjb3BlKWAgd2hlcmU6XG4gKlxuICogICAgICAqIGBjbG9uZWRFbGVtZW50YCAtIGlzIGEgY2xvbmUgb2YgdGhlIG9yaWdpbmFsIGBlbGVtZW50YCBwYXNzZWQgaW50byB0aGUgY29tcGlsZXIuXG4gKiAgICAgICogYHNjb3BlYCAtIGlzIHRoZSBjdXJyZW50IHNjb3BlIHdpdGggd2hpY2ggdGhlIGxpbmtpbmcgZnVuY3Rpb24gaXMgd29ya2luZyB3aXRoLlxuICpcbiAqICAqIGBvcHRpb25zYCAtIEFuIG9wdGlvbmFsIG9iamVjdCBoYXNoIHdpdGggbGlua2luZyBvcHRpb25zLiBJZiBgb3B0aW9uc2AgaXMgcHJvdmlkZWQsIHRoZW4gdGhlIGZvbGxvd2luZ1xuICogIGtleXMgbWF5IGJlIHVzZWQgdG8gY29udHJvbCBsaW5raW5nIGJlaGF2aW9yOlxuICpcbiAqICAgICAgKiBgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm5gIC0gdGhlIHRyYW5zY2x1ZGUgZnVuY3Rpb24gbWFkZSBhdmFpbGFibGUgdG9cbiAqICAgICAgICBkaXJlY3RpdmVzOyBpZiBnaXZlbiwgaXQgd2lsbCBiZSBwYXNzZWQgdGhyb3VnaCB0byB0aGUgbGluayBmdW5jdGlvbnMgb2ZcbiAqICAgICAgICBkaXJlY3RpdmVzIGZvdW5kIGluIGBlbGVtZW50YCBkdXJpbmcgY29tcGlsYXRpb24uXG4gKiAgICAgICogYHRyYW5zY2x1ZGVDb250cm9sbGVyc2AgLSBhbiBvYmplY3QgaGFzaCB3aXRoIGtleXMgdGhhdCBtYXAgY29udHJvbGxlciBuYW1lc1xuICogICAgICAgIHRvIGNvbnRyb2xsZXIgaW5zdGFuY2VzOyBpZiBnaXZlbiwgaXQgd2lsbCBtYWtlIHRoZSBjb250cm9sbGVyc1xuICogICAgICAgIGF2YWlsYWJsZSB0byBkaXJlY3RpdmVzLlxuICogICAgICAqIGBmdXR1cmVQYXJlbnRFbGVtZW50YCAtIGRlZmluZXMgdGhlIHBhcmVudCB0byB3aGljaCB0aGUgYGNsb25lQXR0YWNoRm5gIHdpbGwgYWRkXG4gKiAgICAgICAgdGhlIGNsb25lZCBlbGVtZW50czsgb25seSBuZWVkZWQgZm9yIHRyYW5zY2x1ZGVzIHRoYXQgYXJlIGFsbG93ZWQgdG8gY29udGFpbiBub24gaHRtbFxuICogICAgICAgIGVsZW1lbnRzIChlLmcuIFNWRyBlbGVtZW50cykuIFNlZSBhbHNvIHRoZSBkaXJlY3RpdmUuY29udHJvbGxlciBwcm9wZXJ0eS5cbiAqXG4gKiBDYWxsaW5nIHRoZSBsaW5raW5nIGZ1bmN0aW9uIHJldHVybnMgdGhlIGVsZW1lbnQgb2YgdGhlIHRlbXBsYXRlLiBJdCBpcyBlaXRoZXIgdGhlIG9yaWdpbmFsXG4gKiBlbGVtZW50IHBhc3NlZCBpbiwgb3IgdGhlIGNsb25lIG9mIHRoZSBlbGVtZW50IGlmIHRoZSBgY2xvbmVBdHRhY2hGbmAgaXMgcHJvdmlkZWQuXG4gKlxuICogQWZ0ZXIgbGlua2luZyB0aGUgdmlldyBpcyBub3QgdXBkYXRlZCB1bnRpbCBhZnRlciBhIGNhbGwgdG8gJGRpZ2VzdCB3aGljaCB0eXBpY2FsbHkgaXMgZG9uZSBieVxuICogQW5ndWxhciBhdXRvbWF0aWNhbGx5LlxuICpcbiAqIElmIHlvdSBuZWVkIGFjY2VzcyB0byB0aGUgYm91bmQgdmlldywgdGhlcmUgYXJlIHR3byB3YXlzIHRvIGRvIGl0OlxuICpcbiAqIC0gSWYgeW91IGFyZSBub3QgYXNraW5nIHRoZSBsaW5raW5nIGZ1bmN0aW9uIHRvIGNsb25lIHRoZSB0ZW1wbGF0ZSwgY3JlYXRlIHRoZSBET00gZWxlbWVudChzKVxuICogICBiZWZvcmUgeW91IHNlbmQgdGhlbSB0byB0aGUgY29tcGlsZXIgYW5kIGtlZXAgdGhpcyByZWZlcmVuY2UgYXJvdW5kLlxuICogICBgYGBqc1xuICogICAgIHZhciBlbGVtZW50ID0gJGNvbXBpbGUoJzxwPnt7dG90YWx9fTwvcD4nKShzY29wZSk7XG4gKiAgIGBgYFxuICpcbiAqIC0gaWYgb24gdGhlIG90aGVyIGhhbmQsIHlvdSBuZWVkIHRoZSBlbGVtZW50IHRvIGJlIGNsb25lZCwgdGhlIHZpZXcgcmVmZXJlbmNlIGZyb20gdGhlIG9yaWdpbmFsXG4gKiAgIGV4YW1wbGUgd291bGQgbm90IHBvaW50IHRvIHRoZSBjbG9uZSwgYnV0IHJhdGhlciB0byB0aGUgb3JpZ2luYWwgdGVtcGxhdGUgdGhhdCB3YXMgY2xvbmVkLiBJblxuICogICB0aGlzIGNhc2UsIHlvdSBjYW4gYWNjZXNzIHRoZSBjbG9uZSB2aWEgdGhlIGNsb25lQXR0YWNoRm46XG4gKiAgIGBgYGpzXG4gKiAgICAgdmFyIHRlbXBsYXRlRWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudCgnPHA+e3t0b3RhbH19PC9wPicpLFxuICogICAgICAgICBzY29wZSA9IC4uLi47XG4gKlxuICogICAgIHZhciBjbG9uZWRFbGVtZW50ID0gJGNvbXBpbGUodGVtcGxhdGVFbGVtZW50KShzY29wZSwgZnVuY3Rpb24oY2xvbmVkRWxlbWVudCwgc2NvcGUpIHtcbiAqICAgICAgIC8vYXR0YWNoIHRoZSBjbG9uZSB0byBET00gZG9jdW1lbnQgYXQgdGhlIHJpZ2h0IHBsYWNlXG4gKiAgICAgfSk7XG4gKlxuICogICAgIC8vbm93IHdlIGhhdmUgcmVmZXJlbmNlIHRvIHRoZSBjbG9uZWQgRE9NIHZpYSBgY2xvbmVkRWxlbWVudGBcbiAqICAgYGBgXG4gKlxuICpcbiAqIEZvciBpbmZvcm1hdGlvbiBvbiBob3cgdGhlIGNvbXBpbGVyIHdvcmtzLCBzZWUgdGhlXG4gKiB7QGxpbmsgZ3VpZGUvY29tcGlsZXIgQW5ndWxhciBIVE1MIENvbXBpbGVyfSBzZWN0aW9uIG9mIHRoZSBEZXZlbG9wZXIgR3VpZGUuXG4gKi9cblxudmFyICRjb21waWxlTWluRXJyID0gbWluRXJyKCckY29tcGlsZScpO1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGNvbXBpbGVQcm92aWRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICovXG4kQ29tcGlsZVByb3ZpZGVyLiRpbmplY3QgPSBbJyRwcm92aWRlJywgJyQkc2FuaXRpemVVcmlQcm92aWRlciddO1xuZnVuY3Rpb24gJENvbXBpbGVQcm92aWRlcigkcHJvdmlkZSwgJCRzYW5pdGl6ZVVyaVByb3ZpZGVyKSB7XG4gIHZhciBoYXNEaXJlY3RpdmVzID0ge30sXG4gICAgICBTdWZmaXggPSAnRGlyZWN0aXZlJyxcbiAgICAgIENPTU1FTlRfRElSRUNUSVZFX1JFR0VYUCA9IC9eXFxzKmRpcmVjdGl2ZVxcOlxccyooW1xcd1xcLV0rKVxccysoLiopJC8sXG4gICAgICBDTEFTU19ESVJFQ1RJVkVfUkVHRVhQID0gLygoW1xcd1xcLV0rKSg/OlxcOihbXjtdKykpPzs/KS8sXG4gICAgICBBTExfT1JfTk9USElOR19BVFRSUyA9IG1ha2VNYXAoJ25nU3JjLG5nU3Jjc2V0LHNyYyxzcmNzZXQnKSxcbiAgICAgIFJFUVVJUkVfUFJFRklYX1JFR0VYUCA9IC9eKD86KFxcXlxcXj8pPyhcXD8pPyhcXF5cXF4/KT8pPy87XG5cbiAgLy8gUmVmOiBodHRwOi8vZGV2ZWxvcGVycy53aGF0d2cub3JnL3dlYmFwcGFwaXMuaHRtbCNldmVudC1oYW5kbGVyLWlkbC1hdHRyaWJ1dGVzXG4gIC8vIFRoZSBhc3N1bXB0aW9uIGlzIHRoYXQgZnV0dXJlIERPTSBldmVudCBhdHRyaWJ1dGUgbmFtZXMgd2lsbCBiZWdpbiB3aXRoXG4gIC8vICdvbicgYW5kIGJlIGNvbXBvc2VkIG9mIG9ubHkgRW5nbGlzaCBsZXR0ZXJzLlxuICB2YXIgRVZFTlRfSEFORExFUl9BVFRSX1JFR0VYUCA9IC9eKG9uW2Etel0rfGZvcm1hY3Rpb24pJC87XG5cbiAgZnVuY3Rpb24gcGFyc2VJc29sYXRlQmluZGluZ3Moc2NvcGUsIGRpcmVjdGl2ZU5hbWUsIGlzQ29udHJvbGxlcikge1xuICAgIHZhciBMT0NBTF9SRUdFWFAgPSAvXlxccyooW0AmXXw9KFxcKj8pKShcXD8/KVxccyooXFx3KilcXHMqJC87XG5cbiAgICB2YXIgYmluZGluZ3MgPSB7fTtcblxuICAgIGZvckVhY2goc2NvcGUsIGZ1bmN0aW9uKGRlZmluaXRpb24sIHNjb3BlTmFtZSkge1xuICAgICAgdmFyIG1hdGNoID0gZGVmaW5pdGlvbi5tYXRjaChMT0NBTF9SRUdFWFApO1xuXG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdpc2NwJyxcbiAgICAgICAgICAgIFwiSW52YWxpZCB7M30gZm9yIGRpcmVjdGl2ZSAnezB9Jy5cIiArXG4gICAgICAgICAgICBcIiBEZWZpbml0aW9uOiB7Li4uIHsxfTogJ3syfScgLi4ufVwiLFxuICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSwgc2NvcGVOYW1lLCBkZWZpbml0aW9uLFxuICAgICAgICAgICAgKGlzQ29udHJvbGxlciA/IFwiY29udHJvbGxlciBiaW5kaW5ncyBkZWZpbml0aW9uXCIgOlxuICAgICAgICAgICAgXCJpc29sYXRlIHNjb3BlIGRlZmluaXRpb25cIikpO1xuICAgICAgfVxuXG4gICAgICBiaW5kaW5nc1tzY29wZU5hbWVdID0ge1xuICAgICAgICBtb2RlOiBtYXRjaFsxXVswXSxcbiAgICAgICAgY29sbGVjdGlvbjogbWF0Y2hbMl0gPT09ICcqJyxcbiAgICAgICAgb3B0aW9uYWw6IG1hdGNoWzNdID09PSAnPycsXG4gICAgICAgIGF0dHJOYW1lOiBtYXRjaFs0XSB8fCBzY29wZU5hbWVcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYmluZGluZ3M7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZURpcmVjdGl2ZUJpbmRpbmdzKGRpcmVjdGl2ZSwgZGlyZWN0aXZlTmFtZSkge1xuICAgIHZhciBiaW5kaW5ncyA9IHtcbiAgICAgIGlzb2xhdGVTY29wZTogbnVsbCxcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IG51bGxcbiAgICB9O1xuICAgIGlmIChpc09iamVjdChkaXJlY3RpdmUuc2NvcGUpKSB7XG4gICAgICBpZiAoZGlyZWN0aXZlLmJpbmRUb0NvbnRyb2xsZXIgPT09IHRydWUpIHtcbiAgICAgICAgYmluZGluZ3MuYmluZFRvQ29udHJvbGxlciA9IHBhcnNlSXNvbGF0ZUJpbmRpbmdzKGRpcmVjdGl2ZS5zY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZU5hbWUsIHRydWUpO1xuICAgICAgICBiaW5kaW5ncy5pc29sYXRlU2NvcGUgPSB7fTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJpbmRpbmdzLmlzb2xhdGVTY29wZSA9IHBhcnNlSXNvbGF0ZUJpbmRpbmdzKGRpcmVjdGl2ZS5zY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNPYmplY3QoZGlyZWN0aXZlLmJpbmRUb0NvbnRyb2xsZXIpKSB7XG4gICAgICBiaW5kaW5ncy5iaW5kVG9Db250cm9sbGVyID1cbiAgICAgICAgICBwYXJzZUlzb2xhdGVCaW5kaW5ncyhkaXJlY3RpdmUuYmluZFRvQ29udHJvbGxlciwgZGlyZWN0aXZlTmFtZSwgdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChpc09iamVjdChiaW5kaW5ncy5iaW5kVG9Db250cm9sbGVyKSkge1xuICAgICAgdmFyIGNvbnRyb2xsZXIgPSBkaXJlY3RpdmUuY29udHJvbGxlcjtcbiAgICAgIHZhciBjb250cm9sbGVyQXMgPSBkaXJlY3RpdmUuY29udHJvbGxlckFzO1xuICAgICAgaWYgKCFjb250cm9sbGVyKSB7XG4gICAgICAgIC8vIFRoZXJlIGlzIG5vIGNvbnRyb2xsZXIsIHRoZXJlIG1heSBvciBtYXkgbm90IGJlIGEgY29udHJvbGxlckFzIHByb3BlcnR5XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdub2N0cmwnLFxuICAgICAgICAgICAgICBcIkNhbm5vdCBiaW5kIHRvIGNvbnRyb2xsZXIgd2l0aG91dCBkaXJlY3RpdmUgJ3swfSdzIGNvbnRyb2xsZXIuXCIsXG4gICAgICAgICAgICAgIGRpcmVjdGl2ZU5hbWUpO1xuICAgICAgfSBlbHNlIGlmICghaWRlbnRpZmllckZvckNvbnRyb2xsZXIoY29udHJvbGxlciwgY29udHJvbGxlckFzKSkge1xuICAgICAgICAvLyBUaGVyZSBpcyBhIGNvbnRyb2xsZXIsIGJ1dCBubyBpZGVudGlmaWVyIG9yIGNvbnRyb2xsZXJBcyBwcm9wZXJ0eVxuICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignbm9pZGVudCcsXG4gICAgICAgICAgICAgIFwiQ2Fubm90IGJpbmQgdG8gY29udHJvbGxlciB3aXRob3V0IGlkZW50aWZpZXIgZm9yIGRpcmVjdGl2ZSAnezB9Jy5cIixcbiAgICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiaW5kaW5ncztcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2VydFZhbGlkRGlyZWN0aXZlTmFtZShuYW1lKSB7XG4gICAgdmFyIGxldHRlciA9IG5hbWUuY2hhckF0KDApO1xuICAgIGlmICghbGV0dGVyIHx8IGxldHRlciAhPT0gbG93ZXJjYXNlKGxldHRlcikpIHtcbiAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdiYWRkaXInLCBcIkRpcmVjdGl2ZSBuYW1lICd7MH0nIGlzIGludmFsaWQuIFRoZSBmaXJzdCBjaGFyYWN0ZXIgbXVzdCBiZSBhIGxvd2VyY2FzZSBsZXR0ZXJcIiwgbmFtZSk7XG4gICAgfVxuICAgIGlmIChuYW1lICE9PSBuYW1lLnRyaW0oKSkge1xuICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ2JhZGRpcicsXG4gICAgICAgICAgICBcIkRpcmVjdGl2ZSBuYW1lICd7MH0nIGlzIGludmFsaWQuIFRoZSBuYW1lIHNob3VsZCBub3QgY29udGFpbiBsZWFkaW5nIG9yIHRyYWlsaW5nIHdoaXRlc3BhY2VzXCIsXG4gICAgICAgICAgICBuYW1lKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZVxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmVnaXN0ZXIgYSBuZXcgZGlyZWN0aXZlIHdpdGggdGhlIGNvbXBpbGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgTmFtZSBvZiB0aGUgZGlyZWN0aXZlIGluIGNhbWVsLWNhc2UgKGkuZS4gPGNvZGU+bmdCaW5kPC9jb2RlPiB3aGljaFxuICAgKiAgICB3aWxsIG1hdGNoIGFzIDxjb2RlPm5nLWJpbmQ8L2NvZGU+KSwgb3IgYW4gb2JqZWN0IG1hcCBvZiBkaXJlY3RpdmVzIHdoZXJlIHRoZSBrZXlzIGFyZSB0aGVcbiAgICogICAgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBmYWN0b3JpZXMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXl9IGRpcmVjdGl2ZUZhY3RvcnkgQW4gaW5qZWN0YWJsZSBkaXJlY3RpdmUgZmFjdG9yeSBmdW5jdGlvbi4gU2VlXG4gICAqICAgIHtAbGluayBndWlkZS9kaXJlY3RpdmV9IGZvciBtb3JlIGluZm8uXG4gICAqIEByZXR1cm5zIHtuZy4kY29tcGlsZVByb3ZpZGVyfSBTZWxmIGZvciBjaGFpbmluZy5cbiAgICovXG4gICB0aGlzLmRpcmVjdGl2ZSA9IGZ1bmN0aW9uIHJlZ2lzdGVyRGlyZWN0aXZlKG5hbWUsIGRpcmVjdGl2ZUZhY3RvcnkpIHtcbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnZGlyZWN0aXZlJyk7XG4gICAgaWYgKGlzU3RyaW5nKG5hbWUpKSB7XG4gICAgICBhc3NlcnRWYWxpZERpcmVjdGl2ZU5hbWUobmFtZSk7XG4gICAgICBhc3NlcnRBcmcoZGlyZWN0aXZlRmFjdG9yeSwgJ2RpcmVjdGl2ZUZhY3RvcnknKTtcbiAgICAgIGlmICghaGFzRGlyZWN0aXZlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBoYXNEaXJlY3RpdmVzW25hbWVdID0gW107XG4gICAgICAgICRwcm92aWRlLmZhY3RvcnkobmFtZSArIFN1ZmZpeCwgWyckaW5qZWN0b3InLCAnJGV4Y2VwdGlvbkhhbmRsZXInLFxuICAgICAgICAgIGZ1bmN0aW9uKCRpbmplY3RvciwgJGV4Y2VwdGlvbkhhbmRsZXIpIHtcbiAgICAgICAgICAgIHZhciBkaXJlY3RpdmVzID0gW107XG4gICAgICAgICAgICBmb3JFYWNoKGhhc0RpcmVjdGl2ZXNbbmFtZV0sIGZ1bmN0aW9uKGRpcmVjdGl2ZUZhY3RvcnksIGluZGV4KSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZSA9ICRpbmplY3Rvci5pbnZva2UoZGlyZWN0aXZlRmFjdG9yeSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oZGlyZWN0aXZlKSkge1xuICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlID0geyBjb21waWxlOiB2YWx1ZUZuKGRpcmVjdGl2ZSkgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFkaXJlY3RpdmUuY29tcGlsZSAmJiBkaXJlY3RpdmUubGluaykge1xuICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLmNvbXBpbGUgPSB2YWx1ZUZuKGRpcmVjdGl2ZS5saW5rKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLnByaW9yaXR5ID0gZGlyZWN0aXZlLnByaW9yaXR5IHx8IDA7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLmluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLm5hbWUgPSBkaXJlY3RpdmUubmFtZSB8fCBuYW1lO1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5yZXF1aXJlID0gZGlyZWN0aXZlLnJlcXVpcmUgfHwgKGRpcmVjdGl2ZS5jb250cm9sbGVyICYmIGRpcmVjdGl2ZS5uYW1lKTtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUucmVzdHJpY3QgPSBkaXJlY3RpdmUucmVzdHJpY3QgfHwgJ0VBJztcbiAgICAgICAgICAgICAgICB2YXIgYmluZGluZ3MgPSBkaXJlY3RpdmUuJCRiaW5kaW5ncyA9XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlRGlyZWN0aXZlQmluZGluZ3MoZGlyZWN0aXZlLCBkaXJlY3RpdmUubmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGJpbmRpbmdzLmlzb2xhdGVTY29wZSkpIHtcbiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS4kJGlzb2xhdGVCaW5kaW5ncyA9IGJpbmRpbmdzLmlzb2xhdGVTY29wZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLiQkbW9kdWxlTmFtZSA9IGRpcmVjdGl2ZUZhY3RvcnkuJCRtb2R1bGVOYW1lO1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXMucHVzaChkaXJlY3RpdmUpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZXM7XG4gICAgICAgICAgfV0pO1xuICAgICAgfVxuICAgICAgaGFzRGlyZWN0aXZlc1tuYW1lXS5wdXNoKGRpcmVjdGl2ZUZhY3RvcnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JFYWNoKG5hbWUsIHJldmVyc2VQYXJhbXMocmVnaXN0ZXJEaXJlY3RpdmUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI2FIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlXG4gICAqIHVybHMgZHVyaW5nIGFbaHJlZl0gc2FuaXRpemF0aW9uLlxuICAgKlxuICAgKiBUaGUgc2FuaXRpemF0aW9uIGlzIGEgc2VjdXJpdHkgbWVhc3VyZSBhaW1lZCBhdCBwcmV2ZW50aW5nIFhTUyBhdHRhY2tzIHZpYSBodG1sIGxpbmtzLlxuICAgKlxuICAgKiBBbnkgdXJsIGFib3V0IHRvIGJlIGFzc2lnbmVkIHRvIGFbaHJlZl0gdmlhIGRhdGEtYmluZGluZyBpcyBmaXJzdCBub3JtYWxpemVkIGFuZCB0dXJuZWQgaW50b1xuICAgKiBhbiBhYnNvbHV0ZSB1cmwuIEFmdGVyd2FyZHMsIHRoZSB1cmwgaXMgbWF0Y2hlZCBhZ2FpbnN0IHRoZSBgYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3RgXG4gICAqIHJlZ3VsYXIgZXhwcmVzc2lvbi4gSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIG9yaWdpbmFsIHVybCBpcyB3cml0dGVuIGludG8gdGhlIGRvbS4gT3RoZXJ3aXNlLFxuICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7UmVnRXhwPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC5cbiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvclxuICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuXG4gICAqL1xuICB0aGlzLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gZnVuY3Rpb24ocmVnZXhwKSB7XG4gICAgaWYgKGlzRGVmaW5lZChyZWdleHApKSB7XG4gICAgICAkJHNhbml0aXplVXJpUHJvdmlkZXIuYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QocmVnZXhwKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0KCk7XG4gICAgfVxuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3RcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHJpZXZlcyBvciBvdmVycmlkZXMgdGhlIGRlZmF1bHQgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgdXNlZCBmb3Igd2hpdGVsaXN0aW5nIG9mIHNhZmVcbiAgICogdXJscyBkdXJpbmcgaW1nW3NyY10gc2FuaXRpemF0aW9uLlxuICAgKlxuICAgKiBUaGUgc2FuaXRpemF0aW9uIGlzIGEgc2VjdXJpdHkgbWVhc3VyZSBhaW1lZCBhdCBwcmV2ZW50IFhTUyBhdHRhY2tzIHZpYSBodG1sIGxpbmtzLlxuICAgKlxuICAgKiBBbnkgdXJsIGFib3V0IHRvIGJlIGFzc2lnbmVkIHRvIGltZ1tzcmNdIHZpYSBkYXRhLWJpbmRpbmcgaXMgZmlyc3Qgbm9ybWFsaXplZCBhbmQgdHVybmVkIGludG9cbiAgICogYW4gYWJzb2x1dGUgdXJsLiBBZnRlcndhcmRzLCB0aGUgdXJsIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgYGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdGBcbiAgICogcmVndWxhciBleHByZXNzaW9uLiBJZiBhIG1hdGNoIGlzIGZvdW5kLCB0aGUgb3JpZ2luYWwgdXJsIGlzIHdyaXR0ZW4gaW50byB0aGUgZG9tLiBPdGhlcndpc2UsXG4gICAqIHRoZSBhYnNvbHV0ZSB1cmwgaXMgcHJlZml4ZWQgd2l0aCBgJ3Vuc2FmZTonYCBzdHJpbmcgYW5kIG9ubHkgdGhlbiBpcyBpdCB3cml0dGVuIGludG8gdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWdFeHA9fSByZWdleHAgTmV3IHJlZ2V4cCB0byB3aGl0ZWxpc3QgdXJscyB3aXRoLlxuICAgKiBAcmV0dXJucyB7UmVnRXhwfG5nLiRjb21waWxlUHJvdmlkZXJ9IEN1cnJlbnQgUmVnRXhwIGlmIGNhbGxlZCB3aXRob3V0IHZhbHVlIG9yIHNlbGYgZm9yXG4gICAqICAgIGNoYWluaW5nIG90aGVyd2lzZS5cbiAgICovXG4gIHRoaXMuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gZnVuY3Rpb24ocmVnZXhwKSB7XG4gICAgaWYgKGlzRGVmaW5lZChyZWdleHApKSB7XG4gICAgICAkJHNhbml0aXplVXJpUHJvdmlkZXIuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0KHJlZ2V4cCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICQkc2FuaXRpemVVcmlQcm92aWRlci5pbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgICRjb21waWxlUHJvdmlkZXIjZGVidWdJbmZvRW5hYmxlZFxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBlbmFibGVkIHVwZGF0ZSB0aGUgZGVidWdJbmZvRW5hYmxlZCBzdGF0ZSBpZiBwcm92aWRlZCwgb3RoZXJ3aXNlIGp1c3QgcmV0dXJuIHRoZVxuICAgKiBjdXJyZW50IGRlYnVnSW5mb0VuYWJsZWQgc3RhdGVcbiAgICogQHJldHVybnMgeyp9IGN1cnJlbnQgdmFsdWUgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXJcbiAgICpcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENhbGwgdGhpcyBtZXRob2QgdG8gZW5hYmxlL2Rpc2FibGUgdmFyaW91cyBkZWJ1ZyBydW50aW1lIGluZm9ybWF0aW9uIGluIHRoZSBjb21waWxlciBzdWNoIGFzIGFkZGluZ1xuICAgKiBiaW5kaW5nIGluZm9ybWF0aW9uIGFuZCBhIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBzY29wZSBvbiB0byBET00gZWxlbWVudHMuXG4gICAqIElmIGVuYWJsZWQsIHRoZSBjb21waWxlciB3aWxsIGFkZCB0aGUgZm9sbG93aW5nIHRvIERPTSBlbGVtZW50cyB0aGF0IGhhdmUgYmVlbiBib3VuZCB0byB0aGUgc2NvcGVcbiAgICogKiBgbmctYmluZGluZ2AgQ1NTIGNsYXNzXG4gICAqICogYCRiaW5kaW5nYCBkYXRhIHByb3BlcnR5IGNvbnRhaW5pbmcgYW4gYXJyYXkgb2YgdGhlIGJpbmRpbmcgZXhwcmVzc2lvbnNcbiAgICpcbiAgICogWW91IG1heSB3YW50IHRvIGRpc2FibGUgdGhpcyBpbiBwcm9kdWN0aW9uIGZvciBhIHNpZ25pZmljYW50IHBlcmZvcm1hbmNlIGJvb3N0LiBTZWVcbiAgICoge0BsaW5rIGd1aWRlL3Byb2R1Y3Rpb24jZGlzYWJsaW5nLWRlYnVnLWRhdGEgRGlzYWJsaW5nIERlYnVnIERhdGF9IGZvciBtb3JlLlxuICAgKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgKi9cbiAgdmFyIGRlYnVnSW5mb0VuYWJsZWQgPSB0cnVlO1xuICB0aGlzLmRlYnVnSW5mb0VuYWJsZWQgPSBmdW5jdGlvbihlbmFibGVkKSB7XG4gICAgaWYgKGlzRGVmaW5lZChlbmFibGVkKSkge1xuICAgICAgZGVidWdJbmZvRW5hYmxlZCA9IGVuYWJsZWQ7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGRlYnVnSW5mb0VuYWJsZWQ7XG4gIH07XG5cbiAgdGhpcy4kZ2V0ID0gW1xuICAgICAgICAgICAgJyRpbmplY3RvcicsICckaW50ZXJwb2xhdGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJHRlbXBsYXRlUmVxdWVzdCcsICckcGFyc2UnLFxuICAgICAgICAgICAgJyRjb250cm9sbGVyJywgJyRyb290U2NvcGUnLCAnJGRvY3VtZW50JywgJyRzY2UnLCAnJGFuaW1hdGUnLCAnJCRzYW5pdGl6ZVVyaScsXG4gICAgZnVuY3Rpb24oJGluamVjdG9yLCAgICRpbnRlcnBvbGF0ZSwgICAkZXhjZXB0aW9uSGFuZGxlciwgICAkdGVtcGxhdGVSZXF1ZXN0LCAgICRwYXJzZSxcbiAgICAgICAgICAgICAkY29udHJvbGxlciwgICAkcm9vdFNjb3BlLCAgICRkb2N1bWVudCwgICAkc2NlLCAgICRhbmltYXRlLCAgICQkc2FuaXRpemVVcmkpIHtcblxuICAgIHZhciBBdHRyaWJ1dGVzID0gZnVuY3Rpb24oZWxlbWVudCwgYXR0cmlidXRlc1RvQ29weSkge1xuICAgICAgaWYgKGF0dHJpYnV0ZXNUb0NvcHkpIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzVG9Db3B5KTtcbiAgICAgICAgdmFyIGksIGwsIGtleTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIHRoaXNba2V5XSA9IGF0dHJpYnV0ZXNUb0NvcHlba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kYXR0ciA9IHt9O1xuICAgICAgfVxuXG4gICAgICB0aGlzLiQkZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgfTtcblxuICAgIEF0dHJpYnV0ZXMucHJvdG90eXBlID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkbm9ybWFsaXplXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQ29udmVydHMgYW4gYXR0cmlidXRlIG5hbWUgKGUuZy4gZGFzaC9jb2xvbi91bmRlcnNjb3JlLWRlbGltaXRlZCBzdHJpbmcsIG9wdGlvbmFsbHkgcHJlZml4ZWQgd2l0aCBgeC1gIG9yXG4gICAgICAgKiBgZGF0YS1gKSB0byBpdHMgbm9ybWFsaXplZCwgY2FtZWxDYXNlIGZvcm0uXG4gICAgICAgKlxuICAgICAgICogQWxzbyB0aGVyZSBpcyBzcGVjaWFsIGNhc2UgZm9yIE1veiBwcmVmaXggc3RhcnRpbmcgd2l0aCB1cHBlciBjYXNlIGxldHRlci5cbiAgICAgICAqXG4gICAgICAgKiBGb3IgZnVydGhlciBpbmZvcm1hdGlvbiBjaGVjayBvdXQgdGhlIGd1aWRlIG9uIHtAbGluayBndWlkZS9kaXJlY3RpdmUjbWF0Y2hpbmctZGlyZWN0aXZlcyBNYXRjaGluZyBEaXJlY3RpdmVzfVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgdG8gbm9ybWFsaXplXG4gICAgICAgKi9cbiAgICAgICRub3JtYWxpemU6IGRpcmVjdGl2ZU5vcm1hbGl6ZSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRhZGRDbGFzc1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEFkZHMgdGhlIENTUyBjbGFzcyB2YWx1ZSBzcGVjaWZpZWQgYnkgdGhlIGNsYXNzVmFsIHBhcmFtZXRlciB0byB0aGUgZWxlbWVudC4gSWYgYW5pbWF0aW9uc1xuICAgICAgICogYXJlIGVuYWJsZWQgdGhlbiBhbiBhbmltYXRpb24gd2lsbCBiZSB0cmlnZ2VyZWQgZm9yIHRoZSBjbGFzcyBhZGRpdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NWYWwgVGhlIGNsYXNzTmFtZSB2YWx1ZSB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVsZW1lbnRcbiAgICAgICAqL1xuICAgICAgJGFkZENsYXNzOiBmdW5jdGlvbihjbGFzc1ZhbCkge1xuICAgICAgICBpZiAoY2xhc3NWYWwgJiYgY2xhc3NWYWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICRhbmltYXRlLmFkZENsYXNzKHRoaXMuJCRlbGVtZW50LCBjbGFzc1ZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJHJlbW92ZUNsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmVtb3ZlcyB0aGUgQ1NTIGNsYXNzIHZhbHVlIHNwZWNpZmllZCBieSB0aGUgY2xhc3NWYWwgcGFyYW1ldGVyIGZyb20gdGhlIGVsZW1lbnQuIElmXG4gICAgICAgKiBhbmltYXRpb25zIGFyZSBlbmFibGVkIHRoZW4gYW4gYW5pbWF0aW9uIHdpbGwgYmUgdHJpZ2dlcmVkIGZvciB0aGUgY2xhc3MgcmVtb3ZhbC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NWYWwgVGhlIGNsYXNzTmFtZSB2YWx1ZSB0aGF0IHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50XG4gICAgICAgKi9cbiAgICAgICRyZW1vdmVDbGFzczogZnVuY3Rpb24oY2xhc3NWYWwpIHtcbiAgICAgICAgaWYgKGNsYXNzVmFsICYmIGNsYXNzVmFsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyh0aGlzLiQkZWxlbWVudCwgY2xhc3NWYWwpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyR1cGRhdGVDbGFzc1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEFkZHMgYW5kIHJlbW92ZXMgdGhlIGFwcHJvcHJpYXRlIENTUyBjbGFzcyB2YWx1ZXMgdG8gdGhlIGVsZW1lbnQgYmFzZWQgb24gdGhlIGRpZmZlcmVuY2VcbiAgICAgICAqIGJldHdlZW4gdGhlIG5ldyBhbmQgb2xkIENTUyBjbGFzcyB2YWx1ZXMgKHNwZWNpZmllZCBhcyBuZXdDbGFzc2VzIGFuZCBvbGRDbGFzc2VzKS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3Q2xhc3NlcyBUaGUgY3VycmVudCBDU1MgY2xhc3NOYW1lIHZhbHVlXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gb2xkQ2xhc3NlcyBUaGUgZm9ybWVyIENTUyBjbGFzc05hbWUgdmFsdWVcbiAgICAgICAqL1xuICAgICAgJHVwZGF0ZUNsYXNzOiBmdW5jdGlvbihuZXdDbGFzc2VzLCBvbGRDbGFzc2VzKSB7XG4gICAgICAgIHZhciB0b0FkZCA9IHRva2VuRGlmZmVyZW5jZShuZXdDbGFzc2VzLCBvbGRDbGFzc2VzKTtcbiAgICAgICAgaWYgKHRvQWRkICYmIHRvQWRkLmxlbmd0aCkge1xuICAgICAgICAgICRhbmltYXRlLmFkZENsYXNzKHRoaXMuJCRlbGVtZW50LCB0b0FkZCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdG9SZW1vdmUgPSB0b2tlbkRpZmZlcmVuY2Uob2xkQ2xhc3NlcywgbmV3Q2xhc3Nlcyk7XG4gICAgICAgIGlmICh0b1JlbW92ZSAmJiB0b1JlbW92ZS5sZW5ndGgpIHtcbiAgICAgICAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyh0aGlzLiQkZWxlbWVudCwgdG9SZW1vdmUpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFNldCBhIG5vcm1hbGl6ZWQgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50IGluIGEgd2F5IHN1Y2ggdGhhdCBhbGwgZGlyZWN0aXZlc1xuICAgICAgICogY2FuIHNoYXJlIHRoZSBhdHRyaWJ1dGUuIFRoaXMgZnVuY3Rpb24gcHJvcGVybHkgaGFuZGxlcyBib29sZWFuIGF0dHJpYnV0ZXMuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IE5vcm1hbGl6ZWQga2V5LiAoaWUgbmdBdHRyaWJ1dGUpXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xib29sZWFufSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LiBJZiBgbnVsbGAgYXR0cmlidXRlIHdpbGwgYmUgZGVsZXRlZC5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHdyaXRlQXR0ciBJZiBmYWxzZSwgZG9lcyBub3Qgd3JpdGUgdGhlIHZhbHVlIHRvIERPTSBlbGVtZW50IGF0dHJpYnV0ZS5cbiAgICAgICAqICAgICBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmc9fSBhdHRyTmFtZSBPcHRpb25hbCBub25lIG5vcm1hbGl6ZWQgbmFtZS4gRGVmYXVsdHMgdG8ga2V5LlxuICAgICAgICovXG4gICAgICAkc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlLCB3cml0ZUF0dHIsIGF0dHJOYW1lKSB7XG4gICAgICAgIC8vIFRPRE86IGRlY2lkZSB3aGV0aGVyIG9yIG5vdCB0byB0aHJvdyBhbiBlcnJvciBpZiBcImNsYXNzXCJcbiAgICAgICAgLy9pcyBzZXQgdGhyb3VnaCB0aGlzIGZ1bmN0aW9uIHNpbmNlIGl0IG1heSBjYXVzZSAkdXBkYXRlQ2xhc3MgdG9cbiAgICAgICAgLy9iZWNvbWUgdW5zdGFibGUuXG5cbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLiQkZWxlbWVudFswXSxcbiAgICAgICAgICAgIGJvb2xlYW5LZXkgPSBnZXRCb29sZWFuQXR0ck5hbWUobm9kZSwga2V5KSxcbiAgICAgICAgICAgIGFsaWFzZWRLZXkgPSBnZXRBbGlhc2VkQXR0ck5hbWUoa2V5KSxcbiAgICAgICAgICAgIG9ic2VydmVyID0ga2V5LFxuICAgICAgICAgICAgbm9kZU5hbWU7XG5cbiAgICAgICAgaWYgKGJvb2xlYW5LZXkpIHtcbiAgICAgICAgICB0aGlzLiQkZWxlbWVudC5wcm9wKGtleSwgdmFsdWUpO1xuICAgICAgICAgIGF0dHJOYW1lID0gYm9vbGVhbktleTtcbiAgICAgICAgfSBlbHNlIGlmIChhbGlhc2VkS2V5KSB7XG4gICAgICAgICAgdGhpc1thbGlhc2VkS2V5XSA9IHZhbHVlO1xuICAgICAgICAgIG9ic2VydmVyID0gYWxpYXNlZEtleTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXNba2V5XSA9IHZhbHVlO1xuXG4gICAgICAgIC8vIHRyYW5zbGF0ZSBub3JtYWxpemVkIGtleSB0byBhY3R1YWwga2V5XG4gICAgICAgIGlmIChhdHRyTmFtZSkge1xuICAgICAgICAgIHRoaXMuJGF0dHJba2V5XSA9IGF0dHJOYW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGF0dHJOYW1lID0gdGhpcy4kYXR0cltrZXldO1xuICAgICAgICAgIGlmICghYXR0ck5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuJGF0dHJba2V5XSA9IGF0dHJOYW1lID0gc25ha2VfY2FzZShrZXksICctJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbm9kZU5hbWUgPSBub2RlTmFtZV8odGhpcy4kJGVsZW1lbnQpO1xuXG4gICAgICAgIGlmICgobm9kZU5hbWUgPT09ICdhJyAmJiBrZXkgPT09ICdocmVmJykgfHxcbiAgICAgICAgICAgIChub2RlTmFtZSA9PT0gJ2ltZycgJiYga2V5ID09PSAnc3JjJykpIHtcbiAgICAgICAgICAvLyBzYW5pdGl6ZSBhW2hyZWZdIGFuZCBpbWdbc3JjXSB2YWx1ZXNcbiAgICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZSA9ICQkc2FuaXRpemVVcmkodmFsdWUsIGtleSA9PT0gJ3NyYycpO1xuICAgICAgICB9IGVsc2UgaWYgKG5vZGVOYW1lID09PSAnaW1nJyAmJiBrZXkgPT09ICdzcmNzZXQnKSB7XG4gICAgICAgICAgLy8gc2FuaXRpemUgaW1nW3NyY3NldF0gdmFsdWVzXG4gICAgICAgICAgdmFyIHJlc3VsdCA9IFwiXCI7XG5cbiAgICAgICAgICAvLyBmaXJzdCBjaGVjayBpZiB0aGVyZSBhcmUgc3BhY2VzIGJlY2F1c2UgaXQncyBub3QgdGhlIHNhbWUgcGF0dGVyblxuICAgICAgICAgIHZhciB0cmltbWVkU3Jjc2V0ID0gdHJpbSh2YWx1ZSk7XG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgKCAgIDk5OXggICAsfCAgIDk5OXcgICAsfCAgICx8LCAgIClcbiAgICAgICAgICB2YXIgc3JjUGF0dGVybiA9IC8oXFxzK1xcZCt4XFxzKix8XFxzK1xcZCt3XFxzKix8XFxzKyx8LFxccyspLztcbiAgICAgICAgICB2YXIgcGF0dGVybiA9IC9cXHMvLnRlc3QodHJpbW1lZFNyY3NldCkgPyBzcmNQYXR0ZXJuIDogLygsKS87XG5cbiAgICAgICAgICAvLyBzcGxpdCBzcmNzZXQgaW50byB0dXBsZSBvZiB1cmkgYW5kIGRlc2NyaXB0b3IgZXhjZXB0IGZvciB0aGUgbGFzdCBpdGVtXG4gICAgICAgICAgdmFyIHJhd1VyaXMgPSB0cmltbWVkU3Jjc2V0LnNwbGl0KHBhdHRlcm4pO1xuXG4gICAgICAgICAgLy8gZm9yIGVhY2ggdHVwbGVzXG4gICAgICAgICAgdmFyIG5iclVyaXNXaXRoMnBhcnRzID0gTWF0aC5mbG9vcihyYXdVcmlzLmxlbmd0aCAvIDIpO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmJyVXJpc1dpdGgycGFydHM7IGkrKykge1xuICAgICAgICAgICAgdmFyIGlubmVySWR4ID0gaSAqIDI7XG4gICAgICAgICAgICAvLyBzYW5pdGl6ZSB0aGUgdXJpXG4gICAgICAgICAgICByZXN1bHQgKz0gJCRzYW5pdGl6ZVVyaSh0cmltKHJhd1VyaXNbaW5uZXJJZHhdKSwgdHJ1ZSk7XG4gICAgICAgICAgICAvLyBhZGQgdGhlIGRlc2NyaXB0b3JcbiAgICAgICAgICAgIHJlc3VsdCArPSAoXCIgXCIgKyB0cmltKHJhd1VyaXNbaW5uZXJJZHggKyAxXSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHNwbGl0IHRoZSBsYXN0IGl0ZW0gaW50byB1cmkgYW5kIGRlc2NyaXB0b3JcbiAgICAgICAgICB2YXIgbGFzdFR1cGxlID0gdHJpbShyYXdVcmlzW2kgKiAyXSkuc3BsaXQoL1xccy8pO1xuXG4gICAgICAgICAgLy8gc2FuaXRpemUgdGhlIGxhc3QgdXJpXG4gICAgICAgICAgcmVzdWx0ICs9ICQkc2FuaXRpemVVcmkodHJpbShsYXN0VHVwbGVbMF0pLCB0cnVlKTtcblxuICAgICAgICAgIC8vIGFuZCBhZGQgdGhlIGxhc3QgZGVzY3JpcHRvciBpZiBhbnlcbiAgICAgICAgICBpZiAobGFzdFR1cGxlLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgcmVzdWx0ICs9IChcIiBcIiArIHRyaW0obGFzdFR1cGxlWzFdKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXNba2V5XSA9IHZhbHVlID0gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHdyaXRlQXR0ciAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLiQkZWxlbWVudC5yZW1vdmVBdHRyKGF0dHJOYW1lKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4kJGVsZW1lbnQuYXR0cihhdHRyTmFtZSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZpcmUgb2JzZXJ2ZXJzXG4gICAgICAgIHZhciAkJG9ic2VydmVycyA9IHRoaXMuJCRvYnNlcnZlcnM7XG4gICAgICAgICQkb2JzZXJ2ZXJzICYmIGZvckVhY2goJCRvYnNlcnZlcnNbb2JzZXJ2ZXJdLCBmdW5jdGlvbihmbikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmbih2YWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkb2JzZXJ2ZVxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIE9ic2VydmVzIGFuIGludGVycG9sYXRlZCBhdHRyaWJ1dGUuXG4gICAgICAgKlxuICAgICAgICogVGhlIG9ic2VydmVyIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCBvbmNlIGR1cmluZyB0aGUgbmV4dCBgJGRpZ2VzdGAgZm9sbG93aW5nXG4gICAgICAgKiBjb21waWxhdGlvbi4gVGhlIG9ic2VydmVyIGlzIHRoZW4gaW52b2tlZCB3aGVuZXZlciB0aGUgaW50ZXJwb2xhdGVkIHZhbHVlXG4gICAgICAgKiBjaGFuZ2VzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgTm9ybWFsaXplZCBrZXkuIChpZSBuZ0F0dHJpYnV0ZSkgLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihpbnRlcnBvbGF0ZWRWYWx1ZSl9IGZuIEZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXJcbiAgICAgICAgICAgICAgICB0aGUgaW50ZXJwb2xhdGVkIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUgY2hhbmdlcy5cbiAgICAgICAqICAgICAgICBTZWUgdGhlIHtAbGluayBndWlkZS9kaXJlY3RpdmUjdGV4dC1hbmQtYXR0cmlidXRlLWJpbmRpbmdzIERpcmVjdGl2ZXN9IGd1aWRlIGZvciBtb3JlIGluZm8uXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIG9ic2VydmVyLlxuICAgICAgICovXG4gICAgICAkb2JzZXJ2ZTogZnVuY3Rpb24oa2V5LCBmbikge1xuICAgICAgICB2YXIgYXR0cnMgPSB0aGlzLFxuICAgICAgICAgICAgJCRvYnNlcnZlcnMgPSAoYXR0cnMuJCRvYnNlcnZlcnMgfHwgKGF0dHJzLiQkb2JzZXJ2ZXJzID0gY3JlYXRlTWFwKCkpKSxcbiAgICAgICAgICAgIGxpc3RlbmVycyA9ICgkJG9ic2VydmVyc1trZXldIHx8ICgkJG9ic2VydmVyc1trZXldID0gW10pKTtcblxuICAgICAgICBsaXN0ZW5lcnMucHVzaChmbik7XG4gICAgICAgICRyb290U2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoIWxpc3RlbmVycy4kJGludGVyICYmIGF0dHJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIWlzVW5kZWZpbmVkKGF0dHJzW2tleV0pKSB7XG4gICAgICAgICAgICAvLyBubyBvbmUgcmVnaXN0ZXJlZCBhdHRyaWJ1dGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbiwgc28gbGV0cyBjYWxsIGl0IG1hbnVhbGx5XG4gICAgICAgICAgICBmbihhdHRyc1trZXldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBhcnJheVJlbW92ZShsaXN0ZW5lcnMsIGZuKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG5cbiAgICBmdW5jdGlvbiBzYWZlQWRkQ2xhc3MoJGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgJGVsZW1lbnQuYWRkQ2xhc3MoY2xhc3NOYW1lKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaWdub3JlLCBzaW5jZSBpdCBtZWFucyB0aGF0IHdlIGFyZSB0cnlpbmcgdG8gc2V0IGNsYXNzIG9uXG4gICAgICAgIC8vIFNWRyBlbGVtZW50LCB3aGVyZSBjbGFzcyBuYW1lIGlzIHJlYWQtb25seS5cbiAgICAgIH1cbiAgICB9XG5cblxuICAgIHZhciBzdGFydFN5bWJvbCA9ICRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCgpLFxuICAgICAgICBlbmRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sKCksXG4gICAgICAgIGRlbm9ybWFsaXplVGVtcGxhdGUgPSAoc3RhcnRTeW1ib2wgPT0gJ3t7JyB8fCBlbmRTeW1ib2wgID09ICd9fScpXG4gICAgICAgICAgICA/IGlkZW50aXR5XG4gICAgICAgICAgICA6IGZ1bmN0aW9uIGRlbm9ybWFsaXplVGVtcGxhdGUodGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlLnJlcGxhY2UoL1xce1xcey9nLCBzdGFydFN5bWJvbCkucmVwbGFjZSgvfX0vZywgZW5kU3ltYm9sKTtcbiAgICAgICAgfSxcbiAgICAgICAgTkdfQVRUUl9CSU5ESU5HID0gL15uZ0F0dHJbQS1aXS87XG4gICAgdmFyIE1VTFRJX0VMRU1FTlRfRElSX1JFID0gL14oLispU3RhcnQkLztcblxuICAgIGNvbXBpbGUuJCRhZGRCaW5kaW5nSW5mbyA9IGRlYnVnSW5mb0VuYWJsZWQgPyBmdW5jdGlvbiAkJGFkZEJpbmRpbmdJbmZvKCRlbGVtZW50LCBiaW5kaW5nKSB7XG4gICAgICB2YXIgYmluZGluZ3MgPSAkZWxlbWVudC5kYXRhKCckYmluZGluZycpIHx8IFtdO1xuXG4gICAgICBpZiAoaXNBcnJheShiaW5kaW5nKSkge1xuICAgICAgICBiaW5kaW5ncyA9IGJpbmRpbmdzLmNvbmNhdChiaW5kaW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJpbmRpbmdzLnB1c2goYmluZGluZyk7XG4gICAgICB9XG5cbiAgICAgICRlbGVtZW50LmRhdGEoJyRiaW5kaW5nJywgYmluZGluZ3MpO1xuICAgIH0gOiBub29wO1xuXG4gICAgY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyA9IGRlYnVnSW5mb0VuYWJsZWQgPyBmdW5jdGlvbiAkJGFkZEJpbmRpbmdDbGFzcygkZWxlbWVudCkge1xuICAgICAgc2FmZUFkZENsYXNzKCRlbGVtZW50LCAnbmctYmluZGluZycpO1xuICAgIH0gOiBub29wO1xuXG4gICAgY29tcGlsZS4kJGFkZFNjb3BlSW5mbyA9IGRlYnVnSW5mb0VuYWJsZWQgPyBmdW5jdGlvbiAkJGFkZFNjb3BlSW5mbygkZWxlbWVudCwgc2NvcGUsIGlzb2xhdGVkLCBub1RlbXBsYXRlKSB7XG4gICAgICB2YXIgZGF0YU5hbWUgPSBpc29sYXRlZCA/IChub1RlbXBsYXRlID8gJyRpc29sYXRlU2NvcGVOb1RlbXBsYXRlJyA6ICckaXNvbGF0ZVNjb3BlJykgOiAnJHNjb3BlJztcbiAgICAgICRlbGVtZW50LmRhdGEoZGF0YU5hbWUsIHNjb3BlKTtcbiAgICB9IDogbm9vcDtcblxuICAgIGNvbXBpbGUuJCRhZGRTY29wZUNsYXNzID0gZGVidWdJbmZvRW5hYmxlZCA/IGZ1bmN0aW9uICQkYWRkU2NvcGVDbGFzcygkZWxlbWVudCwgaXNvbGF0ZWQpIHtcbiAgICAgIHNhZmVBZGRDbGFzcygkZWxlbWVudCwgaXNvbGF0ZWQgPyAnbmctaXNvbGF0ZS1zY29wZScgOiAnbmctc2NvcGUnKTtcbiAgICB9IDogbm9vcDtcblxuICAgIHJldHVybiBjb21waWxlO1xuXG4gICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgZnVuY3Rpb24gY29tcGlsZSgkY29tcGlsZU5vZGVzLCB0cmFuc2NsdWRlRm4sIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0KSB7XG4gICAgICBpZiAoISgkY29tcGlsZU5vZGVzIGluc3RhbmNlb2YganFMaXRlKSkge1xuICAgICAgICAvLyBqcXVlcnkgYWx3YXlzIHJld3JhcHMsIHdoZXJlYXMgd2UgbmVlZCB0byBwcmVzZXJ2ZSB0aGUgb3JpZ2luYWwgc2VsZWN0b3Igc28gdGhhdCB3ZSBjYW5cbiAgICAgICAgLy8gbW9kaWZ5IGl0LlxuICAgICAgICAkY29tcGlsZU5vZGVzID0ganFMaXRlKCRjb21waWxlTm9kZXMpO1xuICAgICAgfVxuICAgICAgLy8gV2UgY2FuIG5vdCBjb21waWxlIHRvcCBsZXZlbCB0ZXh0IGVsZW1lbnRzIHNpbmNlIHRleHQgbm9kZXMgY2FuIGJlIG1lcmdlZCBhbmQgd2Ugd2lsbFxuICAgICAgLy8gbm90IGJlIGFibGUgdG8gYXR0YWNoIHNjb3BlIGRhdGEgdG8gdGhlbSwgc28gd2Ugd2lsbCB3cmFwIHRoZW0gaW4gPHNwYW4+XG4gICAgICBmb3JFYWNoKCRjb21waWxlTm9kZXMsIGZ1bmN0aW9uKG5vZGUsIGluZGV4KSB7XG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IE5PREVfVFlQRV9URVhUICYmIG5vZGUubm9kZVZhbHVlLm1hdGNoKC9cXFMrLykgLyogbm9uLWVtcHR5ICovICkge1xuICAgICAgICAgICRjb21waWxlTm9kZXNbaW5kZXhdID0ganFMaXRlKG5vZGUpLndyYXAoJzxzcGFuPjwvc3Bhbj4nKS5wYXJlbnQoKVswXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB2YXIgY29tcG9zaXRlTGlua0ZuID1cbiAgICAgICAgICAgICAgY29tcGlsZU5vZGVzKCRjb21waWxlTm9kZXMsIHRyYW5zY2x1ZGVGbiwgJGNvbXBpbGVOb2RlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpO1xuICAgICAgY29tcGlsZS4kJGFkZFNjb3BlQ2xhc3MoJGNvbXBpbGVOb2Rlcyk7XG4gICAgICB2YXIgbmFtZXNwYWNlID0gbnVsbDtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBwdWJsaWNMaW5rRm4oc2NvcGUsIGNsb25lQ29ubmVjdEZuLCBvcHRpb25zKSB7XG4gICAgICAgIGFzc2VydEFyZyhzY29wZSwgJ3Njb3BlJyk7XG5cbiAgICAgICAgaWYgKHByZXZpb3VzQ29tcGlsZUNvbnRleHQgJiYgcHJldmlvdXNDb21waWxlQ29udGV4dC5uZWVkc05ld1Njb3BlKSB7XG4gICAgICAgICAgLy8gQSBwYXJlbnQgZGlyZWN0aXZlIGRpZCBhIHJlcGxhY2UgYW5kIGEgZGlyZWN0aXZlIG9uIHRoaXMgZWxlbWVudCBhc2tlZFxuICAgICAgICAgIC8vIGZvciB0cmFuc2NsdXNpb24sIHdoaWNoIGNhdXNlZCB1cyB0byBsb3NlIGEgbGF5ZXIgb2YgZWxlbWVudCBvbiB3aGljaFxuICAgICAgICAgIC8vIHdlIGNvdWxkIGhvbGQgdGhlIG5ldyB0cmFuc2NsdXNpb24gc2NvcGUsIHNvIHdlIHdpbGwgY3JlYXRlIGl0IG1hbnVhbGx5XG4gICAgICAgICAgLy8gaGVyZS5cbiAgICAgICAgICBzY29wZSA9IHNjb3BlLiRwYXJlbnQuJG5ldygpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHZhciBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbiA9IG9wdGlvbnMucGFyZW50Qm91bmRUcmFuc2NsdWRlRm4sXG4gICAgICAgICAgdHJhbnNjbHVkZUNvbnRyb2xsZXJzID0gb3B0aW9ucy50cmFuc2NsdWRlQ29udHJvbGxlcnMsXG4gICAgICAgICAgZnV0dXJlUGFyZW50RWxlbWVudCA9IG9wdGlvbnMuZnV0dXJlUGFyZW50RWxlbWVudDtcblxuICAgICAgICAvLyBXaGVuIGBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbmAgaXMgcGFzc2VkLCBpdCBpcyBhXG4gICAgICAgIC8vIGBjb250cm9sbGVyc0JvdW5kVHJhbnNjbHVkZWAgZnVuY3Rpb24gKGl0IHdhcyBwcmV2aW91c2x5IHBhc3NlZFxuICAgICAgICAvLyBhcyBgdHJhbnNjbHVkZWAgdG8gZGlyZWN0aXZlLmxpbmspIHNvIHdlIG11c3QgdW53cmFwIGl0IHRvIGdldFxuICAgICAgICAvLyBpdHMgYGJvdW5kVHJhbnNjbHVkZUZuYFxuICAgICAgICBpZiAocGFyZW50Qm91bmRUcmFuc2NsdWRlRm4gJiYgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4uJCRib3VuZFRyYW5zY2x1ZGUpIHtcbiAgICAgICAgICBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbiA9IHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuLiQkYm91bmRUcmFuc2NsdWRlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFuYW1lc3BhY2UpIHtcbiAgICAgICAgICBuYW1lc3BhY2UgPSBkZXRlY3ROYW1lc3BhY2VGb3JDaGlsZEVsZW1lbnRzKGZ1dHVyZVBhcmVudEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciAkbGlua05vZGU7XG4gICAgICAgIGlmIChuYW1lc3BhY2UgIT09ICdodG1sJykge1xuICAgICAgICAgIC8vIFdoZW4gdXNpbmcgYSBkaXJlY3RpdmUgd2l0aCByZXBsYWNlOnRydWUgYW5kIHRlbXBsYXRlVXJsIHRoZSAkY29tcGlsZU5vZGVzXG4gICAgICAgICAgLy8gKG9yIGEgY2hpbGQgZWxlbWVudCBpbnNpZGUgb2YgdGhlbSlcbiAgICAgICAgICAvLyBtaWdodCBjaGFuZ2UsIHNvIHdlIG5lZWQgdG8gcmVjcmVhdGUgdGhlIG5hbWVzcGFjZSBhZGFwdGVkIGNvbXBpbGVOb2Rlc1xuICAgICAgICAgIC8vIGZvciBjYWxsIHRvIHRoZSBsaW5rIGZ1bmN0aW9uLlxuICAgICAgICAgIC8vIE5vdGU6IFRoaXMgd2lsbCBhbHJlYWR5IGNsb25lIHRoZSBub2Rlcy4uLlxuICAgICAgICAgICRsaW5rTm9kZSA9IGpxTGl0ZShcbiAgICAgICAgICAgIHdyYXBUZW1wbGF0ZShuYW1lc3BhY2UsIGpxTGl0ZSgnPGRpdj4nKS5hcHBlbmQoJGNvbXBpbGVOb2RlcykuaHRtbCgpKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2xvbmVDb25uZWN0Rm4pIHtcbiAgICAgICAgICAvLyBpbXBvcnRhbnQhITogd2UgbXVzdCBjYWxsIG91ciBqcUxpdGUuY2xvbmUoKSBzaW5jZSB0aGUgalF1ZXJ5IG9uZSBpcyB0cnlpbmcgdG8gYmUgc21hcnRcbiAgICAgICAgICAvLyBhbmQgc29tZXRpbWVzIGNoYW5nZXMgdGhlIHN0cnVjdHVyZSBvZiB0aGUgRE9NLlxuICAgICAgICAgICRsaW5rTm9kZSA9IEpRTGl0ZVByb3RvdHlwZS5jbG9uZS5jYWxsKCRjb21waWxlTm9kZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRsaW5rTm9kZSA9ICRjb21waWxlTm9kZXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhbnNjbHVkZUNvbnRyb2xsZXJzKSB7XG4gICAgICAgICAgZm9yICh2YXIgY29udHJvbGxlck5hbWUgaW4gdHJhbnNjbHVkZUNvbnRyb2xsZXJzKSB7XG4gICAgICAgICAgICAkbGlua05vZGUuZGF0YSgnJCcgKyBjb250cm9sbGVyTmFtZSArICdDb250cm9sbGVyJywgdHJhbnNjbHVkZUNvbnRyb2xsZXJzW2NvbnRyb2xsZXJOYW1lXS5pbnN0YW5jZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlSW5mbygkbGlua05vZGUsIHNjb3BlKTtcblxuICAgICAgICBpZiAoY2xvbmVDb25uZWN0Rm4pIGNsb25lQ29ubmVjdEZuKCRsaW5rTm9kZSwgc2NvcGUpO1xuICAgICAgICBpZiAoY29tcG9zaXRlTGlua0ZuKSBjb21wb3NpdGVMaW5rRm4oc2NvcGUsICRsaW5rTm9kZSwgJGxpbmtOb2RlLCBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgIHJldHVybiAkbGlua05vZGU7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRldGVjdE5hbWVzcGFjZUZvckNoaWxkRWxlbWVudHMocGFyZW50RWxlbWVudCkge1xuICAgICAgLy8gVE9ETzogTWFrZSB0aGlzIGRldGVjdCBNYXRoTUwgYXMgd2VsbC4uLlxuICAgICAgdmFyIG5vZGUgPSBwYXJlbnRFbGVtZW50ICYmIHBhcmVudEVsZW1lbnRbMF07XG4gICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgcmV0dXJuICdodG1sJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBub2RlTmFtZV8obm9kZSkgIT09ICdmb3JlaWdub2JqZWN0JyAmJiBub2RlLnRvU3RyaW5nKCkubWF0Y2goL1NWRy8pID8gJ3N2ZycgOiAnaHRtbCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcGlsZSBmdW5jdGlvbiBtYXRjaGVzIGVhY2ggbm9kZSBpbiBub2RlTGlzdCBhZ2FpbnN0IHRoZSBkaXJlY3RpdmVzLiBPbmNlIGFsbCBkaXJlY3RpdmVzXG4gICAgICogZm9yIGEgcGFydGljdWxhciBub2RlIGFyZSBjb2xsZWN0ZWQgdGhlaXIgY29tcGlsZSBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkLiBUaGUgY29tcGlsZVxuICAgICAqIGZ1bmN0aW9ucyByZXR1cm4gdmFsdWVzIC0gdGhlIGxpbmtpbmcgZnVuY3Rpb25zIC0gYXJlIGNvbWJpbmVkIGludG8gYSBjb21wb3NpdGUgbGlua2luZ1xuICAgICAqIGZ1bmN0aW9uLCB3aGljaCBpcyB0aGUgYSBsaW5raW5nIGZ1bmN0aW9uIGZvciB0aGUgbm9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Tm9kZUxpc3R9IG5vZGVMaXN0IGFuIGFycmF5IG9mIG5vZGVzIG9yIE5vZGVMaXN0IHRvIGNvbXBpbGVcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGFuZ3VsYXIuU2NvcGUsIGNsb25lQXR0YWNoRm49KX0gdHJhbnNjbHVkZUZuIEEgbGlua2luZyBmdW5jdGlvbiwgd2hlcmUgdGhlXG4gICAgICogICAgICAgIHNjb3BlIGFyZ3VtZW50IGlzIGF1dG8tZ2VuZXJhdGVkIHRvIHRoZSBuZXcgY2hpbGQgb2YgdGhlIHRyYW5zY2x1ZGVkIHBhcmVudCBzY29wZS5cbiAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnQ9fSAkcm9vdEVsZW1lbnQgSWYgdGhlIG5vZGVMaXN0IGlzIHRoZSByb290IG9mIHRoZSBjb21waWxhdGlvbiB0cmVlIHRoZW5cbiAgICAgKiAgICAgICAgdGhlIHJvb3RFbGVtZW50IG11c3QgYmUgc2V0IHRoZSBqcUxpdGUgY29sbGVjdGlvbiBvZiB0aGUgY29tcGlsZSByb290LiBUaGlzIGlzXG4gICAgICogICAgICAgIG5lZWRlZCBzbyB0aGF0IHRoZSBqcUxpdGUgY29sbGVjdGlvbiBpdGVtcyBjYW4gYmUgcmVwbGFjZWQgd2l0aCB3aWRnZXRzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gbWF4UHJpb3JpdHkgTWF4IGRpcmVjdGl2ZSBwcmlvcml0eS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgY29tcG9zaXRlIGxpbmtpbmcgZnVuY3Rpb24gb2YgYWxsIG9mIHRoZSBtYXRjaGVkIGRpcmVjdGl2ZXMgb3IgbnVsbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21waWxlTm9kZXMobm9kZUxpc3QsIHRyYW5zY2x1ZGVGbiwgJHJvb3RFbGVtZW50LCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpIHtcbiAgICAgIHZhciBsaW5rRm5zID0gW10sXG4gICAgICAgICAgYXR0cnMsIGRpcmVjdGl2ZXMsIG5vZGVMaW5rRm4sIGNoaWxkTm9kZXMsIGNoaWxkTGlua0ZuLCBsaW5rRm5Gb3VuZCwgbm9kZUxpbmtGbkZvdW5kO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGF0dHJzID0gbmV3IEF0dHJpYnV0ZXMoKTtcblxuICAgICAgICAvLyB3ZSBtdXN0IGFsd2F5cyByZWZlciB0byBub2RlTGlzdFtpXSBzaW5jZSB0aGUgbm9kZXMgY2FuIGJlIHJlcGxhY2VkIHVuZGVybmVhdGggdXMuXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBjb2xsZWN0RGlyZWN0aXZlcyhub2RlTGlzdFtpXSwgW10sIGF0dHJzLCBpID09PSAwID8gbWF4UHJpb3JpdHkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlRGlyZWN0aXZlKTtcblxuICAgICAgICBub2RlTGlua0ZuID0gKGRpcmVjdGl2ZXMubGVuZ3RoKVxuICAgICAgICAgICAgPyBhcHBseURpcmVjdGl2ZXNUb05vZGUoZGlyZWN0aXZlcywgbm9kZUxpc3RbaV0sIGF0dHJzLCB0cmFuc2NsdWRlRm4sICRyb290RWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCwgW10sIFtdLCBwcmV2aW91c0NvbXBpbGVDb250ZXh0KVxuICAgICAgICAgICAgOiBudWxsO1xuXG4gICAgICAgIGlmIChub2RlTGlua0ZuICYmIG5vZGVMaW5rRm4uc2NvcGUpIHtcbiAgICAgICAgICBjb21waWxlLiQkYWRkU2NvcGVDbGFzcyhhdHRycy4kJGVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGRMaW5rRm4gPSAobm9kZUxpbmtGbiAmJiBub2RlTGlua0ZuLnRlcm1pbmFsIHx8XG4gICAgICAgICAgICAgICAgICAgICAgIShjaGlsZE5vZGVzID0gbm9kZUxpc3RbaV0uY2hpbGROb2RlcykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAhY2hpbGROb2Rlcy5sZW5ndGgpXG4gICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgIDogY29tcGlsZU5vZGVzKGNoaWxkTm9kZXMsXG4gICAgICAgICAgICAgICAgIG5vZGVMaW5rRm4gPyAoXG4gICAgICAgICAgICAgICAgICAobm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCB8fCAhbm9kZUxpbmtGbi50ZW1wbGF0ZU9uVGhpc0VsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAmJiBub2RlTGlua0ZuLnRyYW5zY2x1ZGUpIDogdHJhbnNjbHVkZUZuKTtcblxuICAgICAgICBpZiAobm9kZUxpbmtGbiB8fCBjaGlsZExpbmtGbikge1xuICAgICAgICAgIGxpbmtGbnMucHVzaChpLCBub2RlTGlua0ZuLCBjaGlsZExpbmtGbik7XG4gICAgICAgICAgbGlua0ZuRm91bmQgPSB0cnVlO1xuICAgICAgICAgIG5vZGVMaW5rRm5Gb3VuZCA9IG5vZGVMaW5rRm5Gb3VuZCB8fCBub2RlTGlua0ZuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy91c2UgdGhlIHByZXZpb3VzIGNvbnRleHQgb25seSBmb3IgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHZpcnR1YWwgZ3JvdXBcbiAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIHJldHVybiBhIGxpbmtpbmcgZnVuY3Rpb24gaWYgd2UgaGF2ZSBmb3VuZCBhbnl0aGluZywgbnVsbCBvdGhlcndpc2VcbiAgICAgIHJldHVybiBsaW5rRm5Gb3VuZCA/IGNvbXBvc2l0ZUxpbmtGbiA6IG51bGw7XG5cbiAgICAgIGZ1bmN0aW9uIGNvbXBvc2l0ZUxpbmtGbihzY29wZSwgbm9kZUxpc3QsICRyb290RWxlbWVudCwgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgdmFyIG5vZGVMaW5rRm4sIGNoaWxkTGlua0ZuLCBub2RlLCBjaGlsZFNjb3BlLCBpLCBpaSwgaWR4LCBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuO1xuICAgICAgICB2YXIgc3RhYmxlTm9kZUxpc3Q7XG5cblxuICAgICAgICBpZiAobm9kZUxpbmtGbkZvdW5kKSB7XG4gICAgICAgICAgLy8gY29weSBub2RlTGlzdCBzbyB0aGF0IGlmIGEgbm9kZUxpbmtGbiByZW1vdmVzIG9yIGFkZHMgYW4gZWxlbWVudCBhdCB0aGlzIERPTSBsZXZlbCBvdXJcbiAgICAgICAgICAvLyBvZmZzZXRzIGRvbid0IGdldCBzY3Jld2VkIHVwXG4gICAgICAgICAgdmFyIG5vZGVMaXN0TGVuZ3RoID0gbm9kZUxpc3QubGVuZ3RoO1xuICAgICAgICAgIHN0YWJsZU5vZGVMaXN0ID0gbmV3IEFycmF5KG5vZGVMaXN0TGVuZ3RoKTtcblxuICAgICAgICAgIC8vIGNyZWF0ZSBhIHNwYXJzZSBhcnJheSBieSBvbmx5IGNvcHlpbmcgdGhlIGVsZW1lbnRzIHdoaWNoIGhhdmUgYSBsaW5rRm5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGlua0Zucy5sZW5ndGg7IGkrPTMpIHtcbiAgICAgICAgICAgIGlkeCA9IGxpbmtGbnNbaV07XG4gICAgICAgICAgICBzdGFibGVOb2RlTGlzdFtpZHhdID0gbm9kZUxpc3RbaWR4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhYmxlTm9kZUxpc3QgPSBub2RlTGlzdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gbGlua0Zucy5sZW5ndGg7IGkgPCBpaTspIHtcbiAgICAgICAgICBub2RlID0gc3RhYmxlTm9kZUxpc3RbbGlua0Zuc1tpKytdXTtcbiAgICAgICAgICBub2RlTGlua0ZuID0gbGlua0Zuc1tpKytdO1xuICAgICAgICAgIGNoaWxkTGlua0ZuID0gbGlua0Zuc1tpKytdO1xuXG4gICAgICAgICAgaWYgKG5vZGVMaW5rRm4pIHtcbiAgICAgICAgICAgIGlmIChub2RlTGlua0ZuLnNjb3BlKSB7XG4gICAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBzY29wZS4kbmV3KCk7XG4gICAgICAgICAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUluZm8oanFMaXRlKG5vZGUpLCBjaGlsZFNjb3BlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBzY29wZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5vZGVMaW5rRm4udHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKFxuICAgICAgICAgICAgICAgICAgc2NvcGUsIG5vZGVMaW5rRm4udHJhbnNjbHVkZSwgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4pO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFub2RlTGlua0ZuLnRlbXBsYXRlT25UaGlzRWxlbWVudCAmJiBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbikge1xuICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gcGFyZW50Qm91bmRUcmFuc2NsdWRlRm47XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXBhcmVudEJvdW5kVHJhbnNjbHVkZUZuICYmIHRyYW5zY2x1ZGVGbikge1xuICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oc2NvcGUsIHRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBub2RlTGlua0ZuKGNoaWxkTGlua0ZuLCBjaGlsZFNjb3BlLCBub2RlLCAkcm9vdEVsZW1lbnQsIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4pO1xuXG4gICAgICAgICAgfSBlbHNlIGlmIChjaGlsZExpbmtGbikge1xuICAgICAgICAgICAgY2hpbGRMaW5rRm4oc2NvcGUsIG5vZGUuY2hpbGROb2RlcywgdW5kZWZpbmVkLCBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oc2NvcGUsIHRyYW5zY2x1ZGVGbiwgcHJldmlvdXNCb3VuZFRyYW5zY2x1ZGVGbikge1xuXG4gICAgICB2YXIgYm91bmRUcmFuc2NsdWRlRm4gPSBmdW5jdGlvbih0cmFuc2NsdWRlZFNjb3BlLCBjbG9uZUZuLCBjb250cm9sbGVycywgZnV0dXJlUGFyZW50RWxlbWVudCwgY29udGFpbmluZ1Njb3BlKSB7XG5cbiAgICAgICAgaWYgKCF0cmFuc2NsdWRlZFNjb3BlKSB7XG4gICAgICAgICAgdHJhbnNjbHVkZWRTY29wZSA9IHNjb3BlLiRuZXcoZmFsc2UsIGNvbnRhaW5pbmdTY29wZSk7XG4gICAgICAgICAgdHJhbnNjbHVkZWRTY29wZS4kJHRyYW5zY2x1ZGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cmFuc2NsdWRlRm4odHJhbnNjbHVkZWRTY29wZSwgY2xvbmVGbiwge1xuICAgICAgICAgIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuOiBwcmV2aW91c0JvdW5kVHJhbnNjbHVkZUZuLFxuICAgICAgICAgIHRyYW5zY2x1ZGVDb250cm9sbGVyczogY29udHJvbGxlcnMsXG4gICAgICAgICAgZnV0dXJlUGFyZW50RWxlbWVudDogZnV0dXJlUGFyZW50RWxlbWVudFxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBib3VuZFRyYW5zY2x1ZGVGbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb29rcyBmb3IgZGlyZWN0aXZlcyBvbiB0aGUgZ2l2ZW4gbm9kZSBhbmQgYWRkcyB0aGVtIHRvIHRoZSBkaXJlY3RpdmUgY29sbGVjdGlvbiB3aGljaCBpc1xuICAgICAqIHNvcnRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBub2RlIE5vZGUgdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSBkaXJlY3RpdmVzIEFuIGFycmF5IHRvIHdoaWNoIHRoZSBkaXJlY3RpdmVzIGFyZSBhZGRlZCB0by4gVGhpcyBhcnJheSBpcyBzb3J0ZWQgYmVmb3JlXG4gICAgICogICAgICAgIHRoZSBmdW5jdGlvbiByZXR1cm5zLlxuICAgICAqIEBwYXJhbSBhdHRycyBUaGUgc2hhcmVkIGF0dHJzIG9iamVjdCB3aGljaCBpcyB1c2VkIHRvIHBvcHVsYXRlIHRoZSBub3JtYWxpemVkIGF0dHJpYnV0ZXMuXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBtYXhQcmlvcml0eSBNYXggZGlyZWN0aXZlIHByaW9yaXR5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbGxlY3REaXJlY3RpdmVzKG5vZGUsIGRpcmVjdGl2ZXMsIGF0dHJzLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlKSB7XG4gICAgICB2YXIgbm9kZVR5cGUgPSBub2RlLm5vZGVUeXBlLFxuICAgICAgICAgIGF0dHJzTWFwID0gYXR0cnMuJGF0dHIsXG4gICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgY2xhc3NOYW1lO1xuXG4gICAgICBzd2l0Y2ggKG5vZGVUeXBlKSB7XG4gICAgICAgIGNhc2UgTk9ERV9UWVBFX0VMRU1FTlQ6IC8qIEVsZW1lbnQgKi9cbiAgICAgICAgICAvLyB1c2UgdGhlIG5vZGUgbmFtZTogPGRpcmVjdGl2ZT5cbiAgICAgICAgICBhZGREaXJlY3RpdmUoZGlyZWN0aXZlcyxcbiAgICAgICAgICAgICAgZGlyZWN0aXZlTm9ybWFsaXplKG5vZGVOYW1lXyhub2RlKSksICdFJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSk7XG5cbiAgICAgICAgICAvLyBpdGVyYXRlIG92ZXIgdGhlIGF0dHJpYnV0ZXNcbiAgICAgICAgICBmb3IgKHZhciBhdHRyLCBuYW1lLCBuTmFtZSwgbmdBdHRyTmFtZSwgdmFsdWUsIGlzTmdBdHRyLCBuQXR0cnMgPSBub2RlLmF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAgICAgICAgaiA9IDAsIGpqID0gbkF0dHJzICYmIG5BdHRycy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICAgICAgICB2YXIgYXR0clN0YXJ0TmFtZSA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGF0dHJFbmROYW1lID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGF0dHIgPSBuQXR0cnNbal07XG4gICAgICAgICAgICBuYW1lID0gYXR0ci5uYW1lO1xuICAgICAgICAgICAgdmFsdWUgPSB0cmltKGF0dHIudmFsdWUpO1xuXG4gICAgICAgICAgICAvLyBzdXBwb3J0IG5nQXR0ciBhdHRyaWJ1dGUgYmluZGluZ1xuICAgICAgICAgICAgbmdBdHRyTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZShuYW1lKTtcbiAgICAgICAgICAgIGlmIChpc05nQXR0ciA9IE5HX0FUVFJfQklORElORy50ZXN0KG5nQXR0ck5hbWUpKSB7XG4gICAgICAgICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoUFJFRklYX1JFR0VYUCwgJycpXG4gICAgICAgICAgICAgICAgLnN1YnN0cig4KS5yZXBsYWNlKC9fKC4pL2csIGZ1bmN0aW9uKG1hdGNoLCBsZXR0ZXIpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG11bHRpRWxlbWVudE1hdGNoID0gbmdBdHRyTmFtZS5tYXRjaChNVUxUSV9FTEVNRU5UX0RJUl9SRSk7XG4gICAgICAgICAgICBpZiAobXVsdGlFbGVtZW50TWF0Y2ggJiYgZGlyZWN0aXZlSXNNdWx0aUVsZW1lbnQobXVsdGlFbGVtZW50TWF0Y2hbMV0pKSB7XG4gICAgICAgICAgICAgIGF0dHJTdGFydE5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgICBhdHRyRW5kTmFtZSA9IG5hbWUuc3Vic3RyKDAsIG5hbWUubGVuZ3RoIC0gNSkgKyAnZW5kJztcbiAgICAgICAgICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDAsIG5hbWUubGVuZ3RoIC0gNik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5OYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG5hbWUudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICBhdHRyc01hcFtuTmFtZV0gPSBuYW1lO1xuICAgICAgICAgICAgaWYgKGlzTmdBdHRyIHx8ICFhdHRycy5oYXNPd25Qcm9wZXJ0eShuTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBhdHRyc1tuTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoZ2V0Qm9vbGVhbkF0dHJOYW1lKG5vZGUsIG5OYW1lKSkge1xuICAgICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdHJ1ZTsgLy8gcHJlc2VuY2UgbWVhbnMgdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZEF0dHJJbnRlcnBvbGF0ZURpcmVjdGl2ZShub2RlLCBkaXJlY3RpdmVzLCB2YWx1ZSwgbk5hbWUsIGlzTmdBdHRyKTtcbiAgICAgICAgICAgIGFkZERpcmVjdGl2ZShkaXJlY3RpdmVzLCBuTmFtZSwgJ0EnLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLCBhdHRyU3RhcnROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyRW5kTmFtZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gdXNlIGNsYXNzIGFzIGRpcmVjdGl2ZVxuICAgICAgICAgIGNsYXNzTmFtZSA9IG5vZGUuY2xhc3NOYW1lO1xuICAgICAgICAgIGlmIChpc09iamVjdChjbGFzc05hbWUpKSB7XG4gICAgICAgICAgICAgIC8vIE1heWJlIFNWR0FuaW1hdGVkU3RyaW5nXG4gICAgICAgICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5hbmltVmFsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNTdHJpbmcoY2xhc3NOYW1lKSAmJiBjbGFzc05hbWUgIT09ICcnKSB7XG4gICAgICAgICAgICB3aGlsZSAobWF0Y2ggPSBDTEFTU19ESVJFQ1RJVkVfUkVHRVhQLmV4ZWMoY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgICBuTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZShtYXRjaFsyXSk7XG4gICAgICAgICAgICAgIGlmIChhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdDJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkpIHtcbiAgICAgICAgICAgICAgICBhdHRyc1tuTmFtZV0gPSB0cmltKG1hdGNoWzNdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUuc3Vic3RyKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTk9ERV9UWVBFX1RFWFQ6IC8qIFRleHQgTm9kZSAqL1xuICAgICAgICAgIGlmIChtc2llID09PSAxMSkge1xuICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgIzExNzgxXG4gICAgICAgICAgICB3aGlsZSAobm9kZS5wYXJlbnROb2RlICYmIG5vZGUubmV4dFNpYmxpbmcgJiYgbm9kZS5uZXh0U2libGluZy5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX1RFWFQpIHtcbiAgICAgICAgICAgICAgbm9kZS5ub2RlVmFsdWUgPSBub2RlLm5vZGVWYWx1ZSArIG5vZGUubmV4dFNpYmxpbmcubm9kZVZhbHVlO1xuICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZS5uZXh0U2libGluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGFkZFRleHRJbnRlcnBvbGF0ZURpcmVjdGl2ZShkaXJlY3RpdmVzLCBub2RlLm5vZGVWYWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTk9ERV9UWVBFX0NPTU1FTlQ6IC8qIENvbW1lbnQgKi9cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbWF0Y2ggPSBDT01NRU5UX0RJUkVDVElWRV9SRUdFWFAuZXhlYyhub2RlLm5vZGVWYWx1ZSk7XG4gICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgbk5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobWF0Y2hbMV0pO1xuICAgICAgICAgICAgICBpZiAoYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5OYW1lLCAnTScsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpKSB7XG4gICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdHJpbShtYXRjaFsyXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyB0dXJucyBvdXQgdGhhdCB1bmRlciBzb21lIGNpcmN1bXN0YW5jZXMgSUU5IHRocm93cyBlcnJvcnMgd2hlbiBvbmUgYXR0ZW1wdHMgdG8gcmVhZFxuICAgICAgICAgICAgLy8gY29tbWVudCdzIG5vZGUgdmFsdWUuXG4gICAgICAgICAgICAvLyBKdXN0IGlnbm9yZSBpdCBhbmQgY29udGludWUuIChDYW4ndCBzZWVtIHRvIHJlcHJvZHVjZSBpbiB0ZXN0IGNhc2UuKVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgZGlyZWN0aXZlcy5zb3J0KGJ5UHJpb3JpdHkpO1xuICAgICAgcmV0dXJuIGRpcmVjdGl2ZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBub2RlIHdpdGggYW4gZGlyZWN0aXZlLXN0YXJ0IGl0IGNvbGxlY3RzIGFsbCBvZiB0aGUgc2libGluZ3MgdW50aWwgaXQgZmluZHNcbiAgICAgKiBkaXJlY3RpdmUtZW5kLlxuICAgICAqIEBwYXJhbSBub2RlXG4gICAgICogQHBhcmFtIGF0dHJTdGFydFxuICAgICAqIEBwYXJhbSBhdHRyRW5kXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZ3JvdXBTY2FuKG5vZGUsIGF0dHJTdGFydCwgYXR0ckVuZCkge1xuICAgICAgdmFyIG5vZGVzID0gW107XG4gICAgICB2YXIgZGVwdGggPSAwO1xuICAgICAgaWYgKGF0dHJTdGFydCAmJiBub2RlLmhhc0F0dHJpYnV0ZSAmJiBub2RlLmhhc0F0dHJpYnV0ZShhdHRyU3RhcnQpKSB7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCd1dGVyZGlyJyxcbiAgICAgICAgICAgICAgICAgICAgICBcIlVudGVybWluYXRlZCBhdHRyaWJ1dGUsIGZvdW5kICd7MH0nIGJ1dCBubyBtYXRjaGluZyAnezF9JyBmb3VuZC5cIixcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSBOT0RFX1RZUEVfRUxFTUVOVCkge1xuICAgICAgICAgICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlKGF0dHJTdGFydCkpIGRlcHRoKys7XG4gICAgICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoYXR0ckVuZCkpIGRlcHRoLS07XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgIH0gd2hpbGUgKGRlcHRoID4gMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ganFMaXRlKG5vZGVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXcmFwcGVyIGZvciBsaW5raW5nIGZ1bmN0aW9uIHdoaWNoIGNvbnZlcnRzIG5vcm1hbCBsaW5raW5nIGZ1bmN0aW9uIGludG8gYSBncm91cGVkXG4gICAgICogbGlua2luZyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0gbGlua0ZuXG4gICAgICogQHBhcmFtIGF0dHJTdGFydFxuICAgICAqIEBwYXJhbSBhdHRyRW5kXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdyb3VwRWxlbWVudHNMaW5rRm5XcmFwcGVyKGxpbmtGbiwgYXR0clN0YXJ0LCBhdHRyRW5kKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKSB7XG4gICAgICAgIGVsZW1lbnQgPSBncm91cFNjYW4oZWxlbWVudFswXSwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgcmV0dXJuIGxpbmtGbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGNvbnRyb2xsZXJzLCB0cmFuc2NsdWRlRm4pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPbmNlIHRoZSBkaXJlY3RpdmVzIGhhdmUgYmVlbiBjb2xsZWN0ZWQsIHRoZWlyIGNvbXBpbGUgZnVuY3Rpb25zIGFyZSBleGVjdXRlZC4gVGhpcyBtZXRob2RcbiAgICAgKiBpcyByZXNwb25zaWJsZSBmb3IgaW5saW5pbmcgZGlyZWN0aXZlIHRlbXBsYXRlcyBhcyB3ZWxsIGFzIHRlcm1pbmF0aW5nIHRoZSBhcHBsaWNhdGlvblxuICAgICAqIG9mIHRoZSBkaXJlY3RpdmVzIGlmIHRoZSB0ZXJtaW5hbCBkaXJlY3RpdmUgaGFzIGJlZW4gcmVhY2hlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRpcmVjdGl2ZXMgQXJyYXkgb2YgY29sbGVjdGVkIGRpcmVjdGl2ZXMgdG8gZXhlY3V0ZSB0aGVpciBjb21waWxlIGZ1bmN0aW9uLlxuICAgICAqICAgICAgICB0aGlzIG5lZWRzIHRvIGJlIHByZS1zb3J0ZWQgYnkgcHJpb3JpdHkgb3JkZXIuXG4gICAgICogQHBhcmFtIHtOb2RlfSBjb21waWxlTm9kZSBUaGUgcmF3IERPTSBub2RlIHRvIGFwcGx5IHRoZSBjb21waWxlIGZ1bmN0aW9ucyB0b1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0ZW1wbGF0ZUF0dHJzIFRoZSBzaGFyZWQgYXR0cmlidXRlIGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihhbmd1bGFyLlNjb3BlLCBjbG9uZUF0dGFjaEZuPSl9IHRyYW5zY2x1ZGVGbiBBIGxpbmtpbmcgZnVuY3Rpb24sIHdoZXJlIHRoZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZSBhcmd1bWVudCBpcyBhdXRvLWdlbmVyYXRlZCB0byB0aGUgbmV3XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkIG9mIHRoZSB0cmFuc2NsdWRlZCBwYXJlbnQgc2NvcGUuXG4gICAgICogQHBhcmFtIHtKUUxpdGV9IGpxQ29sbGVjdGlvbiBJZiB3ZSBhcmUgd29ya2luZyBvbiB0aGUgcm9vdCBvZiB0aGUgY29tcGlsZSB0cmVlIHRoZW4gdGhpc1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnQgaGFzIHRoZSByb290IGpxTGl0ZSBhcnJheSBzbyB0aGF0IHdlIGNhbiByZXBsYWNlIG5vZGVzXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbiBpdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdD19IG9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSBBbiBvcHRpb25hbCBkaXJlY3RpdmUgdGhhdCB3aWxsIGJlIGlnbm9yZWQgd2hlblxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBpbGluZyB0aGUgdHJhbnNjbHVzaW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXkuPEZ1bmN0aW9uPn0gcHJlTGlua0Zuc1xuICAgICAqIEBwYXJhbSB7QXJyYXkuPEZ1bmN0aW9uPn0gcG9zdExpbmtGbnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJldmlvdXNDb21waWxlQ29udGV4dCBDb250ZXh0IHVzZWQgZm9yIHByZXZpb3VzIGNvbXBpbGF0aW9uIG9mIHRoZSBjdXJyZW50XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gbGlua0ZuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIGNvbXBpbGVOb2RlLCB0ZW1wbGF0ZUF0dHJzLCB0cmFuc2NsdWRlRm4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpxQ29sbGVjdGlvbiwgb3JpZ2luYWxSZXBsYWNlRGlyZWN0aXZlLCBwcmVMaW5rRm5zLCBwb3N0TGlua0ZucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCkge1xuICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQgfHwge307XG5cbiAgICAgIHZhciB0ZXJtaW5hbFByaW9yaXR5ID0gLU51bWJlci5NQVhfVkFMVUUsXG4gICAgICAgICAgbmV3U2NvcGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lm5ld1Njb3BlRGlyZWN0aXZlLFxuICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzID0gcHJldmlvdXNDb21waWxlQ29udGV4dC5jb250cm9sbGVyRGlyZWN0aXZlcyxcbiAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lm5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSxcbiAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZSA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQudGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgICAgICAgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQubm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSxcbiAgICAgICAgICBoYXNUcmFuc2NsdWRlRGlyZWN0aXZlID0gZmFsc2UsXG4gICAgICAgICAgaGFzVGVtcGxhdGUgPSBmYWxzZSxcbiAgICAgICAgICBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQuaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUsXG4gICAgICAgICAgJGNvbXBpbGVOb2RlID0gdGVtcGxhdGVBdHRycy4kJGVsZW1lbnQgPSBqcUxpdGUoY29tcGlsZU5vZGUpLFxuICAgICAgICAgIGRpcmVjdGl2ZSxcbiAgICAgICAgICBkaXJlY3RpdmVOYW1lLFxuICAgICAgICAgICR0ZW1wbGF0ZSxcbiAgICAgICAgICByZXBsYWNlRGlyZWN0aXZlID0gb3JpZ2luYWxSZXBsYWNlRGlyZWN0aXZlLFxuICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuID0gdHJhbnNjbHVkZUZuLFxuICAgICAgICAgIGxpbmtGbixcbiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZTtcblxuICAgICAgLy8gZXhlY3V0ZXMgYWxsIGRpcmVjdGl2ZXMgb24gdGhlIGN1cnJlbnQgZWxlbWVudFxuICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gZGlyZWN0aXZlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgIGRpcmVjdGl2ZSA9IGRpcmVjdGl2ZXNbaV07XG4gICAgICAgIHZhciBhdHRyU3RhcnQgPSBkaXJlY3RpdmUuJCRzdGFydDtcbiAgICAgICAgdmFyIGF0dHJFbmQgPSBkaXJlY3RpdmUuJCRlbmQ7XG5cbiAgICAgICAgLy8gY29sbGVjdCBtdWx0aWJsb2NrIHNlY3Rpb25zXG4gICAgICAgIGlmIChhdHRyU3RhcnQpIHtcbiAgICAgICAgICAkY29tcGlsZU5vZGUgPSBncm91cFNjYW4oY29tcGlsZU5vZGUsIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgJHRlbXBsYXRlID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmICh0ZXJtaW5hbFByaW9yaXR5ID4gZGlyZWN0aXZlLnByaW9yaXR5KSB7XG4gICAgICAgICAgYnJlYWs7IC8vIHByZXZlbnQgZnVydGhlciBwcm9jZXNzaW5nIG9mIGRpcmVjdGl2ZXNcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXJlY3RpdmVWYWx1ZSA9IGRpcmVjdGl2ZS5zY29wZSkge1xuXG4gICAgICAgICAgLy8gc2tpcCB0aGUgY2hlY2sgZm9yIGRpcmVjdGl2ZXMgd2l0aCBhc3luYyB0ZW1wbGF0ZXMsIHdlJ2xsIGNoZWNrIHRoZSBkZXJpdmVkIHN5bmNcbiAgICAgICAgICAvLyBkaXJlY3RpdmUgd2hlbiB0aGUgdGVtcGxhdGUgYXJyaXZlc1xuICAgICAgICAgIGlmICghZGlyZWN0aXZlLnRlbXBsYXRlVXJsKSB7XG4gICAgICAgICAgICBpZiAoaXNPYmplY3QoZGlyZWN0aXZlVmFsdWUpKSB7XG4gICAgICAgICAgICAgIC8vIFRoaXMgZGlyZWN0aXZlIGlzIHRyeWluZyB0byBhZGQgYW4gaXNvbGF0ZWQgc2NvcGUuXG4gICAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgdGhlcmUgaXMgbm8gc2NvcGUgb2YgYW55IGtpbmQgYWxyZWFkeVxuICAgICAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgnbmV3L2lzb2xhdGVkIHNjb3BlJywgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlIHx8IG5ld1Njb3BlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgICAgIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIFRoaXMgZGlyZWN0aXZlIGlzIHRyeWluZyB0byBhZGQgYSBjaGlsZCBzY29wZS5cbiAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGVyZSBpcyBubyBpc29sYXRlZCBzY29wZSBhbHJlYWR5XG4gICAgICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCduZXcvaXNvbGF0ZWQgc2NvcGUnLCBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsIGRpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXdTY29wZURpcmVjdGl2ZSA9IG5ld1Njb3BlRGlyZWN0aXZlIHx8IGRpcmVjdGl2ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmUubmFtZTtcblxuICAgICAgICBpZiAoIWRpcmVjdGl2ZS50ZW1wbGF0ZVVybCAmJiBkaXJlY3RpdmUuY29udHJvbGxlcikge1xuICAgICAgICAgIGRpcmVjdGl2ZVZhbHVlID0gZGlyZWN0aXZlLmNvbnRyb2xsZXI7XG4gICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXMgPSBjb250cm9sbGVyRGlyZWN0aXZlcyB8fCBjcmVhdGVNYXAoKTtcbiAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZShcIidcIiArIGRpcmVjdGl2ZU5hbWUgKyBcIicgY29udHJvbGxlclwiLFxuICAgICAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlc1tkaXJlY3RpdmVOYW1lXSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzW2RpcmVjdGl2ZU5hbWVdID0gZGlyZWN0aXZlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpcmVjdGl2ZVZhbHVlID0gZGlyZWN0aXZlLnRyYW5zY2x1ZGUpIHtcbiAgICAgICAgICBoYXNUcmFuc2NsdWRlRGlyZWN0aXZlID0gdHJ1ZTtcblxuICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSBuZ0lmIGFuZCBuZ1JlcGVhdCBzbyB0aGF0IHdlIGRvbid0IGNvbXBsYWluIGFib3V0IGR1cGxpY2F0ZSB0cmFuc2NsdXNpb24uXG4gICAgICAgICAgLy8gVGhpcyBvcHRpb24gc2hvdWxkIG9ubHkgYmUgdXNlZCBieSBkaXJlY3RpdmVzIHRoYXQga25vdyBob3cgdG8gc2FmZWx5IGhhbmRsZSBlbGVtZW50IHRyYW5zY2x1c2lvbixcbiAgICAgICAgICAvLyB3aGVyZSB0aGUgdHJhbnNjbHVkZWQgbm9kZXMgYXJlIGFkZGVkIG9yIHJlcGxhY2VkIGFmdGVyIGxpbmtpbmcuXG4gICAgICAgICAgaWYgKCFkaXJlY3RpdmUuJCR0bGIpIHtcbiAgICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCd0cmFuc2NsdXNpb24nLCBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgICBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChkaXJlY3RpdmVWYWx1ZSA9PSAnZWxlbWVudCcpIHtcbiAgICAgICAgICAgIGhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRlcm1pbmFsUHJpb3JpdHkgPSBkaXJlY3RpdmUucHJpb3JpdHk7XG4gICAgICAgICAgICAkdGVtcGxhdGUgPSAkY29tcGlsZU5vZGU7XG4gICAgICAgICAgICAkY29tcGlsZU5vZGUgPSB0ZW1wbGF0ZUF0dHJzLiQkZWxlbWVudCA9XG4gICAgICAgICAgICAgICAganFMaXRlKGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJyAnICsgZGlyZWN0aXZlTmFtZSArICc6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlQXR0cnNbZGlyZWN0aXZlTmFtZV0gKyAnICcpKTtcbiAgICAgICAgICAgIGNvbXBpbGVOb2RlID0gJGNvbXBpbGVOb2RlWzBdO1xuICAgICAgICAgICAgcmVwbGFjZVdpdGgoanFDb2xsZWN0aW9uLCBzbGljZUFyZ3MoJHRlbXBsYXRlKSwgY29tcGlsZU5vZGUpO1xuXG4gICAgICAgICAgICBjaGlsZFRyYW5zY2x1ZGVGbiA9IGNvbXBpbGUoJHRlbXBsYXRlLCB0cmFuc2NsdWRlRm4sIHRlcm1pbmFsUHJpb3JpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSAmJiByZXBsYWNlRGlyZWN0aXZlLm5hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbid0IHBhc3MgaW46XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAtIGNvbnRyb2xsZXJEaXJlY3RpdmVzIC0gb3RoZXJ3aXNlIHdlJ2xsIGNyZWF0ZSBkdXBsaWNhdGVzIGNvbnRyb2xsZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAtIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSBvciB0ZW1wbGF0ZURpcmVjdGl2ZSAtIGNvbWJpbmluZyB0ZW1wbGF0ZXMgd2l0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBlbGVtZW50IHRyYW5zY2x1c2lvbiBkb2Vzbid0IG1ha2Ugc2Vuc2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgbmVlZCBvbmx5IG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUgc28gdGhhdCB3ZSBwcmV2ZW50IHB1dHRpbmcgdHJhbnNjbHVzaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvbiB0aGUgc2FtZSBlbGVtZW50IG1vcmUgdGhhbiBvbmNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZTogbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkdGVtcGxhdGUgPSBqcUxpdGUoanFMaXRlQ2xvbmUoY29tcGlsZU5vZGUpKS5jb250ZW50cygpO1xuICAgICAgICAgICAgJGNvbXBpbGVOb2RlLmVtcHR5KCk7IC8vIGNsZWFyIGNvbnRlbnRzXG4gICAgICAgICAgICBjaGlsZFRyYW5zY2x1ZGVGbiA9IGNvbXBpbGUoJHRlbXBsYXRlLCB0cmFuc2NsdWRlRm4sIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsIHsgbmVlZHNOZXdTY29wZTogZGlyZWN0aXZlLiQkaXNvbGF0ZVNjb3BlIHx8IGRpcmVjdGl2ZS4kJG5ld1Njb3BlfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpcmVjdGl2ZS50ZW1wbGF0ZSkge1xuICAgICAgICAgIGhhc1RlbXBsYXRlID0gdHJ1ZTtcbiAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgndGVtcGxhdGUnLCB0ZW1wbGF0ZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgIHRlbXBsYXRlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuXG4gICAgICAgICAgZGlyZWN0aXZlVmFsdWUgPSAoaXNGdW5jdGlvbihkaXJlY3RpdmUudGVtcGxhdGUpKVxuICAgICAgICAgICAgICA/IGRpcmVjdGl2ZS50ZW1wbGF0ZSgkY29tcGlsZU5vZGUsIHRlbXBsYXRlQXR0cnMpXG4gICAgICAgICAgICAgIDogZGlyZWN0aXZlLnRlbXBsYXRlO1xuXG4gICAgICAgICAgZGlyZWN0aXZlVmFsdWUgPSBkZW5vcm1hbGl6ZVRlbXBsYXRlKGRpcmVjdGl2ZVZhbHVlKTtcblxuICAgICAgICAgIGlmIChkaXJlY3RpdmUucmVwbGFjZSkge1xuICAgICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgICAgIGlmIChqcUxpdGVJc1RleHROb2RlKGRpcmVjdGl2ZVZhbHVlKSkge1xuICAgICAgICAgICAgICAkdGVtcGxhdGUgPSBbXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICR0ZW1wbGF0ZSA9IHJlbW92ZUNvbW1lbnRzKHdyYXBUZW1wbGF0ZShkaXJlY3RpdmUudGVtcGxhdGVOYW1lc3BhY2UsIHRyaW0oZGlyZWN0aXZlVmFsdWUpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21waWxlTm9kZSA9ICR0ZW1wbGF0ZVswXTtcblxuICAgICAgICAgICAgaWYgKCR0ZW1wbGF0ZS5sZW5ndGggIT0gMSB8fCBjb21waWxlTm9kZS5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0VMRU1FTlQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3RwbHJ0JyxcbiAgICAgICAgICAgICAgICAgIFwiVGVtcGxhdGUgZm9yIGRpcmVjdGl2ZSAnezB9JyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50LiB7MX1cIixcbiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZU5hbWUsICcnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVwbGFjZVdpdGgoanFDb2xsZWN0aW9uLCAkY29tcGlsZU5vZGUsIGNvbXBpbGVOb2RlKTtcblxuICAgICAgICAgICAgdmFyIG5ld1RlbXBsYXRlQXR0cnMgPSB7JGF0dHI6IHt9fTtcblxuICAgICAgICAgICAgLy8gY29tYmluZSBkaXJlY3RpdmVzIGZyb20gdGhlIG9yaWdpbmFsIG5vZGUgYW5kIGZyb20gdGhlIHRlbXBsYXRlOlxuICAgICAgICAgICAgLy8gLSB0YWtlIHRoZSBhcnJheSBvZiBkaXJlY3RpdmVzIGZvciB0aGlzIGVsZW1lbnRcbiAgICAgICAgICAgIC8vIC0gc3BsaXQgaXQgaW50byB0d28gcGFydHMsIHRob3NlIHRoYXQgYWxyZWFkeSBhcHBsaWVkIChwcm9jZXNzZWQpIGFuZCB0aG9zZSB0aGF0IHdlcmVuJ3QgKHVucHJvY2Vzc2VkKVxuICAgICAgICAgICAgLy8gLSBjb2xsZWN0IGRpcmVjdGl2ZXMgZnJvbSB0aGUgdGVtcGxhdGUgYW5kIHNvcnQgdGhlbSBieSBwcmlvcml0eVxuICAgICAgICAgICAgLy8gLSBjb21iaW5lIGRpcmVjdGl2ZXMgYXM6IHByb2Nlc3NlZCArIHRlbXBsYXRlICsgdW5wcm9jZXNzZWRcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZURpcmVjdGl2ZXMgPSBjb2xsZWN0RGlyZWN0aXZlcyhjb21waWxlTm9kZSwgW10sIG5ld1RlbXBsYXRlQXR0cnMpO1xuICAgICAgICAgICAgdmFyIHVucHJvY2Vzc2VkRGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXMuc3BsaWNlKGkgKyAxLCBkaXJlY3RpdmVzLmxlbmd0aCAtIChpICsgMSkpO1xuXG4gICAgICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlIHx8IG5ld1Njb3BlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgICAgIC8vIFRoZSBvcmlnaW5hbCBkaXJlY3RpdmUgY2F1c2VkIHRoZSBjdXJyZW50IGVsZW1lbnQgdG8gYmUgcmVwbGFjZWQgYnV0IHRoaXMgZWxlbWVudFxuICAgICAgICAgICAgICAvLyBhbHNvIG5lZWRzIHRvIGhhdmUgYSBuZXcgc2NvcGUsIHNvIHdlIG5lZWQgdG8gdGVsbCB0aGUgdGVtcGxhdGUgZGlyZWN0aXZlc1xuICAgICAgICAgICAgICAvLyB0aGF0IHRoZXkgd291bGQgbmVlZCB0byBnZXQgdGhlaXIgc2NvcGUgZnJvbSBmdXJ0aGVyIHVwLCBpZiB0aGV5IHJlcXVpcmUgdHJhbnNjbHVzaW9uXG4gICAgICAgICAgICAgIG1hcmtEaXJlY3RpdmVTY29wZSh0ZW1wbGF0ZURpcmVjdGl2ZXMsIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSwgbmV3U2NvcGVEaXJlY3RpdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXMuY29uY2F0KHRlbXBsYXRlRGlyZWN0aXZlcykuY29uY2F0KHVucHJvY2Vzc2VkRGlyZWN0aXZlcyk7XG4gICAgICAgICAgICBtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyh0ZW1wbGF0ZUF0dHJzLCBuZXdUZW1wbGF0ZUF0dHJzKTtcblxuICAgICAgICAgICAgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGNvbXBpbGVOb2RlLmh0bWwoZGlyZWN0aXZlVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXJlY3RpdmUudGVtcGxhdGVVcmwpIHtcbiAgICAgICAgICBoYXNUZW1wbGF0ZSA9IHRydWU7XG4gICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ3RlbXBsYXRlJywgdGVtcGxhdGVEaXJlY3RpdmUsIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcblxuICAgICAgICAgIGlmIChkaXJlY3RpdmUucmVwbGFjZSkge1xuICAgICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBub2RlTGlua0ZuID0gY29tcGlsZVRlbXBsYXRlVXJsKGRpcmVjdGl2ZXMuc3BsaWNlKGksIGRpcmVjdGl2ZXMubGVuZ3RoIC0gaSksICRjb21waWxlTm9kZSxcbiAgICAgICAgICAgICAgdGVtcGxhdGVBdHRycywganFDb2xsZWN0aW9uLCBoYXNUcmFuc2NsdWRlRGlyZWN0aXZlICYmIGNoaWxkVHJhbnNjbHVkZUZuLCBwcmVMaW5rRm5zLCBwb3N0TGlua0Zucywge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzOiBjb250cm9sbGVyRGlyZWN0aXZlcyxcbiAgICAgICAgICAgICAgICBuZXdTY29wZURpcmVjdGl2ZTogKG5ld1Njb3BlRGlyZWN0aXZlICE9PSBkaXJlY3RpdmUpICYmIG5ld1Njb3BlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZTogbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlRGlyZWN0aXZlOiB0ZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlOiBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIGlpID0gZGlyZWN0aXZlcy5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aXZlLmNvbXBpbGUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGlua0ZuID0gZGlyZWN0aXZlLmNvbXBpbGUoJGNvbXBpbGVOb2RlLCB0ZW1wbGF0ZUF0dHJzLCBjaGlsZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihsaW5rRm4pKSB7XG4gICAgICAgICAgICAgIGFkZExpbmtGbnMobnVsbCwgbGlua0ZuLCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsaW5rRm4pIHtcbiAgICAgICAgICAgICAgYWRkTGlua0ZucyhsaW5rRm4ucHJlLCBsaW5rRm4ucG9zdCwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlLCBzdGFydGluZ1RhZygkY29tcGlsZU5vZGUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlyZWN0aXZlLnRlcm1pbmFsKSB7XG4gICAgICAgICAgbm9kZUxpbmtGbi50ZXJtaW5hbCA9IHRydWU7XG4gICAgICAgICAgdGVybWluYWxQcmlvcml0eSA9IE1hdGgubWF4KHRlcm1pbmFsUHJpb3JpdHksIGRpcmVjdGl2ZS5wcmlvcml0eSk7XG4gICAgICAgIH1cblxuICAgICAgfVxuXG4gICAgICBub2RlTGlua0ZuLnNjb3BlID0gbmV3U2NvcGVEaXJlY3RpdmUgJiYgbmV3U2NvcGVEaXJlY3RpdmUuc2NvcGUgPT09IHRydWU7XG4gICAgICBub2RlTGlua0ZuLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50ID0gaGFzVHJhbnNjbHVkZURpcmVjdGl2ZTtcbiAgICAgIG5vZGVMaW5rRm4udGVtcGxhdGVPblRoaXNFbGVtZW50ID0gaGFzVGVtcGxhdGU7XG4gICAgICBub2RlTGlua0ZuLnRyYW5zY2x1ZGUgPSBjaGlsZFRyYW5zY2x1ZGVGbjtcblxuICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dC5oYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSA9IGhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlO1xuXG4gICAgICAvLyBtaWdodCBiZSBub3JtYWwgb3IgZGVsYXllZCBub2RlTGlua0ZuIGRlcGVuZGluZyBvbiBpZiB0ZW1wbGF0ZVVybCBpcyBwcmVzZW50XG4gICAgICByZXR1cm4gbm9kZUxpbmtGbjtcblxuICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgZnVuY3Rpb24gYWRkTGlua0ZucyhwcmUsIHBvc3QsIGF0dHJTdGFydCwgYXR0ckVuZCkge1xuICAgICAgICBpZiAocHJlKSB7XG4gICAgICAgICAgaWYgKGF0dHJTdGFydCkgcHJlID0gZ3JvdXBFbGVtZW50c0xpbmtGbldyYXBwZXIocHJlLCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICAgIHByZS5yZXF1aXJlID0gZGlyZWN0aXZlLnJlcXVpcmU7XG4gICAgICAgICAgcHJlLmRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmVOYW1lO1xuICAgICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPT09IGRpcmVjdGl2ZSB8fCBkaXJlY3RpdmUuJCRpc29sYXRlU2NvcGUpIHtcbiAgICAgICAgICAgIHByZSA9IGNsb25lQW5kQW5ub3RhdGVGbihwcmUsIHtpc29sYXRlU2NvcGU6IHRydWV9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJlTGlua0Zucy5wdXNoKHByZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc3QpIHtcbiAgICAgICAgICBpZiAoYXR0clN0YXJ0KSBwb3N0ID0gZ3JvdXBFbGVtZW50c0xpbmtGbldyYXBwZXIocG9zdCwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgICBwb3N0LnJlcXVpcmUgPSBkaXJlY3RpdmUucmVxdWlyZTtcbiAgICAgICAgICBwb3N0LmRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmVOYW1lO1xuICAgICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPT09IGRpcmVjdGl2ZSB8fCBkaXJlY3RpdmUuJCRpc29sYXRlU2NvcGUpIHtcbiAgICAgICAgICAgIHBvc3QgPSBjbG9uZUFuZEFubm90YXRlRm4ocG9zdCwge2lzb2xhdGVTY29wZTogdHJ1ZX0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwb3N0TGlua0Zucy5wdXNoKHBvc3QpO1xuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgZnVuY3Rpb24gZ2V0Q29udHJvbGxlcnMoZGlyZWN0aXZlTmFtZSwgcmVxdWlyZSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycykge1xuICAgICAgICB2YXIgdmFsdWU7XG5cbiAgICAgICAgaWYgKGlzU3RyaW5nKHJlcXVpcmUpKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gcmVxdWlyZS5tYXRjaChSRVFVSVJFX1BSRUZJWF9SRUdFWFApO1xuICAgICAgICAgIHZhciBuYW1lID0gcmVxdWlyZS5zdWJzdHJpbmcobWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICB2YXIgaW5oZXJpdFR5cGUgPSBtYXRjaFsxXSB8fCBtYXRjaFszXTtcbiAgICAgICAgICB2YXIgb3B0aW9uYWwgPSBtYXRjaFsyXSA9PT0gJz8nO1xuXG4gICAgICAgICAgLy9JZiBvbmx5IHBhcmVudHMgdGhlbiBzdGFydCBhdCB0aGUgcGFyZW50IGVsZW1lbnRcbiAgICAgICAgICBpZiAoaW5oZXJpdFR5cGUgPT09ICdeXicpIHtcbiAgICAgICAgICAgICRlbGVtZW50ID0gJGVsZW1lbnQucGFyZW50KCk7XG4gICAgICAgICAgLy9PdGhlcndpc2UgYXR0ZW1wdCBnZXR0aW5nIHRoZSBjb250cm9sbGVyIGZyb20gZWxlbWVudENvbnRyb2xsZXJzIGluIGNhc2VcbiAgICAgICAgICAvL3RoZSBlbGVtZW50IGlzIHRyYW5zY2x1ZGVkIChhbmQgaGFzIG5vIGRhdGEpIGFuZCB0byBhdm9pZCAuZGF0YSBpZiBwb3NzaWJsZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGVsZW1lbnRDb250cm9sbGVycyAmJiBlbGVtZW50Q29udHJvbGxlcnNbbmFtZV07XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICYmIHZhbHVlLmluc3RhbmNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBkYXRhTmFtZSA9ICckJyArIG5hbWUgKyAnQ29udHJvbGxlcic7XG4gICAgICAgICAgICB2YWx1ZSA9IGluaGVyaXRUeXBlID8gJGVsZW1lbnQuaW5oZXJpdGVkRGF0YShkYXRhTmFtZSkgOiAkZWxlbWVudC5kYXRhKGRhdGFOYW1lKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIXZhbHVlICYmICFvcHRpb25hbCkge1xuICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ2N0cmVxJyxcbiAgICAgICAgICAgICAgICBcIkNvbnRyb2xsZXIgJ3swfScsIHJlcXVpcmVkIGJ5IGRpcmVjdGl2ZSAnezF9JywgY2FuJ3QgYmUgZm91bmQhXCIsXG4gICAgICAgICAgICAgICAgbmFtZSwgZGlyZWN0aXZlTmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkocmVxdWlyZSkpIHtcbiAgICAgICAgICB2YWx1ZSA9IFtdO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHJlcXVpcmUubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgdmFsdWVbaV0gPSBnZXRDb250cm9sbGVycyhkaXJlY3RpdmVOYW1lLCByZXF1aXJlW2ldLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWUgfHwgbnVsbDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2V0dXBDb250cm9sbGVycygkZWxlbWVudCwgYXR0cnMsIHRyYW5zY2x1ZGVGbiwgY29udHJvbGxlckRpcmVjdGl2ZXMsIGlzb2xhdGVTY29wZSwgc2NvcGUpIHtcbiAgICAgICAgdmFyIGVsZW1lbnRDb250cm9sbGVycyA9IGNyZWF0ZU1hcCgpO1xuICAgICAgICBmb3IgKHZhciBjb250cm9sbGVyS2V5IGluIGNvbnRyb2xsZXJEaXJlY3RpdmVzKSB7XG4gICAgICAgICAgdmFyIGRpcmVjdGl2ZSA9IGNvbnRyb2xsZXJEaXJlY3RpdmVzW2NvbnRyb2xsZXJLZXldO1xuICAgICAgICAgIHZhciBsb2NhbHMgPSB7XG4gICAgICAgICAgICAkc2NvcGU6IGRpcmVjdGl2ZSA9PT0gbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlIHx8IGRpcmVjdGl2ZS4kJGlzb2xhdGVTY29wZSA/IGlzb2xhdGVTY29wZSA6IHNjb3BlLFxuICAgICAgICAgICAgJGVsZW1lbnQ6ICRlbGVtZW50LFxuICAgICAgICAgICAgJGF0dHJzOiBhdHRycyxcbiAgICAgICAgICAgICR0cmFuc2NsdWRlOiB0cmFuc2NsdWRlRm5cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSBkaXJlY3RpdmUuY29udHJvbGxlcjtcbiAgICAgICAgICBpZiAoY29udHJvbGxlciA9PSAnQCcpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIgPSBhdHRyc1tkaXJlY3RpdmUubmFtZV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGNvbnRyb2xsZXJJbnN0YW5jZSA9ICRjb250cm9sbGVyKGNvbnRyb2xsZXIsIGxvY2FscywgdHJ1ZSwgZGlyZWN0aXZlLmNvbnRyb2xsZXJBcyk7XG5cbiAgICAgICAgICAvLyBGb3IgZGlyZWN0aXZlcyB3aXRoIGVsZW1lbnQgdHJhbnNjbHVzaW9uIHRoZSBlbGVtZW50IGlzIGEgY29tbWVudCxcbiAgICAgICAgICAvLyBidXQgalF1ZXJ5IC5kYXRhIGRvZXNuJ3Qgc3VwcG9ydCBhdHRhY2hpbmcgZGF0YSB0byBjb21tZW50IG5vZGVzIGFzIGl0J3MgaGFyZCB0b1xuICAgICAgICAgIC8vIGNsZWFuIHVwIChodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC84MzM1KS5cbiAgICAgICAgICAvLyBJbnN0ZWFkLCB3ZSBzYXZlIHRoZSBjb250cm9sbGVycyBmb3IgdGhlIGVsZW1lbnQgaW4gYSBsb2NhbCBoYXNoIGFuZCBhdHRhY2ggdG8gLmRhdGFcbiAgICAgICAgICAvLyBsYXRlciwgb25jZSB3ZSBoYXZlIHRoZSBhY3R1YWwgZWxlbWVudC5cbiAgICAgICAgICBlbGVtZW50Q29udHJvbGxlcnNbZGlyZWN0aXZlLm5hbWVdID0gY29udHJvbGxlckluc3RhbmNlO1xuICAgICAgICAgIGlmICghaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgICRlbGVtZW50LmRhdGEoJyQnICsgZGlyZWN0aXZlLm5hbWUgKyAnQ29udHJvbGxlcicsIGNvbnRyb2xsZXJJbnN0YW5jZS5pbnN0YW5jZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbGVtZW50Q29udHJvbGxlcnM7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG5vZGVMaW5rRm4oY2hpbGRMaW5rRm4sIHNjb3BlLCBsaW5rTm9kZSwgJHJvb3RFbGVtZW50LCBib3VuZFRyYW5zY2x1ZGVGbikge1xuICAgICAgICB2YXIgbGlua0ZuLCBpc29sYXRlU2NvcGUsIGNvbnRyb2xsZXJTY29wZSwgZWxlbWVudENvbnRyb2xsZXJzLCB0cmFuc2NsdWRlRm4sICRlbGVtZW50LFxuICAgICAgICAgICAgYXR0cnMsIHJlbW92ZVNjb3BlQmluZGluZ1dhdGNoZXMsIHJlbW92ZUNvbnRyb2xsZXJCaW5kaW5nV2F0Y2hlcztcblxuICAgICAgICBpZiAoY29tcGlsZU5vZGUgPT09IGxpbmtOb2RlKSB7XG4gICAgICAgICAgYXR0cnMgPSB0ZW1wbGF0ZUF0dHJzO1xuICAgICAgICAgICRlbGVtZW50ID0gdGVtcGxhdGVBdHRycy4kJGVsZW1lbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGVsZW1lbnQgPSBqcUxpdGUobGlua05vZGUpO1xuICAgICAgICAgIGF0dHJzID0gbmV3IEF0dHJpYnV0ZXMoJGVsZW1lbnQsIHRlbXBsYXRlQXR0cnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udHJvbGxlclNjb3BlID0gc2NvcGU7XG4gICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICBpc29sYXRlU2NvcGUgPSBzY29wZS4kbmV3KHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKG5ld1Njb3BlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgY29udHJvbGxlclNjb3BlID0gc2NvcGUuJHBhcmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChib3VuZFRyYW5zY2x1ZGVGbikge1xuICAgICAgICAgIC8vIHRyYWNrIGBib3VuZFRyYW5zY2x1ZGVGbmAgc28gaXQgY2FuIGJlIHVud3JhcHBlZCBpZiBgdHJhbnNjbHVkZUZuYFxuICAgICAgICAgIC8vIGlzIGxhdGVyIHBhc3NlZCBhcyBgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm5gIHRvIGBwdWJsaWNMaW5rRm5gXG4gICAgICAgICAgdHJhbnNjbHVkZUZuID0gY29udHJvbGxlcnNCb3VuZFRyYW5zY2x1ZGU7XG4gICAgICAgICAgdHJhbnNjbHVkZUZuLiQkYm91bmRUcmFuc2NsdWRlID0gYm91bmRUcmFuc2NsdWRlRm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udHJvbGxlckRpcmVjdGl2ZXMpIHtcbiAgICAgICAgICBlbGVtZW50Q29udHJvbGxlcnMgPSBzZXR1cENvbnRyb2xsZXJzKCRlbGVtZW50LCBhdHRycywgdHJhbnNjbHVkZUZuLCBjb250cm9sbGVyRGlyZWN0aXZlcywgaXNvbGF0ZVNjb3BlLCBzY29wZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgLy8gSW5pdGlhbGl6ZSBpc29sYXRlIHNjb3BlIGJpbmRpbmdzIGZvciBuZXcgaXNvbGF0ZSBzY29wZSBkaXJlY3RpdmUuXG4gICAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlSW5mbygkZWxlbWVudCwgaXNvbGF0ZVNjb3BlLCB0cnVlLCAhKHRlbXBsYXRlRGlyZWN0aXZlICYmICh0ZW1wbGF0ZURpcmVjdGl2ZSA9PT0gbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlIHx8XG4gICAgICAgICAgICAgIHRlbXBsYXRlRGlyZWN0aXZlID09PSBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUuJCRvcmlnaW5hbERpcmVjdGl2ZSkpKTtcbiAgICAgICAgICBjb21waWxlLiQkYWRkU2NvcGVDbGFzcygkZWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgICAgaXNvbGF0ZVNjb3BlLiQkaXNvbGF0ZUJpbmRpbmdzID1cbiAgICAgICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLiQkaXNvbGF0ZUJpbmRpbmdzO1xuICAgICAgICAgIHJlbW92ZVNjb3BlQmluZGluZ1dhdGNoZXMgPSBpbml0aWFsaXplRGlyZWN0aXZlQmluZGluZ3Moc2NvcGUsIGF0dHJzLCBpc29sYXRlU2NvcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNvbGF0ZVNjb3BlLiQkaXNvbGF0ZUJpbmRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSk7XG4gICAgICAgICAgaWYgKHJlbW92ZVNjb3BlQmluZGluZ1dhdGNoZXMpIHtcbiAgICAgICAgICAgIGlzb2xhdGVTY29wZS4kb24oJyRkZXN0cm95JywgcmVtb3ZlU2NvcGVCaW5kaW5nV2F0Y2hlcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBiaW5kVG9Db250cm9sbGVyIGJpbmRpbmdzXG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gZWxlbWVudENvbnRyb2xsZXJzKSB7XG4gICAgICAgICAgdmFyIGNvbnRyb2xsZXJEaXJlY3RpdmUgPSBjb250cm9sbGVyRGlyZWN0aXZlc1tuYW1lXTtcbiAgICAgICAgICB2YXIgY29udHJvbGxlciA9IGVsZW1lbnRDb250cm9sbGVyc1tuYW1lXTtcbiAgICAgICAgICB2YXIgYmluZGluZ3MgPSBjb250cm9sbGVyRGlyZWN0aXZlLiQkYmluZGluZ3MuYmluZFRvQ29udHJvbGxlcjtcblxuICAgICAgICAgIGlmIChjb250cm9sbGVyLmlkZW50aWZpZXIgJiYgYmluZGluZ3MpIHtcbiAgICAgICAgICAgIHJlbW92ZUNvbnRyb2xsZXJCaW5kaW5nV2F0Y2hlcyA9XG4gICAgICAgICAgICAgIGluaXRpYWxpemVEaXJlY3RpdmVCaW5kaW5ncyhjb250cm9sbGVyU2NvcGUsIGF0dHJzLCBjb250cm9sbGVyLmluc3RhbmNlLCBiaW5kaW5ncywgY29udHJvbGxlckRpcmVjdGl2ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGNvbnRyb2xsZXJSZXN1bHQgPSBjb250cm9sbGVyKCk7XG4gICAgICAgICAgaWYgKGNvbnRyb2xsZXJSZXN1bHQgIT09IGNvbnRyb2xsZXIuaW5zdGFuY2UpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBjb250cm9sbGVyIGNvbnN0cnVjdG9yIGhhcyBhIHJldHVybiB2YWx1ZSwgb3ZlcndyaXRlIHRoZSBpbnN0YW5jZVxuICAgICAgICAgICAgLy8gZnJvbSBzZXR1cENvbnRyb2xsZXJzXG4gICAgICAgICAgICBjb250cm9sbGVyLmluc3RhbmNlID0gY29udHJvbGxlclJlc3VsdDtcbiAgICAgICAgICAgICRlbGVtZW50LmRhdGEoJyQnICsgY29udHJvbGxlckRpcmVjdGl2ZS5uYW1lICsgJ0NvbnRyb2xsZXInLCBjb250cm9sbGVyUmVzdWx0KTtcbiAgICAgICAgICAgIHJlbW92ZUNvbnRyb2xsZXJCaW5kaW5nV2F0Y2hlcyAmJiByZW1vdmVDb250cm9sbGVyQmluZGluZ1dhdGNoZXMoKTtcbiAgICAgICAgICAgIHJlbW92ZUNvbnRyb2xsZXJCaW5kaW5nV2F0Y2hlcyA9XG4gICAgICAgICAgICAgIGluaXRpYWxpemVEaXJlY3RpdmVCaW5kaW5ncyhjb250cm9sbGVyU2NvcGUsIGF0dHJzLCBjb250cm9sbGVyLmluc3RhbmNlLCBiaW5kaW5ncywgY29udHJvbGxlckRpcmVjdGl2ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUFJFTElOS0lOR1xuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHByZUxpbmtGbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIGxpbmtGbiA9IHByZUxpbmtGbnNbaV07XG4gICAgICAgICAgaW52b2tlTGlua0ZuKGxpbmtGbixcbiAgICAgICAgICAgICAgbGlua0ZuLmlzb2xhdGVTY29wZSA/IGlzb2xhdGVTY29wZSA6IHNjb3BlLFxuICAgICAgICAgICAgICAkZWxlbWVudCxcbiAgICAgICAgICAgICAgYXR0cnMsXG4gICAgICAgICAgICAgIGxpbmtGbi5yZXF1aXJlICYmIGdldENvbnRyb2xsZXJzKGxpbmtGbi5kaXJlY3RpdmVOYW1lLCBsaW5rRm4ucmVxdWlyZSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycyksXG4gICAgICAgICAgICAgIHRyYW5zY2x1ZGVGblxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSRUNVUlNJT05cbiAgICAgICAgLy8gV2Ugb25seSBwYXNzIHRoZSBpc29sYXRlIHNjb3BlLCBpZiB0aGUgaXNvbGF0ZSBkaXJlY3RpdmUgaGFzIGEgdGVtcGxhdGUsXG4gICAgICAgIC8vIG90aGVyd2lzZSB0aGUgY2hpbGQgZWxlbWVudHMgZG8gbm90IGJlbG9uZyB0byB0aGUgaXNvbGF0ZSBkaXJlY3RpdmUuXG4gICAgICAgIHZhciBzY29wZVRvQ2hpbGQgPSBzY29wZTtcbiAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSAmJiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLnRlbXBsYXRlIHx8IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS50ZW1wbGF0ZVVybCA9PT0gbnVsbCkpIHtcbiAgICAgICAgICBzY29wZVRvQ2hpbGQgPSBpc29sYXRlU2NvcGU7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGRMaW5rRm4gJiYgY2hpbGRMaW5rRm4oc2NvcGVUb0NoaWxkLCBsaW5rTm9kZS5jaGlsZE5vZGVzLCB1bmRlZmluZWQsIGJvdW5kVHJhbnNjbHVkZUZuKTtcblxuICAgICAgICAvLyBQT1NUTElOS0lOR1xuICAgICAgICBmb3IgKGkgPSBwb3N0TGlua0Zucy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGxpbmtGbiA9IHBvc3RMaW5rRm5zW2ldO1xuICAgICAgICAgIGludm9rZUxpbmtGbihsaW5rRm4sXG4gICAgICAgICAgICAgIGxpbmtGbi5pc29sYXRlU2NvcGUgPyBpc29sYXRlU2NvcGUgOiBzY29wZSxcbiAgICAgICAgICAgICAgJGVsZW1lbnQsXG4gICAgICAgICAgICAgIGF0dHJzLFxuICAgICAgICAgICAgICBsaW5rRm4ucmVxdWlyZSAmJiBnZXRDb250cm9sbGVycyhsaW5rRm4uZGlyZWN0aXZlTmFtZSwgbGlua0ZuLnJlcXVpcmUsICRlbGVtZW50LCBlbGVtZW50Q29udHJvbGxlcnMpLFxuICAgICAgICAgICAgICB0cmFuc2NsdWRlRm5cbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgZnVuY3Rpb24gdGhhdCBpcyBpbmplY3RlZCBhcyBgJHRyYW5zY2x1ZGVgLlxuICAgICAgICAvLyBOb3RlOiBhbGwgYXJndW1lbnRzIGFyZSBvcHRpb25hbCFcbiAgICAgICAgZnVuY3Rpb24gY29udHJvbGxlcnNCb3VuZFRyYW5zY2x1ZGUoc2NvcGUsIGNsb25lQXR0YWNoRm4sIGZ1dHVyZVBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgdHJhbnNjbHVkZUNvbnRyb2xsZXJzO1xuXG4gICAgICAgICAgLy8gTm8gc2NvcGUgcGFzc2VkIGluOlxuICAgICAgICAgIGlmICghaXNTY29wZShzY29wZSkpIHtcbiAgICAgICAgICAgIGZ1dHVyZVBhcmVudEVsZW1lbnQgPSBjbG9uZUF0dGFjaEZuO1xuICAgICAgICAgICAgY2xvbmVBdHRhY2hGbiA9IHNjb3BlO1xuICAgICAgICAgICAgc2NvcGUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgICB0cmFuc2NsdWRlQ29udHJvbGxlcnMgPSBlbGVtZW50Q29udHJvbGxlcnM7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZnV0dXJlUGFyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgZnV0dXJlUGFyZW50RWxlbWVudCA9IGhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlID8gJGVsZW1lbnQucGFyZW50KCkgOiAkZWxlbWVudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCBjbG9uZUF0dGFjaEZuLCB0cmFuc2NsdWRlQ29udHJvbGxlcnMsIGZ1dHVyZVBhcmVudEVsZW1lbnQsIHNjb3BlVG9DaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZXBlbmRpbmcgdXBvbiB0aGUgY29udGV4dCBpbiB3aGljaCBhIGRpcmVjdGl2ZSBmaW5kcyBpdHNlbGYgaXQgbWlnaHQgbmVlZCB0byBoYXZlIGEgbmV3IGlzb2xhdGVkXG4gICAgLy8gb3IgY2hpbGQgc2NvcGUgY3JlYXRlZC4gRm9yIGluc3RhbmNlOlxuICAgIC8vICogaWYgdGhlIGRpcmVjdGl2ZSBoYXMgYmVlbiBwdWxsZWQgaW50byBhIHRlbXBsYXRlIGJlY2F1c2UgYW5vdGhlciBkaXJlY3RpdmUgd2l0aCBhIGhpZ2hlciBwcmlvcml0eVxuICAgIC8vIGFza2VkIGZvciBlbGVtZW50IHRyYW5zY2x1c2lvblxuICAgIC8vICogaWYgdGhlIGRpcmVjdGl2ZSBpdHNlbGYgYXNrcyBmb3IgdHJhbnNjbHVzaW9uIGJ1dCBpdCBpcyBhdCB0aGUgcm9vdCBvZiBhIHRlbXBsYXRlIGFuZCB0aGUgb3JpZ2luYWxcbiAgICAvLyBlbGVtZW50IHdhcyByZXBsYWNlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzEyOTM2XG4gICAgZnVuY3Rpb24gbWFya0RpcmVjdGl2ZVNjb3BlKGRpcmVjdGl2ZXMsIGlzb2xhdGVTY29wZSwgbmV3U2NvcGUpIHtcbiAgICAgIGZvciAodmFyIGogPSAwLCBqaiA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICBkaXJlY3RpdmVzW2pdID0gaW5oZXJpdChkaXJlY3RpdmVzW2pdLCB7JCRpc29sYXRlU2NvcGU6IGlzb2xhdGVTY29wZSwgJCRuZXdTY29wZTogbmV3U2NvcGV9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBsb29rcyB1cCB0aGUgZGlyZWN0aXZlIGFuZCBkZWNvcmF0ZXMgaXQgd2l0aCBleGNlcHRpb24gaGFuZGxpbmcgYW5kIHByb3BlciBwYXJhbWV0ZXJzLiBXZVxuICAgICAqIGNhbGwgdGhpcyB0aGUgYm91bmREaXJlY3RpdmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBkaXJlY3RpdmUgdG8gbG9vayB1cC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb24gVGhlIGRpcmVjdGl2ZSBtdXN0IGJlIGZvdW5kIGluIHNwZWNpZmljIGZvcm1hdC5cbiAgICAgKiAgIFN0cmluZyBjb250YWluaW5nIGFueSBvZiB0aGVzZXMgY2hhcmFjdGVyczpcbiAgICAgKlxuICAgICAqICAgKiBgRWA6IGVsZW1lbnQgbmFtZVxuICAgICAqICAgKiBgQSc6IGF0dHJpYnV0ZVxuICAgICAqICAgKiBgQ2A6IGNsYXNzXG4gICAgICogICAqIGBNYDogY29tbWVudFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIGRpcmVjdGl2ZSB3YXMgYWRkZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkRGlyZWN0aXZlKHREaXJlY3RpdmVzLCBuYW1lLCBsb2NhdGlvbiwgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgc3RhcnRBdHRyTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kQXR0ck5hbWUpIHtcbiAgICAgIGlmIChuYW1lID09PSBpZ25vcmVEaXJlY3RpdmUpIHJldHVybiBudWxsO1xuICAgICAgdmFyIG1hdGNoID0gbnVsbDtcbiAgICAgIGlmIChoYXNEaXJlY3RpdmVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGZvciAodmFyIGRpcmVjdGl2ZSwgZGlyZWN0aXZlcyA9ICRpbmplY3Rvci5nZXQobmFtZSArIFN1ZmZpeCksXG4gICAgICAgICAgICBpID0gMCwgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGlyZWN0aXZlID0gZGlyZWN0aXZlc1tpXTtcbiAgICAgICAgICAgIGlmICgoaXNVbmRlZmluZWQobWF4UHJpb3JpdHkpIHx8IG1heFByaW9yaXR5ID4gZGlyZWN0aXZlLnByaW9yaXR5KSAmJlxuICAgICAgICAgICAgICAgICBkaXJlY3RpdmUucmVzdHJpY3QuaW5kZXhPZihsb2NhdGlvbikgIT0gLTEpIHtcbiAgICAgICAgICAgICAgaWYgKHN0YXJ0QXR0ck5hbWUpIHtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUgPSBpbmhlcml0KGRpcmVjdGl2ZSwgeyQkc3RhcnQ6IHN0YXJ0QXR0ck5hbWUsICQkZW5kOiBlbmRBdHRyTmFtZX0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHREaXJlY3RpdmVzLnB1c2goZGlyZWN0aXZlKTtcbiAgICAgICAgICAgICAgbWF0Y2ggPSBkaXJlY3RpdmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkgeyAkZXhjZXB0aW9uSGFuZGxlcihlKTsgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBsb29rcyB1cCB0aGUgZGlyZWN0aXZlIGFuZCByZXR1cm5zIHRydWUgaWYgaXQgaXMgYSBtdWx0aS1lbGVtZW50IGRpcmVjdGl2ZSxcbiAgICAgKiBhbmQgdGhlcmVmb3JlIHJlcXVpcmVzIERPTSBub2RlcyBiZXR3ZWVuIC1zdGFydCBhbmQgLWVuZCBtYXJrZXJzIHRvIGJlIGdyb3VwZWRcbiAgICAgKiB0b2dldGhlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGRpcmVjdGl2ZSB0byBsb29rIHVwLlxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgZGlyZWN0aXZlIHdhcyByZWdpc3RlcmVkIGFzIG11bHRpLWVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGlyZWN0aXZlSXNNdWx0aUVsZW1lbnQobmFtZSkge1xuICAgICAgaWYgKGhhc0RpcmVjdGl2ZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgZm9yICh2YXIgZGlyZWN0aXZlLCBkaXJlY3RpdmVzID0gJGluamVjdG9yLmdldChuYW1lICsgU3VmZml4KSxcbiAgICAgICAgICAgIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIGRpcmVjdGl2ZSA9IGRpcmVjdGl2ZXNbaV07XG4gICAgICAgICAgaWYgKGRpcmVjdGl2ZS5tdWx0aUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIGVsZW1lbnQgaXMgcmVwbGFjZWQgd2l0aCBIVE1MIHRlbXBsYXRlIHRoZW4gdGhlIG5ldyBhdHRyaWJ1dGVzXG4gICAgICogb24gdGhlIHRlbXBsYXRlIG5lZWQgdG8gYmUgbWVyZ2VkIHdpdGggdGhlIGV4aXN0aW5nIGF0dHJpYnV0ZXMgaW4gdGhlIERPTS5cbiAgICAgKiBUaGUgZGVzaXJlZCBlZmZlY3QgaXMgdG8gaGF2ZSBib3RoIG9mIHRoZSBhdHRyaWJ1dGVzIHByZXNlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZHN0IGRlc3RpbmF0aW9uIGF0dHJpYnV0ZXMgKG9yaWdpbmFsIERPTSlcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gc3JjIHNvdXJjZSBhdHRyaWJ1dGVzIChmcm9tIHRoZSBkaXJlY3RpdmUgdGVtcGxhdGUpXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVyZ2VUZW1wbGF0ZUF0dHJpYnV0ZXMoZHN0LCBzcmMpIHtcbiAgICAgIHZhciBzcmNBdHRyID0gc3JjLiRhdHRyLFxuICAgICAgICAgIGRzdEF0dHIgPSBkc3QuJGF0dHIsXG4gICAgICAgICAgJGVsZW1lbnQgPSBkc3QuJCRlbGVtZW50O1xuXG4gICAgICAvLyByZWFwcGx5IHRoZSBvbGQgYXR0cmlidXRlcyB0byB0aGUgbmV3IGVsZW1lbnRcbiAgICAgIGZvckVhY2goZHN0LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChrZXkuY2hhckF0KDApICE9ICckJykge1xuICAgICAgICAgIGlmIChzcmNba2V5XSAmJiBzcmNba2V5XSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHZhbHVlICs9IChrZXkgPT09ICdzdHlsZScgPyAnOycgOiAnICcpICsgc3JjW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGRzdC4kc2V0KGtleSwgdmFsdWUsIHRydWUsIHNyY0F0dHJba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBjb3B5IHRoZSBuZXcgYXR0cmlidXRlcyBvbiB0aGUgb2xkIGF0dHJzIG9iamVjdFxuICAgICAgZm9yRWFjaChzcmMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKGtleSA9PSAnY2xhc3MnKSB7XG4gICAgICAgICAgc2FmZUFkZENsYXNzKCRlbGVtZW50LCB2YWx1ZSk7XG4gICAgICAgICAgZHN0WydjbGFzcyddID0gKGRzdFsnY2xhc3MnXSA/IGRzdFsnY2xhc3MnXSArICcgJyA6ICcnKSArIHZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PSAnc3R5bGUnKSB7XG4gICAgICAgICAgJGVsZW1lbnQuYXR0cignc3R5bGUnLCAkZWxlbWVudC5hdHRyKCdzdHlsZScpICsgJzsnICsgdmFsdWUpO1xuICAgICAgICAgIGRzdFsnc3R5bGUnXSA9IChkc3RbJ3N0eWxlJ10gPyBkc3RbJ3N0eWxlJ10gKyAnOycgOiAnJykgKyB2YWx1ZTtcbiAgICAgICAgICAvLyBgZHN0YCB3aWxsIG5ldmVyIGNvbnRhaW4gaGFzT3duUHJvcGVydHkgYXMgRE9NIHBhcnNlciB3b24ndCBsZXQgaXQuXG4gICAgICAgICAgLy8gWW91IHdpbGwgZ2V0IGFuIFwiSW52YWxpZENoYXJhY3RlckVycm9yOiBET00gRXhjZXB0aW9uIDVcIiBlcnJvciBpZiB5b3VcbiAgICAgICAgICAvLyBoYXZlIGFuIGF0dHJpYnV0ZSBsaWtlIFwiaGFzLW93bi1wcm9wZXJ0eVwiIG9yIFwiZGF0YS1oYXMtb3duLXByb3BlcnR5XCIsIGV0Yy5cbiAgICAgICAgfSBlbHNlIGlmIChrZXkuY2hhckF0KDApICE9ICckJyAmJiAhZHN0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBkc3Rba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIGRzdEF0dHJba2V5XSA9IHNyY0F0dHJba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBjb21waWxlVGVtcGxhdGVVcmwoZGlyZWN0aXZlcywgJGNvbXBpbGVOb2RlLCB0QXR0cnMsXG4gICAgICAgICRyb290RWxlbWVudCwgY2hpbGRUcmFuc2NsdWRlRm4sIHByZUxpbmtGbnMsIHBvc3RMaW5rRm5zLCBwcmV2aW91c0NvbXBpbGVDb250ZXh0KSB7XG4gICAgICB2YXIgbGlua1F1ZXVlID0gW10sXG4gICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4sXG4gICAgICAgICAgYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuLFxuICAgICAgICAgIGJlZm9yZVRlbXBsYXRlQ29tcGlsZU5vZGUgPSAkY29tcGlsZU5vZGVbMF0sXG4gICAgICAgICAgb3JpZ0FzeW5jRGlyZWN0aXZlID0gZGlyZWN0aXZlcy5zaGlmdCgpLFxuICAgICAgICAgIGRlcml2ZWRTeW5jRGlyZWN0aXZlID0gaW5oZXJpdChvcmlnQXN5bmNEaXJlY3RpdmUsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBudWxsLCB0cmFuc2NsdWRlOiBudWxsLCByZXBsYWNlOiBudWxsLCAkJG9yaWdpbmFsRGlyZWN0aXZlOiBvcmlnQXN5bmNEaXJlY3RpdmVcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB0ZW1wbGF0ZVVybCA9IChpc0Z1bmN0aW9uKG9yaWdBc3luY0RpcmVjdGl2ZS50ZW1wbGF0ZVVybCkpXG4gICAgICAgICAgICAgID8gb3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlVXJsKCRjb21waWxlTm9kZSwgdEF0dHJzKVxuICAgICAgICAgICAgICA6IG9yaWdBc3luY0RpcmVjdGl2ZS50ZW1wbGF0ZVVybCxcbiAgICAgICAgICB0ZW1wbGF0ZU5hbWVzcGFjZSA9IG9yaWdBc3luY0RpcmVjdGl2ZS50ZW1wbGF0ZU5hbWVzcGFjZTtcblxuICAgICAgJGNvbXBpbGVOb2RlLmVtcHR5KCk7XG5cbiAgICAgICR0ZW1wbGF0ZVJlcXVlc3QodGVtcGxhdGVVcmwpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgICAgICAgICB2YXIgY29tcGlsZU5vZGUsIHRlbXBUZW1wbGF0ZUF0dHJzLCAkdGVtcGxhdGUsIGNoaWxkQm91bmRUcmFuc2NsdWRlRm47XG5cbiAgICAgICAgICBjb250ZW50ID0gZGVub3JtYWxpemVUZW1wbGF0ZShjb250ZW50KTtcblxuICAgICAgICAgIGlmIChvcmlnQXN5bmNEaXJlY3RpdmUucmVwbGFjZSkge1xuICAgICAgICAgICAgaWYgKGpxTGl0ZUlzVGV4dE5vZGUoY29udGVudCkpIHtcbiAgICAgICAgICAgICAgJHRlbXBsYXRlID0gW107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAkdGVtcGxhdGUgPSByZW1vdmVDb21tZW50cyh3cmFwVGVtcGxhdGUodGVtcGxhdGVOYW1lc3BhY2UsIHRyaW0oY29udGVudCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXBpbGVOb2RlID0gJHRlbXBsYXRlWzBdO1xuXG4gICAgICAgICAgICBpZiAoJHRlbXBsYXRlLmxlbmd0aCAhPSAxIHx8IGNvbXBpbGVOb2RlLm5vZGVUeXBlICE9PSBOT0RFX1RZUEVfRUxFTUVOVCkge1xuICAgICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigndHBscnQnLFxuICAgICAgICAgICAgICAgICAgXCJUZW1wbGF0ZSBmb3IgZGlyZWN0aXZlICd7MH0nIG11c3QgaGF2ZSBleGFjdGx5IG9uZSByb290IGVsZW1lbnQuIHsxfVwiLFxuICAgICAgICAgICAgICAgICAgb3JpZ0FzeW5jRGlyZWN0aXZlLm5hbWUsIHRlbXBsYXRlVXJsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGVtcFRlbXBsYXRlQXR0cnMgPSB7JGF0dHI6IHt9fTtcbiAgICAgICAgICAgIHJlcGxhY2VXaXRoKCRyb290RWxlbWVudCwgJGNvbXBpbGVOb2RlLCBjb21waWxlTm9kZSk7XG4gICAgICAgICAgICB2YXIgdGVtcGxhdGVEaXJlY3RpdmVzID0gY29sbGVjdERpcmVjdGl2ZXMoY29tcGlsZU5vZGUsIFtdLCB0ZW1wVGVtcGxhdGVBdHRycyk7XG5cbiAgICAgICAgICAgIGlmIChpc09iamVjdChvcmlnQXN5bmNEaXJlY3RpdmUuc2NvcGUpKSB7XG4gICAgICAgICAgICAgIC8vIHRoZSBvcmlnaW5hbCBkaXJlY3RpdmUgdGhhdCBjYXVzZWQgdGhlIHRlbXBsYXRlIHRvIGJlIGxvYWRlZCBhc3luYyByZXF1aXJlZFxuICAgICAgICAgICAgICAvLyBhbiBpc29sYXRlIHNjb3BlXG4gICAgICAgICAgICAgIG1hcmtEaXJlY3RpdmVTY29wZSh0ZW1wbGF0ZURpcmVjdGl2ZXMsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGlyZWN0aXZlcyA9IHRlbXBsYXRlRGlyZWN0aXZlcy5jb25jYXQoZGlyZWN0aXZlcyk7XG4gICAgICAgICAgICBtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyh0QXR0cnMsIHRlbXBUZW1wbGF0ZUF0dHJzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29tcGlsZU5vZGUgPSBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlO1xuICAgICAgICAgICAgJGNvbXBpbGVOb2RlLmh0bWwoY29udGVudCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGlyZWN0aXZlcy51bnNoaWZ0KGRlcml2ZWRTeW5jRGlyZWN0aXZlKTtcblxuICAgICAgICAgIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuID0gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIGNvbXBpbGVOb2RlLCB0QXR0cnMsXG4gICAgICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuLCAkY29tcGlsZU5vZGUsIG9yaWdBc3luY0RpcmVjdGl2ZSwgcHJlTGlua0ZucywgcG9zdExpbmtGbnMsXG4gICAgICAgICAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpO1xuICAgICAgICAgIGZvckVhY2goJHJvb3RFbGVtZW50LCBmdW5jdGlvbihub2RlLCBpKSB7XG4gICAgICAgICAgICBpZiAobm9kZSA9PSBjb21waWxlTm9kZSkge1xuICAgICAgICAgICAgICAkcm9vdEVsZW1lbnRbaV0gPSAkY29tcGlsZU5vZGVbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuID0gY29tcGlsZU5vZGVzKCRjb21waWxlTm9kZVswXS5jaGlsZE5vZGVzLCBjaGlsZFRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgICB3aGlsZSAobGlua1F1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHNjb3BlID0gbGlua1F1ZXVlLnNoaWZ0KCksXG4gICAgICAgICAgICAgICAgYmVmb3JlVGVtcGxhdGVMaW5rTm9kZSA9IGxpbmtRdWV1ZS5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIGxpbmtSb290RWxlbWVudCA9IGxpbmtRdWV1ZS5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIGJvdW5kVHJhbnNjbHVkZUZuID0gbGlua1F1ZXVlLnNoaWZ0KCksXG4gICAgICAgICAgICAgICAgbGlua05vZGUgPSAkY29tcGlsZU5vZGVbMF07XG5cbiAgICAgICAgICAgIGlmIChzY29wZS4kJGRlc3Ryb3llZCkgY29udGludWU7XG5cbiAgICAgICAgICAgIGlmIChiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlICE9PSBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlKSB7XG4gICAgICAgICAgICAgIHZhciBvbGRDbGFzc2VzID0gYmVmb3JlVGVtcGxhdGVMaW5rTm9kZS5jbGFzc05hbWU7XG5cbiAgICAgICAgICAgICAgaWYgKCEocHJldmlvdXNDb21waWxlQ29udGV4dC5oYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSAmJlxuICAgICAgICAgICAgICAgICAgb3JpZ0FzeW5jRGlyZWN0aXZlLnJlcGxhY2UpKSB7XG4gICAgICAgICAgICAgICAgLy8gaXQgd2FzIGNsb25lZCB0aGVyZWZvcmUgd2UgaGF2ZSB0byBjbG9uZSBhcyB3ZWxsLlxuICAgICAgICAgICAgICAgIGxpbmtOb2RlID0ganFMaXRlQ2xvbmUoY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlcGxhY2VXaXRoKGxpbmtSb290RWxlbWVudCwganFMaXRlKGJlZm9yZVRlbXBsYXRlTGlua05vZGUpLCBsaW5rTm9kZSk7XG5cbiAgICAgICAgICAgICAgLy8gQ29weSBpbiBDU1MgY2xhc3NlcyBmcm9tIG9yaWdpbmFsIG5vZGVcbiAgICAgICAgICAgICAgc2FmZUFkZENsYXNzKGpxTGl0ZShsaW5rTm9kZSksIG9sZENsYXNzZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50KSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZSwgYm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IGJvdW5kVHJhbnNjbHVkZUZuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4oYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuLCBzY29wZSwgbGlua05vZGUsICRyb290RWxlbWVudCxcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxpbmtRdWV1ZSA9IG51bGw7XG4gICAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gZGVsYXllZE5vZGVMaW5rRm4oaWdub3JlQ2hpbGRMaW5rRm4sIHNjb3BlLCBub2RlLCByb290RWxlbWVudCwgYm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgdmFyIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBib3VuZFRyYW5zY2x1ZGVGbjtcbiAgICAgICAgaWYgKHNjb3BlLiQkZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgIGlmIChsaW5rUXVldWUpIHtcbiAgICAgICAgICBsaW5rUXVldWUucHVzaChzY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChhZnRlclRlbXBsYXRlTm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCkge1xuICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbi50cmFuc2NsdWRlLCBib3VuZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuKGFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbiwgc2NvcGUsIG5vZGUsIHJvb3RFbGVtZW50LCBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFNvcnRpbmcgZnVuY3Rpb24gZm9yIGJvdW5kIGRpcmVjdGl2ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYnlQcmlvcml0eShhLCBiKSB7XG4gICAgICB2YXIgZGlmZiA9IGIucHJpb3JpdHkgLSBhLnByaW9yaXR5O1xuICAgICAgaWYgKGRpZmYgIT09IDApIHJldHVybiBkaWZmO1xuICAgICAgaWYgKGEubmFtZSAhPT0gYi5uYW1lKSByZXR1cm4gKGEubmFtZSA8IGIubmFtZSkgPyAtMSA6IDE7XG4gICAgICByZXR1cm4gYS5pbmRleCAtIGIuaW5kZXg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXNzZXJ0Tm9EdXBsaWNhdGUod2hhdCwgcHJldmlvdXNEaXJlY3RpdmUsIGRpcmVjdGl2ZSwgZWxlbWVudCkge1xuXG4gICAgICBmdW5jdGlvbiB3cmFwTW9kdWxlTmFtZUlmRGVmaW5lZChtb2R1bGVOYW1lKSB7XG4gICAgICAgIHJldHVybiBtb2R1bGVOYW1lID9cbiAgICAgICAgICAoJyAobW9kdWxlOiAnICsgbW9kdWxlTmFtZSArICcpJykgOlxuICAgICAgICAgICcnO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJldmlvdXNEaXJlY3RpdmUpIHtcbiAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ211bHRpZGlyJywgJ011bHRpcGxlIGRpcmVjdGl2ZXMgW3swfXsxfSwgezJ9ezN9XSBhc2tpbmcgZm9yIHs0fSBvbjogezV9JyxcbiAgICAgICAgICAgIHByZXZpb3VzRGlyZWN0aXZlLm5hbWUsIHdyYXBNb2R1bGVOYW1lSWZEZWZpbmVkKHByZXZpb3VzRGlyZWN0aXZlLiQkbW9kdWxlTmFtZSksXG4gICAgICAgICAgICBkaXJlY3RpdmUubmFtZSwgd3JhcE1vZHVsZU5hbWVJZkRlZmluZWQoZGlyZWN0aXZlLiQkbW9kdWxlTmFtZSksIHdoYXQsIHN0YXJ0aW5nVGFnKGVsZW1lbnQpKTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGFkZFRleHRJbnRlcnBvbGF0ZURpcmVjdGl2ZShkaXJlY3RpdmVzLCB0ZXh0KSB7XG4gICAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZSh0ZXh0LCB0cnVlKTtcbiAgICAgIGlmIChpbnRlcnBvbGF0ZUZuKSB7XG4gICAgICAgIGRpcmVjdGl2ZXMucHVzaCh7XG4gICAgICAgICAgcHJpb3JpdHk6IDAsXG4gICAgICAgICAgY29tcGlsZTogZnVuY3Rpb24gdGV4dEludGVycG9sYXRlQ29tcGlsZUZuKHRlbXBsYXRlTm9kZSkge1xuICAgICAgICAgICAgdmFyIHRlbXBsYXRlTm9kZVBhcmVudCA9IHRlbXBsYXRlTm9kZS5wYXJlbnQoKSxcbiAgICAgICAgICAgICAgICBoYXNDb21waWxlUGFyZW50ID0gISF0ZW1wbGF0ZU5vZGVQYXJlbnQubGVuZ3RoO1xuXG4gICAgICAgICAgICAvLyBXaGVuIHRyYW5zY2x1ZGluZyBhIHRlbXBsYXRlIHRoYXQgaGFzIGJpbmRpbmdzIGluIHRoZSByb290XG4gICAgICAgICAgICAvLyB3ZSBkb24ndCBoYXZlIGEgcGFyZW50IGFuZCB0aHVzIG5lZWQgdG8gYWRkIHRoZSBjbGFzcyBkdXJpbmcgbGlua2luZyBmbi5cbiAgICAgICAgICAgIGlmIChoYXNDb21waWxlUGFyZW50KSBjb21waWxlLiQkYWRkQmluZGluZ0NsYXNzKHRlbXBsYXRlTm9kZVBhcmVudCk7XG5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiB0ZXh0SW50ZXJwb2xhdGVMaW5rRm4oc2NvcGUsIG5vZGUpIHtcbiAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50KCk7XG4gICAgICAgICAgICAgIGlmICghaGFzQ29tcGlsZVBhcmVudCkgY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyhwYXJlbnQpO1xuICAgICAgICAgICAgICBjb21waWxlLiQkYWRkQmluZGluZ0luZm8ocGFyZW50LCBpbnRlcnBvbGF0ZUZuLmV4cHJlc3Npb25zKTtcbiAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGludGVycG9sYXRlRm4sIGZ1bmN0aW9uIGludGVycG9sYXRlRm5XYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIG5vZGVbMF0ubm9kZVZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gd3JhcFRlbXBsYXRlKHR5cGUsIHRlbXBsYXRlKSB7XG4gICAgICB0eXBlID0gbG93ZXJjYXNlKHR5cGUgfHwgJ2h0bWwnKTtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnc3ZnJzpcbiAgICAgIGNhc2UgJ21hdGgnOlxuICAgICAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB3cmFwcGVyLmlubmVySFRNTCA9ICc8JyArIHR5cGUgKyAnPicgKyB0ZW1wbGF0ZSArICc8LycgKyB0eXBlICsgJz4nO1xuICAgICAgICByZXR1cm4gd3JhcHBlci5jaGlsZE5vZGVzWzBdLmNoaWxkTm9kZXM7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBnZXRUcnVzdGVkQ29udGV4dChub2RlLCBhdHRyTm9ybWFsaXplZE5hbWUpIHtcbiAgICAgIGlmIChhdHRyTm9ybWFsaXplZE5hbWUgPT0gXCJzcmNkb2NcIikge1xuICAgICAgICByZXR1cm4gJHNjZS5IVE1MO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IG5vZGVOYW1lXyhub2RlKTtcbiAgICAgIC8vIG1hY3Rpb25beGxpbms6aHJlZl0gY2FuIHNvdXJjZSBTVkcuICBJdCdzIG5vdCBsaW1pdGVkIHRvIDxtYWN0aW9uPi5cbiAgICAgIGlmIChhdHRyTm9ybWFsaXplZE5hbWUgPT0gXCJ4bGlua0hyZWZcIiB8fFxuICAgICAgICAgICh0YWcgPT0gXCJmb3JtXCIgJiYgYXR0ck5vcm1hbGl6ZWROYW1lID09IFwiYWN0aW9uXCIpIHx8XG4gICAgICAgICAgKHRhZyAhPSBcImltZ1wiICYmIChhdHRyTm9ybWFsaXplZE5hbWUgPT0gXCJzcmNcIiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOb3JtYWxpemVkTmFtZSA9PSBcIm5nU3JjXCIpKSkge1xuICAgICAgICByZXR1cm4gJHNjZS5SRVNPVVJDRV9VUkw7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBhZGRBdHRySW50ZXJwb2xhdGVEaXJlY3RpdmUobm9kZSwgZGlyZWN0aXZlcywgdmFsdWUsIG5hbWUsIGFsbE9yTm90aGluZykge1xuICAgICAgdmFyIHRydXN0ZWRDb250ZXh0ID0gZ2V0VHJ1c3RlZENvbnRleHQobm9kZSwgbmFtZSk7XG4gICAgICBhbGxPck5vdGhpbmcgPSBBTExfT1JfTk9USElOR19BVFRSU1tuYW1lXSB8fCBhbGxPck5vdGhpbmc7XG5cbiAgICAgIHZhciBpbnRlcnBvbGF0ZUZuID0gJGludGVycG9sYXRlKHZhbHVlLCB0cnVlLCB0cnVzdGVkQ29udGV4dCwgYWxsT3JOb3RoaW5nKTtcblxuICAgICAgLy8gbm8gaW50ZXJwb2xhdGlvbiBmb3VuZCAtPiBpZ25vcmVcbiAgICAgIGlmICghaW50ZXJwb2xhdGVGbikgcmV0dXJuO1xuXG5cbiAgICAgIGlmIChuYW1lID09PSBcIm11bHRpcGxlXCIgJiYgbm9kZU5hbWVfKG5vZGUpID09PSBcInNlbGVjdFwiKSB7XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKFwic2VsbXVsdGlcIixcbiAgICAgICAgICAgIFwiQmluZGluZyB0byB0aGUgJ211bHRpcGxlJyBhdHRyaWJ1dGUgaXMgbm90IHN1cHBvcnRlZC4gRWxlbWVudDogezB9XCIsXG4gICAgICAgICAgICBzdGFydGluZ1RhZyhub2RlKSk7XG4gICAgICB9XG5cbiAgICAgIGRpcmVjdGl2ZXMucHVzaCh7XG4gICAgICAgIHByaW9yaXR5OiAxMDAsXG4gICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgcHJlOiBmdW5jdGlvbiBhdHRySW50ZXJwb2xhdGVQcmVMaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgICAgICAgICB2YXIgJCRvYnNlcnZlcnMgPSAoYXR0ci4kJG9ic2VydmVycyB8fCAoYXR0ci4kJG9ic2VydmVycyA9IGNyZWF0ZU1hcCgpKSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoRVZFTlRfSEFORExFUl9BVFRSX1JFR0VYUC50ZXN0KG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignbm9kb21ldmVudHMnLFxuICAgICAgICAgICAgICAgICAgICAgIFwiSW50ZXJwb2xhdGlvbnMgZm9yIEhUTUwgRE9NIGV2ZW50IGF0dHJpYnV0ZXMgYXJlIGRpc2FsbG93ZWQuICBQbGVhc2UgdXNlIHRoZSBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwibmctIHZlcnNpb25zIChzdWNoIGFzIG5nLWNsaWNrIGluc3RlYWQgb2Ygb25jbGljaykgaW5zdGVhZC5cIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGF0dHJpYnV0ZSBoYXMgY2hhbmdlZCBzaW5jZSBsYXN0ICRpbnRlcnBvbGF0ZSgpZWRcbiAgICAgICAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBhdHRyW25hbWVdO1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gaW50ZXJwb2xhdGUgYWdhaW4gc2luY2UgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBoYXMgYmVlbiB1cGRhdGVkXG4gICAgICAgICAgICAgICAgICAvLyAoZS5nLiBieSBhbm90aGVyIGRpcmVjdGl2ZSdzIGNvbXBpbGUgZnVuY3Rpb24pXG4gICAgICAgICAgICAgICAgICAvLyBlbnN1cmUgdW5zZXQvZW1wdHkgdmFsdWVzIG1ha2UgaW50ZXJwb2xhdGVGbiBmYWxzeVxuICAgICAgICAgICAgICAgICAgaW50ZXJwb2xhdGVGbiA9IG5ld1ZhbHVlICYmICRpbnRlcnBvbGF0ZShuZXdWYWx1ZSwgdHJ1ZSwgdHJ1c3RlZENvbnRleHQsIGFsbE9yTm90aGluZyk7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGlmIGF0dHJpYnV0ZSB3YXMgdXBkYXRlZCBzbyB0aGF0IHRoZXJlIGlzIG5vIGludGVycG9sYXRpb24gZ29pbmcgb24gd2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgICAgICAgICAgIC8vIHJlZ2lzdGVyIGFueSBvYnNlcnZlcnNcbiAgICAgICAgICAgICAgICBpZiAoIWludGVycG9sYXRlRm4pIHJldHVybjtcblxuICAgICAgICAgICAgICAgIC8vIGluaXRpYWxpemUgYXR0ciBvYmplY3Qgc28gdGhhdCBpdCdzIHJlYWR5IGluIGNhc2Ugd2UgbmVlZCB0aGUgdmFsdWUgZm9yIGlzb2xhdGVcbiAgICAgICAgICAgICAgICAvLyBzY29wZSBpbml0aWFsaXphdGlvbiwgb3RoZXJ3aXNlIHRoZSB2YWx1ZSB3b3VsZCBub3QgYmUgYXZhaWxhYmxlIGZyb20gaXNvbGF0ZVxuICAgICAgICAgICAgICAgIC8vIGRpcmVjdGl2ZSdzIGxpbmtpbmcgZm4gZHVyaW5nIGxpbmtpbmcgcGhhc2VcbiAgICAgICAgICAgICAgICBhdHRyW25hbWVdID0gaW50ZXJwb2xhdGVGbihzY29wZSk7XG5cbiAgICAgICAgICAgICAgICAoJCRvYnNlcnZlcnNbbmFtZV0gfHwgKCQkb2JzZXJ2ZXJzW25hbWVdID0gW10pKS4kJGludGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAoYXR0ci4kJG9ic2VydmVycyAmJiBhdHRyLiQkb2JzZXJ2ZXJzW25hbWVdLiQkc2NvcGUgfHwgc2NvcGUpLlxuICAgICAgICAgICAgICAgICAgJHdhdGNoKGludGVycG9sYXRlRm4sIGZ1bmN0aW9uIGludGVycG9sYXRlRm5XYXRjaEFjdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9zcGVjaWFsIGNhc2UgZm9yIGNsYXNzIGF0dHJpYnV0ZSBhZGRpdGlvbiArIHJlbW92YWxcbiAgICAgICAgICAgICAgICAgICAgLy9zbyB0aGF0IGNsYXNzIGNoYW5nZXMgY2FuIHRhcCBpbnRvIHRoZSBhbmltYXRpb25cbiAgICAgICAgICAgICAgICAgICAgLy9ob29rcyBwcm92aWRlZCBieSB0aGUgJGFuaW1hdGUgc2VydmljZS4gQmUgc3VyZSB0b1xuICAgICAgICAgICAgICAgICAgICAvL3NraXAgYW5pbWF0aW9ucyB3aGVuIHRoZSBmaXJzdCBkaWdlc3Qgb2NjdXJzICh3aGVuXG4gICAgICAgICAgICAgICAgICAgIC8vYm90aCB0aGUgbmV3IGFuZCB0aGUgb2xkIHZhbHVlcyBhcmUgdGhlIHNhbWUpIHNpbmNlXG4gICAgICAgICAgICAgICAgICAgIC8vdGhlIENTUyBjbGFzc2VzIGFyZSB0aGUgbm9uLWludGVycG9sYXRlZCB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdjbGFzcycgJiYgbmV3VmFsdWUgIT0gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyLiR1cGRhdGVDbGFzcyhuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIGF0dHIuJHNldChuYW1lLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogVGhpcyBpcyBhIHNwZWNpYWwganFMaXRlLnJlcGxhY2VXaXRoLCB3aGljaCBjYW4gcmVwbGFjZSBpdGVtcyB3aGljaFxuICAgICAqIGhhdmUgbm8gcGFyZW50cywgcHJvdmlkZWQgdGhhdCB0aGUgY29udGFpbmluZyBqcUxpdGUgY29sbGVjdGlvbiBpcyBwcm92aWRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7SnFMaXRlPX0gJHJvb3RFbGVtZW50IFRoZSByb290IG9mIHRoZSBjb21waWxlIHRyZWUuIFVzZWQgc28gdGhhdCB3ZSBjYW4gcmVwbGFjZSBub2Rlc1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSByb290IG9mIHRoZSB0cmVlLlxuICAgICAqIEBwYXJhbSB7SnFMaXRlfSBlbGVtZW50c1RvUmVtb3ZlIFRoZSBqcUxpdGUgZWxlbWVudCB3aGljaCB3ZSBhcmUgZ29pbmcgdG8gcmVwbGFjZS4gV2Uga2VlcFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBzaGVsbCwgYnV0IHJlcGxhY2UgaXRzIERPTSBub2RlIHJlZmVyZW5jZS5cbiAgICAgKiBAcGFyYW0ge05vZGV9IG5ld05vZGUgVGhlIG5ldyBET00gbm9kZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBsYWNlV2l0aCgkcm9vdEVsZW1lbnQsIGVsZW1lbnRzVG9SZW1vdmUsIG5ld05vZGUpIHtcbiAgICAgIHZhciBmaXJzdEVsZW1lbnRUb1JlbW92ZSA9IGVsZW1lbnRzVG9SZW1vdmVbMF0sXG4gICAgICAgICAgcmVtb3ZlQ291bnQgPSBlbGVtZW50c1RvUmVtb3ZlLmxlbmd0aCxcbiAgICAgICAgICBwYXJlbnQgPSBmaXJzdEVsZW1lbnRUb1JlbW92ZS5wYXJlbnROb2RlLFxuICAgICAgICAgIGksIGlpO1xuXG4gICAgICBpZiAoJHJvb3RFbGVtZW50KSB7XG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gJHJvb3RFbGVtZW50Lmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICBpZiAoJHJvb3RFbGVtZW50W2ldID09IGZpcnN0RWxlbWVudFRvUmVtb3ZlKSB7XG4gICAgICAgICAgICAkcm9vdEVsZW1lbnRbaSsrXSA9IG5ld05vZGU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gaSwgajIgPSBqICsgcmVtb3ZlQ291bnQgLSAxLFxuICAgICAgICAgICAgICAgICAgICAgamogPSAkcm9vdEVsZW1lbnQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICBqIDwgamo7IGorKywgajIrKykge1xuICAgICAgICAgICAgICBpZiAoajIgPCBqaikge1xuICAgICAgICAgICAgICAgICRyb290RWxlbWVudFtqXSA9ICRyb290RWxlbWVudFtqMl07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlICRyb290RWxlbWVudFtqXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHJvb3RFbGVtZW50Lmxlbmd0aCAtPSByZW1vdmVDb3VudCAtIDE7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSByZXBsYWNlZCBlbGVtZW50IGlzIGFsc28gdGhlIGpRdWVyeSAuY29udGV4dCB0aGVuIHJlcGxhY2UgaXRcbiAgICAgICAgICAgIC8vIC5jb250ZXh0IGlzIGEgZGVwcmVjYXRlZCBqUXVlcnkgYXBpLCBzbyB3ZSBzaG91bGQgc2V0IGl0IG9ubHkgd2hlbiBqUXVlcnkgc2V0IGl0XG4gICAgICAgICAgICAvLyBodHRwOi8vYXBpLmpxdWVyeS5jb20vY29udGV4dC9cbiAgICAgICAgICAgIGlmICgkcm9vdEVsZW1lbnQuY29udGV4dCA9PT0gZmlyc3RFbGVtZW50VG9SZW1vdmUpIHtcbiAgICAgICAgICAgICAgJHJvb3RFbGVtZW50LmNvbnRleHQgPSBuZXdOb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgcGFyZW50LnJlcGxhY2VDaGlsZChuZXdOb2RlLCBmaXJzdEVsZW1lbnRUb1JlbW92ZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRPRE8ocGVyZik6IHdoYXQncyB0aGlzIGRvY3VtZW50IGZyYWdtZW50IGZvcj8gaXMgaXQgbmVlZGVkPyBjYW4gd2UgYXQgbGVhc3QgcmV1c2UgaXQ/XG4gICAgICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChmaXJzdEVsZW1lbnRUb1JlbW92ZSk7XG5cbiAgICAgIGlmIChqcUxpdGUuaGFzRGF0YShmaXJzdEVsZW1lbnRUb1JlbW92ZSkpIHtcbiAgICAgICAgLy8gQ29weSBvdmVyIHVzZXIgZGF0YSAodGhhdCBpbmNsdWRlcyBBbmd1bGFyJ3MgJHNjb3BlIGV0Yy4pLiBEb24ndCBjb3B5IHByaXZhdGVcbiAgICAgICAgLy8gZGF0YSBoZXJlIGJlY2F1c2UgdGhlcmUncyBubyBwdWJsaWMgaW50ZXJmYWNlIGluIGpRdWVyeSB0byBkbyB0aGF0IGFuZCBjb3B5aW5nIG92ZXJcbiAgICAgICAgLy8gZXZlbnQgbGlzdGVuZXJzICh3aGljaCBpcyB0aGUgbWFpbiB1c2Ugb2YgcHJpdmF0ZSBkYXRhKSB3b3VsZG4ndCB3b3JrIGFueXdheS5cbiAgICAgICAganFMaXRlLmRhdGEobmV3Tm9kZSwganFMaXRlLmRhdGEoZmlyc3RFbGVtZW50VG9SZW1vdmUpKTtcblxuICAgICAgICAvLyBSZW1vdmUgZGF0YSBvZiB0aGUgcmVwbGFjZWQgZWxlbWVudC4gV2UgY2Fubm90IGp1c3QgY2FsbCAucmVtb3ZlKClcbiAgICAgICAgLy8gb24gdGhlIGVsZW1lbnQgaXQgc2luY2UgdGhhdCB3b3VsZCBkZWFsbG9jYXRlIHNjb3BlIHRoYXQgaXMgbmVlZGVkXG4gICAgICAgIC8vIGZvciB0aGUgbmV3IG5vZGUuIEluc3RlYWQsIHJlbW92ZSB0aGUgZGF0YSBcIm1hbnVhbGx5XCIuXG4gICAgICAgIGlmICghalF1ZXJ5KSB7XG4gICAgICAgICAgZGVsZXRlIGpxTGl0ZS5jYWNoZVtmaXJzdEVsZW1lbnRUb1JlbW92ZVtqcUxpdGUuZXhwYW5kb11dO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGpRdWVyeSAyLnggZG9lc24ndCBleHBvc2UgdGhlIGRhdGEgc3RvcmFnZS4gVXNlIGpRdWVyeS5jbGVhbkRhdGEgdG8gY2xlYW4gdXAgYWZ0ZXJcbiAgICAgICAgICAvLyB0aGUgcmVwbGFjZWQgZWxlbWVudC4gVGhlIGNsZWFuRGF0YSB2ZXJzaW9uIG1vbmtleS1wYXRjaGVkIGJ5IEFuZ3VsYXIgd291bGQgY2F1c2VcbiAgICAgICAgICAvLyB0aGUgc2NvcGUgdG8gYmUgdHJhc2hlZCBhbmQgd2UgZG8gbmVlZCB0aGUgdmVyeSBzYW1lIHNjb3BlIHRvIHdvcmsgd2l0aCB0aGUgbmV3XG4gICAgICAgICAgLy8gZWxlbWVudC4gSG93ZXZlciwgd2UgY2Fubm90IGp1c3QgY2FjaGUgdGhlIG5vbi1wYXRjaGVkIHZlcnNpb24gYW5kIHVzZSBpdCBoZXJlIGFzXG4gICAgICAgICAgLy8gdGhhdCB3b3VsZCBicmVhayBpZiBhbm90aGVyIGxpYnJhcnkgcGF0Y2hlcyB0aGUgbWV0aG9kIGFmdGVyIEFuZ3VsYXIgZG9lcyAob25lXG4gICAgICAgICAgLy8gZXhhbXBsZSBpcyBqUXVlcnkgVUkpLiBJbnN0ZWFkLCBzZXQgYSBmbGFnIGluZGljYXRpbmcgc2NvcGUgZGVzdHJveWluZyBzaG91bGQgYmVcbiAgICAgICAgICAvLyBza2lwcGVkIHRoaXMgb25lIHRpbWUuXG4gICAgICAgICAgc2tpcERlc3Ryb3lPbk5leHRKUXVlcnlDbGVhbkRhdGEgPSB0cnVlO1xuICAgICAgICAgIGpRdWVyeS5jbGVhbkRhdGEoW2ZpcnN0RWxlbWVudFRvUmVtb3ZlXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgayA9IDEsIGtrID0gZWxlbWVudHNUb1JlbW92ZS5sZW5ndGg7IGsgPCBrazsgaysrKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZWxlbWVudHNUb1JlbW92ZVtrXTtcbiAgICAgICAganFMaXRlKGVsZW1lbnQpLnJlbW92ZSgpOyAvLyBtdXN0IGRvIHRoaXMgd2F5IHRvIGNsZWFuIHVwIGV4cGFuZG9cbiAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50c1RvUmVtb3ZlW2tdO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50c1RvUmVtb3ZlWzBdID0gbmV3Tm9kZTtcbiAgICAgIGVsZW1lbnRzVG9SZW1vdmUubGVuZ3RoID0gMTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGNsb25lQW5kQW5ub3RhdGVGbihmbiwgYW5ub3RhdGlvbikge1xuICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbigpIHsgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7IH0sIGZuLCBhbm5vdGF0aW9uKTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGludm9rZUxpbmtGbihsaW5rRm4sIHNjb3BlLCAkZWxlbWVudCwgYXR0cnMsIGNvbnRyb2xsZXJzLCB0cmFuc2NsdWRlRm4pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxpbmtGbihzY29wZSwgJGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSwgc3RhcnRpbmdUYWcoJGVsZW1lbnQpKTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vIFNldCB1cCAkd2F0Y2hlcyBmb3IgaXNvbGF0ZSBzY29wZSBhbmQgY29udHJvbGxlciBiaW5kaW5ncy4gVGhpcyBwcm9jZXNzXG4gICAgLy8gb25seSBvY2N1cnMgZm9yIGlzb2xhdGUgc2NvcGVzIGFuZCBuZXcgc2NvcGVzIHdpdGggY29udHJvbGxlckFzLlxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemVEaXJlY3RpdmVCaW5kaW5ncyhzY29wZSwgYXR0cnMsIGRlc3RpbmF0aW9uLCBiaW5kaW5ncywgZGlyZWN0aXZlKSB7XG4gICAgICB2YXIgcmVtb3ZlV2F0Y2hDb2xsZWN0aW9uID0gW107XG4gICAgICBmb3JFYWNoKGJpbmRpbmdzLCBmdW5jdGlvbihkZWZpbml0aW9uLCBzY29wZU5hbWUpIHtcbiAgICAgICAgdmFyIGF0dHJOYW1lID0gZGVmaW5pdGlvbi5hdHRyTmFtZSxcbiAgICAgICAgb3B0aW9uYWwgPSBkZWZpbml0aW9uLm9wdGlvbmFsLFxuICAgICAgICBtb2RlID0gZGVmaW5pdGlvbi5tb2RlLCAvLyBALCA9LCBvciAmXG4gICAgICAgIGxhc3RWYWx1ZSxcbiAgICAgICAgcGFyZW50R2V0LCBwYXJlbnRTZXQsIGNvbXBhcmU7XG5cbiAgICAgICAgc3dpdGNoIChtb2RlKSB7XG5cbiAgICAgICAgICBjYXNlICdAJzpcbiAgICAgICAgICAgIGlmICghb3B0aW9uYWwgJiYgIWhhc093blByb3BlcnR5LmNhbGwoYXR0cnMsIGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gYXR0cnNbYXR0ck5hbWVdID0gdm9pZCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXR0cnMuJG9ic2VydmUoYXR0ck5hbWUsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYXR0cnMuJCRvYnNlcnZlcnNbYXR0ck5hbWVdLiQkc2NvcGUgPSBzY29wZTtcbiAgICAgICAgICAgIGlmIChpc1N0cmluZyhhdHRyc1thdHRyTmFtZV0pKSB7XG4gICAgICAgICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgaGFzIGJlZW4gcHJvdmlkZWQgdGhlbiB3ZSB0cmlnZ2VyIGFuIGludGVycG9sYXRpb24gdG8gZW5zdXJlXG4gICAgICAgICAgICAgIC8vIHRoZSB2YWx1ZSBpcyB0aGVyZSBmb3IgdXNlIGluIHRoZSBsaW5rIGZuXG4gICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSAkaW50ZXJwb2xhdGUoYXR0cnNbYXR0ck5hbWVdKShzY29wZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJz0nOlxuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGF0dHJzLCBhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgICAgaWYgKG9wdGlvbmFsKSBicmVhaztcbiAgICAgICAgICAgICAgYXR0cnNbYXR0ck5hbWVdID0gdm9pZCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbmFsICYmICFhdHRyc1thdHRyTmFtZV0pIGJyZWFrO1xuXG4gICAgICAgICAgICBwYXJlbnRHZXQgPSAkcGFyc2UoYXR0cnNbYXR0ck5hbWVdKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnRHZXQubGl0ZXJhbCkge1xuICAgICAgICAgICAgICBjb21wYXJlID0gZXF1YWxzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29tcGFyZSA9IGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIGEgPT09IGIgfHwgKGEgIT09IGEgJiYgYiAhPT0gYik7IH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnRTZXQgPSBwYXJlbnRHZXQuYXNzaWduIHx8IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAvLyByZXNldCB0aGUgY2hhbmdlLCBvciB3ZSB3aWxsIHRocm93IHRoaXMgZXhjZXB0aW9uIG9uIGV2ZXJ5ICRkaWdlc3RcbiAgICAgICAgICAgICAgbGFzdFZhbHVlID0gZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IHBhcmVudEdldChzY29wZSk7XG4gICAgICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdub25hc3NpZ24nLFxuICAgICAgICAgICAgICAgICAgXCJFeHByZXNzaW9uICd7MH0nIHVzZWQgd2l0aCBkaXJlY3RpdmUgJ3sxfScgaXMgbm9uLWFzc2lnbmFibGUhXCIsXG4gICAgICAgICAgICAgICAgICBhdHRyc1thdHRyTmFtZV0sIGRpcmVjdGl2ZS5uYW1lKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsYXN0VmFsdWUgPSBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gcGFyZW50R2V0KHNjb3BlKTtcbiAgICAgICAgICAgIHZhciBwYXJlbnRWYWx1ZVdhdGNoID0gZnVuY3Rpb24gcGFyZW50VmFsdWVXYXRjaChwYXJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICBpZiAoIWNvbXBhcmUocGFyZW50VmFsdWUsIGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0pKSB7XG4gICAgICAgICAgICAgICAgLy8gd2UgYXJlIG91dCBvZiBzeW5jIGFuZCBuZWVkIHRvIGNvcHlcbiAgICAgICAgICAgICAgICBpZiAoIWNvbXBhcmUocGFyZW50VmFsdWUsIGxhc3RWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgIC8vIHBhcmVudCBjaGFuZ2VkIGFuZCBpdCBoYXMgcHJlY2VkZW5jZVxuICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IHBhcmVudFZhbHVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgcGFyZW50IGNhbiBiZSBhc3NpZ25lZCB0aGVuIGRvIHNvXG4gICAgICAgICAgICAgICAgICBwYXJlbnRTZXQoc2NvcGUsIHBhcmVudFZhbHVlID0gZGVzdGluYXRpb25bc2NvcGVOYW1lXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBsYXN0VmFsdWUgPSBwYXJlbnRWYWx1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwYXJlbnRWYWx1ZVdhdGNoLiRzdGF0ZWZ1bCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgcmVtb3ZlV2F0Y2g7XG4gICAgICAgICAgICBpZiAoZGVmaW5pdGlvbi5jb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICAgIHJlbW92ZVdhdGNoID0gc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihhdHRyc1thdHRyTmFtZV0sIHBhcmVudFZhbHVlV2F0Y2gpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVtb3ZlV2F0Y2ggPSBzY29wZS4kd2F0Y2goJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSwgcGFyZW50VmFsdWVXYXRjaCksIG51bGwsIHBhcmVudEdldC5saXRlcmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbW92ZVdhdGNoQ29sbGVjdGlvbi5wdXNoKHJlbW92ZVdhdGNoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnJic6XG4gICAgICAgICAgICAvLyBEb24ndCBhc3NpZ24gT2JqZWN0LnByb3RvdHlwZSBtZXRob2QgdG8gc2NvcGVcbiAgICAgICAgICAgIHBhcmVudEdldCA9IGF0dHJzLmhhc093blByb3BlcnR5KGF0dHJOYW1lKSA/ICRwYXJzZShhdHRyc1thdHRyTmFtZV0pIDogbm9vcDtcblxuICAgICAgICAgICAgLy8gRG9uJ3QgYXNzaWduIG5vb3AgdG8gZGVzdGluYXRpb24gaWYgZXhwcmVzc2lvbiBpcyBub3QgdmFsaWRcbiAgICAgICAgICAgIGlmIChwYXJlbnRHZXQgPT09IG5vb3AgJiYgb3B0aW9uYWwpIGJyZWFrO1xuXG4gICAgICAgICAgICBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwYXJlbnRHZXQoc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcmVtb3ZlV2F0Y2hDb2xsZWN0aW9uLmxlbmd0aCAmJiBmdW5jdGlvbiByZW1vdmVXYXRjaGVzKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSByZW1vdmVXYXRjaENvbGxlY3Rpb24ubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgIHJlbW92ZVdhdGNoQ29sbGVjdGlvbltpXSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfV07XG59XG5cbnZhciBQUkVGSVhfUkVHRVhQID0gL14oKD86eHxkYXRhKVtcXDpcXC1fXSkvaTtcbi8qKlxuICogQ29udmVydHMgYWxsIGFjY2VwdGVkIGRpcmVjdGl2ZXMgZm9ybWF0IGludG8gcHJvcGVyIGRpcmVjdGl2ZSBuYW1lLlxuICogQHBhcmFtIG5hbWUgTmFtZSB0byBub3JtYWxpemVcbiAqL1xuZnVuY3Rpb24gZGlyZWN0aXZlTm9ybWFsaXplKG5hbWUpIHtcbiAgcmV0dXJuIGNhbWVsQ2FzZShuYW1lLnJlcGxhY2UoUFJFRklYX1JFR0VYUCwgJycpKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgc2hhcmVkIG9iamVjdCBiZXR3ZWVuIGRpcmVjdGl2ZSBjb21waWxlIC8gbGlua2luZyBmdW5jdGlvbnMgd2hpY2ggY29udGFpbnMgbm9ybWFsaXplZCBET01cbiAqIGVsZW1lbnQgYXR0cmlidXRlcy4gVGhlIHZhbHVlcyByZWZsZWN0IGN1cnJlbnQgYmluZGluZyBzdGF0ZSBge3sgfX1gLiBUaGUgbm9ybWFsaXphdGlvbiBpc1xuICogbmVlZGVkIHNpbmNlIGFsbCBvZiB0aGVzZSBhcmUgdHJlYXRlZCBhcyBlcXVpdmFsZW50IGluIEFuZ3VsYXI6XG4gKlxuICogYGBgXG4gKiAgICA8c3BhbiBuZzpiaW5kPVwiYVwiIG5nLWJpbmQ9XCJhXCIgZGF0YS1uZy1iaW5kPVwiYVwiIHgtbmctYmluZD1cImFcIj5cbiAqIGBgYFxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3BlcnR5XG4gKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkYXR0clxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSBtYXAgb2YgRE9NIGVsZW1lbnQgYXR0cmlidXRlIG5hbWVzIHRvIHRoZSBub3JtYWxpemVkIG5hbWUuIFRoaXMgaXNcbiAqIG5lZWRlZCB0byBkbyByZXZlcnNlIGxvb2t1cCBmcm9tIG5vcm1hbGl6ZWQgbmFtZSBiYWNrIHRvIGFjdHVhbCBuYW1lLlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkc2V0XG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2V0IERPTSBlbGVtZW50IGF0dHJpYnV0ZSB2YWx1ZS5cbiAqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTm9ybWFsaXplZCBlbGVtZW50IGF0dHJpYnV0ZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBtb2RpZnkuIFRoZSBuYW1lIGlzXG4gKiAgICAgICAgICByZXZlcnNlLXRyYW5zbGF0ZWQgdXNpbmcgdGhlIHtAbGluayBuZy4kY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkYXR0ciAkYXR0cn1cbiAqICAgICAgICAgIHByb3BlcnR5IHRvIHRoZSBvcmlnaW5hbCBuYW1lLlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFZhbHVlIHRvIHNldCB0aGUgYXR0cmlidXRlIHRvLiBUaGUgdmFsdWUgY2FuIGJlIGFuIGludGVycG9sYXRlZCBzdHJpbmcuXG4gKi9cblxuXG5cbi8qKlxuICogQ2xvc3VyZSBjb21waWxlciB0eXBlIGluZm9ybWF0aW9uXG4gKi9cblxuZnVuY3Rpb24gbm9kZXNldExpbmtpbmdGbihcbiAgLyogYW5ndWxhci5TY29wZSAqLyBzY29wZSxcbiAgLyogTm9kZUxpc3QgKi8gbm9kZUxpc3QsXG4gIC8qIEVsZW1lbnQgKi8gcm9vdEVsZW1lbnQsXG4gIC8qIGZ1bmN0aW9uKEZ1bmN0aW9uKSAqLyBib3VuZFRyYW5zY2x1ZGVGblxuKSB7fVxuXG5mdW5jdGlvbiBkaXJlY3RpdmVMaW5raW5nRm4oXG4gIC8qIG5vZGVzZXRMaW5raW5nRm4gKi8gbm9kZXNldExpbmtpbmdGbixcbiAgLyogYW5ndWxhci5TY29wZSAqLyBzY29wZSxcbiAgLyogTm9kZSAqLyBub2RlLFxuICAvKiBFbGVtZW50ICovIHJvb3RFbGVtZW50LFxuICAvKiBmdW5jdGlvbihGdW5jdGlvbikgKi8gYm91bmRUcmFuc2NsdWRlRm5cbikge31cblxuZnVuY3Rpb24gdG9rZW5EaWZmZXJlbmNlKHN0cjEsIHN0cjIpIHtcbiAgdmFyIHZhbHVlcyA9ICcnLFxuICAgICAgdG9rZW5zMSA9IHN0cjEuc3BsaXQoL1xccysvKSxcbiAgICAgIHRva2VuczIgPSBzdHIyLnNwbGl0KC9cXHMrLyk7XG5cbiAgb3V0ZXI6XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zMS5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2VuczFbaV07XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCB0b2tlbnMyLmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAodG9rZW4gPT0gdG9rZW5zMltqXSkgY29udGludWUgb3V0ZXI7XG4gICAgfVxuICAgIHZhbHVlcyArPSAodmFsdWVzLmxlbmd0aCA+IDAgPyAnICcgOiAnJykgKyB0b2tlbjtcbiAgfVxuICByZXR1cm4gdmFsdWVzO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDb21tZW50cyhqcU5vZGVzKSB7XG4gIGpxTm9kZXMgPSBqcUxpdGUoanFOb2Rlcyk7XG4gIHZhciBpID0ganFOb2Rlcy5sZW5ndGg7XG5cbiAgaWYgKGkgPD0gMSkge1xuICAgIHJldHVybiBqcU5vZGVzO1xuICB9XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBub2RlID0ganFOb2Rlc1tpXTtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0NPTU1FTlQpIHtcbiAgICAgIHNwbGljZS5jYWxsKGpxTm9kZXMsIGksIDEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ganFOb2Rlcztcbn1cblxudmFyICRjb250cm9sbGVyTWluRXJyID0gbWluRXJyKCckY29udHJvbGxlcicpO1xuXG5cbnZhciBDTlRSTF9SRUcgPSAvXihcXFMrKShcXHMrYXNcXHMrKFxcdyspKT8kLztcbmZ1bmN0aW9uIGlkZW50aWZpZXJGb3JDb250cm9sbGVyKGNvbnRyb2xsZXIsIGlkZW50KSB7XG4gIGlmIChpZGVudCAmJiBpc1N0cmluZyhpZGVudCkpIHJldHVybiBpZGVudDtcbiAgaWYgKGlzU3RyaW5nKGNvbnRyb2xsZXIpKSB7XG4gICAgdmFyIG1hdGNoID0gQ05UUkxfUkVHLmV4ZWMoY29udHJvbGxlcik7XG4gICAgaWYgKG1hdGNoKSByZXR1cm4gbWF0Y2hbM107XG4gIH1cbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGNvbnRyb2xsZXJQcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUge0BsaW5rIG5nLiRjb250cm9sbGVyICRjb250cm9sbGVyIHNlcnZpY2V9IGlzIHVzZWQgYnkgQW5ndWxhciB0byBjcmVhdGUgbmV3XG4gKiBjb250cm9sbGVycy5cbiAqXG4gKiBUaGlzIHByb3ZpZGVyIGFsbG93cyBjb250cm9sbGVyIHJlZ2lzdHJhdGlvbiB2aWEgdGhlXG4gKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlciByZWdpc3Rlcn0gbWV0aG9kLlxuICovXG5mdW5jdGlvbiAkQ29udHJvbGxlclByb3ZpZGVyKCkge1xuICB2YXIgY29udHJvbGxlcnMgPSB7fSxcbiAgICAgIGdsb2JhbHMgPSBmYWxzZTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29udHJvbGxlclByb3ZpZGVyI3JlZ2lzdGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBDb250cm9sbGVyIG5hbWUsIG9yIGFuIG9iamVjdCBtYXAgb2YgY29udHJvbGxlcnMgd2hlcmUgdGhlIGtleXMgYXJlXG4gICAqICAgIHRoZSBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGNvbnN0cnVjdG9ycy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbnxBcnJheX0gY29uc3RydWN0b3IgQ29udHJvbGxlciBjb25zdHJ1Y3RvciBmbiAob3B0aW9uYWxseSBkZWNvcmF0ZWQgd2l0aCBESVxuICAgKiAgICBhbm5vdGF0aW9ucyBpbiB0aGUgYXJyYXkgbm90YXRpb24pLlxuICAgKi9cbiAgdGhpcy5yZWdpc3RlciA9IGZ1bmN0aW9uKG5hbWUsIGNvbnN0cnVjdG9yKSB7XG4gICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgJ2NvbnRyb2xsZXInKTtcbiAgICBpZiAoaXNPYmplY3QobmFtZSkpIHtcbiAgICAgIGV4dGVuZChjb250cm9sbGVycywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRyb2xsZXJzW25hbWVdID0gY29uc3RydWN0b3I7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjb250cm9sbGVyUHJvdmlkZXIjYWxsb3dHbG9iYWxzXG4gICAqIEBkZXNjcmlwdGlvbiBJZiBjYWxsZWQsIGFsbG93cyBgJGNvbnRyb2xsZXJgIHRvIGZpbmQgY29udHJvbGxlciBjb25zdHJ1Y3RvcnMgb24gYHdpbmRvd2BcbiAgICovXG4gIHRoaXMuYWxsb3dHbG9iYWxzID0gZnVuY3Rpb24oKSB7XG4gICAgZ2xvYmFscyA9IHRydWU7XG4gIH07XG5cblxuICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsICckd2luZG93JywgZnVuY3Rpb24oJGluamVjdG9yLCAkd2luZG93KSB7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAqIEBuYW1lICRjb250cm9sbGVyXG4gICAgICogQHJlcXVpcmVzICRpbmplY3RvclxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGNvbnN0cnVjdG9yIElmIGNhbGxlZCB3aXRoIGEgZnVuY3Rpb24gdGhlbiBpdCdzIGNvbnNpZGVyZWQgdG8gYmUgdGhlXG4gICAgICogICAgY29udHJvbGxlciBjb25zdHJ1Y3RvciBmdW5jdGlvbi4gT3RoZXJ3aXNlIGl0J3MgY29uc2lkZXJlZCB0byBiZSBhIHN0cmluZyB3aGljaCBpcyB1c2VkXG4gICAgICogICAgdG8gcmV0cmlldmUgdGhlIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgdXNpbmcgdGhlIGZvbGxvd2luZyBzdGVwczpcbiAgICAgKlxuICAgICAqICAgICogY2hlY2sgaWYgYSBjb250cm9sbGVyIHdpdGggZ2l2ZW4gbmFtZSBpcyByZWdpc3RlcmVkIHZpYSBgJGNvbnRyb2xsZXJQcm92aWRlcmBcbiAgICAgKiAgICAqIGNoZWNrIGlmIGV2YWx1YXRpbmcgdGhlIHN0cmluZyBvbiB0aGUgY3VycmVudCBzY29wZSByZXR1cm5zIGEgY29uc3RydWN0b3JcbiAgICAgKiAgICAqIGlmICRjb250cm9sbGVyUHJvdmlkZXIjYWxsb3dHbG9iYWxzLCBjaGVjayBgd2luZG93W2NvbnN0cnVjdG9yXWAgb24gdGhlIGdsb2JhbFxuICAgICAqICAgICAgYHdpbmRvd2Agb2JqZWN0IChub3QgcmVjb21tZW5kZWQpXG4gICAgICpcbiAgICAgKiAgICBUaGUgc3RyaW5nIGNhbiB1c2UgdGhlIGBjb250cm9sbGVyIGFzIHByb3BlcnR5YCBzeW50YXgsIHdoZXJlIHRoZSBjb250cm9sbGVyIGluc3RhbmNlIGlzIHB1Ymxpc2hlZFxuICAgICAqICAgIGFzIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkgb24gdGhlIGBzY29wZWA7IHRoZSBgc2NvcGVgIG11c3QgYmUgaW5qZWN0ZWQgaW50byBgbG9jYWxzYCBwYXJhbSBmb3IgdGhpc1xuICAgICAqICAgIHRvIHdvcmsgY29ycmVjdGx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGxvY2FscyBJbmplY3Rpb24gbG9jYWxzIGZvciBDb250cm9sbGVyLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gSW5zdGFuY2Ugb2YgZ2l2ZW4gY29udHJvbGxlci5cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIGAkY29udHJvbGxlcmAgc2VydmljZSBpcyByZXNwb25zaWJsZSBmb3IgaW5zdGFudGlhdGluZyBjb250cm9sbGVycy5cbiAgICAgKlxuICAgICAqIEl0J3MganVzdCBhIHNpbXBsZSBjYWxsIHRvIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LCBidXQgZXh0cmFjdGVkIGludG9cbiAgICAgKiBhIHNlcnZpY2UsIHNvIHRoYXQgb25lIGNhbiBvdmVycmlkZSB0aGlzIHNlcnZpY2Ugd2l0aCBbQkMgdmVyc2lvbl0oaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMTY0OTc4OCkuXG4gICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGV4cHJlc3Npb24sIGxvY2FscywgbGF0ZXIsIGlkZW50KSB7XG4gICAgICAvLyBQUklWQVRFIEFQSTpcbiAgICAgIC8vICAgcGFyYW0gYGxhdGVyYCAtLS0gaW5kaWNhdGVzIHRoYXQgdGhlIGNvbnRyb2xsZXIncyBjb25zdHJ1Y3RvciBpcyBpbnZva2VkIGF0IGEgbGF0ZXIgdGltZS5cbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgSWYgdHJ1ZSwgJGNvbnRyb2xsZXIgd2lsbCBhbGxvY2F0ZSB0aGUgb2JqZWN0IHdpdGggdGhlIGNvcnJlY3RcbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgcHJvdG90eXBlIGNoYWluLCBidXQgd2lsbCBub3QgaW52b2tlIHRoZSBjb250cm9sbGVyIHVudGlsIGEgcmV0dXJuZWRcbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgaXMgaW52b2tlZC5cbiAgICAgIC8vICAgcGFyYW0gYGlkZW50YCAtLS0gQW4gb3B0aW9uYWwgbGFiZWwgd2hpY2ggb3ZlcnJpZGVzIHRoZSBsYWJlbCBwYXJzZWQgZnJvbSB0aGUgY29udHJvbGxlclxuICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uLCBpZiBhbnkuXG4gICAgICB2YXIgaW5zdGFuY2UsIG1hdGNoLCBjb25zdHJ1Y3RvciwgaWRlbnRpZmllcjtcbiAgICAgIGxhdGVyID0gbGF0ZXIgPT09IHRydWU7XG4gICAgICBpZiAoaWRlbnQgJiYgaXNTdHJpbmcoaWRlbnQpKSB7XG4gICAgICAgIGlkZW50aWZpZXIgPSBpZGVudDtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzU3RyaW5nKGV4cHJlc3Npb24pKSB7XG4gICAgICAgIG1hdGNoID0gZXhwcmVzc2lvbi5tYXRjaChDTlRSTF9SRUcpO1xuICAgICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgICAgdGhyb3cgJGNvbnRyb2xsZXJNaW5FcnIoJ2N0cmxmbXQnLFxuICAgICAgICAgICAgXCJCYWRseSBmb3JtZWQgY29udHJvbGxlciBzdHJpbmcgJ3swfScuIFwiICtcbiAgICAgICAgICAgIFwiTXVzdCBtYXRjaCBgX19uYW1lX18gYXMgX19pZF9fYCBvciBgX19uYW1lX19gLlwiLCBleHByZXNzaW9uKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdHJ1Y3RvciA9IG1hdGNoWzFdLFxuICAgICAgICBpZGVudGlmaWVyID0gaWRlbnRpZmllciB8fCBtYXRjaFszXTtcbiAgICAgICAgZXhwcmVzc2lvbiA9IGNvbnRyb2xsZXJzLmhhc093blByb3BlcnR5KGNvbnN0cnVjdG9yKVxuICAgICAgICAgICAgPyBjb250cm9sbGVyc1tjb25zdHJ1Y3Rvcl1cbiAgICAgICAgICAgIDogZ2V0dGVyKGxvY2Fscy4kc2NvcGUsIGNvbnN0cnVjdG9yLCB0cnVlKSB8fFxuICAgICAgICAgICAgICAgIChnbG9iYWxzID8gZ2V0dGVyKCR3aW5kb3csIGNvbnN0cnVjdG9yLCB0cnVlKSA6IHVuZGVmaW5lZCk7XG5cbiAgICAgICAgYXNzZXJ0QXJnRm4oZXhwcmVzc2lvbiwgY29uc3RydWN0b3IsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAobGF0ZXIpIHtcbiAgICAgICAgLy8gSW5zdGFudGlhdGUgY29udHJvbGxlciBsYXRlcjpcbiAgICAgICAgLy8gVGhpcyBtYWNoaW5lcnkgaXMgdXNlZCB0byBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhlIG9iamVjdCBiZWZvcmUgY2FsbGluZyB0aGVcbiAgICAgICAgLy8gY29udHJvbGxlcidzIGNvbnN0cnVjdG9yIGl0c2VsZi5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhpcyBhbGxvd3MgcHJvcGVydGllcyB0byBiZSBhZGRlZCB0byB0aGUgY29udHJvbGxlciBiZWZvcmUgdGhlIGNvbnN0cnVjdG9yIGlzXG4gICAgICAgIC8vIGludm9rZWQuIFByaW1hcmlseSwgdGhpcyBpcyB1c2VkIGZvciBpc29sYXRlIHNjb3BlIGJpbmRpbmdzIGluICRjb21waWxlLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGlzIGZlYXR1cmUgaXMgbm90IGludGVuZGVkIGZvciB1c2UgYnkgYXBwbGljYXRpb25zLCBhbmQgaXMgdGh1cyBub3QgZG9jdW1lbnRlZFxuICAgICAgICAvLyBwdWJsaWNseS5cbiAgICAgICAgLy8gT2JqZWN0IGNyZWF0aW9uOiBodHRwOi8vanNwZXJmLmNvbS9jcmVhdGUtY29uc3RydWN0b3IvMlxuICAgICAgICB2YXIgY29udHJvbGxlclByb3RvdHlwZSA9IChpc0FycmF5KGV4cHJlc3Npb24pID9cbiAgICAgICAgICBleHByZXNzaW9uW2V4cHJlc3Npb24ubGVuZ3RoIC0gMV0gOiBleHByZXNzaW9uKS5wcm90b3R5cGU7XG4gICAgICAgIGluc3RhbmNlID0gT2JqZWN0LmNyZWF0ZShjb250cm9sbGVyUHJvdG90eXBlIHx8IG51bGwpO1xuXG4gICAgICAgIGlmIChpZGVudGlmaWVyKSB7XG4gICAgICAgICAgYWRkSWRlbnRpZmllcihsb2NhbHMsIGlkZW50aWZpZXIsIGluc3RhbmNlLCBjb25zdHJ1Y3RvciB8fCBleHByZXNzaW9uLm5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGluc3RhbnRpYXRlO1xuICAgICAgICByZXR1cm4gaW5zdGFudGlhdGUgPSBleHRlbmQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9ICRpbmplY3Rvci5pbnZva2UoZXhwcmVzc2lvbiwgaW5zdGFuY2UsIGxvY2FscywgY29uc3RydWN0b3IpO1xuICAgICAgICAgIGlmIChyZXN1bHQgIT09IGluc3RhbmNlICYmIChpc09iamVjdChyZXN1bHQpIHx8IGlzRnVuY3Rpb24ocmVzdWx0KSkpIHtcbiAgICAgICAgICAgIGluc3RhbmNlID0gcmVzdWx0O1xuICAgICAgICAgICAgaWYgKGlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgLy8gSWYgcmVzdWx0IGNoYW5nZWQsIHJlLWFzc2lnbiBjb250cm9sbGVyQXMgdmFsdWUgdG8gc2NvcGUuXG4gICAgICAgICAgICAgIGFkZElkZW50aWZpZXIobG9jYWxzLCBpZGVudGlmaWVyLCBpbnN0YW5jZSwgY29uc3RydWN0b3IgfHwgZXhwcmVzc2lvbi5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICB9LCB7XG4gICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlLFxuICAgICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXJcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGluc3RhbmNlID0gJGluamVjdG9yLmluc3RhbnRpYXRlKGV4cHJlc3Npb24sIGxvY2FscywgY29uc3RydWN0b3IpO1xuXG4gICAgICBpZiAoaWRlbnRpZmllcikge1xuICAgICAgICBhZGRJZGVudGlmaWVyKGxvY2FscywgaWRlbnRpZmllciwgaW5zdGFuY2UsIGNvbnN0cnVjdG9yIHx8IGV4cHJlc3Npb24ubmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYWRkSWRlbnRpZmllcihsb2NhbHMsIGlkZW50aWZpZXIsIGluc3RhbmNlLCBuYW1lKSB7XG4gICAgICBpZiAoIShsb2NhbHMgJiYgaXNPYmplY3QobG9jYWxzLiRzY29wZSkpKSB7XG4gICAgICAgIHRocm93IG1pbkVycignJGNvbnRyb2xsZXInKSgnbm9zY3AnLFxuICAgICAgICAgIFwiQ2Fubm90IGV4cG9ydCBjb250cm9sbGVyICd7MH0nIGFzICd7MX0nISBObyAkc2NvcGUgb2JqZWN0IHByb3ZpZGVkIHZpYSBgbG9jYWxzYC5cIixcbiAgICAgICAgICBuYW1lLCBpZGVudGlmaWVyKTtcbiAgICAgIH1cblxuICAgICAgbG9jYWxzLiRzY29wZVtpZGVudGlmaWVyXSA9IGluc3RhbmNlO1xuICAgIH1cbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRkb2N1bWVudFxuICogQHJlcXVpcmVzICR3aW5kb3dcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEge0BsaW5rIGFuZ3VsYXIuZWxlbWVudCBqUXVlcnkgb3IganFMaXRlfSB3cmFwcGVyIGZvciB0aGUgYnJvd3NlcidzIGB3aW5kb3cuZG9jdW1lbnRgIG9iamVjdC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwiZG9jdW1lbnRFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxwPiRkb2N1bWVudCB0aXRsZTogPGIgbmctYmluZD1cInRpdGxlXCI+PC9iPjwvcD5cbiAgICAgICAgIDxwPndpbmRvdy5kb2N1bWVudCB0aXRsZTogPGIgbmctYmluZD1cIndpbmRvd1RpdGxlXCI+PC9iPjwvcD5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2RvY3VtZW50RXhhbXBsZScsIFtdKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGRvY3VtZW50JywgZnVuY3Rpb24oJHNjb3BlLCAkZG9jdW1lbnQpIHtcbiAgICAgICAgICAgJHNjb3BlLnRpdGxlID0gJGRvY3VtZW50WzBdLnRpdGxlO1xuICAgICAgICAgICAkc2NvcGUud2luZG93VGl0bGUgPSBhbmd1bGFyLmVsZW1lbnQod2luZG93LmRvY3VtZW50KVswXS50aXRsZTtcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiAkRG9jdW1lbnRQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgZnVuY3Rpb24od2luZG93KSB7XG4gICAgcmV0dXJuIGpxTGl0ZSh3aW5kb3cuZG9jdW1lbnQpO1xuICB9XTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGV4Y2VwdGlvbkhhbmRsZXJcbiAqIEByZXF1aXJlcyBuZy4kbG9nXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBbnkgdW5jYXVnaHQgZXhjZXB0aW9uIGluIGFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGVsZWdhdGVkIHRvIHRoaXMgc2VydmljZS5cbiAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHNpbXBseSBkZWxlZ2F0ZXMgdG8gYCRsb2cuZXJyb3JgIHdoaWNoIGxvZ3MgaXQgaW50b1xuICogdGhlIGJyb3dzZXIgY29uc29sZS5cbiAqXG4gKiBJbiB1bml0IHRlc3RzLCBpZiBgYW5ndWxhci1tb2Nrcy5qc2AgaXMgbG9hZGVkLCB0aGlzIHNlcnZpY2UgaXMgb3ZlcnJpZGRlbiBieVxuICoge0BsaW5rIG5nTW9jay4kZXhjZXB0aW9uSGFuZGxlciBtb2NrICRleGNlcHRpb25IYW5kbGVyfSB3aGljaCBhaWRzIGluIHRlc3RpbmcuXG4gKlxuICogIyMgRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogICBhbmd1bGFyLm1vZHVsZSgnZXhjZXB0aW9uT3ZlcnJpZGUnLCBbXSkuZmFjdG9yeSgnJGV4Y2VwdGlvbkhhbmRsZXInLCBmdW5jdGlvbigpIHtcbiAqICAgICByZXR1cm4gZnVuY3Rpb24oZXhjZXB0aW9uLCBjYXVzZSkge1xuICogICAgICAgZXhjZXB0aW9uLm1lc3NhZ2UgKz0gJyAoY2F1c2VkIGJ5IFwiJyArIGNhdXNlICsgJ1wiKSc7XG4gKiAgICAgICB0aHJvdyBleGNlcHRpb247XG4gKiAgICAgfTtcbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiBUaGlzIGV4YW1wbGUgd2lsbCBvdmVycmlkZSB0aGUgbm9ybWFsIGFjdGlvbiBvZiBgJGV4Y2VwdGlvbkhhbmRsZXJgLCB0byBtYWtlIGFuZ3VsYXJcbiAqIGV4Y2VwdGlvbnMgZmFpbCBoYXJkIHdoZW4gdGhleSBoYXBwZW4sIGluc3RlYWQgb2YganVzdCBsb2dnaW5nIHRvIHRoZSBjb25zb2xlLlxuICpcbiAqIDxociAvPlxuICogTm90ZSwgdGhhdCBjb2RlIGV4ZWN1dGVkIGluIGV2ZW50LWxpc3RlbmVycyAoZXZlbiB0aG9zZSByZWdpc3RlcmVkIHVzaW5nIGpxTGl0ZSdzIGBvbmAvYGJpbmRgXG4gKiBtZXRob2RzKSBkb2VzIG5vdCBkZWxlZ2F0ZSBleGNlcHRpb25zIHRvIHRoZSB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9XG4gKiAodW5sZXNzIGV4ZWN1dGVkIGR1cmluZyBhIGRpZ2VzdCkuXG4gKlxuICogSWYgeW91IHdpc2gsIHlvdSBjYW4gbWFudWFsbHkgZGVsZWdhdGUgZXhjZXB0aW9ucywgZS5nLlxuICogYHRyeSB7IC4uLiB9IGNhdGNoKGUpIHsgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7IH1gXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXhjZXB0aW9uIEV4Y2VwdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIGVycm9yLlxuICogQHBhcmFtIHtzdHJpbmc9fSBjYXVzZSBvcHRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY29udGV4dCBpbiB3aGljaFxuICogICAgICAgdGhlIGVycm9yIHdhcyB0aHJvd24uXG4gKlxuICovXG5mdW5jdGlvbiAkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRsb2cnLCBmdW5jdGlvbigkbG9nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGV4Y2VwdGlvbiwgY2F1c2UpIHtcbiAgICAgICRsb2cuZXJyb3IuYXBwbHkoJGxvZywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XTtcbn1cblxudmFyICQkRm9yY2VSZWZsb3dQcm92aWRlciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLiRnZXQgPSBbJyRkb2N1bWVudCcsIGZ1bmN0aW9uKCRkb2N1bWVudCkge1xuICAgIHJldHVybiBmdW5jdGlvbihkb21Ob2RlKSB7XG4gICAgICAvL3RoZSBsaW5lIGJlbG93IHdpbGwgZm9yY2UgdGhlIGJyb3dzZXIgdG8gcGVyZm9ybSBhIHJlcGFpbnQgc29cbiAgICAgIC8vdGhhdCBhbGwgdGhlIGFuaW1hdGVkIGVsZW1lbnRzIHdpdGhpbiB0aGUgYW5pbWF0aW9uIGZyYW1lIHdpbGxcbiAgICAgIC8vYmUgcHJvcGVybHkgdXBkYXRlZCBhbmQgZHJhd24gb24gc2NyZWVuLiBUaGlzIGlzIHJlcXVpcmVkIHRvXG4gICAgICAvL2Vuc3VyZSB0aGF0IHRoZSBwcmVwYXJhdGlvbiBhbmltYXRpb24gaXMgcHJvcGVybHkgZmx1c2hlZCBzbyB0aGF0XG4gICAgICAvL3RoZSBhY3RpdmUgc3RhdGUgcGlja3MgdXAgZnJvbSB0aGVyZS4gRE8gTk9UIFJFTU9WRSBUSElTIExJTkUuXG4gICAgICAvL0RPIE5PVCBPUFRJTUlaRSBUSElTIExJTkUuIFRIRSBNSU5JRklFUiBXSUxMIFJFTU9WRSBJVCBPVEhFUldJU0UgV0hJQ0hcbiAgICAgIC8vV0lMTCBSRVNVTFQgSU4gQU4gVU5QUkVESUNUQUJMRSBCVUcgVEhBVCBJUyBWRVJZIEhBUkQgVE8gVFJBQ0sgRE9XTiBBTkRcbiAgICAgIC8vV0lMTCBUQUtFIFlFQVJTIEFXQVkgRlJPTSBZT1VSIExJRkUuXG4gICAgICBpZiAoZG9tTm9kZSkge1xuICAgICAgICBpZiAoIWRvbU5vZGUubm9kZVR5cGUgJiYgZG9tTm9kZSBpbnN0YW5jZW9mIGpxTGl0ZSkge1xuICAgICAgICAgIGRvbU5vZGUgPSBkb21Ob2RlWzBdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb21Ob2RlID0gJGRvY3VtZW50WzBdLmJvZHk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZG9tTm9kZS5vZmZzZXRXaWR0aCArIDE7XG4gICAgfTtcbiAgfV07XG59O1xuXG52YXIgQVBQTElDQVRJT05fSlNPTiA9ICdhcHBsaWNhdGlvbi9qc29uJztcbnZhciBDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTiA9IHsnQ29udGVudC1UeXBlJzogQVBQTElDQVRJT05fSlNPTiArICc7Y2hhcnNldD11dGYtOCd9O1xudmFyIEpTT05fU1RBUlQgPSAvXlxcW3xeXFx7KD8hXFx7KS87XG52YXIgSlNPTl9FTkRTID0ge1xuICAnWyc6IC9dJC8sXG4gICd7JzogL30kL1xufTtcbnZhciBKU09OX1BST1RFQ1RJT05fUFJFRklYID0gL15cXClcXF1cXH0nLD9cXG4vO1xudmFyICRodHRwTWluRXJyID0gbWluRXJyKCckaHR0cCcpO1xudmFyICRodHRwTWluRXJyTGVnYWN5Rm4gPSBmdW5jdGlvbihtZXRob2QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRocm93ICRodHRwTWluRXJyKCdsZWdhY3knLCAnVGhlIG1ldGhvZCBgezB9YCBvbiB0aGUgcHJvbWlzZSByZXR1cm5lZCBmcm9tIGAkaHR0cGAgaGFzIGJlZW4gZGlzYWJsZWQuJywgbWV0aG9kKTtcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZVZhbHVlKHYpIHtcbiAgaWYgKGlzT2JqZWN0KHYpKSB7XG4gICAgcmV0dXJuIGlzRGF0ZSh2KSA/IHYudG9JU09TdHJpbmcoKSA6IHRvSnNvbih2KTtcbiAgfVxuICByZXR1cm4gdjtcbn1cblxuXG5mdW5jdGlvbiAkSHR0cFBhcmFtU2VyaWFsaXplclByb3ZpZGVyKCkge1xuICAvKipcbiAgICogQG5nZG9jIHNlcnZpY2VcbiAgICogQG5hbWUgJGh0dHBQYXJhbVNlcmlhbGl6ZXJcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmF1bHQge0BsaW5rICRodHRwIGAkaHR0cGB9IHBhcmFtcyBzZXJpYWxpemVyIHRoYXQgY29udmVydHMgb2JqZWN0cyB0byBzdHJpbmdzXG4gICAqIGFjY29yZGluZyB0byB0aGUgZm9sbG93aW5nIHJ1bGVzOlxuICAgKlxuICAgKiAqIGB7J2Zvbyc6ICdiYXInfWAgcmVzdWx0cyBpbiBgZm9vPWJhcmBcbiAgICogKiBgeydmb28nOiBEYXRlLm5vdygpfWAgcmVzdWx0cyBpbiBgZm9vPTIwMTUtMDQtMDFUMDklM0E1MCUzQTQ5LjI2MlpgIChgdG9JU09TdHJpbmcoKWAgYW5kIGVuY29kZWQgcmVwcmVzZW50YXRpb24gb2YgYSBEYXRlIG9iamVjdClcbiAgICogKiBgeydmb28nOiBbJ2JhcicsICdiYXonXX1gIHJlc3VsdHMgaW4gYGZvbz1iYXImZm9vPWJhemAgKHJlcGVhdGVkIGtleSBmb3IgZWFjaCBhcnJheSBlbGVtZW50KVxuICAgKiAqIGB7J2Zvbyc6IHsnYmFyJzonYmF6J319YCByZXN1bHRzIGluIGBmb289JTdCJTIyYmFyJTIyJTNBJTIyYmF6JTIyJTdEXCJgIChzdHJpbmdpZmllZCBhbmQgZW5jb2RlZCByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QpXG4gICAqXG4gICAqIE5vdGUgdGhhdCBzZXJpYWxpemVyIHdpbGwgc29ydCB0aGUgcmVxdWVzdCBwYXJhbWV0ZXJzIGFscGhhYmV0aWNhbGx5LlxuICAgKiAqL1xuXG4gIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBuZ1BhcmFtU2VyaWFsaXplcihwYXJhbXMpIHtcbiAgICAgIGlmICghcGFyYW1zKSByZXR1cm4gJyc7XG4gICAgICB2YXIgcGFydHMgPSBbXTtcbiAgICAgIGZvckVhY2hTb3J0ZWQocGFyYW1zLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCBpc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjtcbiAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24odiwgaykge1xuICAgICAgICAgICAgcGFydHMucHVzaChlbmNvZGVVcmlRdWVyeShrZXkpICArICc9JyArIGVuY29kZVVyaVF1ZXJ5KHNlcmlhbGl6ZVZhbHVlKHYpKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFydHMucHVzaChlbmNvZGVVcmlRdWVyeShrZXkpICsgJz0nICsgZW5jb2RlVXJpUXVlcnkoc2VyaWFsaXplVmFsdWUodmFsdWUpKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcGFydHMuam9pbignJicpO1xuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uICRIdHRwUGFyYW1TZXJpYWxpemVySlFMaWtlUHJvdmlkZXIoKSB7XG4gIC8qKlxuICAgKiBAbmdkb2Mgc2VydmljZVxuICAgKiBAbmFtZSAkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZVxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQWx0ZXJuYXRpdmUge0BsaW5rICRodHRwIGAkaHR0cGB9IHBhcmFtcyBzZXJpYWxpemVyIHRoYXQgZm9sbG93c1xuICAgKiBqUXVlcnkncyBbYHBhcmFtKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vanF1ZXJ5LnBhcmFtLykgbWV0aG9kIGxvZ2ljLlxuICAgKiBUaGUgc2VyaWFsaXplciB3aWxsIGFsc28gc29ydCB0aGUgcGFyYW1zIGFscGhhYmV0aWNhbGx5LlxuICAgKlxuICAgKiBUbyB1c2UgaXQgZm9yIHNlcmlhbGl6aW5nIGAkaHR0cGAgcmVxdWVzdCBwYXJhbWV0ZXJzLCBzZXQgaXQgYXMgdGhlIGBwYXJhbVNlcmlhbGl6ZXJgIHByb3BlcnR5OlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAkaHR0cCh7XG4gICAqICAgdXJsOiBteVVybCxcbiAgICogICBtZXRob2Q6ICdHRVQnLFxuICAgKiAgIHBhcmFtczogbXlQYXJhbXMsXG4gICAqICAgcGFyYW1TZXJpYWxpemVyOiAnJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2UnXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0byBzZXQgaXQgYXMgdGhlIGRlZmF1bHQgYHBhcmFtU2VyaWFsaXplcmAgaW4gdGhlXG4gICAqIHtAbGluayAkaHR0cFByb3ZpZGVyI2RlZmF1bHRzIGAkaHR0cFByb3ZpZGVyYH0uXG4gICAqXG4gICAqIEFkZGl0aW9uYWxseSwgeW91IGNhbiBpbmplY3QgdGhlIHNlcmlhbGl6ZXIgYW5kIHVzZSBpdCBleHBsaWNpdGx5LCBmb3IgZXhhbXBsZSB0byBzZXJpYWxpemVcbiAgICogZm9ybSBkYXRhIGZvciBzdWJtaXNzaW9uOlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAuY29udHJvbGxlcihmdW5jdGlvbigkaHR0cCwgJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2UpIHtcbiAgICogICAvLy4uLlxuICAgKlxuICAgKiAgICRodHRwKHtcbiAgICogICAgIHVybDogbXlVcmwsXG4gICAqICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICogICAgIGRhdGE6ICRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlKG15RGF0YSksXG4gICAqICAgICBoZWFkZXJzOiB7XG4gICAqICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xuICAgKiAgICAgfVxuICAgKiAgIH0pO1xuICAgKlxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqICovXG4gIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBqUXVlcnlMaWtlUGFyYW1TZXJpYWxpemVyKHBhcmFtcykge1xuICAgICAgaWYgKCFwYXJhbXMpIHJldHVybiAnJztcbiAgICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgICAgc2VyaWFsaXplKHBhcmFtcywgJycsIHRydWUpO1xuICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oJyYnKTtcblxuICAgICAgZnVuY3Rpb24gc2VyaWFsaXplKHRvU2VyaWFsaXplLCBwcmVmaXgsIHRvcExldmVsKSB7XG4gICAgICAgIGlmICh0b1NlcmlhbGl6ZSA9PT0gbnVsbCB8fCBpc1VuZGVmaW5lZCh0b1NlcmlhbGl6ZSkpIHJldHVybjtcbiAgICAgICAgaWYgKGlzQXJyYXkodG9TZXJpYWxpemUpKSB7XG4gICAgICAgICAgZm9yRWFjaCh0b1NlcmlhbGl6ZSwgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7XG4gICAgICAgICAgICBzZXJpYWxpemUodmFsdWUsIHByZWZpeCArICdbJyArIChpc09iamVjdCh2YWx1ZSkgPyBpbmRleCA6ICcnKSArICddJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodG9TZXJpYWxpemUpICYmICFpc0RhdGUodG9TZXJpYWxpemUpKSB7XG4gICAgICAgICAgZm9yRWFjaFNvcnRlZCh0b1NlcmlhbGl6ZSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAgICAgc2VyaWFsaXplKHZhbHVlLCBwcmVmaXggK1xuICAgICAgICAgICAgICAgICh0b3BMZXZlbCA/ICcnIDogJ1snKSArXG4gICAgICAgICAgICAgICAga2V5ICtcbiAgICAgICAgICAgICAgICAodG9wTGV2ZWwgPyAnJyA6ICddJykpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkocHJlZml4KSArICc9JyArIGVuY29kZVVyaVF1ZXJ5KHNlcmlhbGl6ZVZhbHVlKHRvU2VyaWFsaXplKSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEh0dHBSZXNwb25zZVRyYW5zZm9ybShkYXRhLCBoZWFkZXJzKSB7XG4gIGlmIChpc1N0cmluZyhkYXRhKSkge1xuICAgIC8vIFN0cmlwIGpzb24gdnVsbmVyYWJpbGl0eSBwcm90ZWN0aW9uIHByZWZpeCBhbmQgdHJpbSB3aGl0ZXNwYWNlXG4gICAgdmFyIHRlbXBEYXRhID0gZGF0YS5yZXBsYWNlKEpTT05fUFJPVEVDVElPTl9QUkVGSVgsICcnKS50cmltKCk7XG5cbiAgICBpZiAodGVtcERhdGEpIHtcbiAgICAgIHZhciBjb250ZW50VHlwZSA9IGhlYWRlcnMoJ0NvbnRlbnQtVHlwZScpO1xuICAgICAgaWYgKChjb250ZW50VHlwZSAmJiAoY29udGVudFR5cGUuaW5kZXhPZihBUFBMSUNBVElPTl9KU09OKSA9PT0gMCkpIHx8IGlzSnNvbkxpa2UodGVtcERhdGEpKSB7XG4gICAgICAgIGRhdGEgPSBmcm9tSnNvbih0ZW1wRGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGlzSnNvbkxpa2Uoc3RyKSB7XG4gICAgdmFyIGpzb25TdGFydCA9IHN0ci5tYXRjaChKU09OX1NUQVJUKTtcbiAgICByZXR1cm4ganNvblN0YXJ0ICYmIEpTT05fRU5EU1tqc29uU3RhcnRbMF1dLnRlc3Qoc3RyKTtcbn1cblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8ga2V5IHZhbHVlIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBoZWFkZXJzIFJhdyBoZWFkZXJzIGFzIGEgc3RyaW5nXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBQYXJzZWQgaGVhZGVycyBhcyBrZXkgdmFsdWUgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSBjcmVhdGVNYXAoKSwgaTtcblxuICBmdW5jdGlvbiBmaWxsSW5QYXJzZWQoa2V5LCB2YWwpIHtcbiAgICBpZiAoa2V5KSB7XG4gICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpc1N0cmluZyhoZWFkZXJzKSkge1xuICAgIGZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICAgIGZpbGxJblBhcnNlZChsb3dlcmNhc2UodHJpbShsaW5lLnN1YnN0cigwLCBpKSkpLCB0cmltKGxpbmUuc3Vic3RyKGkgKyAxKSkpO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGhlYWRlcnMpKSB7XG4gICAgZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbihoZWFkZXJWYWwsIGhlYWRlcktleSkge1xuICAgICAgZmlsbEluUGFyc2VkKGxvd2VyY2FzZShoZWFkZXJLZXkpLCB0cmltKGhlYWRlclZhbCkpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIGFjY2VzcyB0byBwYXJzZWQgaGVhZGVycy5cbiAqXG4gKiBIZWFkZXJzIGFyZSBsYXp5IHBhcnNlZCB3aGVuIGZpcnN0IHJlcXVlc3RlZC5cbiAqIEBzZWUgcGFyc2VIZWFkZXJzXG4gKlxuICogQHBhcmFtIHsoc3RyaW5nfE9iamVjdCl9IGhlYWRlcnMgSGVhZGVycyB0byBwcm92aWRlIGFjY2VzcyB0by5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmc9KX0gUmV0dXJucyBhIGdldHRlciBmdW5jdGlvbiB3aGljaCBpZiBjYWxsZWQgd2l0aDpcbiAqXG4gKiAgIC0gaWYgY2FsbGVkIHdpdGggc2luZ2xlIGFuIGFyZ3VtZW50IHJldHVybnMgYSBzaW5nbGUgaGVhZGVyIHZhbHVlIG9yIG51bGxcbiAqICAgLSBpZiBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHMgcmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgaGVhZGVycy5cbiAqL1xuZnVuY3Rpb24gaGVhZGVyc0dldHRlcihoZWFkZXJzKSB7XG4gIHZhciBoZWFkZXJzT2JqO1xuXG4gIHJldHVybiBmdW5jdGlvbihuYW1lKSB7XG4gICAgaWYgKCFoZWFkZXJzT2JqKSBoZWFkZXJzT2JqID0gIHBhcnNlSGVhZGVycyhoZWFkZXJzKTtcblxuICAgIGlmIChuYW1lKSB7XG4gICAgICB2YXIgdmFsdWUgPSBoZWFkZXJzT2JqW2xvd2VyY2FzZShuYW1lKV07XG4gICAgICBpZiAodmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhlYWRlcnNPYmo7XG4gIH07XG59XG5cblxuLyoqXG4gKiBDaGFpbiBhbGwgZ2l2ZW4gZnVuY3Rpb25zXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGZvciBib3RoIHJlcXVlc3QgYW5kIHJlc3BvbnNlIHRyYW5zZm9ybWluZ1xuICpcbiAqIEBwYXJhbSB7Kn0gZGF0YSBEYXRhIHRvIHRyYW5zZm9ybS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nPSl9IGhlYWRlcnMgSFRUUCBoZWFkZXJzIGdldHRlciBmbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGF0dXMgSFRUUCBzdGF0dXMgY29kZSBvZiB0aGUgcmVzcG9uc2UuXG4gKiBAcGFyYW0geyhGdW5jdGlvbnxBcnJheS48RnVuY3Rpb24+KX0gZm5zIEZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIGZ1bmN0aW9ucy5cbiAqIEByZXR1cm5zIHsqfSBUcmFuc2Zvcm1lZCBkYXRhLlxuICovXG5mdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIHN0YXR1cywgZm5zKSB7XG4gIGlmIChpc0Z1bmN0aW9uKGZucykpIHtcbiAgICByZXR1cm4gZm5zKGRhdGEsIGhlYWRlcnMsIHN0YXR1cyk7XG4gIH1cblxuICBmb3JFYWNoKGZucywgZnVuY3Rpb24oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycywgc3RhdHVzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cblxuZnVuY3Rpb24gaXNTdWNjZXNzKHN0YXR1cykge1xuICByZXR1cm4gMjAwIDw9IHN0YXR1cyAmJiBzdGF0dXMgPCAzMDA7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRodHRwUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIGAkaHR0cFByb3ZpZGVyYCB0byBjaGFuZ2UgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgdGhlIHtAbGluayBuZy4kaHR0cCAkaHR0cH0gc2VydmljZS5cbiAqICovXG5mdW5jdGlvbiAkSHR0cFByb3ZpZGVyKCkge1xuICAvKipcbiAgICogQG5nZG9jIHByb3BlcnR5XG4gICAqIEBuYW1lICRodHRwUHJvdmlkZXIjZGVmYXVsdHNcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE9iamVjdCBjb250YWluaW5nIGRlZmF1bHQgdmFsdWVzIGZvciBhbGwge0BsaW5rIG5nLiRodHRwICRodHRwfSByZXF1ZXN0cy5cbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy5jYWNoZWAqKiAtIHtPYmplY3R9IC0gYW4gb2JqZWN0IGJ1aWx0IHdpdGgge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgYCRjYWNoZUZhY3RvcnlgfVxuICAgKiB0aGF0IHdpbGwgcHJvdmlkZSB0aGUgY2FjaGUgZm9yIGFsbCByZXF1ZXN0cyB3aG8gc2V0IHRoZWlyIGBjYWNoZWAgcHJvcGVydHkgdG8gYHRydWVgLlxuICAgKiBJZiB5b3Ugc2V0IHRoZSBgZGVmYXVsdHMuY2FjaGUgPSBmYWxzZWAgdGhlbiBvbmx5IHJlcXVlc3RzIHRoYXQgc3BlY2lmeSB0aGVpciBvd24gY3VzdG9tXG4gICAqIGNhY2hlIG9iamVjdCB3aWxsIGJlIGNhY2hlZC4gU2VlIHtAbGluayAkaHR0cCNjYWNoaW5nICRodHRwIENhY2hpbmd9IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgKlxuICAgKiAtICoqYGRlZmF1bHRzLnhzcmZDb29raWVOYW1lYCoqIC0ge3N0cmluZ30gLSBOYW1lIG9mIGNvb2tpZSBjb250YWluaW5nIHRoZSBYU1JGIHRva2VuLlxuICAgKiBEZWZhdWx0cyB2YWx1ZSBpcyBgJ1hTUkYtVE9LRU4nYC5cbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy54c3JmSGVhZGVyTmFtZWAqKiAtIHtzdHJpbmd9IC0gTmFtZSBvZiBIVFRQIGhlYWRlciB0byBwb3B1bGF0ZSB3aXRoIHRoZVxuICAgKiBYU1JGIHRva2VuLiBEZWZhdWx0cyB2YWx1ZSBpcyBgJ1gtWFNSRi1UT0tFTidgLlxuICAgKlxuICAgKiAtICoqYGRlZmF1bHRzLmhlYWRlcnNgKiogLSB7T2JqZWN0fSAtIERlZmF1bHQgaGVhZGVycyBmb3IgYWxsICRodHRwIHJlcXVlc3RzLlxuICAgKiBSZWZlciB0byB7QGxpbmsgbmcuJGh0dHAjc2V0dGluZy1odHRwLWhlYWRlcnMgJGh0dHB9IGZvciBkb2N1bWVudGF0aW9uIG9uXG4gICAqIHNldHRpbmcgZGVmYXVsdCBoZWFkZXJzLlxuICAgKiAgICAgLSAqKmBkZWZhdWx0cy5oZWFkZXJzLmNvbW1vbmAqKlxuICAgKiAgICAgLSAqKmBkZWZhdWx0cy5oZWFkZXJzLnBvc3RgKipcbiAgICogICAgIC0gKipgZGVmYXVsdHMuaGVhZGVycy5wdXRgKipcbiAgICogICAgIC0gKipgZGVmYXVsdHMuaGVhZGVycy5wYXRjaGAqKlxuICAgKlxuICAgKlxuICAgKiAtICoqYGRlZmF1bHRzLnBhcmFtU2VyaWFsaXplcmAqKiAtIGB7c3RyaW5nfGZ1bmN0aW9uKE9iamVjdDxzdHJpbmcsc3RyaW5nPik6c3RyaW5nfWAgLSBBIGZ1bmN0aW9uXG4gICAqICB1c2VkIHRvIHRoZSBwcmVwYXJlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiByZXF1ZXN0IHBhcmFtZXRlcnMgKHNwZWNpZmllZCBhcyBhbiBvYmplY3QpLlxuICAgKiAgSWYgc3BlY2lmaWVkIGFzIHN0cmluZywgaXQgaXMgaW50ZXJwcmV0ZWQgYXMgYSBmdW5jdGlvbiByZWdpc3RlcmVkIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LlxuICAgKiAgRGVmYXVsdHMgdG8ge0BsaW5rIG5nLiRodHRwUGFyYW1TZXJpYWxpemVyICRodHRwUGFyYW1TZXJpYWxpemVyfS5cbiAgICpcbiAgICoqL1xuICB2YXIgZGVmYXVsdHMgPSB0aGlzLmRlZmF1bHRzID0ge1xuICAgIC8vIHRyYW5zZm9ybSBpbmNvbWluZyByZXNwb25zZSBkYXRhXG4gICAgdHJhbnNmb3JtUmVzcG9uc2U6IFtkZWZhdWx0SHR0cFJlc3BvbnNlVHJhbnNmb3JtXSxcblxuICAgIC8vIHRyYW5zZm9ybSBvdXRnb2luZyByZXF1ZXN0IGRhdGFcbiAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0KGQpICYmICFpc0ZpbGUoZCkgJiYgIWlzQmxvYihkKSAmJiAhaXNGb3JtRGF0YShkKSA/IHRvSnNvbihkKSA6IGQ7XG4gICAgfV0sXG5cbiAgICAvLyBkZWZhdWx0IGhlYWRlcnNcbiAgICBoZWFkZXJzOiB7XG4gICAgICBjb21tb246IHtcbiAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gICAgICB9LFxuICAgICAgcG9zdDogICBzaGFsbG93Q29weShDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTiksXG4gICAgICBwdXQ6ICAgIHNoYWxsb3dDb3B5KENPTlRFTlRfVFlQRV9BUFBMSUNBVElPTl9KU09OKSxcbiAgICAgIHBhdGNoOiAgc2hhbGxvd0NvcHkoQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04pXG4gICAgfSxcblxuICAgIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gICAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gICAgcGFyYW1TZXJpYWxpemVyOiAnJGh0dHBQYXJhbVNlcmlhbGl6ZXInXG4gIH07XG5cbiAgdmFyIHVzZUFwcGx5QXN5bmMgPSBmYWxzZTtcbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGh0dHBQcm92aWRlciN1c2VBcHBseUFzeW5jXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBDb25maWd1cmUgJGh0dHAgc2VydmljZSB0byBjb21iaW5lIHByb2Nlc3Npbmcgb2YgbXVsdGlwbGUgaHR0cCByZXNwb25zZXMgcmVjZWl2ZWQgYXQgYXJvdW5kXG4gICAqIHRoZSBzYW1lIHRpbWUgdmlhIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseUFzeW5jICRyb290U2NvcGUuJGFwcGx5QXN5bmN9LiBUaGlzIGNhbiByZXN1bHQgaW5cbiAgICogc2lnbmlmaWNhbnQgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnQgZm9yIGJpZ2dlciBhcHBsaWNhdGlvbnMgdGhhdCBtYWtlIG1hbnkgSFRUUCByZXF1ZXN0c1xuICAgKiBjb25jdXJyZW50bHkgKGNvbW1vbiBkdXJpbmcgYXBwbGljYXRpb24gYm9vdHN0cmFwKS5cbiAgICpcbiAgICogRGVmYXVsdHMgdG8gZmFsc2UuIElmIG5vIHZhbHVlIGlzIHNwZWNpZmllZCwgcmV0dXJucyB0aGUgY3VycmVudCBjb25maWd1cmVkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB2YWx1ZSBJZiB0cnVlLCB3aGVuIHJlcXVlc3RzIGFyZSBsb2FkZWQsIHRoZXkgd2lsbCBzY2hlZHVsZSBhIGRlZmVycmVkXG4gICAqICAgIFwiYXBwbHlcIiBvbiB0aGUgbmV4dCB0aWNrLCBnaXZpbmcgdGltZSBmb3Igc3Vic2VxdWVudCByZXF1ZXN0cyBpbiBhIHJvdWdobHkgfjEwbXMgd2luZG93XG4gICAqICAgIHRvIGxvYWQgYW5kIHNoYXJlIHRoZSBzYW1lIGRpZ2VzdCBjeWNsZS5cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW58T2JqZWN0fSBJZiBhIHZhbHVlIGlzIHNwZWNpZmllZCwgcmV0dXJucyB0aGUgJGh0dHBQcm92aWRlciBmb3IgY2hhaW5pbmcuXG4gICAqICAgIG90aGVyd2lzZSwgcmV0dXJucyB0aGUgY3VycmVudCBjb25maWd1cmVkIHZhbHVlLlxuICAgKiovXG4gIHRoaXMudXNlQXBwbHlBc3luYyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIHVzZUFwcGx5QXN5bmMgPSAhIXZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB1c2VBcHBseUFzeW5jO1xuICB9O1xuXG4gIHZhciB1c2VMZWdhY3lQcm9taXNlID0gdHJ1ZTtcbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGh0dHBQcm92aWRlciN1c2VMZWdhY3lQcm9taXNlRXh0ZW5zaW9uc1xuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQ29uZmlndXJlIGAkaHR0cGAgc2VydmljZSB0byByZXR1cm4gcHJvbWlzZXMgd2l0aG91dCB0aGUgc2hvcnRoYW5kIG1ldGhvZHMgYHN1Y2Nlc3NgIGFuZCBgZXJyb3JgLlxuICAgKiBUaGlzIHNob3VsZCBiZSB1c2VkIHRvIG1ha2Ugc3VyZSB0aGF0IGFwcGxpY2F0aW9ucyB3b3JrIHdpdGhvdXQgdGhlc2UgbWV0aG9kcy5cbiAgICpcbiAgICogRGVmYXVsdHMgdG8gdHJ1ZS4gSWYgbm8gdmFsdWUgaXMgc3BlY2lmaWVkLCByZXR1cm5zIHRoZSBjdXJyZW50IGNvbmZpZ3VyZWQgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZhbHVlIElmIHRydWUsIGAkaHR0cGAgd2lsbCByZXR1cm4gYSBwcm9taXNlIHdpdGggdGhlIGRlcHJlY2F0ZWQgbGVnYWN5IGBzdWNjZXNzYCBhbmQgYGVycm9yYCBtZXRob2RzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxPYmplY3R9IElmIGEgdmFsdWUgaXMgc3BlY2lmaWVkLCByZXR1cm5zIHRoZSAkaHR0cFByb3ZpZGVyIGZvciBjaGFpbmluZy5cbiAgICogICAgb3RoZXJ3aXNlLCByZXR1cm5zIHRoZSBjdXJyZW50IGNvbmZpZ3VyZWQgdmFsdWUuXG4gICAqKi9cbiAgdGhpcy51c2VMZWdhY3lQcm9taXNlRXh0ZW5zaW9ucyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIHVzZUxlZ2FjeVByb21pc2UgPSAhIXZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB1c2VMZWdhY3lQcm9taXNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICogQG5hbWUgJGh0dHBQcm92aWRlciNpbnRlcmNlcHRvcnNcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEFycmF5IGNvbnRhaW5pbmcgc2VydmljZSBmYWN0b3JpZXMgZm9yIGFsbCBzeW5jaHJvbm91cyBvciBhc3luY2hyb25vdXMge0BsaW5rIG5nLiRodHRwICRodHRwfVxuICAgKiBwcmUtcHJvY2Vzc2luZyBvZiByZXF1ZXN0IG9yIHBvc3Rwcm9jZXNzaW5nIG9mIHJlc3BvbnNlcy5cbiAgICpcbiAgICogVGhlc2Ugc2VydmljZSBmYWN0b3JpZXMgYXJlIG9yZGVyZWQgYnkgcmVxdWVzdCwgaS5lLiB0aGV5IGFyZSBhcHBsaWVkIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuICAgKiBhcnJheSwgb24gcmVxdWVzdCwgYnV0IHJldmVyc2Ugb3JkZXIsIG9uIHJlc3BvbnNlLlxuICAgKlxuICAgKiB7QGxpbmsgbmcuJGh0dHAjaW50ZXJjZXB0b3JzIEludGVyY2VwdG9ycyBkZXRhaWxlZCBpbmZvfVxuICAgKiovXG4gIHZhciBpbnRlcmNlcHRvckZhY3RvcmllcyA9IHRoaXMuaW50ZXJjZXB0b3JzID0gW107XG5cbiAgdGhpcy4kZ2V0ID0gWyckaHR0cEJhY2tlbmQnLCAnJCRjb29raWVSZWFkZXInLCAnJGNhY2hlRmFjdG9yeScsICckcm9vdFNjb3BlJywgJyRxJywgJyRpbmplY3RvcicsXG4gICAgICBmdW5jdGlvbigkaHR0cEJhY2tlbmQsICQkY29va2llUmVhZGVyLCAkY2FjaGVGYWN0b3J5LCAkcm9vdFNjb3BlLCAkcSwgJGluamVjdG9yKSB7XG5cbiAgICB2YXIgZGVmYXVsdENhY2hlID0gJGNhY2hlRmFjdG9yeSgnJGh0dHAnKTtcblxuICAgIC8qKlxuICAgICAqIE1ha2Ugc3VyZSB0aGF0IGRlZmF1bHQgcGFyYW0gc2VyaWFsaXplciBpcyBleHBvc2VkIGFzIGEgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBkZWZhdWx0cy5wYXJhbVNlcmlhbGl6ZXIgPSBpc1N0cmluZyhkZWZhdWx0cy5wYXJhbVNlcmlhbGl6ZXIpID9cbiAgICAgICRpbmplY3Rvci5nZXQoZGVmYXVsdHMucGFyYW1TZXJpYWxpemVyKSA6IGRlZmF1bHRzLnBhcmFtU2VyaWFsaXplcjtcblxuICAgIC8qKlxuICAgICAqIEludGVyY2VwdG9ycyBzdG9yZWQgaW4gcmV2ZXJzZSBvcmRlci4gSW5uZXIgaW50ZXJjZXB0b3JzIGJlZm9yZSBvdXRlciBpbnRlcmNlcHRvcnMuXG4gICAgICogVGhlIHJldmVyc2FsIGlzIG5lZWRlZCBzbyB0aGF0IHdlIGNhbiBidWlsZCB1cCB0aGUgaW50ZXJjZXB0aW9uIGNoYWluIGFyb3VuZCB0aGVcbiAgICAgKiBzZXJ2ZXIgcmVxdWVzdC5cbiAgICAgKi9cbiAgICB2YXIgcmV2ZXJzZWRJbnRlcmNlcHRvcnMgPSBbXTtcblxuICAgIGZvckVhY2goaW50ZXJjZXB0b3JGYWN0b3JpZXMsIGZ1bmN0aW9uKGludGVyY2VwdG9yRmFjdG9yeSkge1xuICAgICAgcmV2ZXJzZWRJbnRlcmNlcHRvcnMudW5zaGlmdChpc1N0cmluZyhpbnRlcmNlcHRvckZhY3RvcnkpXG4gICAgICAgICAgPyAkaW5qZWN0b3IuZ2V0KGludGVyY2VwdG9yRmFjdG9yeSkgOiAkaW5qZWN0b3IuaW52b2tlKGludGVyY2VwdG9yRmFjdG9yeSkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAqIEBuYW1lICRodHRwXG4gICAgICogQHJlcXVpcmVzIG5nLiRodHRwQmFja2VuZFxuICAgICAqIEByZXF1aXJlcyAkY2FjaGVGYWN0b3J5XG4gICAgICogQHJlcXVpcmVzICRyb290U2NvcGVcbiAgICAgKiBAcmVxdWlyZXMgJHFcbiAgICAgKiBAcmVxdWlyZXMgJGluamVjdG9yXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBUaGUgYCRodHRwYCBzZXJ2aWNlIGlzIGEgY29yZSBBbmd1bGFyIHNlcnZpY2UgdGhhdCBmYWNpbGl0YXRlcyBjb21tdW5pY2F0aW9uIHdpdGggdGhlIHJlbW90ZVxuICAgICAqIEhUVFAgc2VydmVycyB2aWEgdGhlIGJyb3dzZXIncyBbWE1MSHR0cFJlcXVlc3RdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL3htbGh0dHByZXF1ZXN0KVxuICAgICAqIG9iamVjdCBvciB2aWEgW0pTT05QXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0pTT05QKS5cbiAgICAgKlxuICAgICAqIEZvciB1bml0IHRlc3RpbmcgYXBwbGljYXRpb25zIHRoYXQgdXNlIGAkaHR0cGAgc2VydmljZSwgc2VlXG4gICAgICoge0BsaW5rIG5nTW9jay4kaHR0cEJhY2tlbmQgJGh0dHBCYWNrZW5kIG1vY2t9LlxuICAgICAqXG4gICAgICogRm9yIGEgaGlnaGVyIGxldmVsIG9mIGFic3RyYWN0aW9uLCBwbGVhc2UgY2hlY2sgb3V0IHRoZSB7QGxpbmsgbmdSZXNvdXJjZS4kcmVzb3VyY2VcbiAgICAgKiAkcmVzb3VyY2V9IHNlcnZpY2UuXG4gICAgICpcbiAgICAgKiBUaGUgJGh0dHAgQVBJIGlzIGJhc2VkIG9uIHRoZSB7QGxpbmsgbmcuJHEgZGVmZXJyZWQvcHJvbWlzZSBBUElzfSBleHBvc2VkIGJ5XG4gICAgICogdGhlICRxIHNlcnZpY2UuIFdoaWxlIGZvciBzaW1wbGUgdXNhZ2UgcGF0dGVybnMgdGhpcyBkb2Vzbid0IG1hdHRlciBtdWNoLCBmb3IgYWR2YW5jZWQgdXNhZ2VcbiAgICAgKiBpdCBpcyBpbXBvcnRhbnQgdG8gZmFtaWxpYXJpemUgeW91cnNlbGYgd2l0aCB0aGVzZSBBUElzIGFuZCB0aGUgZ3VhcmFudGVlcyB0aGV5IHByb3ZpZGUuXG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIEdlbmVyYWwgdXNhZ2VcbiAgICAgKiBUaGUgYCRodHRwYCBzZXJ2aWNlIGlzIGEgZnVuY3Rpb24gd2hpY2ggdGFrZXMgYSBzaW5nbGUgYXJndW1lbnQg4oCUIGEge0BsaW5rICRodHRwI3VzYWdlIGNvbmZpZ3VyYXRpb24gb2JqZWN0fSDigJRcbiAgICAgKiB0aGF0IGlzIHVzZWQgdG8gZ2VuZXJhdGUgYW4gSFRUUCByZXF1ZXN0IGFuZCByZXR1cm5zICBhIHtAbGluayBuZy4kcSBwcm9taXNlfS5cbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICAvLyBTaW1wbGUgR0VUIHJlcXVlc3QgZXhhbXBsZTpcbiAgICAgKiAgICRodHRwKHtcbiAgICAgKiAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgKiAgICAgdXJsOiAnL3NvbWVVcmwnXG4gICAgICogICB9KS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAqICAgICAgIC8vIHRoaXMgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgYXN5bmNocm9ub3VzbHlcbiAgICAgKiAgICAgICAvLyB3aGVuIHRoZSByZXNwb25zZSBpcyBhdmFpbGFibGVcbiAgICAgKiAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAqICAgICAgIC8vIGNhbGxlZCBhc3luY2hyb25vdXNseSBpZiBhbiBlcnJvciBvY2N1cnNcbiAgICAgKiAgICAgICAvLyBvciBzZXJ2ZXIgcmV0dXJucyByZXNwb25zZSB3aXRoIGFuIGVycm9yIHN0YXR1cy5cbiAgICAgKiAgICAgfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBUaGUgcmVzcG9uc2Ugb2JqZWN0IGhhcyB0aGVzZSBwcm9wZXJ0aWVzOlxuICAgICAqXG4gICAgICogICAtICoqZGF0YSoqIOKAkyBge3N0cmluZ3xPYmplY3R9YCDigJMgVGhlIHJlc3BvbnNlIGJvZHkgdHJhbnNmb3JtZWQgd2l0aCB0aGUgdHJhbnNmb3JtXG4gICAgICogICAgIGZ1bmN0aW9ucy5cbiAgICAgKiAgIC0gKipzdGF0dXMqKiDigJMgYHtudW1iZXJ9YCDigJMgSFRUUCBzdGF0dXMgY29kZSBvZiB0aGUgcmVzcG9uc2UuXG4gICAgICogICAtICoqaGVhZGVycyoqIOKAkyBge2Z1bmN0aW9uKFtoZWFkZXJOYW1lXSl9YCDigJMgSGVhZGVyIGdldHRlciBmdW5jdGlvbi5cbiAgICAgKiAgIC0gKipjb25maWcqKiDigJMgYHtPYmplY3R9YCDigJMgVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgd2FzIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIHJlcXVlc3QuXG4gICAgICogICAtICoqc3RhdHVzVGV4dCoqIOKAkyBge3N0cmluZ31gIOKAkyBIVFRQIHN0YXR1cyB0ZXh0IG9mIHRoZSByZXNwb25zZS5cbiAgICAgKlxuICAgICAqIEEgcmVzcG9uc2Ugc3RhdHVzIGNvZGUgYmV0d2VlbiAyMDAgYW5kIDI5OSBpcyBjb25zaWRlcmVkIGEgc3VjY2VzcyBzdGF0dXMgYW5kXG4gICAgICogd2lsbCByZXN1bHQgaW4gdGhlIHN1Y2Nlc3MgY2FsbGJhY2sgYmVpbmcgY2FsbGVkLiBOb3RlIHRoYXQgaWYgdGhlIHJlc3BvbnNlIGlzIGEgcmVkaXJlY3QsXG4gICAgICogWE1MSHR0cFJlcXVlc3Qgd2lsbCB0cmFuc3BhcmVudGx5IGZvbGxvdyBpdCwgbWVhbmluZyB0aGF0IHRoZSBlcnJvciBjYWxsYmFjayB3aWxsIG5vdCBiZVxuICAgICAqIGNhbGxlZCBmb3Igc3VjaCByZXNwb25zZXMuXG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIFNob3J0Y3V0IG1ldGhvZHNcbiAgICAgKlxuICAgICAqIFNob3J0Y3V0IG1ldGhvZHMgYXJlIGFsc28gYXZhaWxhYmxlLiBBbGwgc2hvcnRjdXQgbWV0aG9kcyByZXF1aXJlIHBhc3NpbmcgaW4gdGhlIFVSTCwgYW5kXG4gICAgICogcmVxdWVzdCBkYXRhIG11c3QgYmUgcGFzc2VkIGluIGZvciBQT1NUL1BVVCByZXF1ZXN0cy4gQW4gb3B0aW9uYWwgY29uZmlnIGNhbiBiZSBwYXNzZWQgYXMgdGhlXG4gICAgICogbGFzdCBhcmd1bWVudC5cbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICAkaHR0cC5nZXQoJy9zb21lVXJsJywgY29uZmlnKS50aGVuKHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XG4gICAgICogICAkaHR0cC5wb3N0KCcvc29tZVVybCcsIGRhdGEsIGNvbmZpZykudGhlbihzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQ29tcGxldGUgbGlzdCBvZiBzaG9ydGN1dCBtZXRob2RzOlxuICAgICAqXG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjZ2V0ICRodHRwLmdldH1cbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNoZWFkICRodHRwLmhlYWR9XG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjcG9zdCAkaHR0cC5wb3N0fVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI3B1dCAkaHR0cC5wdXR9XG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjZGVsZXRlICRodHRwLmRlbGV0ZX1cbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNqc29ucCAkaHR0cC5qc29ucH1cbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNwYXRjaCAkaHR0cC5wYXRjaH1cbiAgICAgKlxuICAgICAqXG4gICAgICogIyMgV3JpdGluZyBVbml0IFRlc3RzIHRoYXQgdXNlICRodHRwXG4gICAgICogV2hlbiB1bml0IHRlc3RpbmcgKHVzaW5nIHtAbGluayBuZ01vY2sgbmdNb2NrfSksIGl0IGlzIG5lY2Vzc2FyeSB0byBjYWxsXG4gICAgICoge0BsaW5rIG5nTW9jay4kaHR0cEJhY2tlbmQjZmx1c2ggJGh0dHBCYWNrZW5kLmZsdXNoKCl9IHRvIGZsdXNoIGVhY2ggcGVuZGluZ1xuICAgICAqIHJlcXVlc3QgdXNpbmcgdHJhaW5lZCByZXNwb25zZXMuXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiAkaHR0cEJhY2tlbmQuZXhwZWN0R0VUKC4uLik7XG4gICAgICogJGh0dHAuZ2V0KC4uLik7XG4gICAgICogJGh0dHBCYWNrZW5kLmZsdXNoKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAjIyBEZXByZWNhdGlvbiBOb3RpY2VcbiAgICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG4gICAgICogICBUaGUgYCRodHRwYCBsZWdhY3kgcHJvbWlzZSBtZXRob2RzIGBzdWNjZXNzYCBhbmQgYGVycm9yYCBoYXZlIGJlZW4gZGVwcmVjYXRlZC5cbiAgICAgKiAgIFVzZSB0aGUgc3RhbmRhcmQgYHRoZW5gIG1ldGhvZCBpbnN0ZWFkLlxuICAgICAqICAgSWYge0BsaW5rICRodHRwUHJvdmlkZXIjdXNlTGVnYWN5UHJvbWlzZUV4dGVuc2lvbnMgYCRodHRwUHJvdmlkZXIudXNlTGVnYWN5UHJvbWlzZUV4dGVuc2lvbnNgfSBpcyBzZXQgdG9cbiAgICAgKiAgIGBmYWxzZWAgdGhlbiB0aGVzZSBtZXRob2RzIHdpbGwgdGhyb3cge0BsaW5rICRodHRwOmxlZ2FjeSBgJGh0dHAvbGVnYWN5YH0gZXJyb3IuXG4gICAgICogPC9kaXY+XG4gICAgICpcbiAgICAgKiAjIyBTZXR0aW5nIEhUVFAgSGVhZGVyc1xuICAgICAqXG4gICAgICogVGhlICRodHRwIHNlcnZpY2Ugd2lsbCBhdXRvbWF0aWNhbGx5IGFkZCBjZXJ0YWluIEhUVFAgaGVhZGVycyB0byBhbGwgcmVxdWVzdHMuIFRoZXNlIGRlZmF1bHRzXG4gICAgICogY2FuIGJlIGZ1bGx5IGNvbmZpZ3VyZWQgYnkgYWNjZXNzaW5nIHRoZSBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzYCBjb25maWd1cmF0aW9uXG4gICAgICogb2JqZWN0LCB3aGljaCBjdXJyZW50bHkgY29udGFpbnMgdGhpcyBkZWZhdWx0IGNvbmZpZ3VyYXRpb246XG4gICAgICpcbiAgICAgKiAtIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uYCAoaGVhZGVycyB0aGF0IGFyZSBjb21tb24gZm9yIGFsbCByZXF1ZXN0cyk6XG4gICAgICogICAtIGBBY2NlcHQ6IGFwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICogLyAqYFxuICAgICAqIC0gYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5wb3N0YDogKGhlYWRlciBkZWZhdWx0cyBmb3IgUE9TVCByZXF1ZXN0cylcbiAgICAgKiAgIC0gYENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbmBcbiAgICAgKiAtIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMucHV0YCAoaGVhZGVyIGRlZmF1bHRzIGZvciBQVVQgcmVxdWVzdHMpXG4gICAgICogICAtIGBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25gXG4gICAgICpcbiAgICAgKiBUbyBhZGQgb3Igb3ZlcndyaXRlIHRoZXNlIGRlZmF1bHRzLCBzaW1wbHkgYWRkIG9yIHJlbW92ZSBhIHByb3BlcnR5IGZyb20gdGhlc2UgY29uZmlndXJhdGlvblxuICAgICAqIG9iamVjdHMuIFRvIGFkZCBoZWFkZXJzIGZvciBhbiBIVFRQIG1ldGhvZCBvdGhlciB0aGFuIFBPU1Qgb3IgUFVULCBzaW1wbHkgYWRkIGEgbmV3IG9iamVjdFxuICAgICAqIHdpdGggdGhlIGxvd2VyY2FzZWQgSFRUUCBtZXRob2QgbmFtZSBhcyB0aGUga2V5LCBlLmcuXG4gICAgICogYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXQgPSB7ICdNeS1IZWFkZXInIDogJ3ZhbHVlJyB9YC5cbiAgICAgKlxuICAgICAqIFRoZSBkZWZhdWx0cyBjYW4gYWxzbyBiZSBzZXQgYXQgcnVudGltZSB2aWEgdGhlIGAkaHR0cC5kZWZhdWx0c2Agb2JqZWN0IGluIHRoZSBzYW1lXG4gICAgICogZmFzaGlvbi4gRm9yIGV4YW1wbGU6XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBtb2R1bGUucnVuKGZ1bmN0aW9uKCRodHRwKSB7XG4gICAgICogICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljIFltVmxjRHBpYjI5dydcbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEluIGFkZGl0aW9uLCB5b3UgY2FuIHN1cHBseSBhIGBoZWFkZXJzYCBwcm9wZXJ0eSBpbiB0aGUgY29uZmlnIG9iamVjdCBwYXNzZWQgd2hlblxuICAgICAqIGNhbGxpbmcgYCRodHRwKGNvbmZpZylgLCB3aGljaCBvdmVycmlkZXMgdGhlIGRlZmF1bHRzIHdpdGhvdXQgY2hhbmdpbmcgdGhlbSBnbG9iYWxseS5cbiAgICAgKlxuICAgICAqIFRvIGV4cGxpY2l0bHkgcmVtb3ZlIGEgaGVhZGVyIGF1dG9tYXRpY2FsbHkgYWRkZWQgdmlhICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycyBvbiBhIHBlciByZXF1ZXN0IGJhc2lzLFxuICAgICAqIFVzZSB0aGUgYGhlYWRlcnNgIHByb3BlcnR5LCBzZXR0aW5nIHRoZSBkZXNpcmVkIGhlYWRlciB0byBgdW5kZWZpbmVkYC4gRm9yIGV4YW1wbGU6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIHZhciByZXEgPSB7XG4gICAgICogIG1ldGhvZDogJ1BPU1QnLFxuICAgICAqICB1cmw6ICdodHRwOi8vZXhhbXBsZS5jb20nLFxuICAgICAqICBoZWFkZXJzOiB7XG4gICAgICogICAgJ0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZFxuICAgICAqICB9LFxuICAgICAqICBkYXRhOiB7IHRlc3Q6ICd0ZXN0JyB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogJGh0dHAocmVxKS50aGVuKGZ1bmN0aW9uKCl7Li4ufSwgZnVuY3Rpb24oKXsuLi59KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMjIFRyYW5zZm9ybWluZyBSZXF1ZXN0cyBhbmQgUmVzcG9uc2VzXG4gICAgICpcbiAgICAgKiBCb3RoIHJlcXVlc3RzIGFuZCByZXNwb25zZXMgY2FuIGJlIHRyYW5zZm9ybWVkIHVzaW5nIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uczogYHRyYW5zZm9ybVJlcXVlc3RgXG4gICAgICogYW5kIGB0cmFuc2Zvcm1SZXNwb25zZWAuIFRoZXNlIHByb3BlcnRpZXMgY2FuIGJlIGEgc2luZ2xlIGZ1bmN0aW9uIHRoYXQgcmV0dXJuc1xuICAgICAqIHRoZSB0cmFuc2Zvcm1lZCB2YWx1ZSAoYGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIsIHN0YXR1cylgKSBvciBhbiBhcnJheSBvZiBzdWNoIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9ucyxcbiAgICAgKiB3aGljaCBhbGxvd3MgeW91IHRvIGBwdXNoYCBvciBgdW5zaGlmdGAgYSBuZXcgdHJhbnNmb3JtYXRpb24gZnVuY3Rpb24gaW50byB0aGUgdHJhbnNmb3JtYXRpb24gY2hhaW4uXG4gICAgICpcbiAgICAgKiAjIyMgRGVmYXVsdCBUcmFuc2Zvcm1hdGlvbnNcbiAgICAgKlxuICAgICAqIFRoZSBgJGh0dHBQcm92aWRlcmAgcHJvdmlkZXIgYW5kIGAkaHR0cGAgc2VydmljZSBleHBvc2UgYGRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3RgIGFuZFxuICAgICAqIGBkZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZWAgcHJvcGVydGllcy4gSWYgYSByZXF1ZXN0IGRvZXMgbm90IHByb3ZpZGUgaXRzIG93biB0cmFuc2Zvcm1hdGlvbnNcbiAgICAgKiB0aGVuIHRoZXNlIHdpbGwgYmUgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gYXVnbWVudCBvciByZXBsYWNlIHRoZSBkZWZhdWx0IHRyYW5zZm9ybWF0aW9ucyBieSBtb2RpZnlpbmcgdGhlc2UgcHJvcGVydGllcyBieSBhZGRpbmcgdG8gb3JcbiAgICAgKiByZXBsYWNpbmcgdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQW5ndWxhciBwcm92aWRlcyB0aGUgZm9sbG93aW5nIGRlZmF1bHQgdHJhbnNmb3JtYXRpb25zOlxuICAgICAqXG4gICAgICogUmVxdWVzdCB0cmFuc2Zvcm1hdGlvbnMgKGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3RgIGFuZCBgJGh0dHAuZGVmYXVsdHMudHJhbnNmb3JtUmVxdWVzdGApOlxuICAgICAqXG4gICAgICogLSBJZiB0aGUgYGRhdGFgIHByb3BlcnR5IG9mIHRoZSByZXF1ZXN0IGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5zIGFuIG9iamVjdCwgc2VyaWFsaXplIGl0XG4gICAgICogICBpbnRvIEpTT04gZm9ybWF0LlxuICAgICAqXG4gICAgICogUmVzcG9uc2UgdHJhbnNmb3JtYXRpb25zIChgJGh0dHBQcm92aWRlci5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZWAgYW5kIGAkaHR0cC5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZWApOlxuICAgICAqXG4gICAgICogIC0gSWYgWFNSRiBwcmVmaXggaXMgZGV0ZWN0ZWQsIHN0cmlwIGl0IChzZWUgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnMgc2VjdGlvbiBiZWxvdykuXG4gICAgICogIC0gSWYgSlNPTiByZXNwb25zZSBpcyBkZXRlY3RlZCwgZGVzZXJpYWxpemUgaXQgdXNpbmcgYSBKU09OIHBhcnNlci5cbiAgICAgKlxuICAgICAqXG4gICAgICogIyMjIE92ZXJyaWRpbmcgdGhlIERlZmF1bHQgVHJhbnNmb3JtYXRpb25zIFBlciBSZXF1ZXN0XG4gICAgICpcbiAgICAgKiBJZiB5b3Ugd2lzaCBvdmVycmlkZSB0aGUgcmVxdWVzdC9yZXNwb25zZSB0cmFuc2Zvcm1hdGlvbnMgb25seSBmb3IgYSBzaW5nbGUgcmVxdWVzdCB0aGVuIHByb3ZpZGVcbiAgICAgKiBgdHJhbnNmb3JtUmVxdWVzdGAgYW5kL29yIGB0cmFuc2Zvcm1SZXNwb25zZWAgcHJvcGVydGllcyBvbiB0aGUgY29uZmlndXJhdGlvbiBvYmplY3QgcGFzc2VkXG4gICAgICogaW50byBgJGh0dHBgLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IGlmIHlvdSBwcm92aWRlIHRoZXNlIHByb3BlcnRpZXMgb24gdGhlIGNvbmZpZyBvYmplY3QgdGhlIGRlZmF1bHQgdHJhbnNmb3JtYXRpb25zIHdpbGwgYmVcbiAgICAgKiBvdmVyd3JpdHRlbi4gSWYgeW91IHdpc2ggdG8gYXVnbWVudCB0aGUgZGVmYXVsdCB0cmFuc2Zvcm1hdGlvbnMgdGhlbiB5b3UgbXVzdCBpbmNsdWRlIHRoZW0gaW4geW91clxuICAgICAqIGxvY2FsIHRyYW5zZm9ybWF0aW9uIGFycmF5LlxuICAgICAqXG4gICAgICogVGhlIGZvbGxvd2luZyBjb2RlIGRlbW9uc3RyYXRlcyBhZGRpbmcgYSBuZXcgcmVzcG9uc2UgdHJhbnNmb3JtYXRpb24gdG8gYmUgcnVuIGFmdGVyIHRoZSBkZWZhdWx0IHJlc3BvbnNlXG4gICAgICogdHJhbnNmb3JtYXRpb25zIGhhdmUgYmVlbiBydW4uXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGZ1bmN0aW9uIGFwcGVuZFRyYW5zZm9ybShkZWZhdWx0cywgdHJhbnNmb3JtKSB7XG4gICAgICpcbiAgICAgKiAgIC8vIFdlIGNhbid0IGd1YXJhbnRlZSB0aGF0IHRoZSBkZWZhdWx0IHRyYW5zZm9ybWF0aW9uIGlzIGFuIGFycmF5XG4gICAgICogICBkZWZhdWx0cyA9IGFuZ3VsYXIuaXNBcnJheShkZWZhdWx0cykgPyBkZWZhdWx0cyA6IFtkZWZhdWx0c107XG4gICAgICpcbiAgICAgKiAgIC8vIEFwcGVuZCB0aGUgbmV3IHRyYW5zZm9ybWF0aW9uIHRvIHRoZSBkZWZhdWx0c1xuICAgICAqICAgcmV0dXJuIGRlZmF1bHRzLmNvbmNhdCh0cmFuc2Zvcm0pO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqICRodHRwKHtcbiAgICAgKiAgIHVybDogJy4uLicsXG4gICAgICogICBtZXRob2Q6ICdHRVQnLFxuICAgICAqICAgdHJhbnNmb3JtUmVzcG9uc2U6IGFwcGVuZFRyYW5zZm9ybSgkaHR0cC5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgICAgcmV0dXJuIGRvVHJhbnNmb3JtKHZhbHVlKTtcbiAgICAgKiAgIH0pXG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIENhY2hpbmdcbiAgICAgKlxuICAgICAqIFRvIGVuYWJsZSBjYWNoaW5nLCBzZXQgdGhlIHJlcXVlc3QgY29uZmlndXJhdGlvbiBgY2FjaGVgIHByb3BlcnR5IHRvIGB0cnVlYCAodG8gdXNlIGRlZmF1bHRcbiAgICAgKiBjYWNoZSkgb3IgdG8gYSBjdXN0b20gY2FjaGUgb2JqZWN0IChidWlsdCB3aXRoIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5IGAkY2FjaGVGYWN0b3J5YH0pLlxuICAgICAqIFdoZW4gdGhlIGNhY2hlIGlzIGVuYWJsZWQsIGAkaHR0cGAgc3RvcmVzIHRoZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdGhlIHNwZWNpZmllZFxuICAgICAqIGNhY2hlLiBUaGUgbmV4dCB0aW1lIHRoZSBzYW1lIHJlcXVlc3QgaXMgbWFkZSwgdGhlIHJlc3BvbnNlIGlzIHNlcnZlZCBmcm9tIHRoZSBjYWNoZSB3aXRob3V0XG4gICAgICogc2VuZGluZyBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlci5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCBldmVuIGlmIHRoZSByZXNwb25zZSBpcyBzZXJ2ZWQgZnJvbSBjYWNoZSwgZGVsaXZlcnkgb2YgdGhlIGRhdGEgaXMgYXN5bmNocm9ub3VzIGluXG4gICAgICogdGhlIHNhbWUgd2F5IHRoYXQgcmVhbCByZXF1ZXN0cyBhcmUuXG4gICAgICpcbiAgICAgKiBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgR0VUIHJlcXVlc3RzIGZvciB0aGUgc2FtZSBVUkwgdGhhdCBzaG91bGQgYmUgY2FjaGVkIHVzaW5nIHRoZSBzYW1lXG4gICAgICogY2FjaGUsIGJ1dCB0aGUgY2FjaGUgaXMgbm90IHBvcHVsYXRlZCB5ZXQsIG9ubHkgb25lIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB3aWxsIGJlIG1hZGUgYW5kXG4gICAgICogdGhlIHJlbWFpbmluZyByZXF1ZXN0cyB3aWxsIGJlIGZ1bGZpbGxlZCB1c2luZyB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgZmlyc3QgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gY2hhbmdlIHRoZSBkZWZhdWx0IGNhY2hlIHRvIGEgbmV3IG9iamVjdCAoYnVpbHQgd2l0aFxuICAgICAqIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5IGAkY2FjaGVGYWN0b3J5YH0pIGJ5IHVwZGF0aW5nIHRoZVxuICAgICAqIHtAbGluayBuZy4kaHR0cCNkZWZhdWx0cyBgJGh0dHAuZGVmYXVsdHMuY2FjaGVgfSBwcm9wZXJ0eS4gQWxsIHJlcXVlc3RzIHdobyBzZXRcbiAgICAgKiB0aGVpciBgY2FjaGVgIHByb3BlcnR5IHRvIGB0cnVlYCB3aWxsIG5vdyB1c2UgdGhpcyBjYWNoZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBJZiB5b3Ugc2V0IHRoZSBkZWZhdWx0IGNhY2hlIHRvIGBmYWxzZWAgdGhlbiBvbmx5IHJlcXVlc3RzIHRoYXQgc3BlY2lmeSB0aGVpciBvd24gY3VzdG9tXG4gICAgICogY2FjaGUgb2JqZWN0IHdpbGwgYmUgY2FjaGVkLlxuICAgICAqXG4gICAgICogIyMgSW50ZXJjZXB0b3JzXG4gICAgICpcbiAgICAgKiBCZWZvcmUgeW91IHN0YXJ0IGNyZWF0aW5nIGludGVyY2VwdG9ycywgYmUgc3VyZSB0byB1bmRlcnN0YW5kIHRoZVxuICAgICAqIHtAbGluayBuZy4kcSAkcSBhbmQgZGVmZXJyZWQvcHJvbWlzZSBBUElzfS5cbiAgICAgKlxuICAgICAqIEZvciBwdXJwb3NlcyBvZiBnbG9iYWwgZXJyb3IgaGFuZGxpbmcsIGF1dGhlbnRpY2F0aW9uLCBvciBhbnkga2luZCBvZiBzeW5jaHJvbm91cyBvclxuICAgICAqIGFzeW5jaHJvbm91cyBwcmUtcHJvY2Vzc2luZyBvZiByZXF1ZXN0IG9yIHBvc3Rwcm9jZXNzaW5nIG9mIHJlc3BvbnNlcywgaXQgaXMgZGVzaXJhYmxlIHRvIGJlXG4gICAgICogYWJsZSB0byBpbnRlcmNlcHQgcmVxdWVzdHMgYmVmb3JlIHRoZXkgYXJlIGhhbmRlZCB0byB0aGUgc2VydmVyIGFuZFxuICAgICAqIHJlc3BvbnNlcyBiZWZvcmUgdGhleSBhcmUgaGFuZGVkIG92ZXIgdG8gdGhlIGFwcGxpY2F0aW9uIGNvZGUgdGhhdFxuICAgICAqIGluaXRpYXRlZCB0aGVzZSByZXF1ZXN0cy4gVGhlIGludGVyY2VwdG9ycyBsZXZlcmFnZSB0aGUge0BsaW5rIG5nLiRxXG4gICAgICogcHJvbWlzZSBBUElzfSB0byBmdWxmaWxsIHRoaXMgbmVlZCBmb3IgYm90aCBzeW5jaHJvbm91cyBhbmQgYXN5bmNocm9ub3VzIHByZS1wcm9jZXNzaW5nLlxuICAgICAqXG4gICAgICogVGhlIGludGVyY2VwdG9ycyBhcmUgc2VydmljZSBmYWN0b3JpZXMgdGhhdCBhcmUgcmVnaXN0ZXJlZCB3aXRoIHRoZSBgJGh0dHBQcm92aWRlcmAgYnlcbiAgICAgKiBhZGRpbmcgdGhlbSB0byB0aGUgYCRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzYCBhcnJheS4gVGhlIGZhY3RvcnkgaXMgY2FsbGVkIGFuZFxuICAgICAqIGluamVjdGVkIHdpdGggZGVwZW5kZW5jaWVzIChpZiBzcGVjaWZpZWQpIGFuZCByZXR1cm5zIHRoZSBpbnRlcmNlcHRvci5cbiAgICAgKlxuICAgICAqIFRoZXJlIGFyZSB0d28ga2luZHMgb2YgaW50ZXJjZXB0b3JzIChhbmQgdHdvIGtpbmRzIG9mIHJlamVjdGlvbiBpbnRlcmNlcHRvcnMpOlxuICAgICAqXG4gICAgICogICAqIGByZXF1ZXN0YDogaW50ZXJjZXB0b3JzIGdldCBjYWxsZWQgd2l0aCBhIGh0dHAge0BsaW5rICRodHRwI3VzYWdlIGNvbmZpZ30gb2JqZWN0LiBUaGUgZnVuY3Rpb24gaXMgZnJlZSB0b1xuICAgICAqICAgICBtb2RpZnkgdGhlIGBjb25maWdgIG9iamVjdCBvciBjcmVhdGUgYSBuZXcgb25lLiBUaGUgZnVuY3Rpb24gbmVlZHMgdG8gcmV0dXJuIHRoZSBgY29uZmlnYFxuICAgICAqICAgICBvYmplY3QgZGlyZWN0bHksIG9yIGEgcHJvbWlzZSBjb250YWluaW5nIHRoZSBgY29uZmlnYCBvciBhIG5ldyBgY29uZmlnYCBvYmplY3QuXG4gICAgICogICAqIGByZXF1ZXN0RXJyb3JgOiBpbnRlcmNlcHRvciBnZXRzIGNhbGxlZCB3aGVuIGEgcHJldmlvdXMgaW50ZXJjZXB0b3IgdGhyZXcgYW4gZXJyb3Igb3JcbiAgICAgKiAgICAgcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi5cbiAgICAgKiAgICogYHJlc3BvbnNlYDogaW50ZXJjZXB0b3JzIGdldCBjYWxsZWQgd2l0aCBodHRwIGByZXNwb25zZWAgb2JqZWN0LiBUaGUgZnVuY3Rpb24gaXMgZnJlZSB0b1xuICAgICAqICAgICBtb2RpZnkgdGhlIGByZXNwb25zZWAgb2JqZWN0IG9yIGNyZWF0ZSBhIG5ldyBvbmUuIFRoZSBmdW5jdGlvbiBuZWVkcyB0byByZXR1cm4gdGhlIGByZXNwb25zZWBcbiAgICAgKiAgICAgb2JqZWN0IGRpcmVjdGx5LCBvciBhcyBhIHByb21pc2UgY29udGFpbmluZyB0aGUgYHJlc3BvbnNlYCBvciBhIG5ldyBgcmVzcG9uc2VgIG9iamVjdC5cbiAgICAgKiAgICogYHJlc3BvbnNlRXJyb3JgOiBpbnRlcmNlcHRvciBnZXRzIGNhbGxlZCB3aGVuIGEgcHJldmlvdXMgaW50ZXJjZXB0b3IgdGhyZXcgYW4gZXJyb3Igb3JcbiAgICAgKiAgICAgcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi5cbiAgICAgKlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIC8vIHJlZ2lzdGVyIHRoZSBpbnRlcmNlcHRvciBhcyBhIHNlcnZpY2VcbiAgICAgKiAgICRwcm92aWRlLmZhY3RvcnkoJ215SHR0cEludGVyY2VwdG9yJywgZnVuY3Rpb24oJHEsIGRlcGVuZGVuY3kxLCBkZXBlbmRlbmN5Mikge1xuICAgICAqICAgICByZXR1cm4ge1xuICAgICAqICAgICAgIC8vIG9wdGlvbmFsIG1ldGhvZFxuICAgICAqICAgICAgICdyZXF1ZXN0JzogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gc3VjY2Vzc1xuICAgICAqICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgKiAgICAgICB9LFxuICAgICAqXG4gICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kXG4gICAgICogICAgICAncmVxdWVzdEVycm9yJzogZnVuY3Rpb24ocmVqZWN0aW9uKSB7XG4gICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gZXJyb3JcbiAgICAgKiAgICAgICAgIGlmIChjYW5SZWNvdmVyKHJlamVjdGlvbikpIHtcbiAgICAgKiAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlT3JOZXdQcm9taXNlXG4gICAgICogICAgICAgICB9XG4gICAgICogICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlamVjdGlvbik7XG4gICAgICogICAgICAgfSxcbiAgICAgKlxuICAgICAqXG4gICAgICpcbiAgICAgKiAgICAgICAvLyBvcHRpb25hbCBtZXRob2RcbiAgICAgKiAgICAgICAncmVzcG9uc2UnOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIHN1Y2Nlc3NcbiAgICAgKiAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgKiAgICAgICB9LFxuICAgICAqXG4gICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kXG4gICAgICogICAgICAncmVzcG9uc2VFcnJvcic6IGZ1bmN0aW9uKHJlamVjdGlvbikge1xuICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIGVycm9yXG4gICAgICogICAgICAgICBpZiAoY2FuUmVjb3ZlcihyZWplY3Rpb24pKSB7XG4gICAgICogICAgICAgICAgIHJldHVybiByZXNwb25zZU9yTmV3UHJvbWlzZVxuICAgICAqICAgICAgICAgfVxuICAgICAqICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xuICAgICAqICAgICAgIH1cbiAgICAgKiAgICAgfTtcbiAgICAgKiAgIH0pO1xuICAgICAqXG4gICAgICogICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKCdteUh0dHBJbnRlcmNlcHRvcicpO1xuICAgICAqXG4gICAgICpcbiAgICAgKiAgIC8vIGFsdGVybmF0aXZlbHksIHJlZ2lzdGVyIHRoZSBpbnRlcmNlcHRvciB2aWEgYW4gYW5vbnltb3VzIGZhY3RvcnlcbiAgICAgKiAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goZnVuY3Rpb24oJHEsIGRlcGVuZGVuY3kxLCBkZXBlbmRlbmN5Mikge1xuICAgICAqICAgICByZXR1cm4ge1xuICAgICAqICAgICAgJ3JlcXVlc3QnOiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgKiAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlXG4gICAgICogICAgICAgfSxcbiAgICAgKlxuICAgICAqICAgICAgICdyZXNwb25zZSc6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICogICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZVxuICAgICAqICAgICAgIH1cbiAgICAgKiAgICAgfTtcbiAgICAgKiAgIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogIyMgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnNcbiAgICAgKlxuICAgICAqIFdoZW4gZGVzaWduaW5nIHdlYiBhcHBsaWNhdGlvbnMsIGNvbnNpZGVyIHNlY3VyaXR5IHRocmVhdHMgZnJvbTpcbiAgICAgKlxuICAgICAqIC0gW0pTT04gdnVsbmVyYWJpbGl0eV0oaHR0cDovL2hhYWNrZWQuY29tL2FyY2hpdmUvMjAwOC8xMS8yMC9hbmF0b215LW9mLWEtc3VidGxlLWpzb24tdnVsbmVyYWJpbGl0eS5hc3B4KVxuICAgICAqIC0gW1hTUkZdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3Jvc3Mtc2l0ZV9yZXF1ZXN0X2ZvcmdlcnkpXG4gICAgICpcbiAgICAgKiBCb3RoIHNlcnZlciBhbmQgdGhlIGNsaWVudCBtdXN0IGNvb3BlcmF0ZSBpbiBvcmRlciB0byBlbGltaW5hdGUgdGhlc2UgdGhyZWF0cy4gQW5ndWxhciBjb21lc1xuICAgICAqIHByZS1jb25maWd1cmVkIHdpdGggc3RyYXRlZ2llcyB0aGF0IGFkZHJlc3MgdGhlc2UgaXNzdWVzLCBidXQgZm9yIHRoaXMgdG8gd29yayBiYWNrZW5kIHNlcnZlclxuICAgICAqIGNvb3BlcmF0aW9uIGlzIHJlcXVpcmVkLlxuICAgICAqXG4gICAgICogIyMjIEpTT04gVnVsbmVyYWJpbGl0eSBQcm90ZWN0aW9uXG4gICAgICpcbiAgICAgKiBBIFtKU09OIHZ1bG5lcmFiaWxpdHldKGh0dHA6Ly9oYWFja2VkLmNvbS9hcmNoaXZlLzIwMDgvMTEvMjAvYW5hdG9teS1vZi1hLXN1YnRsZS1qc29uLXZ1bG5lcmFiaWxpdHkuYXNweClcbiAgICAgKiBhbGxvd3MgdGhpcmQgcGFydHkgd2Vic2l0ZSB0byB0dXJuIHlvdXIgSlNPTiByZXNvdXJjZSBVUkwgaW50b1xuICAgICAqIFtKU09OUF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9KU09OUCkgcmVxdWVzdCB1bmRlciBzb21lIGNvbmRpdGlvbnMuIFRvXG4gICAgICogY291bnRlciB0aGlzIHlvdXIgc2VydmVyIGNhbiBwcmVmaXggYWxsIEpTT04gcmVxdWVzdHMgd2l0aCBmb2xsb3dpbmcgc3RyaW5nIGBcIildfScsXFxuXCJgLlxuICAgICAqIEFuZ3VsYXIgd2lsbCBhdXRvbWF0aWNhbGx5IHN0cmlwIHRoZSBwcmVmaXggYmVmb3JlIHByb2Nlc3NpbmcgaXQgYXMgSlNPTi5cbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlIGlmIHlvdXIgc2VydmVyIG5lZWRzIHRvIHJldHVybjpcbiAgICAgKiBgYGBqc1xuICAgICAqIFsnb25lJywndHdvJ11cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIHdoaWNoIGlzIHZ1bG5lcmFibGUgdG8gYXR0YWNrLCB5b3VyIHNlcnZlciBjYW4gcmV0dXJuOlxuICAgICAqIGBgYGpzXG4gICAgICogKV19JyxcbiAgICAgKiBbJ29uZScsJ3R3byddXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBBbmd1bGFyIHdpbGwgc3RyaXAgdGhlIHByZWZpeCwgYmVmb3JlIHByb2Nlc3NpbmcgdGhlIEpTT04uXG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIyBDcm9zcyBTaXRlIFJlcXVlc3QgRm9yZ2VyeSAoWFNSRikgUHJvdGVjdGlvblxuICAgICAqXG4gICAgICogW1hTUkZdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3Jvc3Mtc2l0ZV9yZXF1ZXN0X2ZvcmdlcnkpIGlzIGEgdGVjaG5pcXVlIGJ5IHdoaWNoXG4gICAgICogYW4gdW5hdXRob3JpemVkIHNpdGUgY2FuIGdhaW4geW91ciB1c2VyJ3MgcHJpdmF0ZSBkYXRhLiBBbmd1bGFyIHByb3ZpZGVzIGEgbWVjaGFuaXNtXG4gICAgICogdG8gY291bnRlciBYU1JGLiBXaGVuIHBlcmZvcm1pbmcgWEhSIHJlcXVlc3RzLCB0aGUgJGh0dHAgc2VydmljZSByZWFkcyBhIHRva2VuIGZyb20gYSBjb29raWVcbiAgICAgKiAoYnkgZGVmYXVsdCwgYFhTUkYtVE9LRU5gKSBhbmQgc2V0cyBpdCBhcyBhbiBIVFRQIGhlYWRlciAoYFgtWFNSRi1UT0tFTmApLiBTaW5jZSBvbmx5XG4gICAgICogSmF2YVNjcmlwdCB0aGF0IHJ1bnMgb24geW91ciBkb21haW4gY291bGQgcmVhZCB0aGUgY29va2llLCB5b3VyIHNlcnZlciBjYW4gYmUgYXNzdXJlZCB0aGF0XG4gICAgICogdGhlIFhIUiBjYW1lIGZyb20gSmF2YVNjcmlwdCBydW5uaW5nIG9uIHlvdXIgZG9tYWluLiBUaGUgaGVhZGVyIHdpbGwgbm90IGJlIHNldCBmb3JcbiAgICAgKiBjcm9zcy1kb21haW4gcmVxdWVzdHMuXG4gICAgICpcbiAgICAgKiBUbyB0YWtlIGFkdmFudGFnZSBvZiB0aGlzLCB5b3VyIHNlcnZlciBuZWVkcyB0byBzZXQgYSB0b2tlbiBpbiBhIEphdmFTY3JpcHQgcmVhZGFibGUgc2Vzc2lvblxuICAgICAqIGNvb2tpZSBjYWxsZWQgYFhTUkYtVE9LRU5gIG9uIHRoZSBmaXJzdCBIVFRQIEdFVCByZXF1ZXN0LiBPbiBzdWJzZXF1ZW50IFhIUiByZXF1ZXN0cyB0aGVcbiAgICAgKiBzZXJ2ZXIgY2FuIHZlcmlmeSB0aGF0IHRoZSBjb29raWUgbWF0Y2hlcyBgWC1YU1JGLVRPS0VOYCBIVFRQIGhlYWRlciwgYW5kIHRoZXJlZm9yZSBiZSBzdXJlXG4gICAgICogdGhhdCBvbmx5IEphdmFTY3JpcHQgcnVubmluZyBvbiB5b3VyIGRvbWFpbiBjb3VsZCBoYXZlIHNlbnQgdGhlIHJlcXVlc3QuIFRoZSB0b2tlbiBtdXN0IGJlXG4gICAgICogdW5pcXVlIGZvciBlYWNoIHVzZXIgYW5kIG11c3QgYmUgdmVyaWZpYWJsZSBieSB0aGUgc2VydmVyICh0byBwcmV2ZW50IHRoZSBKYXZhU2NyaXB0IGZyb21cbiAgICAgKiBtYWtpbmcgdXAgaXRzIG93biB0b2tlbnMpLiBXZSByZWNvbW1lbmQgdGhhdCB0aGUgdG9rZW4gaXMgYSBkaWdlc3Qgb2YgeW91ciBzaXRlJ3NcbiAgICAgKiBhdXRoZW50aWNhdGlvbiBjb29raWUgd2l0aCBhIFtzYWx0XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TYWx0XyhjcnlwdG9ncmFwaHkmIzQxOylcbiAgICAgKiBmb3IgYWRkZWQgc2VjdXJpdHkuXG4gICAgICpcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgaGVhZGVycyBjYW4gYmUgc3BlY2lmaWVkIHVzaW5nIHRoZSB4c3JmSGVhZGVyTmFtZSBhbmQgeHNyZkNvb2tpZU5hbWVcbiAgICAgKiBwcm9wZXJ0aWVzIG9mIGVpdGhlciAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzIGF0IGNvbmZpZy10aW1lLCAkaHR0cC5kZWZhdWx0cyBhdCBydW4tdGltZSxcbiAgICAgKiBvciB0aGUgcGVyLXJlcXVlc3QgY29uZmlnIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEluIG9yZGVyIHRvIHByZXZlbnQgY29sbGlzaW9ucyBpbiBlbnZpcm9ubWVudHMgd2hlcmUgbXVsdGlwbGUgQW5ndWxhciBhcHBzIHNoYXJlIHRoZVxuICAgICAqIHNhbWUgZG9tYWluIG9yIHN1YmRvbWFpbiwgd2UgcmVjb21tZW5kIHRoYXQgZWFjaCBhcHBsaWNhdGlvbiB1c2VzIHVuaXF1ZSBjb29raWUgbmFtZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgT2JqZWN0IGRlc2NyaWJpbmcgdGhlIHJlcXVlc3QgdG8gYmUgbWFkZSBhbmQgaG93IGl0IHNob3VsZCBiZVxuICAgICAqICAgIHByb2Nlc3NlZC4gVGhlIG9iamVjdCBoYXMgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICpcbiAgICAgKiAgICAtICoqbWV0aG9kKiog4oCTIGB7c3RyaW5nfWAg4oCTIEhUVFAgbWV0aG9kIChlLmcuICdHRVQnLCAnUE9TVCcsIGV0YylcbiAgICAgKiAgICAtICoqdXJsKiog4oCTIGB7c3RyaW5nfWAg4oCTIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCBvZiB0aGUgcmVzb3VyY2UgdGhhdCBpcyBiZWluZyByZXF1ZXN0ZWQuXG4gICAgICogICAgLSAqKnBhcmFtcyoqIOKAkyBge09iamVjdC48c3RyaW5nfE9iamVjdD59YCDigJMgTWFwIG9mIHN0cmluZ3Mgb3Igb2JqZWN0cyB3aGljaCB3aWxsIGJlIHNlcmlhbGl6ZWRcbiAgICAgKiAgICAgIHdpdGggdGhlIGBwYXJhbVNlcmlhbGl6ZXJgIGFuZCBhcHBlbmRlZCBhcyBHRVQgcGFyYW1ldGVycy5cbiAgICAgKiAgICAtICoqZGF0YSoqIOKAkyBge3N0cmluZ3xPYmplY3R9YCDigJMgRGF0YSB0byBiZSBzZW50IGFzIHRoZSByZXF1ZXN0IG1lc3NhZ2UgZGF0YS5cbiAgICAgKiAgICAtICoqaGVhZGVycyoqIOKAkyBge09iamVjdH1gIOKAkyBNYXAgb2Ygc3RyaW5ncyBvciBmdW5jdGlvbnMgd2hpY2ggcmV0dXJuIHN0cmluZ3MgcmVwcmVzZW50aW5nXG4gICAgICogICAgICBIVFRQIGhlYWRlcnMgdG8gc2VuZCB0byB0aGUgc2VydmVyLiBJZiB0aGUgcmV0dXJuIHZhbHVlIG9mIGEgZnVuY3Rpb24gaXMgbnVsbCwgdGhlXG4gICAgICogICAgICBoZWFkZXIgd2lsbCBub3QgYmUgc2VudC4gRnVuY3Rpb25zIGFjY2VwdCBhIGNvbmZpZyBvYmplY3QgYXMgYW4gYXJndW1lbnQuXG4gICAgICogICAgLSAqKnhzcmZIZWFkZXJOYW1lKiog4oCTIGB7c3RyaW5nfWAg4oCTIE5hbWUgb2YgSFRUUCBoZWFkZXIgdG8gcG9wdWxhdGUgd2l0aCB0aGUgWFNSRiB0b2tlbi5cbiAgICAgKiAgICAtICoqeHNyZkNvb2tpZU5hbWUqKiDigJMgYHtzdHJpbmd9YCDigJMgTmFtZSBvZiBjb29raWUgY29udGFpbmluZyB0aGUgWFNSRiB0b2tlbi5cbiAgICAgKiAgICAtICoqdHJhbnNmb3JtUmVxdWVzdCoqIOKAk1xuICAgICAqICAgICAgYHtmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKXxBcnJheS48ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcik+fWAg4oCTXG4gICAgICogICAgICB0cmFuc2Zvcm0gZnVuY3Rpb24gb3IgYW4gYXJyYXkgb2Ygc3VjaCBmdW5jdGlvbnMuIFRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gdGFrZXMgdGhlIGh0dHBcbiAgICAgKiAgICAgIHJlcXVlc3QgYm9keSBhbmQgaGVhZGVycyBhbmQgcmV0dXJucyBpdHMgdHJhbnNmb3JtZWQgKHR5cGljYWxseSBzZXJpYWxpemVkKSB2ZXJzaW9uLlxuICAgICAqICAgICAgU2VlIHtAbGluayBuZy4kaHR0cCNvdmVycmlkaW5nLXRoZS1kZWZhdWx0LXRyYW5zZm9ybWF0aW9ucy1wZXItcmVxdWVzdFxuICAgICAqICAgICAgT3ZlcnJpZGluZyB0aGUgRGVmYXVsdCBUcmFuc2Zvcm1hdGlvbnN9XG4gICAgICogICAgLSAqKnRyYW5zZm9ybVJlc3BvbnNlKiog4oCTXG4gICAgICogICAgICBge2Z1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIsIHN0YXR1cyl8QXJyYXkuPGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIsIHN0YXR1cyk+fWAg4oCTXG4gICAgICogICAgICB0cmFuc2Zvcm0gZnVuY3Rpb24gb3IgYW4gYXJyYXkgb2Ygc3VjaCBmdW5jdGlvbnMuIFRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gdGFrZXMgdGhlIGh0dHBcbiAgICAgKiAgICAgIHJlc3BvbnNlIGJvZHksIGhlYWRlcnMgYW5kIHN0YXR1cyBhbmQgcmV0dXJucyBpdHMgdHJhbnNmb3JtZWQgKHR5cGljYWxseSBkZXNlcmlhbGl6ZWQpIHZlcnNpb24uXG4gICAgICogICAgICBTZWUge0BsaW5rIG5nLiRodHRwI292ZXJyaWRpbmctdGhlLWRlZmF1bHQtdHJhbnNmb3JtYXRpb25zLXBlci1yZXF1ZXN0XG4gICAgICogICAgICBPdmVycmlkaW5nIHRoZSBEZWZhdWx0IFRyYW5zZm9ybWF0aW9uanFMaWtzfVxuICAgICAqICAgIC0gKipwYXJhbVNlcmlhbGl6ZXIqKiAtIGB7c3RyaW5nfGZ1bmN0aW9uKE9iamVjdDxzdHJpbmcsc3RyaW5nPik6c3RyaW5nfWAgLSBBIGZ1bmN0aW9uIHVzZWQgdG9cbiAgICAgKiAgICAgIHByZXBhcmUgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiByZXF1ZXN0IHBhcmFtZXRlcnMgKHNwZWNpZmllZCBhcyBhbiBvYmplY3QpLlxuICAgICAqICAgICAgSWYgc3BlY2lmaWVkIGFzIHN0cmluZywgaXQgaXMgaW50ZXJwcmV0ZWQgYXMgZnVuY3Rpb24gcmVnaXN0ZXJlZCB3aXRoIHRoZVxuICAgICAqICAgICAge0BsaW5rICRpbmplY3RvciAkaW5qZWN0b3J9LCB3aGljaCBtZWFucyB5b3UgY2FuIGNyZWF0ZSB5b3VyIG93biBzZXJpYWxpemVyXG4gICAgICogICAgICBieSByZWdpc3RlcmluZyBpdCBhcyBhIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2Ugc2VydmljZX0uXG4gICAgICogICAgICBUaGUgZGVmYXVsdCBzZXJpYWxpemVyIGlzIHRoZSB7QGxpbmsgJGh0dHBQYXJhbVNlcmlhbGl6ZXIgJGh0dHBQYXJhbVNlcmlhbGl6ZXJ9O1xuICAgICAqICAgICAgYWx0ZXJuYXRpdmVseSwgeW91IGNhbiB1c2UgdGhlIHtAbGluayAkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZSAkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZX1cbiAgICAgKiAgICAtICoqY2FjaGUqKiDigJMgYHtib29sZWFufENhY2hlfWAg4oCTIElmIHRydWUsIGEgZGVmYXVsdCAkaHR0cCBjYWNoZSB3aWxsIGJlIHVzZWQgdG8gY2FjaGUgdGhlXG4gICAgICogICAgICBHRVQgcmVxdWVzdCwgb3RoZXJ3aXNlIGlmIGEgY2FjaGUgaW5zdGFuY2UgYnVpbHQgd2l0aFxuICAgICAqICAgICAge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgJGNhY2hlRmFjdG9yeX0sIHRoaXMgY2FjaGUgd2lsbCBiZSB1c2VkIGZvclxuICAgICAqICAgICAgY2FjaGluZy5cbiAgICAgKiAgICAtICoqdGltZW91dCoqIOKAkyBge251bWJlcnxQcm9taXNlfWAg4oCTIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzLCBvciB7QGxpbmsgbmcuJHEgcHJvbWlzZX1cbiAgICAgKiAgICAgIHRoYXQgc2hvdWxkIGFib3J0IHRoZSByZXF1ZXN0IHdoZW4gcmVzb2x2ZWQuXG4gICAgICogICAgLSAqKndpdGhDcmVkZW50aWFscyoqIC0gYHtib29sZWFufWAgLSB3aGV0aGVyIHRvIHNldCB0aGUgYHdpdGhDcmVkZW50aWFsc2AgZmxhZyBvbiB0aGVcbiAgICAgKiAgICAgIFhIUiBvYmplY3QuIFNlZSBbcmVxdWVzdHMgd2l0aCBjcmVkZW50aWFsc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRUUC9BY2Nlc3NfY29udHJvbF9DT1JTI1JlcXVlc3RzX3dpdGhfY3JlZGVudGlhbHMpXG4gICAgICogICAgICBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKiAgICAtICoqcmVzcG9uc2VUeXBlKiogLSBge3N0cmluZ31gIC0gc2VlXG4gICAgICogICAgICBbWE1MSHR0cFJlcXVlc3QucmVzcG9uc2VUeXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvWE1MSHR0cFJlcXVlc3QjeG1saHR0cHJlcXVlc3QtcmVzcG9uc2V0eXBlKS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gUmV0dXJucyBhIHtAbGluayBuZy4kcSBgUHJvbWlzZX1gIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB0byBhIHJlc3BvbnNlIG9iamVjdFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGUgcmVxdWVzdCBzdWNjZWVkcyBvciBmYWlscy5cbiAgICAgKlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHtBcnJheS48T2JqZWN0Pn0gcGVuZGluZ1JlcXVlc3RzIEFycmF5IG9mIGNvbmZpZyBvYmplY3RzIGZvciBjdXJyZW50bHkgcGVuZGluZ1xuICAgICAqICAgcmVxdWVzdHMuIFRoaXMgaXMgcHJpbWFyaWx5IG1lYW50IHRvIGJlIHVzZWQgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlcy5cbiAgICAgKlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbjxleGFtcGxlIG1vZHVsZT1cImh0dHBFeGFtcGxlXCI+XG48ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJGZXRjaENvbnRyb2xsZXJcIj5cbiAgICA8c2VsZWN0IG5nLW1vZGVsPVwibWV0aG9kXCIgYXJpYS1sYWJlbD1cIlJlcXVlc3QgbWV0aG9kXCI+XG4gICAgICA8b3B0aW9uPkdFVDwvb3B0aW9uPlxuICAgICAgPG9wdGlvbj5KU09OUDwvb3B0aW9uPlxuICAgIDwvc2VsZWN0PlxuICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXJsXCIgc2l6ZT1cIjgwXCIgYXJpYS1sYWJlbD1cIlVSTFwiIC8+XG4gICAgPGJ1dHRvbiBpZD1cImZldGNoYnRuXCIgbmctY2xpY2s9XCJmZXRjaCgpXCI+ZmV0Y2g8L2J1dHRvbj48YnI+XG4gICAgPGJ1dHRvbiBpZD1cInNhbXBsZWdldGJ0blwiIG5nLWNsaWNrPVwidXBkYXRlTW9kZWwoJ0dFVCcsICdodHRwLWhlbGxvLmh0bWwnKVwiPlNhbXBsZSBHRVQ8L2J1dHRvbj5cbiAgICA8YnV0dG9uIGlkPVwic2FtcGxlanNvbnBidG5cIlxuICAgICAgbmctY2xpY2s9XCJ1cGRhdGVNb2RlbCgnSlNPTlAnLFxuICAgICAgICAgICAgICAgICAgICAnaHR0cHM6Ly9hbmd1bGFyanMub3JnL2dyZWV0LnBocD9jYWxsYmFjaz1KU09OX0NBTExCQUNLJm5hbWU9U3VwZXIlMjBIZXJvJylcIj5cbiAgICAgIFNhbXBsZSBKU09OUFxuICAgIDwvYnV0dG9uPlxuICAgIDxidXR0b24gaWQ9XCJpbnZhbGlkanNvbnBidG5cIlxuICAgICAgbmctY2xpY2s9XCJ1cGRhdGVNb2RlbCgnSlNPTlAnLCAnaHR0cHM6Ly9hbmd1bGFyanMub3JnL2RvZXNudGV4aXN0JmNhbGxiYWNrPUpTT05fQ0FMTEJBQ0snKVwiPlxuICAgICAgICBJbnZhbGlkIEpTT05QXG4gICAgICA8L2J1dHRvbj5cbiAgICA8cHJlPmh0dHAgc3RhdHVzIGNvZGU6IHt7c3RhdHVzfX08L3ByZT5cbiAgICA8cHJlPmh0dHAgcmVzcG9uc2UgZGF0YToge3tkYXRhfX08L3ByZT5cbiAgPC9kaXY+XG48L2ZpbGU+XG48ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gIGFuZ3VsYXIubW9kdWxlKCdodHRwRXhhbXBsZScsIFtdKVxuICAgIC5jb250cm9sbGVyKCdGZXRjaENvbnRyb2xsZXInLCBbJyRzY29wZScsICckaHR0cCcsICckdGVtcGxhdGVDYWNoZScsXG4gICAgICBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkdGVtcGxhdGVDYWNoZSkge1xuICAgICAgICAkc2NvcGUubWV0aG9kID0gJ0dFVCc7XG4gICAgICAgICRzY29wZS51cmwgPSAnaHR0cC1oZWxsby5odG1sJztcblxuICAgICAgICAkc2NvcGUuZmV0Y2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkc2NvcGUuY29kZSA9IG51bGw7XG4gICAgICAgICAgJHNjb3BlLnJlc3BvbnNlID0gbnVsbDtcblxuICAgICAgICAgICRodHRwKHttZXRob2Q6ICRzY29wZS5tZXRob2QsIHVybDogJHNjb3BlLnVybCwgY2FjaGU6ICR0ZW1wbGF0ZUNhY2hlfSkuXG4gICAgICAgICAgICB0aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSByZXNwb25zZS5zdGF0dXM7XG4gICAgICAgICAgICAgICRzY29wZS5kYXRhID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICRzY29wZS5kYXRhID0gcmVzcG9uc2UuZGF0YSB8fCBcIlJlcXVlc3QgZmFpbGVkXCI7XG4gICAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSByZXNwb25zZS5zdGF0dXM7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnVwZGF0ZU1vZGVsID0gZnVuY3Rpb24obWV0aG9kLCB1cmwpIHtcbiAgICAgICAgICAkc2NvcGUubWV0aG9kID0gbWV0aG9kO1xuICAgICAgICAgICRzY29wZS51cmwgPSB1cmw7XG4gICAgICAgIH07XG4gICAgICB9XSk7XG48L2ZpbGU+XG48ZmlsZSBuYW1lPVwiaHR0cC1oZWxsby5odG1sXCI+XG4gIEhlbGxvLCAkaHR0cCFcbjwvZmlsZT5cbjxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgdmFyIHN0YXR1cyA9IGVsZW1lbnQoYnkuYmluZGluZygnc3RhdHVzJykpO1xuICB2YXIgZGF0YSA9IGVsZW1lbnQoYnkuYmluZGluZygnZGF0YScpKTtcbiAgdmFyIGZldGNoQnRuID0gZWxlbWVudChieS5pZCgnZmV0Y2hidG4nKSk7XG4gIHZhciBzYW1wbGVHZXRCdG4gPSBlbGVtZW50KGJ5LmlkKCdzYW1wbGVnZXRidG4nKSk7XG4gIHZhciBzYW1wbGVKc29ucEJ0biA9IGVsZW1lbnQoYnkuaWQoJ3NhbXBsZWpzb25wYnRuJykpO1xuICB2YXIgaW52YWxpZEpzb25wQnRuID0gZWxlbWVudChieS5pZCgnaW52YWxpZGpzb25wYnRuJykpO1xuXG4gIGl0KCdzaG91bGQgbWFrZSBhbiB4aHIgR0VUIHJlcXVlc3QnLCBmdW5jdGlvbigpIHtcbiAgICBzYW1wbGVHZXRCdG4uY2xpY2soKTtcbiAgICBmZXRjaEJ0bi5jbGljaygpO1xuICAgIGV4cGVjdChzdGF0dXMuZ2V0VGV4dCgpKS50b01hdGNoKCcyMDAnKTtcbiAgICBleHBlY3QoZGF0YS5nZXRUZXh0KCkpLnRvTWF0Y2goL0hlbGxvLCBcXCRodHRwIS8pO1xuICB9KTtcblxuLy8gQ29tbWVudGVkIG91dCBkdWUgdG8gZmxha2VzLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvOTE4NVxuLy8gaXQoJ3Nob3VsZCBtYWtlIGEgSlNPTlAgcmVxdWVzdCB0byBhbmd1bGFyanMub3JnJywgZnVuY3Rpb24oKSB7XG4vLyAgIHNhbXBsZUpzb25wQnRuLmNsaWNrKCk7XG4vLyAgIGZldGNoQnRuLmNsaWNrKCk7XG4vLyAgIGV4cGVjdChzdGF0dXMuZ2V0VGV4dCgpKS50b01hdGNoKCcyMDAnKTtcbi8vICAgZXhwZWN0KGRhdGEuZ2V0VGV4dCgpKS50b01hdGNoKC9TdXBlciBIZXJvIS8pO1xuLy8gfSk7XG5cbiAgaXQoJ3Nob3VsZCBtYWtlIEpTT05QIHJlcXVlc3QgdG8gaW52YWxpZCBVUkwgYW5kIGludm9rZSB0aGUgZXJyb3IgaGFuZGxlcicsXG4gICAgICBmdW5jdGlvbigpIHtcbiAgICBpbnZhbGlkSnNvbnBCdG4uY2xpY2soKTtcbiAgICBmZXRjaEJ0bi5jbGljaygpO1xuICAgIGV4cGVjdChzdGF0dXMuZ2V0VGV4dCgpKS50b01hdGNoKCcwJyk7XG4gICAgZXhwZWN0KGRhdGEuZ2V0VGV4dCgpKS50b01hdGNoKCdSZXF1ZXN0IGZhaWxlZCcpO1xuICB9KTtcbjwvZmlsZT5cbjwvZXhhbXBsZT5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAkaHR0cChyZXF1ZXN0Q29uZmlnKSB7XG5cbiAgICAgIGlmICghYW5ndWxhci5pc09iamVjdChyZXF1ZXN0Q29uZmlnKSkge1xuICAgICAgICB0aHJvdyBtaW5FcnIoJyRodHRwJykoJ2JhZHJlcScsICdIdHRwIHJlcXVlc3QgY29uZmlndXJhdGlvbiBtdXN0IGJlIGFuIG9iamVjdC4gIFJlY2VpdmVkOiB7MH0nLCByZXF1ZXN0Q29uZmlnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbmZpZyA9IGV4dGVuZCh7XG4gICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3QsXG4gICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBkZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgICAgcGFyYW1TZXJpYWxpemVyOiBkZWZhdWx0cy5wYXJhbVNlcmlhbGl6ZXJcbiAgICAgIH0sIHJlcXVlc3RDb25maWcpO1xuXG4gICAgICBjb25maWcuaGVhZGVycyA9IG1lcmdlSGVhZGVycyhyZXF1ZXN0Q29uZmlnKTtcbiAgICAgIGNvbmZpZy5tZXRob2QgPSB1cHBlcmNhc2UoY29uZmlnLm1ldGhvZCk7XG4gICAgICBjb25maWcucGFyYW1TZXJpYWxpemVyID0gaXNTdHJpbmcoY29uZmlnLnBhcmFtU2VyaWFsaXplcikgP1xuICAgICAgICAkaW5qZWN0b3IuZ2V0KGNvbmZpZy5wYXJhbVNlcmlhbGl6ZXIpIDogY29uZmlnLnBhcmFtU2VyaWFsaXplcjtcblxuICAgICAgdmFyIHNlcnZlclJlcXVlc3QgPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgdmFyIGhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcbiAgICAgICAgdmFyIHJlcURhdGEgPSB0cmFuc2Zvcm1EYXRhKGNvbmZpZy5kYXRhLCBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpLCB1bmRlZmluZWQsIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0KTtcblxuICAgICAgICAvLyBzdHJpcCBjb250ZW50LXR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHJlcURhdGEpKSB7XG4gICAgICAgICAgZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbih2YWx1ZSwgaGVhZGVyKSB7XG4gICAgICAgICAgICBpZiAobG93ZXJjYXNlKGhlYWRlcikgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGhlYWRlcnNbaGVhZGVyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSAmJiAhaXNVbmRlZmluZWQoZGVmYXVsdHMud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgICAgIGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgPSBkZWZhdWx0cy53aXRoQ3JlZGVudGlhbHM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZW5kIHJlcXVlc3RcbiAgICAgICAgcmV0dXJuIHNlbmRSZXEoY29uZmlnLCByZXFEYXRhKS50aGVuKHRyYW5zZm9ybVJlc3BvbnNlLCB0cmFuc2Zvcm1SZXNwb25zZSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgY2hhaW4gPSBbc2VydmVyUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgICAgIHZhciBwcm9taXNlID0gJHEud2hlbihjb25maWcpO1xuXG4gICAgICAvLyBhcHBseSBpbnRlcmNlcHRvcnNcbiAgICAgIGZvckVhY2gocmV2ZXJzZWRJbnRlcmNlcHRvcnMsIGZ1bmN0aW9uKGludGVyY2VwdG9yKSB7XG4gICAgICAgIGlmIChpbnRlcmNlcHRvci5yZXF1ZXN0IHx8IGludGVyY2VwdG9yLnJlcXVlc3RFcnJvcikge1xuICAgICAgICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IucmVxdWVzdCwgaW50ZXJjZXB0b3IucmVxdWVzdEVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJjZXB0b3IucmVzcG9uc2UgfHwgaW50ZXJjZXB0b3IucmVzcG9uc2VFcnJvcikge1xuICAgICAgICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IucmVzcG9uc2UsIGludGVyY2VwdG9yLnJlc3BvbnNlRXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgICAgICB2YXIgdGhlbkZuID0gY2hhaW4uc2hpZnQoKTtcbiAgICAgICAgdmFyIHJlamVjdEZuID0gY2hhaW4uc2hpZnQoKTtcblxuICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHRoZW5GbiwgcmVqZWN0Rm4pO1xuICAgICAgfVxuXG4gICAgICBpZiAodXNlTGVnYWN5UHJvbWlzZSkge1xuICAgICAgICBwcm9taXNlLnN1Y2Nlc3MgPSBmdW5jdGlvbihmbikge1xuICAgICAgICAgIGFzc2VydEFyZ0ZuKGZuLCAnZm4nKTtcblxuICAgICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgZm4ocmVzcG9uc2UuZGF0YSwgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS5oZWFkZXJzLCBjb25maWcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHByb21pc2UuZXJyb3IgPSBmdW5jdGlvbihmbikge1xuICAgICAgICAgIGFzc2VydEFyZ0ZuKGZuLCAnZm4nKTtcblxuICAgICAgICAgIHByb21pc2UudGhlbihudWxsLCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgZm4ocmVzcG9uc2UuZGF0YSwgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS5oZWFkZXJzLCBjb25maWcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvbWlzZS5zdWNjZXNzID0gJGh0dHBNaW5FcnJMZWdhY3lGbignc3VjY2VzcycpO1xuICAgICAgICBwcm9taXNlLmVycm9yID0gJGh0dHBNaW5FcnJMZWdhY3lGbignZXJyb3InKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb21pc2U7XG5cbiAgICAgIGZ1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgICAgIC8vIG1ha2UgYSBjb3B5IHNpbmNlIHRoZSByZXNwb25zZSBtdXN0IGJlIGNhY2hlYWJsZVxuICAgICAgICB2YXIgcmVzcCA9IGV4dGVuZCh7fSwgcmVzcG9uc2UpO1xuICAgICAgICByZXNwLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKHJlc3BvbnNlLmRhdGEsIHJlc3BvbnNlLmhlYWRlcnMsIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UpO1xuICAgICAgICByZXR1cm4gKGlzU3VjY2VzcyhyZXNwb25zZS5zdGF0dXMpKVxuICAgICAgICAgID8gcmVzcFxuICAgICAgICAgIDogJHEucmVqZWN0KHJlc3ApO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBleGVjdXRlSGVhZGVyRm5zKGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICB2YXIgaGVhZGVyQ29udGVudCwgcHJvY2Vzc2VkSGVhZGVycyA9IHt9O1xuXG4gICAgICAgIGZvckVhY2goaGVhZGVycywgZnVuY3Rpb24oaGVhZGVyRm4sIGhlYWRlcikge1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGhlYWRlckZuKSkge1xuICAgICAgICAgICAgaGVhZGVyQ29udGVudCA9IGhlYWRlckZuKGNvbmZpZyk7XG4gICAgICAgICAgICBpZiAoaGVhZGVyQ29udGVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIHByb2Nlc3NlZEhlYWRlcnNbaGVhZGVyXSA9IGhlYWRlckNvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb2Nlc3NlZEhlYWRlcnNbaGVhZGVyXSA9IGhlYWRlckZuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHByb2Nlc3NlZEhlYWRlcnM7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG1lcmdlSGVhZGVycyhjb25maWcpIHtcbiAgICAgICAgdmFyIGRlZkhlYWRlcnMgPSBkZWZhdWx0cy5oZWFkZXJzLFxuICAgICAgICAgICAgcmVxSGVhZGVycyA9IGV4dGVuZCh7fSwgY29uZmlnLmhlYWRlcnMpLFxuICAgICAgICAgICAgZGVmSGVhZGVyTmFtZSwgbG93ZXJjYXNlRGVmSGVhZGVyTmFtZSwgcmVxSGVhZGVyTmFtZTtcblxuICAgICAgICBkZWZIZWFkZXJzID0gZXh0ZW5kKHt9LCBkZWZIZWFkZXJzLmNvbW1vbiwgZGVmSGVhZGVyc1tsb3dlcmNhc2UoY29uZmlnLm1ldGhvZCldKTtcblxuICAgICAgICAvLyB1c2luZyBmb3ItaW4gaW5zdGVhZCBvZiBmb3JFYWNoIHRvIGF2b2lkIHVuZWNlc3NhcnkgaXRlcmF0aW9uIGFmdGVyIGhlYWRlciBoYXMgYmVlbiBmb3VuZFxuICAgICAgICBkZWZhdWx0SGVhZGVyc0l0ZXJhdGlvbjpcbiAgICAgICAgZm9yIChkZWZIZWFkZXJOYW1lIGluIGRlZkhlYWRlcnMpIHtcbiAgICAgICAgICBsb3dlcmNhc2VEZWZIZWFkZXJOYW1lID0gbG93ZXJjYXNlKGRlZkhlYWRlck5hbWUpO1xuXG4gICAgICAgICAgZm9yIChyZXFIZWFkZXJOYW1lIGluIHJlcUhlYWRlcnMpIHtcbiAgICAgICAgICAgIGlmIChsb3dlcmNhc2UocmVxSGVhZGVyTmFtZSkgPT09IGxvd2VyY2FzZURlZkhlYWRlck5hbWUpIHtcbiAgICAgICAgICAgICAgY29udGludWUgZGVmYXVsdEhlYWRlcnNJdGVyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVxSGVhZGVyc1tkZWZIZWFkZXJOYW1lXSA9IGRlZkhlYWRlcnNbZGVmSGVhZGVyTmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBleGVjdXRlIGlmIGhlYWRlciB2YWx1ZSBpcyBhIGZ1bmN0aW9uIGZvciBtZXJnZWQgaGVhZGVyc1xuICAgICAgICByZXR1cm4gZXhlY3V0ZUhlYWRlckZucyhyZXFIZWFkZXJzLCBzaGFsbG93Q29weShjb25maWcpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkaHR0cC5wZW5kaW5nUmVxdWVzdHMgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaHR0cCNnZXRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBHRVRgIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGh0dHAjZGVsZXRlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgREVMRVRFYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwI2hlYWRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBIRUFEYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwI2pzb25wXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgSlNPTlBgIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdC5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgIFRoZSBuYW1lIG9mIHRoZSBjYWxsYmFjayBzaG91bGQgYmUgdGhlIHN0cmluZyBgSlNPTl9DQUxMQkFDS2AuXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgKi9cbiAgICBjcmVhdGVTaG9ydE1ldGhvZHMoJ2dldCcsICdkZWxldGUnLCAnaGVhZCcsICdqc29ucCcpO1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwI3Bvc3RcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBQT1NUYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgUmVxdWVzdCBjb250ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaHR0cCNwdXRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBQVVRgIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdFxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBSZXF1ZXN0IGNvbnRlbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAqIEBuYW1lICRodHRwI3BhdGNoXG4gICAgICAqXG4gICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgUEFUQ0hgIHJlcXVlc3QuXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0XG4gICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBSZXF1ZXN0IGNvbnRlbnRcbiAgICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICAqL1xuICAgIGNyZWF0ZVNob3J0TWV0aG9kc1dpdGhEYXRhKCdwb3N0JywgJ3B1dCcsICdwYXRjaCcpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgICAgICogQG5hbWUgJGh0dHAjZGVmYXVsdHNcbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFJ1bnRpbWUgZXF1aXZhbGVudCBvZiB0aGUgYCRodHRwUHJvdmlkZXIuZGVmYXVsdHNgIHByb3BlcnR5LiBBbGxvd3MgY29uZmlndXJhdGlvbiBvZlxuICAgICAgICAgKiBkZWZhdWx0IGhlYWRlcnMsIHdpdGhDcmVkZW50aWFscyBhcyB3ZWxsIGFzIHJlcXVlc3QgYW5kIHJlc3BvbnNlIHRyYW5zZm9ybWF0aW9ucy5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIFwiU2V0dGluZyBIVFRQIEhlYWRlcnNcIiBhbmQgXCJUcmFuc2Zvcm1pbmcgUmVxdWVzdHMgYW5kIFJlc3BvbnNlc1wiIHNlY3Rpb25zIGFib3ZlLlxuICAgICAgICAgKi9cbiAgICAkaHR0cC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuXG5cbiAgICByZXR1cm4gJGh0dHA7XG5cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVNob3J0TWV0aG9kcyhuYW1lcykge1xuICAgICAgZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgJGh0dHBbbmFtZV0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgICAgICAgIHJldHVybiAkaHR0cChleHRlbmQoe30sIGNvbmZpZyB8fCB7fSwge1xuICAgICAgICAgICAgbWV0aG9kOiBuYW1lLFxuICAgICAgICAgICAgdXJsOiB1cmxcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVNob3J0TWV0aG9kc1dpdGhEYXRhKG5hbWUpIHtcbiAgICAgIGZvckVhY2goYXJndW1lbnRzLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICRodHRwW25hbWVdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICAgICAgICByZXR1cm4gJGh0dHAoZXh0ZW5kKHt9LCBjb25maWcgfHwge30sIHtcbiAgICAgICAgICAgIG1ldGhvZDogbmFtZSxcbiAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogTWFrZXMgdGhlIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiAhISEgQUNDRVNTRVMgQ0xPU1VSRSBWQVJTOlxuICAgICAqICRodHRwQmFja2VuZCwgZGVmYXVsdHMsICRsb2csICRyb290U2NvcGUsIGRlZmF1bHRDYWNoZSwgJGh0dHAucGVuZGluZ1JlcXVlc3RzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2VuZFJlcShjb25maWcsIHJlcURhdGEpIHtcbiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCksXG4gICAgICAgICAgcHJvbWlzZSA9IGRlZmVycmVkLnByb21pc2UsXG4gICAgICAgICAgY2FjaGUsXG4gICAgICAgICAgY2FjaGVkUmVzcCxcbiAgICAgICAgICByZXFIZWFkZXJzID0gY29uZmlnLmhlYWRlcnMsXG4gICAgICAgICAgdXJsID0gYnVpbGRVcmwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtU2VyaWFsaXplcihjb25maWcucGFyYW1zKSk7XG5cbiAgICAgICRodHRwLnBlbmRpbmdSZXF1ZXN0cy5wdXNoKGNvbmZpZyk7XG4gICAgICBwcm9taXNlLnRoZW4ocmVtb3ZlUGVuZGluZ1JlcSwgcmVtb3ZlUGVuZGluZ1JlcSk7XG5cblxuICAgICAgaWYgKChjb25maWcuY2FjaGUgfHwgZGVmYXVsdHMuY2FjaGUpICYmIGNvbmZpZy5jYWNoZSAhPT0gZmFsc2UgJiZcbiAgICAgICAgICAoY29uZmlnLm1ldGhvZCA9PT0gJ0dFVCcgfHwgY29uZmlnLm1ldGhvZCA9PT0gJ0pTT05QJykpIHtcbiAgICAgICAgY2FjaGUgPSBpc09iamVjdChjb25maWcuY2FjaGUpID8gY29uZmlnLmNhY2hlXG4gICAgICAgICAgICAgIDogaXNPYmplY3QoZGVmYXVsdHMuY2FjaGUpID8gZGVmYXVsdHMuY2FjaGVcbiAgICAgICAgICAgICAgOiBkZWZhdWx0Q2FjaGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICBjYWNoZWRSZXNwID0gY2FjaGUuZ2V0KHVybCk7XG4gICAgICAgIGlmIChpc0RlZmluZWQoY2FjaGVkUmVzcCkpIHtcbiAgICAgICAgICBpZiAoaXNQcm9taXNlTGlrZShjYWNoZWRSZXNwKSkge1xuICAgICAgICAgICAgLy8gY2FjaGVkIHJlcXVlc3QgaGFzIGFscmVhZHkgYmVlbiBzZW50LCBidXQgdGhlcmUgaXMgbm8gcmVzcG9uc2UgeWV0XG4gICAgICAgICAgICBjYWNoZWRSZXNwLnRoZW4ocmVzb2x2ZVByb21pc2VXaXRoUmVzdWx0LCByZXNvbHZlUHJvbWlzZVdpdGhSZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzZXJ2aW5nIGZyb20gY2FjaGVcbiAgICAgICAgICAgIGlmIChpc0FycmF5KGNhY2hlZFJlc3ApKSB7XG4gICAgICAgICAgICAgIHJlc29sdmVQcm9taXNlKGNhY2hlZFJlc3BbMV0sIGNhY2hlZFJlc3BbMF0sIHNoYWxsb3dDb3B5KGNhY2hlZFJlc3BbMl0pLCBjYWNoZWRSZXNwWzNdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc29sdmVQcm9taXNlKGNhY2hlZFJlc3AsIDIwMCwge30sICdPSycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBwdXQgdGhlIHByb21pc2UgZm9yIHRoZSBub24tdHJhbnNmb3JtZWQgcmVzcG9uc2UgaW50byBjYWNoZSBhcyBhIHBsYWNlaG9sZGVyXG4gICAgICAgICAgY2FjaGUucHV0KHVybCwgcHJvbWlzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuXG4gICAgICAvLyBpZiB3ZSB3b24ndCBoYXZlIHRoZSByZXNwb25zZSBpbiBjYWNoZSwgc2V0IHRoZSB4c3JmIGhlYWRlcnMgYW5kXG4gICAgICAvLyBzZW5kIHRoZSByZXF1ZXN0IHRvIHRoZSBiYWNrZW5kXG4gICAgICBpZiAoaXNVbmRlZmluZWQoY2FjaGVkUmVzcCkpIHtcbiAgICAgICAgdmFyIHhzcmZWYWx1ZSA9IHVybElzU2FtZU9yaWdpbihjb25maWcudXJsKVxuICAgICAgICAgICAgPyAkJGNvb2tpZVJlYWRlcigpW2NvbmZpZy54c3JmQ29va2llTmFtZSB8fCBkZWZhdWx0cy54c3JmQ29va2llTmFtZV1cbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgICAgcmVxSGVhZGVyc1soY29uZmlnLnhzcmZIZWFkZXJOYW1lIHx8IGRlZmF1bHRzLnhzcmZIZWFkZXJOYW1lKV0gPSB4c3JmVmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICAkaHR0cEJhY2tlbmQoY29uZmlnLm1ldGhvZCwgdXJsLCByZXFEYXRhLCBkb25lLCByZXFIZWFkZXJzLCBjb25maWcudGltZW91dCxcbiAgICAgICAgICAgIGNvbmZpZy53aXRoQ3JlZGVudGlhbHMsIGNvbmZpZy5yZXNwb25zZVR5cGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcblxuXG4gICAgICAvKipcbiAgICAgICAqIENhbGxiYWNrIHJlZ2lzdGVyZWQgdG8gJGh0dHBCYWNrZW5kKCk6XG4gICAgICAgKiAgLSBjYWNoZXMgdGhlIHJlc3BvbnNlIGlmIGRlc2lyZWRcbiAgICAgICAqICAtIHJlc29sdmVzIHRoZSByYXcgJGh0dHAgcHJvbWlzZVxuICAgICAgICogIC0gY2FsbHMgJGFwcGx5XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGRvbmUoc3RhdHVzLCByZXNwb25zZSwgaGVhZGVyc1N0cmluZywgc3RhdHVzVGV4dCkge1xuICAgICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgICBpZiAoaXNTdWNjZXNzKHN0YXR1cykpIHtcbiAgICAgICAgICAgIGNhY2hlLnB1dCh1cmwsIFtzdGF0dXMsIHJlc3BvbnNlLCBwYXJzZUhlYWRlcnMoaGVhZGVyc1N0cmluZyksIHN0YXR1c1RleHRdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIHByb21pc2UgZnJvbSB0aGUgY2FjaGVcbiAgICAgICAgICAgIGNhY2hlLnJlbW92ZSh1cmwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlc29sdmVIdHRwUHJvbWlzZSgpIHtcbiAgICAgICAgICByZXNvbHZlUHJvbWlzZShyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzU3RyaW5nLCBzdGF0dXNUZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VBcHBseUFzeW5jKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHlBc3luYyhyZXNvbHZlSHR0cFByb21pc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmVIdHRwUHJvbWlzZSgpO1xuICAgICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSAkcm9vdFNjb3BlLiRhcHBseSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBSZXNvbHZlcyB0aGUgcmF3ICRodHRwIHByb21pc2UuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIHN0YXR1c1RleHQpIHtcbiAgICAgICAgLy9zdGF0dXM6IEhUVFAgcmVzcG9uc2Ugc3RhdHVzIGNvZGUsIDAsIC0xIChhYm9ydGVkIGJ5IHRpbWVvdXQgLyBwcm9taXNlKVxuICAgICAgICBzdGF0dXMgPSBzdGF0dXMgPj0gLTEgPyBzdGF0dXMgOiAwO1xuXG4gICAgICAgIChpc1N1Y2Nlc3Moc3RhdHVzKSA/IGRlZmVycmVkLnJlc29sdmUgOiBkZWZlcnJlZC5yZWplY3QpKHtcbiAgICAgICAgICBkYXRhOiByZXNwb25zZSxcbiAgICAgICAgICBzdGF0dXM6IHN0YXR1cyxcbiAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpLFxuICAgICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICAgIHN0YXR1c1RleHQ6IHN0YXR1c1RleHRcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlV2l0aFJlc3VsdChyZXN1bHQpIHtcbiAgICAgICAgcmVzb2x2ZVByb21pc2UocmVzdWx0LmRhdGEsIHJlc3VsdC5zdGF0dXMsIHNoYWxsb3dDb3B5KHJlc3VsdC5oZWFkZXJzKCkpLCByZXN1bHQuc3RhdHVzVGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbW92ZVBlbmRpbmdSZXEoKSB7XG4gICAgICAgIHZhciBpZHggPSAkaHR0cC5wZW5kaW5nUmVxdWVzdHMuaW5kZXhPZihjb25maWcpO1xuICAgICAgICBpZiAoaWR4ICE9PSAtMSkgJGh0dHAucGVuZGluZ1JlcXVlc3RzLnNwbGljZShpZHgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gYnVpbGRVcmwodXJsLCBzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgICBpZiAoc2VyaWFsaXplZFBhcmFtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHVybCArPSAoKHVybC5pbmRleE9mKCc/JykgPT0gLTEpID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXJsO1xuICAgIH1cbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICR4aHJGYWN0b3J5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBGYWN0b3J5IGZ1bmN0aW9uIHVzZWQgdG8gY3JlYXRlIFhNTEh0dHBSZXF1ZXN0IG9iamVjdHMuXG4gKlxuICogUmVwbGFjZSBvciBkZWNvcmF0ZSB0aGlzIHNlcnZpY2UgdG8gY3JlYXRlIHlvdXIgb3duIGN1c3RvbSBYTUxIdHRwUmVxdWVzdCBvYmplY3RzLlxuICpcbiAqIGBgYFxuICogYW5ndWxhci5tb2R1bGUoJ215QXBwJywgW10pXG4gKiAuZmFjdG9yeSgnJHhockZhY3RvcnknLCBmdW5jdGlvbigpIHtcbiAqICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVhocihtZXRob2QsIHVybCkge1xuICogICAgIHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KHttb3pTeXN0ZW06IHRydWV9KTtcbiAqICAgfTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZCBIVFRQIG1ldGhvZCBvZiB0aGUgcmVxdWVzdCAoR0VULCBQT1NULCBQVVQsIC4uKVxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBVUkwgb2YgdGhlIHJlcXVlc3QuXG4gKi9cbmZ1bmN0aW9uICR4aHJGYWN0b3J5UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBjcmVhdGVYaHIoKSB7XG4gICAgICByZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuICAgIH07XG4gIH07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRodHRwQmFja2VuZFxuICogQHJlcXVpcmVzICR3aW5kb3dcbiAqIEByZXF1aXJlcyAkZG9jdW1lbnRcbiAqIEByZXF1aXJlcyAkeGhyRmFjdG9yeVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSFRUUCBiYWNrZW5kIHVzZWQgYnkgdGhlIHtAbGluayBuZy4kaHR0cCBzZXJ2aWNlfSB0aGF0IGRlbGVnYXRlcyB0b1xuICogWE1MSHR0cFJlcXVlc3Qgb2JqZWN0IG9yIEpTT05QIGFuZCBkZWFscyB3aXRoIGJyb3dzZXIgaW5jb21wYXRpYmlsaXRpZXMuXG4gKlxuICogWW91IHNob3VsZCBuZXZlciBuZWVkIHRvIHVzZSB0aGlzIHNlcnZpY2UgZGlyZWN0bHksIGluc3RlYWQgdXNlIHRoZSBoaWdoZXItbGV2ZWwgYWJzdHJhY3Rpb25zOlxuICoge0BsaW5rIG5nLiRodHRwICRodHRwfSBvciB7QGxpbmsgbmdSZXNvdXJjZS4kcmVzb3VyY2UgJHJlc291cmNlfS5cbiAqXG4gKiBEdXJpbmcgdGVzdGluZyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIHN3YXBwZWQgd2l0aCB7QGxpbmsgbmdNb2NrLiRodHRwQmFja2VuZCBtb2NrXG4gKiAkaHR0cEJhY2tlbmR9IHdoaWNoIGNhbiBiZSB0cmFpbmVkIHdpdGggcmVzcG9uc2VzLlxuICovXG5mdW5jdGlvbiAkSHR0cEJhY2tlbmRQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckYnJvd3NlcicsICckd2luZG93JywgJyRkb2N1bWVudCcsICckeGhyRmFjdG9yeScsIGZ1bmN0aW9uKCRicm93c2VyLCAkd2luZG93LCAkZG9jdW1lbnQsICR4aHJGYWN0b3J5KSB7XG4gICAgcmV0dXJuIGNyZWF0ZUh0dHBCYWNrZW5kKCRicm93c2VyLCAkeGhyRmFjdG9yeSwgJGJyb3dzZXIuZGVmZXIsICR3aW5kb3cuYW5ndWxhci5jYWxsYmFja3MsICRkb2N1bWVudFswXSk7XG4gIH1dO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIdHRwQmFja2VuZCgkYnJvd3NlciwgY3JlYXRlWGhyLCAkYnJvd3NlckRlZmVyLCBjYWxsYmFja3MsIHJhd0RvY3VtZW50KSB7XG4gIC8vIFRPRE8odm9qdGEpOiBmaXggdGhlIHNpZ25hdHVyZVxuICByZXR1cm4gZnVuY3Rpb24obWV0aG9kLCB1cmwsIHBvc3QsIGNhbGxiYWNrLCBoZWFkZXJzLCB0aW1lb3V0LCB3aXRoQ3JlZGVudGlhbHMsIHJlc3BvbnNlVHlwZSkge1xuICAgICRicm93c2VyLiQkaW5jT3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQoKTtcbiAgICB1cmwgPSB1cmwgfHwgJGJyb3dzZXIudXJsKCk7XG5cbiAgICBpZiAobG93ZXJjYXNlKG1ldGhvZCkgPT0gJ2pzb25wJykge1xuICAgICAgdmFyIGNhbGxiYWNrSWQgPSAnXycgKyAoY2FsbGJhY2tzLmNvdW50ZXIrKykudG9TdHJpbmcoMzYpO1xuICAgICAgY2FsbGJhY2tzW2NhbGxiYWNrSWRdID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICBjYWxsYmFja3NbY2FsbGJhY2tJZF0uZGF0YSA9IGRhdGE7XG4gICAgICAgIGNhbGxiYWNrc1tjYWxsYmFja0lkXS5jYWxsZWQgPSB0cnVlO1xuICAgICAgfTtcblxuICAgICAgdmFyIGpzb25wRG9uZSA9IGpzb25wUmVxKHVybC5yZXBsYWNlKCdKU09OX0NBTExCQUNLJywgJ2FuZ3VsYXIuY2FsbGJhY2tzLicgKyBjYWxsYmFja0lkKSxcbiAgICAgICAgICBjYWxsYmFja0lkLCBmdW5jdGlvbihzdGF0dXMsIHRleHQpIHtcbiAgICAgICAgY29tcGxldGVSZXF1ZXN0KGNhbGxiYWNrLCBzdGF0dXMsIGNhbGxiYWNrc1tjYWxsYmFja0lkXS5kYXRhLCBcIlwiLCB0ZXh0KTtcbiAgICAgICAgY2FsbGJhY2tzW2NhbGxiYWNrSWRdID0gbm9vcDtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG5cbiAgICAgIHZhciB4aHIgPSBjcmVhdGVYaHIobWV0aG9kLCB1cmwpO1xuXG4gICAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gICAgICBmb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uIHJlcXVlc3RMb2FkZWQoKSB7XG4gICAgICAgIHZhciBzdGF0dXNUZXh0ID0geGhyLnN0YXR1c1RleHQgfHwgJyc7XG5cbiAgICAgICAgLy8gcmVzcG9uc2VUZXh0IGlzIHRoZSBvbGQtc2Nob29sIHdheSBvZiByZXRyaWV2aW5nIHJlc3BvbnNlIChzdXBwb3J0ZWQgYnkgSUU5KVxuICAgICAgICAvLyByZXNwb25zZS9yZXNwb25zZVR5cGUgcHJvcGVydGllcyB3ZXJlIGludHJvZHVjZWQgaW4gWEhSIExldmVsMiBzcGVjIChzdXBwb3J0ZWQgYnkgSUUxMClcbiAgICAgICAgdmFyIHJlc3BvbnNlID0gKCdyZXNwb25zZScgaW4geGhyKSA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHQ7XG5cbiAgICAgICAgLy8gbm9ybWFsaXplIElFOSBidWcgKGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzE0NTApXG4gICAgICAgIHZhciBzdGF0dXMgPSB4aHIuc3RhdHVzID09PSAxMjIzID8gMjA0IDogeGhyLnN0YXR1cztcblxuICAgICAgICAvLyBmaXggc3RhdHVzIGNvZGUgd2hlbiBpdCBpcyAwICgwIHN0YXR1cyBpcyB1bmRvY3VtZW50ZWQpLlxuICAgICAgICAvLyBPY2N1cnMgd2hlbiBhY2Nlc3NpbmcgZmlsZSByZXNvdXJjZXMgb3Igb24gQW5kcm9pZCA0LjEgc3RvY2sgYnJvd3NlclxuICAgICAgICAvLyB3aGlsZSByZXRyaWV2aW5nIGZpbGVzIGZyb20gYXBwbGljYXRpb24gY2FjaGUuXG4gICAgICAgIGlmIChzdGF0dXMgPT09IDApIHtcbiAgICAgICAgICBzdGF0dXMgPSByZXNwb25zZSA/IDIwMCA6IHVybFJlc29sdmUodXJsKS5wcm90b2NvbCA9PSAnZmlsZScgPyA0MDQgOiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29tcGxldGVSZXF1ZXN0KGNhbGxiYWNrLFxuICAgICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCksXG4gICAgICAgICAgICBzdGF0dXNUZXh0KTtcbiAgICAgIH07XG5cbiAgICAgIHZhciByZXF1ZXN0RXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVGhlIHJlc3BvbnNlIGlzIGFsd2F5cyBlbXB0eVxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly94aHIuc3BlYy53aGF0d2cub3JnLyNyZXF1ZXN0LWVycm9yLXN0ZXBzIGFuZCBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1uZXR3b3JrLWVycm9yXG4gICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgLTEsIG51bGwsIG51bGwsICcnKTtcbiAgICAgIH07XG5cbiAgICAgIHhoci5vbmVycm9yID0gcmVxdWVzdEVycm9yO1xuICAgICAgeGhyLm9uYWJvcnQgPSByZXF1ZXN0RXJyb3I7XG5cbiAgICAgIGlmICh3aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXNwb25zZVR5cGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gV2ViS2l0IGFkZGVkIHN1cHBvcnQgZm9yIHRoZSBqc29uIHJlc3BvbnNlVHlwZSB2YWx1ZSBvbiAwOS8wMy8yMDEzXG4gICAgICAgICAgLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTczNjQ4LiBWZXJzaW9ucyBvZiBTYWZhcmkgcHJpb3IgdG8gNyBhcmVcbiAgICAgICAgICAvLyBrbm93biB0byB0aHJvdyB3aGVuIHNldHRpbmcgdGhlIHZhbHVlIFwianNvblwiIGFzIHRoZSByZXNwb25zZSB0eXBlLiBPdGhlciBvbGRlclxuICAgICAgICAgIC8vIGJyb3dzZXJzIGltcGxlbWVudGluZyB0aGUgcmVzcG9uc2VUeXBlXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBUaGUganNvbiByZXNwb25zZSB0eXBlIGNhbiBiZSBpZ25vcmVkIGlmIG5vdCBzdXBwb3J0ZWQsIGJlY2F1c2UgSlNPTiBwYXlsb2FkcyBhcmVcbiAgICAgICAgICAvLyBwYXJzZWQgb24gdGhlIGNsaWVudC1zaWRlIHJlZ2FyZGxlc3MuXG4gICAgICAgICAgaWYgKHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB4aHIuc2VuZChpc1VuZGVmaW5lZChwb3N0KSA/IG51bGwgOiBwb3N0KTtcbiAgICB9XG5cbiAgICBpZiAodGltZW91dCA+IDApIHtcbiAgICAgIHZhciB0aW1lb3V0SWQgPSAkYnJvd3NlckRlZmVyKHRpbWVvdXRSZXF1ZXN0LCB0aW1lb3V0KTtcbiAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZUxpa2UodGltZW91dCkpIHtcbiAgICAgIHRpbWVvdXQudGhlbih0aW1lb3V0UmVxdWVzdCk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiB0aW1lb3V0UmVxdWVzdCgpIHtcbiAgICAgIGpzb25wRG9uZSAmJiBqc29ucERvbmUoKTtcbiAgICAgIHhociAmJiB4aHIuYWJvcnQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssIHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcsIHN0YXR1c1RleHQpIHtcbiAgICAgIC8vIGNhbmNlbCB0aW1lb3V0IGFuZCBzdWJzZXF1ZW50IHRpbWVvdXQgcHJvbWlzZSByZXNvbHV0aW9uXG4gICAgICBpZiAoaXNEZWZpbmVkKHRpbWVvdXRJZCkpIHtcbiAgICAgICAgJGJyb3dzZXJEZWZlci5jYW5jZWwodGltZW91dElkKTtcbiAgICAgIH1cbiAgICAgIGpzb25wRG9uZSA9IHhociA9IG51bGw7XG5cbiAgICAgIGNhbGxiYWNrKHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcsIHN0YXR1c1RleHQpO1xuICAgICAgJGJyb3dzZXIuJCRjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdChub29wKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24ganNvbnBSZXEodXJsLCBjYWxsYmFja0lkLCBkb25lKSB7XG4gICAgLy8gd2UgY2FuJ3QgdXNlIGpRdWVyeS9qcUxpdGUgaGVyZSBiZWNhdXNlIGpRdWVyeSBkb2VzIGNyYXp5IHN0dWZmIHdpdGggc2NyaXB0IGVsZW1lbnRzLCBlLmcuOlxuICAgIC8vIC0gZmV0Y2hlcyBsb2NhbCBzY3JpcHRzIHZpYSBYSFIgYW5kIGV2YWxzIHRoZW1cbiAgICAvLyAtIGFkZHMgYW5kIGltbWVkaWF0ZWx5IHJlbW92ZXMgc2NyaXB0IGVsZW1lbnRzIGZyb20gdGhlIGRvY3VtZW50XG4gICAgdmFyIHNjcmlwdCA9IHJhd0RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpLCBjYWxsYmFjayA9IG51bGw7XG4gICAgc2NyaXB0LnR5cGUgPSBcInRleHQvamF2YXNjcmlwdFwiO1xuICAgIHNjcmlwdC5zcmMgPSB1cmw7XG4gICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcblxuICAgIGNhbGxiYWNrID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGbihzY3JpcHQsIFwibG9hZFwiLCBjYWxsYmFjayk7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyRm4oc2NyaXB0LCBcImVycm9yXCIsIGNhbGxiYWNrKTtcbiAgICAgIHJhd0RvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICB2YXIgc3RhdHVzID0gLTE7XG4gICAgICB2YXIgdGV4dCA9IFwidW5rbm93blwiO1xuXG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09IFwibG9hZFwiICYmICFjYWxsYmFja3NbY2FsbGJhY2tJZF0uY2FsbGVkKSB7XG4gICAgICAgICAgZXZlbnQgPSB7IHR5cGU6IFwiZXJyb3JcIiB9O1xuICAgICAgICB9XG4gICAgICAgIHRleHQgPSBldmVudC50eXBlO1xuICAgICAgICBzdGF0dXMgPSBldmVudC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgIGRvbmUoc3RhdHVzLCB0ZXh0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgYWRkRXZlbnRMaXN0ZW5lckZuKHNjcmlwdCwgXCJsb2FkXCIsIGNhbGxiYWNrKTtcbiAgICBhZGRFdmVudExpc3RlbmVyRm4oc2NyaXB0LCBcImVycm9yXCIsIGNhbGxiYWNrKTtcbiAgICByYXdEb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgcmV0dXJuIGNhbGxiYWNrO1xuICB9XG59XG5cbnZhciAkaW50ZXJwb2xhdGVNaW5FcnIgPSBhbmd1bGFyLiRpbnRlcnBvbGF0ZU1pbkVyciA9IG1pbkVycignJGludGVycG9sYXRlJyk7XG4kaW50ZXJwb2xhdGVNaW5FcnIudGhyb3dOb2NvbmNhdCA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgdGhyb3cgJGludGVycG9sYXRlTWluRXJyKCdub2NvbmNhdCcsXG4gICAgICBcIkVycm9yIHdoaWxlIGludGVycG9sYXRpbmc6IHswfVxcblN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIGRpc2FsbG93cyBcIiArXG4gICAgICBcImludGVycG9sYXRpb25zIHRoYXQgY29uY2F0ZW5hdGUgbXVsdGlwbGUgZXhwcmVzc2lvbnMgd2hlbiBhIHRydXN0ZWQgdmFsdWUgaXMgXCIgK1xuICAgICAgXCJyZXF1aXJlZC4gIFNlZSBodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9uZy4kc2NlXCIsIHRleHQpO1xufTtcblxuJGludGVycG9sYXRlTWluRXJyLmludGVyciA9IGZ1bmN0aW9uKHRleHQsIGVycikge1xuICByZXR1cm4gJGludGVycG9sYXRlTWluRXJyKCdpbnRlcnInLCBcIkNhbid0IGludGVycG9sYXRlOiB7MH1cXG57MX1cIiwgdGV4dCwgZXJyLnRvU3RyaW5nKCkpO1xufTtcblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRpbnRlcnBvbGF0ZVByb3ZpZGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVXNlZCBmb3IgY29uZmlndXJpbmcgdGhlIGludGVycG9sYXRpb24gbWFya3VwLiBEZWZhdWx0cyB0byBge3tgIGFuZCBgfX1gLlxuICpcbiAqIEBleGFtcGxlXG48ZXhhbXBsZSBtb2R1bGU9XCJjdXN0b21JbnRlcnBvbGF0aW9uQXBwXCI+XG48ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuPHNjcmlwdD5cbiAgdmFyIGN1c3RvbUludGVycG9sYXRpb25BcHAgPSBhbmd1bGFyLm1vZHVsZSgnY3VzdG9tSW50ZXJwb2xhdGlvbkFwcCcsIFtdKTtcblxuICBjdXN0b21JbnRlcnBvbGF0aW9uQXBwLmNvbmZpZyhmdW5jdGlvbigkaW50ZXJwb2xhdGVQcm92aWRlcikge1xuICAgICRpbnRlcnBvbGF0ZVByb3ZpZGVyLnN0YXJ0U3ltYm9sKCcvLycpO1xuICAgICRpbnRlcnBvbGF0ZVByb3ZpZGVyLmVuZFN5bWJvbCgnLy8nKTtcbiAgfSk7XG5cblxuICBjdXN0b21JbnRlcnBvbGF0aW9uQXBwLmNvbnRyb2xsZXIoJ0RlbW9Db250cm9sbGVyJywgZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmxhYmVsID0gXCJUaGlzIGJpbmRpbmcgaXMgYnJvdWdodCB5b3UgYnkgLy8gaW50ZXJwb2xhdGlvbiBzeW1ib2xzLlwiO1xuICB9KTtcbjwvc2NyaXB0PlxuPGRpdiBuZy1hcHA9XCJBcHBcIiBuZy1jb250cm9sbGVyPVwiRGVtb0NvbnRyb2xsZXIgYXMgZGVtb1wiPlxuICAgIC8vZGVtby5sYWJlbC8vXG48L2Rpdj5cbjwvZmlsZT5cbjxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgaXQoJ3Nob3VsZCBpbnRlcnBvbGF0ZSBiaW5kaW5nIHdpdGggY3VzdG9tIHN5bWJvbHMnLCBmdW5jdGlvbigpIHtcbiAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdkZW1vLmxhYmVsJykpLmdldFRleHQoKSkudG9CZSgnVGhpcyBiaW5kaW5nIGlzIGJyb3VnaHQgeW91IGJ5IC8vIGludGVycG9sYXRpb24gc3ltYm9scy4nKTtcbiAgfSk7XG48L2ZpbGU+XG48L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uICRJbnRlcnBvbGF0ZVByb3ZpZGVyKCkge1xuICB2YXIgc3RhcnRTeW1ib2wgPSAne3snO1xuICB2YXIgZW5kU3ltYm9sID0gJ319JztcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkaW50ZXJwb2xhdGVQcm92aWRlciNzdGFydFN5bWJvbFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3ltYm9sIHRvIGRlbm90ZSBzdGFydCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBge3tgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHZhbHVlIG5ldyB2YWx1ZSB0byBzZXQgdGhlIHN0YXJ0aW5nIHN5bWJvbCB0by5cbiAgICogQHJldHVybnMge3N0cmluZ3xzZWxmfSBSZXR1cm5zIHRoZSBzeW1ib2wgd2hlbiB1c2VkIGFzIGdldHRlciBhbmQgc2VsZiBpZiB1c2VkIGFzIHNldHRlci5cbiAgICovXG4gIHRoaXMuc3RhcnRTeW1ib2wgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgc3RhcnRTeW1ib2wgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3RhcnRTeW1ib2w7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRpbnRlcnBvbGF0ZVByb3ZpZGVyI2VuZFN5bWJvbFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3ltYm9sIHRvIGRlbm90ZSB0aGUgZW5kIG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB9fWAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gdmFsdWUgbmV3IHZhbHVlIHRvIHNldCB0aGUgZW5kaW5nIHN5bWJvbCB0by5cbiAgICogQHJldHVybnMge3N0cmluZ3xzZWxmfSBSZXR1cm5zIHRoZSBzeW1ib2wgd2hlbiB1c2VkIGFzIGdldHRlciBhbmQgc2VsZiBpZiB1c2VkIGFzIHNldHRlci5cbiAgICovXG4gIHRoaXMuZW5kU3ltYm9sID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGVuZFN5bWJvbCA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlbmRTeW1ib2w7XG4gICAgfVxuICB9O1xuXG5cbiAgdGhpcy4kZ2V0ID0gWyckcGFyc2UnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJHNjZScsIGZ1bmN0aW9uKCRwYXJzZSwgJGV4Y2VwdGlvbkhhbmRsZXIsICRzY2UpIHtcbiAgICB2YXIgc3RhcnRTeW1ib2xMZW5ndGggPSBzdGFydFN5bWJvbC5sZW5ndGgsXG4gICAgICAgIGVuZFN5bWJvbExlbmd0aCA9IGVuZFN5bWJvbC5sZW5ndGgsXG4gICAgICAgIGVzY2FwZWRTdGFydFJlZ2V4cCA9IG5ldyBSZWdFeHAoc3RhcnRTeW1ib2wucmVwbGFjZSgvLi9nLCBlc2NhcGUpLCAnZycpLFxuICAgICAgICBlc2NhcGVkRW5kUmVnZXhwID0gbmV3IFJlZ0V4cChlbmRTeW1ib2wucmVwbGFjZSgvLi9nLCBlc2NhcGUpLCAnZycpO1xuXG4gICAgZnVuY3Rpb24gZXNjYXBlKGNoKSB7XG4gICAgICByZXR1cm4gJ1xcXFxcXFxcXFxcXCcgKyBjaDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bmVzY2FwZVRleHQodGV4dCkge1xuICAgICAgcmV0dXJuIHRleHQucmVwbGFjZShlc2NhcGVkU3RhcnRSZWdleHAsIHN0YXJ0U3ltYm9sKS5cbiAgICAgICAgcmVwbGFjZShlc2NhcGVkRW5kUmVnZXhwLCBlbmRTeW1ib2wpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0cmluZ2lmeSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHsgLy8gbnVsbCB8fCB1bmRlZmluZWRcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICB2YWx1ZSA9ICcnICsgdmFsdWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdmFsdWUgPSB0b0pzb24odmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgKiBAbmFtZSAkaW50ZXJwb2xhdGVcbiAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAqXG4gICAgICogQHJlcXVpcmVzICRwYXJzZVxuICAgICAqIEByZXF1aXJlcyAkc2NlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIENvbXBpbGVzIGEgc3RyaW5nIHdpdGggbWFya3VwIGludG8gYW4gaW50ZXJwb2xhdGlvbiBmdW5jdGlvbi4gVGhpcyBzZXJ2aWNlIGlzIHVzZWQgYnkgdGhlXG4gICAgICogSFRNTCB7QGxpbmsgbmcuJGNvbXBpbGUgJGNvbXBpbGV9IHNlcnZpY2UgZm9yIGRhdGEgYmluZGluZy4gU2VlXG4gICAgICoge0BsaW5rIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyICRpbnRlcnBvbGF0ZVByb3ZpZGVyfSBmb3IgY29uZmlndXJpbmcgdGhlXG4gICAgICogaW50ZXJwb2xhdGlvbiBtYXJrdXAuXG4gICAgICpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICB2YXIgJGludGVycG9sYXRlID0gLi4uOyAvLyBpbmplY3RlZFxuICAgICAqICAgdmFyIGV4cCA9ICRpbnRlcnBvbGF0ZSgnSGVsbG8ge3tuYW1lIHwgdXBwZXJjYXNlfX0hJyk7XG4gICAgICogICBleHBlY3QoZXhwKHtuYW1lOidBbmd1bGFyJ30pKS50b0VxdWFsKCdIZWxsbyBBTkdVTEFSIScpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogYCRpbnRlcnBvbGF0ZWAgdGFrZXMgYW4gb3B0aW9uYWwgZm91cnRoIGFyZ3VtZW50LCBgYWxsT3JOb3RoaW5nYC4gSWYgYGFsbE9yTm90aGluZ2AgaXNcbiAgICAgKiBgdHJ1ZWAsIHRoZSBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGB1bmRlZmluZWRgIHVubGVzcyBhbGwgZW1iZWRkZWQgZXhwcmVzc2lvbnNcbiAgICAgKiBldmFsdWF0ZSB0byBhIHZhbHVlIG90aGVyIHRoYW4gYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICAgdmFyICRpbnRlcnBvbGF0ZSA9IC4uLjsgLy8gaW5qZWN0ZWRcbiAgICAgKiAgIHZhciBjb250ZXh0ID0ge2dyZWV0aW5nOiAnSGVsbG8nLCBuYW1lOiB1bmRlZmluZWQgfTtcbiAgICAgKlxuICAgICAqICAgLy8gZGVmYXVsdCBcImZvcmdpdmluZ1wiIG1vZGVcbiAgICAgKiAgIHZhciBleHAgPSAkaW50ZXJwb2xhdGUoJ3t7Z3JlZXRpbmd9fSB7e25hbWV9fSEnKTtcbiAgICAgKiAgIGV4cGVjdChleHAoY29udGV4dCkpLnRvRXF1YWwoJ0hlbGxvICEnKTtcbiAgICAgKlxuICAgICAqICAgLy8gXCJhbGxPck5vdGhpbmdcIiBtb2RlXG4gICAgICogICBleHAgPSAkaW50ZXJwb2xhdGUoJ3t7Z3JlZXRpbmd9fSB7e25hbWV9fSEnLCBmYWxzZSwgbnVsbCwgdHJ1ZSk7XG4gICAgICogICBleHBlY3QoZXhwKGNvbnRleHQpKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgICogICBjb250ZXh0Lm5hbWUgPSAnQW5ndWxhcic7XG4gICAgICogICBleHBlY3QoZXhwKGNvbnRleHQpKS50b0VxdWFsKCdIZWxsbyBBbmd1bGFyIScpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogYGFsbE9yTm90aGluZ2AgaXMgdXNlZnVsIGZvciBpbnRlcnBvbGF0aW5nIFVSTHMuIGBuZ1NyY2AgYW5kIGBuZ1NyY3NldGAgdXNlIHRoaXMgYmVoYXZpb3IuXG4gICAgICpcbiAgICAgKiAjIyMjRXNjYXBlZCBJbnRlcnBvbGF0aW9uXG4gICAgICogJGludGVycG9sYXRlIHByb3ZpZGVzIGEgbWVjaGFuaXNtIGZvciBlc2NhcGluZyBpbnRlcnBvbGF0aW9uIG1hcmtlcnMuIFN0YXJ0IGFuZCBlbmQgbWFya2Vyc1xuICAgICAqIGNhbiBiZSBlc2NhcGVkIGJ5IHByZWNlZGluZyBlYWNoIG9mIHRoZWlyIGNoYXJhY3RlcnMgd2l0aCBhIFJFVkVSU0UgU09MSURVUyBVKzAwNUMgKGJhY2tzbGFzaCkuXG4gICAgICogSXQgd2lsbCBiZSByZW5kZXJlZCBhcyBhIHJlZ3VsYXIgc3RhcnQvZW5kIG1hcmtlciwgYW5kIHdpbGwgbm90IGJlIGludGVycHJldGVkIGFzIGFuIGV4cHJlc3Npb25cbiAgICAgKiBvciBiaW5kaW5nLlxuICAgICAqXG4gICAgICogVGhpcyBlbmFibGVzIHdlYi1zZXJ2ZXJzIHRvIHByZXZlbnQgc2NyaXB0IGluamVjdGlvbiBhdHRhY2tzIGFuZCBkZWZhY2luZyBhdHRhY2tzLCB0byBzb21lXG4gICAgICogZGVncmVlLCB3aGlsZSBhbHNvIGVuYWJsaW5nIGNvZGUgZXhhbXBsZXMgdG8gd29yayB3aXRob3V0IHJlbHlpbmcgb24gdGhlXG4gICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ05vbkJpbmRhYmxlIG5nTm9uQmluZGFibGV9IGRpcmVjdGl2ZS5cbiAgICAgKlxuICAgICAqICoqRm9yIHNlY3VyaXR5IHB1cnBvc2VzLCBpdCBpcyBzdHJvbmdseSBlbmNvdXJhZ2VkIHRoYXQgd2ViIHNlcnZlcnMgZXNjYXBlIHVzZXItc3VwcGxpZWQgZGF0YSxcbiAgICAgKiByZXBsYWNpbmcgYW5nbGUgYnJhY2tldHMgKCZsdDssICZndDspIHdpdGggJmFtcDtsdDsgYW5kICZhbXA7Z3Q7IHJlc3BlY3RpdmVseSwgYW5kIHJlcGxhY2luZyBhbGxcbiAgICAgKiBpbnRlcnBvbGF0aW9uIHN0YXJ0L2VuZCBtYXJrZXJzIHdpdGggdGhlaXIgZXNjYXBlZCBjb3VudGVycGFydHMuKipcbiAgICAgKlxuICAgICAqIEVzY2FwZWQgaW50ZXJwb2xhdGlvbiBtYXJrZXJzIGFyZSBvbmx5IHJlcGxhY2VkIHdpdGggdGhlIGFjdHVhbCBpbnRlcnBvbGF0aW9uIG1hcmtlcnMgaW4gcmVuZGVyZWRcbiAgICAgKiBvdXRwdXQgd2hlbiB0aGUgJGludGVycG9sYXRlIHNlcnZpY2UgcHJvY2Vzc2VzIHRoZSB0ZXh0LiBTbywgZm9yIEhUTUwgZWxlbWVudHMgaW50ZXJwb2xhdGVkXG4gICAgICogYnkge0BsaW5rIG5nLiRjb21waWxlICRjb21waWxlfSwgb3Igb3RoZXJ3aXNlIGludGVycG9sYXRlZCB3aXRoIHRoZSBgbXVzdEhhdmVFeHByZXNzaW9uYCBwYXJhbWV0ZXJcbiAgICAgKiBzZXQgdG8gYHRydWVgLCB0aGUgaW50ZXJwb2xhdGVkIHRleHQgbXVzdCBjb250YWluIGFuIHVuZXNjYXBlZCBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24uIEFzIHN1Y2gsXG4gICAgICogdGhpcyBpcyB0eXBpY2FsbHkgdXNlZnVsIG9ubHkgd2hlbiB1c2VyLWRhdGEgaXMgdXNlZCBpbiByZW5kZXJpbmcgYSB0ZW1wbGF0ZSBmcm9tIHRoZSBzZXJ2ZXIsIG9yXG4gICAgICogd2hlbiBvdGhlcndpc2UgdW50cnVzdGVkIGRhdGEgaXMgdXNlZCBieSBhIGRpcmVjdGl2ZS5cbiAgICAgKlxuICAgICAqIDxleGFtcGxlPlxuICAgICAqICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAqICAgIDxkaXYgbmctaW5pdD1cInVzZXJuYW1lPSdBIHVzZXInXCI+XG4gICAgICogICAgICA8cCBuZy1pbml0PVwiYXBwdGl0bGU9J0VzY2FwaW5nIGRlbW8nXCI+e3thcHB0aXRsZX19OiBcXHtcXHsgdXNlcm5hbWUgPSBcImRlZmFjZWQgdmFsdWVcIjsgXFx9XFx9XG4gICAgICogICAgICAgIDwvcD5cbiAgICAgKiAgICAgIDxwPjxzdHJvbmc+e3t1c2VybmFtZX19PC9zdHJvbmc+IGF0dGVtcHRzIHRvIGluamVjdCBjb2RlIHdoaWNoIHdpbGwgZGVmYWNlIHRoZVxuICAgICAqICAgICAgICBhcHBsaWNhdGlvbiwgYnV0IGZhaWxzIHRvIGFjY29tcGxpc2ggdGhlaXIgdGFzaywgYmVjYXVzZSB0aGUgc2VydmVyIGhhcyBjb3JyZWN0bHlcbiAgICAgKiAgICAgICAgZXNjYXBlZCB0aGUgaW50ZXJwb2xhdGlvbiBzdGFydC9lbmQgbWFya2VycyB3aXRoIFJFVkVSU0UgU09MSURVUyBVKzAwNUMgKGJhY2tzbGFzaClcbiAgICAgKiAgICAgICAgY2hhcmFjdGVycy48L3A+XG4gICAgICogICAgICA8cD5JbnN0ZWFkLCB0aGUgcmVzdWx0IG9mIHRoZSBhdHRlbXB0ZWQgc2NyaXB0IGluamVjdGlvbiBpcyB2aXNpYmxlLCBhbmQgY2FuIGJlIHJlbW92ZWRcbiAgICAgKiAgICAgICAgZnJvbSB0aGUgZGF0YWJhc2UgYnkgYW4gYWRtaW5pc3RyYXRvci48L3A+XG4gICAgICogICAgPC9kaXY+XG4gICAgICogIDwvZmlsZT5cbiAgICAgKiA8L2V4YW1wbGU+XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB3aXRoIG1hcmt1cCB0byBpbnRlcnBvbGF0ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBtdXN0SGF2ZUV4cHJlc3Npb24gaWYgc2V0IHRvIHRydWUgdGhlbiB0aGUgaW50ZXJwb2xhdGlvbiBzdHJpbmcgbXVzdCBoYXZlXG4gICAgICogICAgZW1iZWRkZWQgZXhwcmVzc2lvbiBpbiBvcmRlciB0byByZXR1cm4gYW4gaW50ZXJwb2xhdGlvbiBmdW5jdGlvbi4gU3RyaW5ncyB3aXRoIG5vXG4gICAgICogICAgZW1iZWRkZWQgZXhwcmVzc2lvbiB3aWxsIHJldHVybiBudWxsIGZvciB0aGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHRydXN0ZWRDb250ZXh0IHdoZW4gcHJvdmlkZWQsIHRoZSByZXR1cm5lZCBmdW5jdGlvbiBwYXNzZXMgdGhlIGludGVycG9sYXRlZFxuICAgICAqICAgIHJlc3VsdCB0aHJvdWdoIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWQgJHNjZS5nZXRUcnVzdGVkKGludGVycG9sYXRlZFJlc3VsdCxcbiAgICAgKiAgICB0cnVzdGVkQ29udGV4dCl9IGJlZm9yZSByZXR1cm5pbmcgaXQuICBSZWZlciB0byB0aGUge0BsaW5rIG5nLiRzY2UgJHNjZX0gc2VydmljZSB0aGF0XG4gICAgICogICAgcHJvdmlkZXMgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgZm9yIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gYWxsT3JOb3RoaW5nIGlmIGB0cnVlYCwgdGhlbiB0aGUgcmV0dXJuZWQgZnVuY3Rpb24gcmV0dXJucyB1bmRlZmluZWRcbiAgICAgKiAgICB1bmxlc3MgYWxsIGVtYmVkZGVkIGV4cHJlc3Npb25zIGV2YWx1YXRlIHRvIGEgdmFsdWUgb3RoZXIgdGhhbiBgdW5kZWZpbmVkYC5cbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCl9IGFuIGludGVycG9sYXRpb24gZnVuY3Rpb24gd2hpY2ggaXMgdXNlZCB0byBjb21wdXRlIHRoZVxuICAgICAqICAgIGludGVycG9sYXRlZCBzdHJpbmcuIFRoZSBmdW5jdGlvbiBoYXMgdGhlc2UgcGFyYW1ldGVyczpcbiAgICAgKlxuICAgICAqIC0gYGNvbnRleHRgOiBldmFsdWF0aW9uIGNvbnRleHQgZm9yIGFsbCBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgaW50ZXJwb2xhdGVkIHRleHRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiAkaW50ZXJwb2xhdGUodGV4dCwgbXVzdEhhdmVFeHByZXNzaW9uLCB0cnVzdGVkQ29udGV4dCwgYWxsT3JOb3RoaW5nKSB7XG4gICAgICBhbGxPck5vdGhpbmcgPSAhIWFsbE9yTm90aGluZztcbiAgICAgIHZhciBzdGFydEluZGV4LFxuICAgICAgICAgIGVuZEluZGV4LFxuICAgICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgICBleHByZXNzaW9ucyA9IFtdLFxuICAgICAgICAgIHBhcnNlRm5zID0gW10sXG4gICAgICAgICAgdGV4dExlbmd0aCA9IHRleHQubGVuZ3RoLFxuICAgICAgICAgIGV4cCxcbiAgICAgICAgICBjb25jYXQgPSBbXSxcbiAgICAgICAgICBleHByZXNzaW9uUG9zaXRpb25zID0gW107XG5cbiAgICAgIHdoaWxlIChpbmRleCA8IHRleHRMZW5ndGgpIHtcbiAgICAgICAgaWYgKCgoc3RhcnRJbmRleCA9IHRleHQuaW5kZXhPZihzdGFydFN5bWJvbCwgaW5kZXgpKSAhPSAtMSkgJiZcbiAgICAgICAgICAgICAoKGVuZEluZGV4ID0gdGV4dC5pbmRleE9mKGVuZFN5bWJvbCwgc3RhcnRJbmRleCArIHN0YXJ0U3ltYm9sTGVuZ3RoKSkgIT0gLTEpKSB7XG4gICAgICAgICAgaWYgKGluZGV4ICE9PSBzdGFydEluZGV4KSB7XG4gICAgICAgICAgICBjb25jYXQucHVzaCh1bmVzY2FwZVRleHQodGV4dC5zdWJzdHJpbmcoaW5kZXgsIHN0YXJ0SW5kZXgpKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGV4cCA9IHRleHQuc3Vic3RyaW5nKHN0YXJ0SW5kZXggKyBzdGFydFN5bWJvbExlbmd0aCwgZW5kSW5kZXgpO1xuICAgICAgICAgIGV4cHJlc3Npb25zLnB1c2goZXhwKTtcbiAgICAgICAgICBwYXJzZUZucy5wdXNoKCRwYXJzZShleHAsIHBhcnNlU3RyaW5naWZ5SW50ZXJjZXB0b3IpKTtcbiAgICAgICAgICBpbmRleCA9IGVuZEluZGV4ICsgZW5kU3ltYm9sTGVuZ3RoO1xuICAgICAgICAgIGV4cHJlc3Npb25Qb3NpdGlvbnMucHVzaChjb25jYXQubGVuZ3RoKTtcbiAgICAgICAgICBjb25jYXQucHVzaCgnJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gd2UgZGlkIG5vdCBmaW5kIGFuIGludGVycG9sYXRpb24sIHNvIHdlIGhhdmUgdG8gYWRkIHRoZSByZW1haW5kZXIgdG8gdGhlIHNlcGFyYXRvcnMgYXJyYXlcbiAgICAgICAgICBpZiAoaW5kZXggIT09IHRleHRMZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbmNhdC5wdXNoKHVuZXNjYXBlVGV4dCh0ZXh0LnN1YnN0cmluZyhpbmRleCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQ29uY2F0ZW5hdGluZyBleHByZXNzaW9ucyBtYWtlcyBpdCBoYXJkIHRvIHJlYXNvbiBhYm91dCB3aGV0aGVyIHNvbWUgY29tYmluYXRpb24gb2ZcbiAgICAgIC8vIGNvbmNhdGVuYXRlZCB2YWx1ZXMgYXJlIHVuc2FmZSB0byB1c2UgYW5kIGNvdWxkIGVhc2lseSBsZWFkIHRvIFhTUy4gIEJ5IHJlcXVpcmluZyB0aGF0IGFcbiAgICAgIC8vIHNpbmdsZSBleHByZXNzaW9uIGJlIHVzZWQgZm9yIGlmcmFtZVtzcmNdLCBvYmplY3Rbc3JjXSwgZXRjLiwgd2UgZW5zdXJlIHRoYXQgdGhlIHZhbHVlXG4gICAgICAvLyB0aGF0J3MgdXNlZCBpcyBhc3NpZ25lZCBvciBjb25zdHJ1Y3RlZCBieSBzb21lIEpTIGNvZGUgc29tZXdoZXJlIHRoYXQgaXMgbW9yZSB0ZXN0YWJsZSBvclxuICAgICAgLy8gbWFrZSBpdCBvYnZpb3VzIHRoYXQgeW91IGJvdW5kIHRoZSB2YWx1ZSB0byBzb21lIHVzZXIgY29udHJvbGxlZCB2YWx1ZS4gIFRoaXMgaGVscHMgcmVkdWNlXG4gICAgICAvLyB0aGUgbG9hZCB3aGVuIGF1ZGl0aW5nIGZvciBYU1MgaXNzdWVzLlxuICAgICAgaWYgKHRydXN0ZWRDb250ZXh0ICYmIGNvbmNhdC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgJGludGVycG9sYXRlTWluRXJyLnRocm93Tm9jb25jYXQodGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghbXVzdEhhdmVFeHByZXNzaW9uIHx8IGV4cHJlc3Npb25zLmxlbmd0aCkge1xuICAgICAgICB2YXIgY29tcHV0ZSA9IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGV4cHJlc3Npb25zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChhbGxPck5vdGhpbmcgJiYgaXNVbmRlZmluZWQodmFsdWVzW2ldKSkgcmV0dXJuO1xuICAgICAgICAgICAgY29uY2F0W2V4cHJlc3Npb25Qb3NpdGlvbnNbaV1dID0gdmFsdWVzW2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY29uY2F0LmpvaW4oJycpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBnZXRWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHRydXN0ZWRDb250ZXh0ID9cbiAgICAgICAgICAgICRzY2UuZ2V0VHJ1c3RlZCh0cnVzdGVkQ29udGV4dCwgdmFsdWUpIDpcbiAgICAgICAgICAgICRzY2UudmFsdWVPZih2YWx1ZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiBpbnRlcnBvbGF0aW9uRm4oY29udGV4dCkge1xuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgdmFyIGlpID0gZXhwcmVzc2lvbnMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IG5ldyBBcnJheShpaSk7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGZvciAoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhbHVlc1tpXSA9IHBhcnNlRm5zW2ldKGNvbnRleHQpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGNvbXB1dGUodmFsdWVzKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcigkaW50ZXJwb2xhdGVNaW5FcnIuaW50ZXJyKHRleHQsIGVycikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSwge1xuICAgICAgICAgIC8vIGFsbCBvZiB0aGVzZSBwcm9wZXJ0aWVzIGFyZSB1bmRvY3VtZW50ZWQgZm9yIG5vd1xuICAgICAgICAgIGV4cDogdGV4dCwgLy9qdXN0IGZvciBjb21wYXRpYmlsaXR5IHdpdGggcmVndWxhciB3YXRjaGVycyBjcmVhdGVkIHZpYSAkd2F0Y2hcbiAgICAgICAgICBleHByZXNzaW9uczogZXhwcmVzc2lvbnMsXG4gICAgICAgICAgJCR3YXRjaERlbGVnYXRlOiBmdW5jdGlvbihzY29wZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHZhciBsYXN0VmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gc2NvcGUuJHdhdGNoR3JvdXAocGFyc2VGbnMsIGZ1bmN0aW9uIGludGVycG9sYXRlRm5XYXRjaGVyKHZhbHVlcywgb2xkVmFsdWVzKSB7XG4gICAgICAgICAgICAgIHZhciBjdXJyVmFsdWUgPSBjb21wdXRlKHZhbHVlcyk7XG4gICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVyKSkge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgY3VyclZhbHVlLCB2YWx1ZXMgIT09IG9sZFZhbHVlcyA/IGxhc3RWYWx1ZSA6IGN1cnJWYWx1ZSwgc2NvcGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IGN1cnJWYWx1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHBhcnNlU3RyaW5naWZ5SW50ZXJjZXB0b3IodmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YWx1ZSA9IGdldFZhbHVlKHZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gYWxsT3JOb3RoaW5nICYmICFpc0RlZmluZWQodmFsdWUpID8gdmFsdWUgOiBzdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcigkaW50ZXJwb2xhdGVNaW5FcnIuaW50ZXJyKHRleHQsIGVycikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGludGVycG9sYXRlI3N0YXJ0U3ltYm9sXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU3ltYm9sIHRvIGRlbm90ZSB0aGUgc3RhcnQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYHt7YC5cbiAgICAgKlxuICAgICAqIFVzZSB7QGxpbmsgbmcuJGludGVycG9sYXRlUHJvdmlkZXIjc3RhcnRTeW1ib2wgYCRpbnRlcnBvbGF0ZVByb3ZpZGVyLnN0YXJ0U3ltYm9sYH0gdG8gY2hhbmdlXG4gICAgICogdGhlIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHN0YXJ0IHN5bWJvbC5cbiAgICAgKi9cbiAgICAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2wgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzdGFydFN5bWJvbDtcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGludGVycG9sYXRlI2VuZFN5bWJvbFxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFN5bWJvbCB0byBkZW5vdGUgdGhlIGVuZCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBgfX1gLlxuICAgICAqXG4gICAgICogVXNlIHtAbGluayBuZy4kaW50ZXJwb2xhdGVQcm92aWRlciNlbmRTeW1ib2wgYCRpbnRlcnBvbGF0ZVByb3ZpZGVyLmVuZFN5bWJvbGB9IHRvIGNoYW5nZVxuICAgICAqIHRoZSBzeW1ib2wuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBlbmQgc3ltYm9sLlxuICAgICAqL1xuICAgICRpbnRlcnBvbGF0ZS5lbmRTeW1ib2wgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBlbmRTeW1ib2w7XG4gICAgfTtcblxuICAgIHJldHVybiAkaW50ZXJwb2xhdGU7XG4gIH1dO1xufVxuXG5mdW5jdGlvbiAkSW50ZXJ2YWxQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyR3aW5kb3cnLCAnJHEnLCAnJCRxJyxcbiAgICAgICBmdW5jdGlvbigkcm9vdFNjb3BlLCAgICR3aW5kb3csICAgJHEsICAgJCRxKSB7XG4gICAgdmFyIGludGVydmFscyA9IHt9O1xuXG5cbiAgICAgLyoqXG4gICAgICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAgICAqIEBuYW1lICRpbnRlcnZhbFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogQW5ndWxhcidzIHdyYXBwZXIgZm9yIGB3aW5kb3cuc2V0SW50ZXJ2YWxgLiBUaGUgYGZuYCBmdW5jdGlvbiBpcyBleGVjdXRlZCBldmVyeSBgZGVsYXlgXG4gICAgICAqIG1pbGxpc2Vjb25kcy5cbiAgICAgICpcbiAgICAgICogVGhlIHJldHVybiB2YWx1ZSBvZiByZWdpc3RlcmluZyBhbiBpbnRlcnZhbCBmdW5jdGlvbiBpcyBhIHByb21pc2UuIFRoaXMgcHJvbWlzZSB3aWxsIGJlXG4gICAgICAqIG5vdGlmaWVkIHVwb24gZWFjaCB0aWNrIG9mIHRoZSBpbnRlcnZhbCwgYW5kIHdpbGwgYmUgcmVzb2x2ZWQgYWZ0ZXIgYGNvdW50YCBpdGVyYXRpb25zLCBvclxuICAgICAgKiBydW4gaW5kZWZpbml0ZWx5IGlmIGBjb3VudGAgaXMgbm90IGRlZmluZWQuIFRoZSB2YWx1ZSBvZiB0aGUgbm90aWZpY2F0aW9uIHdpbGwgYmUgdGhlXG4gICAgICAqIG51bWJlciBvZiBpdGVyYXRpb25zIHRoYXQgaGF2ZSBydW4uXG4gICAgICAqIFRvIGNhbmNlbCBhbiBpbnRlcnZhbCwgY2FsbCBgJGludGVydmFsLmNhbmNlbChwcm9taXNlKWAuXG4gICAgICAqXG4gICAgICAqIEluIHRlc3RzIHlvdSBjYW4gdXNlIHtAbGluayBuZ01vY2suJGludGVydmFsI2ZsdXNoIGAkaW50ZXJ2YWwuZmx1c2gobWlsbGlzKWB9IHRvXG4gICAgICAqIG1vdmUgZm9yd2FyZCBieSBgbWlsbGlzYCBtaWxsaXNlY29uZHMgYW5kIHRyaWdnZXIgYW55IGZ1bmN0aW9ucyBzY2hlZHVsZWQgdG8gcnVuIGluIHRoYXRcbiAgICAgICogdGltZS5cbiAgICAgICpcbiAgICAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICAgICogKipOb3RlKio6IEludGVydmFscyBjcmVhdGVkIGJ5IHRoaXMgc2VydmljZSBtdXN0IGJlIGV4cGxpY2l0bHkgZGVzdHJveWVkIHdoZW4geW91IGFyZSBmaW5pc2hlZFxuICAgICAgKiB3aXRoIHRoZW0uICBJbiBwYXJ0aWN1bGFyIHRoZXkgYXJlIG5vdCBhdXRvbWF0aWNhbGx5IGRlc3Ryb3llZCB3aGVuIGEgY29udHJvbGxlcidzIHNjb3BlIG9yIGFcbiAgICAgICogZGlyZWN0aXZlJ3MgZWxlbWVudCBhcmUgZGVzdHJveWVkLlxuICAgICAgKiBZb3Ugc2hvdWxkIHRha2UgdGhpcyBpbnRvIGNvbnNpZGVyYXRpb24gYW5kIG1ha2Ugc3VyZSB0byBhbHdheXMgY2FuY2VsIHRoZSBpbnRlcnZhbCBhdCB0aGVcbiAgICAgICogYXBwcm9wcmlhdGUgbW9tZW50LiAgU2VlIHRoZSBleGFtcGxlIGJlbG93IGZvciBtb3JlIGRldGFpbHMgb24gaG93IGFuZCB3aGVuIHRvIGRvIHRoaXMuXG4gICAgICAqIDwvZGl2PlxuICAgICAgKlxuICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEEgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmUgY2FsbGVkIHJlcGVhdGVkbHkuXG4gICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZWxheSBOdW1iZXIgb2YgbWlsbGlzZWNvbmRzIGJldHdlZW4gZWFjaCBmdW5jdGlvbiBjYWxsLlxuICAgICAgKiBAcGFyYW0ge251bWJlcj19IFtjb3VudD0wXSBOdW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0LiBJZiBub3Qgc2V0LCBvciAwLCB3aWxsIHJlcGVhdFxuICAgICAgKiAgIGluZGVmaW5pdGVseS5cbiAgICAgICogQHBhcmFtIHtib29sZWFuPX0gW2ludm9rZUFwcGx5PXRydWVdIElmIHNldCB0byBgZmFsc2VgIHNraXBzIG1vZGVsIGRpcnR5IGNoZWNraW5nLCBvdGhlcndpc2VcbiAgICAgICogICB3aWxsIGludm9rZSBgZm5gIHdpdGhpbiB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5ICRhcHBseX0gYmxvY2suXG4gICAgICAqIEBwYXJhbSB7Li4uKj19IFBhc3MgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIHRvIHRoZSBleGVjdXRlZCBmdW5jdGlvbi5cbiAgICAgICogQHJldHVybnMge3Byb21pc2V9IEEgcHJvbWlzZSB3aGljaCB3aWxsIGJlIG5vdGlmaWVkIG9uIGVhY2ggaXRlcmF0aW9uLlxuICAgICAgKlxuICAgICAgKiBAZXhhbXBsZVxuICAgICAgKiA8ZXhhbXBsZSBtb2R1bGU9XCJpbnRlcnZhbEV4YW1wbGVcIj5cbiAgICAgICogPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICogICA8c2NyaXB0PlxuICAgICAgKiAgICAgYW5ndWxhci5tb2R1bGUoJ2ludGVydmFsRXhhbXBsZScsIFtdKVxuICAgICAgKiAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsICckaW50ZXJ2YWwnLFxuICAgICAgKiAgICAgICAgIGZ1bmN0aW9uKCRzY29wZSwgJGludGVydmFsKSB7XG4gICAgICAqICAgICAgICAgICAkc2NvcGUuZm9ybWF0ID0gJ00vZC95eSBoOm1tOnNzIGEnO1xuICAgICAgKiAgICAgICAgICAgJHNjb3BlLmJsb29kXzEgPSAxMDA7XG4gICAgICAqICAgICAgICAgICAkc2NvcGUuYmxvb2RfMiA9IDEyMDtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgIHZhciBzdG9wO1xuICAgICAgKiAgICAgICAgICAgJHNjb3BlLmZpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAqICAgICAgICAgICAgIC8vIERvbid0IHN0YXJ0IGEgbmV3IGZpZ2h0IGlmIHdlIGFyZSBhbHJlYWR5IGZpZ2h0aW5nXG4gICAgICAqICAgICAgICAgICAgIGlmICggYW5ndWxhci5pc0RlZmluZWQoc3RvcCkgKSByZXR1cm47XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICAgIHN0b3AgPSAkaW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAqICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ibG9vZF8xID4gMCAmJiAkc2NvcGUuYmxvb2RfMiA+IDApIHtcbiAgICAgICogICAgICAgICAgICAgICAgICRzY29wZS5ibG9vZF8xID0gJHNjb3BlLmJsb29kXzEgLSAzO1xuICAgICAgKiAgICAgICAgICAgICAgICAgJHNjb3BlLmJsb29kXzIgPSAkc2NvcGUuYmxvb2RfMiAtIDQ7XG4gICAgICAqICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICogICAgICAgICAgICAgICAgICRzY29wZS5zdG9wRmlnaHQoKTtcbiAgICAgICogICAgICAgICAgICAgICB9XG4gICAgICAqICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAqICAgICAgICAgICB9O1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgJHNjb3BlLnN0b3BGaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgICAgKiAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoc3RvcCkpIHtcbiAgICAgICogICAgICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHN0b3ApO1xuICAgICAgKiAgICAgICAgICAgICAgIHN0b3AgPSB1bmRlZmluZWQ7XG4gICAgICAqICAgICAgICAgICAgIH1cbiAgICAgICogICAgICAgICAgIH07XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICAkc2NvcGUucmVzZXRGaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgICAgKiAgICAgICAgICAgICAkc2NvcGUuYmxvb2RfMSA9IDEwMDtcbiAgICAgICogICAgICAgICAgICAgJHNjb3BlLmJsb29kXzIgPSAxMjA7XG4gICAgICAqICAgICAgICAgICB9O1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICogICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIGludGVydmFsIGlzIGRlc3Ryb3llZCB0b29cbiAgICAgICogICAgICAgICAgICAgJHNjb3BlLnN0b3BGaWdodCgpO1xuICAgICAgKiAgICAgICAgICAgfSk7XG4gICAgICAqICAgICAgICAgfV0pXG4gICAgICAqICAgICAgIC8vIFJlZ2lzdGVyIHRoZSAnbXlDdXJyZW50VGltZScgZGlyZWN0aXZlIGZhY3RvcnkgbWV0aG9kLlxuICAgICAgKiAgICAgICAvLyBXZSBpbmplY3QgJGludGVydmFsIGFuZCBkYXRlRmlsdGVyIHNlcnZpY2Ugc2luY2UgdGhlIGZhY3RvcnkgbWV0aG9kIGlzIERJLlxuICAgICAgKiAgICAgICAuZGlyZWN0aXZlKCdteUN1cnJlbnRUaW1lJywgWyckaW50ZXJ2YWwnLCAnZGF0ZUZpbHRlcicsXG4gICAgICAqICAgICAgICAgZnVuY3Rpb24oJGludGVydmFsLCBkYXRlRmlsdGVyKSB7XG4gICAgICAqICAgICAgICAgICAvLyByZXR1cm4gdGhlIGRpcmVjdGl2ZSBsaW5rIGZ1bmN0aW9uLiAoY29tcGlsZSBmdW5jdGlvbiBub3QgbmVlZGVkKVxuICAgICAgKiAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgKiAgICAgICAgICAgICB2YXIgZm9ybWF0LCAgLy8gZGF0ZSBmb3JtYXRcbiAgICAgICogICAgICAgICAgICAgICAgIHN0b3BUaW1lOyAvLyBzbyB0aGF0IHdlIGNhbiBjYW5jZWwgdGhlIHRpbWUgdXBkYXRlc1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgICAvLyB1c2VkIHRvIHVwZGF0ZSB0aGUgVUlcbiAgICAgICogICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlVGltZSgpIHtcbiAgICAgICogICAgICAgICAgICAgICBlbGVtZW50LnRleHQoZGF0ZUZpbHRlcihuZXcgRGF0ZSgpLCBmb3JtYXQpKTtcbiAgICAgICogICAgICAgICAgICAgfVxuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgICAvLyB3YXRjaCB0aGUgZXhwcmVzc2lvbiwgYW5kIHVwZGF0ZSB0aGUgVUkgb24gY2hhbmdlLlxuICAgICAgKiAgICAgICAgICAgICBzY29wZS4kd2F0Y2goYXR0cnMubXlDdXJyZW50VGltZSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICogICAgICAgICAgICAgICBmb3JtYXQgPSB2YWx1ZTtcbiAgICAgICogICAgICAgICAgICAgICB1cGRhdGVUaW1lKCk7XG4gICAgICAqICAgICAgICAgICAgIH0pO1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgICBzdG9wVGltZSA9ICRpbnRlcnZhbCh1cGRhdGVUaW1lLCAxMDAwKTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgLy8gbGlzdGVuIG9uIERPTSBkZXN0cm95IChyZW1vdmFsKSBldmVudCwgYW5kIGNhbmNlbCB0aGUgbmV4dCBVSSB1cGRhdGVcbiAgICAgICogICAgICAgICAgICAgLy8gdG8gcHJldmVudCB1cGRhdGluZyB0aW1lIGFmdGVyIHRoZSBET00gZWxlbWVudCB3YXMgcmVtb3ZlZC5cbiAgICAgICogICAgICAgICAgICAgZWxlbWVudC5vbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICogICAgICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHN0b3BUaW1lKTtcbiAgICAgICogICAgICAgICAgICAgfSk7XG4gICAgICAqICAgICAgICAgICB9XG4gICAgICAqICAgICAgICAgfV0pO1xuICAgICAgKiAgIDwvc2NyaXB0PlxuICAgICAgKlxuICAgICAgKiAgIDxkaXY+XG4gICAgICAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgKiAgICAgICA8bGFiZWw+RGF0ZSBmb3JtYXQ6IDxpbnB1dCBuZy1tb2RlbD1cImZvcm1hdFwiPjwvbGFiZWw+IDxoci8+XG4gICAgICAqICAgICAgIEN1cnJlbnQgdGltZSBpczogPHNwYW4gbXktY3VycmVudC10aW1lPVwiZm9ybWF0XCI+PC9zcGFuPlxuICAgICAgKiAgICAgICA8aHIvPlxuICAgICAgKiAgICAgICBCbG9vZCAxIDogPGZvbnQgY29sb3I9J3JlZCc+e3tibG9vZF8xfX08L2ZvbnQ+XG4gICAgICAqICAgICAgIEJsb29kIDIgOiA8Zm9udCBjb2xvcj0ncmVkJz57e2Jsb29kXzJ9fTwvZm9udD5cbiAgICAgICogICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1uZy1jbGljaz1cImZpZ2h0KClcIj5GaWdodDwvYnV0dG9uPlxuICAgICAgKiAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLW5nLWNsaWNrPVwic3RvcEZpZ2h0KClcIj5TdG9wRmlnaHQ8L2J1dHRvbj5cbiAgICAgICogICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1uZy1jbGljaz1cInJlc2V0RmlnaHQoKVwiPnJlc2V0RmlnaHQ8L2J1dHRvbj5cbiAgICAgICogICAgIDwvZGl2PlxuICAgICAgKiAgIDwvZGl2PlxuICAgICAgKlxuICAgICAgKiA8L2ZpbGU+XG4gICAgICAqIDwvZXhhbXBsZT5cbiAgICAgICovXG4gICAgZnVuY3Rpb24gaW50ZXJ2YWwoZm4sIGRlbGF5LCBjb3VudCwgaW52b2tlQXBwbHkpIHtcbiAgICAgIHZhciBoYXNQYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gNCxcbiAgICAgICAgICBhcmdzID0gaGFzUGFyYW1zID8gc2xpY2VBcmdzKGFyZ3VtZW50cywgNCkgOiBbXSxcbiAgICAgICAgICBzZXRJbnRlcnZhbCA9ICR3aW5kb3cuc2V0SW50ZXJ2YWwsXG4gICAgICAgICAgY2xlYXJJbnRlcnZhbCA9ICR3aW5kb3cuY2xlYXJJbnRlcnZhbCxcbiAgICAgICAgICBpdGVyYXRpb24gPSAwLFxuICAgICAgICAgIHNraXBBcHBseSA9IChpc0RlZmluZWQoaW52b2tlQXBwbHkpICYmICFpbnZva2VBcHBseSksXG4gICAgICAgICAgZGVmZXJyZWQgPSAoc2tpcEFwcGx5ID8gJCRxIDogJHEpLmRlZmVyKCksXG4gICAgICAgICAgcHJvbWlzZSA9IGRlZmVycmVkLnByb21pc2U7XG5cbiAgICAgIGNvdW50ID0gaXNEZWZpbmVkKGNvdW50KSA/IGNvdW50IDogMDtcblxuICAgICAgcHJvbWlzZS50aGVuKG51bGwsIG51bGwsICghaGFzUGFyYW1zKSA/IGZuIDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgfSk7XG5cbiAgICAgIHByb21pc2UuJCRpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gdGljaygpIHtcbiAgICAgICAgZGVmZXJyZWQubm90aWZ5KGl0ZXJhdGlvbisrKTtcblxuICAgICAgICBpZiAoY291bnQgPiAwICYmIGl0ZXJhdGlvbiA+PSBjb3VudCkge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoaXRlcmF0aW9uKTtcbiAgICAgICAgICBjbGVhckludGVydmFsKHByb21pc2UuJCRpbnRlcnZhbElkKTtcbiAgICAgICAgICBkZWxldGUgaW50ZXJ2YWxzW3Byb21pc2UuJCRpbnRlcnZhbElkXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc2tpcEFwcGx5KSAkcm9vdFNjb3BlLiRhcHBseSgpO1xuXG4gICAgICB9LCBkZWxheSk7XG5cbiAgICAgIGludGVydmFsc1twcm9taXNlLiQkaW50ZXJ2YWxJZF0gPSBkZWZlcnJlZDtcblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG5cbiAgICAgLyoqXG4gICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICogQG5hbWUgJGludGVydmFsI2NhbmNlbFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogQ2FuY2VscyBhIHRhc2sgYXNzb2NpYXRlZCB3aXRoIHRoZSBgcHJvbWlzZWAuXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7UHJvbWlzZT19IHByb21pc2UgcmV0dXJuZWQgYnkgdGhlIGAkaW50ZXJ2YWxgIGZ1bmN0aW9uLlxuICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRhc2sgd2FzIHN1Y2Nlc3NmdWxseSBjYW5jZWxlZC5cbiAgICAgICovXG4gICAgaW50ZXJ2YWwuY2FuY2VsID0gZnVuY3Rpb24ocHJvbWlzZSkge1xuICAgICAgaWYgKHByb21pc2UgJiYgcHJvbWlzZS4kJGludGVydmFsSWQgaW4gaW50ZXJ2YWxzKSB7XG4gICAgICAgIGludGVydmFsc1twcm9taXNlLiQkaW50ZXJ2YWxJZF0ucmVqZWN0KCdjYW5jZWxlZCcpO1xuICAgICAgICAkd2luZG93LmNsZWFySW50ZXJ2YWwocHJvbWlzZS4kJGludGVydmFsSWQpO1xuICAgICAgICBkZWxldGUgaW50ZXJ2YWxzW3Byb21pc2UuJCRpbnRlcnZhbElkXTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIHJldHVybiBpbnRlcnZhbDtcbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRsb2NhbGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqICRsb2NhbGUgc2VydmljZSBwcm92aWRlcyBsb2NhbGl6YXRpb24gcnVsZXMgZm9yIHZhcmlvdXMgQW5ndWxhciBjb21wb25lbnRzLiBBcyBvZiByaWdodCBub3cgdGhlXG4gKiBvbmx5IHB1YmxpYyBhcGkgaXM6XG4gKlxuICogKiBgaWRgIOKAkyBge3N0cmluZ31gIOKAkyBsb2NhbGUgaWQgZm9ybWF0dGVkIGFzIGBsYW5ndWFnZUlkLWNvdW50cnlJZGAgKGUuZy4gYGVuLXVzYClcbiAqL1xuXG52YXIgUEFUSF9NQVRDSCA9IC9eKFteXFw/I10qKShcXD8oW14jXSopKT8oIyguKikpPyQvLFxuICAgIERFRkFVTFRfUE9SVFMgPSB7J2h0dHAnOiA4MCwgJ2h0dHBzJzogNDQzLCAnZnRwJzogMjF9O1xudmFyICRsb2NhdGlvbk1pbkVyciA9IG1pbkVycignJGxvY2F0aW9uJyk7XG5cblxuLyoqXG4gKiBFbmNvZGUgcGF0aCB1c2luZyBlbmNvZGVVcmlTZWdtZW50LCBpZ25vcmluZyBmb3J3YXJkIHNsYXNoZXNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHRvIGVuY29kZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy8nKSxcbiAgICAgIGkgPSBzZWdtZW50cy5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHNlZ21lbnRzW2ldID0gZW5jb2RlVXJpU2VnbWVudChzZWdtZW50c1tpXSk7XG4gIH1cblxuICByZXR1cm4gc2VnbWVudHMuam9pbignLycpO1xufVxuXG5mdW5jdGlvbiBwYXJzZUFic29sdXRlVXJsKGFic29sdXRlVXJsLCBsb2NhdGlvbk9iaikge1xuICB2YXIgcGFyc2VkVXJsID0gdXJsUmVzb2x2ZShhYnNvbHV0ZVVybCk7XG5cbiAgbG9jYXRpb25PYmouJCRwcm90b2NvbCA9IHBhcnNlZFVybC5wcm90b2NvbDtcbiAgbG9jYXRpb25PYmouJCRob3N0ID0gcGFyc2VkVXJsLmhvc3RuYW1lO1xuICBsb2NhdGlvbk9iai4kJHBvcnQgPSB0b0ludChwYXJzZWRVcmwucG9ydCkgfHwgREVGQVVMVF9QT1JUU1twYXJzZWRVcmwucHJvdG9jb2xdIHx8IG51bGw7XG59XG5cblxuZnVuY3Rpb24gcGFyc2VBcHBVcmwocmVsYXRpdmVVcmwsIGxvY2F0aW9uT2JqKSB7XG4gIHZhciBwcmVmaXhlZCA9IChyZWxhdGl2ZVVybC5jaGFyQXQoMCkgIT09ICcvJyk7XG4gIGlmIChwcmVmaXhlZCkge1xuICAgIHJlbGF0aXZlVXJsID0gJy8nICsgcmVsYXRpdmVVcmw7XG4gIH1cbiAgdmFyIG1hdGNoID0gdXJsUmVzb2x2ZShyZWxhdGl2ZVVybCk7XG4gIGxvY2F0aW9uT2JqLiQkcGF0aCA9IGRlY29kZVVSSUNvbXBvbmVudChwcmVmaXhlZCAmJiBtYXRjaC5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJyA/XG4gICAgICBtYXRjaC5wYXRobmFtZS5zdWJzdHJpbmcoMSkgOiBtYXRjaC5wYXRobmFtZSk7XG4gIGxvY2F0aW9uT2JqLiQkc2VhcmNoID0gcGFyc2VLZXlWYWx1ZShtYXRjaC5zZWFyY2gpO1xuICBsb2NhdGlvbk9iai4kJGhhc2ggPSBkZWNvZGVVUklDb21wb25lbnQobWF0Y2guaGFzaCk7XG5cbiAgLy8gbWFrZSBzdXJlIHBhdGggc3RhcnRzIHdpdGggJy8nO1xuICBpZiAobG9jYXRpb25PYmouJCRwYXRoICYmIGxvY2F0aW9uT2JqLiQkcGF0aC5jaGFyQXQoMCkgIT0gJy8nKSB7XG4gICAgbG9jYXRpb25PYmouJCRwYXRoID0gJy8nICsgbG9jYXRpb25PYmouJCRwYXRoO1xuICB9XG59XG5cblxuLyoqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJlZ2luXG4gKiBAcGFyYW0ge3N0cmluZ30gd2hvbGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHJldHVybnMgdGV4dCBmcm9tIHdob2xlIGFmdGVyIGJlZ2luIG9yIHVuZGVmaW5lZCBpZiBpdCBkb2VzIG5vdCBiZWdpbiB3aXRoXG4gKiAgICAgICAgICAgICAgICAgICBleHBlY3RlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJlZ2luc1dpdGgoYmVnaW4sIHdob2xlKSB7XG4gIGlmICh3aG9sZS5pbmRleE9mKGJlZ2luKSA9PT0gMCkge1xuICAgIHJldHVybiB3aG9sZS5zdWJzdHIoYmVnaW4ubGVuZ3RoKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGluZGV4ID09IC0xID8gdXJsIDogdXJsLnN1YnN0cigwLCBpbmRleCk7XG59XG5cbmZ1bmN0aW9uIHRyaW1FbXB0eUhhc2godXJsKSB7XG4gIHJldHVybiB1cmwucmVwbGFjZSgvKCMuKyl8IyQvLCAnJDEnKTtcbn1cblxuXG5mdW5jdGlvbiBzdHJpcEZpbGUodXJsKSB7XG4gIHJldHVybiB1cmwuc3Vic3RyKDAsIHN0cmlwSGFzaCh1cmwpLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbn1cblxuLyogcmV0dXJuIHRoZSBzZXJ2ZXIgb25seSAoc2NoZW1lOi8vaG9zdDpwb3J0KSAqL1xuZnVuY3Rpb24gc2VydmVyQmFzZSh1cmwpIHtcbiAgcmV0dXJuIHVybC5zdWJzdHJpbmcoMCwgdXJsLmluZGV4T2YoJy8nLCB1cmwuaW5kZXhPZignLy8nKSArIDIpKTtcbn1cblxuXG4vKipcbiAqIExvY2F0aW9uSHRtbDVVcmwgcmVwcmVzZW50cyBhbiB1cmxcbiAqIFRoaXMgb2JqZWN0IGlzIGV4cG9zZWQgYXMgJGxvY2F0aW9uIHNlcnZpY2Ugd2hlbiBIVE1MNSBtb2RlIGlzIGVuYWJsZWQgYW5kIHN1cHBvcnRlZFxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IGFwcEJhc2UgYXBwbGljYXRpb24gYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBCYXNlTm9GaWxlIGFwcGxpY2F0aW9uIGJhc2UgVVJMIHN0cmlwcGVkIG9mIGFueSBmaWxlbmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VQcmVmaXggdXJsIHBhdGggcHJlZml4XG4gKi9cbmZ1bmN0aW9uIExvY2F0aW9uSHRtbDVVcmwoYXBwQmFzZSwgYXBwQmFzZU5vRmlsZSwgYmFzZVByZWZpeCkge1xuICB0aGlzLiQkaHRtbDUgPSB0cnVlO1xuICBiYXNlUHJlZml4ID0gYmFzZVByZWZpeCB8fCAnJztcbiAgcGFyc2VBYnNvbHV0ZVVybChhcHBCYXNlLCB0aGlzKTtcblxuXG4gIC8qKlxuICAgKiBQYXJzZSBnaXZlbiBodG1sNSAocmVndWxhcikgdXJsIHN0cmluZyBpbnRvIHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBIVE1MNSB1cmxcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuJCRwYXJzZSA9IGZ1bmN0aW9uKHVybCkge1xuICAgIHZhciBwYXRoVXJsID0gYmVnaW5zV2l0aChhcHBCYXNlTm9GaWxlLCB1cmwpO1xuICAgIGlmICghaXNTdHJpbmcocGF0aFVybCkpIHtcbiAgICAgIHRocm93ICRsb2NhdGlvbk1pbkVycignaXB0aHByZngnLCAnSW52YWxpZCB1cmwgXCJ7MH1cIiwgbWlzc2luZyBwYXRoIHByZWZpeCBcInsxfVwiLicsIHVybCxcbiAgICAgICAgICBhcHBCYXNlTm9GaWxlKTtcbiAgICB9XG5cbiAgICBwYXJzZUFwcFVybChwYXRoVXJsLCB0aGlzKTtcblxuICAgIGlmICghdGhpcy4kJHBhdGgpIHtcbiAgICAgIHRoaXMuJCRwYXRoID0gJy8nO1xuICAgIH1cblxuICAgIHRoaXMuJCRjb21wb3NlKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbXBvc2UgdXJsIGFuZCB1cGRhdGUgYGFic1VybGAgcHJvcGVydHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuJCRjb21wb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlYXJjaCA9IHRvS2V5VmFsdWUodGhpcy4kJHNlYXJjaCksXG4gICAgICAgIGhhc2ggPSB0aGlzLiQkaGFzaCA/ICcjJyArIGVuY29kZVVyaVNlZ21lbnQodGhpcy4kJGhhc2gpIDogJyc7XG5cbiAgICB0aGlzLiQkdXJsID0gZW5jb2RlUGF0aCh0aGlzLiQkcGF0aCkgKyAoc2VhcmNoID8gJz8nICsgc2VhcmNoIDogJycpICsgaGFzaDtcbiAgICB0aGlzLiQkYWJzVXJsID0gYXBwQmFzZU5vRmlsZSArIHRoaXMuJCR1cmwuc3Vic3RyKDEpOyAvLyBmaXJzdCBjaGFyIGlzIGFsd2F5cyAnLydcbiAgfTtcblxuICB0aGlzLiQkcGFyc2VMaW5rVXJsID0gZnVuY3Rpb24odXJsLCByZWxIcmVmKSB7XG4gICAgaWYgKHJlbEhyZWYgJiYgcmVsSHJlZlswXSA9PT0gJyMnKSB7XG4gICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIGxpbmtzIHRvIGhhc2ggZnJhZ21lbnRzOlxuICAgICAgLy8ga2VlcCB0aGUgb2xkIHVybCBhbmQgb25seSByZXBsYWNlIHRoZSBoYXNoIGZyYWdtZW50XG4gICAgICB0aGlzLmhhc2gocmVsSHJlZi5zbGljZSgxKSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIGFwcFVybCwgcHJldkFwcFVybDtcbiAgICB2YXIgcmV3cml0dGVuVXJsO1xuXG4gICAgaWYgKGlzRGVmaW5lZChhcHBVcmwgPSBiZWdpbnNXaXRoKGFwcEJhc2UsIHVybCkpKSB7XG4gICAgICBwcmV2QXBwVXJsID0gYXBwVXJsO1xuICAgICAgaWYgKGlzRGVmaW5lZChhcHBVcmwgPSBiZWdpbnNXaXRoKGJhc2VQcmVmaXgsIGFwcFVybCkpKSB7XG4gICAgICAgIHJld3JpdHRlblVybCA9IGFwcEJhc2VOb0ZpbGUgKyAoYmVnaW5zV2l0aCgnLycsIGFwcFVybCkgfHwgYXBwVXJsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJld3JpdHRlblVybCA9IGFwcEJhc2UgKyBwcmV2QXBwVXJsO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNEZWZpbmVkKGFwcFVybCA9IGJlZ2luc1dpdGgoYXBwQmFzZU5vRmlsZSwgdXJsKSkpIHtcbiAgICAgIHJld3JpdHRlblVybCA9IGFwcEJhc2VOb0ZpbGUgKyBhcHBVcmw7XG4gICAgfSBlbHNlIGlmIChhcHBCYXNlTm9GaWxlID09IHVybCArICcvJykge1xuICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZU5vRmlsZTtcbiAgICB9XG4gICAgaWYgKHJld3JpdHRlblVybCkge1xuICAgICAgdGhpcy4kJHBhcnNlKHJld3JpdHRlblVybCk7XG4gICAgfVxuICAgIHJldHVybiAhIXJld3JpdHRlblVybDtcbiAgfTtcbn1cblxuXG4vKipcbiAqIExvY2F0aW9uSGFzaGJhbmdVcmwgcmVwcmVzZW50cyB1cmxcbiAqIFRoaXMgb2JqZWN0IGlzIGV4cG9zZWQgYXMgJGxvY2F0aW9uIHNlcnZpY2Ugd2hlbiBkZXZlbG9wZXIgZG9lc24ndCBvcHQgaW50byBodG1sNSBtb2RlLlxuICogSXQgYWxzbyBzZXJ2ZXMgYXMgdGhlIGJhc2UgY2xhc3MgZm9yIGh0bWw1IG1vZGUgZmFsbGJhY2sgb24gbGVnYWN5IGJyb3dzZXJzLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IGFwcEJhc2UgYXBwbGljYXRpb24gYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBCYXNlTm9GaWxlIGFwcGxpY2F0aW9uIGJhc2UgVVJMIHN0cmlwcGVkIG9mIGFueSBmaWxlbmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IGhhc2hQcmVmaXggaGFzaGJhbmcgcHJlZml4XG4gKi9cbmZ1bmN0aW9uIExvY2F0aW9uSGFzaGJhbmdVcmwoYXBwQmFzZSwgYXBwQmFzZU5vRmlsZSwgaGFzaFByZWZpeCkge1xuXG4gIHBhcnNlQWJzb2x1dGVVcmwoYXBwQmFzZSwgdGhpcyk7XG5cblxuICAvKipcbiAgICogUGFyc2UgZ2l2ZW4gaGFzaGJhbmcgdXJsIGludG8gcHJvcGVydGllc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIEhhc2hiYW5nIHVybFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy4kJHBhcnNlID0gZnVuY3Rpb24odXJsKSB7XG4gICAgdmFyIHdpdGhvdXRCYXNlVXJsID0gYmVnaW5zV2l0aChhcHBCYXNlLCB1cmwpIHx8IGJlZ2luc1dpdGgoYXBwQmFzZU5vRmlsZSwgdXJsKTtcbiAgICB2YXIgd2l0aG91dEhhc2hVcmw7XG5cbiAgICBpZiAoIWlzVW5kZWZpbmVkKHdpdGhvdXRCYXNlVXJsKSAmJiB3aXRob3V0QmFzZVVybC5jaGFyQXQoMCkgPT09ICcjJykge1xuXG4gICAgICAvLyBUaGUgcmVzdCBvZiB0aGUgdXJsIHN0YXJ0cyB3aXRoIGEgaGFzaCBzbyB3ZSBoYXZlXG4gICAgICAvLyBnb3QgZWl0aGVyIGEgaGFzaGJhbmcgcGF0aCBvciBhIHBsYWluIGhhc2ggZnJhZ21lbnRcbiAgICAgIHdpdGhvdXRIYXNoVXJsID0gYmVnaW5zV2l0aChoYXNoUHJlZml4LCB3aXRob3V0QmFzZVVybCk7XG4gICAgICBpZiAoaXNVbmRlZmluZWQod2l0aG91dEhhc2hVcmwpKSB7XG4gICAgICAgIC8vIFRoZXJlIHdhcyBubyBoYXNoYmFuZyBwcmVmaXggc28gd2UganVzdCBoYXZlIGEgaGFzaCBmcmFnbWVudFxuICAgICAgICB3aXRob3V0SGFzaFVybCA9IHdpdGhvdXRCYXNlVXJsO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZXJlIHdhcyBubyBoYXNoYmFuZyBwYXRoIG5vciBoYXNoIGZyYWdtZW50OlxuICAgICAgLy8gSWYgd2UgYXJlIGluIEhUTUw1IG1vZGUgd2UgdXNlIHdoYXQgaXMgbGVmdCBhcyB0aGUgcGF0aDtcbiAgICAgIC8vIE90aGVyd2lzZSB3ZSBpZ25vcmUgd2hhdCBpcyBsZWZ0XG4gICAgICBpZiAodGhpcy4kJGh0bWw1KSB7XG4gICAgICAgIHdpdGhvdXRIYXNoVXJsID0gd2l0aG91dEJhc2VVcmw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aXRob3V0SGFzaFVybCA9ICcnO1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQod2l0aG91dEJhc2VVcmwpKSB7XG4gICAgICAgICAgYXBwQmFzZSA9IHVybDtcbiAgICAgICAgICB0aGlzLnJlcGxhY2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHBhcnNlQXBwVXJsKHdpdGhvdXRIYXNoVXJsLCB0aGlzKTtcblxuICAgIHRoaXMuJCRwYXRoID0gcmVtb3ZlV2luZG93c0RyaXZlTmFtZSh0aGlzLiQkcGF0aCwgd2l0aG91dEhhc2hVcmwsIGFwcEJhc2UpO1xuXG4gICAgdGhpcy4kJGNvbXBvc2UoKTtcblxuICAgIC8qXG4gICAgICogSW4gV2luZG93cywgb24gYW4gYW5jaG9yIG5vZGUgb24gZG9jdW1lbnRzIGxvYWRlZCBmcm9tXG4gICAgICogdGhlIGZpbGVzeXN0ZW0sIHRoZSBicm93c2VyIHdpbGwgcmV0dXJuIGEgcGF0aG5hbWVcbiAgICAgKiBwcmVmaXhlZCB3aXRoIHRoZSBkcml2ZSBuYW1lICgnL0M6L3BhdGgnKSB3aGVuIGFcbiAgICAgKiBwYXRobmFtZSB3aXRob3V0IGEgZHJpdmUgaXMgc2V0OlxuICAgICAqICAqIGEuc2V0QXR0cmlidXRlKCdocmVmJywgJy9mb28nKVxuICAgICAqICAgKiBhLnBhdGhuYW1lID09PSAnL0M6L2ZvbycgLy90cnVlXG4gICAgICpcbiAgICAgKiBJbnNpZGUgb2YgQW5ndWxhciwgd2UncmUgYWx3YXlzIHVzaW5nIHBhdGhuYW1lcyB0aGF0XG4gICAgICogZG8gbm90IGluY2x1ZGUgZHJpdmUgbmFtZXMgZm9yIHJvdXRpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlV2luZG93c0RyaXZlTmFtZShwYXRoLCB1cmwsIGJhc2UpIHtcbiAgICAgIC8qXG4gICAgICBNYXRjaGVzIHBhdGhzIGZvciBmaWxlIHByb3RvY29sIG9uIHdpbmRvd3MsXG4gICAgICBzdWNoIGFzIC9DOi9mb28vYmFyLCBhbmQgY2FwdHVyZXMgb25seSAvZm9vL2Jhci5cbiAgICAgICovXG4gICAgICB2YXIgd2luZG93c0ZpbGVQYXRoRXhwID0gL15cXC9bQS1aXTooXFwvLiopLztcblxuICAgICAgdmFyIGZpcnN0UGF0aFNlZ21lbnRNYXRjaDtcblxuICAgICAgLy9HZXQgdGhlIHJlbGF0aXZlIHBhdGggZnJvbSB0aGUgaW5wdXQgVVJMLlxuICAgICAgaWYgKHVybC5pbmRleE9mKGJhc2UpID09PSAwKSB7XG4gICAgICAgIHVybCA9IHVybC5yZXBsYWNlKGJhc2UsICcnKTtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGlucHV0IFVSTCBpbnRlbnRpb25hbGx5IGNvbnRhaW5zIGEgZmlyc3QgcGF0aCBzZWdtZW50IHRoYXQgZW5kcyB3aXRoIGEgY29sb24uXG4gICAgICBpZiAod2luZG93c0ZpbGVQYXRoRXhwLmV4ZWModXJsKSkge1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgIH1cblxuICAgICAgZmlyc3RQYXRoU2VnbWVudE1hdGNoID0gd2luZG93c0ZpbGVQYXRoRXhwLmV4ZWMocGF0aCk7XG4gICAgICByZXR1cm4gZmlyc3RQYXRoU2VnbWVudE1hdGNoID8gZmlyc3RQYXRoU2VnbWVudE1hdGNoWzFdIDogcGF0aDtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbXBvc2UgaGFzaGJhbmcgdXJsIGFuZCB1cGRhdGUgYGFic1VybGAgcHJvcGVydHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuJCRjb21wb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlYXJjaCA9IHRvS2V5VmFsdWUodGhpcy4kJHNlYXJjaCksXG4gICAgICAgIGhhc2ggPSB0aGlzLiQkaGFzaCA/ICcjJyArIGVuY29kZVVyaVNlZ21lbnQodGhpcy4kJGhhc2gpIDogJyc7XG5cbiAgICB0aGlzLiQkdXJsID0gZW5jb2RlUGF0aCh0aGlzLiQkcGF0aCkgKyAoc2VhcmNoID8gJz8nICsgc2VhcmNoIDogJycpICsgaGFzaDtcbiAgICB0aGlzLiQkYWJzVXJsID0gYXBwQmFzZSArICh0aGlzLiQkdXJsID8gaGFzaFByZWZpeCArIHRoaXMuJCR1cmwgOiAnJyk7XG4gIH07XG5cbiAgdGhpcy4kJHBhcnNlTGlua1VybCA9IGZ1bmN0aW9uKHVybCwgcmVsSHJlZikge1xuICAgIGlmIChzdHJpcEhhc2goYXBwQmFzZSkgPT0gc3RyaXBIYXNoKHVybCkpIHtcbiAgICAgIHRoaXMuJCRwYXJzZSh1cmwpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcbn1cblxuXG4vKipcbiAqIExvY2F0aW9uSGFzaGJhbmdVcmwgcmVwcmVzZW50cyB1cmxcbiAqIFRoaXMgb2JqZWN0IGlzIGV4cG9zZWQgYXMgJGxvY2F0aW9uIHNlcnZpY2Ugd2hlbiBodG1sNSBoaXN0b3J5IGFwaSBpcyBlbmFibGVkIGJ1dCB0aGUgYnJvd3NlclxuICogZG9lcyBub3Qgc3VwcG9ydCBpdC5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBCYXNlIGFwcGxpY2F0aW9uIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZU5vRmlsZSBhcHBsaWNhdGlvbiBiYXNlIFVSTCBzdHJpcHBlZCBvZiBhbnkgZmlsZW5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoUHJlZml4IGhhc2hiYW5nIHByZWZpeFxuICovXG5mdW5jdGlvbiBMb2NhdGlvbkhhc2hiYW5nSW5IdG1sNVVybChhcHBCYXNlLCBhcHBCYXNlTm9GaWxlLCBoYXNoUHJlZml4KSB7XG4gIHRoaXMuJCRodG1sNSA9IHRydWU7XG4gIExvY2F0aW9uSGFzaGJhbmdVcmwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICB0aGlzLiQkcGFyc2VMaW5rVXJsID0gZnVuY3Rpb24odXJsLCByZWxIcmVmKSB7XG4gICAgaWYgKHJlbEhyZWYgJiYgcmVsSHJlZlswXSA9PT0gJyMnKSB7XG4gICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIGxpbmtzIHRvIGhhc2ggZnJhZ21lbnRzOlxuICAgICAgLy8ga2VlcCB0aGUgb2xkIHVybCBhbmQgb25seSByZXBsYWNlIHRoZSBoYXNoIGZyYWdtZW50XG4gICAgICB0aGlzLmhhc2gocmVsSHJlZi5zbGljZSgxKSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgcmV3cml0dGVuVXJsO1xuICAgIHZhciBhcHBVcmw7XG5cbiAgICBpZiAoYXBwQmFzZSA9PSBzdHJpcEhhc2godXJsKSkge1xuICAgICAgcmV3cml0dGVuVXJsID0gdXJsO1xuICAgIH0gZWxzZSBpZiAoKGFwcFVybCA9IGJlZ2luc1dpdGgoYXBwQmFzZU5vRmlsZSwgdXJsKSkpIHtcbiAgICAgIHJld3JpdHRlblVybCA9IGFwcEJhc2UgKyBoYXNoUHJlZml4ICsgYXBwVXJsO1xuICAgIH0gZWxzZSBpZiAoYXBwQmFzZU5vRmlsZSA9PT0gdXJsICsgJy8nKSB7XG4gICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlTm9GaWxlO1xuICAgIH1cbiAgICBpZiAocmV3cml0dGVuVXJsKSB7XG4gICAgICB0aGlzLiQkcGFyc2UocmV3cml0dGVuVXJsKTtcbiAgICB9XG4gICAgcmV0dXJuICEhcmV3cml0dGVuVXJsO1xuICB9O1xuXG4gIHRoaXMuJCRjb21wb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlYXJjaCA9IHRvS2V5VmFsdWUodGhpcy4kJHNlYXJjaCksXG4gICAgICAgIGhhc2ggPSB0aGlzLiQkaGFzaCA/ICcjJyArIGVuY29kZVVyaVNlZ21lbnQodGhpcy4kJGhhc2gpIDogJyc7XG5cbiAgICB0aGlzLiQkdXJsID0gZW5jb2RlUGF0aCh0aGlzLiQkcGF0aCkgKyAoc2VhcmNoID8gJz8nICsgc2VhcmNoIDogJycpICsgaGFzaDtcbiAgICAvLyBpbmNsdWRlIGhhc2hQcmVmaXggaW4gJCRhYnNVcmwgd2hlbiAkJHVybCBpcyBlbXB0eSBzbyBJRTkgZG9lcyBub3QgcmVsb2FkIHBhZ2UgYmVjYXVzZSBvZiByZW1vdmFsIG9mICcjJ1xuICAgIHRoaXMuJCRhYnNVcmwgPSBhcHBCYXNlICsgaGFzaFByZWZpeCArIHRoaXMuJCR1cmw7XG4gIH07XG5cbn1cblxuXG52YXIgbG9jYXRpb25Qcm90b3R5cGUgPSB7XG5cbiAgLyoqXG4gICAqIEFyZSB3ZSBpbiBodG1sNSBtb2RlP1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgJCRodG1sNTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEhhcyBhbnkgY2hhbmdlIGJlZW4gcmVwbGFjaW5nP1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgJCRyZXBsYWNlOiBmYWxzZSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jYWJzVXJsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS5cbiAgICpcbiAgICogUmV0dXJuIGZ1bGwgdXJsIHJlcHJlc2VudGF0aW9uIHdpdGggYWxsIHNlZ21lbnRzIGVuY29kZWQgYWNjb3JkaW5nIHRvIHJ1bGVzIHNwZWNpZmllZCBpblxuICAgKiBbUkZDIDM5ODZdKGh0dHA6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzM5ODYudHh0KS5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gdXJsIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciBhYnNVcmwgPSAkbG9jYXRpb24uYWJzVXJsKCk7XG4gICAqIC8vID0+IFwiaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cIlxuICAgKiBgYGBcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSBmdWxsIHVybFxuICAgKi9cbiAgYWJzVXJsOiBsb2NhdGlvbkdldHRlcignJCRhYnNVcmwnKSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jdXJsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuXG4gICAqXG4gICAqIFJldHVybiB1cmwgKGUuZy4gYC9wYXRoP2E9YiNoYXNoYCkgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBDaGFuZ2UgcGF0aCwgc2VhcmNoIGFuZCBoYXNoLCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBnaXZlbiB1cmwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogdmFyIHVybCA9ICRsb2NhdGlvbi51cmwoKTtcbiAgICogLy8gPT4gXCIvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cIlxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmc9fSB1cmwgTmV3IHVybCB3aXRob3V0IGJhc2UgcHJlZml4IChlLmcuIGAvcGF0aD9hPWIjaGFzaGApXG4gICAqIEByZXR1cm4ge3N0cmluZ30gdXJsXG4gICAqL1xuICB1cmw6IGZ1bmN0aW9uKHVybCkge1xuICAgIGlmIChpc1VuZGVmaW5lZCh1cmwpKSB7XG4gICAgICByZXR1cm4gdGhpcy4kJHVybDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2ggPSBQQVRIX01BVENILmV4ZWModXJsKTtcbiAgICBpZiAobWF0Y2hbMV0gfHwgdXJsID09PSAnJykgdGhpcy5wYXRoKGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFsxXSkpO1xuICAgIGlmIChtYXRjaFsyXSB8fCBtYXRjaFsxXSB8fCB1cmwgPT09ICcnKSB0aGlzLnNlYXJjaChtYXRjaFszXSB8fCAnJyk7XG4gICAgdGhpcy5oYXNoKG1hdGNoWzVdIHx8ICcnKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNwcm90b2NvbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuXG4gICAqXG4gICAqIFJldHVybiBwcm90b2NvbCBvZiBjdXJyZW50IHVybC5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gdXJsIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciBwcm90b2NvbCA9ICRsb2NhdGlvbi5wcm90b2NvbCgpO1xuICAgKiAvLyA9PiBcImh0dHBcIlxuICAgKiBgYGBcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSBwcm90b2NvbCBvZiBjdXJyZW50IHVybFxuICAgKi9cbiAgcHJvdG9jb2w6IGxvY2F0aW9uR2V0dGVyKCckJHByb3RvY29sJyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI2hvc3RcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciBvbmx5LlxuICAgKlxuICAgKiBSZXR1cm4gaG9zdCBvZiBjdXJyZW50IHVybC5cbiAgICpcbiAgICogTm90ZTogY29tcGFyZWQgdG8gdGhlIG5vbi1hbmd1bGFyIHZlcnNpb24gYGxvY2F0aW9uLmhvc3RgIHdoaWNoIHJldHVybnMgYGhvc3RuYW1lOnBvcnRgLCB0aGlzIHJldHVybnMgdGhlIGBob3N0bmFtZWAgcG9ydGlvbiBvbmx5LlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBnaXZlbiB1cmwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogdmFyIGhvc3QgPSAkbG9jYXRpb24uaG9zdCgpO1xuICAgKiAvLyA9PiBcImV4YW1wbGUuY29tXCJcbiAgICpcbiAgICogLy8gZ2l2ZW4gdXJsIGh0dHA6Ly91c2VyOnBhc3N3b3JkQGV4YW1wbGUuY29tOjgwODAvIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiBob3N0ID0gJGxvY2F0aW9uLmhvc3QoKTtcbiAgICogLy8gPT4gXCJleGFtcGxlLmNvbVwiXG4gICAqIGhvc3QgPSBsb2NhdGlvbi5ob3N0O1xuICAgKiAvLyA9PiBcImV4YW1wbGUuY29tOjgwODBcIlxuICAgKiBgYGBcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSBob3N0IG9mIGN1cnJlbnQgdXJsLlxuICAgKi9cbiAgaG9zdDogbG9jYXRpb25HZXR0ZXIoJyQkaG9zdCcpLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNwb3J0XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS5cbiAgICpcbiAgICogUmV0dXJuIHBvcnQgb2YgY3VycmVudCB1cmwuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIHVybCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiB2YXIgcG9ydCA9ICRsb2NhdGlvbi5wb3J0KCk7XG4gICAqIC8vID0+IDgwXG4gICAqIGBgYFxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IHBvcnRcbiAgICovXG4gIHBvcnQ6IGxvY2F0aW9uR2V0dGVyKCckJHBvcnQnKSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jcGF0aFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLlxuICAgKlxuICAgKiBSZXR1cm4gcGF0aCBvZiBjdXJyZW50IHVybCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIENoYW5nZSBwYXRoIHdoZW4gY2FsbGVkIHdpdGggcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuXG4gICAqXG4gICAqIE5vdGU6IFBhdGggc2hvdWxkIGFsd2F5cyBiZWdpbiB3aXRoIGZvcndhcmQgc2xhc2ggKC8pLCB0aGlzIG1ldGhvZCB3aWxsIGFkZCB0aGUgZm9yd2FyZCBzbGFzaFxuICAgKiBpZiBpdCBpcyBtaXNzaW5nLlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBnaXZlbiB1cmwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogdmFyIHBhdGggPSAkbG9jYXRpb24ucGF0aCgpO1xuICAgKiAvLyA9PiBcIi9zb21lL3BhdGhcIlxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcik9fSBwYXRoIE5ldyBwYXRoXG4gICAqIEByZXR1cm4ge3N0cmluZ30gcGF0aFxuICAgKi9cbiAgcGF0aDogbG9jYXRpb25HZXR0ZXJTZXR0ZXIoJyQkcGF0aCcsIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICBwYXRoID0gcGF0aCAhPT0gbnVsbCA/IHBhdGgudG9TdHJpbmcoKSA6ICcnO1xuICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI3NlYXJjaFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLlxuICAgKlxuICAgKiBSZXR1cm4gc2VhcmNoIHBhcnQgKGFzIG9iamVjdCkgb2YgY3VycmVudCB1cmwgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBDaGFuZ2Ugc2VhcmNoIHBhcnQgd2hlbiBjYWxsZWQgd2l0aCBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gdXJsIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciBzZWFyY2hPYmplY3QgPSAkbG9jYXRpb24uc2VhcmNoKCk7XG4gICAqIC8vID0+IHtmb286ICdiYXInLCBiYXo6ICd4b3hvJ31cbiAgICpcbiAgICogLy8gc2V0IGZvbyB0byAneWlwZWUnXG4gICAqICRsb2NhdGlvbi5zZWFyY2goJ2ZvbycsICd5aXBlZScpO1xuICAgKiAvLyAkbG9jYXRpb24uc2VhcmNoKCkgPT4ge2ZvbzogJ3lpcGVlJywgYmF6OiAneG94byd9XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3QuPHN0cmluZz58T2JqZWN0LjxBcnJheS48c3RyaW5nPj59IHNlYXJjaCBOZXcgc2VhcmNoIHBhcmFtcyAtIHN0cmluZyBvclxuICAgKiBoYXNoIG9iamVjdC5cbiAgICpcbiAgICogV2hlbiBjYWxsZWQgd2l0aCBhIHNpbmdsZSBhcmd1bWVudCB0aGUgbWV0aG9kIGFjdHMgYXMgYSBzZXR0ZXIsIHNldHRpbmcgdGhlIGBzZWFyY2hgIGNvbXBvbmVudFxuICAgKiBvZiBgJGxvY2F0aW9uYCB0byB0aGUgc3BlY2lmaWVkIHZhbHVlLlxuICAgKlxuICAgKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBoYXNoIG9iamVjdCBjb250YWluaW5nIGFuIGFycmF5IG9mIHZhbHVlcywgdGhlc2UgdmFsdWVzIHdpbGwgYmUgZW5jb2RlZFxuICAgKiBhcyBkdXBsaWNhdGUgc2VhcmNoIHBhcmFtZXRlcnMgaW4gdGhlIHVybC5cbiAgICpcbiAgICogQHBhcmFtIHsoc3RyaW5nfE51bWJlcnxBcnJheTxzdHJpbmc+fGJvb2xlYW4pPX0gcGFyYW1WYWx1ZSBJZiBgc2VhcmNoYCBpcyBhIHN0cmluZyBvciBudW1iZXIsIHRoZW4gYHBhcmFtVmFsdWVgXG4gICAqIHdpbGwgb3ZlcnJpZGUgb25seSBhIHNpbmdsZSBzZWFyY2ggcHJvcGVydHkuXG4gICAqXG4gICAqIElmIGBwYXJhbVZhbHVlYCBpcyBhbiBhcnJheSwgaXQgd2lsbCBvdmVycmlkZSB0aGUgcHJvcGVydHkgb2YgdGhlIGBzZWFyY2hgIGNvbXBvbmVudCBvZlxuICAgKiBgJGxvY2F0aW9uYCBzcGVjaWZpZWQgdmlhIHRoZSBmaXJzdCBhcmd1bWVudC5cbiAgICpcbiAgICogSWYgYHBhcmFtVmFsdWVgIGlzIGBudWxsYCwgdGhlIHByb3BlcnR5IHNwZWNpZmllZCB2aWEgdGhlIGZpcnN0IGFyZ3VtZW50IHdpbGwgYmUgZGVsZXRlZC5cbiAgICpcbiAgICogSWYgYHBhcmFtVmFsdWVgIGlzIGB0cnVlYCwgdGhlIHByb3BlcnR5IHNwZWNpZmllZCB2aWEgdGhlIGZpcnN0IGFyZ3VtZW50IHdpbGwgYmUgYWRkZWQgd2l0aCBub1xuICAgKiB2YWx1ZSBub3IgdHJhaWxpbmcgZXF1YWwgc2lnbi5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fSBJZiBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHMgcmV0dXJucyB0aGUgcGFyc2VkIGBzZWFyY2hgIG9iamVjdC4gSWYgY2FsbGVkIHdpdGhcbiAgICogb25lIG9yIG1vcmUgYXJndW1lbnRzIHJldHVybnMgYCRsb2NhdGlvbmAgb2JqZWN0IGl0c2VsZi5cbiAgICovXG4gIHNlYXJjaDogZnVuY3Rpb24oc2VhcmNoLCBwYXJhbVZhbHVlKSB7XG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiB0aGlzLiQkc2VhcmNoO1xuICAgICAgY2FzZSAxOlxuICAgICAgICBpZiAoaXNTdHJpbmcoc2VhcmNoKSB8fCBpc051bWJlcihzZWFyY2gpKSB7XG4gICAgICAgICAgc2VhcmNoID0gc2VhcmNoLnRvU3RyaW5nKCk7XG4gICAgICAgICAgdGhpcy4kJHNlYXJjaCA9IHBhcnNlS2V5VmFsdWUoc2VhcmNoKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChzZWFyY2gpKSB7XG4gICAgICAgICAgc2VhcmNoID0gY29weShzZWFyY2gsIHt9KTtcbiAgICAgICAgICAvLyByZW1vdmUgb2JqZWN0IHVuZGVmaW5lZCBvciBudWxsIHByb3BlcnRpZXNcbiAgICAgICAgICBmb3JFYWNoKHNlYXJjaCwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIGRlbGV0ZSBzZWFyY2hba2V5XTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHRoaXMuJCRzZWFyY2ggPSBzZWFyY2g7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgJGxvY2F0aW9uTWluRXJyKCdpc3JjaGFyZycsXG4gICAgICAgICAgICAgICdUaGUgZmlyc3QgYXJndW1lbnQgb2YgdGhlIGAkbG9jYXRpb24jc2VhcmNoKClgIGNhbGwgbXVzdCBiZSBhIHN0cmluZyBvciBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoaXNVbmRlZmluZWQocGFyYW1WYWx1ZSkgfHwgcGFyYW1WYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLiQkc2VhcmNoW3NlYXJjaF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy4kJHNlYXJjaFtzZWFyY2hdID0gcGFyYW1WYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuJCRjb21wb3NlKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI2hhc2hcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci5cbiAgICpcbiAgICogUmV0dXJucyB0aGUgaGFzaCBmcmFnbWVudCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBDaGFuZ2VzIHRoZSBoYXNoIGZyYWdtZW50IHdoZW4gY2FsbGVkIHdpdGggYSBwYXJhbWV0ZXIgYW5kIHJldHVybnMgYCRsb2NhdGlvbmAuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIHVybCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94byNoYXNoVmFsdWVcbiAgICogdmFyIGhhc2ggPSAkbG9jYXRpb24uaGFzaCgpO1xuICAgKiAvLyA9PiBcImhhc2hWYWx1ZVwiXG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyKT19IGhhc2ggTmV3IGhhc2ggZnJhZ21lbnRcbiAgICogQHJldHVybiB7c3RyaW5nfSBoYXNoXG4gICAqL1xuICBoYXNoOiBsb2NhdGlvbkdldHRlclNldHRlcignJCRoYXNoJywgZnVuY3Rpb24oaGFzaCkge1xuICAgIHJldHVybiBoYXNoICE9PSBudWxsID8gaGFzaC50b1N0cmluZygpIDogJyc7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNyZXBsYWNlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBJZiBjYWxsZWQsIGFsbCBjaGFuZ2VzIHRvICRsb2NhdGlvbiBkdXJpbmcgdGhlIGN1cnJlbnQgYCRkaWdlc3RgIHdpbGwgcmVwbGFjZSB0aGUgY3VycmVudCBoaXN0b3J5XG4gICAqIHJlY29yZCwgaW5zdGVhZCBvZiBhZGRpbmcgYSBuZXcgb25lLlxuICAgKi9cbiAgcmVwbGFjZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kJHJlcGxhY2UgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59O1xuXG5mb3JFYWNoKFtMb2NhdGlvbkhhc2hiYW5nSW5IdG1sNVVybCwgTG9jYXRpb25IYXNoYmFuZ1VybCwgTG9jYXRpb25IdG1sNVVybF0sIGZ1bmN0aW9uKExvY2F0aW9uKSB7XG4gIExvY2F0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobG9jYXRpb25Qcm90b3R5cGUpO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNzdGF0ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLlxuICAgKlxuICAgKiBSZXR1cm4gdGhlIGhpc3Rvcnkgc3RhdGUgb2JqZWN0IHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci5cbiAgICpcbiAgICogQ2hhbmdlIHRoZSBoaXN0b3J5IHN0YXRlIG9iamVjdCB3aGVuIGNhbGxlZCB3aXRoIG9uZSBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC5cbiAgICogVGhlIHN0YXRlIG9iamVjdCBpcyBsYXRlciBwYXNzZWQgdG8gYHB1c2hTdGF0ZWAgb3IgYHJlcGxhY2VTdGF0ZWAuXG4gICAqXG4gICAqIE5PVEU6IFRoaXMgbWV0aG9kIGlzIHN1cHBvcnRlZCBvbmx5IGluIEhUTUw1IG1vZGUgYW5kIG9ubHkgaW4gYnJvd3NlcnMgc3VwcG9ydGluZ1xuICAgKiB0aGUgSFRNTDUgSGlzdG9yeSBBUEkgKGkuZS4gbWV0aG9kcyBgcHVzaFN0YXRlYCBhbmQgYHJlcGxhY2VTdGF0ZWApLiBJZiB5b3UgbmVlZCB0byBzdXBwb3J0XG4gICAqIG9sZGVyIGJyb3dzZXJzIChsaWtlIElFOSBvciBBbmRyb2lkIDwgNC4wKSwgZG9uJ3QgdXNlIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdD19IHN0YXRlIFN0YXRlIG9iamVjdCBmb3IgcHVzaFN0YXRlIG9yIHJlcGxhY2VTdGF0ZVxuICAgKiBAcmV0dXJuIHtvYmplY3R9IHN0YXRlXG4gICAqL1xuICBMb2NhdGlvbi5wcm90b3R5cGUuc3RhdGUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuJCRzdGF0ZTtcbiAgICB9XG5cbiAgICBpZiAoTG9jYXRpb24gIT09IExvY2F0aW9uSHRtbDVVcmwgfHwgIXRoaXMuJCRodG1sNSkge1xuICAgICAgdGhyb3cgJGxvY2F0aW9uTWluRXJyKCdub3N0YXRlJywgJ0hpc3RvcnkgQVBJIHN0YXRlIHN1cHBvcnQgaXMgYXZhaWxhYmxlIG9ubHkgJyArXG4gICAgICAgICdpbiBIVE1MNSBtb2RlIGFuZCBvbmx5IGluIGJyb3dzZXJzIHN1cHBvcnRpbmcgSFRNTDUgSGlzdG9yeSBBUEknKTtcbiAgICB9XG4gICAgLy8gVGhlIHVzZXIgbWlnaHQgbW9kaWZ5IGBzdGF0ZU9iamVjdGAgYWZ0ZXIgaW52b2tpbmcgYCRsb2NhdGlvbi5zdGF0ZShzdGF0ZU9iamVjdClgXG4gICAgLy8gYnV0IHdlJ3JlIGNoYW5naW5nIHRoZSAkJHN0YXRlIHJlZmVyZW5jZSB0byAkYnJvd3Nlci5zdGF0ZSgpIGR1cmluZyB0aGUgJGRpZ2VzdFxuICAgIC8vIHNvIHRoZSBtb2RpZmljYXRpb24gd2luZG93IGlzIG5hcnJvdy5cbiAgICB0aGlzLiQkc3RhdGUgPSBpc1VuZGVmaW5lZChzdGF0ZSkgPyBudWxsIDogc3RhdGU7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbn0pO1xuXG5cbmZ1bmN0aW9uIGxvY2F0aW9uR2V0dGVyKHByb3BlcnR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpc1twcm9wZXJ0eV07XG4gIH07XG59XG5cblxuZnVuY3Rpb24gbG9jYXRpb25HZXR0ZXJTZXR0ZXIocHJvcGVydHksIHByZXByb2Nlc3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRoaXNbcHJvcGVydHldO1xuICAgIH1cblxuICAgIHRoaXNbcHJvcGVydHldID0gcHJlcHJvY2Vzcyh2YWx1ZSk7XG4gICAgdGhpcy4kJGNvbXBvc2UoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xufVxuXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRsb2NhdGlvblxuICpcbiAqIEByZXF1aXJlcyAkcm9vdEVsZW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSAkbG9jYXRpb24gc2VydmljZSBwYXJzZXMgdGhlIFVSTCBpbiB0aGUgYnJvd3NlciBhZGRyZXNzIGJhciAoYmFzZWQgb24gdGhlXG4gKiBbd2luZG93LmxvY2F0aW9uXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi93aW5kb3cubG9jYXRpb24pKSBhbmQgbWFrZXMgdGhlIFVSTFxuICogYXZhaWxhYmxlIHRvIHlvdXIgYXBwbGljYXRpb24uIENoYW5nZXMgdG8gdGhlIFVSTCBpbiB0aGUgYWRkcmVzcyBiYXIgYXJlIHJlZmxlY3RlZCBpbnRvXG4gKiAkbG9jYXRpb24gc2VydmljZSBhbmQgY2hhbmdlcyB0byAkbG9jYXRpb24gYXJlIHJlZmxlY3RlZCBpbnRvIHRoZSBicm93c2VyIGFkZHJlc3MgYmFyLlxuICpcbiAqICoqVGhlICRsb2NhdGlvbiBzZXJ2aWNlOioqXG4gKlxuICogLSBFeHBvc2VzIHRoZSBjdXJyZW50IFVSTCBpbiB0aGUgYnJvd3NlciBhZGRyZXNzIGJhciwgc28geW91IGNhblxuICogICAtIFdhdGNoIGFuZCBvYnNlcnZlIHRoZSBVUkwuXG4gKiAgIC0gQ2hhbmdlIHRoZSBVUkwuXG4gKiAtIFN5bmNocm9uaXplcyB0aGUgVVJMIHdpdGggdGhlIGJyb3dzZXIgd2hlbiB0aGUgdXNlclxuICogICAtIENoYW5nZXMgdGhlIGFkZHJlc3MgYmFyLlxuICogICAtIENsaWNrcyB0aGUgYmFjayBvciBmb3J3YXJkIGJ1dHRvbiAob3IgY2xpY2tzIGEgSGlzdG9yeSBsaW5rKS5cbiAqICAgLSBDbGlja3Mgb24gYSBsaW5rLlxuICogLSBSZXByZXNlbnRzIHRoZSBVUkwgb2JqZWN0IGFzIGEgc2V0IG9mIG1ldGhvZHMgKHByb3RvY29sLCBob3N0LCBwb3J0LCBwYXRoLCBzZWFyY2gsIGhhc2gpLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSB7QGxpbmsgZ3VpZGUvJGxvY2F0aW9uIERldmVsb3BlciBHdWlkZTogVXNpbmcgJGxvY2F0aW9ufVxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkbG9jYXRpb25Qcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2UgdGhlIGAkbG9jYXRpb25Qcm92aWRlcmAgdG8gY29uZmlndXJlIGhvdyB0aGUgYXBwbGljYXRpb24gZGVlcCBsaW5raW5nIHBhdGhzIGFyZSBzdG9yZWQuXG4gKi9cbmZ1bmN0aW9uICRMb2NhdGlvblByb3ZpZGVyKCkge1xuICB2YXIgaGFzaFByZWZpeCA9ICcnLFxuICAgICAgaHRtbDVNb2RlID0ge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgcmVxdWlyZUJhc2U6IHRydWUsXG4gICAgICAgIHJld3JpdGVMaW5rczogdHJ1ZVxuICAgICAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb25Qcm92aWRlciNoYXNoUHJlZml4XG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZz19IHByZWZpeCBQcmVmaXggZm9yIGhhc2ggcGFydCAoY29udGFpbmluZyBwYXRoIGFuZCBzZWFyY2gpXG4gICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAqL1xuICB0aGlzLmhhc2hQcmVmaXggPSBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHByZWZpeCkpIHtcbiAgICAgIGhhc2hQcmVmaXggPSBwcmVmaXg7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGhhc2hQcmVmaXg7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvblByb3ZpZGVyI2h0bWw1TW9kZVxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQHBhcmFtIHsoYm9vbGVhbnxPYmplY3QpPX0gbW9kZSBJZiBib29sZWFuLCBzZXRzIGBodG1sNU1vZGUuZW5hYmxlZGAgdG8gdmFsdWUuXG4gICAqICAgSWYgb2JqZWN0LCBzZXRzIGBlbmFibGVkYCwgYHJlcXVpcmVCYXNlYCBhbmQgYHJld3JpdGVMaW5rc2AgdG8gcmVzcGVjdGl2ZSB2YWx1ZXMuIFN1cHBvcnRlZFxuICAgKiAgIHByb3BlcnRpZXM6XG4gICAqICAgLSAqKmVuYWJsZWQqKiDigJMgYHtib29sZWFufWAg4oCTIChkZWZhdWx0OiBmYWxzZSkgSWYgdHJ1ZSwgd2lsbCByZWx5IG9uIGBoaXN0b3J5LnB1c2hTdGF0ZWAgdG9cbiAgICogICAgIGNoYW5nZSB1cmxzIHdoZXJlIHN1cHBvcnRlZC4gV2lsbCBmYWxsIGJhY2sgdG8gaGFzaC1wcmVmaXhlZCBwYXRocyBpbiBicm93c2VycyB0aGF0IGRvIG5vdFxuICAgKiAgICAgc3VwcG9ydCBgcHVzaFN0YXRlYC5cbiAgICogICAtICoqcmVxdWlyZUJhc2UqKiAtIGB7Ym9vbGVhbn1gIC0gKGRlZmF1bHQ6IGB0cnVlYCkgV2hlbiBodG1sNU1vZGUgaXMgZW5hYmxlZCwgc3BlY2lmaWVzXG4gICAqICAgICB3aGV0aGVyIG9yIG5vdCBhIDxiYXNlPiB0YWcgaXMgcmVxdWlyZWQgdG8gYmUgcHJlc2VudC4gSWYgYGVuYWJsZWRgIGFuZCBgcmVxdWlyZUJhc2VgIGFyZVxuICAgKiAgICAgdHJ1ZSwgYW5kIGEgYmFzZSB0YWcgaXMgbm90IHByZXNlbnQsIGFuIGVycm9yIHdpbGwgYmUgdGhyb3duIHdoZW4gYCRsb2NhdGlvbmAgaXMgaW5qZWN0ZWQuXG4gICAqICAgICBTZWUgdGhlIHtAbGluayBndWlkZS8kbG9jYXRpb24gJGxvY2F0aW9uIGd1aWRlIGZvciBtb3JlIGluZm9ybWF0aW9ufVxuICAgKiAgIC0gKipyZXdyaXRlTGlua3MqKiAtIGB7Ym9vbGVhbn1gIC0gKGRlZmF1bHQ6IGB0cnVlYCkgV2hlbiBodG1sNU1vZGUgaXMgZW5hYmxlZCxcbiAgICogICAgIGVuYWJsZXMvZGlzYWJsZXMgdXJsIHJld3JpdGluZyBmb3IgcmVsYXRpdmUgbGlua3MuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IGh0bWw1TW9kZSBvYmplY3QgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXJcbiAgICovXG4gIHRoaXMuaHRtbDVNb2RlID0gZnVuY3Rpb24obW9kZSkge1xuICAgIGlmIChpc0Jvb2xlYW4obW9kZSkpIHtcbiAgICAgIGh0bWw1TW9kZS5lbmFibGVkID0gbW9kZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QobW9kZSkpIHtcblxuICAgICAgaWYgKGlzQm9vbGVhbihtb2RlLmVuYWJsZWQpKSB7XG4gICAgICAgIGh0bWw1TW9kZS5lbmFibGVkID0gbW9kZS5lbmFibGVkO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNCb29sZWFuKG1vZGUucmVxdWlyZUJhc2UpKSB7XG4gICAgICAgIGh0bWw1TW9kZS5yZXF1aXJlQmFzZSA9IG1vZGUucmVxdWlyZUJhc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Jvb2xlYW4obW9kZS5yZXdyaXRlTGlua3MpKSB7XG4gICAgICAgIGh0bWw1TW9kZS5yZXdyaXRlTGlua3MgPSBtb2RlLnJld3JpdGVMaW5rcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBodG1sNU1vZGU7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZXZlbnRcbiAgICogQG5hbWUgJGxvY2F0aW9uIyRsb2NhdGlvbkNoYW5nZVN0YXJ0XG4gICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHJvb3Qgc2NvcGVcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEJyb2FkY2FzdGVkIGJlZm9yZSBhIFVSTCB3aWxsIGNoYW5nZS5cbiAgICpcbiAgICogVGhpcyBjaGFuZ2UgY2FuIGJlIHByZXZlbnRlZCBieSBjYWxsaW5nXG4gICAqIGBwcmV2ZW50RGVmYXVsdGAgbWV0aG9kIG9mIHRoZSBldmVudC4gU2VlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn0gZm9yIG1vcmVcbiAgICogZGV0YWlscyBhYm91dCBldmVudCBvYmplY3QuIFVwb24gc3VjY2Vzc2Z1bCBjaGFuZ2VcbiAgICoge0BsaW5rIG5nLiRsb2NhdGlvbiMkbG9jYXRpb25DaGFuZ2VTdWNjZXNzICRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3N9IGlzIGZpcmVkLlxuICAgKlxuICAgKiBUaGUgYG5ld1N0YXRlYCBhbmQgYG9sZFN0YXRlYCBwYXJhbWV0ZXJzIG1heSBiZSBkZWZpbmVkIG9ubHkgaW4gSFRNTDUgbW9kZSBhbmQgd2hlblxuICAgKiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGUgSFRNTDUgSGlzdG9yeSBBUEkuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhbmd1bGFyRXZlbnQgU3ludGhldGljIGV2ZW50IG9iamVjdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld1VybCBOZXcgVVJMXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb2xkVXJsIFVSTCB0aGF0IHdhcyBiZWZvcmUgaXQgd2FzIGNoYW5nZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmV3U3RhdGUgTmV3IGhpc3Rvcnkgc3RhdGUgb2JqZWN0XG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb2xkU3RhdGUgSGlzdG9yeSBzdGF0ZSBvYmplY3QgdGhhdCB3YXMgYmVmb3JlIGl0IHdhcyBjaGFuZ2VkLlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIGV2ZW50XG4gICAqIEBuYW1lICRsb2NhdGlvbiMkbG9jYXRpb25DaGFuZ2VTdWNjZXNzXG4gICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHJvb3Qgc2NvcGVcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEJyb2FkY2FzdGVkIGFmdGVyIGEgVVJMIHdhcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBUaGUgYG5ld1N0YXRlYCBhbmQgYG9sZFN0YXRlYCBwYXJhbWV0ZXJzIG1heSBiZSBkZWZpbmVkIG9ubHkgaW4gSFRNTDUgbW9kZSBhbmQgd2hlblxuICAgKiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGUgSFRNTDUgSGlzdG9yeSBBUEkuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhbmd1bGFyRXZlbnQgU3ludGhldGljIGV2ZW50IG9iamVjdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld1VybCBOZXcgVVJMXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb2xkVXJsIFVSTCB0aGF0IHdhcyBiZWZvcmUgaXQgd2FzIGNoYW5nZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmV3U3RhdGUgTmV3IGhpc3Rvcnkgc3RhdGUgb2JqZWN0XG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb2xkU3RhdGUgSGlzdG9yeSBzdGF0ZSBvYmplY3QgdGhhdCB3YXMgYmVmb3JlIGl0IHdhcyBjaGFuZ2VkLlxuICAgKi9cblxuICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGJyb3dzZXInLCAnJHNuaWZmZXInLCAnJHJvb3RFbGVtZW50JywgJyR3aW5kb3cnLFxuICAgICAgZnVuY3Rpb24oJHJvb3RTY29wZSwgJGJyb3dzZXIsICRzbmlmZmVyLCAkcm9vdEVsZW1lbnQsICR3aW5kb3cpIHtcbiAgICB2YXIgJGxvY2F0aW9uLFxuICAgICAgICBMb2NhdGlvbk1vZGUsXG4gICAgICAgIGJhc2VIcmVmID0gJGJyb3dzZXIuYmFzZUhyZWYoKSwgLy8gaWYgYmFzZVtocmVmXSBpcyB1bmRlZmluZWQsIGl0IGRlZmF1bHRzIHRvICcnXG4gICAgICAgIGluaXRpYWxVcmwgPSAkYnJvd3Nlci51cmwoKSxcbiAgICAgICAgYXBwQmFzZTtcblxuICAgIGlmIChodG1sNU1vZGUuZW5hYmxlZCkge1xuICAgICAgaWYgKCFiYXNlSHJlZiAmJiBodG1sNU1vZGUucmVxdWlyZUJhc2UpIHtcbiAgICAgICAgdGhyb3cgJGxvY2F0aW9uTWluRXJyKCdub2Jhc2UnLFxuICAgICAgICAgIFwiJGxvY2F0aW9uIGluIEhUTUw1IG1vZGUgcmVxdWlyZXMgYSA8YmFzZT4gdGFnIHRvIGJlIHByZXNlbnQhXCIpO1xuICAgICAgfVxuICAgICAgYXBwQmFzZSA9IHNlcnZlckJhc2UoaW5pdGlhbFVybCkgKyAoYmFzZUhyZWYgfHwgJy8nKTtcbiAgICAgIExvY2F0aW9uTW9kZSA9ICRzbmlmZmVyLmhpc3RvcnkgPyBMb2NhdGlvbkh0bWw1VXJsIDogTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwcEJhc2UgPSBzdHJpcEhhc2goaW5pdGlhbFVybCk7XG4gICAgICBMb2NhdGlvbk1vZGUgPSBMb2NhdGlvbkhhc2hiYW5nVXJsO1xuICAgIH1cbiAgICB2YXIgYXBwQmFzZU5vRmlsZSA9IHN0cmlwRmlsZShhcHBCYXNlKTtcblxuICAgICRsb2NhdGlvbiA9IG5ldyBMb2NhdGlvbk1vZGUoYXBwQmFzZSwgYXBwQmFzZU5vRmlsZSwgJyMnICsgaGFzaFByZWZpeCk7XG4gICAgJGxvY2F0aW9uLiQkcGFyc2VMaW5rVXJsKGluaXRpYWxVcmwsIGluaXRpYWxVcmwpO1xuXG4gICAgJGxvY2F0aW9uLiQkc3RhdGUgPSAkYnJvd3Nlci5zdGF0ZSgpO1xuXG4gICAgdmFyIElHTk9SRV9VUklfUkVHRVhQID0gL15cXHMqKGphdmFzY3JpcHR8bWFpbHRvKTovaTtcblxuICAgIGZ1bmN0aW9uIHNldEJyb3dzZXJVcmxXaXRoRmFsbGJhY2sodXJsLCByZXBsYWNlLCBzdGF0ZSkge1xuICAgICAgdmFyIG9sZFVybCA9ICRsb2NhdGlvbi51cmwoKTtcbiAgICAgIHZhciBvbGRTdGF0ZSA9ICRsb2NhdGlvbi4kJHN0YXRlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgJGJyb3dzZXIudXJsKHVybCwgcmVwbGFjZSwgc3RhdGUpO1xuXG4gICAgICAgIC8vIE1ha2Ugc3VyZSAkbG9jYXRpb24uc3RhdGUoKSByZXR1cm5zIHJlZmVyZW50aWFsbHkgaWRlbnRpY2FsIChub3QganVzdCBkZWVwbHkgZXF1YWwpXG4gICAgICAgIC8vIHN0YXRlIG9iamVjdDsgdGhpcyBtYWtlcyBwb3NzaWJsZSBxdWljayBjaGVja2luZyBpZiB0aGUgc3RhdGUgY2hhbmdlZCBpbiB0aGUgZGlnZXN0XG4gICAgICAgIC8vIGxvb3AuIENoZWNraW5nIGRlZXAgZXF1YWxpdHkgd291bGQgYmUgdG9vIGV4cGVuc2l2ZS5cbiAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUgPSAkYnJvd3Nlci5zdGF0ZSgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBSZXN0b3JlIG9sZCB2YWx1ZXMgaWYgcHVzaFN0YXRlIGZhaWxzXG4gICAgICAgICRsb2NhdGlvbi51cmwob2xkVXJsKTtcbiAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUgPSBvbGRTdGF0ZTtcblxuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cblxuICAgICRyb290RWxlbWVudC5vbignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgLy8gVE9ETyh2b2p0YSk6IHJld3JpdGUgbGluayB3aGVuIG9wZW5pbmcgaW4gbmV3IHRhYi93aW5kb3cgKGluIGxlZ2FjeSBicm93c2VyKVxuICAgICAgLy8gY3VycmVudGx5IHdlIG9wZW4gbmljZSB1cmwgbGluayBhbmQgcmVkaXJlY3QgdGhlblxuXG4gICAgICBpZiAoIWh0bWw1TW9kZS5yZXdyaXRlTGlua3MgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LnNoaWZ0S2V5IHx8IGV2ZW50LndoaWNoID09IDIgfHwgZXZlbnQuYnV0dG9uID09IDIpIHJldHVybjtcblxuICAgICAgdmFyIGVsbSA9IGpxTGl0ZShldmVudC50YXJnZXQpO1xuXG4gICAgICAvLyB0cmF2ZXJzZSB0aGUgRE9NIHVwIHRvIGZpbmQgZmlyc3QgQSB0YWdcbiAgICAgIHdoaWxlIChub2RlTmFtZV8oZWxtWzBdKSAhPT0gJ2EnKSB7XG4gICAgICAgIC8vIGlnbm9yZSByZXdyaXRpbmcgaWYgbm8gQSB0YWcgKHJlYWNoZWQgcm9vdCBlbGVtZW50LCBvciBubyBwYXJlbnQgLSByZW1vdmVkIGZyb20gZG9jdW1lbnQpXG4gICAgICAgIGlmIChlbG1bMF0gPT09ICRyb290RWxlbWVudFswXSB8fCAhKGVsbSA9IGVsbS5wYXJlbnQoKSlbMF0pIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGFic0hyZWYgPSBlbG0ucHJvcCgnaHJlZicpO1xuICAgICAgLy8gZ2V0IHRoZSBhY3R1YWwgaHJlZiBhdHRyaWJ1dGUgLSBzZWVcbiAgICAgIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kZDM0NzE0OCh2PXZzLjg1KS5hc3B4XG4gICAgICB2YXIgcmVsSHJlZiA9IGVsbS5hdHRyKCdocmVmJykgfHwgZWxtLmF0dHIoJ3hsaW5rOmhyZWYnKTtcblxuICAgICAgaWYgKGlzT2JqZWN0KGFic0hyZWYpICYmIGFic0hyZWYudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgU1ZHQW5pbWF0ZWRTdHJpbmddJykge1xuICAgICAgICAvLyBTVkdBbmltYXRlZFN0cmluZy5hbmltVmFsIHNob3VsZCBiZSBpZGVudGljYWwgdG8gU1ZHQW5pbWF0ZWRTdHJpbmcuYmFzZVZhbCwgdW5sZXNzIGR1cmluZ1xuICAgICAgICAvLyBhbiBhbmltYXRpb24uXG4gICAgICAgIGFic0hyZWYgPSB1cmxSZXNvbHZlKGFic0hyZWYuYW5pbVZhbCkuaHJlZjtcbiAgICAgIH1cblxuICAgICAgLy8gSWdub3JlIHdoZW4gdXJsIGlzIHN0YXJ0ZWQgd2l0aCBqYXZhc2NyaXB0OiBvciBtYWlsdG86XG4gICAgICBpZiAoSUdOT1JFX1VSSV9SRUdFWFAudGVzdChhYnNIcmVmKSkgcmV0dXJuO1xuXG4gICAgICBpZiAoYWJzSHJlZiAmJiAhZWxtLmF0dHIoJ3RhcmdldCcpICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICBpZiAoJGxvY2F0aW9uLiQkcGFyc2VMaW5rVXJsKGFic0hyZWYsIHJlbEhyZWYpKSB7XG4gICAgICAgICAgLy8gV2UgZG8gYSBwcmV2ZW50RGVmYXVsdCBmb3IgYWxsIHVybHMgdGhhdCBhcmUgcGFydCBvZiB0aGUgYW5ndWxhciBhcHBsaWNhdGlvbixcbiAgICAgICAgICAvLyBpbiBodG1sNW1vZGUgYW5kIGFsc28gd2l0aG91dCwgc28gdGhhdCB3ZSBhcmUgYWJsZSB0byBhYm9ydCBuYXZpZ2F0aW9uIHdpdGhvdXRcbiAgICAgICAgICAvLyBnZXR0aW5nIGRvdWJsZSBlbnRyaWVzIGluIHRoZSBsb2NhdGlvbiBoaXN0b3J5LlxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgLy8gdXBkYXRlIGxvY2F0aW9uIG1hbnVhbGx5XG4gICAgICAgICAgaWYgKCRsb2NhdGlvbi5hYnNVcmwoKSAhPSAkYnJvd3Nlci51cmwoKSkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgIC8vIGhhY2sgdG8gd29yayBhcm91bmQgRkY2IGJ1ZyA2ODQyMDggd2hlbiBzY2VuYXJpbyBydW5uZXIgY2xpY2tzIG9uIGxpbmtzXG4gICAgICAgICAgICAkd2luZG93LmFuZ3VsYXJbJ2ZmLTY4NDIwOC1wcmV2ZW50RGVmYXVsdCddID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuXG4gICAgLy8gcmV3cml0ZSBoYXNoYmFuZyB1cmwgPD4gaHRtbDUgdXJsXG4gICAgaWYgKHRyaW1FbXB0eUhhc2goJGxvY2F0aW9uLmFic1VybCgpKSAhPSB0cmltRW1wdHlIYXNoKGluaXRpYWxVcmwpKSB7XG4gICAgICAkYnJvd3Nlci51cmwoJGxvY2F0aW9uLmFic1VybCgpLCB0cnVlKTtcbiAgICB9XG5cbiAgICB2YXIgaW5pdGlhbGl6aW5nID0gdHJ1ZTtcblxuICAgIC8vIHVwZGF0ZSAkbG9jYXRpb24gd2hlbiAkYnJvd3NlciB1cmwgY2hhbmdlc1xuICAgICRicm93c2VyLm9uVXJsQ2hhbmdlKGZ1bmN0aW9uKG5ld1VybCwgbmV3U3RhdGUpIHtcblxuICAgICAgaWYgKGlzVW5kZWZpbmVkKGJlZ2luc1dpdGgoYXBwQmFzZU5vRmlsZSwgbmV3VXJsKSkpIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlIG5hdmlnYXRpbmcgb3V0c2lkZSBvZiB0aGUgYXBwIHRoZW4gZm9yY2UgYSByZWxvYWRcbiAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gbmV3VXJsO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICRyb290U2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9sZFVybCA9ICRsb2NhdGlvbi5hYnNVcmwoKTtcbiAgICAgICAgdmFyIG9sZFN0YXRlID0gJGxvY2F0aW9uLiQkc3RhdGU7XG4gICAgICAgIHZhciBkZWZhdWx0UHJldmVudGVkO1xuICAgICAgICBuZXdVcmwgPSB0cmltRW1wdHlIYXNoKG5ld1VybCk7XG4gICAgICAgICRsb2NhdGlvbi4kJHBhcnNlKG5ld1VybCk7XG4gICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gbmV3U3RhdGU7XG5cbiAgICAgICAgZGVmYXVsdFByZXZlbnRlZCA9ICRyb290U2NvcGUuJGJyb2FkY2FzdCgnJGxvY2F0aW9uQ2hhbmdlU3RhcnQnLCBuZXdVcmwsIG9sZFVybCxcbiAgICAgICAgICAgIG5ld1N0YXRlLCBvbGRTdGF0ZSkuZGVmYXVsdFByZXZlbnRlZDtcblxuICAgICAgICAvLyBpZiB0aGUgbG9jYXRpb24gd2FzIGNoYW5nZWQgYnkgYSBgJGxvY2F0aW9uQ2hhbmdlU3RhcnRgIGhhbmRsZXIgdGhlbiBzdG9wXG4gICAgICAgIC8vIHByb2Nlc3NpbmcgdGhpcyBsb2NhdGlvbiBjaGFuZ2VcbiAgICAgICAgaWYgKCRsb2NhdGlvbi5hYnNVcmwoKSAhPT0gbmV3VXJsKSByZXR1cm47XG5cbiAgICAgICAgaWYgKGRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAkbG9jYXRpb24uJCRwYXJzZShvbGRVcmwpO1xuICAgICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gb2xkU3RhdGU7XG4gICAgICAgICAgc2V0QnJvd3NlclVybFdpdGhGYWxsYmFjayhvbGRVcmwsIGZhbHNlLCBvbGRTdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5pdGlhbGl6aW5nID0gZmFsc2U7XG4gICAgICAgICAgYWZ0ZXJMb2NhdGlvbkNoYW5nZShvbGRVcmwsIG9sZFN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoISRyb290U2NvcGUuJCRwaGFzZSkgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgYnJvd3NlclxuICAgICRyb290U2NvcGUuJHdhdGNoKGZ1bmN0aW9uICRsb2NhdGlvbldhdGNoKCkge1xuICAgICAgdmFyIG9sZFVybCA9IHRyaW1FbXB0eUhhc2goJGJyb3dzZXIudXJsKCkpO1xuICAgICAgdmFyIG5ld1VybCA9IHRyaW1FbXB0eUhhc2goJGxvY2F0aW9uLmFic1VybCgpKTtcbiAgICAgIHZhciBvbGRTdGF0ZSA9ICRicm93c2VyLnN0YXRlKCk7XG4gICAgICB2YXIgY3VycmVudFJlcGxhY2UgPSAkbG9jYXRpb24uJCRyZXBsYWNlO1xuICAgICAgdmFyIHVybE9yU3RhdGVDaGFuZ2VkID0gb2xkVXJsICE9PSBuZXdVcmwgfHxcbiAgICAgICAgKCRsb2NhdGlvbi4kJGh0bWw1ICYmICRzbmlmZmVyLmhpc3RvcnkgJiYgb2xkU3RhdGUgIT09ICRsb2NhdGlvbi4kJHN0YXRlKTtcblxuICAgICAgaWYgKGluaXRpYWxpemluZyB8fCB1cmxPclN0YXRlQ2hhbmdlZCkge1xuICAgICAgICBpbml0aWFsaXppbmcgPSBmYWxzZTtcblxuICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIG5ld1VybCA9ICRsb2NhdGlvbi5hYnNVcmwoKTtcbiAgICAgICAgICB2YXIgZGVmYXVsdFByZXZlbnRlZCA9ICRyb290U2NvcGUuJGJyb2FkY2FzdCgnJGxvY2F0aW9uQ2hhbmdlU3RhcnQnLCBuZXdVcmwsIG9sZFVybCxcbiAgICAgICAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUsIG9sZFN0YXRlKS5kZWZhdWx0UHJldmVudGVkO1xuXG4gICAgICAgICAgLy8gaWYgdGhlIGxvY2F0aW9uIHdhcyBjaGFuZ2VkIGJ5IGEgYCRsb2NhdGlvbkNoYW5nZVN0YXJ0YCBoYW5kbGVyIHRoZW4gc3RvcFxuICAgICAgICAgIC8vIHByb2Nlc3NpbmcgdGhpcyBsb2NhdGlvbiBjaGFuZ2VcbiAgICAgICAgICBpZiAoJGxvY2F0aW9uLmFic1VybCgpICE9PSBuZXdVcmwpIHJldHVybjtcblxuICAgICAgICAgIGlmIChkZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAkbG9jYXRpb24uJCRwYXJzZShvbGRVcmwpO1xuICAgICAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUgPSBvbGRTdGF0ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHVybE9yU3RhdGVDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgIHNldEJyb3dzZXJVcmxXaXRoRmFsbGJhY2sobmV3VXJsLCBjdXJyZW50UmVwbGFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGRTdGF0ZSA9PT0gJGxvY2F0aW9uLiQkc3RhdGUgPyBudWxsIDogJGxvY2F0aW9uLiQkc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWZ0ZXJMb2NhdGlvbkNoYW5nZShvbGRVcmwsIG9sZFN0YXRlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAkbG9jYXRpb24uJCRyZXBsYWNlID0gZmFsc2U7XG5cbiAgICAgIC8vIHdlIGRvbid0IG5lZWQgdG8gcmV0dXJuIGFueXRoaW5nIGJlY2F1c2UgJGV2YWxBc3luYyB3aWxsIG1ha2UgdGhlIGRpZ2VzdCBsb29wIGRpcnR5IHdoZW5cbiAgICAgIC8vIHRoZXJlIGlzIGEgY2hhbmdlXG4gICAgfSk7XG5cbiAgICByZXR1cm4gJGxvY2F0aW9uO1xuXG4gICAgZnVuY3Rpb24gYWZ0ZXJMb2NhdGlvbkNoYW5nZShvbGRVcmwsIG9sZFN0YXRlKSB7XG4gICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCAkbG9jYXRpb24uYWJzVXJsKCksIG9sZFVybCxcbiAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUsIG9sZFN0YXRlKTtcbiAgICB9XG59XTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGxvZ1xuICogQHJlcXVpcmVzICR3aW5kb3dcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNpbXBsZSBzZXJ2aWNlIGZvciBsb2dnaW5nLiBEZWZhdWx0IGltcGxlbWVudGF0aW9uIHNhZmVseSB3cml0ZXMgdGhlIG1lc3NhZ2VcbiAqIGludG8gdGhlIGJyb3dzZXIncyBjb25zb2xlIChpZiBwcmVzZW50KS5cbiAqXG4gKiBUaGUgbWFpbiBwdXJwb3NlIG9mIHRoaXMgc2VydmljZSBpcyB0byBzaW1wbGlmeSBkZWJ1Z2dpbmcgYW5kIHRyb3VibGVzaG9vdGluZy5cbiAqXG4gKiBUaGUgZGVmYXVsdCBpcyB0byBsb2cgYGRlYnVnYCBtZXNzYWdlcy4gWW91IGNhbiB1c2VcbiAqIHtAbGluayBuZy4kbG9nUHJvdmlkZXIgbmcuJGxvZ1Byb3ZpZGVyI2RlYnVnRW5hYmxlZH0gdG8gY2hhbmdlIHRoaXMuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImxvZ0V4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdsb2dFeGFtcGxlJywgW10pXG4gICAgICAgICAuY29udHJvbGxlcignTG9nQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRsb2cnLCBmdW5jdGlvbigkc2NvcGUsICRsb2cpIHtcbiAgICAgICAgICAgJHNjb3BlLiRsb2cgPSAkbG9nO1xuICAgICAgICAgICAkc2NvcGUubWVzc2FnZSA9ICdIZWxsbyBXb3JsZCEnO1xuICAgICAgICAgfV0pO1xuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiTG9nQ29udHJvbGxlclwiPlxuICAgICAgICAgPHA+UmVsb2FkIHRoaXMgcGFnZSB3aXRoIG9wZW4gY29uc29sZSwgZW50ZXIgdGV4dCBhbmQgaGl0IHRoZSBsb2cgYnV0dG9uLi4uPC9wPlxuICAgICAgICAgPGxhYmVsPk1lc3NhZ2U6XG4gICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm1lc3NhZ2VcIiAvPjwvbGFiZWw+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiJGxvZy5sb2cobWVzc2FnZSlcIj5sb2c8L2J1dHRvbj5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkbG9nLndhcm4obWVzc2FnZSlcIj53YXJuPC9idXR0b24+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiJGxvZy5pbmZvKG1lc3NhZ2UpXCI+aW5mbzwvYnV0dG9uPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIiRsb2cuZXJyb3IobWVzc2FnZSlcIj5lcnJvcjwvYnV0dG9uPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIiRsb2cuZGVidWcobWVzc2FnZSlcIj5kZWJ1ZzwvYnV0dG9uPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRsb2dQcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2UgdGhlIGAkbG9nUHJvdmlkZXJgIHRvIGNvbmZpZ3VyZSBob3cgdGhlIGFwcGxpY2F0aW9uIGxvZ3MgbWVzc2FnZXNcbiAqL1xuZnVuY3Rpb24gJExvZ1Byb3ZpZGVyKCkge1xuICB2YXIgZGVidWcgPSB0cnVlLFxuICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvZ1Byb3ZpZGVyI2RlYnVnRW5hYmxlZFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQHBhcmFtIHtib29sZWFuPX0gZmxhZyBlbmFibGUgb3IgZGlzYWJsZSBkZWJ1ZyBsZXZlbCBtZXNzYWdlc1xuICAgKiBAcmV0dXJucyB7Kn0gY3VycmVudCB2YWx1ZSBpZiB1c2VkIGFzIGdldHRlciBvciBpdHNlbGYgKGNoYWluaW5nKSBpZiB1c2VkIGFzIHNldHRlclxuICAgKi9cbiAgdGhpcy5kZWJ1Z0VuYWJsZWQgPSBmdW5jdGlvbihmbGFnKSB7XG4gICAgaWYgKGlzRGVmaW5lZChmbGFnKSkge1xuICAgICAgZGVidWcgPSBmbGFnO1xuICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGVidWc7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsIGZ1bmN0aW9uKCR3aW5kb3cpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkbG9nI2xvZ1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYSBsb2cgbWVzc2FnZVxuICAgICAgICovXG4gICAgICBsb2c6IGNvbnNvbGVMb2coJ2xvZycpLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRsb2cjaW5mb1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYW4gaW5mb3JtYXRpb24gbWVzc2FnZVxuICAgICAgICovXG4gICAgICBpbmZvOiBjb25zb2xlTG9nKCdpbmZvJyksXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGxvZyN3YXJuXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBXcml0ZSBhIHdhcm5pbmcgbWVzc2FnZVxuICAgICAgICovXG4gICAgICB3YXJuOiBjb25zb2xlTG9nKCd3YXJuJyksXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGxvZyNlcnJvclxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYW4gZXJyb3IgbWVzc2FnZVxuICAgICAgICovXG4gICAgICBlcnJvcjogY29uc29sZUxvZygnZXJyb3InKSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkbG9nI2RlYnVnXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBXcml0ZSBhIGRlYnVnIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgZGVidWc6IChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGZuID0gY29uc29sZUxvZygnZGVidWcnKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGRlYnVnKSB7XG4gICAgICAgICAgICBmbi5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0oKSlcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZm9ybWF0RXJyb3IoYXJnKSB7XG4gICAgICBpZiAoYXJnIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgaWYgKGFyZy5zdGFjaykge1xuICAgICAgICAgIGFyZyA9IChhcmcubWVzc2FnZSAmJiBhcmcuc3RhY2suaW5kZXhPZihhcmcubWVzc2FnZSkgPT09IC0xKVxuICAgICAgICAgICAgICA/ICdFcnJvcjogJyArIGFyZy5tZXNzYWdlICsgJ1xcbicgKyBhcmcuc3RhY2tcbiAgICAgICAgICAgICAgOiBhcmcuc3RhY2s7XG4gICAgICAgIH0gZWxzZSBpZiAoYXJnLnNvdXJjZVVSTCkge1xuICAgICAgICAgIGFyZyA9IGFyZy5tZXNzYWdlICsgJ1xcbicgKyBhcmcuc291cmNlVVJMICsgJzonICsgYXJnLmxpbmU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcmc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uc29sZUxvZyh0eXBlKSB7XG4gICAgICB2YXIgY29uc29sZSA9ICR3aW5kb3cuY29uc29sZSB8fCB7fSxcbiAgICAgICAgICBsb2dGbiA9IGNvbnNvbGVbdHlwZV0gfHwgY29uc29sZS5sb2cgfHwgbm9vcCxcbiAgICAgICAgICBoYXNBcHBseSA9IGZhbHNlO1xuXG4gICAgICAvLyBOb3RlOiByZWFkaW5nIGxvZ0ZuLmFwcGx5IHRocm93cyBhbiBlcnJvciBpbiBJRTExIGluIElFOCBkb2N1bWVudCBtb2RlLlxuICAgICAgLy8gVGhlIHJlYXNvbiBiZWhpbmQgdGhpcyBpcyB0aGF0IGNvbnNvbGUubG9nIGhhcyB0eXBlIFwib2JqZWN0XCIgaW4gSUU4Li4uXG4gICAgICB0cnkge1xuICAgICAgICBoYXNBcHBseSA9ICEhbG9nRm4uYXBwbHk7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgICBpZiAoaGFzQXBwbHkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICAgICAgYXJncy5wdXNoKGZvcm1hdEVycm9yKGFyZykpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBsb2dGbi5hcHBseShjb25zb2xlLCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gd2UgYXJlIElFIHdoaWNoIGVpdGhlciBkb2Vzbid0IGhhdmUgd2luZG93LmNvbnNvbGUgPT4gdGhpcyBpcyBub29wIGFuZCB3ZSBkbyBub3RoaW5nLFxuICAgICAgLy8gb3Igd2UgYXJlIElFIHdoZXJlIGNvbnNvbGUubG9nIGRvZXNuJ3QgaGF2ZSBhcHBseSBzbyB3ZSBsb2cgYXQgbGVhc3QgZmlyc3QgMiBhcmdzXG4gICAgICByZXR1cm4gZnVuY3Rpb24oYXJnMSwgYXJnMikge1xuICAgICAgICBsb2dGbihhcmcxLCBhcmcyID09IG51bGwgPyAnJyA6IGFyZzIpO1xuICAgICAgfTtcbiAgICB9XG4gIH1dO1xufVxuXG4vKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4gKiAgICAgQW55IGNvbW1pdHMgdG8gdGhpcyBmaWxlIHNob3VsZCBiZSByZXZpZXdlZCB3aXRoIHNlY3VyaXR5IGluIG1pbmQuICAqXG4gKiAgIENoYW5nZXMgdG8gdGhpcyBmaWxlIGNhbiBwb3RlbnRpYWxseSBjcmVhdGUgc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLiAqXG4gKiAgICAgICAgICBBbiBhcHByb3ZhbCBmcm9tIDIgQ29yZSBtZW1iZXJzIHdpdGggaGlzdG9yeSBvZiBtb2RpZnlpbmcgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIGZpbGUgaXMgcmVxdWlyZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgRG9lcyB0aGUgY2hhbmdlIHNvbWVob3cgYWxsb3cgZm9yIGFyYml0cmFyeSBqYXZhc2NyaXB0IHRvIGJlIGV4ZWN1dGVkPyAqXG4gKiAgICBPciBhbGxvd3MgZm9yIHNvbWVvbmUgdG8gY2hhbmdlIHRoZSBwcm90b3R5cGUgb2YgYnVpbHQtaW4gb2JqZWN0cz8gICAqXG4gKiAgICAgT3IgZ2l2ZXMgdW5kZXNpcmVkIGFjY2VzcyB0byB2YXJpYWJsZXMgbGlrZXMgZG9jdW1lbnQgb3Igd2luZG93PyAgICAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqL1xuXG52YXIgJHBhcnNlTWluRXJyID0gbWluRXJyKCckcGFyc2UnKTtcblxuLy8gU2FuZGJveGluZyBBbmd1bGFyIEV4cHJlc3Npb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEFuZ3VsYXIgZXhwcmVzc2lvbnMgYXJlIGdlbmVyYWxseSBjb25zaWRlcmVkIHNhZmUgYmVjYXVzZSB0aGVzZSBleHByZXNzaW9ucyBvbmx5IGhhdmUgZGlyZWN0XG4vLyBhY2Nlc3MgdG8gYCRzY29wZWAgYW5kIGxvY2Fscy4gSG93ZXZlciwgb25lIGNhbiBvYnRhaW4gdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgSlMgY29kZSBieVxuLy8gb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIG5hdGl2ZSBKUyBmdW5jdGlvbnMgc3VjaCBhcyB0aGUgRnVuY3Rpb24gY29uc3RydWN0b3IuXG4vL1xuLy8gQXMgYW4gZXhhbXBsZSwgY29uc2lkZXIgdGhlIGZvbGxvd2luZyBBbmd1bGFyIGV4cHJlc3Npb246XG4vL1xuLy8gICB7fS50b1N0cmluZy5jb25zdHJ1Y3RvcignYWxlcnQoXCJldmlsIEpTIGNvZGVcIiknKVxuLy9cbi8vIFRoaXMgc2FuZGJveGluZyB0ZWNobmlxdWUgaXMgbm90IHBlcmZlY3QgYW5kIGRvZXNuJ3QgYWltIHRvIGJlLiBUaGUgZ29hbCBpcyB0byBwcmV2ZW50IGV4cGxvaXRzXG4vLyBhZ2FpbnN0IHRoZSBleHByZXNzaW9uIGxhbmd1YWdlLCBidXQgbm90IHRvIHByZXZlbnQgZXhwbG9pdHMgdGhhdCB3ZXJlIGVuYWJsZWQgYnkgZXhwb3Npbmdcbi8vIHNlbnNpdGl2ZSBKYXZhU2NyaXB0IG9yIGJyb3dzZXIgQVBJcyBvbiBTY29wZS4gRXhwb3Npbmcgc3VjaCBvYmplY3RzIG9uIGEgU2NvcGUgaXMgbmV2ZXIgYSBnb29kXG4vLyBwcmFjdGljZSBhbmQgdGhlcmVmb3JlIHdlIGFyZSBub3QgZXZlbiB0cnlpbmcgdG8gcHJvdGVjdCBhZ2FpbnN0IGludGVyYWN0aW9uIHdpdGggYW4gb2JqZWN0XG4vLyBleHBsaWNpdGx5IGV4cG9zZWQgaW4gdGhpcyB3YXkuXG4vL1xuLy8gSW4gZ2VuZXJhbCwgaXQgaXMgbm90IHBvc3NpYmxlIHRvIGFjY2VzcyBhIFdpbmRvdyBvYmplY3QgZnJvbSBhbiBhbmd1bGFyIGV4cHJlc3Npb24gdW5sZXNzIGFcbi8vIHdpbmRvdyBvciBzb21lIERPTSBvYmplY3QgdGhhdCBoYXMgYSByZWZlcmVuY2UgdG8gd2luZG93IGlzIHB1Ymxpc2hlZCBvbnRvIGEgU2NvcGUuXG4vLyBTaW1pbGFybHkgd2UgcHJldmVudCBpbnZvY2F0aW9ucyBvZiBmdW5jdGlvbiBrbm93biB0byBiZSBkYW5nZXJvdXMsIGFzIHdlbGwgYXMgYXNzaWdubWVudHMgdG9cbi8vIG5hdGl2ZSBvYmplY3RzLlxuLy9cbi8vIFNlZSBodHRwczovL2RvY3MuYW5ndWxhcmpzLm9yZy9ndWlkZS9zZWN1cml0eVxuXG5cbmZ1bmN0aW9uIGVuc3VyZVNhZmVNZW1iZXJOYW1lKG5hbWUsIGZ1bGxFeHByZXNzaW9uKSB7XG4gIGlmIChuYW1lID09PSBcIl9fZGVmaW5lR2V0dGVyX19cIiB8fCBuYW1lID09PSBcIl9fZGVmaW5lU2V0dGVyX19cIlxuICAgICAgfHwgbmFtZSA9PT0gXCJfX2xvb2t1cEdldHRlcl9fXCIgfHwgbmFtZSA9PT0gXCJfX2xvb2t1cFNldHRlcl9fXCJcbiAgICAgIHx8IG5hbWUgPT09IFwiX19wcm90b19fXCIpIHtcbiAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2lzZWNmbGQnLFxuICAgICAgICAnQXR0ZW1wdGluZyB0byBhY2Nlc3MgYSBkaXNhbGxvd2VkIGZpZWxkIGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMhICdcbiAgICAgICAgKyAnRXhwcmVzc2lvbjogezB9JywgZnVsbEV4cHJlc3Npb24pO1xuICB9XG4gIHJldHVybiBuYW1lO1xufVxuXG5mdW5jdGlvbiBnZXRTdHJpbmdWYWx1ZShuYW1lLCBmdWxsRXhwcmVzc2lvbikge1xuICAvLyBGcm9tIHRoZSBKYXZhU2NyaXB0IGRvY3M6XG4gIC8vIFByb3BlcnR5IG5hbWVzIG11c3QgYmUgc3RyaW5ncy4gVGhpcyBtZWFucyB0aGF0IG5vbi1zdHJpbmcgb2JqZWN0cyBjYW5ub3QgYmUgdXNlZFxuICAvLyBhcyBrZXlzIGluIGFuIG9iamVjdC4gQW55IG5vbi1zdHJpbmcgb2JqZWN0LCBpbmNsdWRpbmcgYSBudW1iZXIsIGlzIHR5cGVjYXN0ZWRcbiAgLy8gaW50byBhIHN0cmluZyB2aWEgdGhlIHRvU3RyaW5nIG1ldGhvZC5cbiAgLy9cbiAgLy8gU28sIHRvIGVuc3VyZSB0aGF0IHdlIGFyZSBjaGVja2luZyB0aGUgc2FtZSBgbmFtZWAgdGhhdCBKYXZhU2NyaXB0IHdvdWxkIHVzZSxcbiAgLy8gd2UgY2FzdCBpdCB0byBhIHN0cmluZywgaWYgcG9zc2libGUuXG4gIC8vIERvaW5nIGBuYW1lICsgJydgIGNhbiBjYXVzZSBhIHJlcGwgZXJyb3IgaWYgdGhlIHJlc3VsdCB0byBgdG9TdHJpbmdgIGlzIG5vdCBhIHN0cmluZyxcbiAgLy8gdGhpcyBpcywgdGhpcyB3aWxsIGhhbmRsZSBvYmplY3RzIHRoYXQgbWlzYmVoYXZlLlxuICBuYW1lID0gbmFtZSArICcnO1xuICBpZiAoIWlzU3RyaW5nKG5hbWUpKSB7XG4gICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2VjY3N0JyxcbiAgICAgICAgJ0Nhbm5vdCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWUhICdcbiAgICAgICAgKyAnRXhwcmVzc2lvbjogezB9JywgZnVsbEV4cHJlc3Npb24pO1xuICB9XG4gIHJldHVybiBuYW1lO1xufVxuXG5mdW5jdGlvbiBlbnN1cmVTYWZlT2JqZWN0KG9iaiwgZnVsbEV4cHJlc3Npb24pIHtcbiAgLy8gbmlmdHkgY2hlY2sgaWYgb2JqIGlzIEZ1bmN0aW9uIHRoYXQgaXMgZmFzdCBhbmQgd29ya3MgYWNyb3NzIGlmcmFtZXMgYW5kIG90aGVyIGNvbnRleHRzXG4gIGlmIChvYmopIHtcbiAgICBpZiAob2JqLmNvbnN0cnVjdG9yID09PSBvYmopIHtcbiAgICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY2ZuJyxcbiAgICAgICAgICAnUmVmZXJlbmNpbmcgRnVuY3Rpb24gaW4gQW5ndWxhciBleHByZXNzaW9ucyBpcyBkaXNhbGxvd2VkISBFeHByZXNzaW9uOiB7MH0nLFxuICAgICAgICAgIGZ1bGxFeHByZXNzaW9uKTtcbiAgICB9IGVsc2UgaWYgKC8vIGlzV2luZG93KG9iailcbiAgICAgICAgb2JqLndpbmRvdyA9PT0gb2JqKSB7XG4gICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2lzZWN3aW5kb3cnLFxuICAgICAgICAgICdSZWZlcmVuY2luZyB0aGUgV2luZG93IGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGlzYWxsb3dlZCEgRXhwcmVzc2lvbjogezB9JyxcbiAgICAgICAgICBmdWxsRXhwcmVzc2lvbik7XG4gICAgfSBlbHNlIGlmICgvLyBpc0VsZW1lbnQob2JqKVxuICAgICAgICBvYmouY2hpbGRyZW4gJiYgKG9iai5ub2RlTmFtZSB8fCAob2JqLnByb3AgJiYgb2JqLmF0dHIgJiYgb2JqLmZpbmQpKSkge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2VjZG9tJyxcbiAgICAgICAgICAnUmVmZXJlbmNpbmcgRE9NIG5vZGVzIGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGlzYWxsb3dlZCEgRXhwcmVzc2lvbjogezB9JyxcbiAgICAgICAgICBmdWxsRXhwcmVzc2lvbik7XG4gICAgfSBlbHNlIGlmICgvLyBibG9jayBPYmplY3Qgc28gdGhhdCB3ZSBjYW4ndCBnZXQgaG9sZCBvZiBkYW5nZXJvdXMgT2JqZWN0LiogbWV0aG9kc1xuICAgICAgICBvYmogPT09IE9iamVjdCkge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2Vjb2JqJyxcbiAgICAgICAgICAnUmVmZXJlbmNpbmcgT2JqZWN0IGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGlzYWxsb3dlZCEgRXhwcmVzc2lvbjogezB9JyxcbiAgICAgICAgICBmdWxsRXhwcmVzc2lvbik7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbnZhciBDQUxMID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7XG52YXIgQVBQTFkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG52YXIgQklORCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kO1xuXG5mdW5jdGlvbiBlbnN1cmVTYWZlRnVuY3Rpb24ob2JqLCBmdWxsRXhwcmVzc2lvbikge1xuICBpZiAob2JqKSB7XG4gICAgaWYgKG9iai5jb25zdHJ1Y3RvciA9PT0gb2JqKSB7XG4gICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2lzZWNmbicsXG4gICAgICAgICdSZWZlcmVuY2luZyBGdW5jdGlvbiBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsXG4gICAgICAgIGZ1bGxFeHByZXNzaW9uKTtcbiAgICB9IGVsc2UgaWYgKG9iaiA9PT0gQ0FMTCB8fCBvYmogPT09IEFQUExZIHx8IG9iaiA9PT0gQklORCkge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2VjZmYnLFxuICAgICAgICAnUmVmZXJlbmNpbmcgY2FsbCwgYXBwbHkgb3IgYmluZCBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsXG4gICAgICAgIGZ1bGxFeHByZXNzaW9uKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5zdXJlU2FmZUFzc2lnbkNvbnRleHQob2JqLCBmdWxsRXhwcmVzc2lvbikge1xuICBpZiAob2JqKSB7XG4gICAgaWYgKG9iaiA9PT0gKDApLmNvbnN0cnVjdG9yIHx8IG9iaiA9PT0gKGZhbHNlKS5jb25zdHJ1Y3RvciB8fCBvYmogPT09ICcnLmNvbnN0cnVjdG9yIHx8XG4gICAgICAgIG9iaiA9PT0ge30uY29uc3RydWN0b3IgfHwgb2JqID09PSBbXS5jb25zdHJ1Y3RvciB8fCBvYmogPT09IEZ1bmN0aW9uLmNvbnN0cnVjdG9yKSB7XG4gICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2lzZWNhZicsXG4gICAgICAgICdBc3NpZ25pbmcgdG8gYSBjb25zdHJ1Y3RvciBpcyBkaXNhbGxvd2VkISBFeHByZXNzaW9uOiB7MH0nLCBmdWxsRXhwcmVzc2lvbik7XG4gICAgfVxuICB9XG59XG5cbnZhciBPUEVSQVRPUlMgPSBjcmVhdGVNYXAoKTtcbmZvckVhY2goJysgLSAqIC8gJSA9PT0gIT09ID09ICE9IDwgPiA8PSA+PSAmJiB8fCAhID0gfCcuc3BsaXQoJyAnKSwgZnVuY3Rpb24ob3BlcmF0b3IpIHsgT1BFUkFUT1JTW29wZXJhdG9yXSA9IHRydWU7IH0pO1xudmFyIEVTQ0FQRSA9IHtcIm5cIjpcIlxcblwiLCBcImZcIjpcIlxcZlwiLCBcInJcIjpcIlxcclwiLCBcInRcIjpcIlxcdFwiLCBcInZcIjpcIlxcdlwiLCBcIidcIjpcIidcIiwgJ1wiJzonXCInfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBMZXhlciA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbn07XG5cbkxleGVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IExleGVyLFxuXG4gIGxleDogZnVuY3Rpb24odGV4dCkge1xuICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgdGhpcy5pbmRleCA9IDA7XG4gICAgdGhpcy50b2tlbnMgPSBbXTtcblxuICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgdmFyIGNoID0gdGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KTtcbiAgICAgIGlmIChjaCA9PT0gJ1wiJyB8fCBjaCA9PT0gXCInXCIpIHtcbiAgICAgICAgdGhpcy5yZWFkU3RyaW5nKGNoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc051bWJlcihjaCkgfHwgY2ggPT09ICcuJyAmJiB0aGlzLmlzTnVtYmVyKHRoaXMucGVlaygpKSkge1xuICAgICAgICB0aGlzLnJlYWROdW1iZXIoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0lkZW50KGNoKSkge1xuICAgICAgICB0aGlzLnJlYWRJZGVudCgpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmlzKGNoLCAnKCl7fVtdLiw7Oj8nKSkge1xuICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtpbmRleDogdGhpcy5pbmRleCwgdGV4dDogY2h9KTtcbiAgICAgICAgdGhpcy5pbmRleCsrO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmlzV2hpdGVzcGFjZShjaCkpIHtcbiAgICAgICAgdGhpcy5pbmRleCsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGNoMiA9IGNoICsgdGhpcy5wZWVrKCk7XG4gICAgICAgIHZhciBjaDMgPSBjaDIgKyB0aGlzLnBlZWsoMik7XG4gICAgICAgIHZhciBvcDEgPSBPUEVSQVRPUlNbY2hdO1xuICAgICAgICB2YXIgb3AyID0gT1BFUkFUT1JTW2NoMl07XG4gICAgICAgIHZhciBvcDMgPSBPUEVSQVRPUlNbY2gzXTtcbiAgICAgICAgaWYgKG9wMSB8fCBvcDIgfHwgb3AzKSB7XG4gICAgICAgICAgdmFyIHRva2VuID0gb3AzID8gY2gzIDogKG9wMiA/IGNoMiA6IGNoKTtcbiAgICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtpbmRleDogdGhpcy5pbmRleCwgdGV4dDogdG9rZW4sIG9wZXJhdG9yOiB0cnVlfSk7XG4gICAgICAgICAgdGhpcy5pbmRleCArPSB0b2tlbi5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdVbmV4cGVjdGVkIG5leHQgY2hhcmFjdGVyICcsIHRoaXMuaW5kZXgsIHRoaXMuaW5kZXggKyAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy50b2tlbnM7XG4gIH0sXG5cbiAgaXM6IGZ1bmN0aW9uKGNoLCBjaGFycykge1xuICAgIHJldHVybiBjaGFycy5pbmRleE9mKGNoKSAhPT0gLTE7XG4gIH0sXG5cbiAgcGVlazogZnVuY3Rpb24oaSkge1xuICAgIHZhciBudW0gPSBpIHx8IDE7XG4gICAgcmV0dXJuICh0aGlzLmluZGV4ICsgbnVtIDwgdGhpcy50ZXh0Lmxlbmd0aCkgPyB0aGlzLnRleHQuY2hhckF0KHRoaXMuaW5kZXggKyBudW0pIDogZmFsc2U7XG4gIH0sXG5cbiAgaXNOdW1iZXI6IGZ1bmN0aW9uKGNoKSB7XG4gICAgcmV0dXJuICgnMCcgPD0gY2ggJiYgY2ggPD0gJzknKSAmJiB0eXBlb2YgY2ggPT09IFwic3RyaW5nXCI7XG4gIH0sXG5cbiAgaXNXaGl0ZXNwYWNlOiBmdW5jdGlvbihjaCkge1xuICAgIC8vIElFIHRyZWF0cyBub24tYnJlYWtpbmcgc3BhY2UgYXMgXFx1MDBBMFxuICAgIHJldHVybiAoY2ggPT09ICcgJyB8fCBjaCA9PT0gJ1xccicgfHwgY2ggPT09ICdcXHQnIHx8XG4gICAgICAgICAgICBjaCA9PT0gJ1xcbicgfHwgY2ggPT09ICdcXHYnIHx8IGNoID09PSAnXFx1MDBBMCcpO1xuICB9LFxuXG4gIGlzSWRlbnQ6IGZ1bmN0aW9uKGNoKSB7XG4gICAgcmV0dXJuICgnYScgPD0gY2ggJiYgY2ggPD0gJ3onIHx8XG4gICAgICAgICAgICAnQScgPD0gY2ggJiYgY2ggPD0gJ1onIHx8XG4gICAgICAgICAgICAnXycgPT09IGNoIHx8IGNoID09PSAnJCcpO1xuICB9LFxuXG4gIGlzRXhwT3BlcmF0b3I6IGZ1bmN0aW9uKGNoKSB7XG4gICAgcmV0dXJuIChjaCA9PT0gJy0nIHx8IGNoID09PSAnKycgfHwgdGhpcy5pc051bWJlcihjaCkpO1xuICB9LFxuXG4gIHRocm93RXJyb3I6IGZ1bmN0aW9uKGVycm9yLCBzdGFydCwgZW5kKSB7XG4gICAgZW5kID0gZW5kIHx8IHRoaXMuaW5kZXg7XG4gICAgdmFyIGNvbFN0ciA9IChpc0RlZmluZWQoc3RhcnQpXG4gICAgICAgICAgICA/ICdzICcgKyBzdGFydCArICAnLScgKyB0aGlzLmluZGV4ICsgJyBbJyArIHRoaXMudGV4dC5zdWJzdHJpbmcoc3RhcnQsIGVuZCkgKyAnXSdcbiAgICAgICAgICAgIDogJyAnICsgZW5kKTtcbiAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2xleGVycicsICdMZXhlciBFcnJvcjogezB9IGF0IGNvbHVtbnsxfSBpbiBleHByZXNzaW9uIFt7Mn1dLicsXG4gICAgICAgIGVycm9yLCBjb2xTdHIsIHRoaXMudGV4dCk7XG4gIH0sXG5cbiAgcmVhZE51bWJlcjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIG51bWJlciA9ICcnO1xuICAgIHZhciBzdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgd2hpbGUgKHRoaXMuaW5kZXggPCB0aGlzLnRleHQubGVuZ3RoKSB7XG4gICAgICB2YXIgY2ggPSBsb3dlcmNhc2UodGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KSk7XG4gICAgICBpZiAoY2ggPT0gJy4nIHx8IHRoaXMuaXNOdW1iZXIoY2gpKSB7XG4gICAgICAgIG51bWJlciArPSBjaDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwZWVrQ2ggPSB0aGlzLnBlZWsoKTtcbiAgICAgICAgaWYgKGNoID09ICdlJyAmJiB0aGlzLmlzRXhwT3BlcmF0b3IocGVla0NoKSkge1xuICAgICAgICAgIG51bWJlciArPSBjaDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzRXhwT3BlcmF0b3IoY2gpICYmXG4gICAgICAgICAgICBwZWVrQ2ggJiYgdGhpcy5pc051bWJlcihwZWVrQ2gpICYmXG4gICAgICAgICAgICBudW1iZXIuY2hhckF0KG51bWJlci5sZW5ndGggLSAxKSA9PSAnZScpIHtcbiAgICAgICAgICBudW1iZXIgKz0gY2g7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0V4cE9wZXJhdG9yKGNoKSAmJlxuICAgICAgICAgICAgKCFwZWVrQ2ggfHwgIXRoaXMuaXNOdW1iZXIocGVla0NoKSkgJiZcbiAgICAgICAgICAgIG51bWJlci5jaGFyQXQobnVtYmVyLmxlbmd0aCAtIDEpID09ICdlJykge1xuICAgICAgICAgIHRoaXMudGhyb3dFcnJvcignSW52YWxpZCBleHBvbmVudCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmluZGV4Kys7XG4gICAgfVxuICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgaW5kZXg6IHN0YXJ0LFxuICAgICAgdGV4dDogbnVtYmVyLFxuICAgICAgY29uc3RhbnQ6IHRydWUsXG4gICAgICB2YWx1ZTogTnVtYmVyKG51bWJlcilcbiAgICB9KTtcbiAgfSxcblxuICByZWFkSWRlbnQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgd2hpbGUgKHRoaXMuaW5kZXggPCB0aGlzLnRleHQubGVuZ3RoKSB7XG4gICAgICB2YXIgY2ggPSB0aGlzLnRleHQuY2hhckF0KHRoaXMuaW5kZXgpO1xuICAgICAgaWYgKCEodGhpcy5pc0lkZW50KGNoKSB8fCB0aGlzLmlzTnVtYmVyKGNoKSkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB0aGlzLmluZGV4Kys7XG4gICAgfVxuICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgaW5kZXg6IHN0YXJ0LFxuICAgICAgdGV4dDogdGhpcy50ZXh0LnNsaWNlKHN0YXJ0LCB0aGlzLmluZGV4KSxcbiAgICAgIGlkZW50aWZpZXI6IHRydWVcbiAgICB9KTtcbiAgfSxcblxuICByZWFkU3RyaW5nOiBmdW5jdGlvbihxdW90ZSkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgdGhpcy5pbmRleCsrO1xuICAgIHZhciBzdHJpbmcgPSAnJztcbiAgICB2YXIgcmF3U3RyaW5nID0gcXVvdGU7XG4gICAgdmFyIGVzY2FwZSA9IGZhbHNlO1xuICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgdmFyIGNoID0gdGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KTtcbiAgICAgIHJhd1N0cmluZyArPSBjaDtcbiAgICAgIGlmIChlc2NhcGUpIHtcbiAgICAgICAgaWYgKGNoID09PSAndScpIHtcbiAgICAgICAgICB2YXIgaGV4ID0gdGhpcy50ZXh0LnN1YnN0cmluZyh0aGlzLmluZGV4ICsgMSwgdGhpcy5pbmRleCArIDUpO1xuICAgICAgICAgIGlmICghaGV4Lm1hdGNoKC9bXFxkYS1mXXs0fS9pKSkge1xuICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdJbnZhbGlkIHVuaWNvZGUgZXNjYXBlIFtcXFxcdScgKyBoZXggKyAnXScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmluZGV4ICs9IDQ7XG4gICAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoaGV4LCAxNikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciByZXAgPSBFU0NBUEVbY2hdO1xuICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArIChyZXAgfHwgY2gpO1xuICAgICAgICB9XG4gICAgICAgIGVzY2FwZSA9IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJ1xcXFwnKSB7XG4gICAgICAgIGVzY2FwZSA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGNoID09PSBxdW90ZSkge1xuICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICAgIGluZGV4OiBzdGFydCxcbiAgICAgICAgICB0ZXh0OiByYXdTdHJpbmcsXG4gICAgICAgICAgY29uc3RhbnQ6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IHN0cmluZ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyaW5nICs9IGNoO1xuICAgICAgfVxuICAgICAgdGhpcy5pbmRleCsrO1xuICAgIH1cbiAgICB0aGlzLnRocm93RXJyb3IoJ1VudGVybWluYXRlZCBxdW90ZScsIHN0YXJ0KTtcbiAgfVxufTtcblxudmFyIEFTVCA9IGZ1bmN0aW9uKGxleGVyLCBvcHRpb25zKSB7XG4gIHRoaXMubGV4ZXIgPSBsZXhlcjtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbn07XG5cbkFTVC5Qcm9ncmFtID0gJ1Byb2dyYW0nO1xuQVNULkV4cHJlc3Npb25TdGF0ZW1lbnQgPSAnRXhwcmVzc2lvblN0YXRlbWVudCc7XG5BU1QuQXNzaWdubWVudEV4cHJlc3Npb24gPSAnQXNzaWdubWVudEV4cHJlc3Npb24nO1xuQVNULkNvbmRpdGlvbmFsRXhwcmVzc2lvbiA9ICdDb25kaXRpb25hbEV4cHJlc3Npb24nO1xuQVNULkxvZ2ljYWxFeHByZXNzaW9uID0gJ0xvZ2ljYWxFeHByZXNzaW9uJztcbkFTVC5CaW5hcnlFeHByZXNzaW9uID0gJ0JpbmFyeUV4cHJlc3Npb24nO1xuQVNULlVuYXJ5RXhwcmVzc2lvbiA9ICdVbmFyeUV4cHJlc3Npb24nO1xuQVNULkNhbGxFeHByZXNzaW9uID0gJ0NhbGxFeHByZXNzaW9uJztcbkFTVC5NZW1iZXJFeHByZXNzaW9uID0gJ01lbWJlckV4cHJlc3Npb24nO1xuQVNULklkZW50aWZpZXIgPSAnSWRlbnRpZmllcic7XG5BU1QuTGl0ZXJhbCA9ICdMaXRlcmFsJztcbkFTVC5BcnJheUV4cHJlc3Npb24gPSAnQXJyYXlFeHByZXNzaW9uJztcbkFTVC5Qcm9wZXJ0eSA9ICdQcm9wZXJ0eSc7XG5BU1QuT2JqZWN0RXhwcmVzc2lvbiA9ICdPYmplY3RFeHByZXNzaW9uJztcbkFTVC5UaGlzRXhwcmVzc2lvbiA9ICdUaGlzRXhwcmVzc2lvbic7XG5cbi8vIEludGVybmFsIHVzZSBvbmx5XG5BU1QuTkdWYWx1ZVBhcmFtZXRlciA9ICdOR1ZhbHVlUGFyYW1ldGVyJztcblxuQVNULnByb3RvdHlwZSA9IHtcbiAgYXN0OiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICB0aGlzLnRva2VucyA9IHRoaXMubGV4ZXIubGV4KHRleHQpO1xuXG4gICAgdmFyIHZhbHVlID0gdGhpcy5wcm9ncmFtKCk7XG5cbiAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoICE9PSAwKSB7XG4gICAgICB0aGlzLnRocm93RXJyb3IoJ2lzIGFuIHVuZXhwZWN0ZWQgdG9rZW4nLCB0aGlzLnRva2Vuc1swXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuXG4gIHByb2dyYW06IGZ1bmN0aW9uKCkge1xuICAgIHZhciBib2R5ID0gW107XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGlmICh0aGlzLnRva2Vucy5sZW5ndGggPiAwICYmICF0aGlzLnBlZWsoJ30nLCAnKScsICc7JywgJ10nKSlcbiAgICAgICAgYm9keS5wdXNoKHRoaXMuZXhwcmVzc2lvblN0YXRlbWVudCgpKTtcbiAgICAgIGlmICghdGhpcy5leHBlY3QoJzsnKSkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBBU1QuUHJvZ3JhbSwgYm9keTogYm9keX07XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGV4cHJlc3Npb25TdGF0ZW1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7IHR5cGU6IEFTVC5FeHByZXNzaW9uU3RhdGVtZW50LCBleHByZXNzaW9uOiB0aGlzLmZpbHRlckNoYWluKCkgfTtcbiAgfSxcblxuICBmaWx0ZXJDaGFpbjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLmV4cHJlc3Npb24oKTtcbiAgICB2YXIgdG9rZW47XG4gICAgd2hpbGUgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCd8JykpKSB7XG4gICAgICBsZWZ0ID0gdGhpcy5maWx0ZXIobGVmdCk7XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIGV4cHJlc3Npb246IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmFzc2lnbm1lbnQoKTtcbiAgfSxcblxuICBhc3NpZ25tZW50OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcy50ZXJuYXJ5KCk7XG4gICAgaWYgKHRoaXMuZXhwZWN0KCc9JykpIHtcbiAgICAgIHJlc3VsdCA9IHsgdHlwZTogQVNULkFzc2lnbm1lbnRFeHByZXNzaW9uLCBsZWZ0OiByZXN1bHQsIHJpZ2h0OiB0aGlzLmFzc2lnbm1lbnQoKSwgb3BlcmF0b3I6ICc9J307XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG5cbiAgdGVybmFyeTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRlc3QgPSB0aGlzLmxvZ2ljYWxPUigpO1xuICAgIHZhciBhbHRlcm5hdGU7XG4gICAgdmFyIGNvbnNlcXVlbnQ7XG4gICAgaWYgKHRoaXMuZXhwZWN0KCc/JykpIHtcbiAgICAgIGFsdGVybmF0ZSA9IHRoaXMuZXhwcmVzc2lvbigpO1xuICAgICAgaWYgKHRoaXMuY29uc3VtZSgnOicpKSB7XG4gICAgICAgIGNvbnNlcXVlbnQgPSB0aGlzLmV4cHJlc3Npb24oKTtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogQVNULkNvbmRpdGlvbmFsRXhwcmVzc2lvbiwgdGVzdDogdGVzdCwgYWx0ZXJuYXRlOiBhbHRlcm5hdGUsIGNvbnNlcXVlbnQ6IGNvbnNlcXVlbnR9O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGVzdDtcbiAgfSxcblxuICBsb2dpY2FsT1I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5sb2dpY2FsQU5EKCk7XG4gICAgd2hpbGUgKHRoaXMuZXhwZWN0KCd8fCcpKSB7XG4gICAgICBsZWZ0ID0geyB0eXBlOiBBU1QuTG9naWNhbEV4cHJlc3Npb24sIG9wZXJhdG9yOiAnfHwnLCBsZWZ0OiBsZWZ0LCByaWdodDogdGhpcy5sb2dpY2FsQU5EKCkgfTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgbG9naWNhbEFORDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLmVxdWFsaXR5KCk7XG4gICAgd2hpbGUgKHRoaXMuZXhwZWN0KCcmJicpKSB7XG4gICAgICBsZWZ0ID0geyB0eXBlOiBBU1QuTG9naWNhbEV4cHJlc3Npb24sIG9wZXJhdG9yOiAnJiYnLCBsZWZ0OiBsZWZ0LCByaWdodDogdGhpcy5lcXVhbGl0eSgpfTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgZXF1YWxpdHk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5yZWxhdGlvbmFsKCk7XG4gICAgdmFyIHRva2VuO1xuICAgIHdoaWxlICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnPT0nLCchPScsJz09PScsJyE9PScpKSkge1xuICAgICAgbGVmdCA9IHsgdHlwZTogQVNULkJpbmFyeUV4cHJlc3Npb24sIG9wZXJhdG9yOiB0b2tlbi50ZXh0LCBsZWZ0OiBsZWZ0LCByaWdodDogdGhpcy5yZWxhdGlvbmFsKCkgfTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgcmVsYXRpb25hbDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLmFkZGl0aXZlKCk7XG4gICAgdmFyIHRva2VuO1xuICAgIHdoaWxlICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnPCcsICc+JywgJzw9JywgJz49JykpKSB7XG4gICAgICBsZWZ0ID0geyB0eXBlOiBBU1QuQmluYXJ5RXhwcmVzc2lvbiwgb3BlcmF0b3I6IHRva2VuLnRleHQsIGxlZnQ6IGxlZnQsIHJpZ2h0OiB0aGlzLmFkZGl0aXZlKCkgfTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgYWRkaXRpdmU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5tdWx0aXBsaWNhdGl2ZSgpO1xuICAgIHZhciB0b2tlbjtcbiAgICB3aGlsZSAoKHRva2VuID0gdGhpcy5leHBlY3QoJysnLCctJykpKSB7XG4gICAgICBsZWZ0ID0geyB0eXBlOiBBU1QuQmluYXJ5RXhwcmVzc2lvbiwgb3BlcmF0b3I6IHRva2VuLnRleHQsIGxlZnQ6IGxlZnQsIHJpZ2h0OiB0aGlzLm11bHRpcGxpY2F0aXZlKCkgfTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgbXVsdGlwbGljYXRpdmU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy51bmFyeSgpO1xuICAgIHZhciB0b2tlbjtcbiAgICB3aGlsZSAoKHRva2VuID0gdGhpcy5leHBlY3QoJyonLCcvJywnJScpKSkge1xuICAgICAgbGVmdCA9IHsgdHlwZTogQVNULkJpbmFyeUV4cHJlc3Npb24sIG9wZXJhdG9yOiB0b2tlbi50ZXh0LCBsZWZ0OiBsZWZ0LCByaWdodDogdGhpcy51bmFyeSgpIH07XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIHVuYXJ5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdG9rZW47XG4gICAgaWYgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCcrJywgJy0nLCAnIScpKSkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogQVNULlVuYXJ5RXhwcmVzc2lvbiwgb3BlcmF0b3I6IHRva2VuLnRleHQsIHByZWZpeDogdHJ1ZSwgYXJndW1lbnQ6IHRoaXMudW5hcnkoKSB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5wcmltYXJ5KCk7XG4gICAgfVxuICB9LFxuXG4gIHByaW1hcnk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwcmltYXJ5O1xuICAgIGlmICh0aGlzLmV4cGVjdCgnKCcpKSB7XG4gICAgICBwcmltYXJ5ID0gdGhpcy5maWx0ZXJDaGFpbigpO1xuICAgICAgdGhpcy5jb25zdW1lKCcpJyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmV4cGVjdCgnWycpKSB7XG4gICAgICBwcmltYXJ5ID0gdGhpcy5hcnJheURlY2xhcmF0aW9uKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmV4cGVjdCgneycpKSB7XG4gICAgICBwcmltYXJ5ID0gdGhpcy5vYmplY3QoKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuY29uc3RhbnRzLmhhc093blByb3BlcnR5KHRoaXMucGVlaygpLnRleHQpKSB7XG4gICAgICBwcmltYXJ5ID0gY29weSh0aGlzLmNvbnN0YW50c1t0aGlzLmNvbnN1bWUoKS50ZXh0XSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnBlZWsoKS5pZGVudGlmaWVyKSB7XG4gICAgICBwcmltYXJ5ID0gdGhpcy5pZGVudGlmaWVyKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnBlZWsoKS5jb25zdGFudCkge1xuICAgICAgcHJpbWFyeSA9IHRoaXMuY29uc3RhbnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50aHJvd0Vycm9yKCdub3QgYSBwcmltYXJ5IGV4cHJlc3Npb24nLCB0aGlzLnBlZWsoKSk7XG4gICAgfVxuXG4gICAgdmFyIG5leHQ7XG4gICAgd2hpbGUgKChuZXh0ID0gdGhpcy5leHBlY3QoJygnLCAnWycsICcuJykpKSB7XG4gICAgICBpZiAobmV4dC50ZXh0ID09PSAnKCcpIHtcbiAgICAgICAgcHJpbWFyeSA9IHt0eXBlOiBBU1QuQ2FsbEV4cHJlc3Npb24sIGNhbGxlZTogcHJpbWFyeSwgYXJndW1lbnRzOiB0aGlzLnBhcnNlQXJndW1lbnRzKCkgfTtcbiAgICAgICAgdGhpcy5jb25zdW1lKCcpJyk7XG4gICAgICB9IGVsc2UgaWYgKG5leHQudGV4dCA9PT0gJ1snKSB7XG4gICAgICAgIHByaW1hcnkgPSB7IHR5cGU6IEFTVC5NZW1iZXJFeHByZXNzaW9uLCBvYmplY3Q6IHByaW1hcnksIHByb3BlcnR5OiB0aGlzLmV4cHJlc3Npb24oKSwgY29tcHV0ZWQ6IHRydWUgfTtcbiAgICAgICAgdGhpcy5jb25zdW1lKCddJyk7XG4gICAgICB9IGVsc2UgaWYgKG5leHQudGV4dCA9PT0gJy4nKSB7XG4gICAgICAgIHByaW1hcnkgPSB7IHR5cGU6IEFTVC5NZW1iZXJFeHByZXNzaW9uLCBvYmplY3Q6IHByaW1hcnksIHByb3BlcnR5OiB0aGlzLmlkZW50aWZpZXIoKSwgY29tcHV0ZWQ6IGZhbHNlIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRocm93RXJyb3IoJ0lNUE9TU0lCTEUnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByaW1hcnk7XG4gIH0sXG5cbiAgZmlsdGVyOiBmdW5jdGlvbihiYXNlRXhwcmVzc2lvbikge1xuICAgIHZhciBhcmdzID0gW2Jhc2VFeHByZXNzaW9uXTtcbiAgICB2YXIgcmVzdWx0ID0ge3R5cGU6IEFTVC5DYWxsRXhwcmVzc2lvbiwgY2FsbGVlOiB0aGlzLmlkZW50aWZpZXIoKSwgYXJndW1lbnRzOiBhcmdzLCBmaWx0ZXI6IHRydWV9O1xuXG4gICAgd2hpbGUgKHRoaXMuZXhwZWN0KCc6JykpIHtcbiAgICAgIGFyZ3MucHVzaCh0aGlzLmV4cHJlc3Npb24oKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcblxuICBwYXJzZUFyZ3VtZW50czogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBpZiAodGhpcy5wZWVrVG9rZW4oKS50ZXh0ICE9PSAnKScpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgYXJncy5wdXNoKHRoaXMuZXhwcmVzc2lvbigpKTtcbiAgICAgIH0gd2hpbGUgKHRoaXMuZXhwZWN0KCcsJykpO1xuICAgIH1cbiAgICByZXR1cm4gYXJncztcbiAgfSxcblxuICBpZGVudGlmaWVyOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdG9rZW4gPSB0aGlzLmNvbnN1bWUoKTtcbiAgICBpZiAoIXRva2VuLmlkZW50aWZpZXIpIHtcbiAgICAgIHRoaXMudGhyb3dFcnJvcignaXMgbm90IGEgdmFsaWQgaWRlbnRpZmllcicsIHRva2VuKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdHlwZTogQVNULklkZW50aWZpZXIsIG5hbWU6IHRva2VuLnRleHQgfTtcbiAgfSxcblxuICBjb25zdGFudDogZnVuY3Rpb24oKSB7XG4gICAgLy8gVE9ETyBjaGVjayB0aGF0IGl0IGlzIGEgY29uc3RhbnRcbiAgICByZXR1cm4geyB0eXBlOiBBU1QuTGl0ZXJhbCwgdmFsdWU6IHRoaXMuY29uc3VtZSgpLnZhbHVlIH07XG4gIH0sXG5cbiAgYXJyYXlEZWNsYXJhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVsZW1lbnRzID0gW107XG4gICAgaWYgKHRoaXMucGVla1Rva2VuKCkudGV4dCAhPT0gJ10nKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGlmICh0aGlzLnBlZWsoJ10nKSkge1xuICAgICAgICAgIC8vIFN1cHBvcnQgdHJhaWxpbmcgY29tbWFzIHBlciBFUzUuMS5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50cy5wdXNoKHRoaXMuZXhwcmVzc2lvbigpKTtcbiAgICAgIH0gd2hpbGUgKHRoaXMuZXhwZWN0KCcsJykpO1xuICAgIH1cbiAgICB0aGlzLmNvbnN1bWUoJ10nKTtcblxuICAgIHJldHVybiB7IHR5cGU6IEFTVC5BcnJheUV4cHJlc3Npb24sIGVsZW1lbnRzOiBlbGVtZW50cyB9O1xuICB9LFxuXG4gIG9iamVjdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHByb3BlcnRpZXMgPSBbXSwgcHJvcGVydHk7XG4gICAgaWYgKHRoaXMucGVla1Rva2VuKCkudGV4dCAhPT0gJ30nKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGlmICh0aGlzLnBlZWsoJ30nKSkge1xuICAgICAgICAgIC8vIFN1cHBvcnQgdHJhaWxpbmcgY29tbWFzIHBlciBFUzUuMS5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBwcm9wZXJ0eSA9IHt0eXBlOiBBU1QuUHJvcGVydHksIGtpbmQ6ICdpbml0J307XG4gICAgICAgIGlmICh0aGlzLnBlZWsoKS5jb25zdGFudCkge1xuICAgICAgICAgIHByb3BlcnR5LmtleSA9IHRoaXMuY29uc3RhbnQoKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBlZWsoKS5pZGVudGlmaWVyKSB7XG4gICAgICAgICAgcHJvcGVydHkua2V5ID0gdGhpcy5pZGVudGlmaWVyKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy50aHJvd0Vycm9yKFwiaW52YWxpZCBrZXlcIiwgdGhpcy5wZWVrKCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29uc3VtZSgnOicpO1xuICAgICAgICBwcm9wZXJ0eS52YWx1ZSA9IHRoaXMuZXhwcmVzc2lvbigpO1xuICAgICAgICBwcm9wZXJ0aWVzLnB1c2gocHJvcGVydHkpO1xuICAgICAgfSB3aGlsZSAodGhpcy5leHBlY3QoJywnKSk7XG4gICAgfVxuICAgIHRoaXMuY29uc3VtZSgnfScpO1xuXG4gICAgcmV0dXJuIHt0eXBlOiBBU1QuT2JqZWN0RXhwcmVzc2lvbiwgcHJvcGVydGllczogcHJvcGVydGllcyB9O1xuICB9LFxuXG4gIHRocm93RXJyb3I6IGZ1bmN0aW9uKG1zZywgdG9rZW4pIHtcbiAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ3N5bnRheCcsXG4gICAgICAgICdTeW50YXggRXJyb3I6IFRva2VuIFxcJ3swfVxcJyB7MX0gYXQgY29sdW1uIHsyfSBvZiB0aGUgZXhwcmVzc2lvbiBbezN9XSBzdGFydGluZyBhdCBbezR9XS4nLFxuICAgICAgICAgIHRva2VuLnRleHQsIG1zZywgKHRva2VuLmluZGV4ICsgMSksIHRoaXMudGV4dCwgdGhpcy50ZXh0LnN1YnN0cmluZyh0b2tlbi5pbmRleCkpO1xuICB9LFxuXG4gIGNvbnN1bWU6IGZ1bmN0aW9uKGUxKSB7XG4gICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCd1ZW9lJywgJ1VuZXhwZWN0ZWQgZW5kIG9mIGV4cHJlc3Npb246IHswfScsIHRoaXMudGV4dCk7XG4gICAgfVxuXG4gICAgdmFyIHRva2VuID0gdGhpcy5leHBlY3QoZTEpO1xuICAgIGlmICghdG9rZW4pIHtcbiAgICAgIHRoaXMudGhyb3dFcnJvcignaXMgdW5leHBlY3RlZCwgZXhwZWN0aW5nIFsnICsgZTEgKyAnXScsIHRoaXMucGVlaygpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRva2VuO1xuICB9LFxuXG4gIHBlZWtUb2tlbjogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCd1ZW9lJywgJ1VuZXhwZWN0ZWQgZW5kIG9mIGV4cHJlc3Npb246IHswfScsIHRoaXMudGV4dCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRva2Vuc1swXTtcbiAgfSxcblxuICBwZWVrOiBmdW5jdGlvbihlMSwgZTIsIGUzLCBlNCkge1xuICAgIHJldHVybiB0aGlzLnBlZWtBaGVhZCgwLCBlMSwgZTIsIGUzLCBlNCk7XG4gIH0sXG5cbiAgcGVla0FoZWFkOiBmdW5jdGlvbihpLCBlMSwgZTIsIGUzLCBlNCkge1xuICAgIGlmICh0aGlzLnRva2Vucy5sZW5ndGggPiBpKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0aGlzLnRva2Vuc1tpXTtcbiAgICAgIHZhciB0ID0gdG9rZW4udGV4dDtcbiAgICAgIGlmICh0ID09PSBlMSB8fCB0ID09PSBlMiB8fCB0ID09PSBlMyB8fCB0ID09PSBlNCB8fFxuICAgICAgICAgICghZTEgJiYgIWUyICYmICFlMyAmJiAhZTQpKSB7XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIGV4cGVjdDogZnVuY3Rpb24oZTEsIGUyLCBlMywgZTQpIHtcbiAgICB2YXIgdG9rZW4gPSB0aGlzLnBlZWsoZTEsIGUyLCBlMywgZTQpO1xuICAgIGlmICh0b2tlbikge1xuICAgICAgdGhpcy50b2tlbnMuc2hpZnQoKTtcbiAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG5cbiAgLyogYHVuZGVmaW5lZGAgaXMgbm90IGEgY29uc3RhbnQsIGl0IGlzIGFuIGlkZW50aWZpZXIsXG4gICAqIGJ1dCB1c2luZyBpdCBhcyBhbiBpZGVudGlmaWVyIGlzIG5vdCBzdXBwb3J0ZWRcbiAgICovXG4gIGNvbnN0YW50czoge1xuICAgICd0cnVlJzogeyB0eXBlOiBBU1QuTGl0ZXJhbCwgdmFsdWU6IHRydWUgfSxcbiAgICAnZmFsc2UnOiB7IHR5cGU6IEFTVC5MaXRlcmFsLCB2YWx1ZTogZmFsc2UgfSxcbiAgICAnbnVsbCc6IHsgdHlwZTogQVNULkxpdGVyYWwsIHZhbHVlOiBudWxsIH0sXG4gICAgJ3VuZGVmaW5lZCc6IHt0eXBlOiBBU1QuTGl0ZXJhbCwgdmFsdWU6IHVuZGVmaW5lZCB9LFxuICAgICd0aGlzJzoge3R5cGU6IEFTVC5UaGlzRXhwcmVzc2lvbiB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGlmRGVmaW5lZCh2LCBkKSB7XG4gIHJldHVybiB0eXBlb2YgdiAhPT0gJ3VuZGVmaW5lZCcgPyB2IDogZDtcbn1cblxuZnVuY3Rpb24gcGx1c0ZuKGwsIHIpIHtcbiAgaWYgKHR5cGVvZiBsID09PSAndW5kZWZpbmVkJykgcmV0dXJuIHI7XG4gIGlmICh0eXBlb2YgciA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBsO1xuICByZXR1cm4gbCArIHI7XG59XG5cbmZ1bmN0aW9uIGlzU3RhdGVsZXNzKCRmaWx0ZXIsIGZpbHRlck5hbWUpIHtcbiAgdmFyIGZuID0gJGZpbHRlcihmaWx0ZXJOYW1lKTtcbiAgcmV0dXJuICFmbi4kc3RhdGVmdWw7XG59XG5cbmZ1bmN0aW9uIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LCAkZmlsdGVyKSB7XG4gIHZhciBhbGxDb25zdGFudHM7XG4gIHZhciBhcmdzVG9XYXRjaDtcbiAgc3dpdGNoIChhc3QudHlwZSkge1xuICBjYXNlIEFTVC5Qcm9ncmFtOlxuICAgIGFsbENvbnN0YW50cyA9IHRydWU7XG4gICAgZm9yRWFjaChhc3QuYm9keSwgZnVuY3Rpb24oZXhwcikge1xuICAgICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhleHByLmV4cHJlc3Npb24sICRmaWx0ZXIpO1xuICAgICAgYWxsQ29uc3RhbnRzID0gYWxsQ29uc3RhbnRzICYmIGV4cHIuZXhwcmVzc2lvbi5jb25zdGFudDtcbiAgICB9KTtcbiAgICBhc3QuY29uc3RhbnQgPSBhbGxDb25zdGFudHM7XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULkxpdGVyYWw6XG4gICAgYXN0LmNvbnN0YW50ID0gdHJ1ZTtcbiAgICBhc3QudG9XYXRjaCA9IFtdO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5VbmFyeUV4cHJlc3Npb246XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QuYXJndW1lbnQsICRmaWx0ZXIpO1xuICAgIGFzdC5jb25zdGFudCA9IGFzdC5hcmd1bWVudC5jb25zdGFudDtcbiAgICBhc3QudG9XYXRjaCA9IGFzdC5hcmd1bWVudC50b1dhdGNoO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5CaW5hcnlFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmxlZnQsICRmaWx0ZXIpO1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnJpZ2h0LCAkZmlsdGVyKTtcbiAgICBhc3QuY29uc3RhbnQgPSBhc3QubGVmdC5jb25zdGFudCAmJiBhc3QucmlnaHQuY29uc3RhbnQ7XG4gICAgYXN0LnRvV2F0Y2ggPSBhc3QubGVmdC50b1dhdGNoLmNvbmNhdChhc3QucmlnaHQudG9XYXRjaCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULkxvZ2ljYWxFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmxlZnQsICRmaWx0ZXIpO1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnJpZ2h0LCAkZmlsdGVyKTtcbiAgICBhc3QuY29uc3RhbnQgPSBhc3QubGVmdC5jb25zdGFudCAmJiBhc3QucmlnaHQuY29uc3RhbnQ7XG4gICAgYXN0LnRvV2F0Y2ggPSBhc3QuY29uc3RhbnQgPyBbXSA6IFthc3RdO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5Db25kaXRpb25hbEV4cHJlc3Npb246XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QudGVzdCwgJGZpbHRlcik7XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QuYWx0ZXJuYXRlLCAkZmlsdGVyKTtcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5jb25zZXF1ZW50LCAkZmlsdGVyKTtcbiAgICBhc3QuY29uc3RhbnQgPSBhc3QudGVzdC5jb25zdGFudCAmJiBhc3QuYWx0ZXJuYXRlLmNvbnN0YW50ICYmIGFzdC5jb25zZXF1ZW50LmNvbnN0YW50O1xuICAgIGFzdC50b1dhdGNoID0gYXN0LmNvbnN0YW50ID8gW10gOiBbYXN0XTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuSWRlbnRpZmllcjpcbiAgICBhc3QuY29uc3RhbnQgPSBmYWxzZTtcbiAgICBhc3QudG9XYXRjaCA9IFthc3RdO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5NZW1iZXJFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0Lm9iamVjdCwgJGZpbHRlcik7XG4gICAgaWYgKGFzdC5jb21wdXRlZCkge1xuICAgICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QucHJvcGVydHksICRmaWx0ZXIpO1xuICAgIH1cbiAgICBhc3QuY29uc3RhbnQgPSBhc3Qub2JqZWN0LmNvbnN0YW50ICYmICghYXN0LmNvbXB1dGVkIHx8IGFzdC5wcm9wZXJ0eS5jb25zdGFudCk7XG4gICAgYXN0LnRvV2F0Y2ggPSBbYXN0XTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuQ2FsbEV4cHJlc3Npb246XG4gICAgYWxsQ29uc3RhbnRzID0gYXN0LmZpbHRlciA/IGlzU3RhdGVsZXNzKCRmaWx0ZXIsIGFzdC5jYWxsZWUubmFtZSkgOiBmYWxzZTtcbiAgICBhcmdzVG9XYXRjaCA9IFtdO1xuICAgIGZvckVhY2goYXN0LmFyZ3VtZW50cywgZnVuY3Rpb24oZXhwcikge1xuICAgICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhleHByLCAkZmlsdGVyKTtcbiAgICAgIGFsbENvbnN0YW50cyA9IGFsbENvbnN0YW50cyAmJiBleHByLmNvbnN0YW50O1xuICAgICAgaWYgKCFleHByLmNvbnN0YW50KSB7XG4gICAgICAgIGFyZ3NUb1dhdGNoLnB1c2guYXBwbHkoYXJnc1RvV2F0Y2gsIGV4cHIudG9XYXRjaCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgYXN0LmNvbnN0YW50ID0gYWxsQ29uc3RhbnRzO1xuICAgIGFzdC50b1dhdGNoID0gYXN0LmZpbHRlciAmJiBpc1N0YXRlbGVzcygkZmlsdGVyLCBhc3QuY2FsbGVlLm5hbWUpID8gYXJnc1RvV2F0Y2ggOiBbYXN0XTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuQXNzaWdubWVudEV4cHJlc3Npb246XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QubGVmdCwgJGZpbHRlcik7XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QucmlnaHQsICRmaWx0ZXIpO1xuICAgIGFzdC5jb25zdGFudCA9IGFzdC5sZWZ0LmNvbnN0YW50ICYmIGFzdC5yaWdodC5jb25zdGFudDtcbiAgICBhc3QudG9XYXRjaCA9IFthc3RdO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5BcnJheUV4cHJlc3Npb246XG4gICAgYWxsQ29uc3RhbnRzID0gdHJ1ZTtcbiAgICBhcmdzVG9XYXRjaCA9IFtdO1xuICAgIGZvckVhY2goYXN0LmVsZW1lbnRzLCBmdW5jdGlvbihleHByKSB7XG4gICAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGV4cHIsICRmaWx0ZXIpO1xuICAgICAgYWxsQ29uc3RhbnRzID0gYWxsQ29uc3RhbnRzICYmIGV4cHIuY29uc3RhbnQ7XG4gICAgICBpZiAoIWV4cHIuY29uc3RhbnQpIHtcbiAgICAgICAgYXJnc1RvV2F0Y2gucHVzaC5hcHBseShhcmdzVG9XYXRjaCwgZXhwci50b1dhdGNoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBhc3QuY29uc3RhbnQgPSBhbGxDb25zdGFudHM7XG4gICAgYXN0LnRvV2F0Y2ggPSBhcmdzVG9XYXRjaDtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuT2JqZWN0RXhwcmVzc2lvbjpcbiAgICBhbGxDb25zdGFudHMgPSB0cnVlO1xuICAgIGFyZ3NUb1dhdGNoID0gW107XG4gICAgZm9yRWFjaChhc3QucHJvcGVydGllcywgZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMocHJvcGVydHkudmFsdWUsICRmaWx0ZXIpO1xuICAgICAgYWxsQ29uc3RhbnRzID0gYWxsQ29uc3RhbnRzICYmIHByb3BlcnR5LnZhbHVlLmNvbnN0YW50O1xuICAgICAgaWYgKCFwcm9wZXJ0eS52YWx1ZS5jb25zdGFudCkge1xuICAgICAgICBhcmdzVG9XYXRjaC5wdXNoLmFwcGx5KGFyZ3NUb1dhdGNoLCBwcm9wZXJ0eS52YWx1ZS50b1dhdGNoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBhc3QuY29uc3RhbnQgPSBhbGxDb25zdGFudHM7XG4gICAgYXN0LnRvV2F0Y2ggPSBhcmdzVG9XYXRjaDtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuVGhpc0V4cHJlc3Npb246XG4gICAgYXN0LmNvbnN0YW50ID0gZmFsc2U7XG4gICAgYXN0LnRvV2F0Y2ggPSBbXTtcbiAgICBicmVhaztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRJbnB1dHMoYm9keSkge1xuICBpZiAoYm9keS5sZW5ndGggIT0gMSkgcmV0dXJuO1xuICB2YXIgbGFzdEV4cHJlc3Npb24gPSBib2R5WzBdLmV4cHJlc3Npb247XG4gIHZhciBjYW5kaWRhdGUgPSBsYXN0RXhwcmVzc2lvbi50b1dhdGNoO1xuICBpZiAoY2FuZGlkYXRlLmxlbmd0aCAhPT0gMSkgcmV0dXJuIGNhbmRpZGF0ZTtcbiAgcmV0dXJuIGNhbmRpZGF0ZVswXSAhPT0gbGFzdEV4cHJlc3Npb24gPyBjYW5kaWRhdGUgOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGlzQXNzaWduYWJsZShhc3QpIHtcbiAgcmV0dXJuIGFzdC50eXBlID09PSBBU1QuSWRlbnRpZmllciB8fCBhc3QudHlwZSA9PT0gQVNULk1lbWJlckV4cHJlc3Npb247XG59XG5cbmZ1bmN0aW9uIGFzc2lnbmFibGVBU1QoYXN0KSB7XG4gIGlmIChhc3QuYm9keS5sZW5ndGggPT09IDEgJiYgaXNBc3NpZ25hYmxlKGFzdC5ib2R5WzBdLmV4cHJlc3Npb24pKSB7XG4gICAgcmV0dXJuIHt0eXBlOiBBU1QuQXNzaWdubWVudEV4cHJlc3Npb24sIGxlZnQ6IGFzdC5ib2R5WzBdLmV4cHJlc3Npb24sIHJpZ2h0OiB7dHlwZTogQVNULk5HVmFsdWVQYXJhbWV0ZXJ9LCBvcGVyYXRvcjogJz0nfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0xpdGVyYWwoYXN0KSB7XG4gIHJldHVybiBhc3QuYm9keS5sZW5ndGggPT09IDAgfHxcbiAgICAgIGFzdC5ib2R5Lmxlbmd0aCA9PT0gMSAmJiAoXG4gICAgICBhc3QuYm9keVswXS5leHByZXNzaW9uLnR5cGUgPT09IEFTVC5MaXRlcmFsIHx8XG4gICAgICBhc3QuYm9keVswXS5leHByZXNzaW9uLnR5cGUgPT09IEFTVC5BcnJheUV4cHJlc3Npb24gfHxcbiAgICAgIGFzdC5ib2R5WzBdLmV4cHJlc3Npb24udHlwZSA9PT0gQVNULk9iamVjdEV4cHJlc3Npb24pO1xufVxuXG5mdW5jdGlvbiBpc0NvbnN0YW50KGFzdCkge1xuICByZXR1cm4gYXN0LmNvbnN0YW50O1xufVxuXG5mdW5jdGlvbiBBU1RDb21waWxlcihhc3RCdWlsZGVyLCAkZmlsdGVyKSB7XG4gIHRoaXMuYXN0QnVpbGRlciA9IGFzdEJ1aWxkZXI7XG4gIHRoaXMuJGZpbHRlciA9ICRmaWx0ZXI7XG59XG5cbkFTVENvbXBpbGVyLnByb3RvdHlwZSA9IHtcbiAgY29tcGlsZTogZnVuY3Rpb24oZXhwcmVzc2lvbiwgZXhwZW5zaXZlQ2hlY2tzKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBhc3QgPSB0aGlzLmFzdEJ1aWxkZXIuYXN0KGV4cHJlc3Npb24pO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBuZXh0SWQ6IDAsXG4gICAgICBmaWx0ZXJzOiB7fSxcbiAgICAgIGV4cGVuc2l2ZUNoZWNrczogZXhwZW5zaXZlQ2hlY2tzLFxuICAgICAgZm46IHt2YXJzOiBbXSwgYm9keTogW10sIG93bjoge319LFxuICAgICAgYXNzaWduOiB7dmFyczogW10sIGJvZHk6IFtdLCBvd246IHt9fSxcbiAgICAgIGlucHV0czogW11cbiAgICB9O1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LCBzZWxmLiRmaWx0ZXIpO1xuICAgIHZhciBleHRyYSA9ICcnO1xuICAgIHZhciBhc3NpZ25hYmxlO1xuICAgIHRoaXMuc3RhZ2UgPSAnYXNzaWduJztcbiAgICBpZiAoKGFzc2lnbmFibGUgPSBhc3NpZ25hYmxlQVNUKGFzdCkpKSB7XG4gICAgICB0aGlzLnN0YXRlLmNvbXB1dGluZyA9ICdhc3NpZ24nO1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMubmV4dElkKCk7XG4gICAgICB0aGlzLnJlY3Vyc2UoYXNzaWduYWJsZSwgcmVzdWx0KTtcbiAgICAgIHRoaXMucmV0dXJuXyhyZXN1bHQpO1xuICAgICAgZXh0cmEgPSAnZm4uYXNzaWduPScgKyB0aGlzLmdlbmVyYXRlRnVuY3Rpb24oJ2Fzc2lnbicsICdzLHYsbCcpO1xuICAgIH1cbiAgICB2YXIgdG9XYXRjaCA9IGdldElucHV0cyhhc3QuYm9keSk7XG4gICAgc2VsZi5zdGFnZSA9ICdpbnB1dHMnO1xuICAgIGZvckVhY2godG9XYXRjaCwgZnVuY3Rpb24od2F0Y2gsIGtleSkge1xuICAgICAgdmFyIGZuS2V5ID0gJ2ZuJyArIGtleTtcbiAgICAgIHNlbGYuc3RhdGVbZm5LZXldID0ge3ZhcnM6IFtdLCBib2R5OiBbXSwgb3duOiB7fX07XG4gICAgICBzZWxmLnN0YXRlLmNvbXB1dGluZyA9IGZuS2V5O1xuICAgICAgdmFyIGludG9JZCA9IHNlbGYubmV4dElkKCk7XG4gICAgICBzZWxmLnJlY3Vyc2Uod2F0Y2gsIGludG9JZCk7XG4gICAgICBzZWxmLnJldHVybl8oaW50b0lkKTtcbiAgICAgIHNlbGYuc3RhdGUuaW5wdXRzLnB1c2goZm5LZXkpO1xuICAgICAgd2F0Y2gud2F0Y2hJZCA9IGtleTtcbiAgICB9KTtcbiAgICB0aGlzLnN0YXRlLmNvbXB1dGluZyA9ICdmbic7XG4gICAgdGhpcy5zdGFnZSA9ICdtYWluJztcbiAgICB0aGlzLnJlY3Vyc2UoYXN0KTtcbiAgICB2YXIgZm5TdHJpbmcgPVxuICAgICAgLy8gVGhlIGJ1aWxkIGFuZCBtaW5pZmljYXRpb24gc3RlcHMgcmVtb3ZlIHRoZSBzdHJpbmcgXCJ1c2Ugc3RyaWN0XCIgZnJvbSB0aGUgY29kZSwgYnV0IHRoaXMgaXMgZG9uZSB1c2luZyBhIHJlZ2V4LlxuICAgICAgLy8gVGhpcyBpcyBhIHdvcmthcm91bmQgZm9yIHRoaXMgdW50aWwgd2UgZG8gYSBiZXR0ZXIgam9iIGF0IG9ubHkgcmVtb3ZpbmcgdGhlIHByZWZpeCBvbmx5IHdoZW4gd2Ugc2hvdWxkLlxuICAgICAgJ1wiJyArIHRoaXMuVVNFICsgJyAnICsgdGhpcy5TVFJJQ1QgKyAnXCI7XFxuJyArXG4gICAgICB0aGlzLmZpbHRlclByZWZpeCgpICtcbiAgICAgICd2YXIgZm49JyArIHRoaXMuZ2VuZXJhdGVGdW5jdGlvbignZm4nLCAncyxsLGEsaScpICtcbiAgICAgIGV4dHJhICtcbiAgICAgIHRoaXMud2F0Y2hGbnMoKSArXG4gICAgICAncmV0dXJuIGZuOyc7XG5cbiAgICAvKiBqc2hpbnQgLVcwNTQgKi9cbiAgICB2YXIgZm4gPSAobmV3IEZ1bmN0aW9uKCckZmlsdGVyJyxcbiAgICAgICAgJ2Vuc3VyZVNhZmVNZW1iZXJOYW1lJyxcbiAgICAgICAgJ2Vuc3VyZVNhZmVPYmplY3QnLFxuICAgICAgICAnZW5zdXJlU2FmZUZ1bmN0aW9uJyxcbiAgICAgICAgJ2dldFN0cmluZ1ZhbHVlJyxcbiAgICAgICAgJ2Vuc3VyZVNhZmVBc3NpZ25Db250ZXh0JyxcbiAgICAgICAgJ2lmRGVmaW5lZCcsXG4gICAgICAgICdwbHVzJyxcbiAgICAgICAgJ3RleHQnLFxuICAgICAgICBmblN0cmluZykpKFxuICAgICAgICAgIHRoaXMuJGZpbHRlcixcbiAgICAgICAgICBlbnN1cmVTYWZlTWVtYmVyTmFtZSxcbiAgICAgICAgICBlbnN1cmVTYWZlT2JqZWN0LFxuICAgICAgICAgIGVuc3VyZVNhZmVGdW5jdGlvbixcbiAgICAgICAgICBnZXRTdHJpbmdWYWx1ZSxcbiAgICAgICAgICBlbnN1cmVTYWZlQXNzaWduQ29udGV4dCxcbiAgICAgICAgICBpZkRlZmluZWQsXG4gICAgICAgICAgcGx1c0ZuLFxuICAgICAgICAgIGV4cHJlc3Npb24pO1xuICAgIC8qIGpzaGludCArVzA1NCAqL1xuICAgIHRoaXMuc3RhdGUgPSB0aGlzLnN0YWdlID0gdW5kZWZpbmVkO1xuICAgIGZuLmxpdGVyYWwgPSBpc0xpdGVyYWwoYXN0KTtcbiAgICBmbi5jb25zdGFudCA9IGlzQ29uc3RhbnQoYXN0KTtcbiAgICByZXR1cm4gZm47XG4gIH0sXG5cbiAgVVNFOiAndXNlJyxcblxuICBTVFJJQ1Q6ICdzdHJpY3QnLFxuXG4gIHdhdGNoRm5zOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGZucyA9IHRoaXMuc3RhdGUuaW5wdXRzO1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBmb3JFYWNoKGZucywgZnVuY3Rpb24obmFtZSkge1xuICAgICAgcmVzdWx0LnB1c2goJ3ZhciAnICsgbmFtZSArICc9JyArIHNlbGYuZ2VuZXJhdGVGdW5jdGlvbihuYW1lLCAncycpKTtcbiAgICB9KTtcbiAgICBpZiAoZm5zLmxlbmd0aCkge1xuICAgICAgcmVzdWx0LnB1c2goJ2ZuLmlucHV0cz1bJyArIGZucy5qb2luKCcsJykgKyAnXTsnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdC5qb2luKCcnKTtcbiAgfSxcblxuICBnZW5lcmF0ZUZ1bmN0aW9uOiBmdW5jdGlvbihuYW1lLCBwYXJhbXMpIHtcbiAgICByZXR1cm4gJ2Z1bmN0aW9uKCcgKyBwYXJhbXMgKyAnKXsnICtcbiAgICAgICAgdGhpcy52YXJzUHJlZml4KG5hbWUpICtcbiAgICAgICAgdGhpcy5ib2R5KG5hbWUpICtcbiAgICAgICAgJ307JztcbiAgfSxcblxuICBmaWx0ZXJQcmVmaXg6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBmb3JFYWNoKHRoaXMuc3RhdGUuZmlsdGVycywgZnVuY3Rpb24oaWQsIGZpbHRlcikge1xuICAgICAgcGFydHMucHVzaChpZCArICc9JGZpbHRlcignICsgc2VsZi5lc2NhcGUoZmlsdGVyKSArICcpJyk7XG4gICAgfSk7XG4gICAgaWYgKHBhcnRzLmxlbmd0aCkgcmV0dXJuICd2YXIgJyArIHBhcnRzLmpvaW4oJywnKSArICc7JztcbiAgICByZXR1cm4gJyc7XG4gIH0sXG5cbiAgdmFyc1ByZWZpeDogZnVuY3Rpb24oc2VjdGlvbikge1xuICAgIHJldHVybiB0aGlzLnN0YXRlW3NlY3Rpb25dLnZhcnMubGVuZ3RoID8gJ3ZhciAnICsgdGhpcy5zdGF0ZVtzZWN0aW9uXS52YXJzLmpvaW4oJywnKSArICc7JyA6ICcnO1xuICB9LFxuXG4gIGJvZHk6IGZ1bmN0aW9uKHNlY3Rpb24pIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZVtzZWN0aW9uXS5ib2R5LmpvaW4oJycpO1xuICB9LFxuXG4gIHJlY3Vyc2U6IGZ1bmN0aW9uKGFzdCwgaW50b0lkLCBuYW1lSWQsIHJlY3Vyc2lvbkZuLCBjcmVhdGUsIHNraXBXYXRjaElkQ2hlY2spIHtcbiAgICB2YXIgbGVmdCwgcmlnaHQsIHNlbGYgPSB0aGlzLCBhcmdzLCBleHByZXNzaW9uO1xuICAgIHJlY3Vyc2lvbkZuID0gcmVjdXJzaW9uRm4gfHwgbm9vcDtcbiAgICBpZiAoIXNraXBXYXRjaElkQ2hlY2sgJiYgaXNEZWZpbmVkKGFzdC53YXRjaElkKSkge1xuICAgICAgaW50b0lkID0gaW50b0lkIHx8IHRoaXMubmV4dElkKCk7XG4gICAgICB0aGlzLmlmXygnaScsXG4gICAgICAgIHRoaXMubGF6eUFzc2lnbihpbnRvSWQsIHRoaXMuY29tcHV0ZWRNZW1iZXIoJ2knLCBhc3Qud2F0Y2hJZCkpLFxuICAgICAgICB0aGlzLmxhenlSZWN1cnNlKGFzdCwgaW50b0lkLCBuYW1lSWQsIHJlY3Vyc2lvbkZuLCBjcmVhdGUsIHRydWUpXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2l0Y2ggKGFzdC50eXBlKSB7XG4gICAgY2FzZSBBU1QuUHJvZ3JhbTpcbiAgICAgIGZvckVhY2goYXN0LmJvZHksIGZ1bmN0aW9uKGV4cHJlc3Npb24sIHBvcykge1xuICAgICAgICBzZWxmLnJlY3Vyc2UoZXhwcmVzc2lvbi5leHByZXNzaW9uLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZnVuY3Rpb24oZXhwcikgeyByaWdodCA9IGV4cHI7IH0pO1xuICAgICAgICBpZiAocG9zICE9PSBhc3QuYm9keS5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgc2VsZi5jdXJyZW50KCkuYm9keS5wdXNoKHJpZ2h0LCAnOycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYucmV0dXJuXyhyaWdodCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuTGl0ZXJhbDpcbiAgICAgIGV4cHJlc3Npb24gPSB0aGlzLmVzY2FwZShhc3QudmFsdWUpO1xuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGV4cHJlc3Npb24pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuVW5hcnlFeHByZXNzaW9uOlxuICAgICAgdGhpcy5yZWN1cnNlKGFzdC5hcmd1bWVudCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGV4cHIpIHsgcmlnaHQgPSBleHByOyB9KTtcbiAgICAgIGV4cHJlc3Npb24gPSBhc3Qub3BlcmF0b3IgKyAnKCcgKyB0aGlzLmlmRGVmaW5lZChyaWdodCwgMCkgKyAnKSc7XG4gICAgICB0aGlzLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgcmVjdXJzaW9uRm4oZXhwcmVzc2lvbik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5CaW5hcnlFeHByZXNzaW9uOlxuICAgICAgdGhpcy5yZWN1cnNlKGFzdC5sZWZ0LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZnVuY3Rpb24oZXhwcikgeyBsZWZ0ID0gZXhwcjsgfSk7XG4gICAgICB0aGlzLnJlY3Vyc2UoYXN0LnJpZ2h0LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZnVuY3Rpb24oZXhwcikgeyByaWdodCA9IGV4cHI7IH0pO1xuICAgICAgaWYgKGFzdC5vcGVyYXRvciA9PT0gJysnKSB7XG4gICAgICAgIGV4cHJlc3Npb24gPSB0aGlzLnBsdXMobGVmdCwgcmlnaHQpO1xuICAgICAgfSBlbHNlIGlmIChhc3Qub3BlcmF0b3IgPT09ICctJykge1xuICAgICAgICBleHByZXNzaW9uID0gdGhpcy5pZkRlZmluZWQobGVmdCwgMCkgKyBhc3Qub3BlcmF0b3IgKyB0aGlzLmlmRGVmaW5lZChyaWdodCwgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleHByZXNzaW9uID0gJygnICsgbGVmdCArICcpJyArIGFzdC5vcGVyYXRvciArICcoJyArIHJpZ2h0ICsgJyknO1xuICAgICAgfVxuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGV4cHJlc3Npb24pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuTG9naWNhbEV4cHJlc3Npb246XG4gICAgICBpbnRvSWQgPSBpbnRvSWQgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgIHNlbGYucmVjdXJzZShhc3QubGVmdCwgaW50b0lkKTtcbiAgICAgIHNlbGYuaWZfKGFzdC5vcGVyYXRvciA9PT0gJyYmJyA/IGludG9JZCA6IHNlbGYubm90KGludG9JZCksIHNlbGYubGF6eVJlY3Vyc2UoYXN0LnJpZ2h0LCBpbnRvSWQpKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5Db25kaXRpb25hbEV4cHJlc3Npb246XG4gICAgICBpbnRvSWQgPSBpbnRvSWQgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgIHNlbGYucmVjdXJzZShhc3QudGVzdCwgaW50b0lkKTtcbiAgICAgIHNlbGYuaWZfKGludG9JZCwgc2VsZi5sYXp5UmVjdXJzZShhc3QuYWx0ZXJuYXRlLCBpbnRvSWQpLCBzZWxmLmxhenlSZWN1cnNlKGFzdC5jb25zZXF1ZW50LCBpbnRvSWQpKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5JZGVudGlmaWVyOlxuICAgICAgaW50b0lkID0gaW50b0lkIHx8IHRoaXMubmV4dElkKCk7XG4gICAgICBpZiAobmFtZUlkKSB7XG4gICAgICAgIG5hbWVJZC5jb250ZXh0ID0gc2VsZi5zdGFnZSA9PT0gJ2lucHV0cycgPyAncycgOiB0aGlzLmFzc2lnbih0aGlzLm5leHRJZCgpLCB0aGlzLmdldEhhc093blByb3BlcnR5KCdsJywgYXN0Lm5hbWUpICsgJz9sOnMnKTtcbiAgICAgICAgbmFtZUlkLmNvbXB1dGVkID0gZmFsc2U7XG4gICAgICAgIG5hbWVJZC5uYW1lID0gYXN0Lm5hbWU7XG4gICAgICB9XG4gICAgICBlbnN1cmVTYWZlTWVtYmVyTmFtZShhc3QubmFtZSk7XG4gICAgICBzZWxmLmlmXyhzZWxmLnN0YWdlID09PSAnaW5wdXRzJyB8fCBzZWxmLm5vdChzZWxmLmdldEhhc093blByb3BlcnR5KCdsJywgYXN0Lm5hbWUpKSxcbiAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi5pZl8oc2VsZi5zdGFnZSA9PT0gJ2lucHV0cycgfHwgJ3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChjcmVhdGUgJiYgY3JlYXRlICE9PSAxKSB7XG4gICAgICAgICAgICAgIHNlbGYuaWZfKFxuICAgICAgICAgICAgICAgIHNlbGYubm90KHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIoJ3MnLCBhc3QubmFtZSkpLFxuICAgICAgICAgICAgICAgIHNlbGYubGF6eUFzc2lnbihzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKCdzJywgYXN0Lm5hbWUpLCAne30nKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIoJ3MnLCBhc3QubmFtZSkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LCBpbnRvSWQgJiYgc2VsZi5sYXp5QXNzaWduKGludG9JZCwgc2VsZi5ub25Db21wdXRlZE1lbWJlcignbCcsIGFzdC5uYW1lKSlcbiAgICAgICAgKTtcbiAgICAgIGlmIChzZWxmLnN0YXRlLmV4cGVuc2l2ZUNoZWNrcyB8fCBpc1Bvc3NpYmx5RGFuZ2Vyb3VzTWVtYmVyTmFtZShhc3QubmFtZSkpIHtcbiAgICAgICAgc2VsZi5hZGRFbnN1cmVTYWZlT2JqZWN0KGludG9JZCk7XG4gICAgICB9XG4gICAgICByZWN1cnNpb25GbihpbnRvSWQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuTWVtYmVyRXhwcmVzc2lvbjpcbiAgICAgIGxlZnQgPSBuYW1lSWQgJiYgKG5hbWVJZC5jb250ZXh0ID0gdGhpcy5uZXh0SWQoKSkgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgIGludG9JZCA9IGludG9JZCB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgc2VsZi5yZWN1cnNlKGFzdC5vYmplY3QsIGxlZnQsIHVuZGVmaW5lZCwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYuaWZfKHNlbGYubm90TnVsbChsZWZ0KSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGFzdC5jb21wdXRlZCkge1xuICAgICAgICAgICAgcmlnaHQgPSBzZWxmLm5leHRJZCgpO1xuICAgICAgICAgICAgc2VsZi5yZWN1cnNlKGFzdC5wcm9wZXJ0eSwgcmlnaHQpO1xuICAgICAgICAgICAgc2VsZi5nZXRTdHJpbmdWYWx1ZShyaWdodCk7XG4gICAgICAgICAgICBzZWxmLmFkZEVuc3VyZVNhZmVNZW1iZXJOYW1lKHJpZ2h0KTtcbiAgICAgICAgICAgIGlmIChjcmVhdGUgJiYgY3JlYXRlICE9PSAxKSB7XG4gICAgICAgICAgICAgIHNlbGYuaWZfKHNlbGYubm90KHNlbGYuY29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQpKSwgc2VsZi5sYXp5QXNzaWduKHNlbGYuY29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQpLCAne30nKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleHByZXNzaW9uID0gc2VsZi5lbnN1cmVTYWZlT2JqZWN0KHNlbGYuY29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQpKTtcbiAgICAgICAgICAgIHNlbGYuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICAgICAgICBpZiAobmFtZUlkKSB7XG4gICAgICAgICAgICAgIG5hbWVJZC5jb21wdXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgIG5hbWVJZC5uYW1lID0gcmlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVuc3VyZVNhZmVNZW1iZXJOYW1lKGFzdC5wcm9wZXJ0eS5uYW1lKTtcbiAgICAgICAgICAgIGlmIChjcmVhdGUgJiYgY3JlYXRlICE9PSAxKSB7XG4gICAgICAgICAgICAgIHNlbGYuaWZfKHNlbGYubm90KHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIobGVmdCwgYXN0LnByb3BlcnR5Lm5hbWUpKSwgc2VsZi5sYXp5QXNzaWduKHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIobGVmdCwgYXN0LnByb3BlcnR5Lm5hbWUpLCAne30nKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleHByZXNzaW9uID0gc2VsZi5ub25Db21wdXRlZE1lbWJlcihsZWZ0LCBhc3QucHJvcGVydHkubmFtZSk7XG4gICAgICAgICAgICBpZiAoc2VsZi5zdGF0ZS5leHBlbnNpdmVDaGVja3MgfHwgaXNQb3NzaWJseURhbmdlcm91c01lbWJlck5hbWUoYXN0LnByb3BlcnR5Lm5hbWUpKSB7XG4gICAgICAgICAgICAgIGV4cHJlc3Npb24gPSBzZWxmLmVuc3VyZVNhZmVPYmplY3QoZXhwcmVzc2lvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgICAgICAgaWYgKG5hbWVJZCkge1xuICAgICAgICAgICAgICBuYW1lSWQuY29tcHV0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgbmFtZUlkLm5hbWUgPSBhc3QucHJvcGVydHkubmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYuYXNzaWduKGludG9JZCwgJ3VuZGVmaW5lZCcpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmVjdXJzaW9uRm4oaW50b0lkKTtcbiAgICAgIH0sICEhY3JlYXRlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULkNhbGxFeHByZXNzaW9uOlxuICAgICAgaW50b0lkID0gaW50b0lkIHx8IHRoaXMubmV4dElkKCk7XG4gICAgICBpZiAoYXN0LmZpbHRlcikge1xuICAgICAgICByaWdodCA9IHNlbGYuZmlsdGVyKGFzdC5jYWxsZWUubmFtZSk7XG4gICAgICAgIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yRWFjaChhc3QuYXJndW1lbnRzLCBmdW5jdGlvbihleHByKSB7XG4gICAgICAgICAgdmFyIGFyZ3VtZW50ID0gc2VsZi5uZXh0SWQoKTtcbiAgICAgICAgICBzZWxmLnJlY3Vyc2UoZXhwciwgYXJndW1lbnQpO1xuICAgICAgICAgIGFyZ3MucHVzaChhcmd1bWVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICBleHByZXNzaW9uID0gcmlnaHQgKyAnKCcgKyBhcmdzLmpvaW4oJywnKSArICcpJztcbiAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgICAgcmVjdXJzaW9uRm4oaW50b0lkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJpZ2h0ID0gc2VsZi5uZXh0SWQoKTtcbiAgICAgICAgbGVmdCA9IHt9O1xuICAgICAgICBhcmdzID0gW107XG4gICAgICAgIHNlbGYucmVjdXJzZShhc3QuY2FsbGVlLCByaWdodCwgbGVmdCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi5pZl8oc2VsZi5ub3ROdWxsKHJpZ2h0KSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLmFkZEVuc3VyZVNhZmVGdW5jdGlvbihyaWdodCk7XG4gICAgICAgICAgICBmb3JFYWNoKGFzdC5hcmd1bWVudHMsIGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgICAgICAgICAgc2VsZi5yZWN1cnNlKGV4cHIsIHNlbGYubmV4dElkKCksIHVuZGVmaW5lZCwgZnVuY3Rpb24oYXJndW1lbnQpIHtcbiAgICAgICAgICAgICAgICBhcmdzLnB1c2goc2VsZi5lbnN1cmVTYWZlT2JqZWN0KGFyZ3VtZW50KSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAobGVmdC5uYW1lKSB7XG4gICAgICAgICAgICAgIGlmICghc2VsZi5zdGF0ZS5leHBlbnNpdmVDaGVja3MpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmFkZEVuc3VyZVNhZmVPYmplY3QobGVmdC5jb250ZXh0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBleHByZXNzaW9uID0gc2VsZi5tZW1iZXIobGVmdC5jb250ZXh0LCBsZWZ0Lm5hbWUsIGxlZnQuY29tcHV0ZWQpICsgJygnICsgYXJncy5qb2luKCcsJykgKyAnKSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBleHByZXNzaW9uID0gcmlnaHQgKyAnKCcgKyBhcmdzLmpvaW4oJywnKSArICcpJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV4cHJlc3Npb24gPSBzZWxmLmVuc3VyZVNhZmVPYmplY3QoZXhwcmVzc2lvbik7XG4gICAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCAndW5kZWZpbmVkJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmVjdXJzaW9uRm4oaW50b0lkKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5Bc3NpZ25tZW50RXhwcmVzc2lvbjpcbiAgICAgIHJpZ2h0ID0gdGhpcy5uZXh0SWQoKTtcbiAgICAgIGxlZnQgPSB7fTtcbiAgICAgIGlmICghaXNBc3NpZ25hYmxlKGFzdC5sZWZ0KSkge1xuICAgICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2x2YWwnLCAnVHJ5aW5nIHRvIGFzc2luZyBhIHZhbHVlIHRvIGEgbm9uIGwtdmFsdWUnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucmVjdXJzZShhc3QubGVmdCwgdW5kZWZpbmVkLCBsZWZ0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZi5pZl8oc2VsZi5ub3ROdWxsKGxlZnQuY29udGV4dCksIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYucmVjdXJzZShhc3QucmlnaHQsIHJpZ2h0KTtcbiAgICAgICAgICBzZWxmLmFkZEVuc3VyZVNhZmVPYmplY3Qoc2VsZi5tZW1iZXIobGVmdC5jb250ZXh0LCBsZWZ0Lm5hbWUsIGxlZnQuY29tcHV0ZWQpKTtcbiAgICAgICAgICBzZWxmLmFkZEVuc3VyZVNhZmVBc3NpZ25Db250ZXh0KGxlZnQuY29udGV4dCk7XG4gICAgICAgICAgZXhwcmVzc2lvbiA9IHNlbGYubWVtYmVyKGxlZnQuY29udGV4dCwgbGVmdC5uYW1lLCBsZWZ0LmNvbXB1dGVkKSArIGFzdC5vcGVyYXRvciArIHJpZ2h0O1xuICAgICAgICAgIHNlbGYuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICAgICAgcmVjdXJzaW9uRm4oaW50b0lkIHx8IGV4cHJlc3Npb24pO1xuICAgICAgICB9KTtcbiAgICAgIH0sIDEpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuQXJyYXlFeHByZXNzaW9uOlxuICAgICAgYXJncyA9IFtdO1xuICAgICAgZm9yRWFjaChhc3QuZWxlbWVudHMsIGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgICAgc2VsZi5yZWN1cnNlKGV4cHIsIHNlbGYubmV4dElkKCksIHVuZGVmaW5lZCwgZnVuY3Rpb24oYXJndW1lbnQpIHtcbiAgICAgICAgICBhcmdzLnB1c2goYXJndW1lbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgZXhwcmVzc2lvbiA9ICdbJyArIGFyZ3Muam9pbignLCcpICsgJ10nO1xuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGV4cHJlc3Npb24pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuT2JqZWN0RXhwcmVzc2lvbjpcbiAgICAgIGFyZ3MgPSBbXTtcbiAgICAgIGZvckVhY2goYXN0LnByb3BlcnRpZXMsIGZ1bmN0aW9uKHByb3BlcnR5KSB7XG4gICAgICAgIHNlbGYucmVjdXJzZShwcm9wZXJ0eS52YWx1ZSwgc2VsZi5uZXh0SWQoKSwgdW5kZWZpbmVkLCBmdW5jdGlvbihleHByKSB7XG4gICAgICAgICAgYXJncy5wdXNoKHNlbGYuZXNjYXBlKFxuICAgICAgICAgICAgICBwcm9wZXJ0eS5rZXkudHlwZSA9PT0gQVNULklkZW50aWZpZXIgPyBwcm9wZXJ0eS5rZXkubmFtZSA6XG4gICAgICAgICAgICAgICAgKCcnICsgcHJvcGVydHkua2V5LnZhbHVlKSkgK1xuICAgICAgICAgICAgICAnOicgKyBleHByKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGV4cHJlc3Npb24gPSAneycgKyBhcmdzLmpvaW4oJywnKSArICd9JztcbiAgICAgIHRoaXMuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICByZWN1cnNpb25GbihleHByZXNzaW9uKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULlRoaXNFeHByZXNzaW9uOlxuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCAncycpO1xuICAgICAgcmVjdXJzaW9uRm4oJ3MnKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULk5HVmFsdWVQYXJhbWV0ZXI6XG4gICAgICB0aGlzLmFzc2lnbihpbnRvSWQsICd2Jyk7XG4gICAgICByZWN1cnNpb25GbigndicpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9LFxuXG4gIGdldEhhc093blByb3BlcnR5OiBmdW5jdGlvbihlbGVtZW50LCBwcm9wZXJ0eSkge1xuICAgIHZhciBrZXkgPSBlbGVtZW50ICsgJy4nICsgcHJvcGVydHk7XG4gICAgdmFyIG93biA9IHRoaXMuY3VycmVudCgpLm93bjtcbiAgICBpZiAoIW93bi5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBvd25ba2V5XSA9IHRoaXMubmV4dElkKGZhbHNlLCBlbGVtZW50ICsgJyYmKCcgKyB0aGlzLmVzY2FwZShwcm9wZXJ0eSkgKyAnIGluICcgKyBlbGVtZW50ICsgJyknKTtcbiAgICB9XG4gICAgcmV0dXJuIG93bltrZXldO1xuICB9LFxuXG4gIGFzc2lnbjogZnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gICAgaWYgKCFpZCkgcmV0dXJuO1xuICAgIHRoaXMuY3VycmVudCgpLmJvZHkucHVzaChpZCwgJz0nLCB2YWx1ZSwgJzsnKTtcbiAgICByZXR1cm4gaWQ7XG4gIH0sXG5cbiAgZmlsdGVyOiBmdW5jdGlvbihmaWx0ZXJOYW1lKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLmZpbHRlcnMuaGFzT3duUHJvcGVydHkoZmlsdGVyTmFtZSkpIHtcbiAgICAgIHRoaXMuc3RhdGUuZmlsdGVyc1tmaWx0ZXJOYW1lXSA9IHRoaXMubmV4dElkKHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5maWx0ZXJzW2ZpbHRlck5hbWVdO1xuICB9LFxuXG4gIGlmRGVmaW5lZDogZnVuY3Rpb24oaWQsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHJldHVybiAnaWZEZWZpbmVkKCcgKyBpZCArICcsJyArIHRoaXMuZXNjYXBlKGRlZmF1bHRWYWx1ZSkgKyAnKSc7XG4gIH0sXG5cbiAgcGx1czogZnVuY3Rpb24obGVmdCwgcmlnaHQpIHtcbiAgICByZXR1cm4gJ3BsdXMoJyArIGxlZnQgKyAnLCcgKyByaWdodCArICcpJztcbiAgfSxcblxuICByZXR1cm5fOiBmdW5jdGlvbihpZCkge1xuICAgIHRoaXMuY3VycmVudCgpLmJvZHkucHVzaCgncmV0dXJuICcsIGlkLCAnOycpO1xuICB9LFxuXG4gIGlmXzogZnVuY3Rpb24odGVzdCwgYWx0ZXJuYXRlLCBjb25zZXF1ZW50KSB7XG4gICAgaWYgKHRlc3QgPT09IHRydWUpIHtcbiAgICAgIGFsdGVybmF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYm9keSA9IHRoaXMuY3VycmVudCgpLmJvZHk7XG4gICAgICBib2R5LnB1c2goJ2lmKCcsIHRlc3QsICcpeycpO1xuICAgICAgYWx0ZXJuYXRlKCk7XG4gICAgICBib2R5LnB1c2goJ30nKTtcbiAgICAgIGlmIChjb25zZXF1ZW50KSB7XG4gICAgICAgIGJvZHkucHVzaCgnZWxzZXsnKTtcbiAgICAgICAgY29uc2VxdWVudCgpO1xuICAgICAgICBib2R5LnB1c2goJ30nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgbm90OiBmdW5jdGlvbihleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuICchKCcgKyBleHByZXNzaW9uICsgJyknO1xuICB9LFxuXG4gIG5vdE51bGw6IGZ1bmN0aW9uKGV4cHJlc3Npb24pIHtcbiAgICByZXR1cm4gZXhwcmVzc2lvbiArICchPW51bGwnO1xuICB9LFxuXG4gIG5vbkNvbXB1dGVkTWVtYmVyOiBmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICAgIHJldHVybiBsZWZ0ICsgJy4nICsgcmlnaHQ7XG4gIH0sXG5cbiAgY29tcHV0ZWRNZW1iZXI6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gICAgcmV0dXJuIGxlZnQgKyAnWycgKyByaWdodCArICddJztcbiAgfSxcblxuICBtZW1iZXI6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb21wdXRlZCkge1xuICAgIGlmIChjb21wdXRlZCkgcmV0dXJuIHRoaXMuY29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQpO1xuICAgIHJldHVybiB0aGlzLm5vbkNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0KTtcbiAgfSxcblxuICBhZGRFbnN1cmVTYWZlT2JqZWN0OiBmdW5jdGlvbihpdGVtKSB7XG4gICAgdGhpcy5jdXJyZW50KCkuYm9keS5wdXNoKHRoaXMuZW5zdXJlU2FmZU9iamVjdChpdGVtKSwgJzsnKTtcbiAgfSxcblxuICBhZGRFbnN1cmVTYWZlTWVtYmVyTmFtZTogZnVuY3Rpb24oaXRlbSkge1xuICAgIHRoaXMuY3VycmVudCgpLmJvZHkucHVzaCh0aGlzLmVuc3VyZVNhZmVNZW1iZXJOYW1lKGl0ZW0pLCAnOycpO1xuICB9LFxuXG4gIGFkZEVuc3VyZVNhZmVGdW5jdGlvbjogZnVuY3Rpb24oaXRlbSkge1xuICAgIHRoaXMuY3VycmVudCgpLmJvZHkucHVzaCh0aGlzLmVuc3VyZVNhZmVGdW5jdGlvbihpdGVtKSwgJzsnKTtcbiAgfSxcblxuICBhZGRFbnN1cmVTYWZlQXNzaWduQ29udGV4dDogZnVuY3Rpb24oaXRlbSkge1xuICAgIHRoaXMuY3VycmVudCgpLmJvZHkucHVzaCh0aGlzLmVuc3VyZVNhZmVBc3NpZ25Db250ZXh0KGl0ZW0pLCAnOycpO1xuICB9LFxuXG4gIGVuc3VyZVNhZmVPYmplY3Q6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICByZXR1cm4gJ2Vuc3VyZVNhZmVPYmplY3QoJyArIGl0ZW0gKyAnLHRleHQpJztcbiAgfSxcblxuICBlbnN1cmVTYWZlTWVtYmVyTmFtZTogZnVuY3Rpb24oaXRlbSkge1xuICAgIHJldHVybiAnZW5zdXJlU2FmZU1lbWJlck5hbWUoJyArIGl0ZW0gKyAnLHRleHQpJztcbiAgfSxcblxuICBlbnN1cmVTYWZlRnVuY3Rpb246IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICByZXR1cm4gJ2Vuc3VyZVNhZmVGdW5jdGlvbignICsgaXRlbSArICcsdGV4dCknO1xuICB9LFxuXG4gIGdldFN0cmluZ1ZhbHVlOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgdGhpcy5hc3NpZ24oaXRlbSwgJ2dldFN0cmluZ1ZhbHVlKCcgKyBpdGVtICsgJyx0ZXh0KScpO1xuICB9LFxuXG4gIGVuc3VyZVNhZmVBc3NpZ25Db250ZXh0OiBmdW5jdGlvbihpdGVtKSB7XG4gICAgcmV0dXJuICdlbnN1cmVTYWZlQXNzaWduQ29udGV4dCgnICsgaXRlbSArICcsdGV4dCknO1xuICB9LFxuXG4gIGxhenlSZWN1cnNlOiBmdW5jdGlvbihhc3QsIGludG9JZCwgbmFtZUlkLCByZWN1cnNpb25GbiwgY3JlYXRlLCBza2lwV2F0Y2hJZENoZWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHNlbGYucmVjdXJzZShhc3QsIGludG9JZCwgbmFtZUlkLCByZWN1cnNpb25GbiwgY3JlYXRlLCBza2lwV2F0Y2hJZENoZWNrKTtcbiAgICB9O1xuICB9LFxuXG4gIGxhenlBc3NpZ246IGZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLmFzc2lnbihpZCwgdmFsdWUpO1xuICAgIH07XG4gIH0sXG5cbiAgc3RyaW5nRXNjYXBlUmVnZXg6IC9bXiBhLXpBLVowLTldL2csXG5cbiAgc3RyaW5nRXNjYXBlRm46IGZ1bmN0aW9uKGMpIHtcbiAgICByZXR1cm4gJ1xcXFx1JyArICgnMDAwMCcgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtNCk7XG4gIH0sXG5cbiAgZXNjYXBlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHJldHVybiBcIidcIiArIHZhbHVlLnJlcGxhY2UodGhpcy5zdHJpbmdFc2NhcGVSZWdleCwgdGhpcy5zdHJpbmdFc2NhcGVGbikgKyBcIidcIjtcbiAgICBpZiAoaXNOdW1iZXIodmFsdWUpKSByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICBpZiAodmFsdWUgPT09IHRydWUpIHJldHVybiAndHJ1ZSc7XG4gICAgaWYgKHZhbHVlID09PSBmYWxzZSkgcmV0dXJuICdmYWxzZSc7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJ251bGwnO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gJ3VuZGVmaW5lZCc7XG5cbiAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2VzYycsICdJTVBPU1NJQkxFJyk7XG4gIH0sXG5cbiAgbmV4dElkOiBmdW5jdGlvbihza2lwLCBpbml0KSB7XG4gICAgdmFyIGlkID0gJ3YnICsgKHRoaXMuc3RhdGUubmV4dElkKyspO1xuICAgIGlmICghc2tpcCkge1xuICAgICAgdGhpcy5jdXJyZW50KCkudmFycy5wdXNoKGlkICsgKGluaXQgPyAnPScgKyBpbml0IDogJycpKTtcbiAgICB9XG4gICAgcmV0dXJuIGlkO1xuICB9LFxuXG4gIGN1cnJlbnQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlW3RoaXMuc3RhdGUuY29tcHV0aW5nXTtcbiAgfVxufTtcblxuXG5mdW5jdGlvbiBBU1RJbnRlcnByZXRlcihhc3RCdWlsZGVyLCAkZmlsdGVyKSB7XG4gIHRoaXMuYXN0QnVpbGRlciA9IGFzdEJ1aWxkZXI7XG4gIHRoaXMuJGZpbHRlciA9ICRmaWx0ZXI7XG59XG5cbkFTVEludGVycHJldGVyLnByb3RvdHlwZSA9IHtcbiAgY29tcGlsZTogZnVuY3Rpb24oZXhwcmVzc2lvbiwgZXhwZW5zaXZlQ2hlY2tzKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBhc3QgPSB0aGlzLmFzdEJ1aWxkZXIuYXN0KGV4cHJlc3Npb24pO1xuICAgIHRoaXMuZXhwcmVzc2lvbiA9IGV4cHJlc3Npb247XG4gICAgdGhpcy5leHBlbnNpdmVDaGVja3MgPSBleHBlbnNpdmVDaGVja3M7XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QsIHNlbGYuJGZpbHRlcik7XG4gICAgdmFyIGFzc2lnbmFibGU7XG4gICAgdmFyIGFzc2lnbjtcbiAgICBpZiAoKGFzc2lnbmFibGUgPSBhc3NpZ25hYmxlQVNUKGFzdCkpKSB7XG4gICAgICBhc3NpZ24gPSB0aGlzLnJlY3Vyc2UoYXNzaWduYWJsZSk7XG4gICAgfVxuICAgIHZhciB0b1dhdGNoID0gZ2V0SW5wdXRzKGFzdC5ib2R5KTtcbiAgICB2YXIgaW5wdXRzO1xuICAgIGlmICh0b1dhdGNoKSB7XG4gICAgICBpbnB1dHMgPSBbXTtcbiAgICAgIGZvckVhY2godG9XYXRjaCwgZnVuY3Rpb24od2F0Y2gsIGtleSkge1xuICAgICAgICB2YXIgaW5wdXQgPSBzZWxmLnJlY3Vyc2Uod2F0Y2gpO1xuICAgICAgICB3YXRjaC5pbnB1dCA9IGlucHV0O1xuICAgICAgICBpbnB1dHMucHVzaChpbnB1dCk7XG4gICAgICAgIHdhdGNoLndhdGNoSWQgPSBrZXk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdmFyIGV4cHJlc3Npb25zID0gW107XG4gICAgZm9yRWFjaChhc3QuYm9keSwgZnVuY3Rpb24oZXhwcmVzc2lvbikge1xuICAgICAgZXhwcmVzc2lvbnMucHVzaChzZWxmLnJlY3Vyc2UoZXhwcmVzc2lvbi5leHByZXNzaW9uKSk7XG4gICAgfSk7XG4gICAgdmFyIGZuID0gYXN0LmJvZHkubGVuZ3RoID09PSAwID8gZnVuY3Rpb24oKSB7fSA6XG4gICAgICAgICAgICAgYXN0LmJvZHkubGVuZ3RoID09PSAxID8gZXhwcmVzc2lvbnNbMF0gOlxuICAgICAgICAgICAgIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMpIHtcbiAgICAgICAgICAgICAgIHZhciBsYXN0VmFsdWU7XG4gICAgICAgICAgICAgICBmb3JFYWNoKGV4cHJlc3Npb25zLCBmdW5jdGlvbihleHApIHtcbiAgICAgICAgICAgICAgICAgbGFzdFZhbHVlID0gZXhwKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICByZXR1cm4gbGFzdFZhbHVlO1xuICAgICAgICAgICAgIH07XG4gICAgaWYgKGFzc2lnbikge1xuICAgICAgZm4uYXNzaWduID0gZnVuY3Rpb24oc2NvcGUsIHZhbHVlLCBsb2NhbHMpIHtcbiAgICAgICAgcmV0dXJuIGFzc2lnbihzY29wZSwgbG9jYWxzLCB2YWx1ZSk7XG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoaW5wdXRzKSB7XG4gICAgICBmbi5pbnB1dHMgPSBpbnB1dHM7XG4gICAgfVxuICAgIGZuLmxpdGVyYWwgPSBpc0xpdGVyYWwoYXN0KTtcbiAgICBmbi5jb25zdGFudCA9IGlzQ29uc3RhbnQoYXN0KTtcbiAgICByZXR1cm4gZm47XG4gIH0sXG5cbiAgcmVjdXJzZTogZnVuY3Rpb24oYXN0LCBjb250ZXh0LCBjcmVhdGUpIHtcbiAgICB2YXIgbGVmdCwgcmlnaHQsIHNlbGYgPSB0aGlzLCBhcmdzLCBleHByZXNzaW9uO1xuICAgIGlmIChhc3QuaW5wdXQpIHtcbiAgICAgIHJldHVybiB0aGlzLmlucHV0cyhhc3QuaW5wdXQsIGFzdC53YXRjaElkKTtcbiAgICB9XG4gICAgc3dpdGNoIChhc3QudHlwZSkge1xuICAgIGNhc2UgQVNULkxpdGVyYWw6XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZShhc3QudmFsdWUsIGNvbnRleHQpO1xuICAgIGNhc2UgQVNULlVuYXJ5RXhwcmVzc2lvbjpcbiAgICAgIHJpZ2h0ID0gdGhpcy5yZWN1cnNlKGFzdC5hcmd1bWVudCk7XG4gICAgICByZXR1cm4gdGhpc1sndW5hcnknICsgYXN0Lm9wZXJhdG9yXShyaWdodCwgY29udGV4dCk7XG4gICAgY2FzZSBBU1QuQmluYXJ5RXhwcmVzc2lvbjpcbiAgICAgIGxlZnQgPSB0aGlzLnJlY3Vyc2UoYXN0LmxlZnQpO1xuICAgICAgcmlnaHQgPSB0aGlzLnJlY3Vyc2UoYXN0LnJpZ2h0KTtcbiAgICAgIHJldHVybiB0aGlzWydiaW5hcnknICsgYXN0Lm9wZXJhdG9yXShsZWZ0LCByaWdodCwgY29udGV4dCk7XG4gICAgY2FzZSBBU1QuTG9naWNhbEV4cHJlc3Npb246XG4gICAgICBsZWZ0ID0gdGhpcy5yZWN1cnNlKGFzdC5sZWZ0KTtcbiAgICAgIHJpZ2h0ID0gdGhpcy5yZWN1cnNlKGFzdC5yaWdodCk7XG4gICAgICByZXR1cm4gdGhpc1snYmluYXJ5JyArIGFzdC5vcGVyYXRvcl0obGVmdCwgcmlnaHQsIGNvbnRleHQpO1xuICAgIGNhc2UgQVNULkNvbmRpdGlvbmFsRXhwcmVzc2lvbjpcbiAgICAgIHJldHVybiB0aGlzWyd0ZXJuYXJ5PzonXShcbiAgICAgICAgdGhpcy5yZWN1cnNlKGFzdC50ZXN0KSxcbiAgICAgICAgdGhpcy5yZWN1cnNlKGFzdC5hbHRlcm5hdGUpLFxuICAgICAgICB0aGlzLnJlY3Vyc2UoYXN0LmNvbnNlcXVlbnQpLFxuICAgICAgICBjb250ZXh0XG4gICAgICApO1xuICAgIGNhc2UgQVNULklkZW50aWZpZXI6XG4gICAgICBlbnN1cmVTYWZlTWVtYmVyTmFtZShhc3QubmFtZSwgc2VsZi5leHByZXNzaW9uKTtcbiAgICAgIHJldHVybiBzZWxmLmlkZW50aWZpZXIoYXN0Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZXhwZW5zaXZlQ2hlY2tzIHx8IGlzUG9zc2libHlEYW5nZXJvdXNNZW1iZXJOYW1lKGFzdC5uYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dCwgY3JlYXRlLCBzZWxmLmV4cHJlc3Npb24pO1xuICAgIGNhc2UgQVNULk1lbWJlckV4cHJlc3Npb246XG4gICAgICBsZWZ0ID0gdGhpcy5yZWN1cnNlKGFzdC5vYmplY3QsIGZhbHNlLCAhIWNyZWF0ZSk7XG4gICAgICBpZiAoIWFzdC5jb21wdXRlZCkge1xuICAgICAgICBlbnN1cmVTYWZlTWVtYmVyTmFtZShhc3QucHJvcGVydHkubmFtZSwgc2VsZi5leHByZXNzaW9uKTtcbiAgICAgICAgcmlnaHQgPSBhc3QucHJvcGVydHkubmFtZTtcbiAgICAgIH1cbiAgICAgIGlmIChhc3QuY29tcHV0ZWQpIHJpZ2h0ID0gdGhpcy5yZWN1cnNlKGFzdC5wcm9wZXJ0eSk7XG4gICAgICByZXR1cm4gYXN0LmNvbXB1dGVkID9cbiAgICAgICAgdGhpcy5jb21wdXRlZE1lbWJlcihsZWZ0LCByaWdodCwgY29udGV4dCwgY3JlYXRlLCBzZWxmLmV4cHJlc3Npb24pIDpcbiAgICAgICAgdGhpcy5ub25Db21wdXRlZE1lbWJlcihsZWZ0LCByaWdodCwgc2VsZi5leHBlbnNpdmVDaGVja3MsIGNvbnRleHQsIGNyZWF0ZSwgc2VsZi5leHByZXNzaW9uKTtcbiAgICBjYXNlIEFTVC5DYWxsRXhwcmVzc2lvbjpcbiAgICAgIGFyZ3MgPSBbXTtcbiAgICAgIGZvckVhY2goYXN0LmFyZ3VtZW50cywgZnVuY3Rpb24oZXhwcikge1xuICAgICAgICBhcmdzLnB1c2goc2VsZi5yZWN1cnNlKGV4cHIpKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGFzdC5maWx0ZXIpIHJpZ2h0ID0gdGhpcy4kZmlsdGVyKGFzdC5jYWxsZWUubmFtZSk7XG4gICAgICBpZiAoIWFzdC5maWx0ZXIpIHJpZ2h0ID0gdGhpcy5yZWN1cnNlKGFzdC5jYWxsZWUsIHRydWUpO1xuICAgICAgcmV0dXJuIGFzdC5maWx0ZXIgP1xuICAgICAgICBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKGFyZ3NbaV0oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHZhbHVlID0gcmlnaHQuYXBwbHkodW5kZWZpbmVkLCB2YWx1ZXMsIGlucHV0cyk7XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7Y29udGV4dDogdW5kZWZpbmVkLCBuYW1lOiB1bmRlZmluZWQsIHZhbHVlOiB2YWx1ZX0gOiB2YWx1ZTtcbiAgICAgICAgfSA6XG4gICAgICAgIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgICAgdmFyIHJocyA9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgaWYgKHJocy52YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBlbnN1cmVTYWZlT2JqZWN0KHJocy5jb250ZXh0LCBzZWxmLmV4cHJlc3Npb24pO1xuICAgICAgICAgICAgZW5zdXJlU2FmZUZ1bmN0aW9uKHJocy52YWx1ZSwgc2VsZi5leHByZXNzaW9uKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICB2YWx1ZXMucHVzaChlbnN1cmVTYWZlT2JqZWN0KGFyZ3NbaV0oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpLCBzZWxmLmV4cHJlc3Npb24pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlID0gZW5zdXJlU2FmZU9iamVjdChyaHMudmFsdWUuYXBwbHkocmhzLmNvbnRleHQsIHZhbHVlcyksIHNlbGYuZXhwcmVzc2lvbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiB2YWx1ZX0gOiB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICBjYXNlIEFTVC5Bc3NpZ25tZW50RXhwcmVzc2lvbjpcbiAgICAgIGxlZnQgPSB0aGlzLnJlY3Vyc2UoYXN0LmxlZnQsIHRydWUsIDEpO1xuICAgICAgcmlnaHQgPSB0aGlzLnJlY3Vyc2UoYXN0LnJpZ2h0KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICB2YXIgbGhzID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIHZhciByaHMgPSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIGVuc3VyZVNhZmVPYmplY3QobGhzLnZhbHVlLCBzZWxmLmV4cHJlc3Npb24pO1xuICAgICAgICBlbnN1cmVTYWZlQXNzaWduQ29udGV4dChsaHMuY29udGV4dCk7XG4gICAgICAgIGxocy5jb250ZXh0W2xocy5uYW1lXSA9IHJocztcbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IHJoc30gOiByaHM7XG4gICAgICB9O1xuICAgIGNhc2UgQVNULkFycmF5RXhwcmVzc2lvbjpcbiAgICAgIGFyZ3MgPSBbXTtcbiAgICAgIGZvckVhY2goYXN0LmVsZW1lbnRzLCBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIGFyZ3MucHVzaChzZWxmLnJlY3Vyc2UoZXhwcikpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIHZhbHVlLnB1c2goYXJnc1tpXShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiB2YWx1ZX0gOiB2YWx1ZTtcbiAgICAgIH07XG4gICAgY2FzZSBBU1QuT2JqZWN0RXhwcmVzc2lvbjpcbiAgICAgIGFyZ3MgPSBbXTtcbiAgICAgIGZvckVhY2goYXN0LnByb3BlcnRpZXMsIGZ1bmN0aW9uKHByb3BlcnR5KSB7XG4gICAgICAgIGFyZ3MucHVzaCh7a2V5OiBwcm9wZXJ0eS5rZXkudHlwZSA9PT0gQVNULklkZW50aWZpZXIgP1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkua2V5Lm5hbWUgOlxuICAgICAgICAgICAgICAgICAgICAgICAgKCcnICsgcHJvcGVydHkua2V5LnZhbHVlKSxcbiAgICAgICAgICAgICAgICAgICB2YWx1ZTogc2VsZi5yZWN1cnNlKHByb3BlcnR5LnZhbHVlKVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICB2YWx1ZVthcmdzW2ldLmtleV0gPSBhcmdzW2ldLnZhbHVlKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogdmFsdWV9IDogdmFsdWU7XG4gICAgICB9O1xuICAgIGNhc2UgQVNULlRoaXNFeHByZXNzaW9uOlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlKSB7XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBzY29wZX0gOiBzY29wZTtcbiAgICAgIH07XG4gICAgY2FzZSBBU1QuTkdWYWx1ZVBhcmFtZXRlcjpcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXNzaWdufSA6IGFzc2lnbjtcbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gICd1bmFyeSsnOiBmdW5jdGlvbihhcmd1bWVudCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGFyZ3VtZW50KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIGlmIChpc0RlZmluZWQoYXJnKSkge1xuICAgICAgICBhcmcgPSArYXJnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJnID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICd1bmFyeS0nOiBmdW5jdGlvbihhcmd1bWVudCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGFyZ3VtZW50KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIGlmIChpc0RlZmluZWQoYXJnKSkge1xuICAgICAgICBhcmcgPSAtYXJnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJnID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICd1bmFyeSEnOiBmdW5jdGlvbihhcmd1bWVudCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9ICFhcmd1bWVudChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5Kyc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgbGhzID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICB2YXIgcmhzID0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgdmFyIGFyZyA9IHBsdXNGbihsaHMsIHJocyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5LSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgbGhzID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICB2YXIgcmhzID0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgdmFyIGFyZyA9IChpc0RlZmluZWQobGhzKSA/IGxocyA6IDApIC0gKGlzRGVmaW5lZChyaHMpID8gcmhzIDogMCk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5Kic6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgKiByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5Lyc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgLyByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5JSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgJSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5PT09JzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSA9PT0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeSE9PSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgIT09IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnk9PSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPT0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeSE9JzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSAhPSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5PCc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPCByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5Pic6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPiByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5PD0nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIDw9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnk+PSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPj0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeSYmJzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSAmJiByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5fHwnOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHx8IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICd0ZXJuYXJ5PzonOiBmdW5jdGlvbih0ZXN0LCBhbHRlcm5hdGUsIGNvbnNlcXVlbnQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSB0ZXN0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSA/IGFsdGVybmF0ZShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgOiBjb25zZXF1ZW50KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gIHZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHsgcmV0dXJuIGNvbnRleHQgPyB7Y29udGV4dDogdW5kZWZpbmVkLCBuYW1lOiB1bmRlZmluZWQsIHZhbHVlOiB2YWx1ZX0gOiB2YWx1ZTsgfTtcbiAgfSxcbiAgaWRlbnRpZmllcjogZnVuY3Rpb24obmFtZSwgZXhwZW5zaXZlQ2hlY2tzLCBjb250ZXh0LCBjcmVhdGUsIGV4cHJlc3Npb24pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBiYXNlID0gbG9jYWxzICYmIChuYW1lIGluIGxvY2FscykgPyBsb2NhbHMgOiBzY29wZTtcbiAgICAgIGlmIChjcmVhdGUgJiYgY3JlYXRlICE9PSAxICYmIGJhc2UgJiYgIShiYXNlW25hbWVdKSkge1xuICAgICAgICBiYXNlW25hbWVdID0ge307XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBiYXNlID8gYmFzZVtuYW1lXSA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChleHBlbnNpdmVDaGVja3MpIHtcbiAgICAgICAgZW5zdXJlU2FmZU9iamVjdCh2YWx1ZSwgZXhwcmVzc2lvbik7XG4gICAgICB9XG4gICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICByZXR1cm4ge2NvbnRleHQ6IGJhc2UsIG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZX07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgY29tcHV0ZWRNZW1iZXI6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0LCBjcmVhdGUsIGV4cHJlc3Npb24pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBsaHMgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHZhciByaHM7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICBpZiAobGhzICE9IG51bGwpIHtcbiAgICAgICAgcmhzID0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICByaHMgPSBnZXRTdHJpbmdWYWx1ZShyaHMpO1xuICAgICAgICBlbnN1cmVTYWZlTWVtYmVyTmFtZShyaHMsIGV4cHJlc3Npb24pO1xuICAgICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSAmJiBsaHMgJiYgIShsaHNbcmhzXSkpIHtcbiAgICAgICAgICBsaHNbcmhzXSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gbGhzW3Joc107XG4gICAgICAgIGVuc3VyZVNhZmVPYmplY3QodmFsdWUsIGV4cHJlc3Npb24pO1xuICAgICAgfVxuICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHtjb250ZXh0OiBsaHMsIG5hbWU6IHJocywgdmFsdWU6IHZhbHVlfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBub25Db21wdXRlZE1lbWJlcjogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGV4cGVuc2l2ZUNoZWNrcywgY29udGV4dCwgY3JlYXRlLCBleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgbGhzID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSAmJiBsaHMgJiYgIShsaHNbcmlnaHRdKSkge1xuICAgICAgICBsaHNbcmlnaHRdID0ge307XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBsaHMgIT0gbnVsbCA/IGxoc1tyaWdodF0gOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoZXhwZW5zaXZlQ2hlY2tzIHx8IGlzUG9zc2libHlEYW5nZXJvdXNNZW1iZXJOYW1lKHJpZ2h0KSkge1xuICAgICAgICBlbnN1cmVTYWZlT2JqZWN0KHZhbHVlLCBleHByZXNzaW9uKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB7Y29udGV4dDogbGhzLCBuYW1lOiByaWdodCwgdmFsdWU6IHZhbHVlfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBpbnB1dHM6IGZ1bmN0aW9uKGlucHV0LCB3YXRjaElkKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCB2YWx1ZSwgbG9jYWxzLCBpbnB1dHMpIHtcbiAgICAgIGlmIChpbnB1dHMpIHJldHVybiBpbnB1dHNbd2F0Y2hJZF07XG4gICAgICByZXR1cm4gaW5wdXQoc2NvcGUsIHZhbHVlLCBsb2NhbHMpO1xuICAgIH07XG4gIH1cbn07XG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBQYXJzZXIgPSBmdW5jdGlvbihsZXhlciwgJGZpbHRlciwgb3B0aW9ucykge1xuICB0aGlzLmxleGVyID0gbGV4ZXI7XG4gIHRoaXMuJGZpbHRlciA9ICRmaWx0ZXI7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIHRoaXMuYXN0ID0gbmV3IEFTVCh0aGlzLmxleGVyKTtcbiAgdGhpcy5hc3RDb21waWxlciA9IG9wdGlvbnMuY3NwID8gbmV3IEFTVEludGVycHJldGVyKHRoaXMuYXN0LCAkZmlsdGVyKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBBU1RDb21waWxlcih0aGlzLmFzdCwgJGZpbHRlcik7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUGFyc2VyLFxuXG4gIHBhcnNlOiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgcmV0dXJuIHRoaXMuYXN0Q29tcGlsZXIuY29tcGlsZSh0ZXh0LCB0aGlzLm9wdGlvbnMuZXhwZW5zaXZlQ2hlY2tzKTtcbiAgfVxufTtcblxudmFyIGdldHRlckZuQ2FjaGVEZWZhdWx0ID0gY3JlYXRlTWFwKCk7XG52YXIgZ2V0dGVyRm5DYWNoZUV4cGVuc2l2ZSA9IGNyZWF0ZU1hcCgpO1xuXG5mdW5jdGlvbiBpc1Bvc3NpYmx5RGFuZ2Vyb3VzTWVtYmVyTmFtZShuYW1lKSB7XG4gIHJldHVybiBuYW1lID09ICdjb25zdHJ1Y3Rvcic7XG59XG5cbnZhciBvYmplY3RWYWx1ZU9mID0gT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mO1xuXG5mdW5jdGlvbiBnZXRWYWx1ZU9mKHZhbHVlKSB7XG4gIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlLnZhbHVlT2YpID8gdmFsdWUudmFsdWVPZigpIDogb2JqZWN0VmFsdWVPZi5jYWxsKHZhbHVlKTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHBhcnNlXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbnZlcnRzIEFuZ3VsYXIge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaW50byBhIGZ1bmN0aW9uLlxuICpcbiAqIGBgYGpzXG4gKiAgIHZhciBnZXR0ZXIgPSAkcGFyc2UoJ3VzZXIubmFtZScpO1xuICogICB2YXIgc2V0dGVyID0gZ2V0dGVyLmFzc2lnbjtcbiAqICAgdmFyIGNvbnRleHQgPSB7dXNlcjp7bmFtZTonYW5ndWxhcid9fTtcbiAqICAgdmFyIGxvY2FscyA9IHt1c2VyOntuYW1lOidsb2NhbCd9fTtcbiAqXG4gKiAgIGV4cGVjdChnZXR0ZXIoY29udGV4dCkpLnRvRXF1YWwoJ2FuZ3VsYXInKTtcbiAqICAgc2V0dGVyKGNvbnRleHQsICduZXdWYWx1ZScpO1xuICogICBleHBlY3QoY29udGV4dC51c2VyLm5hbWUpLnRvRXF1YWwoJ25ld1ZhbHVlJyk7XG4gKiAgIGV4cGVjdChnZXR0ZXIoY29udGV4dCwgbG9jYWxzKSkudG9FcXVhbCgnbG9jYWwnKTtcbiAqIGBgYFxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAqXG4gKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXG4gKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW5cbiAqICAgICAgYGNvbnRleHRgLlxuICpcbiAqICAgIFRoZSByZXR1cm5lZCBmdW5jdGlvbiBhbHNvIGhhcyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKiAgICAgICogYGxpdGVyYWxgIOKAkyBge2Jvb2xlYW59YCDigJMgd2hldGhlciB0aGUgZXhwcmVzc2lvbidzIHRvcC1sZXZlbCBub2RlIGlzIGEgSmF2YVNjcmlwdFxuICogICAgICAgIGxpdGVyYWwuXG4gKiAgICAgICogYGNvbnN0YW50YCDigJMgYHtib29sZWFufWAg4oCTIHdoZXRoZXIgdGhlIGV4cHJlc3Npb24gaXMgbWFkZSBlbnRpcmVseSBvZiBKYXZhU2NyaXB0XG4gKiAgICAgICAgY29uc3RhbnQgbGl0ZXJhbHMuXG4gKiAgICAgICogYGFzc2lnbmAg4oCTIGB7P2Z1bmN0aW9uKGNvbnRleHQsIHZhbHVlKX1gIOKAkyBpZiB0aGUgZXhwcmVzc2lvbiBpcyBhc3NpZ25hYmxlLCB0aGlzIHdpbGwgYmVcbiAqICAgICAgICBzZXQgdG8gYSBmdW5jdGlvbiB0byBjaGFuZ2UgaXRzIHZhbHVlIG9uIHRoZSBnaXZlbiBjb250ZXh0LlxuICpcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkcGFyc2VQcm92aWRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogYCRwYXJzZVByb3ZpZGVyYCBjYW4gYmUgdXNlZCBmb3IgY29uZmlndXJpbmcgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgdGhlIHtAbGluayBuZy4kcGFyc2UgJHBhcnNlfVxuICogIHNlcnZpY2UuXG4gKi9cbmZ1bmN0aW9uICRQYXJzZVByb3ZpZGVyKCkge1xuICB2YXIgY2FjaGVEZWZhdWx0ID0gY3JlYXRlTWFwKCk7XG4gIHZhciBjYWNoZUV4cGVuc2l2ZSA9IGNyZWF0ZU1hcCgpO1xuXG4gIHRoaXMuJGdldCA9IFsnJGZpbHRlcicsIGZ1bmN0aW9uKCRmaWx0ZXIpIHtcbiAgICB2YXIgbm9VbnNhZmVFdmFsID0gY3NwKCkubm9VbnNhZmVFdmFsO1xuICAgIHZhciAkcGFyc2VPcHRpb25zID0ge1xuICAgICAgICAgIGNzcDogbm9VbnNhZmVFdmFsLFxuICAgICAgICAgIGV4cGVuc2l2ZUNoZWNrczogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgJHBhcnNlT3B0aW9uc0V4cGVuc2l2ZSA9IHtcbiAgICAgICAgICBjc3A6IG5vVW5zYWZlRXZhbCxcbiAgICAgICAgICBleHBlbnNpdmVDaGVja3M6IHRydWVcbiAgICAgICAgfTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAkcGFyc2UoZXhwLCBpbnRlcmNlcHRvckZuLCBleHBlbnNpdmVDaGVja3MpIHtcbiAgICAgIHZhciBwYXJzZWRFeHByZXNzaW9uLCBvbmVUaW1lLCBjYWNoZUtleTtcblxuICAgICAgc3dpdGNoICh0eXBlb2YgZXhwKSB7XG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgZXhwID0gZXhwLnRyaW0oKTtcbiAgICAgICAgICBjYWNoZUtleSA9IGV4cDtcblxuICAgICAgICAgIHZhciBjYWNoZSA9IChleHBlbnNpdmVDaGVja3MgPyBjYWNoZUV4cGVuc2l2ZSA6IGNhY2hlRGVmYXVsdCk7XG4gICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbiA9IGNhY2hlW2NhY2hlS2V5XTtcblxuICAgICAgICAgIGlmICghcGFyc2VkRXhwcmVzc2lvbikge1xuICAgICAgICAgICAgaWYgKGV4cC5jaGFyQXQoMCkgPT09ICc6JyAmJiBleHAuY2hhckF0KDEpID09PSAnOicpIHtcbiAgICAgICAgICAgICAgb25lVGltZSA9IHRydWU7XG4gICAgICAgICAgICAgIGV4cCA9IGV4cC5zdWJzdHJpbmcoMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcGFyc2VPcHRpb25zID0gZXhwZW5zaXZlQ2hlY2tzID8gJHBhcnNlT3B0aW9uc0V4cGVuc2l2ZSA6ICRwYXJzZU9wdGlvbnM7XG4gICAgICAgICAgICB2YXIgbGV4ZXIgPSBuZXcgTGV4ZXIocGFyc2VPcHRpb25zKTtcbiAgICAgICAgICAgIHZhciBwYXJzZXIgPSBuZXcgUGFyc2VyKGxleGVyLCAkZmlsdGVyLCBwYXJzZU9wdGlvbnMpO1xuICAgICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbiA9IHBhcnNlci5wYXJzZShleHApO1xuICAgICAgICAgICAgaWYgKHBhcnNlZEV4cHJlc3Npb24uY29uc3RhbnQpIHtcbiAgICAgICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGUgPSBjb25zdGFudFdhdGNoRGVsZWdhdGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9uZVRpbWUpIHtcbiAgICAgICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGUgPSBwYXJzZWRFeHByZXNzaW9uLmxpdGVyYWwgP1xuICAgICAgICAgICAgICAgICAgb25lVGltZUxpdGVyYWxXYXRjaERlbGVnYXRlIDogb25lVGltZVdhdGNoRGVsZWdhdGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnNlZEV4cHJlc3Npb24uaW5wdXRzKSB7XG4gICAgICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlID0gaW5wdXRzV2F0Y2hEZWxlZ2F0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhY2hlW2NhY2hlS2V5XSA9IHBhcnNlZEV4cHJlc3Npb247XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBhZGRJbnRlcmNlcHRvcihwYXJzZWRFeHByZXNzaW9uLCBpbnRlcmNlcHRvckZuKTtcblxuICAgICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgICAgcmV0dXJuIGFkZEludGVyY2VwdG9yKGV4cCwgaW50ZXJjZXB0b3JGbik7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbm9vcDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZXhwcmVzc2lvbklucHV0RGlydHlDaGVjayhuZXdWYWx1ZSwgb2xkVmFsdWVPZlZhbHVlKSB7XG5cbiAgICAgIGlmIChuZXdWYWx1ZSA9PSBudWxsIHx8IG9sZFZhbHVlT2ZWYWx1ZSA9PSBudWxsKSB7IC8vIG51bGwvdW5kZWZpbmVkXG4gICAgICAgIHJldHVybiBuZXdWYWx1ZSA9PT0gb2xkVmFsdWVPZlZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG5ld1ZhbHVlID09PSAnb2JqZWN0Jykge1xuXG4gICAgICAgIC8vIGF0dGVtcHQgdG8gY29udmVydCB0aGUgdmFsdWUgdG8gYSBwcmltaXRpdmUgdHlwZVxuICAgICAgICAvLyBUT0RPKGRvY3MpOiBhZGQgYSBub3RlIHRvIGRvY3MgdGhhdCBieSBpbXBsZW1lbnRpbmcgdmFsdWVPZiBldmVuIG9iamVjdHMgYW5kIGFycmF5cyBjYW5cbiAgICAgICAgLy8gICAgICAgICAgICAgYmUgY2hlYXBseSBkaXJ0eS1jaGVja2VkXG4gICAgICAgIG5ld1ZhbHVlID0gZ2V0VmFsdWVPZihuZXdWYWx1ZSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAvLyBvYmplY3RzL2FycmF5cyBhcmUgbm90IHN1cHBvcnRlZCAtIGRlZXAtd2F0Y2hpbmcgdGhlbSB3b3VsZCBiZSB0b28gZXhwZW5zaXZlXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZmFsbC10aHJvdWdoIHRvIHRoZSBwcmltaXRpdmUgZXF1YWxpdHkgY2hlY2tcbiAgICAgIH1cblxuICAgICAgLy9QcmltaXRpdmUgb3IgTmFOXG4gICAgICByZXR1cm4gbmV3VmFsdWUgPT09IG9sZFZhbHVlT2ZWYWx1ZSB8fCAobmV3VmFsdWUgIT09IG5ld1ZhbHVlICYmIG9sZFZhbHVlT2ZWYWx1ZSAhPT0gb2xkVmFsdWVPZlZhbHVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnB1dHNXYXRjaERlbGVnYXRlKHNjb3BlLCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHBhcnNlZEV4cHJlc3Npb24sIHByZXR0eVByaW50RXhwcmVzc2lvbikge1xuICAgICAgdmFyIGlucHV0RXhwcmVzc2lvbnMgPSBwYXJzZWRFeHByZXNzaW9uLmlucHV0cztcbiAgICAgIHZhciBsYXN0UmVzdWx0O1xuXG4gICAgICBpZiAoaW5wdXRFeHByZXNzaW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdmFyIG9sZElucHV0VmFsdWVPZiA9IGV4cHJlc3Npb25JbnB1dERpcnR5Q2hlY2s7IC8vIGluaXQgdG8gc29tZXRoaW5nIHVuaXF1ZSBzbyB0aGF0IGVxdWFscyBjaGVjayBmYWlsc1xuICAgICAgICBpbnB1dEV4cHJlc3Npb25zID0gaW5wdXRFeHByZXNzaW9uc1swXTtcbiAgICAgICAgcmV0dXJuIHNjb3BlLiR3YXRjaChmdW5jdGlvbiBleHByZXNzaW9uSW5wdXRXYXRjaChzY29wZSkge1xuICAgICAgICAgIHZhciBuZXdJbnB1dFZhbHVlID0gaW5wdXRFeHByZXNzaW9ucyhzY29wZSk7XG4gICAgICAgICAgaWYgKCFleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrKG5ld0lucHV0VmFsdWUsIG9sZElucHV0VmFsdWVPZikpIHtcbiAgICAgICAgICAgIGxhc3RSZXN1bHQgPSBwYXJzZWRFeHByZXNzaW9uKHNjb3BlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgW25ld0lucHV0VmFsdWVdKTtcbiAgICAgICAgICAgIG9sZElucHV0VmFsdWVPZiA9IG5ld0lucHV0VmFsdWUgJiYgZ2V0VmFsdWVPZihuZXdJbnB1dFZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgICAgIH0sIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcHJldHR5UHJpbnRFeHByZXNzaW9uKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9sZElucHV0VmFsdWVPZlZhbHVlcyA9IFtdO1xuICAgICAgdmFyIG9sZElucHV0VmFsdWVzID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBpbnB1dEV4cHJlc3Npb25zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgb2xkSW5wdXRWYWx1ZU9mVmFsdWVzW2ldID0gZXhwcmVzc2lvbklucHV0RGlydHlDaGVjazsgLy8gaW5pdCB0byBzb21ldGhpbmcgdW5pcXVlIHNvIHRoYXQgZXF1YWxzIGNoZWNrIGZhaWxzXG4gICAgICAgIG9sZElucHV0VmFsdWVzW2ldID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNjb3BlLiR3YXRjaChmdW5jdGlvbiBleHByZXNzaW9uSW5wdXRzV2F0Y2goc2NvcGUpIHtcbiAgICAgICAgdmFyIGNoYW5nZWQgPSBmYWxzZTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBpbnB1dEV4cHJlc3Npb25zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICB2YXIgbmV3SW5wdXRWYWx1ZSA9IGlucHV0RXhwcmVzc2lvbnNbaV0oc2NvcGUpO1xuICAgICAgICAgIGlmIChjaGFuZ2VkIHx8IChjaGFuZ2VkID0gIWV4cHJlc3Npb25JbnB1dERpcnR5Q2hlY2sobmV3SW5wdXRWYWx1ZSwgb2xkSW5wdXRWYWx1ZU9mVmFsdWVzW2ldKSkpIHtcbiAgICAgICAgICAgIG9sZElucHV0VmFsdWVzW2ldID0gbmV3SW5wdXRWYWx1ZTtcbiAgICAgICAgICAgIG9sZElucHV0VmFsdWVPZlZhbHVlc1tpXSA9IG5ld0lucHV0VmFsdWUgJiYgZ2V0VmFsdWVPZihuZXdJbnB1dFZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgIGxhc3RSZXN1bHQgPSBwYXJzZWRFeHByZXNzaW9uKHNjb3BlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgb2xkSW5wdXRWYWx1ZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgICB9LCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHByZXR0eVByaW50RXhwcmVzc2lvbik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25lVGltZVdhdGNoRGVsZWdhdGUoc2NvcGUsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcGFyc2VkRXhwcmVzc2lvbikge1xuICAgICAgdmFyIHVud2F0Y2gsIGxhc3RWYWx1ZTtcbiAgICAgIHJldHVybiB1bndhdGNoID0gc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIG9uZVRpbWVXYXRjaChzY29wZSkge1xuICAgICAgICByZXR1cm4gcGFyc2VkRXhwcmVzc2lvbihzY29wZSk7XG4gICAgICB9LCBmdW5jdGlvbiBvbmVUaW1lTGlzdGVuZXIodmFsdWUsIG9sZCwgc2NvcGUpIHtcbiAgICAgICAgbGFzdFZhbHVlID0gdmFsdWU7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVyKSkge1xuICAgICAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICBzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoaXNEZWZpbmVkKGxhc3RWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgdW53YXRjaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCBvYmplY3RFcXVhbGl0eSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25lVGltZUxpdGVyYWxXYXRjaERlbGVnYXRlKHNjb3BlLCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHBhcnNlZEV4cHJlc3Npb24pIHtcbiAgICAgIHZhciB1bndhdGNoLCBsYXN0VmFsdWU7XG4gICAgICByZXR1cm4gdW53YXRjaCA9IHNjb3BlLiR3YXRjaChmdW5jdGlvbiBvbmVUaW1lV2F0Y2goc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb24oc2NvcGUpO1xuICAgICAgfSwgZnVuY3Rpb24gb25lVGltZUxpc3RlbmVyKHZhbHVlLCBvbGQsIHNjb3BlKSB7XG4gICAgICAgIGxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcikpIHtcbiAgICAgICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIHZhbHVlLCBvbGQsIHNjb3BlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBbGxEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgIHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChpc0FsbERlZmluZWQobGFzdFZhbHVlKSkgdW53YXRjaCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCBvYmplY3RFcXVhbGl0eSk7XG5cbiAgICAgIGZ1bmN0aW9uIGlzQWxsRGVmaW5lZCh2YWx1ZSkge1xuICAgICAgICB2YXIgYWxsRGVmaW5lZCA9IHRydWU7XG4gICAgICAgIGZvckVhY2godmFsdWUsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgIGlmICghaXNEZWZpbmVkKHZhbCkpIGFsbERlZmluZWQgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhbGxEZWZpbmVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50V2F0Y2hEZWxlZ2F0ZShzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uKSB7XG4gICAgICB2YXIgdW53YXRjaDtcbiAgICAgIHJldHVybiB1bndhdGNoID0gc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIGNvbnN0YW50V2F0Y2goc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb24oc2NvcGUpO1xuICAgICAgfSwgZnVuY3Rpb24gY29uc3RhbnRMaXN0ZW5lcih2YWx1ZSwgb2xkLCBzY29wZSkge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcikpIHtcbiAgICAgICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIHVud2F0Y2goKTtcbiAgICAgIH0sIG9iamVjdEVxdWFsaXR5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRJbnRlcmNlcHRvcihwYXJzZWRFeHByZXNzaW9uLCBpbnRlcmNlcHRvckZuKSB7XG4gICAgICBpZiAoIWludGVyY2VwdG9yRm4pIHJldHVybiBwYXJzZWRFeHByZXNzaW9uO1xuICAgICAgdmFyIHdhdGNoRGVsZWdhdGUgPSBwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZTtcbiAgICAgIHZhciB1c2VJbnB1dHMgPSBmYWxzZTtcblxuICAgICAgdmFyIHJlZ3VsYXJXYXRjaCA9XG4gICAgICAgICAgd2F0Y2hEZWxlZ2F0ZSAhPT0gb25lVGltZUxpdGVyYWxXYXRjaERlbGVnYXRlICYmXG4gICAgICAgICAgd2F0Y2hEZWxlZ2F0ZSAhPT0gb25lVGltZVdhdGNoRGVsZWdhdGU7XG5cbiAgICAgIHZhciBmbiA9IHJlZ3VsYXJXYXRjaCA/IGZ1bmN0aW9uIHJlZ3VsYXJJbnRlcmNlcHRlZEV4cHJlc3Npb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdXNlSW5wdXRzICYmIGlucHV0cyA/IGlucHV0c1swXSA6IHBhcnNlZEV4cHJlc3Npb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICByZXR1cm4gaW50ZXJjZXB0b3JGbih2YWx1ZSwgc2NvcGUsIGxvY2Fscyk7XG4gICAgICB9IDogZnVuY3Rpb24gb25lVGltZUludGVyY2VwdGVkRXhwcmVzc2lvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZWRFeHByZXNzaW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGludGVyY2VwdG9yRm4odmFsdWUsIHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAvLyB3ZSBvbmx5IHJldHVybiB0aGUgaW50ZXJjZXB0b3IncyByZXN1bHQgaWYgdGhlXG4gICAgICAgIC8vIGluaXRpYWwgdmFsdWUgaXMgZGVmaW5lZCAoZm9yIGJpbmQtb25jZSlcbiAgICAgICAgcmV0dXJuIGlzRGVmaW5lZCh2YWx1ZSkgPyByZXN1bHQgOiB2YWx1ZTtcbiAgICAgIH07XG5cbiAgICAgIC8vIFByb3BhZ2F0ZSAkJHdhdGNoRGVsZWdhdGVzIG90aGVyIHRoZW4gaW5wdXRzV2F0Y2hEZWxlZ2F0ZVxuICAgICAgaWYgKHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlICYmXG4gICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGUgIT09IGlucHV0c1dhdGNoRGVsZWdhdGUpIHtcbiAgICAgICAgZm4uJCR3YXRjaERlbGVnYXRlID0gcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGU7XG4gICAgICB9IGVsc2UgaWYgKCFpbnRlcmNlcHRvckZuLiRzdGF0ZWZ1bCkge1xuICAgICAgICAvLyBJZiB0aGVyZSBpcyBhbiBpbnRlcmNlcHRvciwgYnV0IG5vIHdhdGNoRGVsZWdhdGUgdGhlbiB0cmVhdCB0aGUgaW50ZXJjZXB0b3IgbGlrZVxuICAgICAgICAvLyB3ZSB0cmVhdCBmaWx0ZXJzIC0gaXQgaXMgYXNzdW1lZCB0byBiZSBhIHB1cmUgZnVuY3Rpb24gdW5sZXNzIGZsYWdnZWQgd2l0aCAkc3RhdGVmdWxcbiAgICAgICAgZm4uJCR3YXRjaERlbGVnYXRlID0gaW5wdXRzV2F0Y2hEZWxlZ2F0ZTtcbiAgICAgICAgdXNlSW5wdXRzID0gIXBhcnNlZEV4cHJlc3Npb24uaW5wdXRzO1xuICAgICAgICBmbi5pbnB1dHMgPSBwYXJzZWRFeHByZXNzaW9uLmlucHV0cyA/IHBhcnNlZEV4cHJlc3Npb24uaW5wdXRzIDogW3BhcnNlZEV4cHJlc3Npb25dO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm47XG4gICAgfVxuICB9XTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHFcbiAqIEByZXF1aXJlcyAkcm9vdFNjb3BlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIHNlcnZpY2UgdGhhdCBoZWxwcyB5b3UgcnVuIGZ1bmN0aW9ucyBhc3luY2hyb25vdXNseSwgYW5kIHVzZSB0aGVpciByZXR1cm4gdmFsdWVzIChvciBleGNlcHRpb25zKVxuICogd2hlbiB0aGV5IGFyZSBkb25lIHByb2Nlc3NpbmcuXG4gKlxuICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBwcm9taXNlcy9kZWZlcnJlZCBvYmplY3RzIGluc3BpcmVkIGJ5XG4gKiBbS3JpcyBLb3dhbCdzIFFdKGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcSkuXG4gKlxuICogJHEgY2FuIGJlIHVzZWQgaW4gdHdvIGZhc2hpb25zIC0tLSBvbmUgd2hpY2ggaXMgbW9yZSBzaW1pbGFyIHRvIEtyaXMgS293YWwncyBRIG9yIGpRdWVyeSdzIERlZmVycmVkXG4gKiBpbXBsZW1lbnRhdGlvbnMsIGFuZCB0aGUgb3RoZXIgd2hpY2ggcmVzZW1ibGVzIEVTNiBwcm9taXNlcyB0byBzb21lIGRlZ3JlZS5cbiAqXG4gKiAjICRxIGNvbnN0cnVjdG9yXG4gKlxuICogVGhlIHN0cmVhbWxpbmVkIEVTNiBzdHlsZSBwcm9taXNlIGlzIGVzc2VudGlhbGx5IGp1c3QgdXNpbmcgJHEgYXMgYSBjb25zdHJ1Y3RvciB3aGljaCB0YWtlcyBhIGByZXNvbHZlcmBcbiAqIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBhcmd1bWVudC4gVGhpcyBpcyBzaW1pbGFyIHRvIHRoZSBuYXRpdmUgUHJvbWlzZSBpbXBsZW1lbnRhdGlvbiBmcm9tIEVTNiBIYXJtb255LFxuICogc2VlIFtNRE5dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1Byb21pc2UpLlxuICpcbiAqIFdoaWxlIHRoZSBjb25zdHJ1Y3Rvci1zdHlsZSB1c2UgaXMgc3VwcG9ydGVkLCBub3QgYWxsIG9mIHRoZSBzdXBwb3J0aW5nIG1ldGhvZHMgZnJvbSBFUzYgSGFybW9ueSBwcm9taXNlcyBhcmVcbiAqIGF2YWlsYWJsZSB5ZXQuXG4gKlxuICogSXQgY2FuIGJlIHVzZWQgbGlrZSBzbzpcbiAqXG4gKiBgYGBqc1xuICogICAvLyBmb3IgdGhlIHB1cnBvc2Ugb2YgdGhpcyBleGFtcGxlIGxldCdzIGFzc3VtZSB0aGF0IHZhcmlhYmxlcyBgJHFgIGFuZCBgb2tUb0dyZWV0YFxuICogICAvLyBhcmUgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGxleGljYWwgc2NvcGUgKHRoZXkgY291bGQgaGF2ZSBiZWVuIGluamVjdGVkIG9yIHBhc3NlZCBpbikuXG4gKlxuICogICBmdW5jdGlvbiBhc3luY0dyZWV0KG5hbWUpIHtcbiAqICAgICAvLyBwZXJmb3JtIHNvbWUgYXN5bmNocm9ub3VzIG9wZXJhdGlvbiwgcmVzb2x2ZSBvciByZWplY3QgdGhlIHByb21pc2Ugd2hlbiBhcHByb3ByaWF0ZS5cbiAqICAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gKiAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICogICAgICAgICBpZiAob2tUb0dyZWV0KG5hbWUpKSB7XG4gKiAgICAgICAgICAgcmVzb2x2ZSgnSGVsbG8sICcgKyBuYW1lICsgJyEnKTtcbiAqICAgICAgICAgfSBlbHNlIHtcbiAqICAgICAgICAgICByZWplY3QoJ0dyZWV0aW5nICcgKyBuYW1lICsgJyBpcyBub3QgYWxsb3dlZC4nKTtcbiAqICAgICAgICAgfVxuICogICAgICAgfSwgMTAwMCk7XG4gKiAgICAgfSk7XG4gKiAgIH1cbiAqXG4gKiAgIHZhciBwcm9taXNlID0gYXN5bmNHcmVldCgnUm9iaW4gSG9vZCcpO1xuICogICBwcm9taXNlLnRoZW4oZnVuY3Rpb24oZ3JlZXRpbmcpIHtcbiAqICAgICBhbGVydCgnU3VjY2VzczogJyArIGdyZWV0aW5nKTtcbiAqICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gKiAgICAgYWxlcnQoJ0ZhaWxlZDogJyArIHJlYXNvbik7XG4gKiAgIH0pO1xuICogYGBgXG4gKlxuICogTm90ZTogcHJvZ3Jlc3Mvbm90aWZ5IGNhbGxiYWNrcyBhcmUgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQgdmlhIHRoZSBFUzYtc3R5bGUgaW50ZXJmYWNlLlxuICpcbiAqIE5vdGU6IHVubGlrZSBFUzYgYmVoYXZpb3VyLCBhbiBleGNlcHRpb24gdGhyb3duIGluIHRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiB3aWxsIE5PVCBpbXBsaWNpdGx5IHJlamVjdCB0aGUgcHJvbWlzZS5cbiAqXG4gKiBIb3dldmVyLCB0aGUgbW9yZSB0cmFkaXRpb25hbCBDb21tb25KUy1zdHlsZSB1c2FnZSBpcyBzdGlsbCBhdmFpbGFibGUsIGFuZCBkb2N1bWVudGVkIGJlbG93LlxuICpcbiAqIFtUaGUgQ29tbW9uSlMgUHJvbWlzZSBwcm9wb3NhbF0oaHR0cDovL3dpa2kuY29tbW9uanMub3JnL3dpa2kvUHJvbWlzZXMpIGRlc2NyaWJlcyBhIHByb21pc2UgYXMgYW5cbiAqIGludGVyZmFjZSBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhbiBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSByZXN1bHQgb2YgYW4gYWN0aW9uIHRoYXQgaXNcbiAqIHBlcmZvcm1lZCBhc3luY2hyb25vdXNseSwgYW5kIG1heSBvciBtYXkgbm90IGJlIGZpbmlzaGVkIGF0IGFueSBnaXZlbiBwb2ludCBpbiB0aW1lLlxuICpcbiAqIEZyb20gdGhlIHBlcnNwZWN0aXZlIG9mIGRlYWxpbmcgd2l0aCBlcnJvciBoYW5kbGluZywgZGVmZXJyZWQgYW5kIHByb21pc2UgQVBJcyBhcmUgdG9cbiAqIGFzeW5jaHJvbm91cyBwcm9ncmFtbWluZyB3aGF0IGB0cnlgLCBgY2F0Y2hgIGFuZCBgdGhyb3dgIGtleXdvcmRzIGFyZSB0byBzeW5jaHJvbm91cyBwcm9ncmFtbWluZy5cbiAqXG4gKiBgYGBqc1xuICogICAvLyBmb3IgdGhlIHB1cnBvc2Ugb2YgdGhpcyBleGFtcGxlIGxldCdzIGFzc3VtZSB0aGF0IHZhcmlhYmxlcyBgJHFgIGFuZCBgb2tUb0dyZWV0YFxuICogICAvLyBhcmUgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGxleGljYWwgc2NvcGUgKHRoZXkgY291bGQgaGF2ZSBiZWVuIGluamVjdGVkIG9yIHBhc3NlZCBpbikuXG4gKlxuICogICBmdW5jdGlvbiBhc3luY0dyZWV0KG5hbWUpIHtcbiAqICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICpcbiAqICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICogICAgICAgZGVmZXJyZWQubm90aWZ5KCdBYm91dCB0byBncmVldCAnICsgbmFtZSArICcuJyk7XG4gKlxuICogICAgICAgaWYgKG9rVG9HcmVldChuYW1lKSkge1xuICogICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCdIZWxsbywgJyArIG5hbWUgKyAnIScpO1xuICogICAgICAgfSBlbHNlIHtcbiAqICAgICAgICAgZGVmZXJyZWQucmVqZWN0KCdHcmVldGluZyAnICsgbmFtZSArICcgaXMgbm90IGFsbG93ZWQuJyk7XG4gKiAgICAgICB9XG4gKiAgICAgfSwgMTAwMCk7XG4gKlxuICogICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICogICB9XG4gKlxuICogICB2YXIgcHJvbWlzZSA9IGFzeW5jR3JlZXQoJ1JvYmluIEhvb2QnKTtcbiAqICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKGdyZWV0aW5nKSB7XG4gKiAgICAgYWxlcnQoJ1N1Y2Nlc3M6ICcgKyBncmVldGluZyk7XG4gKiAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICogICAgIGFsZXJ0KCdGYWlsZWQ6ICcgKyByZWFzb24pO1xuICogICB9LCBmdW5jdGlvbih1cGRhdGUpIHtcbiAqICAgICBhbGVydCgnR290IG5vdGlmaWNhdGlvbjogJyArIHVwZGF0ZSk7XG4gKiAgIH0pO1xuICogYGBgXG4gKlxuICogQXQgZmlyc3QgaXQgbWlnaHQgbm90IGJlIG9idmlvdXMgd2h5IHRoaXMgZXh0cmEgY29tcGxleGl0eSBpcyB3b3J0aCB0aGUgdHJvdWJsZS4gVGhlIHBheW9mZlxuICogY29tZXMgaW4gdGhlIHdheSBvZiBndWFyYW50ZWVzIHRoYXQgcHJvbWlzZSBhbmQgZGVmZXJyZWQgQVBJcyBtYWtlLCBzZWVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvdW5jb21tb25qcy9ibG9iL21hc3Rlci9wcm9taXNlcy9zcGVjaWZpY2F0aW9uLm1kLlxuICpcbiAqIEFkZGl0aW9uYWxseSB0aGUgcHJvbWlzZSBhcGkgYWxsb3dzIGZvciBjb21wb3NpdGlvbiB0aGF0IGlzIHZlcnkgaGFyZCB0byBkbyB3aXRoIHRoZVxuICogdHJhZGl0aW9uYWwgY2FsbGJhY2sgKFtDUFNdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29udGludWF0aW9uLXBhc3Npbmdfc3R5bGUpKSBhcHByb2FjaC5cbiAqIEZvciBtb3JlIG9uIHRoaXMgcGxlYXNlIHNlZSB0aGUgW1EgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC9xKSBlc3BlY2lhbGx5IHRoZVxuICogc2VjdGlvbiBvbiBzZXJpYWwgb3IgcGFyYWxsZWwgam9pbmluZyBvZiBwcm9taXNlcy5cbiAqXG4gKiAjIFRoZSBEZWZlcnJlZCBBUElcbiAqXG4gKiBBIG5ldyBpbnN0YW5jZSBvZiBkZWZlcnJlZCBpcyBjb25zdHJ1Y3RlZCBieSBjYWxsaW5nIGAkcS5kZWZlcigpYC5cbiAqXG4gKiBUaGUgcHVycG9zZSBvZiB0aGUgZGVmZXJyZWQgb2JqZWN0IGlzIHRvIGV4cG9zZSB0aGUgYXNzb2NpYXRlZCBQcm9taXNlIGluc3RhbmNlIGFzIHdlbGwgYXMgQVBJc1xuICogdGhhdCBjYW4gYmUgdXNlZCBmb3Igc2lnbmFsaW5nIHRoZSBzdWNjZXNzZnVsIG9yIHVuc3VjY2Vzc2Z1bCBjb21wbGV0aW9uLCBhcyB3ZWxsIGFzIHRoZSBzdGF0dXNcbiAqIG9mIHRoZSB0YXNrLlxuICpcbiAqICoqTWV0aG9kcyoqXG4gKlxuICogLSBgcmVzb2x2ZSh2YWx1ZSlgIOKAkyByZXNvbHZlcyB0aGUgZGVyaXZlZCBwcm9taXNlIHdpdGggdGhlIGB2YWx1ZWAuIElmIHRoZSB2YWx1ZSBpcyBhIHJlamVjdGlvblxuICogICBjb25zdHJ1Y3RlZCB2aWEgYCRxLnJlamVjdGAsIHRoZSBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgaW5zdGVhZC5cbiAqIC0gYHJlamVjdChyZWFzb24pYCDigJMgcmVqZWN0cyB0aGUgZGVyaXZlZCBwcm9taXNlIHdpdGggdGhlIGByZWFzb25gLiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAqICAgcmVzb2x2aW5nIGl0IHdpdGggYSByZWplY3Rpb24gY29uc3RydWN0ZWQgdmlhIGAkcS5yZWplY3RgLlxuICogLSBgbm90aWZ5KHZhbHVlKWAgLSBwcm92aWRlcyB1cGRhdGVzIG9uIHRoZSBzdGF0dXMgb2YgdGhlIHByb21pc2UncyBleGVjdXRpb24uIFRoaXMgbWF5IGJlIGNhbGxlZFxuICogICBtdWx0aXBsZSB0aW1lcyBiZWZvcmUgdGhlIHByb21pc2UgaXMgZWl0aGVyIHJlc29sdmVkIG9yIHJlamVjdGVkLlxuICpcbiAqICoqUHJvcGVydGllcyoqXG4gKlxuICogLSBwcm9taXNlIOKAkyBge1Byb21pc2V9YCDigJMgcHJvbWlzZSBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZGVmZXJyZWQuXG4gKlxuICpcbiAqICMgVGhlIFByb21pc2UgQVBJXG4gKlxuICogQSBuZXcgcHJvbWlzZSBpbnN0YW5jZSBpcyBjcmVhdGVkIHdoZW4gYSBkZWZlcnJlZCBpbnN0YW5jZSBpcyBjcmVhdGVkIGFuZCBjYW4gYmUgcmV0cmlldmVkIGJ5XG4gKiBjYWxsaW5nIGBkZWZlcnJlZC5wcm9taXNlYC5cbiAqXG4gKiBUaGUgcHVycG9zZSBvZiB0aGUgcHJvbWlzZSBvYmplY3QgaXMgdG8gYWxsb3cgZm9yIGludGVyZXN0ZWQgcGFydGllcyB0byBnZXQgYWNjZXNzIHRvIHRoZSByZXN1bHRcbiAqIG9mIHRoZSBkZWZlcnJlZCB0YXNrIHdoZW4gaXQgY29tcGxldGVzLlxuICpcbiAqICoqTWV0aG9kcyoqXG4gKlxuICogLSBgdGhlbihzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2ssIG5vdGlmeUNhbGxiYWNrKWAg4oCTIHJlZ2FyZGxlc3Mgb2Ygd2hlbiB0aGUgcHJvbWlzZSB3YXMgb3JcbiAqICAgd2lsbCBiZSByZXNvbHZlZCBvciByZWplY3RlZCwgYHRoZW5gIGNhbGxzIG9uZSBvZiB0aGUgc3VjY2VzcyBvciBlcnJvciBjYWxsYmFja3MgYXN5bmNocm9ub3VzbHlcbiAqICAgYXMgc29vbiBhcyB0aGUgcmVzdWx0IGlzIGF2YWlsYWJsZS4gVGhlIGNhbGxiYWNrcyBhcmUgY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQ6IHRoZSByZXN1bHRcbiAqICAgb3IgcmVqZWN0aW9uIHJlYXNvbi4gQWRkaXRpb25hbGx5LCB0aGUgbm90aWZ5IGNhbGxiYWNrIG1heSBiZSBjYWxsZWQgemVybyBvciBtb3JlIHRpbWVzIHRvXG4gKiAgIHByb3ZpZGUgYSBwcm9ncmVzcyBpbmRpY2F0aW9uLCBiZWZvcmUgdGhlIHByb21pc2UgaXMgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQuXG4gKlxuICogICBUaGlzIG1ldGhvZCAqcmV0dXJucyBhIG5ldyBwcm9taXNlKiB3aGljaCBpcyByZXNvbHZlZCBvciByZWplY3RlZCB2aWEgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGVcbiAqICAgYHN1Y2Nlc3NDYWxsYmFja2AsIGBlcnJvckNhbGxiYWNrYCAodW5sZXNzIHRoYXQgdmFsdWUgaXMgYSBwcm9taXNlLCBpbiB3aGljaCBjYXNlIGl0IGlzIHJlc29sdmVkXG4gKiAgIHdpdGggdGhlIHZhbHVlIHdoaWNoIGlzIHJlc29sdmVkIGluIHRoYXQgcHJvbWlzZSB1c2luZ1xuICogICBbcHJvbWlzZSBjaGFpbmluZ10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZXM2L3Byb21pc2VzLyN0b2MtcHJvbWlzZXMtcXVldWVzKSkuXG4gKiAgIEl0IGFsc28gbm90aWZpZXMgdmlhIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBub3RpZnlDYWxsYmFja2AgbWV0aG9kLiBUaGUgcHJvbWlzZSBjYW5ub3QgYmVcbiAqICAgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQgZnJvbSB0aGUgbm90aWZ5Q2FsbGJhY2sgbWV0aG9kLlxuICpcbiAqIC0gYGNhdGNoKGVycm9yQ2FsbGJhY2spYCDigJMgc2hvcnRoYW5kIGZvciBgcHJvbWlzZS50aGVuKG51bGwsIGVycm9yQ2FsbGJhY2spYFxuICpcbiAqIC0gYGZpbmFsbHkoY2FsbGJhY2ssIG5vdGlmeUNhbGxiYWNrKWAg4oCTIGFsbG93cyB5b3UgdG8gb2JzZXJ2ZSBlaXRoZXIgdGhlIGZ1bGZpbGxtZW50IG9yIHJlamVjdGlvbiBvZiBhIHByb21pc2UsXG4gKiAgIGJ1dCB0byBkbyBzbyB3aXRob3V0IG1vZGlmeWluZyB0aGUgZmluYWwgdmFsdWUuIFRoaXMgaXMgdXNlZnVsIHRvIHJlbGVhc2UgcmVzb3VyY2VzIG9yIGRvIHNvbWVcbiAqICAgY2xlYW4tdXAgdGhhdCBuZWVkcyB0byBiZSBkb25lIHdoZXRoZXIgdGhlIHByb21pc2Ugd2FzIHJlamVjdGVkIG9yIHJlc29sdmVkLiBTZWUgdGhlIFtmdWxsXG4gKiAgIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcS93aWtpL0FQSS1SZWZlcmVuY2UjcHJvbWlzZWZpbmFsbHljYWxsYmFjaykgZm9yXG4gKiAgIG1vcmUgaW5mb3JtYXRpb24uXG4gKlxuICogIyBDaGFpbmluZyBwcm9taXNlc1xuICpcbiAqIEJlY2F1c2UgY2FsbGluZyB0aGUgYHRoZW5gIG1ldGhvZCBvZiBhIHByb21pc2UgcmV0dXJucyBhIG5ldyBkZXJpdmVkIHByb21pc2UsIGl0IGlzIGVhc2lseVxuICogcG9zc2libGUgdG8gY3JlYXRlIGEgY2hhaW4gb2YgcHJvbWlzZXM6XG4gKlxuICogYGBganNcbiAqICAgcHJvbWlzZUIgPSBwcm9taXNlQS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICogICAgIHJldHVybiByZXN1bHQgKyAxO1xuICogICB9KTtcbiAqXG4gKiAgIC8vIHByb21pc2VCIHdpbGwgYmUgcmVzb2x2ZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgcHJvbWlzZUEgaXMgcmVzb2x2ZWQgYW5kIGl0cyB2YWx1ZVxuICogICAvLyB3aWxsIGJlIHRoZSByZXN1bHQgb2YgcHJvbWlzZUEgaW5jcmVtZW50ZWQgYnkgMVxuICogYGBgXG4gKlxuICogSXQgaXMgcG9zc2libGUgdG8gY3JlYXRlIGNoYWlucyBvZiBhbnkgbGVuZ3RoIGFuZCBzaW5jZSBhIHByb21pc2UgY2FuIGJlIHJlc29sdmVkIHdpdGggYW5vdGhlclxuICogcHJvbWlzZSAod2hpY2ggd2lsbCBkZWZlciBpdHMgcmVzb2x1dGlvbiBmdXJ0aGVyKSwgaXQgaXMgcG9zc2libGUgdG8gcGF1c2UvZGVmZXIgcmVzb2x1dGlvbiBvZlxuICogdGhlIHByb21pc2VzIGF0IGFueSBwb2ludCBpbiB0aGUgY2hhaW4uIFRoaXMgbWFrZXMgaXQgcG9zc2libGUgdG8gaW1wbGVtZW50IHBvd2VyZnVsIEFQSXMgbGlrZVxuICogJGh0dHAncyByZXNwb25zZSBpbnRlcmNlcHRvcnMuXG4gKlxuICpcbiAqICMgRGlmZmVyZW5jZXMgYmV0d2VlbiBLcmlzIEtvd2FsJ3MgUSBhbmQgJHFcbiAqXG4gKiAgVGhlcmUgYXJlIHR3byBtYWluIGRpZmZlcmVuY2VzOlxuICpcbiAqIC0gJHEgaXMgaW50ZWdyYXRlZCB3aXRoIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZX0gU2NvcGUgbW9kZWwgb2JzZXJ2YXRpb25cbiAqICAgbWVjaGFuaXNtIGluIGFuZ3VsYXIsIHdoaWNoIG1lYW5zIGZhc3RlciBwcm9wYWdhdGlvbiBvZiByZXNvbHV0aW9uIG9yIHJlamVjdGlvbiBpbnRvIHlvdXJcbiAqICAgbW9kZWxzIGFuZCBhdm9pZGluZyB1bm5lY2Vzc2FyeSBicm93c2VyIHJlcGFpbnRzLCB3aGljaCB3b3VsZCByZXN1bHQgaW4gZmxpY2tlcmluZyBVSS5cbiAqIC0gUSBoYXMgbWFueSBtb3JlIGZlYXR1cmVzIHRoYW4gJHEsIGJ1dCB0aGF0IGNvbWVzIGF0IGEgY29zdCBvZiBieXRlcy4gJHEgaXMgdGlueSwgYnV0IGNvbnRhaW5zXG4gKiAgIGFsbCB0aGUgaW1wb3J0YW50IGZ1bmN0aW9uYWxpdHkgbmVlZGVkIGZvciBjb21tb24gYXN5bmMgdGFza3MuXG4gKlxuICogICMgVGVzdGluZ1xuICpcbiAqICBgYGBqc1xuICogICAgaXQoJ3Nob3VsZCBzaW11bGF0ZSBwcm9taXNlJywgaW5qZWN0KGZ1bmN0aW9uKCRxLCAkcm9vdFNjb3BlKSB7XG4gKiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gKiAgICAgIHZhciBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZTtcbiAqICAgICAgdmFyIHJlc29sdmVkVmFsdWU7XG4gKlxuICogICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpIHsgcmVzb2x2ZWRWYWx1ZSA9IHZhbHVlOyB9KTtcbiAqICAgICAgZXhwZWN0KHJlc29sdmVkVmFsdWUpLnRvQmVVbmRlZmluZWQoKTtcbiAqXG4gKiAgICAgIC8vIFNpbXVsYXRlIHJlc29sdmluZyBvZiBwcm9taXNlXG4gKiAgICAgIGRlZmVycmVkLnJlc29sdmUoMTIzKTtcbiAqICAgICAgLy8gTm90ZSB0aGF0IHRoZSAndGhlbicgZnVuY3Rpb24gZG9lcyBub3QgZ2V0IGNhbGxlZCBzeW5jaHJvbm91c2x5LlxuICogICAgICAvLyBUaGlzIGlzIGJlY2F1c2Ugd2Ugd2FudCB0aGUgcHJvbWlzZSBBUEkgdG8gYWx3YXlzIGJlIGFzeW5jLCB3aGV0aGVyIG9yIG5vdFxuICogICAgICAvLyBpdCBnb3QgY2FsbGVkIHN5bmNocm9ub3VzbHkgb3IgYXN5bmNocm9ub3VzbHkuXG4gKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0JlVW5kZWZpbmVkKCk7XG4gKlxuICogICAgICAvLyBQcm9wYWdhdGUgcHJvbWlzZSByZXNvbHV0aW9uIHRvICd0aGVuJyBmdW5jdGlvbnMgdXNpbmcgJGFwcGx5KCkuXG4gKiAgICAgICRyb290U2NvcGUuJGFwcGx5KCk7XG4gKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0VxdWFsKDEyMyk7XG4gKiAgICB9KSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihmdW5jdGlvbiwgZnVuY3Rpb24pfSByZXNvbHZlciBGdW5jdGlvbiB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgcmVzb2x2aW5nIG9yXG4gKiAgIHJlamVjdGluZyB0aGUgbmV3bHkgY3JlYXRlZCBwcm9taXNlLiBUaGUgZmlyc3QgcGFyYW1ldGVyIGlzIGEgZnVuY3Rpb24gd2hpY2ggcmVzb2x2ZXMgdGhlXG4gKiAgIHByb21pc2UsIHRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzIGEgZnVuY3Rpb24gd2hpY2ggcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIG5ld2x5IGNyZWF0ZWQgcHJvbWlzZS5cbiAqL1xuZnVuY3Rpb24gJFFQcm92aWRlcigpIHtcblxuICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkZXhjZXB0aW9uSGFuZGxlcikge1xuICAgIHJldHVybiBxRmFjdG9yeShmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGNhbGxiYWNrKTtcbiAgICB9LCAkZXhjZXB0aW9uSGFuZGxlcik7XG4gIH1dO1xufVxuXG5mdW5jdGlvbiAkJFFQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckYnJvd3NlcicsICckZXhjZXB0aW9uSGFuZGxlcicsIGZ1bmN0aW9uKCRicm93c2VyLCAkZXhjZXB0aW9uSGFuZGxlcikge1xuICAgIHJldHVybiBxRmFjdG9yeShmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgJGJyb3dzZXIuZGVmZXIoY2FsbGJhY2spO1xuICAgIH0sICRleGNlcHRpb25IYW5kbGVyKTtcbiAgfV07XG59XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIHByb21pc2UgbWFuYWdlci5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGZ1bmN0aW9uKX0gbmV4dFRpY2sgRnVuY3Rpb24gZm9yIGV4ZWN1dGluZyBmdW5jdGlvbnMgaW4gdGhlIG5leHQgdHVybi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oLi4uKil9IGV4Y2VwdGlvbkhhbmRsZXIgRnVuY3Rpb24gaW50byB3aGljaCB1bmV4cGVjdGVkIGV4Y2VwdGlvbnMgYXJlIHBhc3NlZCBmb3JcbiAqICAgICBkZWJ1Z2dpbmcgcHVycG9zZXMuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBQcm9taXNlIG1hbmFnZXIuXG4gKi9cbmZ1bmN0aW9uIHFGYWN0b3J5KG5leHRUaWNrLCBleGNlcHRpb25IYW5kbGVyKSB7XG4gIHZhciAkcU1pbkVyciA9IG1pbkVycignJHEnLCBUeXBlRXJyb3IpO1xuICBmdW5jdGlvbiBjYWxsT25jZShzZWxmLCByZXNvbHZlRm4sIHJlamVjdEZuKSB7XG4gICAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIHdyYXAoZm4pIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoY2FsbGVkKSByZXR1cm47XG4gICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgIGZuLmNhbGwoc2VsZiwgdmFsdWUpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gW3dyYXAocmVzb2x2ZUZuKSwgd3JhcChyZWplY3RGbildO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmcuJHEjZGVmZXJcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSBgRGVmZXJyZWRgIG9iamVjdCB3aGljaCByZXByZXNlbnRzIGEgdGFzayB3aGljaCB3aWxsIGZpbmlzaCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7RGVmZXJyZWR9IFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgZGVmZXJyZWQuXG4gICAqL1xuICB2YXIgZGVmZXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IERlZmVycmVkKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gUHJvbWlzZSgpIHtcbiAgICB0aGlzLiQkc3RhdGUgPSB7IHN0YXR1czogMCB9O1xuICB9XG5cbiAgZXh0ZW5kKFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgdGhlbjogZnVuY3Rpb24ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb2dyZXNzQmFjaykge1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKG9uRnVsZmlsbGVkKSAmJiBpc1VuZGVmaW5lZChvblJlamVjdGVkKSAmJiBpc1VuZGVmaW5lZChwcm9ncmVzc0JhY2spKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBEZWZlcnJlZCgpO1xuXG4gICAgICB0aGlzLiQkc3RhdGUucGVuZGluZyA9IHRoaXMuJCRzdGF0ZS5wZW5kaW5nIHx8IFtdO1xuICAgICAgdGhpcy4kJHN0YXRlLnBlbmRpbmcucHVzaChbcmVzdWx0LCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgcHJvZ3Jlc3NCYWNrXSk7XG4gICAgICBpZiAodGhpcy4kJHN0YXRlLnN0YXR1cyA+IDApIHNjaGVkdWxlUHJvY2Vzc1F1ZXVlKHRoaXMuJCRzdGF0ZSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQucHJvbWlzZTtcbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBjYWxsYmFjayk7XG4gICAgfSxcblxuICAgIFwiZmluYWxseVwiOiBmdW5jdGlvbihjYWxsYmFjaywgcHJvZ3Jlc3NCYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVDYWxsYmFjayh2YWx1ZSwgdHJ1ZSwgY2FsbGJhY2spO1xuICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKGVycm9yLCBmYWxzZSwgY2FsbGJhY2spO1xuICAgICAgfSwgcHJvZ3Jlc3NCYWNrKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vRmFzdGVyLCBtb3JlIGJhc2ljIHRoYW4gYW5ndWxhci5iaW5kIGh0dHA6Ly9qc3BlcmYuY29tL2FuZ3VsYXItYmluZC12cy1jdXN0b20tdnMtbmF0aXZlXG4gIGZ1bmN0aW9uIHNpbXBsZUJpbmQoY29udGV4dCwgZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGZuLmNhbGwoY29udGV4dCwgdmFsdWUpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwcm9jZXNzUXVldWUoc3RhdGUpIHtcbiAgICB2YXIgZm4sIGRlZmVycmVkLCBwZW5kaW5nO1xuXG4gICAgcGVuZGluZyA9IHN0YXRlLnBlbmRpbmc7XG4gICAgc3RhdGUucHJvY2Vzc1NjaGVkdWxlZCA9IGZhbHNlO1xuICAgIHN0YXRlLnBlbmRpbmcgPSB1bmRlZmluZWQ7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcGVuZGluZy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICBkZWZlcnJlZCA9IHBlbmRpbmdbaV1bMF07XG4gICAgICBmbiA9IHBlbmRpbmdbaV1bc3RhdGUuc3RhdHVzXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZm4oc3RhdGUudmFsdWUpKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5zdGF0dXMgPT09IDEpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHN0YXRlLnZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qoc3RhdGUudmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGRlZmVycmVkLnJlamVjdChlKTtcbiAgICAgICAgZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY2hlZHVsZVByb2Nlc3NRdWV1ZShzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5wcm9jZXNzU2NoZWR1bGVkIHx8ICFzdGF0ZS5wZW5kaW5nKSByZXR1cm47XG4gICAgc3RhdGUucHJvY2Vzc1NjaGVkdWxlZCA9IHRydWU7XG4gICAgbmV4dFRpY2soZnVuY3Rpb24oKSB7IHByb2Nlc3NRdWV1ZShzdGF0ZSk7IH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gRGVmZXJyZWQoKSB7XG4gICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoKTtcbiAgICAvL05lY2Vzc2FyeSB0byBzdXBwb3J0IHVuYm91bmQgZXhlY3V0aW9uIDovXG4gICAgdGhpcy5yZXNvbHZlID0gc2ltcGxlQmluZCh0aGlzLCB0aGlzLnJlc29sdmUpO1xuICAgIHRoaXMucmVqZWN0ID0gc2ltcGxlQmluZCh0aGlzLCB0aGlzLnJlamVjdCk7XG4gICAgdGhpcy5ub3RpZnkgPSBzaW1wbGVCaW5kKHRoaXMsIHRoaXMubm90aWZ5KTtcbiAgfVxuXG4gIGV4dGVuZChEZWZlcnJlZC5wcm90b3R5cGUsIHtcbiAgICByZXNvbHZlOiBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMpIHJldHVybjtcbiAgICAgIGlmICh2YWwgPT09IHRoaXMucHJvbWlzZSkge1xuICAgICAgICB0aGlzLiQkcmVqZWN0KCRxTWluRXJyKFxuICAgICAgICAgICdxY3ljbGUnLFxuICAgICAgICAgIFwiRXhwZWN0ZWQgcHJvbWlzZSB0byBiZSByZXNvbHZlZCB3aXRoIHZhbHVlIG90aGVyIHRoYW4gaXRzZWxmICd7MH0nXCIsXG4gICAgICAgICAgdmFsKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiQkcmVzb2x2ZSh2YWwpO1xuICAgICAgfVxuXG4gICAgfSxcblxuICAgICQkcmVzb2x2ZTogZnVuY3Rpb24odmFsKSB7XG4gICAgICB2YXIgdGhlbiwgZm5zO1xuXG4gICAgICBmbnMgPSBjYWxsT25jZSh0aGlzLCB0aGlzLiQkcmVzb2x2ZSwgdGhpcy4kJHJlamVjdCk7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoKGlzT2JqZWN0KHZhbCkgfHwgaXNGdW5jdGlvbih2YWwpKSkgdGhlbiA9IHZhbCAmJiB2YWwudGhlbjtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhlbikpIHtcbiAgICAgICAgICB0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPSAtMTtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsLCBmbnNbMF0sIGZuc1sxXSwgdGhpcy5ub3RpZnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucHJvbWlzZS4kJHN0YXRlLnZhbHVlID0gdmFsO1xuICAgICAgICAgIHRoaXMucHJvbWlzZS4kJHN0YXRlLnN0YXR1cyA9IDE7XG4gICAgICAgICAgc2NoZWR1bGVQcm9jZXNzUXVldWUodGhpcy5wcm9taXNlLiQkc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGZuc1sxXShlKTtcbiAgICAgICAgZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVqZWN0OiBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgIGlmICh0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMpIHJldHVybjtcbiAgICAgIHRoaXMuJCRyZWplY3QocmVhc29uKTtcbiAgICB9LFxuXG4gICAgJCRyZWplY3Q6IGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgdGhpcy5wcm9taXNlLiQkc3RhdGUudmFsdWUgPSByZWFzb247XG4gICAgICB0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPSAyO1xuICAgICAgc2NoZWR1bGVQcm9jZXNzUXVldWUodGhpcy5wcm9taXNlLiQkc3RhdGUpO1xuICAgIH0sXG5cbiAgICBub3RpZnk6IGZ1bmN0aW9uKHByb2dyZXNzKSB7XG4gICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5wcm9taXNlLiQkc3RhdGUucGVuZGluZztcblxuICAgICAgaWYgKCh0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPD0gMCkgJiYgY2FsbGJhY2tzICYmIGNhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgbmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGNhbGxiYWNrLCByZXN1bHQ7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrc1tpXVswXTtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2tzW2ldWzNdO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmVzdWx0Lm5vdGlmeShpc0Z1bmN0aW9uKGNhbGxiYWNrKSA/IGNhbGxiYWNrKHByb2dyZXNzKSA6IHByb2dyZXNzKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHEjcmVqZWN0XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDcmVhdGVzIGEgcHJvbWlzZSB0aGF0IGlzIHJlc29sdmVkIGFzIHJlamVjdGVkIHdpdGggdGhlIHNwZWNpZmllZCBgcmVhc29uYC4gVGhpcyBhcGkgc2hvdWxkIGJlXG4gICAqIHVzZWQgdG8gZm9yd2FyZCByZWplY3Rpb24gaW4gYSBjaGFpbiBvZiBwcm9taXNlcy4gSWYgeW91IGFyZSBkZWFsaW5nIHdpdGggdGhlIGxhc3QgcHJvbWlzZSBpblxuICAgKiBhIHByb21pc2UgY2hhaW4sIHlvdSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IGl0LlxuICAgKlxuICAgKiBXaGVuIGNvbXBhcmluZyBkZWZlcnJlZHMvcHJvbWlzZXMgdG8gdGhlIGZhbWlsaWFyIGJlaGF2aW9yIG9mIHRyeS9jYXRjaC90aHJvdywgdGhpbmsgb2ZcbiAgICogYHJlamVjdGAgYXMgdGhlIGB0aHJvd2Aga2V5d29yZCBpbiBKYXZhU2NyaXB0LiBUaGlzIGFsc28gbWVhbnMgdGhhdCBpZiB5b3UgXCJjYXRjaFwiIGFuIGVycm9yIHZpYVxuICAgKiBhIHByb21pc2UgZXJyb3IgY2FsbGJhY2sgYW5kIHlvdSB3YW50IHRvIGZvcndhcmQgdGhlIGVycm9yIHRvIHRoZSBwcm9taXNlIGRlcml2ZWQgZnJvbSB0aGVcbiAgICogY3VycmVudCBwcm9taXNlLCB5b3UgaGF2ZSB0byBcInJldGhyb3dcIiB0aGUgZXJyb3IgYnkgcmV0dXJuaW5nIGEgcmVqZWN0aW9uIGNvbnN0cnVjdGVkIHZpYVxuICAgKiBgcmVqZWN0YC5cbiAgICpcbiAgICogYGBganNcbiAgICogICBwcm9taXNlQiA9IHByb21pc2VBLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAqICAgICAvLyBzdWNjZXNzOiBkbyBzb21ldGhpbmcgYW5kIHJlc29sdmUgcHJvbWlzZUJcbiAgICogICAgIC8vICAgICAgICAgIHdpdGggdGhlIG9sZCBvciBhIG5ldyByZXN1bHRcbiAgICogICAgIHJldHVybiByZXN1bHQ7XG4gICAqICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAqICAgICAvLyBlcnJvcjogaGFuZGxlIHRoZSBlcnJvciBpZiBwb3NzaWJsZSBhbmRcbiAgICogICAgIC8vICAgICAgICByZXNvbHZlIHByb21pc2VCIHdpdGggbmV3UHJvbWlzZU9yVmFsdWUsXG4gICAqICAgICAvLyAgICAgICAgb3RoZXJ3aXNlIGZvcndhcmQgdGhlIHJlamVjdGlvbiB0byBwcm9taXNlQlxuICAgKiAgICAgaWYgKGNhbkhhbmRsZShyZWFzb24pKSB7XG4gICAqICAgICAgLy8gaGFuZGxlIHRoZSBlcnJvciBhbmQgcmVjb3ZlclxuICAgKiAgICAgIHJldHVybiBuZXdQcm9taXNlT3JWYWx1ZTtcbiAgICogICAgIH1cbiAgICogICAgIHJldHVybiAkcS5yZWplY3QocmVhc29uKTtcbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gcmVhc29uIENvbnN0YW50LCBtZXNzYWdlLCBleGNlcHRpb24gb3IgYW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgcmVqZWN0aW9uIHJlYXNvbi5cbiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBwcm9taXNlIHRoYXQgd2FzIGFscmVhZHkgcmVzb2x2ZWQgYXMgcmVqZWN0ZWQgd2l0aCB0aGUgYHJlYXNvbmAuXG4gICAqL1xuICB2YXIgcmVqZWN0ID0gZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgIHJlc3VsdC5yZWplY3QocmVhc29uKTtcbiAgICByZXR1cm4gcmVzdWx0LnByb21pc2U7XG4gIH07XG5cbiAgdmFyIG1ha2VQcm9taXNlID0gZnVuY3Rpb24gbWFrZVByb21pc2UodmFsdWUsIHJlc29sdmVkKSB7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgIGlmIChyZXNvbHZlZCkge1xuICAgICAgcmVzdWx0LnJlc29sdmUodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucmVqZWN0KHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdC5wcm9taXNlO1xuICB9O1xuXG4gIHZhciBoYW5kbGVDYWxsYmFjayA9IGZ1bmN0aW9uIGhhbmRsZUNhbGxiYWNrKHZhbHVlLCBpc1Jlc29sdmVkLCBjYWxsYmFjaykge1xuICAgIHZhciBjYWxsYmFja091dHB1dCA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKGNhbGxiYWNrKSkgY2FsbGJhY2tPdXRwdXQgPSBjYWxsYmFjaygpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBtYWtlUHJvbWlzZShlLCBmYWxzZSk7XG4gICAgfVxuICAgIGlmIChpc1Byb21pc2VMaWtlKGNhbGxiYWNrT3V0cHV0KSkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrT3V0cHV0LnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBtYWtlUHJvbWlzZSh2YWx1ZSwgaXNSZXNvbHZlZCk7XG4gICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICByZXR1cm4gbWFrZVByb21pc2UoZXJyb3IsIGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWFrZVByb21pc2UodmFsdWUsIGlzUmVzb2x2ZWQpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkcSN3aGVuXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBXcmFwcyBhbiBvYmplY3QgdGhhdCBtaWdodCBiZSBhIHZhbHVlIG9yIGEgKDNyZCBwYXJ0eSkgdGhlbi1hYmxlIHByb21pc2UgaW50byBhICRxIHByb21pc2UuXG4gICAqIFRoaXMgaXMgdXNlZnVsIHdoZW4geW91IGFyZSBkZWFsaW5nIHdpdGggYW4gb2JqZWN0IHRoYXQgbWlnaHQgb3IgbWlnaHQgbm90IGJlIGEgcHJvbWlzZSwgb3IgaWZcbiAgICogdGhlIHByb21pc2UgY29tZXMgZnJvbSBhIHNvdXJjZSB0aGF0IGNhbid0IGJlIHRydXN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgb3IgYSBwcm9taXNlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb249fSBzdWNjZXNzQ2FsbGJhY2tcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IGVycm9yQ2FsbGJhY2tcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IHByb2dyZXNzQ2FsbGJhY2tcbiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBwcm9taXNlIG9mIHRoZSBwYXNzZWQgdmFsdWUgb3IgcHJvbWlzZVxuICAgKi9cblxuXG4gIHZhciB3aGVuID0gZnVuY3Rpb24odmFsdWUsIGNhbGxiYWNrLCBlcnJiYWNrLCBwcm9ncmVzc0JhY2spIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IERlZmVycmVkKCk7XG4gICAgcmVzdWx0LnJlc29sdmUodmFsdWUpO1xuICAgIHJldHVybiByZXN1bHQucHJvbWlzZS50aGVuKGNhbGxiYWNrLCBlcnJiYWNrLCBwcm9ncmVzc0JhY2spO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxI3Jlc29sdmVcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEFsaWFzIG9mIHtAbGluayBuZy4kcSN3aGVuIHdoZW59IHRvIG1haW50YWluIG5hbWluZyBjb25zaXN0ZW5jeSB3aXRoIEVTNi5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSBvciBhIHByb21pc2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IHN1Y2Nlc3NDYWxsYmFja1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXJyb3JDYWxsYmFja1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gcHJvZ3Jlc3NDYWxsYmFja1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHByb21pc2Ugb2YgdGhlIHBhc3NlZCB2YWx1ZSBvciBwcm9taXNlXG4gICAqL1xuICB2YXIgcmVzb2x2ZSA9IHdoZW47XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHEjYWxsXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDb21iaW5lcyBtdWx0aXBsZSBwcm9taXNlcyBpbnRvIGEgc2luZ2xlIHByb21pc2UgdGhhdCBpcyByZXNvbHZlZCB3aGVuIGFsbCBvZiB0aGUgaW5wdXRcbiAgICogcHJvbWlzZXMgYXJlIHJlc29sdmVkLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5LjxQcm9taXNlPnxPYmplY3QuPFByb21pc2U+fSBwcm9taXNlcyBBbiBhcnJheSBvciBoYXNoIG9mIHByb21pc2VzLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHNpbmdsZSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aXRoIGFuIGFycmF5L2hhc2ggb2YgdmFsdWVzLFxuICAgKiAgIGVhY2ggdmFsdWUgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvbWlzZSBhdCB0aGUgc2FtZSBpbmRleC9rZXkgaW4gdGhlIGBwcm9taXNlc2AgYXJyYXkvaGFzaC5cbiAgICogICBJZiBhbnkgb2YgdGhlIHByb21pc2VzIGlzIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24sIHRoaXMgcmVzdWx0aW5nIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZFxuICAgKiAgIHdpdGggdGhlIHNhbWUgcmVqZWN0aW9uIHZhbHVlLlxuICAgKi9cblxuICBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgICB2YXIgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKSxcbiAgICAgICAgY291bnRlciA9IDAsXG4gICAgICAgIHJlc3VsdHMgPSBpc0FycmF5KHByb21pc2VzKSA/IFtdIDoge307XG5cbiAgICBmb3JFYWNoKHByb21pc2VzLCBmdW5jdGlvbihwcm9taXNlLCBrZXkpIHtcbiAgICAgIGNvdW50ZXIrKztcbiAgICAgIHdoZW4ocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAocmVzdWx0cy5oYXNPd25Qcm9wZXJ0eShrZXkpKSByZXR1cm47XG4gICAgICAgIHJlc3VsdHNba2V5XSA9IHZhbHVlO1xuICAgICAgICBpZiAoISgtLWNvdW50ZXIpKSBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgIGlmIChyZXN1bHRzLmhhc093blByb3BlcnR5KGtleSkpIHJldHVybjtcbiAgICAgICAgZGVmZXJyZWQucmVqZWN0KHJlYXNvbik7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGlmIChjb3VudGVyID09PSAwKSB7XG4gICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdHMpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9XG5cbiAgdmFyICRRID0gZnVuY3Rpb24gUShyZXNvbHZlcikge1xuICAgIGlmICghaXNGdW5jdGlvbihyZXNvbHZlcikpIHtcbiAgICAgIHRocm93ICRxTWluRXJyKCdub3JzbHZyJywgXCJFeHBlY3RlZCByZXNvbHZlckZuLCBnb3QgJ3swfSdcIiwgcmVzb2x2ZXIpO1xuICAgIH1cblxuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBRKSkge1xuICAgICAgLy8gTW9yZSB1c2VmdWwgd2hlbiAkUSBpcyB0aGUgUHJvbWlzZSBpdHNlbGYuXG4gICAgICByZXR1cm4gbmV3IFEocmVzb2x2ZXIpO1xuICAgIH1cblxuICAgIHZhciBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZUZuKHZhbHVlKSB7XG4gICAgICBkZWZlcnJlZC5yZXNvbHZlKHZhbHVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWplY3RGbihyZWFzb24pIHtcbiAgICAgIGRlZmVycmVkLnJlamVjdChyZWFzb24pO1xuICAgIH1cblxuICAgIHJlc29sdmVyKHJlc29sdmVGbiwgcmVqZWN0Rm4pO1xuXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gIH07XG5cbiAgJFEuZGVmZXIgPSBkZWZlcjtcbiAgJFEucmVqZWN0ID0gcmVqZWN0O1xuICAkUS53aGVuID0gd2hlbjtcbiAgJFEucmVzb2x2ZSA9IHJlc29sdmU7XG4gICRRLmFsbCA9IGFsbDtcblxuICByZXR1cm4gJFE7XG59XG5cbmZ1bmN0aW9uICQkUkFGUHJvdmlkZXIoKSB7IC8vckFGXG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckdGltZW91dCcsIGZ1bmN0aW9uKCR3aW5kb3csICR0aW1lb3V0KSB7XG4gICAgdmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9ICR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuXG4gICAgdmFyIGNhbmNlbEFuaW1hdGlvbkZyYW1lID0gJHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LndlYmtpdENhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZTtcblxuICAgIHZhciByYWZTdXBwb3J0ZWQgPSAhIXJlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgICB2YXIgcmFmID0gcmFmU3VwcG9ydGVkXG4gICAgICA/IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgdmFyIGlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZuKTtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgOiBmdW5jdGlvbihmbikge1xuICAgICAgICAgIHZhciB0aW1lciA9ICR0aW1lb3V0KGZuLCAxNi42NiwgZmFsc2UpOyAvLyAxMDAwIC8gNjAgPSAxNi42NjZcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkdGltZW91dC5jYW5jZWwodGltZXIpO1xuICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICByYWYuc3VwcG9ydGVkID0gcmFmU3VwcG9ydGVkO1xuXG4gICAgcmV0dXJuIHJhZjtcbiAgfV07XG59XG5cbi8qKlxuICogREVTSUdOIE5PVEVTXG4gKlxuICogVGhlIGRlc2lnbiBkZWNpc2lvbnMgYmVoaW5kIHRoZSBzY29wZSBhcmUgaGVhdmlseSBmYXZvcmVkIGZvciBzcGVlZCBhbmQgbWVtb3J5IGNvbnN1bXB0aW9uLlxuICpcbiAqIFRoZSB0eXBpY2FsIHVzZSBvZiBzY29wZSBpcyB0byB3YXRjaCB0aGUgZXhwcmVzc2lvbnMsIHdoaWNoIG1vc3Qgb2YgdGhlIHRpbWUgcmV0dXJuIHRoZSBzYW1lXG4gKiB2YWx1ZSBhcyBsYXN0IHRpbWUgc28gd2Ugb3B0aW1pemUgdGhlIG9wZXJhdGlvbi5cbiAqXG4gKiBDbG9zdXJlcyBjb25zdHJ1Y3Rpb24gaXMgZXhwZW5zaXZlIGluIHRlcm1zIG9mIHNwZWVkIGFzIHdlbGwgYXMgbWVtb3J5OlxuICogICAtIE5vIGNsb3N1cmVzLCBpbnN0ZWFkIHVzZSBwcm90b3R5cGljYWwgaW5oZXJpdGFuY2UgZm9yIEFQSVxuICogICAtIEludGVybmFsIHN0YXRlIG5lZWRzIHRvIGJlIHN0b3JlZCBvbiBzY29wZSBkaXJlY3RseSwgd2hpY2ggbWVhbnMgdGhhdCBwcml2YXRlIHN0YXRlIGlzXG4gKiAgICAgZXhwb3NlZCBhcyAkJF9fX18gcHJvcGVydGllc1xuICpcbiAqIExvb3Agb3BlcmF0aW9ucyBhcmUgb3B0aW1pemVkIGJ5IHVzaW5nIHdoaWxlKGNvdW50LS0pIHsgLi4uIH1cbiAqICAgLSBUaGlzIG1lYW5zIHRoYXQgaW4gb3JkZXIgdG8ga2VlcCB0aGUgc2FtZSBvcmRlciBvZiBleGVjdXRpb24gYXMgYWRkaXRpb24gd2UgaGF2ZSB0byBhZGRcbiAqICAgICBpdGVtcyB0byB0aGUgYXJyYXkgYXQgdGhlIGJlZ2lubmluZyAodW5zaGlmdCkgaW5zdGVhZCBvZiBhdCB0aGUgZW5kIChwdXNoKVxuICpcbiAqIENoaWxkIHNjb3BlcyBhcmUgY3JlYXRlZCBhbmQgcmVtb3ZlZCBvZnRlblxuICogICAtIFVzaW5nIGFuIGFycmF5IHdvdWxkIGJlIHNsb3cgc2luY2UgaW5zZXJ0cyBpbiB0aGUgbWlkZGxlIGFyZSBleHBlbnNpdmU7IHNvIHdlIHVzZSBsaW5rZWQgbGlzdHNcbiAqXG4gKiBUaGVyZSBhcmUgZmV3ZXIgd2F0Y2hlcyB0aGFuIG9ic2VydmVycy4gVGhpcyBpcyB3aHkgeW91IGRvbid0IHdhbnQgdGhlIG9ic2VydmVyIHRvIGJlIGltcGxlbWVudGVkXG4gKiBpbiB0aGUgc2FtZSB3YXkgYXMgd2F0Y2guIFdhdGNoIHJlcXVpcmVzIHJldHVybiBvZiB0aGUgaW5pdGlhbGl6YXRpb24gZnVuY3Rpb24gd2hpY2ggaXMgZXhwZW5zaXZlXG4gKiB0byBjb25zdHJ1Y3QuXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJHJvb3RTY29wZVByb3ZpZGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBQcm92aWRlciBmb3IgdGhlICRyb290U2NvcGUgc2VydmljZS5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRyb290U2NvcGVQcm92aWRlciNkaWdlc3RUdGxcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFNldHMgdGhlIG51bWJlciBvZiBgJGRpZ2VzdGAgaXRlcmF0aW9ucyB0aGUgc2NvcGUgc2hvdWxkIGF0dGVtcHQgdG8gZXhlY3V0ZSBiZWZvcmUgZ2l2aW5nIHVwIGFuZFxuICogYXNzdW1pbmcgdGhhdCB0aGUgbW9kZWwgaXMgdW5zdGFibGUuXG4gKlxuICogVGhlIGN1cnJlbnQgZGVmYXVsdCBpcyAxMCBpdGVyYXRpb25zLlxuICpcbiAqIEluIGNvbXBsZXggYXBwbGljYXRpb25zIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgZGVwZW5kZW5jaWVzIGJldHdlZW4gYCR3YXRjaGBzIHdpbGwgcmVzdWx0IGluXG4gKiBzZXZlcmFsIGRpZ2VzdCBpdGVyYXRpb25zLiBIb3dldmVyIGlmIGFuIGFwcGxpY2F0aW9uIG5lZWRzIG1vcmUgdGhhbiB0aGUgZGVmYXVsdCAxMCBkaWdlc3RcbiAqIGl0ZXJhdGlvbnMgZm9yIGl0cyBtb2RlbCB0byBzdGFiaWxpemUgdGhlbiB5b3Ugc2hvdWxkIGludmVzdGlnYXRlIHdoYXQgaXMgY2F1c2luZyB0aGUgbW9kZWwgdG9cbiAqIGNvbnRpbnVvdXNseSBjaGFuZ2UgZHVyaW5nIHRoZSBkaWdlc3QuXG4gKlxuICogSW5jcmVhc2luZyB0aGUgVFRMIGNvdWxkIGhhdmUgcGVyZm9ybWFuY2UgaW1wbGljYXRpb25zLCBzbyB5b3Ugc2hvdWxkIG5vdCBjaGFuZ2UgaXQgd2l0aG91dFxuICogcHJvcGVyIGp1c3RpZmljYXRpb24uXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGxpbWl0IFRoZSBudW1iZXIgb2YgZGlnZXN0IGl0ZXJhdGlvbnMuXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkcm9vdFNjb3BlXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBFdmVyeSBhcHBsaWNhdGlvbiBoYXMgYSBzaW5nbGUgcm9vdCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0uXG4gKiBBbGwgb3RoZXIgc2NvcGVzIGFyZSBkZXNjZW5kYW50IHNjb3BlcyBvZiB0aGUgcm9vdCBzY29wZS4gU2NvcGVzIHByb3ZpZGUgc2VwYXJhdGlvblxuICogYmV0d2VlbiB0aGUgbW9kZWwgYW5kIHRoZSB2aWV3LCB2aWEgYSBtZWNoYW5pc20gZm9yIHdhdGNoaW5nIHRoZSBtb2RlbCBmb3IgY2hhbmdlcy5cbiAqIFRoZXkgYWxzbyBwcm92aWRlIGV2ZW50IGVtaXNzaW9uL2Jyb2FkY2FzdCBhbmQgc3Vic2NyaXB0aW9uIGZhY2lsaXR5LiBTZWUgdGhlXG4gKiB7QGxpbmsgZ3VpZGUvc2NvcGUgZGV2ZWxvcGVyIGd1aWRlIG9uIHNjb3Blc30uXG4gKi9cbmZ1bmN0aW9uICRSb290U2NvcGVQcm92aWRlcigpIHtcbiAgdmFyIFRUTCA9IDEwO1xuICB2YXIgJHJvb3RTY29wZU1pbkVyciA9IG1pbkVycignJHJvb3RTY29wZScpO1xuICB2YXIgbGFzdERpcnR5V2F0Y2ggPSBudWxsO1xuICB2YXIgYXBwbHlBc3luY0lkID0gbnVsbDtcblxuICB0aGlzLmRpZ2VzdFR0bCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIFRUTCA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gVFRMO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkU2NvcGVDbGFzcyhwYXJlbnQpIHtcbiAgICBmdW5jdGlvbiBDaGlsZFNjb3BlKCkge1xuICAgICAgdGhpcy4kJHdhdGNoZXJzID0gdGhpcy4kJG5leHRTaWJsaW5nID1cbiAgICAgICAgICB0aGlzLiQkY2hpbGRIZWFkID0gdGhpcy4kJGNoaWxkVGFpbCA9IG51bGw7XG4gICAgICB0aGlzLiQkbGlzdGVuZXJzID0ge307XG4gICAgICB0aGlzLiQkbGlzdGVuZXJDb3VudCA9IHt9O1xuICAgICAgdGhpcy4kJHdhdGNoZXJzQ291bnQgPSAwO1xuICAgICAgdGhpcy4kaWQgPSBuZXh0VWlkKCk7XG4gICAgICB0aGlzLiQkQ2hpbGRTY29wZSA9IG51bGw7XG4gICAgfVxuICAgIENoaWxkU2NvcGUucHJvdG90eXBlID0gcGFyZW50O1xuICAgIHJldHVybiBDaGlsZFNjb3BlO1xuICB9XG5cbiAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJHBhcnNlJywgJyRicm93c2VyJyxcbiAgICAgIGZ1bmN0aW9uKCRpbmplY3RvciwgJGV4Y2VwdGlvbkhhbmRsZXIsICRwYXJzZSwgJGJyb3dzZXIpIHtcblxuICAgIGZ1bmN0aW9uIGRlc3Ryb3lDaGlsZFNjb3BlKCRldmVudCkge1xuICAgICAgICAkZXZlbnQuY3VycmVudFNjb3BlLiQkZGVzdHJveWVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhblVwU2NvcGUoJHNjb3BlKSB7XG5cbiAgICAgIGlmIChtc2llID09PSA5KSB7XG4gICAgICAgIC8vIFRoZXJlIGlzIGEgbWVtb3J5IGxlYWsgaW4gSUU5IGlmIGFsbCBjaGlsZCBzY29wZXMgYXJlIG5vdCBkaXNjb25uZWN0ZWRcbiAgICAgICAgLy8gY29tcGxldGVseSB3aGVuIGEgc2NvcGUgaXMgZGVzdHJveWVkLiBTbyB0aGlzIGNvZGUgd2lsbCByZWN1cnNlIHVwIHRocm91Z2hcbiAgICAgICAgLy8gYWxsIHRoaXMgc2NvcGVzIGNoaWxkcmVuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFNlZSBpc3N1ZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy8xMDcwNlxuICAgICAgICAkc2NvcGUuJCRjaGlsZEhlYWQgJiYgY2xlYW5VcFNjb3BlKCRzY29wZS4kJGNoaWxkSGVhZCk7XG4gICAgICAgICRzY29wZS4kJG5leHRTaWJsaW5nICYmIGNsZWFuVXBTY29wZSgkc2NvcGUuJCRuZXh0U2libGluZyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb2RlIGJlbG93IHdvcmtzIGFyb3VuZCBJRTkgYW5kIFY4J3MgbWVtb3J5IGxlYWtzXG4gICAgICAvL1xuICAgICAgLy8gU2VlOlxuICAgICAgLy8gLSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjA3MyNjMjZcbiAgICAgIC8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvNjc5NCNpc3N1ZWNvbW1lbnQtMzg2NDg5MDlcbiAgICAgIC8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTMxMyNpc3N1ZWNvbW1lbnQtMTAzNzg0NTFcblxuICAgICAgJHNjb3BlLiRwYXJlbnQgPSAkc2NvcGUuJCRuZXh0U2libGluZyA9ICRzY29wZS4kJHByZXZTaWJsaW5nID0gJHNjb3BlLiQkY2hpbGRIZWFkID1cbiAgICAgICAgICAkc2NvcGUuJCRjaGlsZFRhaWwgPSAkc2NvcGUuJHJvb3QgPSAkc2NvcGUuJCR3YXRjaGVycyA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHR5cGVcbiAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBBIHJvb3Qgc2NvcGUgY2FuIGJlIHJldHJpZXZlZCB1c2luZyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUgJHJvb3RTY29wZX0ga2V5IGZyb20gdGhlXG4gICAgICoge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uIENoaWxkIHNjb3BlcyBhcmUgY3JlYXRlZCB1c2luZyB0aGVcbiAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkbmV3ICRuZXcoKX0gbWV0aG9kLiAoTW9zdCBzY29wZXMgYXJlIGNyZWF0ZWQgYXV0b21hdGljYWxseSB3aGVuXG4gICAgICogY29tcGlsZWQgSFRNTCB0ZW1wbGF0ZSBpcyBleGVjdXRlZC4pIFNlZSBhbHNvIHRoZSB7QGxpbmsgZ3VpZGUvc2NvcGUgU2NvcGVzIGd1aWRlfSBmb3JcbiAgICAgKiBhbiBpbi1kZXB0aCBpbnRyb2R1Y3Rpb24gYW5kIHVzYWdlIGV4YW1wbGVzLlxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIEluaGVyaXRhbmNlXG4gICAgICogQSBzY29wZSBjYW4gaW5oZXJpdCBmcm9tIGEgcGFyZW50IHNjb3BlLCBhcyBpbiB0aGlzIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgICAgIHZhciBwYXJlbnQgPSAkcm9vdFNjb3BlO1xuICAgICAgICAgdmFyIGNoaWxkID0gcGFyZW50LiRuZXcoKTtcblxuICAgICAgICAgcGFyZW50LnNhbHV0YXRpb24gPSBcIkhlbGxvXCI7XG4gICAgICAgICBleHBlY3QoY2hpbGQuc2FsdXRhdGlvbikudG9FcXVhbCgnSGVsbG8nKTtcblxuICAgICAgICAgY2hpbGQuc2FsdXRhdGlvbiA9IFwiV2VsY29tZVwiO1xuICAgICAgICAgZXhwZWN0KGNoaWxkLnNhbHV0YXRpb24pLnRvRXF1YWwoJ1dlbGNvbWUnKTtcbiAgICAgICAgIGV4cGVjdChwYXJlbnQuc2FsdXRhdGlvbikudG9FcXVhbCgnSGVsbG8nKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFdoZW4gaW50ZXJhY3Rpbmcgd2l0aCBgU2NvcGVgIGluIHRlc3RzLCBhZGRpdGlvbmFsIGhlbHBlciBtZXRob2RzIGFyZSBhdmFpbGFibGUgb24gdGhlXG4gICAgICogaW5zdGFuY2VzIG9mIGBTY29wZWAgdHlwZS4gU2VlIHtAbGluayBuZ01vY2suJHJvb3RTY29wZS5TY29wZSBuZ01vY2sgU2NvcGV9IGZvciBhZGRpdGlvbmFsXG4gICAgICogZGV0YWlscy5cbiAgICAgKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgZnVuY3Rpb24oKT49fSBwcm92aWRlcnMgTWFwIG9mIHNlcnZpY2UgZmFjdG9yeSB3aGljaCBuZWVkIHRvIGJlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZCBmb3IgdGhlIGN1cnJlbnQgc2NvcGUuIERlZmF1bHRzIHRvIHtAbGluayBuZ30uXG4gICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgKj49fSBpbnN0YW5jZUNhY2hlIFByb3ZpZGVzIHByZS1pbnN0YW50aWF0ZWQgc2VydmljZXMgd2hpY2ggc2hvdWxkXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmQvb3ZlcnJpZGUgc2VydmljZXMgcHJvdmlkZWQgYnkgYHByb3ZpZGVyc2AuIFRoaXMgaXMgaGFuZHlcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gdW5pdC10ZXN0aW5nIGFuZCBoYXZpbmcgdGhlIG5lZWQgdG8gb3ZlcnJpZGUgYSBkZWZhdWx0XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IE5ld2x5IGNyZWF0ZWQgc2NvcGUuXG4gICAgICpcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTY29wZSgpIHtcbiAgICAgIHRoaXMuJGlkID0gbmV4dFVpZCgpO1xuICAgICAgdGhpcy4kJHBoYXNlID0gdGhpcy4kcGFyZW50ID0gdGhpcy4kJHdhdGNoZXJzID1cbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuJCRuZXh0U2libGluZyA9IHRoaXMuJCRwcmV2U2libGluZyA9XG4gICAgICAgICAgICAgICAgICAgICB0aGlzLiQkY2hpbGRIZWFkID0gdGhpcy4kJGNoaWxkVGFpbCA9IG51bGw7XG4gICAgICB0aGlzLiRyb290ID0gdGhpcztcbiAgICAgIHRoaXMuJCRkZXN0cm95ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuJCRsaXN0ZW5lcnMgPSB7fTtcbiAgICAgIHRoaXMuJCRsaXN0ZW5lckNvdW50ID0ge307XG4gICAgICB0aGlzLiQkd2F0Y2hlcnNDb3VudCA9IDA7XG4gICAgICB0aGlzLiQkaXNvbGF0ZUJpbmRpbmdzID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRpZFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogVW5pcXVlIHNjb3BlIElEIChtb25vdG9uaWNhbGx5IGluY3JlYXNpbmcpIHVzZWZ1bCBmb3IgZGVidWdnaW5nLlxuICAgICAqL1xuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkcGFyZW50XG4gICAgICAqXG4gICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIHBhcmVudCBzY29wZS5cbiAgICAgICovXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRyb290XG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIHJvb3Qgc2NvcGUuXG4gICAgICAgKi9cblxuICAgIFNjb3BlLnByb3RvdHlwZSA9IHtcbiAgICAgIGNvbnN0cnVjdG9yOiBTY29wZSxcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkbmV3XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQ3JlYXRlcyBhIG5ldyBjaGlsZCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0uXG4gICAgICAgKlxuICAgICAgICogVGhlIHBhcmVudCBzY29wZSB3aWxsIHByb3BhZ2F0ZSB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9IGV2ZW50LlxuICAgICAgICogVGhlIHNjb3BlIGNhbiBiZSByZW1vdmVkIGZyb20gdGhlIHNjb3BlIGhpZXJhcmNoeSB1c2luZyB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveSAkZGVzdHJveSgpfS5cbiAgICAgICAqXG4gICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveSAkZGVzdHJveSgpfSBtdXN0IGJlIGNhbGxlZCBvbiBhIHNjb3BlIHdoZW4gaXQgaXNcbiAgICAgICAqIGRlc2lyZWQgZm9yIHRoZSBzY29wZSBhbmQgaXRzIGNoaWxkIHNjb3BlcyB0byBiZSBwZXJtYW5lbnRseSBkZXRhY2hlZCBmcm9tIHRoZSBwYXJlbnQgYW5kXG4gICAgICAgKiB0aHVzIHN0b3AgcGFydGljaXBhdGluZyBpbiBtb2RlbCBjaGFuZ2UgZGV0ZWN0aW9uIGFuZCBsaXN0ZW5lciBub3RpZmljYXRpb24gYnkgaW52b2tpbmcuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBpc29sYXRlIElmIHRydWUsIHRoZW4gdGhlIHNjb3BlIGRvZXMgbm90IHByb3RvdHlwaWNhbGx5IGluaGVyaXQgZnJvbSB0aGVcbiAgICAgICAqICAgICAgICAgcGFyZW50IHNjb3BlLiBUaGUgc2NvcGUgaXMgaXNvbGF0ZWQsIGFzIGl0IGNhbiBub3Qgc2VlIHBhcmVudCBzY29wZSBwcm9wZXJ0aWVzLlxuICAgICAgICogICAgICAgICBXaGVuIGNyZWF0aW5nIHdpZGdldHMsIGl0IGlzIHVzZWZ1bCBmb3IgdGhlIHdpZGdldCB0byBub3QgYWNjaWRlbnRhbGx5IHJlYWQgcGFyZW50XG4gICAgICAgKiAgICAgICAgIHN0YXRlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7U2NvcGV9IFtwYXJlbnQ9dGhpc10gVGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIGBTY29wZWB9IHRoYXQgd2lsbCBiZSB0aGUgYCRwYXJlbnRgXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRoZSBuZXdseSBjcmVhdGVkIHNjb3BlLiBEZWZhdWx0cyB0byBgdGhpc2Agc2NvcGUgaWYgbm90IHByb3ZpZGVkLlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGlzIGlzIHVzZWQgd2hlbiBjcmVhdGluZyBhIHRyYW5zY2x1ZGUgc2NvcGUgdG8gY29ycmVjdGx5IHBsYWNlIGl0XG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBzY29wZSBoaWVyYXJjaHkgd2hpbGUgbWFpbnRhaW5pbmcgdGhlIGNvcnJlY3QgcHJvdG90eXBpY2FsXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaGVyaXRhbmNlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBuZXdseSBjcmVhdGVkIGNoaWxkIHNjb3BlLlxuICAgICAgICpcbiAgICAgICAqL1xuICAgICAgJG5ldzogZnVuY3Rpb24oaXNvbGF0ZSwgcGFyZW50KSB7XG4gICAgICAgIHZhciBjaGlsZDtcblxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQgfHwgdGhpcztcblxuICAgICAgICBpZiAoaXNvbGF0ZSkge1xuICAgICAgICAgIGNoaWxkID0gbmV3IFNjb3BlKCk7XG4gICAgICAgICAgY2hpbGQuJHJvb3QgPSB0aGlzLiRyb290O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE9ubHkgY3JlYXRlIGEgY2hpbGQgc2NvcGUgY2xhc3MgaWYgc29tZWJvZHkgYXNrcyBmb3Igb25lLFxuICAgICAgICAgIC8vIGJ1dCBjYWNoZSBpdCB0byBhbGxvdyB0aGUgVk0gdG8gb3B0aW1pemUgbG9va3Vwcy5cbiAgICAgICAgICBpZiAoIXRoaXMuJCRDaGlsZFNjb3BlKSB7XG4gICAgICAgICAgICB0aGlzLiQkQ2hpbGRTY29wZSA9IGNyZWF0ZUNoaWxkU2NvcGVDbGFzcyh0aGlzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2hpbGQgPSBuZXcgdGhpcy4kJENoaWxkU2NvcGUoKTtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZC4kcGFyZW50ID0gcGFyZW50O1xuICAgICAgICBjaGlsZC4kJHByZXZTaWJsaW5nID0gcGFyZW50LiQkY2hpbGRUYWlsO1xuICAgICAgICBpZiAocGFyZW50LiQkY2hpbGRIZWFkKSB7XG4gICAgICAgICAgcGFyZW50LiQkY2hpbGRUYWlsLiQkbmV4dFNpYmxpbmcgPSBjaGlsZDtcbiAgICAgICAgICBwYXJlbnQuJCRjaGlsZFRhaWwgPSBjaGlsZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJlbnQuJCRjaGlsZEhlYWQgPSBwYXJlbnQuJCRjaGlsZFRhaWwgPSBjaGlsZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdoZW4gdGhlIG5ldyBzY29wZSBpcyBub3QgaXNvbGF0ZWQgb3Igd2UgaW5oZXJpdCBmcm9tIGB0aGlzYCwgYW5kXG4gICAgICAgIC8vIHRoZSBwYXJlbnQgc2NvcGUgaXMgZGVzdHJveWVkLCB0aGUgcHJvcGVydHkgYCQkZGVzdHJveWVkYCBpcyBpbmhlcml0ZWRcbiAgICAgICAgLy8gcHJvdG90eXBpY2FsbHkuIEluIGFsbCBvdGhlciBjYXNlcywgdGhpcyBwcm9wZXJ0eSBuZWVkcyB0byBiZSBzZXRcbiAgICAgICAgLy8gd2hlbiB0aGUgcGFyZW50IHNjb3BlIGlzIGRlc3Ryb3llZC5cbiAgICAgICAgLy8gVGhlIGxpc3RlbmVyIG5lZWRzIHRvIGJlIGFkZGVkIGFmdGVyIHRoZSBwYXJlbnQgaXMgc2V0XG4gICAgICAgIGlmIChpc29sYXRlIHx8IHBhcmVudCAhPSB0aGlzKSBjaGlsZC4kb24oJyRkZXN0cm95JywgZGVzdHJveUNoaWxkU2NvcGUpO1xuXG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkd2F0Y2hcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZWdpc3RlcnMgYSBgbGlzdGVuZXJgIGNhbGxiYWNrIHRvIGJlIGV4ZWN1dGVkIHdoZW5ldmVyIHRoZSBgd2F0Y2hFeHByZXNzaW9uYCBjaGFuZ2VzLlxuICAgICAgICpcbiAgICAgICAqIC0gVGhlIGB3YXRjaEV4cHJlc3Npb25gIGlzIGNhbGxlZCBvbiBldmVyeSBjYWxsIHRvIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3RcbiAgICAgICAqICAgJGRpZ2VzdCgpfSBhbmQgc2hvdWxkIHJldHVybiB0aGUgdmFsdWUgdGhhdCB3aWxsIGJlIHdhdGNoZWQuIChgd2F0Y2hFeHByZXNzaW9uYCBzaG91bGQgbm90IGNoYW5nZVxuICAgICAgICogICBpdHMgdmFsdWUgd2hlbiBleGVjdXRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIHRoZSBzYW1lIGlucHV0IGJlY2F1c2UgaXQgbWF5IGJlIGV4ZWN1dGVkIG11bHRpcGxlXG4gICAgICAgKiAgIHRpbWVzIGJ5IHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCgpfS4gVGhhdCBpcywgYHdhdGNoRXhwcmVzc2lvbmAgc2hvdWxkIGJlXG4gICAgICAgKiAgIFtpZGVtcG90ZW50XShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lkZW1wb3RlbmNlKS5cbiAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIG9ubHkgd2hlbiB0aGUgdmFsdWUgZnJvbSB0aGUgY3VycmVudCBgd2F0Y2hFeHByZXNzaW9uYCBhbmQgdGhlXG4gICAgICAgKiAgIHByZXZpb3VzIGNhbGwgdG8gYHdhdGNoRXhwcmVzc2lvbmAgYXJlIG5vdCBlcXVhbCAod2l0aCB0aGUgZXhjZXB0aW9uIG9mIHRoZSBpbml0aWFsIHJ1bixcbiAgICAgICAqICAgc2VlIGJlbG93KS4gSW5lcXVhbGl0eSBpcyBkZXRlcm1pbmVkIGFjY29yZGluZyB0byByZWZlcmVuY2UgaW5lcXVhbGl0eSxcbiAgICAgICAqICAgW3N0cmljdCBjb21wYXJpc29uXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9PcGVyYXRvcnMvQ29tcGFyaXNvbl9PcGVyYXRvcnMpXG4gICAgICAgKiAgICB2aWEgdGhlIGAhPT1gIEphdmFzY3JpcHQgb3BlcmF0b3IsIHVubGVzcyBgb2JqZWN0RXF1YWxpdHkgPT0gdHJ1ZWBcbiAgICAgICAqICAgKHNlZSBuZXh0IHBvaW50KVxuICAgICAgICogLSBXaGVuIGBvYmplY3RFcXVhbGl0eSA9PSB0cnVlYCwgaW5lcXVhbGl0eSBvZiB0aGUgYHdhdGNoRXhwcmVzc2lvbmAgaXMgZGV0ZXJtaW5lZFxuICAgICAgICogICBhY2NvcmRpbmcgdG8gdGhlIHtAbGluayBhbmd1bGFyLmVxdWFsc30gZnVuY3Rpb24uIFRvIHNhdmUgdGhlIHZhbHVlIG9mIHRoZSBvYmplY3QgZm9yXG4gICAgICAgKiAgIGxhdGVyIGNvbXBhcmlzb24sIHRoZSB7QGxpbmsgYW5ndWxhci5jb3B5fSBmdW5jdGlvbiBpcyB1c2VkLiBUaGlzIHRoZXJlZm9yZSBtZWFucyB0aGF0XG4gICAgICAgKiAgIHdhdGNoaW5nIGNvbXBsZXggb2JqZWN0cyB3aWxsIGhhdmUgYWR2ZXJzZSBtZW1vcnkgYW5kIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucy5cbiAgICAgICAqIC0gVGhlIHdhdGNoIGBsaXN0ZW5lcmAgbWF5IGNoYW5nZSB0aGUgbW9kZWwsIHdoaWNoIG1heSB0cmlnZ2VyIG90aGVyIGBsaXN0ZW5lcmBzIHRvIGZpcmUuXG4gICAgICAgKiAgIFRoaXMgaXMgYWNoaWV2ZWQgYnkgcmVydW5uaW5nIHRoZSB3YXRjaGVycyB1bnRpbCBubyBjaGFuZ2VzIGFyZSBkZXRlY3RlZC4gVGhlIHJlcnVuXG4gICAgICAgKiAgIGl0ZXJhdGlvbiBsaW1pdCBpcyAxMCB0byBwcmV2ZW50IGFuIGluZmluaXRlIGxvb3AgZGVhZGxvY2suXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIElmIHlvdSB3YW50IHRvIGJlIG5vdGlmaWVkIHdoZW5ldmVyIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdH0gaXMgY2FsbGVkLFxuICAgICAgICogeW91IGNhbiByZWdpc3RlciBhIGB3YXRjaEV4cHJlc3Npb25gIGZ1bmN0aW9uIHdpdGggbm8gYGxpc3RlbmVyYC4gKEJlIHByZXBhcmVkIGZvclxuICAgICAgICogbXVsdGlwbGUgY2FsbHMgdG8geW91ciBgd2F0Y2hFeHByZXNzaW9uYCBiZWNhdXNlIGl0IHdpbGwgZXhlY3V0ZSBtdWx0aXBsZSB0aW1lcyBpbiBhXG4gICAgICAgKiBzaW5nbGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBjeWNsZSBpZiBhIGNoYW5nZSBpcyBkZXRlY3RlZC4pXG4gICAgICAgKlxuICAgICAgICogQWZ0ZXIgYSB3YXRjaGVyIGlzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgc2NvcGUsIHRoZSBgbGlzdGVuZXJgIGZuIGlzIGNhbGxlZCBhc3luY2hyb25vdXNseVxuICAgICAgICogKHZpYSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZXZhbEFzeW5jICRldmFsQXN5bmN9KSB0byBpbml0aWFsaXplIHRoZVxuICAgICAgICogd2F0Y2hlci4gSW4gcmFyZSBjYXNlcywgdGhpcyBpcyB1bmRlc2lyYWJsZSBiZWNhdXNlIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQgd2hlbiB0aGUgcmVzdWx0XG4gICAgICAgKiBvZiBgd2F0Y2hFeHByZXNzaW9uYCBkaWRuJ3QgY2hhbmdlLiBUbyBkZXRlY3QgdGhpcyBzY2VuYXJpbyB3aXRoaW4gdGhlIGBsaXN0ZW5lcmAgZm4sIHlvdVxuICAgICAgICogY2FuIGNvbXBhcmUgdGhlIGBuZXdWYWxgIGFuZCBgb2xkVmFsYC4gSWYgdGhlc2UgdHdvIHZhbHVlcyBhcmUgaWRlbnRpY2FsIChgPT09YCkgdGhlbiB0aGVcbiAgICAgICAqIGxpc3RlbmVyIHdhcyBjYWxsZWQgZHVlIHRvIGluaXRpYWxpemF0aW9uLlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICogIyBFeGFtcGxlXG4gICAgICAgKiBgYGBqc1xuICAgICAgICAgICAvLyBsZXQncyBhc3N1bWUgdGhhdCBzY29wZSB3YXMgZGVwZW5kZW5jeSBpbmplY3RlZCBhcyB0aGUgJHJvb3RTY29wZVxuICAgICAgICAgICB2YXIgc2NvcGUgPSAkcm9vdFNjb3BlO1xuICAgICAgICAgICBzY29wZS5uYW1lID0gJ21pc2tvJztcbiAgICAgICAgICAgc2NvcGUuY291bnRlciA9IDA7XG5cbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7XG4gICAgICAgICAgIHNjb3BlLiR3YXRjaCgnbmFtZScsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgIHNjb3BlLmNvdW50ZXIgPSBzY29wZS5jb3VudGVyICsgMTtcbiAgICAgICAgICAgfSk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApO1xuXG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgLy8gdGhlIGxpc3RlbmVyIGlzIGFsd2F5cyBjYWxsZWQgZHVyaW5nIHRoZSBmaXJzdCAkZGlnZXN0IGxvb3AgYWZ0ZXIgaXQgd2FzIHJlZ2lzdGVyZWRcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7XG5cbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAvLyBidXQgbm93IGl0IHdpbGwgbm90IGJlIGNhbGxlZCB1bmxlc3MgdGhlIHZhbHVlIGNoYW5nZXNcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7XG5cbiAgICAgICAgICAgc2NvcGUubmFtZSA9ICdhZGFtJztcbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgyKTtcblxuXG5cbiAgICAgICAgICAgLy8gVXNpbmcgYSBmdW5jdGlvbiBhcyBhIHdhdGNoRXhwcmVzc2lvblxuICAgICAgICAgICB2YXIgZm9vZDtcbiAgICAgICAgICAgc2NvcGUuZm9vZENvdW50ZXIgPSAwO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuZm9vZENvdW50ZXIpLnRvRXF1YWwoMCk7XG4gICAgICAgICAgIHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHZhbHVlIGJlaW5nIHdhdGNoZWQuIEl0IGlzIGNhbGxlZCBmb3IgZWFjaCB0dXJuIG9mIHRoZSAkZGlnZXN0IGxvb3BcbiAgICAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIGZvb2Q7IH0sXG4gICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgY2hhbmdlIGxpc3RlbmVyLCBjYWxsZWQgd2hlbiB0aGUgdmFsdWUgcmV0dXJuZWQgZnJvbSB0aGUgYWJvdmUgZnVuY3Rpb24gY2hhbmdlc1xuICAgICAgICAgICAgIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgaWYgKCBuZXdWYWx1ZSAhPT0gb2xkVmFsdWUgKSB7XG4gICAgICAgICAgICAgICAgIC8vIE9ubHkgaW5jcmVtZW50IHRoZSBjb3VudGVyIGlmIHRoZSB2YWx1ZSBjaGFuZ2VkXG4gICAgICAgICAgICAgICAgIHNjb3BlLmZvb2RDb3VudGVyID0gc2NvcGUuZm9vZENvdW50ZXIgKyAxO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgKTtcbiAgICAgICAgICAgLy8gTm8gZGlnZXN0IGhhcyBiZWVuIHJ1biBzbyB0aGUgY291bnRlciB3aWxsIGJlIHplcm9cbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmZvb2RDb3VudGVyKS50b0VxdWFsKDApO1xuXG4gICAgICAgICAgIC8vIFJ1biB0aGUgZGlnZXN0IGJ1dCBzaW5jZSBmb29kIGhhcyBub3QgY2hhbmdlZCBjb3VudCB3aWxsIHN0aWxsIGJlIHplcm9cbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuZm9vZENvdW50ZXIpLnRvRXF1YWwoMCk7XG5cbiAgICAgICAgICAgLy8gVXBkYXRlIGZvb2QgYW5kIHJ1biBkaWdlc3QuICBOb3cgdGhlIGNvdW50ZXIgd2lsbCBpbmNyZW1lbnRcbiAgICAgICAgICAgZm9vZCA9ICdjaGVlc2VidXJnZXInO1xuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5mb29kQ291bnRlcikudG9FcXVhbCgxKTtcblxuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhmdW5jdGlvbigpfHN0cmluZyl9IHdhdGNoRXhwcmVzc2lvbiBFeHByZXNzaW9uIHRoYXQgaXMgZXZhbHVhdGVkIG9uIGVhY2hcbiAgICAgICAqICAgIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdH0gY3ljbGUuIEEgY2hhbmdlIGluIHRoZSByZXR1cm4gdmFsdWUgdHJpZ2dlcnNcbiAgICAgICAqICAgIGEgY2FsbCB0byB0aGUgYGxpc3RlbmVyYC5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBzdHJpbmdgOiBFdmFsdWF0ZWQgYXMge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn1cbiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGNhbGxlZCB3aXRoIGN1cnJlbnQgYHNjb3BlYCBhcyBhIHBhcmFtZXRlci5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3VmFsLCBvbGRWYWwsIHNjb3BlKX0gbGlzdGVuZXIgQ2FsbGJhY2sgY2FsbGVkIHdoZW5ldmVyIHRoZSB2YWx1ZVxuICAgICAgICogICAgb2YgYHdhdGNoRXhwcmVzc2lvbmAgY2hhbmdlcy5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBuZXdWYWxgIGNvbnRhaW5zIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uYFxuICAgICAgICogICAgLSBgb2xkVmFsYCBjb250YWlucyB0aGUgcHJldmlvdXMgdmFsdWUgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25gXG4gICAgICAgKiAgICAtIGBzY29wZWAgcmVmZXJzIHRvIHRoZSBjdXJyZW50IHNjb3BlXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBvYmplY3RFcXVhbGl0eSBDb21wYXJlIGZvciBvYmplY3QgZXF1YWxpdHkgdXNpbmcge0BsaW5rIGFuZ3VsYXIuZXF1YWxzfSBpbnN0ZWFkIG9mXG4gICAgICAgKiAgICAgY29tcGFyaW5nIGZvciByZWZlcmVuY2UgZXF1YWxpdHkuXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIGxpc3RlbmVyLlxuICAgICAgICovXG4gICAgICAkd2F0Y2g6IGZ1bmN0aW9uKHdhdGNoRXhwLCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHByZXR0eVByaW50RXhwcmVzc2lvbikge1xuICAgICAgICB2YXIgZ2V0ID0gJHBhcnNlKHdhdGNoRXhwKTtcblxuICAgICAgICBpZiAoZ2V0LiQkd2F0Y2hEZWxlZ2F0ZSkge1xuICAgICAgICAgIHJldHVybiBnZXQuJCR3YXRjaERlbGVnYXRlKHRoaXMsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgZ2V0LCB3YXRjaEV4cCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNjb3BlID0gdGhpcyxcbiAgICAgICAgICAgIGFycmF5ID0gc2NvcGUuJCR3YXRjaGVycyxcbiAgICAgICAgICAgIHdhdGNoZXIgPSB7XG4gICAgICAgICAgICAgIGZuOiBsaXN0ZW5lcixcbiAgICAgICAgICAgICAgbGFzdDogaW5pdFdhdGNoVmFsLFxuICAgICAgICAgICAgICBnZXQ6IGdldCxcbiAgICAgICAgICAgICAgZXhwOiBwcmV0dHlQcmludEV4cHJlc3Npb24gfHwgd2F0Y2hFeHAsXG4gICAgICAgICAgICAgIGVxOiAhIW9iamVjdEVxdWFsaXR5XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIGxhc3REaXJ0eVdhdGNoID0gbnVsbDtcblxuICAgICAgICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKSB7XG4gICAgICAgICAgd2F0Y2hlci5mbiA9IG5vb3A7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWFycmF5KSB7XG4gICAgICAgICAgYXJyYXkgPSBzY29wZS4kJHdhdGNoZXJzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgdXNlIHVuc2hpZnQgc2luY2Ugd2UgdXNlIGEgd2hpbGUgbG9vcCBpbiAkZGlnZXN0IGZvciBzcGVlZC5cbiAgICAgICAgLy8gdGhlIHdoaWxlIGxvb3AgcmVhZHMgaW4gcmV2ZXJzZSBvcmRlci5cbiAgICAgICAgYXJyYXkudW5zaGlmdCh3YXRjaGVyKTtcbiAgICAgICAgaW5jcmVtZW50V2F0Y2hlcnNDb3VudCh0aGlzLCAxKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZGVyZWdpc3RlcldhdGNoKCkge1xuICAgICAgICAgIGlmIChhcnJheVJlbW92ZShhcnJheSwgd2F0Y2hlcikgPj0gMCkge1xuICAgICAgICAgICAgaW5jcmVtZW50V2F0Y2hlcnNDb3VudChzY29wZSwgLTEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7XG4gICAgICAgIH07XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHdhdGNoR3JvdXBcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBIHZhcmlhbnQgb2Yge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfSB3aGVyZSBpdCB3YXRjaGVzIGFuIGFycmF5IG9mIGB3YXRjaEV4cHJlc3Npb25zYC5cbiAgICAgICAqIElmIGFueSBvbmUgZXhwcmVzc2lvbiBpbiB0aGUgY29sbGVjdGlvbiBjaGFuZ2VzIHRoZSBgbGlzdGVuZXJgIGlzIGV4ZWN1dGVkLlxuICAgICAgICpcbiAgICAgICAqIC0gVGhlIGl0ZW1zIGluIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AgYXJyYXkgYXJlIG9ic2VydmVkIHZpYSBzdGFuZGFyZCAkd2F0Y2ggb3BlcmF0aW9uIGFuZCBhcmUgZXhhbWluZWQgb24gZXZlcnlcbiAgICAgICAqICAgY2FsbCB0byAkZGlnZXN0KCkgdG8gc2VlIGlmIGFueSBpdGVtcyBjaGFuZ2VzLlxuICAgICAgICogLSBUaGUgYGxpc3RlbmVyYCBpcyBjYWxsZWQgd2hlbmV2ZXIgYW55IGV4cHJlc3Npb24gaW4gdGhlIGB3YXRjaEV4cHJlc3Npb25zYCBhcnJheSBjaGFuZ2VzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZ3xGdW5jdGlvbihzY29wZSk+fSB3YXRjaEV4cHJlc3Npb25zIEFycmF5IG9mIGV4cHJlc3Npb25zIHRoYXQgd2lsbCBiZSBpbmRpdmlkdWFsbHlcbiAgICAgICAqIHdhdGNoZWQgdXNpbmcge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3VmFsdWVzLCBvbGRWYWx1ZXMsIHNjb3BlKX0gbGlzdGVuZXIgQ2FsbGJhY2sgY2FsbGVkIHdoZW5ldmVyIHRoZSByZXR1cm4gdmFsdWUgb2YgYW55XG4gICAgICAgKiAgICBleHByZXNzaW9uIGluIGB3YXRjaEV4cHJlc3Npb25zYCBjaGFuZ2VzXG4gICAgICAgKiAgICBUaGUgYG5ld1ZhbHVlc2AgYXJyYXkgY29udGFpbnMgdGhlIGN1cnJlbnQgdmFsdWVzIG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AsIHdpdGggdGhlIGluZGV4ZXMgbWF0Y2hpbmdcbiAgICAgICAqICAgIHRob3NlIG9mIGB3YXRjaEV4cHJlc3Npb25gXG4gICAgICAgKiAgICBhbmQgdGhlIGBvbGRWYWx1ZXNgIGFycmF5IGNvbnRhaW5zIHRoZSBwcmV2aW91cyB2YWx1ZXMgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25zYCwgd2l0aCB0aGUgaW5kZXhlcyBtYXRjaGluZ1xuICAgICAgICogICAgdGhvc2Ugb2YgYHdhdGNoRXhwcmVzc2lvbmBcbiAgICAgICAqICAgIFRoZSBgc2NvcGVgIHJlZmVycyB0byB0aGUgY3VycmVudCBzY29wZS5cbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciBhbGwgbGlzdGVuZXJzLlxuICAgICAgICovXG4gICAgICAkd2F0Y2hHcm91cDogZnVuY3Rpb24od2F0Y2hFeHByZXNzaW9ucywgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlcyA9IG5ldyBBcnJheSh3YXRjaEV4cHJlc3Npb25zLmxlbmd0aCk7XG4gICAgICAgIHZhciBuZXdWYWx1ZXMgPSBuZXcgQXJyYXkod2F0Y2hFeHByZXNzaW9ucy5sZW5ndGgpO1xuICAgICAgICB2YXIgZGVyZWdpc3RlckZucyA9IFtdO1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZmlyc3RSdW4gPSB0cnVlO1xuXG4gICAgICAgIGlmICghd2F0Y2hFeHByZXNzaW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBObyBleHByZXNzaW9ucyBtZWFucyB3ZSBjYWxsIHRoZSBsaXN0ZW5lciBBU0FQXG4gICAgICAgICAgdmFyIHNob3VsZENhbGwgPSB0cnVlO1xuICAgICAgICAgIHNlbGYuJGV2YWxBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChzaG91bGRDYWxsKSBsaXN0ZW5lcihuZXdWYWx1ZXMsIG5ld1ZhbHVlcywgc2VsZik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlcmVnaXN0ZXJXYXRjaEdyb3VwKCkge1xuICAgICAgICAgICAgc2hvdWxkQ2FsbCA9IGZhbHNlO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod2F0Y2hFeHByZXNzaW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAvLyBTcGVjaWFsIGNhc2Ugc2l6ZSBvZiBvbmVcbiAgICAgICAgICByZXR1cm4gdGhpcy4kd2F0Y2god2F0Y2hFeHByZXNzaW9uc1swXSwgZnVuY3Rpb24gd2F0Y2hHcm91cEFjdGlvbih2YWx1ZSwgb2xkVmFsdWUsIHNjb3BlKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZXNbMF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIG9sZFZhbHVlc1swXSA9IG9sZFZhbHVlO1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCAodmFsdWUgPT09IG9sZFZhbHVlKSA/IG5ld1ZhbHVlcyA6IG9sZFZhbHVlcywgc2NvcGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yRWFjaCh3YXRjaEV4cHJlc3Npb25zLCBmdW5jdGlvbihleHByLCBpKSB7XG4gICAgICAgICAgdmFyIHVud2F0Y2hGbiA9IHNlbGYuJHdhdGNoKGV4cHIsIGZ1bmN0aW9uIHdhdGNoR3JvdXBTdWJBY3Rpb24odmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZXNbaV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIG9sZFZhbHVlc1tpXSA9IG9sZFZhbHVlO1xuICAgICAgICAgICAgaWYgKCFjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCkge1xuICAgICAgICAgICAgICBjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgIHNlbGYuJGV2YWxBc3luYyh3YXRjaEdyb3VwQWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBkZXJlZ2lzdGVyRm5zLnB1c2godW53YXRjaEZuKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gd2F0Y2hHcm91cEFjdGlvbigpIHtcbiAgICAgICAgICBjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgaWYgKGZpcnN0UnVuKSB7XG4gICAgICAgICAgICBmaXJzdFJ1biA9IGZhbHNlO1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCBuZXdWYWx1ZXMsIHNlbGYpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaXN0ZW5lcihuZXdWYWx1ZXMsIG9sZFZhbHVlcywgc2VsZik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlcmVnaXN0ZXJXYXRjaEdyb3VwKCkge1xuICAgICAgICAgIHdoaWxlIChkZXJlZ2lzdGVyRm5zLmxlbmd0aCkge1xuICAgICAgICAgICAgZGVyZWdpc3RlckZucy5zaGlmdCgpKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHdhdGNoQ29sbGVjdGlvblxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFNoYWxsb3cgd2F0Y2hlcyB0aGUgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgYW5kIGZpcmVzIHdoZW5ldmVyIGFueSBvZiB0aGUgcHJvcGVydGllcyBjaGFuZ2VcbiAgICAgICAqIChmb3IgYXJyYXlzLCB0aGlzIGltcGxpZXMgd2F0Y2hpbmcgdGhlIGFycmF5IGl0ZW1zOyBmb3Igb2JqZWN0IG1hcHMsIHRoaXMgaW1wbGllcyB3YXRjaGluZ1xuICAgICAgICogdGhlIHByb3BlcnRpZXMpLiBJZiBhIGNoYW5nZSBpcyBkZXRlY3RlZCwgdGhlIGBsaXN0ZW5lcmAgY2FsbGJhY2sgaXMgZmlyZWQuXG4gICAgICAgKlxuICAgICAgICogLSBUaGUgYG9iamAgY29sbGVjdGlvbiBpcyBvYnNlcnZlZCB2aWEgc3RhbmRhcmQgJHdhdGNoIG9wZXJhdGlvbiBhbmQgaXMgZXhhbWluZWQgb24gZXZlcnlcbiAgICAgICAqICAgY2FsbCB0byAkZGlnZXN0KCkgdG8gc2VlIGlmIGFueSBpdGVtcyBoYXZlIGJlZW4gYWRkZWQsIHJlbW92ZWQsIG9yIG1vdmVkLlxuICAgICAgICogLSBUaGUgYGxpc3RlbmVyYCBpcyBjYWxsZWQgd2hlbmV2ZXIgYW55dGhpbmcgd2l0aGluIHRoZSBgb2JqYCBoYXMgY2hhbmdlZC4gRXhhbXBsZXMgaW5jbHVkZVxuICAgICAgICogICBhZGRpbmcsIHJlbW92aW5nLCBhbmQgbW92aW5nIGl0ZW1zIGJlbG9uZ2luZyB0byBhbiBvYmplY3Qgb3IgYXJyYXkuXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqICMgRXhhbXBsZVxuICAgICAgICogYGBganNcbiAgICAgICAgICAkc2NvcGUubmFtZXMgPSBbJ2lnb3InLCAnbWF0aWFzJywgJ21pc2tvJywgJ2phbWVzJ107XG4gICAgICAgICAgJHNjb3BlLmRhdGFDb3VudCA9IDQ7XG5cbiAgICAgICAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbignbmFtZXMnLCBmdW5jdGlvbihuZXdOYW1lcywgb2xkTmFtZXMpIHtcbiAgICAgICAgICAgICRzY29wZS5kYXRhQ291bnQgPSBuZXdOYW1lcy5sZW5ndGg7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBleHBlY3QoJHNjb3BlLmRhdGFDb3VudCkudG9FcXVhbCg0KTtcbiAgICAgICAgICAkc2NvcGUuJGRpZ2VzdCgpO1xuXG4gICAgICAgICAgLy9zdGlsbCBhdCA0IC4uLiBubyBjaGFuZ2VzXG4gICAgICAgICAgZXhwZWN0KCRzY29wZS5kYXRhQ291bnQpLnRvRXF1YWwoNCk7XG5cbiAgICAgICAgICAkc2NvcGUubmFtZXMucG9wKCk7XG4gICAgICAgICAgJHNjb3BlLiRkaWdlc3QoKTtcblxuICAgICAgICAgIC8vbm93IHRoZXJlJ3MgYmVlbiBhIGNoYW5nZVxuICAgICAgICAgIGV4cGVjdCgkc2NvcGUuZGF0YUNvdW50KS50b0VxdWFsKDMpO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9uKHNjb3BlKX0gb2JqIEV2YWx1YXRlZCBhcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS4gVGhlXG4gICAgICAgKiAgICBleHByZXNzaW9uIHZhbHVlIHNob3VsZCBldmFsdWF0ZSB0byBhbiBvYmplY3Qgb3IgYW4gYXJyYXkgd2hpY2ggaXMgb2JzZXJ2ZWQgb24gZWFjaFxuICAgICAgICogICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBjeWNsZS4gQW55IHNoYWxsb3cgY2hhbmdlIHdpdGhpbiB0aGVcbiAgICAgICAqICAgIGNvbGxlY3Rpb24gd2lsbCB0cmlnZ2VyIGEgY2FsbCB0byB0aGUgYGxpc3RlbmVyYC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ld0NvbGxlY3Rpb24sIG9sZENvbGxlY3Rpb24sIHNjb3BlKX0gbGlzdGVuZXIgYSBjYWxsYmFjayBmdW5jdGlvbiBjYWxsZWRcbiAgICAgICAqICAgIHdoZW4gYSBjaGFuZ2UgaXMgZGV0ZWN0ZWQuXG4gICAgICAgKiAgICAtIFRoZSBgbmV3Q29sbGVjdGlvbmAgb2JqZWN0IGlzIHRoZSBuZXdseSBtb2RpZmllZCBkYXRhIG9idGFpbmVkIGZyb20gdGhlIGBvYmpgIGV4cHJlc3Npb25cbiAgICAgICAqICAgIC0gVGhlIGBvbGRDb2xsZWN0aW9uYCBvYmplY3QgaXMgYSBjb3B5IG9mIHRoZSBmb3JtZXIgY29sbGVjdGlvbiBkYXRhLlxuICAgICAgICogICAgICBEdWUgdG8gcGVyZm9ybWFuY2UgY29uc2lkZXJhdGlvbnMsIHRoZWBvbGRDb2xsZWN0aW9uYCB2YWx1ZSBpcyBjb21wdXRlZCBvbmx5IGlmIHRoZVxuICAgICAgICogICAgICBgbGlzdGVuZXJgIGZ1bmN0aW9uIGRlY2xhcmVzIHR3byBvciBtb3JlIGFyZ3VtZW50cy5cbiAgICAgICAqICAgIC0gVGhlIGBzY29wZWAgYXJndW1lbnQgcmVmZXJzIHRvIHRoZSBjdXJyZW50IHNjb3BlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIGxpc3RlbmVyLiBXaGVuIHRoZVxuICAgICAgICogICAgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkLCB0aGUgaW50ZXJuYWwgd2F0Y2ggb3BlcmF0aW9uIGlzIHRlcm1pbmF0ZWQuXG4gICAgICAgKi9cbiAgICAgICR3YXRjaENvbGxlY3Rpb246IGZ1bmN0aW9uKG9iaiwgbGlzdGVuZXIpIHtcbiAgICAgICAgJHdhdGNoQ29sbGVjdGlvbkludGVyY2VwdG9yLiRzdGF0ZWZ1bCA9IHRydWU7XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAvLyB0aGUgY3VycmVudCB2YWx1ZSwgdXBkYXRlZCBvbiBlYWNoIGRpcnR5LWNoZWNrIHJ1blxuICAgICAgICB2YXIgbmV3VmFsdWU7XG4gICAgICAgIC8vIGEgc2hhbGxvdyBjb3B5IG9mIHRoZSBuZXdWYWx1ZSBmcm9tIHRoZSBsYXN0IGRpcnR5LWNoZWNrIHJ1bixcbiAgICAgICAgLy8gdXBkYXRlZCB0byBtYXRjaCBuZXdWYWx1ZSBkdXJpbmcgZGlydHktY2hlY2sgcnVuXG4gICAgICAgIHZhciBvbGRWYWx1ZTtcbiAgICAgICAgLy8gYSBzaGFsbG93IGNvcHkgb2YgdGhlIG5ld1ZhbHVlIGZyb20gd2hlbiB0aGUgbGFzdCBjaGFuZ2UgaGFwcGVuZWRcbiAgICAgICAgdmFyIHZlcnlPbGRWYWx1ZTtcbiAgICAgICAgLy8gb25seSB0cmFjayB2ZXJ5T2xkVmFsdWUgaWYgdGhlIGxpc3RlbmVyIGlzIGFza2luZyBmb3IgaXRcbiAgICAgICAgdmFyIHRyYWNrVmVyeU9sZFZhbHVlID0gKGxpc3RlbmVyLmxlbmd0aCA+IDEpO1xuICAgICAgICB2YXIgY2hhbmdlRGV0ZWN0ZWQgPSAwO1xuICAgICAgICB2YXIgY2hhbmdlRGV0ZWN0b3IgPSAkcGFyc2Uob2JqLCAkd2F0Y2hDb2xsZWN0aW9uSW50ZXJjZXB0b3IpO1xuICAgICAgICB2YXIgaW50ZXJuYWxBcnJheSA9IFtdO1xuICAgICAgICB2YXIgaW50ZXJuYWxPYmplY3QgPSB7fTtcbiAgICAgICAgdmFyIGluaXRSdW4gPSB0cnVlO1xuICAgICAgICB2YXIgb2xkTGVuZ3RoID0gMDtcblxuICAgICAgICBmdW5jdGlvbiAkd2F0Y2hDb2xsZWN0aW9uSW50ZXJjZXB0b3IoX3ZhbHVlKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBfdmFsdWU7XG4gICAgICAgICAgdmFyIG5ld0xlbmd0aCwga2V5LCBib3RoTmFOLCBuZXdJdGVtLCBvbGRJdGVtO1xuXG4gICAgICAgICAgLy8gSWYgdGhlIG5ldyB2YWx1ZSBpcyB1bmRlZmluZWQsIHRoZW4gcmV0dXJuIHVuZGVmaW5lZCBhcyB0aGUgd2F0Y2ggbWF5IGJlIGEgb25lLXRpbWUgd2F0Y2hcbiAgICAgICAgICBpZiAoaXNVbmRlZmluZWQobmV3VmFsdWUpKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAoIWlzT2JqZWN0KG5ld1ZhbHVlKSkgeyAvLyBpZiBwcmltaXRpdmVcbiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgb2xkVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXlMaWtlKG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBpbnRlcm5hbEFycmF5KSB7XG4gICAgICAgICAgICAgIC8vIHdlIGFyZSB0cmFuc2l0aW9uaW5nIGZyb20gc29tZXRoaW5nIHdoaWNoIHdhcyBub3QgYW4gYXJyYXkgaW50byBhcnJheS5cbiAgICAgICAgICAgICAgb2xkVmFsdWUgPSBpbnRlcm5hbEFycmF5O1xuICAgICAgICAgICAgICBvbGRMZW5ndGggPSBvbGRWYWx1ZS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuZXdMZW5ndGggPSBuZXdWYWx1ZS5sZW5ndGg7XG5cbiAgICAgICAgICAgIGlmIChvbGRMZW5ndGggIT09IG5ld0xlbmd0aCkge1xuICAgICAgICAgICAgICAvLyBpZiBsZW5ndGhzIGRvIG5vdCBtYXRjaCB3ZSBuZWVkIHRvIHRyaWdnZXIgY2hhbmdlIG5vdGlmaWNhdGlvblxuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICBvbGRWYWx1ZS5sZW5ndGggPSBvbGRMZW5ndGggPSBuZXdMZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb3B5IHRoZSBpdGVtcyB0byBvbGRWYWx1ZSBhbmQgbG9vayBmb3IgY2hhbmdlcy5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgb2xkSXRlbSA9IG9sZFZhbHVlW2ldO1xuICAgICAgICAgICAgICBuZXdJdGVtID0gbmV3VmFsdWVbaV07XG5cbiAgICAgICAgICAgICAgYm90aE5hTiA9IChvbGRJdGVtICE9PSBvbGRJdGVtKSAmJiAobmV3SXRlbSAhPT0gbmV3SXRlbSk7XG4gICAgICAgICAgICAgIGlmICghYm90aE5hTiAmJiAob2xkSXRlbSAhPT0gbmV3SXRlbSkpIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICAgIG9sZFZhbHVlW2ldID0gbmV3SXRlbTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob2xkVmFsdWUgIT09IGludGVybmFsT2JqZWN0KSB7XG4gICAgICAgICAgICAgIC8vIHdlIGFyZSB0cmFuc2l0aW9uaW5nIGZyb20gc29tZXRoaW5nIHdoaWNoIHdhcyBub3QgYW4gb2JqZWN0IGludG8gb2JqZWN0LlxuICAgICAgICAgICAgICBvbGRWYWx1ZSA9IGludGVybmFsT2JqZWN0ID0ge307XG4gICAgICAgICAgICAgIG9sZExlbmd0aCA9IDA7XG4gICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb3B5IHRoZSBpdGVtcyB0byBvbGRWYWx1ZSBhbmQgbG9vayBmb3IgY2hhbmdlcy5cbiAgICAgICAgICAgIG5ld0xlbmd0aCA9IDA7XG4gICAgICAgICAgICBmb3IgKGtleSBpbiBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChuZXdWYWx1ZSwga2V5KSkge1xuICAgICAgICAgICAgICAgIG5ld0xlbmd0aCsrO1xuICAgICAgICAgICAgICAgIG5ld0l0ZW0gPSBuZXdWYWx1ZVtrZXldO1xuICAgICAgICAgICAgICAgIG9sZEl0ZW0gPSBvbGRWYWx1ZVtrZXldO1xuXG4gICAgICAgICAgICAgICAgaWYgKGtleSBpbiBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgYm90aE5hTiA9IChvbGRJdGVtICE9PSBvbGRJdGVtKSAmJiAobmV3SXRlbSAhPT0gbmV3SXRlbSk7XG4gICAgICAgICAgICAgICAgICBpZiAoIWJvdGhOYU4gJiYgKG9sZEl0ZW0gIT09IG5ld0l0ZW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlW2tleV0gPSBuZXdJdGVtO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBvbGRMZW5ndGgrKztcbiAgICAgICAgICAgICAgICAgIG9sZFZhbHVlW2tleV0gPSBuZXdJdGVtO1xuICAgICAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvbGRMZW5ndGggPiBuZXdMZW5ndGgpIHtcbiAgICAgICAgICAgICAgLy8gd2UgdXNlZCB0byBoYXZlIG1vcmUga2V5cywgbmVlZCB0byBmaW5kIHRoZW0gYW5kIGRlc3Ryb3kgdGhlbS5cbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgICAgZm9yIChrZXkgaW4gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwobmV3VmFsdWUsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgIG9sZExlbmd0aC0tO1xuICAgICAgICAgICAgICAgICAgZGVsZXRlIG9sZFZhbHVlW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjaGFuZ2VEZXRlY3RlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uICR3YXRjaENvbGxlY3Rpb25BY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGluaXRSdW4pIHtcbiAgICAgICAgICAgIGluaXRSdW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGxpc3RlbmVyKG5ld1ZhbHVlLCBuZXdWYWx1ZSwgc2VsZik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKG5ld1ZhbHVlLCB2ZXJ5T2xkVmFsdWUsIHNlbGYpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIG1ha2UgYSBjb3B5IGZvciB0aGUgbmV4dCB0aW1lIGEgY29sbGVjdGlvbiBpcyBjaGFuZ2VkXG4gICAgICAgICAgaWYgKHRyYWNrVmVyeU9sZFZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIWlzT2JqZWN0KG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgICAvL3ByaW1pdGl2ZVxuICAgICAgICAgICAgICB2ZXJ5T2xkVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheUxpa2UobmV3VmFsdWUpKSB7XG4gICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZSA9IG5ldyBBcnJheShuZXdWYWx1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld1ZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlW2ldID0gbmV3VmFsdWVbaV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGlmIG9iamVjdFxuICAgICAgICAgICAgICB2ZXJ5T2xkVmFsdWUgPSB7fTtcbiAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwobmV3VmFsdWUsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZVtrZXldID0gbmV3VmFsdWVba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy4kd2F0Y2goY2hhbmdlRGV0ZWN0b3IsICR3YXRjaENvbGxlY3Rpb25BY3Rpb24pO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3RcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBQcm9jZXNzZXMgYWxsIG9mIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlcnN9IG9mIHRoZSBjdXJyZW50IHNjb3BlIGFuZFxuICAgICAgICogaXRzIGNoaWxkcmVuLiBCZWNhdXNlIGEge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNoZXJ9J3MgbGlzdGVuZXIgY2FuIGNoYW5nZVxuICAgICAgICogdGhlIG1vZGVsLCB0aGUgYCRkaWdlc3QoKWAga2VlcHMgY2FsbGluZyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNoZXJzfVxuICAgICAgICogdW50aWwgbm8gbW9yZSBsaXN0ZW5lcnMgYXJlIGZpcmluZy4gVGhpcyBtZWFucyB0aGF0IGl0IGlzIHBvc3NpYmxlIHRvIGdldCBpbnRvIGFuIGluZmluaXRlXG4gICAgICAgKiBsb29wLiBUaGlzIGZ1bmN0aW9uIHdpbGwgdGhyb3cgYCdNYXhpbXVtIGl0ZXJhdGlvbiBsaW1pdCBleGNlZWRlZC4nYCBpZiB0aGUgbnVtYmVyIG9mXG4gICAgICAgKiBpdGVyYXRpb25zIGV4Y2VlZHMgMTAuXG4gICAgICAgKlxuICAgICAgICogVXN1YWxseSwgeW91IGRvbid0IGNhbGwgYCRkaWdlc3QoKWAgZGlyZWN0bHkgaW5cbiAgICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDb250cm9sbGVyIGNvbnRyb2xsZXJzfSBvciBpblxuICAgICAgICoge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LlxuICAgICAgICogSW5zdGVhZCwgeW91IHNob3VsZCBjYWxsIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseSAkYXBwbHkoKX0gKHR5cGljYWxseSBmcm9tIHdpdGhpblxuICAgICAgICogYSB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUgZGlyZWN0aXZlfSksIHdoaWNoIHdpbGwgZm9yY2UgYSBgJGRpZ2VzdCgpYC5cbiAgICAgICAqXG4gICAgICAgKiBJZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuZXZlciBgJGRpZ2VzdCgpYCBpcyBjYWxsZWQsXG4gICAgICAgKiB5b3UgY2FuIHJlZ2lzdGVyIGEgYHdhdGNoRXhwcmVzc2lvbmAgZnVuY3Rpb24gd2l0aFxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfSB3aXRoIG5vIGBsaXN0ZW5lcmAuXG4gICAgICAgKlxuICAgICAgICogSW4gdW5pdCB0ZXN0cywgeW91IG1heSBuZWVkIHRvIGNhbGwgYCRkaWdlc3QoKWAgdG8gc2ltdWxhdGUgdGhlIHNjb3BlIGxpZmUgY3ljbGUuXG4gICAgICAgKlxuICAgICAgICogIyBFeGFtcGxlXG4gICAgICAgKiBgYGBqc1xuICAgICAgICAgICB2YXIgc2NvcGUgPSAuLi47XG4gICAgICAgICAgIHNjb3BlLm5hbWUgPSAnbWlza28nO1xuICAgICAgICAgICBzY29wZS5jb3VudGVyID0gMDtcblxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTtcbiAgICAgICAgICAgc2NvcGUuJHdhdGNoKCduYW1lJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgc2NvcGUuY291bnRlciA9IHNjb3BlLmNvdW50ZXIgKyAxO1xuICAgICAgICAgICB9KTtcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7XG5cbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAvLyB0aGUgbGlzdGVuZXIgaXMgYWx3YXlzIGNhbGxlZCBkdXJpbmcgdGhlIGZpcnN0ICRkaWdlc3QgbG9vcCBhZnRlciBpdCB3YXMgcmVnaXN0ZXJlZFxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTtcblxuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIC8vIGJ1dCBub3cgaXQgd2lsbCBub3QgYmUgY2FsbGVkIHVubGVzcyB0aGUgdmFsdWUgY2hhbmdlc1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTtcblxuICAgICAgICAgICBzY29wZS5uYW1lID0gJ2FkYW0nO1xuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDIpO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICovXG4gICAgICAkZGlnZXN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHdhdGNoLCB2YWx1ZSwgbGFzdCxcbiAgICAgICAgICAgIHdhdGNoZXJzLFxuICAgICAgICAgICAgbGVuZ3RoLFxuICAgICAgICAgICAgZGlydHksIHR0bCA9IFRUTCxcbiAgICAgICAgICAgIG5leHQsIGN1cnJlbnQsIHRhcmdldCA9IHRoaXMsXG4gICAgICAgICAgICB3YXRjaExvZyA9IFtdLFxuICAgICAgICAgICAgbG9nSWR4LCBsb2dNc2csIGFzeW5jVGFzaztcblxuICAgICAgICBiZWdpblBoYXNlKCckZGlnZXN0Jyk7XG4gICAgICAgIC8vIENoZWNrIGZvciBjaGFuZ2VzIHRvIGJyb3dzZXIgdXJsIHRoYXQgaGFwcGVuZWQgaW4gc3luYyBiZWZvcmUgdGhlIGNhbGwgdG8gJGRpZ2VzdFxuICAgICAgICAkYnJvd3Nlci4kJGNoZWNrVXJsQ2hhbmdlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMgPT09ICRyb290U2NvcGUgJiYgYXBwbHlBc3luY0lkICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgcm9vdCBzY29wZSwgYW5kICRhcHBseUFzeW5jIGhhcyBzY2hlZHVsZWQgYSBkZWZlcnJlZCAkYXBwbHkoKSwgdGhlblxuICAgICAgICAgIC8vIGNhbmNlbCB0aGUgc2NoZWR1bGVkICRhcHBseSBhbmQgZmx1c2ggdGhlIHF1ZXVlIG9mIGV4cHJlc3Npb25zIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgICAgICAkYnJvd3Nlci5kZWZlci5jYW5jZWwoYXBwbHlBc3luY0lkKTtcbiAgICAgICAgICBmbHVzaEFwcGx5QXN5bmMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3REaXJ0eVdhdGNoID0gbnVsbDtcblxuICAgICAgICBkbyB7IC8vIFwid2hpbGUgZGlydHlcIiBsb29wXG4gICAgICAgICAgZGlydHkgPSBmYWxzZTtcbiAgICAgICAgICBjdXJyZW50ID0gdGFyZ2V0O1xuXG4gICAgICAgICAgd2hpbGUgKGFzeW5jUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBhc3luY1Rhc2sgPSBhc3luY1F1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICAgIGFzeW5jVGFzay5zY29wZS4kZXZhbChhc3luY1Rhc2suZXhwcmVzc2lvbiwgYXN5bmNUYXNrLmxvY2Fscyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRyYXZlcnNlU2NvcGVzTG9vcDpcbiAgICAgICAgICBkbyB7IC8vIFwidHJhdmVyc2UgdGhlIHNjb3Blc1wiIGxvb3BcbiAgICAgICAgICAgIGlmICgod2F0Y2hlcnMgPSBjdXJyZW50LiQkd2F0Y2hlcnMpKSB7XG4gICAgICAgICAgICAgIC8vIHByb2Nlc3Mgb3VyIHdhdGNoZXNcbiAgICAgICAgICAgICAgbGVuZ3RoID0gd2F0Y2hlcnMubGVuZ3RoO1xuICAgICAgICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgd2F0Y2ggPSB3YXRjaGVyc1tsZW5ndGhdO1xuICAgICAgICAgICAgICAgICAgLy8gTW9zdCBjb21tb24gd2F0Y2hlcyBhcmUgb24gcHJpbWl0aXZlcywgaW4gd2hpY2ggY2FzZSB3ZSBjYW4gc2hvcnRcbiAgICAgICAgICAgICAgICAgIC8vIGNpcmN1aXQgaXQgd2l0aCA9PT0gb3BlcmF0b3IsIG9ubHkgd2hlbiA9PT0gZmFpbHMgZG8gd2UgdXNlIC5lcXVhbHNcbiAgICAgICAgICAgICAgICAgIGlmICh3YXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHZhbHVlID0gd2F0Y2guZ2V0KGN1cnJlbnQpKSAhPT0gKGxhc3QgPSB3YXRjaC5sYXN0KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgISh3YXRjaC5lcVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZXF1YWxzKHZhbHVlLCBsYXN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGxhc3QgPT09ICdudW1iZXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgaXNOYU4odmFsdWUpICYmIGlzTmFOKGxhc3QpKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBkaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSB3YXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICB3YXRjaC5sYXN0ID0gd2F0Y2guZXEgPyBjb3B5KHZhbHVlLCBudWxsKSA6IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgIHdhdGNoLmZuKHZhbHVlLCAoKGxhc3QgPT09IGluaXRXYXRjaFZhbCkgPyB2YWx1ZSA6IGxhc3QpLCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodHRsIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nSWR4ID0gNCAtIHR0bDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghd2F0Y2hMb2dbbG9nSWR4XSkgd2F0Y2hMb2dbbG9nSWR4XSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2F0Y2hMb2dbbG9nSWR4XS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnOiBpc0Z1bmN0aW9uKHdhdGNoLmV4cCkgPyAnZm46ICcgKyAod2F0Y2guZXhwLm5hbWUgfHwgd2F0Y2guZXhwLnRvU3RyaW5nKCkpIDogd2F0Y2guZXhwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWw6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvbGRWYWw6IGxhc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3YXRjaCA9PT0gbGFzdERpcnR5V2F0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbW9zdCByZWNlbnRseSBkaXJ0eSB3YXRjaGVyIGlzIG5vdyBjbGVhbiwgc2hvcnQgY2lyY3VpdCBzaW5jZSB0aGUgcmVtYWluaW5nIHdhdGNoZXJzXG4gICAgICAgICAgICAgICAgICAgICAgLy8gaGF2ZSBhbHJlYWR5IGJlZW4gdGVzdGVkLlxuICAgICAgICAgICAgICAgICAgICAgIGRpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWsgdHJhdmVyc2VTY29wZXNMb29wO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEluc2FuaXR5IFdhcm5pbmc6IHNjb3BlIGRlcHRoLWZpcnN0IHRyYXZlcnNhbFxuICAgICAgICAgICAgLy8geWVzLCB0aGlzIGNvZGUgaXMgYSBiaXQgY3JhenksIGJ1dCBpdCB3b3JrcyBhbmQgd2UgaGF2ZSB0ZXN0cyB0byBwcm92ZSBpdCFcbiAgICAgICAgICAgIC8vIHRoaXMgcGllY2Ugc2hvdWxkIGJlIGtlcHQgaW4gc3luYyB3aXRoIHRoZSB0cmF2ZXJzYWwgaW4gJGJyb2FkY2FzdFxuICAgICAgICAgICAgaWYgKCEobmV4dCA9ICgoY3VycmVudC4kJHdhdGNoZXJzQ291bnQgJiYgY3VycmVudC4kJGNoaWxkSGVhZCkgfHxcbiAgICAgICAgICAgICAgICAoY3VycmVudCAhPT0gdGFyZ2V0ICYmIGN1cnJlbnQuJCRuZXh0U2libGluZykpKSkge1xuICAgICAgICAgICAgICB3aGlsZSAoY3VycmVudCAhPT0gdGFyZ2V0ICYmICEobmV4dCA9IGN1cnJlbnQuJCRuZXh0U2libGluZykpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC4kcGFyZW50O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBuZXh0KSk7XG5cbiAgICAgICAgICAvLyBgYnJlYWsgdHJhdmVyc2VTY29wZXNMb29wO2AgdGFrZXMgdXMgdG8gaGVyZVxuXG4gICAgICAgICAgaWYgKChkaXJ0eSB8fCBhc3luY1F1ZXVlLmxlbmd0aCkgJiYgISh0dGwtLSkpIHtcbiAgICAgICAgICAgIGNsZWFyUGhhc2UoKTtcbiAgICAgICAgICAgIHRocm93ICRyb290U2NvcGVNaW5FcnIoJ2luZmRpZycsXG4gICAgICAgICAgICAgICAgJ3swfSAkZGlnZXN0KCkgaXRlcmF0aW9ucyByZWFjaGVkLiBBYm9ydGluZyFcXG4nICtcbiAgICAgICAgICAgICAgICAnV2F0Y2hlcnMgZmlyZWQgaW4gdGhlIGxhc3QgNSBpdGVyYXRpb25zOiB7MX0nLFxuICAgICAgICAgICAgICAgIFRUTCwgd2F0Y2hMb2cpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IHdoaWxlIChkaXJ0eSB8fCBhc3luY1F1ZXVlLmxlbmd0aCk7XG5cbiAgICAgICAgY2xlYXJQaGFzZSgpO1xuXG4gICAgICAgIHdoaWxlIChwb3N0RGlnZXN0UXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHBvc3REaWdlc3RRdWV1ZS5zaGlmdCgpKCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGV2ZW50XG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRkZXN0cm95XG4gICAgICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiBzY29wZSBiZWluZyBkZXN0cm95ZWRcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEJyb2FkY2FzdGVkIHdoZW4gYSBzY29wZSBhbmQgaXRzIGNoaWxkcmVuIGFyZSBiZWluZyBkZXN0cm95ZWQuXG4gICAgICAgKlxuICAgICAgICogTm90ZSB0aGF0LCBpbiBBbmd1bGFySlMsIHRoZXJlIGlzIGFsc28gYSBgJGRlc3Ryb3lgIGpRdWVyeSBldmVudCwgd2hpY2ggY2FuIGJlIHVzZWQgdG9cbiAgICAgICAqIGNsZWFuIHVwIERPTSBiaW5kaW5ncyBiZWZvcmUgYW4gZWxlbWVudCBpcyByZW1vdmVkIGZyb20gdGhlIERPTS5cbiAgICAgICAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGRlc3Ryb3lcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZW1vdmVzIHRoZSBjdXJyZW50IHNjb3BlIChhbmQgYWxsIG9mIGl0cyBjaGlsZHJlbikgZnJvbSB0aGUgcGFyZW50IHNjb3BlLiBSZW1vdmFsIGltcGxpZXNcbiAgICAgICAqIHRoYXQgY2FsbHMgdG8ge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9IHdpbGwgbm8gbG9uZ2VyXG4gICAgICAgKiBwcm9wYWdhdGUgdG8gdGhlIGN1cnJlbnQgc2NvcGUgYW5kIGl0cyBjaGlsZHJlbi4gUmVtb3ZhbCBhbHNvIGltcGxpZXMgdGhhdCB0aGUgY3VycmVudFxuICAgICAgICogc2NvcGUgaXMgZWxpZ2libGUgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgYCRkZXN0cm95KClgIGlzIHVzdWFsbHkgdXNlZCBieSBkaXJlY3RpdmVzIHN1Y2ggYXNcbiAgICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgbmdSZXBlYXR9IGZvciBtYW5hZ2luZyB0aGVcbiAgICAgICAqIHVucm9sbGluZyBvZiB0aGUgbG9vcC5cbiAgICAgICAqXG4gICAgICAgKiBKdXN0IGJlZm9yZSBhIHNjb3BlIGlzIGRlc3Ryb3llZCwgYSBgJGRlc3Ryb3lgIGV2ZW50IGlzIGJyb2FkY2FzdGVkIG9uIHRoaXMgc2NvcGUuXG4gICAgICAgKiBBcHBsaWNhdGlvbiBjb2RlIGNhbiByZWdpc3RlciBhIGAkZGVzdHJveWAgZXZlbnQgaGFuZGxlciB0aGF0IHdpbGwgZ2l2ZSBpdCBhIGNoYW5jZSB0b1xuICAgICAgICogcGVyZm9ybSBhbnkgbmVjZXNzYXJ5IGNsZWFudXAuXG4gICAgICAgKlxuICAgICAgICogTm90ZSB0aGF0LCBpbiBBbmd1bGFySlMsIHRoZXJlIGlzIGFsc28gYSBgJGRlc3Ryb3lgIGpRdWVyeSBldmVudCwgd2hpY2ggY2FuIGJlIHVzZWQgdG9cbiAgICAgICAqIGNsZWFuIHVwIERPTSBiaW5kaW5ncyBiZWZvcmUgYW4gZWxlbWVudCBpcyByZW1vdmVkIGZyb20gdGhlIERPTS5cbiAgICAgICAqL1xuICAgICAgJGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBXZSBjYW4ndCBkZXN0cm95IGEgc2NvcGUgdGhhdCBoYXMgYmVlbiBhbHJlYWR5IGRlc3Ryb3llZC5cbiAgICAgICAgaWYgKHRoaXMuJCRkZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMuJHBhcmVudDtcblxuICAgICAgICB0aGlzLiRicm9hZGNhc3QoJyRkZXN0cm95Jyk7XG4gICAgICAgIHRoaXMuJCRkZXN0cm95ZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmICh0aGlzID09PSAkcm9vdFNjb3BlKSB7XG4gICAgICAgICAgLy9SZW1vdmUgaGFuZGxlcnMgYXR0YWNoZWQgdG8gd2luZG93IHdoZW4gJHJvb3RTY29wZSBpcyByZW1vdmVkXG4gICAgICAgICAgJGJyb3dzZXIuJCRhcHBsaWNhdGlvbkRlc3Ryb3llZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5jcmVtZW50V2F0Y2hlcnNDb3VudCh0aGlzLCAtdGhpcy4kJHdhdGNoZXJzQ291bnQpO1xuICAgICAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gdGhpcy4kJGxpc3RlbmVyQ291bnQpIHtcbiAgICAgICAgICBkZWNyZW1lbnRMaXN0ZW5lckNvdW50KHRoaXMsIHRoaXMuJCRsaXN0ZW5lckNvdW50W2V2ZW50TmFtZV0sIGV2ZW50TmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZXZlciBhbGwgdGhlIHJlZmVyZW5jZXMgdG8gcGFyZW50IHNjb3BlcyAoYWZ0ZXIgdGhpcyBjbGVhbnVwLCB0aGUgY3VycmVudCBzY29wZSBzaG91bGRcbiAgICAgICAgLy8gbm90IGJlIHJldGFpbmVkIGJ5IGFueSBvZiBvdXIgcmVmZXJlbmNlcyBhbmQgc2hvdWxkIGJlIGVsaWdpYmxlIGZvciBnYXJiYWdlIGNvbGxlY3Rpb24pXG4gICAgICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LiQkY2hpbGRIZWFkID09IHRoaXMpIHBhcmVudC4kJGNoaWxkSGVhZCA9IHRoaXMuJCRuZXh0U2libGluZztcbiAgICAgICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuJCRjaGlsZFRhaWwgPT0gdGhpcykgcGFyZW50LiQkY2hpbGRUYWlsID0gdGhpcy4kJHByZXZTaWJsaW5nO1xuICAgICAgICBpZiAodGhpcy4kJHByZXZTaWJsaW5nKSB0aGlzLiQkcHJldlNpYmxpbmcuJCRuZXh0U2libGluZyA9IHRoaXMuJCRuZXh0U2libGluZztcbiAgICAgICAgaWYgKHRoaXMuJCRuZXh0U2libGluZykgdGhpcy4kJG5leHRTaWJsaW5nLiQkcHJldlNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmc7XG5cbiAgICAgICAgLy8gRGlzYWJsZSBsaXN0ZW5lcnMsIHdhdGNoZXJzIGFuZCBhcHBseS9kaWdlc3QgbWV0aG9kc1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gdGhpcy4kZGlnZXN0ID0gdGhpcy4kYXBwbHkgPSB0aGlzLiRldmFsQXN5bmMgPSB0aGlzLiRhcHBseUFzeW5jID0gbm9vcDtcbiAgICAgICAgdGhpcy4kb24gPSB0aGlzLiR3YXRjaCA9IHRoaXMuJHdhdGNoR3JvdXAgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG5vb3A7IH07XG4gICAgICAgIHRoaXMuJCRsaXN0ZW5lcnMgPSB7fTtcblxuICAgICAgICAvLyBEaXNjb25uZWN0IHRoZSBuZXh0IHNpYmxpbmcgdG8gcHJldmVudCBgY2xlYW5VcFNjb3BlYCBkZXN0cm95aW5nIHRob3NlIHRvb1xuICAgICAgICB0aGlzLiQkbmV4dFNpYmxpbmcgPSBudWxsO1xuICAgICAgICBjbGVhblVwU2NvcGUodGhpcyk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGV2YWxcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBFeGVjdXRlcyB0aGUgYGV4cHJlc3Npb25gIG9uIHRoZSBjdXJyZW50IHNjb3BlIGFuZCByZXR1cm5zIHRoZSByZXN1bHQuIEFueSBleGNlcHRpb25zIGluXG4gICAgICAgKiB0aGUgZXhwcmVzc2lvbiBhcmUgcHJvcGFnYXRlZCAodW5jYXVnaHQpLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGV2YWx1YXRpbmcgQW5ndWxhclxuICAgICAgICogZXhwcmVzc2lvbnMuXG4gICAgICAgKlxuICAgICAgICogIyBFeGFtcGxlXG4gICAgICAgKiBgYGBqc1xuICAgICAgICAgICB2YXIgc2NvcGUgPSBuZy4kcm9vdFNjb3BlLlNjb3BlKCk7XG4gICAgICAgICAgIHNjb3BlLmEgPSAxO1xuICAgICAgICAgICBzY29wZS5iID0gMjtcblxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuJGV2YWwoJ2ErYicpKS50b0VxdWFsKDMpO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuJGV2YWwoZnVuY3Rpb24oc2NvcGUpeyByZXR1cm4gc2NvcGUuYSArIHNjb3BlLmI7IH0pKS50b0VxdWFsKDMpO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwcmVzc2lvbiBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuXG4gICAgICAgKlxuICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiAge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uXG4gICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBjdXJyZW50IGBzY29wZWAgcGFyYW1ldGVyLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KG9iamVjdCk9fSBsb2NhbHMgTG9jYWwgdmFyaWFibGVzIG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpbiBzY29wZS5cbiAgICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0IG9mIGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24uXG4gICAgICAgKi9cbiAgICAgICRldmFsOiBmdW5jdGlvbihleHByLCBsb2NhbHMpIHtcbiAgICAgICAgcmV0dXJuICRwYXJzZShleHByKSh0aGlzLCBsb2NhbHMpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRldmFsQXN5bmNcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBFeGVjdXRlcyB0aGUgZXhwcmVzc2lvbiBvbiB0aGUgY3VycmVudCBzY29wZSBhdCBhIGxhdGVyIHBvaW50IGluIHRpbWUuXG4gICAgICAgKlxuICAgICAgICogVGhlIGAkZXZhbEFzeW5jYCBtYWtlcyBubyBndWFyYW50ZWVzIGFzIHRvIHdoZW4gdGhlIGBleHByZXNzaW9uYCB3aWxsIGJlIGV4ZWN1dGVkLCBvbmx5XG4gICAgICAgKiB0aGF0OlxuICAgICAgICpcbiAgICAgICAqICAgLSBpdCB3aWxsIGV4ZWN1dGUgYWZ0ZXIgdGhlIGZ1bmN0aW9uIHRoYXQgc2NoZWR1bGVkIHRoZSBldmFsdWF0aW9uIChwcmVmZXJhYmx5IGJlZm9yZSBET01cbiAgICAgICAqICAgICByZW5kZXJpbmcpLlxuICAgICAgICogICAtIGF0IGxlYXN0IG9uZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QgY3ljbGV9IHdpbGwgYmUgcGVyZm9ybWVkIGFmdGVyXG4gICAgICAgKiAgICAgYGV4cHJlc3Npb25gIGV4ZWN1dGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBBbnkgZXhjZXB0aW9ucyBmcm9tIHRoZSBleGVjdXRpb24gb2YgdGhlIGV4cHJlc3Npb24gYXJlIGZvcndhcmRlZCB0byB0aGVcbiAgICAgICAqIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS5cbiAgICAgICAqXG4gICAgICAgKiBfX05vdGU6X18gaWYgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgb3V0c2lkZSBvZiBhIGAkZGlnZXN0YCBjeWNsZSwgYSBuZXcgYCRkaWdlc3RgIGN5Y2xlXG4gICAgICAgKiB3aWxsIGJlIHNjaGVkdWxlZC4gSG93ZXZlciwgaXQgaXMgZW5jb3VyYWdlZCB0byBhbHdheXMgY2FsbCBjb2RlIHRoYXQgY2hhbmdlcyB0aGUgbW9kZWxcbiAgICAgICAqIGZyb20gd2l0aGluIGFuIGAkYXBwbHlgIGNhbGwuIFRoYXQgaW5jbHVkZXMgY29kZSBldmFsdWF0ZWQgdmlhIGAkZXZhbEFzeW5jYC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHByZXNzaW9uIEFuIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZC5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBzdHJpbmdgOiBleGVjdXRlIHVzaW5nIHRoZSBydWxlcyBhcyBkZWZpbmVkIGluIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LlxuICAgICAgICogICAgLSBgZnVuY3Rpb24oc2NvcGUpYDogZXhlY3V0ZSB0aGUgZnVuY3Rpb24gd2l0aCB0aGUgY3VycmVudCBgc2NvcGVgIHBhcmFtZXRlci5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhvYmplY3QpPX0gbG9jYWxzIExvY2FsIHZhcmlhYmxlcyBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW4gc2NvcGUuXG4gICAgICAgKi9cbiAgICAgICRldmFsQXN5bmM6IGZ1bmN0aW9uKGV4cHIsIGxvY2Fscykge1xuICAgICAgICAvLyBpZiB3ZSBhcmUgb3V0c2lkZSBvZiBhbiAkZGlnZXN0IGxvb3AgYW5kIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgd2UgYXJlIHNjaGVkdWxpbmcgYXN5bmNcbiAgICAgICAgLy8gdGFzayBhbHNvIHNjaGVkdWxlIGFzeW5jIGF1dG8tZmx1c2hcbiAgICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UgJiYgIWFzeW5jUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoYXN5bmNRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBhc3luY1F1ZXVlLnB1c2goe3Njb3BlOiB0aGlzLCBleHByZXNzaW9uOiBleHByLCBsb2NhbHM6IGxvY2Fsc30pO1xuICAgICAgfSxcblxuICAgICAgJCRwb3N0RGlnZXN0OiBmdW5jdGlvbihmbikge1xuICAgICAgICBwb3N0RGlnZXN0UXVldWUucHVzaChmbik7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGFwcGx5XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogYCRhcHBseSgpYCBpcyB1c2VkIHRvIGV4ZWN1dGUgYW4gZXhwcmVzc2lvbiBpbiBhbmd1bGFyIGZyb20gb3V0c2lkZSBvZiB0aGUgYW5ndWxhclxuICAgICAgICogZnJhbWV3b3JrLiAoRm9yIGV4YW1wbGUgZnJvbSBicm93c2VyIERPTSBldmVudHMsIHNldFRpbWVvdXQsIFhIUiBvciB0aGlyZCBwYXJ0eSBsaWJyYXJpZXMpLlxuICAgICAgICogQmVjYXVzZSB3ZSBhcmUgY2FsbGluZyBpbnRvIHRoZSBhbmd1bGFyIGZyYW1ld29yayB3ZSBuZWVkIHRvIHBlcmZvcm0gcHJvcGVyIHNjb3BlIGxpZmVcbiAgICAgICAqIGN5Y2xlIG9mIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciBleGNlcHRpb24gaGFuZGxpbmd9LFxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCBleGVjdXRpbmcgd2F0Y2hlc30uXG4gICAgICAgKlxuICAgICAgICogIyMgTGlmZSBjeWNsZVxuICAgICAgICpcbiAgICAgICAqICMgUHNldWRvLUNvZGUgb2YgYCRhcHBseSgpYFxuICAgICAgICogYGBganNcbiAgICAgICAgICAgZnVuY3Rpb24gJGFwcGx5KGV4cHIpIHtcbiAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgcmV0dXJuICRldmFsKGV4cHIpO1xuICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAkcm9vdC4kZGlnZXN0KCk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICB9XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICogU2NvcGUncyBgJGFwcGx5KClgIG1ldGhvZCB0cmFuc2l0aW9ucyB0aHJvdWdoIHRoZSBmb2xsb3dpbmcgc3RhZ2VzOlxuICAgICAgICpcbiAgICAgICAqIDEuIFRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyBleGVjdXRlZCB1c2luZyB0aGVcbiAgICAgICAqICAgIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRldmFsICRldmFsKCl9IG1ldGhvZC5cbiAgICAgICAqIDIuIEFueSBleGNlcHRpb25zIGZyb20gdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZXhwcmVzc2lvbiBhcmUgZm9yd2FyZGVkIHRvIHRoZVxuICAgICAgICogICAge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLlxuICAgICAgICogMy4gVGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaH0gbGlzdGVuZXJzIGFyZSBmaXJlZCBpbW1lZGlhdGVseSBhZnRlciB0aGVcbiAgICAgICAqICAgIGV4cHJlc3Npb24gd2FzIGV4ZWN1dGVkIHVzaW5nIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gbWV0aG9kLlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHAgQW4gYW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkLlxuICAgICAgICpcbiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uXG4gICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMgeyp9IFRoZSByZXN1bHQgb2YgZXZhbHVhdGluZyB0aGUgZXhwcmVzc2lvbi5cbiAgICAgICAqL1xuICAgICAgJGFwcGx5OiBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYmVnaW5QaGFzZSgnJGFwcGx5Jyk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRldmFsKGV4cHIpO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBjbGVhclBoYXNlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkYXBwbHlBc3luY1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFNjaGVkdWxlIHRoZSBpbnZvY2F0aW9uIG9mICRhcHBseSB0byBvY2N1ciBhdCBhIGxhdGVyIHRpbWUuIFRoZSBhY3R1YWwgdGltZSBkaWZmZXJlbmNlXG4gICAgICAgKiB2YXJpZXMgYWNyb3NzIGJyb3dzZXJzLCBidXQgaXMgdHlwaWNhbGx5IGFyb3VuZCB+MTAgbWlsbGlzZWNvbmRzLlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gcXVldWUgdXAgbXVsdGlwbGUgZXhwcmVzc2lvbnMgd2hpY2ggbmVlZCB0byBiZSBldmFsdWF0ZWQgaW4gdGhlIHNhbWVcbiAgICAgICAqIGRpZ2VzdC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHAgQW4gYW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkLlxuICAgICAgICpcbiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uXG4gICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuXG4gICAgICAgKi9cbiAgICAgICRhcHBseUFzeW5jOiBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIHZhciBzY29wZSA9IHRoaXM7XG4gICAgICAgIGV4cHIgJiYgYXBwbHlBc3luY1F1ZXVlLnB1c2goJGFwcGx5QXN5bmNFeHByZXNzaW9uKTtcbiAgICAgICAgc2NoZWR1bGVBcHBseUFzeW5jKCk7XG5cbiAgICAgICAgZnVuY3Rpb24gJGFwcGx5QXN5bmNFeHByZXNzaW9uKCkge1xuICAgICAgICAgIHNjb3BlLiRldmFsKGV4cHIpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJG9uXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogTGlzdGVucyBvbiBldmVudHMgb2YgYSBnaXZlbiB0eXBlLiBTZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGVtaXQgJGVtaXR9IGZvclxuICAgICAgICogZGlzY3Vzc2lvbiBvZiBldmVudCBsaWZlIGN5Y2xlLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBldmVudCBsaXN0ZW5lciBmdW5jdGlvbiBmb3JtYXQgaXM6IGBmdW5jdGlvbihldmVudCwgYXJncy4uLilgLiBUaGUgYGV2ZW50YCBvYmplY3RcbiAgICAgICAqIHBhc3NlZCBpbnRvIHRoZSBsaXN0ZW5lciBoYXMgdGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzOlxuICAgICAgICpcbiAgICAgICAqICAgLSBgdGFyZ2V0U2NvcGVgIC0gYHtTY29wZX1gOiB0aGUgc2NvcGUgb24gd2hpY2ggdGhlIGV2ZW50IHdhcyBgJGVtaXRgLWVkIG9yXG4gICAgICAgKiAgICAgYCRicm9hZGNhc3RgLWVkLlxuICAgICAgICogICAtIGBjdXJyZW50U2NvcGVgIC0gYHtTY29wZX1gOiB0aGUgc2NvcGUgdGhhdCBpcyBjdXJyZW50bHkgaGFuZGxpbmcgdGhlIGV2ZW50LiBPbmNlIHRoZVxuICAgICAgICogICAgIGV2ZW50IHByb3BhZ2F0ZXMgdGhyb3VnaCB0aGUgc2NvcGUgaGllcmFyY2h5LCB0aGlzIHByb3BlcnR5IGlzIHNldCB0byBudWxsLlxuICAgICAgICogICAtIGBuYW1lYCAtIGB7c3RyaW5nfWA6IG5hbWUgb2YgdGhlIGV2ZW50LlxuICAgICAgICogICAtIGBzdG9wUHJvcGFnYXRpb25gIC0gYHtmdW5jdGlvbj19YDogY2FsbGluZyBgc3RvcFByb3BhZ2F0aW9uYCBmdW5jdGlvbiB3aWxsIGNhbmNlbFxuICAgICAgICogICAgIGZ1cnRoZXIgZXZlbnQgcHJvcGFnYXRpb24gKGF2YWlsYWJsZSBvbmx5IGZvciBldmVudHMgdGhhdCB3ZXJlIGAkZW1pdGAtZWQpLlxuICAgICAgICogICAtIGBwcmV2ZW50RGVmYXVsdGAgLSBge2Z1bmN0aW9ufWA6IGNhbGxpbmcgYHByZXZlbnREZWZhdWx0YCBzZXRzIGBkZWZhdWx0UHJldmVudGVkYCBmbGFnXG4gICAgICAgKiAgICAgdG8gdHJ1ZS5cbiAgICAgICAqICAgLSBgZGVmYXVsdFByZXZlbnRlZGAgLSBge2Jvb2xlYW59YDogdHJ1ZSBpZiBgcHJldmVudERlZmF1bHRgIHdhcyBjYWxsZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXZlbnQgbmFtZSB0byBsaXN0ZW4gb24uXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGV2ZW50LCAuLi5hcmdzKX0gbGlzdGVuZXIgRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBldmVudCBpcyBlbWl0dGVkLlxuICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKCl9IFJldHVybnMgYSBkZXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBsaXN0ZW5lci5cbiAgICAgICAqL1xuICAgICAgJG9uOiBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xuICAgICAgICB2YXIgbmFtZWRMaXN0ZW5lcnMgPSB0aGlzLiQkbGlzdGVuZXJzW25hbWVdO1xuICAgICAgICBpZiAoIW5hbWVkTGlzdGVuZXJzKSB7XG4gICAgICAgICAgdGhpcy4kJGxpc3RlbmVyc1tuYW1lXSA9IG5hbWVkTGlzdGVuZXJzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgbmFtZWRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgaWYgKCFjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSkge1xuICAgICAgICAgICAgY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0gPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSsrO1xuICAgICAgICB9IHdoaWxlICgoY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudCkpO1xuXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBpbmRleE9mTGlzdGVuZXIgPSBuYW1lZExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgICAgICBpZiAoaW5kZXhPZkxpc3RlbmVyICE9PSAtMSkge1xuICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnNbaW5kZXhPZkxpc3RlbmVyXSA9IG51bGw7XG4gICAgICAgICAgICBkZWNyZW1lbnRMaXN0ZW5lckNvdW50KHNlbGYsIDEsIG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRlbWl0XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogRGlzcGF0Y2hlcyBhbiBldmVudCBgbmFtZWAgdXB3YXJkcyB0aHJvdWdoIHRoZSBzY29wZSBoaWVyYXJjaHkgbm90aWZ5aW5nIHRoZVxuICAgICAgICogcmVnaXN0ZXJlZCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259IGxpc3RlbmVycy5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgZXZlbnQgbGlmZSBjeWNsZSBzdGFydHMgYXQgdGhlIHNjb3BlIG9uIHdoaWNoIGAkZW1pdGAgd2FzIGNhbGxlZC4gQWxsXG4gICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSBsaXN0ZW5pbmcgZm9yIGBuYW1lYCBldmVudCBvbiB0aGlzIHNjb3BlIGdldFxuICAgICAgICogbm90aWZpZWQuIEFmdGVyd2FyZHMsIHRoZSBldmVudCB0cmF2ZXJzZXMgdXB3YXJkcyB0b3dhcmQgdGhlIHJvb3Qgc2NvcGUgYW5kIGNhbGxzIGFsbFxuICAgICAgICogcmVnaXN0ZXJlZCBsaXN0ZW5lcnMgYWxvbmcgdGhlIHdheS4gVGhlIGV2ZW50IHdpbGwgc3RvcCBwcm9wYWdhdGluZyBpZiBvbmUgb2YgdGhlIGxpc3RlbmVyc1xuICAgICAgICogY2FuY2VscyBpdC5cbiAgICAgICAqXG4gICAgICAgKiBBbnkgZXhjZXB0aW9uIGVtaXR0ZWQgZnJvbSB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9uIGxpc3RlbmVyc30gd2lsbCBiZSBwYXNzZWRcbiAgICAgICAqIG9udG8gdGhlIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBFdmVudCBuYW1lIHRvIGVtaXQuXG4gICAgICAgKiBAcGFyYW0gey4uLip9IGFyZ3MgT3B0aW9uYWwgb25lIG9yIG1vcmUgYXJndW1lbnRzIHdoaWNoIHdpbGwgYmUgcGFzc2VkIG9udG8gdGhlIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgICAqIEByZXR1cm4ge09iamVjdH0gRXZlbnQgb2JqZWN0IChzZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufSkuXG4gICAgICAgKi9cbiAgICAgICRlbWl0OiBmdW5jdGlvbihuYW1lLCBhcmdzKSB7XG4gICAgICAgIHZhciBlbXB0eSA9IFtdLFxuICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnMsXG4gICAgICAgICAgICBzY29wZSA9IHRoaXMsXG4gICAgICAgICAgICBzdG9wUHJvcGFnYXRpb24gPSBmYWxzZSxcbiAgICAgICAgICAgIGV2ZW50ID0ge1xuICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICB0YXJnZXRTY29wZTogc2NvcGUsXG4gICAgICAgICAgICAgIHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7c3RvcFByb3BhZ2F0aW9uID0gdHJ1ZTt9LFxuICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRlZmF1bHRQcmV2ZW50ZWQ6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGlzdGVuZXJBcmdzID0gY29uY2F0KFtldmVudF0sIGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICBpLCBsZW5ndGg7XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgIG5hbWVkTGlzdGVuZXJzID0gc2NvcGUuJCRsaXN0ZW5lcnNbbmFtZV0gfHwgZW1wdHk7XG4gICAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gc2NvcGU7XG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gbmFtZWRMaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgLy8gaWYgbGlzdGVuZXJzIHdlcmUgZGVyZWdpc3RlcmVkLCBkZWZyYWdtZW50IHRoZSBhcnJheVxuICAgICAgICAgICAgaWYgKCFuYW1lZExpc3RlbmVyc1tpXSkge1xuICAgICAgICAgICAgICBuYW1lZExpc3RlbmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgICAgbGVuZ3RoLS07XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgLy9hbGxvdyBhbGwgbGlzdGVuZXJzIGF0dGFjaGVkIHRvIHRoZSBjdXJyZW50IHNjb3BlIHRvIHJ1blxuICAgICAgICAgICAgICBuYW1lZExpc3RlbmVyc1tpXS5hcHBseShudWxsLCBsaXN0ZW5lckFyZ3MpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy9pZiBhbnkgbGlzdGVuZXIgb24gdGhlIGN1cnJlbnQgc2NvcGUgc3RvcHMgcHJvcGFnYXRpb24sIHByZXZlbnQgYnViYmxpbmdcbiAgICAgICAgICBpZiAoc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvL3RyYXZlcnNlIHVwd2FyZHNcbiAgICAgICAgICBzY29wZSA9IHNjb3BlLiRwYXJlbnQ7XG4gICAgICAgIH0gd2hpbGUgKHNjb3BlKTtcblxuICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBudWxsO1xuXG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRicm9hZGNhc3RcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBEaXNwYXRjaGVzIGFuIGV2ZW50IGBuYW1lYCBkb3dud2FyZHMgdG8gYWxsIGNoaWxkIHNjb3BlcyAoYW5kIHRoZWlyIGNoaWxkcmVuKSBub3RpZnlpbmcgdGhlXG4gICAgICAgKiByZWdpc3RlcmVkIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn0gbGlzdGVuZXJzLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBldmVudCBsaWZlIGN5Y2xlIHN0YXJ0cyBhdCB0aGUgc2NvcGUgb24gd2hpY2ggYCRicm9hZGNhc3RgIHdhcyBjYWxsZWQuIEFsbFxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9uIGxpc3RlbmVyc30gbGlzdGVuaW5nIGZvciBgbmFtZWAgZXZlbnQgb24gdGhpcyBzY29wZSBnZXRcbiAgICAgICAqIG5vdGlmaWVkLiBBZnRlcndhcmRzLCB0aGUgZXZlbnQgcHJvcGFnYXRlcyB0byBhbGwgZGlyZWN0IGFuZCBpbmRpcmVjdCBzY29wZXMgb2YgdGhlIGN1cnJlbnRcbiAgICAgICAqIHNjb3BlIGFuZCBjYWxscyBhbGwgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMgYWxvbmcgdGhlIHdheS4gVGhlIGV2ZW50IGNhbm5vdCBiZSBjYW5jZWxlZC5cbiAgICAgICAqXG4gICAgICAgKiBBbnkgZXhjZXB0aW9uIGVtaXR0ZWQgZnJvbSB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9uIGxpc3RlbmVyc30gd2lsbCBiZSBwYXNzZWRcbiAgICAgICAqIG9udG8gdGhlIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBFdmVudCBuYW1lIHRvIGJyb2FkY2FzdC5cbiAgICAgICAqIEBwYXJhbSB7Li4uKn0gYXJncyBPcHRpb25hbCBvbmUgb3IgbW9yZSBhcmd1bWVudHMgd2hpY2ggd2lsbCBiZSBwYXNzZWQgb250byB0aGUgZXZlbnQgbGlzdGVuZXJzLlxuICAgICAgICogQHJldHVybiB7T2JqZWN0fSBFdmVudCBvYmplY3QsIHNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259XG4gICAgICAgKi9cbiAgICAgICRicm9hZGNhc3Q6IGZ1bmN0aW9uKG5hbWUsIGFyZ3MpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMsXG4gICAgICAgICAgICBjdXJyZW50ID0gdGFyZ2V0LFxuICAgICAgICAgICAgbmV4dCA9IHRhcmdldCxcbiAgICAgICAgICAgIGV2ZW50ID0ge1xuICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICB0YXJnZXRTY29wZTogdGFyZ2V0LFxuICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRlZmF1bHRQcmV2ZW50ZWQ6IGZhbHNlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIGlmICghdGFyZ2V0LiQkbGlzdGVuZXJDb3VudFtuYW1lXSkgcmV0dXJuIGV2ZW50O1xuXG4gICAgICAgIHZhciBsaXN0ZW5lckFyZ3MgPSBjb25jYXQoW2V2ZW50XSwgYXJndW1lbnRzLCAxKSxcbiAgICAgICAgICAgIGxpc3RlbmVycywgaSwgbGVuZ3RoO1xuXG4gICAgICAgIC8vZG93biB3aGlsZSB5b3UgY2FuLCB0aGVuIHVwIGFuZCBuZXh0IHNpYmxpbmcgb3IgdXAgYW5kIG5leHQgc2libGluZyB1bnRpbCBiYWNrIGF0IHJvb3RcbiAgICAgICAgd2hpbGUgKChjdXJyZW50ID0gbmV4dCkpIHtcbiAgICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBjdXJyZW50O1xuICAgICAgICAgIGxpc3RlbmVycyA9IGN1cnJlbnQuJCRsaXN0ZW5lcnNbbmFtZV0gfHwgW107XG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvLyBpZiBsaXN0ZW5lcnMgd2VyZSBkZXJlZ2lzdGVyZWQsIGRlZnJhZ21lbnQgdGhlIGFycmF5XG4gICAgICAgICAgICBpZiAoIWxpc3RlbmVyc1tpXSkge1xuICAgICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICBpLS07XG4gICAgICAgICAgICAgIGxlbmd0aC0tO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KG51bGwsIGxpc3RlbmVyQXJncyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEluc2FuaXR5IFdhcm5pbmc6IHNjb3BlIGRlcHRoLWZpcnN0IHRyYXZlcnNhbFxuICAgICAgICAgIC8vIHllcywgdGhpcyBjb2RlIGlzIGEgYml0IGNyYXp5LCBidXQgaXQgd29ya3MgYW5kIHdlIGhhdmUgdGVzdHMgdG8gcHJvdmUgaXQhXG4gICAgICAgICAgLy8gdGhpcyBwaWVjZSBzaG91bGQgYmUga2VwdCBpbiBzeW5jIHdpdGggdGhlIHRyYXZlcnNhbCBpbiAkZGlnZXN0XG4gICAgICAgICAgLy8gKHRob3VnaCBpdCBkaWZmZXJzIGR1ZSB0byBoYXZpbmcgdGhlIGV4dHJhIGNoZWNrIGZvciAkJGxpc3RlbmVyQ291bnQpXG4gICAgICAgICAgaWYgKCEobmV4dCA9ICgoY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0gJiYgY3VycmVudC4kJGNoaWxkSGVhZCkgfHxcbiAgICAgICAgICAgICAgKGN1cnJlbnQgIT09IHRhcmdldCAmJiBjdXJyZW50LiQkbmV4dFNpYmxpbmcpKSkpIHtcbiAgICAgICAgICAgIHdoaWxlIChjdXJyZW50ICE9PSB0YXJnZXQgJiYgIShuZXh0ID0gY3VycmVudC4kJG5leHRTaWJsaW5nKSkge1xuICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC4kcGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IG51bGw7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyICRyb290U2NvcGUgPSBuZXcgU2NvcGUoKTtcblxuICAgIC8vVGhlIGludGVybmFsIHF1ZXVlcy4gRXhwb3NlIHRoZW0gb24gdGhlICRyb290U2NvcGUgZm9yIGRlYnVnZ2luZy90ZXN0aW5nIHB1cnBvc2VzLlxuICAgIHZhciBhc3luY1F1ZXVlID0gJHJvb3RTY29wZS4kJGFzeW5jUXVldWUgPSBbXTtcbiAgICB2YXIgcG9zdERpZ2VzdFF1ZXVlID0gJHJvb3RTY29wZS4kJHBvc3REaWdlc3RRdWV1ZSA9IFtdO1xuICAgIHZhciBhcHBseUFzeW5jUXVldWUgPSAkcm9vdFNjb3BlLiQkYXBwbHlBc3luY1F1ZXVlID0gW107XG5cbiAgICByZXR1cm4gJHJvb3RTY29wZTtcblxuXG4gICAgZnVuY3Rpb24gYmVnaW5QaGFzZShwaGFzZSkge1xuICAgICAgaWYgKCRyb290U2NvcGUuJCRwaGFzZSkge1xuICAgICAgICB0aHJvdyAkcm9vdFNjb3BlTWluRXJyKCdpbnByb2cnLCAnezB9IGFscmVhZHkgaW4gcHJvZ3Jlc3MnLCAkcm9vdFNjb3BlLiQkcGhhc2UpO1xuICAgICAgfVxuXG4gICAgICAkcm9vdFNjb3BlLiQkcGhhc2UgPSBwaGFzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhclBoYXNlKCkge1xuICAgICAgJHJvb3RTY29wZS4kJHBoYXNlID0gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbmNyZW1lbnRXYXRjaGVyc0NvdW50KGN1cnJlbnQsIGNvdW50KSB7XG4gICAgICBkbyB7XG4gICAgICAgIGN1cnJlbnQuJCR3YXRjaGVyc0NvdW50ICs9IGNvdW50O1xuICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWNyZW1lbnRMaXN0ZW5lckNvdW50KGN1cnJlbnQsIGNvdW50LCBuYW1lKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdIC09IGNvdW50O1xuXG4gICAgICAgIGlmIChjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSA9PT0gMCkge1xuICAgICAgICAgIGRlbGV0ZSBjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBmdW5jdGlvbiB1c2VkIGFzIGFuIGluaXRpYWwgdmFsdWUgZm9yIHdhdGNoZXJzLlxuICAgICAqIGJlY2F1c2UgaXQncyB1bmlxdWUgd2UgY2FuIGVhc2lseSB0ZWxsIGl0IGFwYXJ0IGZyb20gb3RoZXIgdmFsdWVzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdFdhdGNoVmFsKCkge31cblxuICAgIGZ1bmN0aW9uIGZsdXNoQXBwbHlBc3luYygpIHtcbiAgICAgIHdoaWxlIChhcHBseUFzeW5jUXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXBwbHlBc3luY1F1ZXVlLnNoaWZ0KCkoKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhcHBseUFzeW5jSWQgPSBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjaGVkdWxlQXBwbHlBc3luYygpIHtcbiAgICAgIGlmIChhcHBseUFzeW5jSWQgPT09IG51bGwpIHtcbiAgICAgICAgYXBwbHlBc3luY0lkID0gJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoZmx1c2hBcHBseUFzeW5jKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XTtcbn1cblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFByaXZhdGUgc2VydmljZSB0byBzYW5pdGl6ZSB1cmlzIGZvciBsaW5rcyBhbmQgaW1hZ2VzLiBVc2VkIGJ5ICRjb21waWxlIGFuZCAkc2FuaXRpemUuXG4gKi9cbmZ1bmN0aW9uICQkU2FuaXRpemVVcmlQcm92aWRlcigpIHtcbiAgdmFyIGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gL15cXHMqKGh0dHBzP3xmdHB8bWFpbHRvfHRlbHxmaWxlKTovLFxuICAgIGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IC9eXFxzKigoaHR0cHM/fGZ0cHxmaWxlfGJsb2IpOnxkYXRhOmltYWdlXFwvKS87XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlXG4gICAqIHVybHMgZHVyaW5nIGFbaHJlZl0gc2FuaXRpemF0aW9uLlxuICAgKlxuICAgKiBUaGUgc2FuaXRpemF0aW9uIGlzIGEgc2VjdXJpdHkgbWVhc3VyZSBhaW1lZCBhdCBwcmV2ZW50IFhTUyBhdHRhY2tzIHZpYSBodG1sIGxpbmtzLlxuICAgKlxuICAgKiBBbnkgdXJsIGFib3V0IHRvIGJlIGFzc2lnbmVkIHRvIGFbaHJlZl0gdmlhIGRhdGEtYmluZGluZyBpcyBmaXJzdCBub3JtYWxpemVkIGFuZCB0dXJuZWQgaW50b1xuICAgKiBhbiBhYnNvbHV0ZSB1cmwuIEFmdGVyd2FyZHMsIHRoZSB1cmwgaXMgbWF0Y2hlZCBhZ2FpbnN0IHRoZSBgYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3RgXG4gICAqIHJlZ3VsYXIgZXhwcmVzc2lvbi4gSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIG9yaWdpbmFsIHVybCBpcyB3cml0dGVuIGludG8gdGhlIGRvbS4gT3RoZXJ3aXNlLFxuICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7UmVnRXhwPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC5cbiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvclxuICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuXG4gICAqL1xuICB0aGlzLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gZnVuY3Rpb24ocmVnZXhwKSB7XG4gICAgaWYgKGlzRGVmaW5lZChyZWdleHApKSB7XG4gICAgICBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IHJlZ2V4cDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3Q7XG4gIH07XG5cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHJpZXZlcyBvciBvdmVycmlkZXMgdGhlIGRlZmF1bHQgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgdXNlZCBmb3Igd2hpdGVsaXN0aW5nIG9mIHNhZmVcbiAgICogdXJscyBkdXJpbmcgaW1nW3NyY10gc2FuaXRpemF0aW9uLlxuICAgKlxuICAgKiBUaGUgc2FuaXRpemF0aW9uIGlzIGEgc2VjdXJpdHkgbWVhc3VyZSBhaW1lZCBhdCBwcmV2ZW50IFhTUyBhdHRhY2tzIHZpYSBodG1sIGxpbmtzLlxuICAgKlxuICAgKiBBbnkgdXJsIGFib3V0IHRvIGJlIGFzc2lnbmVkIHRvIGltZ1tzcmNdIHZpYSBkYXRhLWJpbmRpbmcgaXMgZmlyc3Qgbm9ybWFsaXplZCBhbmQgdHVybmVkIGludG9cbiAgICogYW4gYWJzb2x1dGUgdXJsLiBBZnRlcndhcmRzLCB0aGUgdXJsIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgYGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdGBcbiAgICogcmVndWxhciBleHByZXNzaW9uLiBJZiBhIG1hdGNoIGlzIGZvdW5kLCB0aGUgb3JpZ2luYWwgdXJsIGlzIHdyaXR0ZW4gaW50byB0aGUgZG9tLiBPdGhlcndpc2UsXG4gICAqIHRoZSBhYnNvbHV0ZSB1cmwgaXMgcHJlZml4ZWQgd2l0aCBgJ3Vuc2FmZTonYCBzdHJpbmcgYW5kIG9ubHkgdGhlbiBpcyBpdCB3cml0dGVuIGludG8gdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWdFeHA9fSByZWdleHAgTmV3IHJlZ2V4cCB0byB3aGl0ZWxpc3QgdXJscyB3aXRoLlxuICAgKiBAcmV0dXJucyB7UmVnRXhwfG5nLiRjb21waWxlUHJvdmlkZXJ9IEN1cnJlbnQgUmVnRXhwIGlmIGNhbGxlZCB3aXRob3V0IHZhbHVlIG9yIHNlbGYgZm9yXG4gICAqICAgIGNoYWluaW5nIG90aGVyd2lzZS5cbiAgICovXG4gIHRoaXMuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gZnVuY3Rpb24ocmVnZXhwKSB7XG4gICAgaWYgKGlzRGVmaW5lZChyZWdleHApKSB7XG4gICAgICBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSByZWdleHA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdDtcbiAgfTtcblxuICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gc2FuaXRpemVVcmkodXJpLCBpc0ltYWdlKSB7XG4gICAgICB2YXIgcmVnZXggPSBpc0ltYWdlID8gaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0IDogYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3Q7XG4gICAgICB2YXIgbm9ybWFsaXplZFZhbDtcbiAgICAgIG5vcm1hbGl6ZWRWYWwgPSB1cmxSZXNvbHZlKHVyaSkuaHJlZjtcbiAgICAgIGlmIChub3JtYWxpemVkVmFsICE9PSAnJyAmJiAhbm9ybWFsaXplZFZhbC5tYXRjaChyZWdleCkpIHtcbiAgICAgICAgcmV0dXJuICd1bnNhZmU6JyArIG5vcm1hbGl6ZWRWYWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXJpO1xuICAgIH07XG4gIH07XG59XG5cbi8qICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbiAqICAgICBBbnkgY29tbWl0cyB0byB0aGlzIGZpbGUgc2hvdWxkIGJlIHJldmlld2VkIHdpdGggc2VjdXJpdHkgaW4gbWluZC4gICpcbiAqICAgQ2hhbmdlcyB0byB0aGlzIGZpbGUgY2FuIHBvdGVudGlhbGx5IGNyZWF0ZSBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMuICpcbiAqICAgICAgICAgIEFuIGFwcHJvdmFsIGZyb20gMiBDb3JlIG1lbWJlcnMgd2l0aCBoaXN0b3J5IG9mIG1vZGlmeWluZyAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgZmlsZSBpcyByZXF1aXJlZC4gICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICBEb2VzIHRoZSBjaGFuZ2Ugc29tZWhvdyBhbGxvdyBmb3IgYXJiaXRyYXJ5IGphdmFzY3JpcHQgdG8gYmUgZXhlY3V0ZWQ/ICpcbiAqICAgIE9yIGFsbG93cyBmb3Igc29tZW9uZSB0byBjaGFuZ2UgdGhlIHByb3RvdHlwZSBvZiBidWlsdC1pbiBvYmplY3RzPyAgICpcbiAqICAgICBPciBnaXZlcyB1bmRlc2lyZWQgYWNjZXNzIHRvIHZhcmlhYmxlcyBsaWtlcyBkb2N1bWVudCBvciB3aW5kb3c/ICAgICpcbiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICovXG5cbnZhciAkc2NlTWluRXJyID0gbWluRXJyKCckc2NlJyk7XG5cbnZhciBTQ0VfQ09OVEVYVFMgPSB7XG4gIEhUTUw6ICdodG1sJyxcbiAgQ1NTOiAnY3NzJyxcbiAgVVJMOiAndXJsJyxcbiAgLy8gUkVTT1VSQ0VfVVJMIGlzIGEgc3VidHlwZSBvZiBVUkwgdXNlZCBpbiBjb250ZXh0cyB3aGVyZSBhIHByaXZpbGVnZWQgcmVzb3VyY2UgaXMgc291cmNlZCBmcm9tIGFcbiAgLy8gdXJsLiAgKGUuZy4gbmctaW5jbHVkZSwgc2NyaXB0IHNyYywgdGVtcGxhdGVVcmwpXG4gIFJFU09VUkNFX1VSTDogJ3Jlc291cmNlVXJsJyxcbiAgSlM6ICdqcydcbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbnMgZm9sbG93LlxuXG5mdW5jdGlvbiBhZGp1c3RNYXRjaGVyKG1hdGNoZXIpIHtcbiAgaWYgKG1hdGNoZXIgPT09ICdzZWxmJykge1xuICAgIHJldHVybiBtYXRjaGVyO1xuICB9IGVsc2UgaWYgKGlzU3RyaW5nKG1hdGNoZXIpKSB7XG4gICAgLy8gU3RyaW5ncyBtYXRjaCBleGFjdGx5IGV4Y2VwdCBmb3IgMiB3aWxkY2FyZHMgLSAnKicgYW5kICcqKicuXG4gICAgLy8gJyonIG1hdGNoZXMgYW55IGNoYXJhY3RlciBleGNlcHQgdGhvc2UgZnJvbSB0aGUgc2V0ICc6Ly4/JicuXG4gICAgLy8gJyoqJyBtYXRjaGVzIGFueSBjaGFyYWN0ZXIgKGxpa2UgLiogaW4gYSBSZWdFeHApLlxuICAgIC8vIE1vcmUgdGhhbiAyIConcyByYWlzZXMgYW4gZXJyb3IgYXMgaXQncyBpbGwgZGVmaW5lZC5cbiAgICBpZiAobWF0Y2hlci5pbmRleE9mKCcqKionKSA+IC0xKSB7XG4gICAgICB0aHJvdyAkc2NlTWluRXJyKCdpd2NhcmQnLFxuICAgICAgICAgICdJbGxlZ2FsIHNlcXVlbmNlICoqKiBpbiBzdHJpbmcgbWF0Y2hlci4gIFN0cmluZzogezB9JywgbWF0Y2hlcik7XG4gICAgfVxuICAgIG1hdGNoZXIgPSBlc2NhcGVGb3JSZWdleHAobWF0Y2hlcikuXG4gICAgICAgICAgICAgICAgICByZXBsYWNlKCdcXFxcKlxcXFwqJywgJy4qJykuXG4gICAgICAgICAgICAgICAgICByZXBsYWNlKCdcXFxcKicsICdbXjovLj8mO10qJyk7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgbWF0Y2hlciArICckJyk7XG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAobWF0Y2hlcikpIHtcbiAgICAvLyBUaGUgb25seSBvdGhlciB0eXBlIG9mIG1hdGNoZXIgYWxsb3dlZCBpcyBhIFJlZ2V4cC5cbiAgICAvLyBNYXRjaCBlbnRpcmUgVVJMIC8gZGlzYWxsb3cgcGFydGlhbCBtYXRjaGVzLlxuICAgIC8vIEZsYWdzIGFyZSByZXNldCAoaS5lLiBubyBnbG9iYWwsIGlnbm9yZUNhc2Ugb3IgbXVsdGlsaW5lKVxuICAgIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIG1hdGNoZXIuc291cmNlICsgJyQnKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyAkc2NlTWluRXJyKCdpbWF0Y2hlcicsXG4gICAgICAgICdNYXRjaGVycyBtYXkgb25seSBiZSBcInNlbGZcIiwgc3RyaW5nIHBhdHRlcm5zIG9yIFJlZ0V4cCBvYmplY3RzJyk7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBhZGp1c3RNYXRjaGVycyhtYXRjaGVycykge1xuICB2YXIgYWRqdXN0ZWRNYXRjaGVycyA9IFtdO1xuICBpZiAoaXNEZWZpbmVkKG1hdGNoZXJzKSkge1xuICAgIGZvckVhY2gobWF0Y2hlcnMsIGZ1bmN0aW9uKG1hdGNoZXIpIHtcbiAgICAgIGFkanVzdGVkTWF0Y2hlcnMucHVzaChhZGp1c3RNYXRjaGVyKG1hdGNoZXIpKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gYWRqdXN0ZWRNYXRjaGVycztcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkc2NlRGVsZWdhdGVcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogYCRzY2VEZWxlZ2F0ZWAgaXMgYSBzZXJ2aWNlIHRoYXQgaXMgdXNlZCBieSB0aGUgYCRzY2VgIHNlcnZpY2UgdG8gcHJvdmlkZSB7QGxpbmsgbmcuJHNjZSBTdHJpY3RcbiAqIENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSl9IHNlcnZpY2VzIHRvIEFuZ3VsYXJKUy5cbiAqXG4gKiBUeXBpY2FsbHksIHlvdSB3b3VsZCBjb25maWd1cmUgb3Igb3ZlcnJpZGUgdGhlIHtAbGluayBuZy4kc2NlRGVsZWdhdGUgJHNjZURlbGVnYXRlfSBpbnN0ZWFkIG9mXG4gKiB0aGUgYCRzY2VgIHNlcnZpY2UgdG8gY3VzdG9taXplIHRoZSB3YXkgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgd29ya3MgaW4gQW5ndWxhckpTLiAgVGhpcyBpc1xuICogYmVjYXVzZSwgd2hpbGUgdGhlIGAkc2NlYCBwcm92aWRlcyBudW1lcm91cyBzaG9ydGhhbmQgbWV0aG9kcywgZXRjLiwgeW91IHJlYWxseSBvbmx5IG5lZWQgdG9cbiAqIG92ZXJyaWRlIDMgY29yZSBmdW5jdGlvbnMgKGB0cnVzdEFzYCwgYGdldFRydXN0ZWRgIGFuZCBgdmFsdWVPZmApIHRvIHJlcGxhY2UgdGhlIHdheSB0aGluZ3NcbiAqIHdvcmsgYmVjYXVzZSBgJHNjZWAgZGVsZWdhdGVzIHRvIGAkc2NlRGVsZWdhdGVgIGZvciB0aGVzZSBvcGVyYXRpb25zLlxuICpcbiAqIFJlZmVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciAkc2NlRGVsZWdhdGVQcm92aWRlcn0gdG8gY29uZmlndXJlIHRoaXMgc2VydmljZS5cbiAqXG4gKiBUaGUgZGVmYXVsdCBpbnN0YW5jZSBvZiBgJHNjZURlbGVnYXRlYCBzaG91bGQgd29yayBvdXQgb2YgdGhlIGJveCB3aXRoIGxpdHRsZSBwYWluLiAgV2hpbGUgeW91XG4gKiBjYW4gb3ZlcnJpZGUgaXQgY29tcGxldGVseSB0byBjaGFuZ2UgdGhlIGJlaGF2aW9yIG9mIGAkc2NlYCwgdGhlIGNvbW1vbiBjYXNlIHdvdWxkXG4gKiBpbnZvbHZlIGNvbmZpZ3VyaW5nIHRoZSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIgJHNjZURlbGVnYXRlUHJvdmlkZXJ9IGluc3RlYWQgYnkgc2V0dGluZ1xuICogeW91ciBvd24gd2hpdGVsaXN0cyBhbmQgYmxhY2tsaXN0cyBmb3IgdHJ1c3RpbmcgVVJMcyB1c2VkIGZvciBsb2FkaW5nIEFuZ3VsYXJKUyByZXNvdXJjZXMgc3VjaCBhc1xuICogdGVtcGxhdGVzLiAgUmVmZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0XG4gKiAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybFdoaXRlbGlzdH0gYW5kIHtAbGlua1xuICogbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3QgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxCbGFja2xpc3R9XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRzY2VEZWxlZ2F0ZVByb3ZpZGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBUaGUgYCRzY2VEZWxlZ2F0ZVByb3ZpZGVyYCBwcm92aWRlciBhbGxvd3MgZGV2ZWxvcGVycyB0byBjb25maWd1cmUgdGhlIHtAbGluayBuZy4kc2NlRGVsZWdhdGVcbiAqICRzY2VEZWxlZ2F0ZX0gc2VydmljZS4gIFRoaXMgYWxsb3dzIG9uZSB0byBnZXQvc2V0IHRoZSB3aGl0ZWxpc3RzIGFuZCBibGFja2xpc3RzIHVzZWQgdG8gZW5zdXJlXG4gKiB0aGF0IHRoZSBVUkxzIHVzZWQgZm9yIHNvdXJjaW5nIEFuZ3VsYXIgdGVtcGxhdGVzIGFyZSBzYWZlLiAgUmVmZXIge0BsaW5rXG4gKiBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdCAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybFdoaXRlbGlzdH0gYW5kXG4gKiB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3QgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxCbGFja2xpc3R9XG4gKlxuICogRm9yIHRoZSBnZW5lcmFsIGRldGFpbHMgYWJvdXQgdGhpcyBzZXJ2aWNlIGluIEFuZ3VsYXIsIHJlYWQgdGhlIG1haW4gcGFnZSBmb3Ige0BsaW5rIG5nLiRzY2VcbiAqIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpfS5cbiAqXG4gKiAqKkV4YW1wbGUqKjogIENvbnNpZGVyIHRoZSBmb2xsb3dpbmcgY2FzZS4gPGEgbmFtZT1cImV4YW1wbGVcIj48L2E+XG4gKlxuICogLSB5b3VyIGFwcCBpcyBob3N0ZWQgYXQgdXJsIGBodHRwOi8vbXlhcHAuZXhhbXBsZS5jb20vYFxuICogLSBidXQgc29tZSBvZiB5b3VyIHRlbXBsYXRlcyBhcmUgaG9zdGVkIG9uIG90aGVyIGRvbWFpbnMgeW91IGNvbnRyb2wgc3VjaCBhc1xuICogICBgaHR0cDovL3NydjAxLmFzc2V0cy5leGFtcGxlLmNvbS9gLMKgIGBodHRwOi8vc3J2MDIuYXNzZXRzLmV4YW1wbGUuY29tL2AsIGV0Yy5cbiAqIC0gYW5kIHlvdSBoYXZlIGFuIG9wZW4gcmVkaXJlY3QgYXQgYGh0dHA6Ly9teWFwcC5leGFtcGxlLmNvbS9jbGlja1RocnU/Li4uYC5cbiAqXG4gKiBIZXJlIGlzIHdoYXQgYSBzZWN1cmUgY29uZmlndXJhdGlvbiBmb3IgdGhpcyBzY2VuYXJpbyBtaWdodCBsb29rIGxpa2U6XG4gKlxuICogYGBgXG4gKiAgYW5ndWxhci5tb2R1bGUoJ215QXBwJywgW10pLmNvbmZpZyhmdW5jdGlvbigkc2NlRGVsZWdhdGVQcm92aWRlcikge1xuICogICAgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxXaGl0ZWxpc3QoW1xuICogICAgICAvLyBBbGxvdyBzYW1lIG9yaWdpbiByZXNvdXJjZSBsb2Fkcy5cbiAqICAgICAgJ3NlbGYnLFxuICogICAgICAvLyBBbGxvdyBsb2FkaW5nIGZyb20gb3VyIGFzc2V0cyBkb21haW4uICBOb3RpY2UgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiAqIGFuZCAqKi5cbiAqICAgICAgJ2h0dHA6Ly9zcnYqLmFzc2V0cy5leGFtcGxlLmNvbS8qKidcbiAqICAgIF0pO1xuICpcbiAqICAgIC8vIFRoZSBibGFja2xpc3Qgb3ZlcnJpZGVzIHRoZSB3aGl0ZWxpc3Qgc28gdGhlIG9wZW4gcmVkaXJlY3QgaGVyZSBpcyBibG9ja2VkLlxuICogICAgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxCbGFja2xpc3QoW1xuICogICAgICAnaHR0cDovL215YXBwLmV4YW1wbGUuY29tL2NsaWNrVGhydSoqJ1xuICogICAgXSk7XG4gKiAgfSk7XG4gKiBgYGBcbiAqL1xuXG5mdW5jdGlvbiAkU2NlRGVsZWdhdGVQcm92aWRlcigpIHtcbiAgdGhpcy5TQ0VfQ09OVEVYVFMgPSBTQ0VfQ09OVEVYVFM7XG5cbiAgLy8gUmVzb3VyY2UgVVJMcyBjYW4gYWxzbyBiZSB0cnVzdGVkIGJ5IHBvbGljeS5cbiAgdmFyIHJlc291cmNlVXJsV2hpdGVsaXN0ID0gWydzZWxmJ10sXG4gICAgICByZXNvdXJjZVVybEJsYWNrbGlzdCA9IFtdO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXk9fSB3aGl0ZWxpc3QgV2hlbiBwcm92aWRlZCwgcmVwbGFjZXMgdGhlIHJlc291cmNlVXJsV2hpdGVsaXN0IHdpdGggdGhlIHZhbHVlXG4gICAqICAgICBwcm92aWRlZC4gIFRoaXMgbXVzdCBiZSBhbiBhcnJheSBvciBudWxsLiAgQSBzbmFwc2hvdCBvZiB0aGlzIGFycmF5IGlzIHVzZWQgc28gZnVydGhlclxuICAgKiAgICAgY2hhbmdlcyB0byB0aGUgYXJyYXkgYXJlIGlnbm9yZWQuXG4gICAqXG4gICAqICAgICBGb2xsb3cge0BsaW5rIG5nLiRzY2UjcmVzb3VyY2VVcmxQYXR0ZXJuSXRlbSB0aGlzIGxpbmt9IGZvciBhIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtc1xuICAgKiAgICAgYWxsb3dlZCBpbiB0aGlzIGFycmF5LlxuICAgKlxuICAgKiAgICAgTm90ZTogKiphbiBlbXB0eSB3aGl0ZWxpc3QgYXJyYXkgd2lsbCBibG9jayBhbGwgVVJMcyoqIVxuICAgKlxuICAgKiBAcmV0dXJuIHtBcnJheX0gdGhlIGN1cnJlbnRseSBzZXQgd2hpdGVsaXN0IGFycmF5LlxuICAgKlxuICAgKiBUaGUgKipkZWZhdWx0IHZhbHVlKiogd2hlbiBubyB3aGl0ZWxpc3QgaGFzIGJlZW4gZXhwbGljaXRseSBzZXQgaXMgYFsnc2VsZiddYCBhbGxvd2luZyBvbmx5XG4gICAqIHNhbWUgb3JpZ2luIHJlc291cmNlIHJlcXVlc3RzLlxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cy9HZXRzIHRoZSB3aGl0ZWxpc3Qgb2YgdHJ1c3RlZCByZXNvdXJjZSBVUkxzLlxuICAgKi9cbiAgdGhpcy5yZXNvdXJjZVVybFdoaXRlbGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJlc291cmNlVXJsV2hpdGVsaXN0ID0gYWRqdXN0TWF0Y2hlcnModmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzb3VyY2VVcmxXaGl0ZWxpc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3RcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheT19IGJsYWNrbGlzdCBXaGVuIHByb3ZpZGVkLCByZXBsYWNlcyB0aGUgcmVzb3VyY2VVcmxCbGFja2xpc3Qgd2l0aCB0aGUgdmFsdWVcbiAgICogICAgIHByb3ZpZGVkLiAgVGhpcyBtdXN0IGJlIGFuIGFycmF5IG9yIG51bGwuICBBIHNuYXBzaG90IG9mIHRoaXMgYXJyYXkgaXMgdXNlZCBzbyBmdXJ0aGVyXG4gICAqICAgICBjaGFuZ2VzIHRvIHRoZSBhcnJheSBhcmUgaWdub3JlZC5cbiAgICpcbiAgICogICAgIEZvbGxvdyB7QGxpbmsgbmcuJHNjZSNyZXNvdXJjZVVybFBhdHRlcm5JdGVtIHRoaXMgbGlua30gZm9yIGEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW1zXG4gICAqICAgICBhbGxvd2VkIGluIHRoaXMgYXJyYXkuXG4gICAqXG4gICAqICAgICBUaGUgdHlwaWNhbCB1c2FnZSBmb3IgdGhlIGJsYWNrbGlzdCBpcyB0byAqKmJsb2NrXG4gICAqICAgICBbb3BlbiByZWRpcmVjdHNdKGh0dHA6Ly9jd2UubWl0cmUub3JnL2RhdGEvZGVmaW5pdGlvbnMvNjAxLmh0bWwpKiogc2VydmVkIGJ5IHlvdXIgZG9tYWluIGFzXG4gICAqICAgICB0aGVzZSB3b3VsZCBvdGhlcndpc2UgYmUgdHJ1c3RlZCBidXQgYWN0dWFsbHkgcmV0dXJuIGNvbnRlbnQgZnJvbSB0aGUgcmVkaXJlY3RlZCBkb21haW4uXG4gICAqXG4gICAqICAgICBGaW5hbGx5LCAqKnRoZSBibGFja2xpc3Qgb3ZlcnJpZGVzIHRoZSB3aGl0ZWxpc3QqKiBhbmQgaGFzIHRoZSBmaW5hbCBzYXkuXG4gICAqXG4gICAqIEByZXR1cm4ge0FycmF5fSB0aGUgY3VycmVudGx5IHNldCBibGFja2xpc3QgYXJyYXkuXG4gICAqXG4gICAqIFRoZSAqKmRlZmF1bHQgdmFsdWUqKiB3aGVuIG5vIHdoaXRlbGlzdCBoYXMgYmVlbiBleHBsaWNpdGx5IHNldCBpcyB0aGUgZW1wdHkgYXJyYXkgKGkuZS4gdGhlcmVcbiAgICogaXMgbm8gYmxhY2tsaXN0LilcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMvR2V0cyB0aGUgYmxhY2tsaXN0IG9mIHRydXN0ZWQgcmVzb3VyY2UgVVJMcy5cbiAgICovXG5cbiAgdGhpcy5yZXNvdXJjZVVybEJsYWNrbGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJlc291cmNlVXJsQmxhY2tsaXN0ID0gYWRqdXN0TWF0Y2hlcnModmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzb3VyY2VVcmxCbGFja2xpc3Q7XG4gIH07XG5cbiAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCBmdW5jdGlvbigkaW5qZWN0b3IpIHtcblxuICAgIHZhciBodG1sU2FuaXRpemVyID0gZnVuY3Rpb24gaHRtbFNhbml0aXplcihodG1sKSB7XG4gICAgICB0aHJvdyAkc2NlTWluRXJyKCd1bnNhZmUnLCAnQXR0ZW1wdGluZyB0byB1c2UgYW4gdW5zYWZlIHZhbHVlIGluIGEgc2FmZSBjb250ZXh0LicpO1xuICAgIH07XG5cbiAgICBpZiAoJGluamVjdG9yLmhhcygnJHNhbml0aXplJykpIHtcbiAgICAgIGh0bWxTYW5pdGl6ZXIgPSAkaW5qZWN0b3IuZ2V0KCckc2FuaXRpemUnKTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIG1hdGNoVXJsKG1hdGNoZXIsIHBhcnNlZFVybCkge1xuICAgICAgaWYgKG1hdGNoZXIgPT09ICdzZWxmJykge1xuICAgICAgICByZXR1cm4gdXJsSXNTYW1lT3JpZ2luKHBhcnNlZFVybCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWZpbml0ZWx5IGEgcmVnZXguICBTZWUgYWRqdXN0TWF0Y2hlcnMoKVxuICAgICAgICByZXR1cm4gISFtYXRjaGVyLmV4ZWMocGFyc2VkVXJsLmhyZWYpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzUmVzb3VyY2VVcmxBbGxvd2VkQnlQb2xpY3kodXJsKSB7XG4gICAgICB2YXIgcGFyc2VkVXJsID0gdXJsUmVzb2x2ZSh1cmwudG9TdHJpbmcoKSk7XG4gICAgICB2YXIgaSwgbiwgYWxsb3dlZCA9IGZhbHNlO1xuICAgICAgLy8gRW5zdXJlIHRoYXQgYXQgbGVhc3Qgb25lIGl0ZW0gZnJvbSB0aGUgd2hpdGVsaXN0IGFsbG93cyB0aGlzIHVybC5cbiAgICAgIGZvciAoaSA9IDAsIG4gPSByZXNvdXJjZVVybFdoaXRlbGlzdC5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgaWYgKG1hdGNoVXJsKHJlc291cmNlVXJsV2hpdGVsaXN0W2ldLCBwYXJzZWRVcmwpKSB7XG4gICAgICAgICAgYWxsb3dlZCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChhbGxvd2VkKSB7XG4gICAgICAgIC8vIEVuc3VyZSB0aGF0IG5vIGl0ZW0gZnJvbSB0aGUgYmxhY2tsaXN0IGJsb2NrZWQgdGhpcyB1cmwuXG4gICAgICAgIGZvciAoaSA9IDAsIG4gPSByZXNvdXJjZVVybEJsYWNrbGlzdC5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICBpZiAobWF0Y2hVcmwocmVzb3VyY2VVcmxCbGFja2xpc3RbaV0sIHBhcnNlZFVybCkpIHtcbiAgICAgICAgICAgIGFsbG93ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFsbG93ZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVIb2xkZXJUeXBlKEJhc2UpIHtcbiAgICAgIHZhciBob2xkZXJUeXBlID0gZnVuY3Rpb24gVHJ1c3RlZFZhbHVlSG9sZGVyVHlwZSh0cnVzdGVkVmFsdWUpIHtcbiAgICAgICAgdGhpcy4kJHVud3JhcFRydXN0ZWRWYWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0cnVzdGVkVmFsdWU7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgICAgaWYgKEJhc2UpIHtcbiAgICAgICAgaG9sZGVyVHlwZS5wcm90b3R5cGUgPSBuZXcgQmFzZSgpO1xuICAgICAgfVxuICAgICAgaG9sZGVyVHlwZS5wcm90b3R5cGUudmFsdWVPZiA9IGZ1bmN0aW9uIHNjZVZhbHVlT2YoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiQkdW53cmFwVHJ1c3RlZFZhbHVlKCk7XG4gICAgICB9O1xuICAgICAgaG9sZGVyVHlwZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiBzY2VUb1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJCR1bndyYXBUcnVzdGVkVmFsdWUoKS50b1N0cmluZygpO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBob2xkZXJUeXBlO1xuICAgIH1cblxuICAgIHZhciB0cnVzdGVkVmFsdWVIb2xkZXJCYXNlID0gZ2VuZXJhdGVIb2xkZXJUeXBlKCksXG4gICAgICAgIGJ5VHlwZSA9IHt9O1xuXG4gICAgYnlUeXBlW1NDRV9DT05URVhUUy5IVE1MXSA9IGdlbmVyYXRlSG9sZGVyVHlwZSh0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKTtcbiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLkNTU10gPSBnZW5lcmF0ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSk7XG4gICAgYnlUeXBlW1NDRV9DT05URVhUUy5VUkxdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpO1xuICAgIGJ5VHlwZVtTQ0VfQ09OVEVYVFMuSlNdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpO1xuICAgIGJ5VHlwZVtTQ0VfQ09OVEVYVFMuUkVTT1VSQ0VfVVJMXSA9IGdlbmVyYXRlSG9sZGVyVHlwZShieVR5cGVbU0NFX0NPTlRFWFRTLlVSTF0pO1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2VEZWxlZ2F0ZSN0cnVzdEFzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGlzIHRydXN0ZWQgYnkgYW5ndWxhciBmb3IgdXNlIGluIHNwZWNpZmllZCBzdHJpY3RcbiAgICAgKiBjb250ZXh0dWFsIGVzY2FwaW5nIGNvbnRleHRzIChzdWNoIGFzIG5nLWJpbmQtaHRtbCwgbmctaW5jbHVkZSwgYW55IHNyY1xuICAgICAqIGF0dHJpYnV0ZSBpbnRlcnBvbGF0aW9uLCBhbnkgZG9tIGV2ZW50IGJpbmRpbmcgYXR0cmlidXRlIGludGVycG9sYXRpb25cbiAgICAgKiBzdWNoIGFzIGZvciBvbmNsaWNrLCAgZXRjLikgdGhhdCB1c2VzIHRoZSBwcm92aWRlZCB2YWx1ZS5cbiAgICAgKiBTZWUge0BsaW5rIG5nLiRzY2UgJHNjZX0gZm9yIGVuYWJsaW5nIHN0cmljdCBjb250ZXh0dWFsIGVzY2FwaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGtpbmQgb2YgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHNhZmUgZm9yIHVzZS4gIGUuZy4gdXJsLFxuICAgICAqICAgcmVzb3VyY2VVcmwsIGh0bWwsIGpzIGFuZCBjc3MuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdGhhdCB0aGF0IHNob3VsZCBiZSBjb25zaWRlcmVkIHRydXN0ZWQvc2FmZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gQSB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIHRvIHN0YW5kIGluIGZvciB0aGUgcHJvdmlkZWQgYHZhbHVlYCBpbiBwbGFjZXNcbiAgICAgKiB3aGVyZSBBbmd1bGFyIGV4cGVjdHMgYSAkc2NlLnRydXN0QXMoKSByZXR1cm4gdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJ1c3RBcyh0eXBlLCB0cnVzdGVkVmFsdWUpIHtcbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IChieVR5cGUuaGFzT3duUHJvcGVydHkodHlwZSkgPyBieVR5cGVbdHlwZV0gOiBudWxsKTtcbiAgICAgIGlmICghQ29uc3RydWN0b3IpIHtcbiAgICAgICAgdGhyb3cgJHNjZU1pbkVycignaWNvbnRleHQnLFxuICAgICAgICAgICAgJ0F0dGVtcHRlZCB0byB0cnVzdCBhIHZhbHVlIGluIGludmFsaWQgY29udGV4dC4gQ29udGV4dDogezB9OyBWYWx1ZTogezF9JyxcbiAgICAgICAgICAgIHR5cGUsIHRydXN0ZWRWYWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAodHJ1c3RlZFZhbHVlID09PSBudWxsIHx8IGlzVW5kZWZpbmVkKHRydXN0ZWRWYWx1ZSkgfHwgdHJ1c3RlZFZhbHVlID09PSAnJykge1xuICAgICAgICByZXR1cm4gdHJ1c3RlZFZhbHVlO1xuICAgICAgfVxuICAgICAgLy8gQWxsIHRoZSBjdXJyZW50IGNvbnRleHRzIGluIFNDRV9DT05URVhUUyBoYXBwZW4gdG8gYmUgc3RyaW5ncy4gIEluIG9yZGVyIHRvIGF2b2lkIHRydXN0aW5nXG4gICAgICAvLyBtdXRhYmxlIG9iamVjdHMsIHdlIGVuc3VyZSBoZXJlIHRoYXQgdGhlIHZhbHVlIHBhc3NlZCBpbiBpcyBhY3R1YWxseSBhIHN0cmluZy5cbiAgICAgIGlmICh0eXBlb2YgdHJ1c3RlZFZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpdHlwZScsXG4gICAgICAgICAgICAnQXR0ZW1wdGVkIHRvIHRydXN0IGEgbm9uLXN0cmluZyB2YWx1ZSBpbiBhIGNvbnRlbnQgcmVxdWlyaW5nIGEgc3RyaW5nOiBDb250ZXh0OiB7MH0nLFxuICAgICAgICAgICAgdHlwZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRydXN0ZWRWYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2VEZWxlZ2F0ZSN2YWx1ZU9mXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBJZiB0aGUgcGFzc2VkIHBhcmFtZXRlciBoYWQgYmVlbiByZXR1cm5lZCBieSBhIHByaW9yIGNhbGwgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzXG4gICAgICogYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0sIHJldHVybnMgdGhlIHZhbHVlIHRoYXQgaGFkIGJlZW4gcGFzc2VkIHRvIHtAbGlua1xuICAgICAqIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LlxuICAgICAqXG4gICAgICogSWYgdGhlIHBhc3NlZCBwYXJhbWV0ZXIgaXMgbm90IGEgdmFsdWUgdGhhdCBoYWQgYmVlbiByZXR1cm5lZCBieSB7QGxpbmtcbiAgICAgKiBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSwgcmV0dXJucyBpdCBhcy1pcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHJlc3VsdCBvZiBhIHByaW9yIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXNgfVxuICAgICAqICAgICAgY2FsbCBvciBhbnl0aGluZyBlbHNlLlxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgYHZhbHVlYCB0aGF0IHdhcyBvcmlnaW5hbGx5IHByb3ZpZGVkIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBc1xuICAgICAqICAgICBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSBpZiBgdmFsdWVgIGlzIHRoZSByZXN1bHQgb2Ygc3VjaCBhIGNhbGwuICBPdGhlcndpc2UsIHJldHVybnNcbiAgICAgKiAgICAgYHZhbHVlYCB1bmNoYW5nZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVPZihtYXliZVRydXN0ZWQpIHtcbiAgICAgIGlmIChtYXliZVRydXN0ZWQgaW5zdGFuY2VvZiB0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKSB7XG4gICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBUYWtlcyB0aGUgcmVzdWx0IG9mIGEge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9IGNhbGwgYW5kXG4gICAgICogcmV0dXJucyB0aGUgb3JpZ2luYWxseSBzdXBwbGllZCB2YWx1ZSBpZiB0aGUgcXVlcmllZCBjb250ZXh0IHR5cGUgaXMgYSBzdXBlcnR5cGUgb2YgdGhlXG4gICAgICogY3JlYXRlZCB0eXBlLiAgSWYgdGhpcyBjb25kaXRpb24gaXNuJ3Qgc2F0aXNmaWVkLCB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGtpbmQgb2YgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHRvIGJlIHVzZWQuXG4gICAgICogQHBhcmFtIHsqfSBtYXliZVRydXN0ZWQgVGhlIHJlc3VsdCBvZiBhIHByaW9yIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBc1xuICAgICAqICAgICBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSBjYWxsLlxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgdmFsdWUgdGhlIHdhcyBvcmlnaW5hbGx5IHByb3ZpZGVkIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBc1xuICAgICAqICAgICBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSBpZiB2YWxpZCBpbiB0aGlzIGNvbnRleHQuICBPdGhlcndpc2UsIHRocm93cyBhbiBleGNlcHRpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VHJ1c3RlZCh0eXBlLCBtYXliZVRydXN0ZWQpIHtcbiAgICAgIGlmIChtYXliZVRydXN0ZWQgPT09IG51bGwgfHwgaXNVbmRlZmluZWQobWF5YmVUcnVzdGVkKSB8fCBtYXliZVRydXN0ZWQgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQ7XG4gICAgICB9XG4gICAgICB2YXIgY29uc3RydWN0b3IgPSAoYnlUeXBlLmhhc093blByb3BlcnR5KHR5cGUpID8gYnlUeXBlW3R5cGVdIDogbnVsbCk7XG4gICAgICBpZiAoY29uc3RydWN0b3IgJiYgbWF5YmVUcnVzdGVkIGluc3RhbmNlb2YgY29uc3RydWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZC4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpO1xuICAgICAgfVxuICAgICAgLy8gSWYgd2UgZ2V0IGhlcmUsIHRoZW4gd2UgbWF5IG9ubHkgdGFrZSBvbmUgb2YgdHdvIGFjdGlvbnMuXG4gICAgICAvLyAxLiBzYW5pdGl6ZSB0aGUgdmFsdWUgZm9yIHRoZSByZXF1ZXN0ZWQgdHlwZSwgb3JcbiAgICAgIC8vIDIuIHRocm93IGFuIGV4Y2VwdGlvbi5cbiAgICAgIGlmICh0eXBlID09PSBTQ0VfQ09OVEVYVFMuUkVTT1VSQ0VfVVJMKSB7XG4gICAgICAgIGlmIChpc1Jlc291cmNlVXJsQWxsb3dlZEJ5UG9saWN5KG1heWJlVHJ1c3RlZCkpIHtcbiAgICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2luc2VjdXJsJyxcbiAgICAgICAgICAgICAgJ0Jsb2NrZWQgbG9hZGluZyByZXNvdXJjZSBmcm9tIHVybCBub3QgYWxsb3dlZCBieSAkc2NlRGVsZWdhdGUgcG9saWN5LiAgVVJMOiB7MH0nLFxuICAgICAgICAgICAgICBtYXliZVRydXN0ZWQudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gU0NFX0NPTlRFWFRTLkhUTUwpIHtcbiAgICAgICAgcmV0dXJuIGh0bWxTYW5pdGl6ZXIobWF5YmVUcnVzdGVkKTtcbiAgICAgIH1cbiAgICAgIHRocm93ICRzY2VNaW5FcnIoJ3Vuc2FmZScsICdBdHRlbXB0aW5nIHRvIHVzZSBhbiB1bnNhZmUgdmFsdWUgaW4gYSBzYWZlIGNvbnRleHQuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgdHJ1c3RBczogdHJ1c3RBcyxcbiAgICAgICAgICAgICBnZXRUcnVzdGVkOiBnZXRUcnVzdGVkLFxuICAgICAgICAgICAgIHZhbHVlT2Y6IHZhbHVlT2YgfTtcbiAgfV07XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRzY2VQcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhlICRzY2VQcm92aWRlciBwcm92aWRlciBhbGxvd3MgZGV2ZWxvcGVycyB0byBjb25maWd1cmUgdGhlIHtAbGluayBuZy4kc2NlICRzY2V9IHNlcnZpY2UuXG4gKiAtICAgZW5hYmxlL2Rpc2FibGUgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSkgaW4gYSBtb2R1bGVcbiAqIC0gICBvdmVycmlkZSB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB3aXRoIGEgY3VzdG9tIGRlbGVnYXRlXG4gKlxuICogUmVhZCBtb3JlIGFib3V0IHtAbGluayBuZy4kc2NlIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpfS5cbiAqL1xuXG4vKiBqc2hpbnQgbWF4bGVuOiBmYWxzZSovXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRzY2VcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogYCRzY2VgIGlzIGEgc2VydmljZSB0aGF0IHByb3ZpZGVzIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIHNlcnZpY2VzIHRvIEFuZ3VsYXJKUy5cbiAqXG4gKiAjIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nXG4gKlxuICogU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSkgaXMgYSBtb2RlIGluIHdoaWNoIEFuZ3VsYXJKUyByZXF1aXJlcyBiaW5kaW5ncyBpbiBjZXJ0YWluXG4gKiBjb250ZXh0cyB0byByZXN1bHQgaW4gYSB2YWx1ZSB0aGF0IGlzIG1hcmtlZCBhcyBzYWZlIHRvIHVzZSBmb3IgdGhhdCBjb250ZXh0LiAgT25lIGV4YW1wbGUgb2ZcbiAqIHN1Y2ggYSBjb250ZXh0IGlzIGJpbmRpbmcgYXJiaXRyYXJ5IGh0bWwgY29udHJvbGxlZCBieSB0aGUgdXNlciB2aWEgYG5nLWJpbmQtaHRtbGAuICBXZSByZWZlclxuICogdG8gdGhlc2UgY29udGV4dHMgYXMgcHJpdmlsZWdlZCBvciBTQ0UgY29udGV4dHMuXG4gKlxuICogQXMgb2YgdmVyc2lvbiAxLjIsIEFuZ3VsYXIgc2hpcHMgd2l0aCBTQ0UgZW5hYmxlZCBieSBkZWZhdWx0LlxuICpcbiAqIE5vdGU6ICBXaGVuIGVuYWJsZWQgKHRoZSBkZWZhdWx0KSwgSUU8MTEgaW4gcXVpcmtzIG1vZGUgaXMgbm90IHN1cHBvcnRlZC4gIEluIHRoaXMgbW9kZSwgSUU8MTEgYWxsb3dcbiAqIG9uZSB0byBleGVjdXRlIGFyYml0cmFyeSBqYXZhc2NyaXB0IGJ5IHRoZSB1c2Ugb2YgdGhlIGV4cHJlc3Npb24oKSBzeW50YXguICBSZWZlclxuICogPGh0dHA6Ly9ibG9ncy5tc2RuLmNvbS9iL2llL2FyY2hpdmUvMjAwOC8xMC8xNi9lbmRpbmctZXhwcmVzc2lvbnMuYXNweD4gdG8gbGVhcm4gbW9yZSBhYm91dCB0aGVtLlxuICogWW91IGNhbiBlbnN1cmUgeW91ciBkb2N1bWVudCBpcyBpbiBzdGFuZGFyZHMgbW9kZSBhbmQgbm90IHF1aXJrcyBtb2RlIGJ5IGFkZGluZyBgPCFkb2N0eXBlIGh0bWw+YFxuICogdG8gdGhlIHRvcCBvZiB5b3VyIEhUTUwgZG9jdW1lbnQuXG4gKlxuICogU0NFIGFzc2lzdHMgaW4gd3JpdGluZyBjb2RlIGluIHdheSB0aGF0IChhKSBpcyBzZWN1cmUgYnkgZGVmYXVsdCBhbmQgKGIpIG1ha2VzIGF1ZGl0aW5nIGZvclxuICogc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzIHN1Y2ggYXMgWFNTLCBjbGlja2phY2tpbmcsIGV0Yy4gYSBsb3QgZWFzaWVyLlxuICpcbiAqIEhlcmUncyBhbiBleGFtcGxlIG9mIGEgYmluZGluZyBpbiBhIHByaXZpbGVnZWQgY29udGV4dDpcbiAqXG4gKiBgYGBcbiAqIDxpbnB1dCBuZy1tb2RlbD1cInVzZXJIdG1sXCIgYXJpYS1sYWJlbD1cIlVzZXIgaW5wdXRcIj5cbiAqIDxkaXYgbmctYmluZC1odG1sPVwidXNlckh0bWxcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIE5vdGljZSB0aGF0IGBuZy1iaW5kLWh0bWxgIGlzIGJvdW5kIHRvIGB1c2VySHRtbGAgY29udHJvbGxlZCBieSB0aGUgdXNlci4gIFdpdGggU0NFXG4gKiBkaXNhYmxlZCwgdGhpcyBhcHBsaWNhdGlvbiBhbGxvd3MgdGhlIHVzZXIgdG8gcmVuZGVyIGFyYml0cmFyeSBIVE1MIGludG8gdGhlIERJVi5cbiAqIEluIGEgbW9yZSByZWFsaXN0aWMgZXhhbXBsZSwgb25lIG1heSBiZSByZW5kZXJpbmcgdXNlciBjb21tZW50cywgYmxvZyBhcnRpY2xlcywgZXRjLiB2aWFcbiAqIGJpbmRpbmdzLiAgKEhUTUwgaXMganVzdCBvbmUgZXhhbXBsZSBvZiBhIGNvbnRleHQgd2hlcmUgcmVuZGVyaW5nIHVzZXIgY29udHJvbGxlZCBpbnB1dCBjcmVhdGVzXG4gKiBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMuKVxuICpcbiAqIEZvciB0aGUgY2FzZSBvZiBIVE1MLCB5b3UgbWlnaHQgdXNlIGEgbGlicmFyeSwgZWl0aGVyIG9uIHRoZSBjbGllbnQgc2lkZSwgb3Igb24gdGhlIHNlcnZlciBzaWRlLFxuICogdG8gc2FuaXRpemUgdW5zYWZlIEhUTUwgYmVmb3JlIGJpbmRpbmcgdG8gdGhlIHZhbHVlIGFuZCByZW5kZXJpbmcgaXQgaW4gdGhlIGRvY3VtZW50LlxuICpcbiAqIEhvdyB3b3VsZCB5b3UgZW5zdXJlIHRoYXQgZXZlcnkgcGxhY2UgdGhhdCB1c2VkIHRoZXNlIHR5cGVzIG9mIGJpbmRpbmdzIHdhcyBib3VuZCB0byBhIHZhbHVlIHRoYXRcbiAqIHdhcyBzYW5pdGl6ZWQgYnkgeW91ciBsaWJyYXJ5IChvciByZXR1cm5lZCBhcyBzYWZlIGZvciByZW5kZXJpbmcgYnkgeW91ciBzZXJ2ZXI/KSAgSG93IGNhbiB5b3VcbiAqIGVuc3VyZSB0aGF0IHlvdSBkaWRuJ3QgYWNjaWRlbnRhbGx5IGRlbGV0ZSB0aGUgbGluZSB0aGF0IHNhbml0aXplZCB0aGUgdmFsdWUsIG9yIHJlbmFtZWQgc29tZVxuICogcHJvcGVydGllcy9maWVsZHMgYW5kIGZvcmdvdCB0byB1cGRhdGUgdGhlIGJpbmRpbmcgdG8gdGhlIHNhbml0aXplZCB2YWx1ZT9cbiAqXG4gKiBUbyBiZSBzZWN1cmUgYnkgZGVmYXVsdCwgeW91IHdhbnQgdG8gZW5zdXJlIHRoYXQgYW55IHN1Y2ggYmluZGluZ3MgYXJlIGRpc2FsbG93ZWQgdW5sZXNzIHlvdSBjYW5cbiAqIGRldGVybWluZSB0aGF0IHNvbWV0aGluZyBleHBsaWNpdGx5IHNheXMgaXQncyBzYWZlIHRvIHVzZSBhIHZhbHVlIGZvciBiaW5kaW5nIGluIHRoYXRcbiAqIGNvbnRleHQuICBZb3UgY2FuIHRoZW4gYXVkaXQgeW91ciBjb2RlIChhIHNpbXBsZSBncmVwIHdvdWxkIGRvKSB0byBlbnN1cmUgdGhhdCB0aGlzIGlzIG9ubHkgZG9uZVxuICogZm9yIHRob3NlIHZhbHVlcyB0aGF0IHlvdSBjYW4gZWFzaWx5IHRlbGwgYXJlIHNhZmUgLSBiZWNhdXNlIHRoZXkgd2VyZSByZWNlaXZlZCBmcm9tIHlvdXIgc2VydmVyLFxuICogc2FuaXRpemVkIGJ5IHlvdXIgbGlicmFyeSwgZXRjLiAgWW91IGNhbiBvcmdhbml6ZSB5b3VyIGNvZGViYXNlIHRvIGhlbHAgd2l0aCB0aGlzIC0gcGVyaGFwc1xuICogYWxsb3dpbmcgb25seSB0aGUgZmlsZXMgaW4gYSBzcGVjaWZpYyBkaXJlY3RvcnkgdG8gZG8gdGhpcy4gIEVuc3VyaW5nIHRoYXQgdGhlIGludGVybmFsIEFQSVxuICogZXhwb3NlZCBieSB0aGF0IGNvZGUgZG9lc24ndCBtYXJrdXAgYXJiaXRyYXJ5IHZhbHVlcyBhcyBzYWZlIHRoZW4gYmVjb21lcyBhIG1vcmUgbWFuYWdlYWJsZSB0YXNrLlxuICpcbiAqIEluIHRoZSBjYXNlIG9mIEFuZ3VsYXJKUycgU0NFIHNlcnZpY2UsIG9uZSB1c2VzIHtAbGluayBuZy4kc2NlI3RydXN0QXMgJHNjZS50cnVzdEFzfVxuICogKGFuZCBzaG9ydGhhbmQgbWV0aG9kcyBzdWNoIGFzIHtAbGluayBuZy4kc2NlI3RydXN0QXNIdG1sICRzY2UudHJ1c3RBc0h0bWx9LCBldGMuKSB0b1xuICogb2J0YWluIHZhbHVlcyB0aGF0IHdpbGwgYmUgYWNjZXB0ZWQgYnkgU0NFIC8gcHJpdmlsZWdlZCBjb250ZXh0cy5cbiAqXG4gKlxuICogIyMgSG93IGRvZXMgaXQgd29yaz9cbiAqXG4gKiBJbiBwcml2aWxlZ2VkIGNvbnRleHRzLCBkaXJlY3RpdmVzIGFuZCBjb2RlIHdpbGwgYmluZCB0byB0aGUgcmVzdWx0IG9mIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWRcbiAqICRzY2UuZ2V0VHJ1c3RlZChjb250ZXh0LCB2YWx1ZSl9IHJhdGhlciB0aGFuIHRvIHRoZSB2YWx1ZSBkaXJlY3RseS4gIERpcmVjdGl2ZXMgdXNlIHtAbGlua1xuICogbmcuJHNjZSNwYXJzZUFzICRzY2UucGFyc2VBc30gcmF0aGVyIHRoYW4gYCRwYXJzZWAgdG8gd2F0Y2ggYXR0cmlidXRlIGJpbmRpbmdzLCB3aGljaCBwZXJmb3JtcyB0aGVcbiAqIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWQgJHNjZS5nZXRUcnVzdGVkfSBiZWhpbmQgdGhlIHNjZW5lcyBvbiBub24tY29uc3RhbnQgbGl0ZXJhbHMuXG4gKlxuICogQXMgYW4gZXhhbXBsZSwge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0JpbmRIdG1sIG5nQmluZEh0bWx9IHVzZXMge0BsaW5rXG4gKiBuZy4kc2NlI3BhcnNlQXNIdG1sICRzY2UucGFyc2VBc0h0bWwoYmluZGluZyBleHByZXNzaW9uKX0uICBIZXJlJ3MgdGhlIGFjdHVhbCBjb2RlIChzbGlnaHRseVxuICogc2ltcGxpZmllZCk6XG4gKlxuICogYGBgXG4gKiB2YXIgbmdCaW5kSHRtbERpcmVjdGl2ZSA9IFsnJHNjZScsIGZ1bmN0aW9uKCRzY2UpIHtcbiAqICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gKiAgICAgc2NvcGUuJHdhdGNoKCRzY2UucGFyc2VBc0h0bWwoYXR0ci5uZ0JpbmRIdG1sKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAqICAgICAgIGVsZW1lbnQuaHRtbCh2YWx1ZSB8fCAnJyk7XG4gKiAgICAgfSk7XG4gKiAgIH07XG4gKiB9XTtcbiAqIGBgYFxuICpcbiAqICMjIEltcGFjdCBvbiBsb2FkaW5nIHRlbXBsYXRlc1xuICpcbiAqIFRoaXMgYXBwbGllcyBib3RoIHRvIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZSBgbmctaW5jbHVkZWB9IGRpcmVjdGl2ZSBhcyB3ZWxsIGFzXG4gKiBgdGVtcGxhdGVVcmxgJ3Mgc3BlY2lmaWVkIGJ5IHtAbGluayBndWlkZS9kaXJlY3RpdmUgZGlyZWN0aXZlc30uXG4gKlxuICogQnkgZGVmYXVsdCwgQW5ndWxhciBvbmx5IGxvYWRzIHRlbXBsYXRlcyBmcm9tIHRoZSBzYW1lIGRvbWFpbiBhbmQgcHJvdG9jb2wgYXMgdGhlIGFwcGxpY2F0aW9uXG4gKiBkb2N1bWVudC4gIFRoaXMgaXMgZG9uZSBieSBjYWxsaW5nIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWRSZXNvdXJjZVVybFxuICogJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmx9IG9uIHRoZSB0ZW1wbGF0ZSBVUkwuICBUbyBsb2FkIHRlbXBsYXRlcyBmcm9tIG90aGVyIGRvbWFpbnMgYW5kL29yXG4gKiBwcm90b2NvbHMsIHlvdSBtYXkgZWl0aGVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdCB3aGl0ZWxpc3RcbiAqIHRoZW19IG9yIHtAbGluayBuZy4kc2NlI3RydXN0QXNSZXNvdXJjZVVybCB3cmFwIGl0fSBpbnRvIGEgdHJ1c3RlZCB2YWx1ZS5cbiAqXG4gKiAqUGxlYXNlIG5vdGUqOlxuICogVGhlIGJyb3dzZXInc1xuICogW1NhbWUgT3JpZ2luIFBvbGljeV0oaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9icm93c2Vyc2VjL3dpa2kvUGFydDIjU2FtZS1vcmlnaW5fcG9saWN5X2Zvcl9YTUxIdHRwUmVxdWVzdClcbiAqIGFuZCBbQ3Jvc3MtT3JpZ2luIFJlc291cmNlIFNoYXJpbmcgKENPUlMpXShodHRwOi8vd3d3LnczLm9yZy9UUi9jb3JzLylcbiAqIHBvbGljeSBhcHBseSBpbiBhZGRpdGlvbiB0byB0aGlzIGFuZCBtYXkgZnVydGhlciByZXN0cmljdCB3aGV0aGVyIHRoZSB0ZW1wbGF0ZSBpcyBzdWNjZXNzZnVsbHlcbiAqIGxvYWRlZC4gIFRoaXMgbWVhbnMgdGhhdCB3aXRob3V0IHRoZSByaWdodCBDT1JTIHBvbGljeSwgbG9hZGluZyB0ZW1wbGF0ZXMgZnJvbSBhIGRpZmZlcmVudCBkb21haW5cbiAqIHdvbid0IHdvcmsgb24gYWxsIGJyb3dzZXJzLiAgQWxzbywgbG9hZGluZyB0ZW1wbGF0ZXMgZnJvbSBgZmlsZTovL2AgVVJMIGRvZXMgbm90IHdvcmsgb24gc29tZVxuICogYnJvd3NlcnMuXG4gKlxuICogIyMgVGhpcyBmZWVscyBsaWtlIHRvbyBtdWNoIG92ZXJoZWFkXG4gKlxuICogSXQncyBpbXBvcnRhbnQgdG8gcmVtZW1iZXIgdGhhdCBTQ0Ugb25seSBhcHBsaWVzIHRvIGludGVycG9sYXRpb24gZXhwcmVzc2lvbnMuXG4gKlxuICogSWYgeW91ciBleHByZXNzaW9ucyBhcmUgY29uc3RhbnQgbGl0ZXJhbHMsIHRoZXkncmUgYXV0b21hdGljYWxseSB0cnVzdGVkIGFuZCB5b3UgZG9uJ3QgbmVlZCB0b1xuICogY2FsbCBgJHNjZS50cnVzdEFzYCBvbiB0aGVtIChyZW1lbWJlciB0byBpbmNsdWRlIHRoZSBgbmdTYW5pdGl6ZWAgbW9kdWxlKSAoZS5nLlxuICogYDxkaXYgbmctYmluZC1odG1sPVwiJzxiPmltcGxpY2l0bHkgdHJ1c3RlZDwvYj4nXCI+PC9kaXY+YCkganVzdCB3b3Jrcy5cbiAqXG4gKiBBZGRpdGlvbmFsbHksIGBhW2hyZWZdYCBhbmQgYGltZ1tzcmNdYCBhdXRvbWF0aWNhbGx5IHNhbml0aXplIHRoZWlyIFVSTHMgYW5kIGRvIG5vdCBwYXNzIHRoZW1cbiAqIHRocm91Z2gge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZCAkc2NlLmdldFRydXN0ZWR9LiAgU0NFIGRvZXNuJ3QgcGxheSBhIHJvbGUgaGVyZS5cbiAqXG4gKiBUaGUgaW5jbHVkZWQge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSAkc2NlRGVsZWdhdGV9IGNvbWVzIHdpdGggc2FuZSBkZWZhdWx0cyB0byBhbGxvdyB5b3UgdG8gbG9hZFxuICogdGVtcGxhdGVzIGluIGBuZy1pbmNsdWRlYCBmcm9tIHlvdXIgYXBwbGljYXRpb24ncyBkb21haW4gd2l0aG91dCBoYXZpbmcgdG8gZXZlbiBrbm93IGFib3V0IFNDRS5cbiAqIEl0IGJsb2NrcyBsb2FkaW5nIHRlbXBsYXRlcyBmcm9tIG90aGVyIGRvbWFpbnMgb3IgbG9hZGluZyB0ZW1wbGF0ZXMgb3ZlciBodHRwIGZyb20gYW4gaHR0cHNcbiAqIHNlcnZlZCBkb2N1bWVudC4gIFlvdSBjYW4gY2hhbmdlIHRoZXNlIGJ5IHNldHRpbmcgeW91ciBvd24gY3VzdG9tIHtAbGlua1xuICogbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3Qgd2hpdGVsaXN0c30gYW5kIHtAbGlua1xuICogbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3QgYmxhY2tsaXN0c30gZm9yIG1hdGNoaW5nIHN1Y2ggVVJMcy5cbiAqXG4gKiBUaGlzIHNpZ25pZmljYW50bHkgcmVkdWNlcyB0aGUgb3ZlcmhlYWQuICBJdCBpcyBmYXIgZWFzaWVyIHRvIHBheSB0aGUgc21hbGwgb3ZlcmhlYWQgYW5kIGhhdmUgYW5cbiAqIGFwcGxpY2F0aW9uIHRoYXQncyBzZWN1cmUgYW5kIGNhbiBiZSBhdWRpdGVkIHRvIHZlcmlmeSB0aGF0IHdpdGggbXVjaCBtb3JlIGVhc2UgdGhhbiBib2x0aW5nXG4gKiBzZWN1cml0eSBvbnRvIGFuIGFwcGxpY2F0aW9uIGxhdGVyLlxuICpcbiAqIDxhIG5hbWU9XCJjb250ZXh0c1wiPjwvYT5cbiAqICMjIFdoYXQgdHJ1c3RlZCBjb250ZXh0IHR5cGVzIGFyZSBzdXBwb3J0ZWQ/XG4gKlxuICogfCBDb250ZXh0ICAgICAgICAgICAgIHwgTm90ZXMgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tfFxuICogfCBgJHNjZS5IVE1MYCAgICAgICAgIHwgRm9yIEhUTUwgdGhhdCdzIHNhZmUgdG8gc291cmNlIGludG8gdGhlIGFwcGxpY2F0aW9uLiAgVGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdCaW5kSHRtbCBuZ0JpbmRIdG1sfSBkaXJlY3RpdmUgdXNlcyB0aGlzIGNvbnRleHQgZm9yIGJpbmRpbmdzLiBJZiBhbiB1bnNhZmUgdmFsdWUgaXMgZW5jb3VudGVyZWQgYW5kIHRoZSB7QGxpbmsgbmdTYW5pdGl6ZSAkc2FuaXRpemV9IG1vZHVsZSBpcyBwcmVzZW50IHRoaXMgd2lsbCBzYW5pdGl6ZSB0aGUgdmFsdWUgaW5zdGVhZCBvZiB0aHJvd2luZyBhbiBlcnJvci4gfFxuICogfCBgJHNjZS5DU1NgICAgICAgICAgIHwgRm9yIENTUyB0aGF0J3Mgc2FmZSB0byBzb3VyY2UgaW50byB0aGUgYXBwbGljYXRpb24uICBDdXJyZW50bHkgdW51c2VkLiAgRmVlbCBmcmVlIHRvIHVzZSBpdCBpbiB5b3VyIG93biBkaXJlY3RpdmVzLiB8XG4gKiB8IGAkc2NlLlVSTGAgICAgICAgICAgfCBGb3IgVVJMcyB0aGF0IGFyZSBzYWZlIHRvIGZvbGxvdyBhcyBsaW5rcy4gIEN1cnJlbnRseSB1bnVzZWQgKGA8YSBocmVmPWAgYW5kIGA8aW1nIHNyYz1gIHNhbml0aXplIHRoZWlyIHVybHMgYW5kIGRvbid0IGNvbnN0aXR1dGUgYW4gU0NFIGNvbnRleHQuIHxcbiAqIHwgYCRzY2UuUkVTT1VSQ0VfVVJMYCB8IEZvciBVUkxzIHRoYXQgYXJlIG5vdCBvbmx5IHNhZmUgdG8gZm9sbG93IGFzIGxpbmtzLCBidXQgd2hvc2UgY29udGVudHMgYXJlIGFsc28gc2FmZSB0byBpbmNsdWRlIGluIHlvdXIgYXBwbGljYXRpb24uICBFeGFtcGxlcyBpbmNsdWRlIGBuZy1pbmNsdWRlYCwgYHNyY2AgLyBgbmdTcmNgIGJpbmRpbmdzIGZvciB0YWdzIG90aGVyIHRoYW4gYElNR2AgKGUuZy4gYElGUkFNRWAsIGBPQkpFQ1RgLCBldGMuKSAgPGJyPjxicj5Ob3RlIHRoYXQgYCRzY2UuUkVTT1VSQ0VfVVJMYCBtYWtlcyBhIHN0cm9uZ2VyIHN0YXRlbWVudCBhYm91dCB0aGUgVVJMIHRoYW4gYCRzY2UuVVJMYCBkb2VzIGFuZCB0aGVyZWZvcmUgY29udGV4dHMgcmVxdWlyaW5nIHZhbHVlcyB0cnVzdGVkIGZvciBgJHNjZS5SRVNPVVJDRV9VUkxgIGNhbiBiZSB1c2VkIGFueXdoZXJlIHRoYXQgdmFsdWVzIHRydXN0ZWQgZm9yIGAkc2NlLlVSTGAgYXJlIHJlcXVpcmVkLiB8XG4gKiB8IGAkc2NlLkpTYCAgICAgICAgICAgfCBGb3IgSmF2YVNjcmlwdCB0aGF0IGlzIHNhZmUgdG8gZXhlY3V0ZSBpbiB5b3VyIGFwcGxpY2F0aW9uJ3MgY29udGV4dC4gIEN1cnJlbnRseSB1bnVzZWQuICBGZWVsIGZyZWUgdG8gdXNlIGl0IGluIHlvdXIgb3duIGRpcmVjdGl2ZXMuIHxcbiAqXG4gKiAjIyBGb3JtYXQgb2YgaXRlbXMgaW4ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0IHJlc291cmNlVXJsV2hpdGVsaXN0fS97QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3QgQmxhY2tsaXN0fSA8YSBuYW1lPVwicmVzb3VyY2VVcmxQYXR0ZXJuSXRlbVwiPjwvYT5cbiAqXG4gKiAgRWFjaCBlbGVtZW50IGluIHRoZXNlIGFycmF5cyBtdXN0IGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nOlxuICpcbiAqICAtICoqJ3NlbGYnKipcbiAqICAgIC0gVGhlIHNwZWNpYWwgKipzdHJpbmcqKiwgYCdzZWxmJ2AsIGNhbiBiZSB1c2VkIHRvIG1hdGNoIGFnYWluc3QgYWxsIFVSTHMgb2YgdGhlICoqc2FtZVxuICogICAgICBkb21haW4qKiBhcyB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQgdXNpbmcgdGhlICoqc2FtZSBwcm90b2NvbCoqLlxuICogIC0gKipTdHJpbmcqKiAoZXhjZXB0IHRoZSBzcGVjaWFsIHZhbHVlIGAnc2VsZidgKVxuICogICAgLSBUaGUgc3RyaW5nIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgZnVsbCAqbm9ybWFsaXplZCAvIGFic29sdXRlIFVSTCogb2YgdGhlIHJlc291cmNlXG4gKiAgICAgIGJlaW5nIHRlc3RlZCAoc3Vic3RyaW5nIG1hdGNoZXMgYXJlIG5vdCBnb29kIGVub3VnaC4pXG4gKiAgICAtIFRoZXJlIGFyZSBleGFjdGx5ICoqdHdvIHdpbGRjYXJkIHNlcXVlbmNlcyoqIC0gYCpgIGFuZCBgKipgLiAgQWxsIG90aGVyIGNoYXJhY3RlcnNcbiAqICAgICAgbWF0Y2ggdGhlbXNlbHZlcy5cbiAqICAgIC0gYCpgOiBtYXRjaGVzIHplcm8gb3IgbW9yZSBvY2N1cnJlbmNlcyBvZiBhbnkgY2hhcmFjdGVyIG90aGVyIHRoYW4gb25lIG9mIHRoZSBmb2xsb3dpbmcgNlxuICogICAgICBjaGFyYWN0ZXJzOiAnYDpgJywgJ2AvYCcsICdgLmAnLCAnYD9gJywgJ2AmYCcgYW5kICdgO2AnLiAgSXQncyBhIHVzZWZ1bCB3aWxkY2FyZCBmb3IgdXNlXG4gKiAgICAgIGluIGEgd2hpdGVsaXN0LlxuICogICAgLSBgKipgOiBtYXRjaGVzIHplcm8gb3IgbW9yZSBvY2N1cnJlbmNlcyBvZiAqYW55KiBjaGFyYWN0ZXIuICBBcyBzdWNoLCBpdCdzIG5vdFxuICogICAgICBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIGEgc2NoZW1lLCBkb21haW4sIGV0Yy4gYXMgaXQgd291bGQgbWF0Y2ggdG9vIG11Y2guICAoZS5nLlxuICogICAgICBodHRwOi8vKiouZXhhbXBsZS5jb20vIHdvdWxkIG1hdGNoIGh0dHA6Ly9ldmlsLmNvbS8/aWdub3JlPS5leGFtcGxlLmNvbS8gYW5kIHRoYXQgbWlnaHRcbiAqICAgICAgbm90IGhhdmUgYmVlbiB0aGUgaW50ZW50aW9uLikgIEl0cyB1c2FnZSBhdCB0aGUgdmVyeSBlbmQgb2YgdGhlIHBhdGggaXMgb2suICAoZS5nLlxuICogICAgICBodHRwOi8vZm9vLmV4YW1wbGUuY29tL3RlbXBsYXRlcy8qKikuXG4gKiAgLSAqKlJlZ0V4cCoqICgqc2VlIGNhdmVhdCBiZWxvdyopXG4gKiAgICAtICpDYXZlYXQqOiAgV2hpbGUgcmVndWxhciBleHByZXNzaW9ucyBhcmUgcG93ZXJmdWwgYW5kIG9mZmVyIGdyZWF0IGZsZXhpYmlsaXR5LCAgdGhlaXIgc3ludGF4XG4gKiAgICAgIChhbmQgYWxsIHRoZSBpbmV2aXRhYmxlIGVzY2FwaW5nKSBtYWtlcyB0aGVtICpoYXJkZXIgdG8gbWFpbnRhaW4qLiAgSXQncyBlYXN5IHRvXG4gKiAgICAgIGFjY2lkZW50YWxseSBpbnRyb2R1Y2UgYSBidWcgd2hlbiBvbmUgdXBkYXRlcyBhIGNvbXBsZXggZXhwcmVzc2lvbiAoaW1obywgYWxsIHJlZ2V4ZXMgc2hvdWxkXG4gKiAgICAgIGhhdmUgZ29vZCB0ZXN0IGNvdmVyYWdlKS4gIEZvciBpbnN0YW5jZSwgdGhlIHVzZSBvZiBgLmAgaW4gdGhlIHJlZ2V4IGlzIGNvcnJlY3Qgb25seSBpbiBhXG4gKiAgICAgIHNtYWxsIG51bWJlciBvZiBjYXNlcy4gIEEgYC5gIGNoYXJhY3RlciBpbiB0aGUgcmVnZXggdXNlZCB3aGVuIG1hdGNoaW5nIHRoZSBzY2hlbWUgb3IgYVxuICogICAgICBzdWJkb21haW4gY291bGQgYmUgbWF0Y2hlZCBhZ2FpbnN0IGEgYDpgIG9yIGxpdGVyYWwgYC5gIHRoYXQgd2FzIGxpa2VseSBub3QgaW50ZW5kZWQuICAgSXRcbiAqICAgICAgaXMgaGlnaGx5IHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgc3RyaW5nIHBhdHRlcm5zIGFuZCBvbmx5IGZhbGwgYmFjayB0byByZWd1bGFyIGV4cHJlc3Npb25zXG4gKiAgICAgIGFzIGEgbGFzdCByZXNvcnQuXG4gKiAgICAtIFRoZSByZWd1bGFyIGV4cHJlc3Npb24gbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBSZWdFeHAgKGkuZS4gbm90IGEgc3RyaW5nLikgIEl0IGlzXG4gKiAgICAgIG1hdGNoZWQgYWdhaW5zdCB0aGUgKiplbnRpcmUqKiAqbm9ybWFsaXplZCAvIGFic29sdXRlIFVSTCogb2YgdGhlIHJlc291cmNlIGJlaW5nIHRlc3RlZFxuICogICAgICAoZXZlbiB3aGVuIHRoZSBSZWdFeHAgZGlkIG5vdCBoYXZlIHRoZSBgXmAgYW5kIGAkYCBjb2Rlcy4pICBJbiBhZGRpdGlvbiwgYW55IGZsYWdzXG4gKiAgICAgIHByZXNlbnQgb24gdGhlIFJlZ0V4cCAoc3VjaCBhcyBtdWx0aWxpbmUsIGdsb2JhbCwgaWdub3JlQ2FzZSkgYXJlIGlnbm9yZWQuXG4gKiAgICAtIElmIHlvdSBhcmUgZ2VuZXJhdGluZyB5b3VyIEphdmFTY3JpcHQgZnJvbSBzb21lIG90aGVyIHRlbXBsYXRpbmcgZW5naW5lIChub3RcbiAqICAgICAgcmVjb21tZW5kZWQsIGUuZy4gaW4gaXNzdWUgWyM0MDA2XShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy80MDA2KSksXG4gKiAgICAgIHJlbWVtYmVyIHRvIGVzY2FwZSB5b3VyIHJlZ3VsYXIgZXhwcmVzc2lvbiAoYW5kIGJlIGF3YXJlIHRoYXQgeW91IG1pZ2h0IG5lZWQgbW9yZSB0aGFuXG4gKiAgICAgIG9uZSBsZXZlbCBvZiBlc2NhcGluZyBkZXBlbmRpbmcgb24geW91ciB0ZW1wbGF0aW5nIGVuZ2luZSBhbmQgdGhlIHdheSB5b3UgaW50ZXJwb2xhdGVkXG4gKiAgICAgIHRoZSB2YWx1ZS4pICBEbyBtYWtlIHVzZSBvZiB5b3VyIHBsYXRmb3JtJ3MgZXNjYXBpbmcgbWVjaGFuaXNtIGFzIGl0IG1pZ2h0IGJlIGdvb2RcbiAqICAgICAgZW5vdWdoIGJlZm9yZSBjb2RpbmcgeW91ciBvd24uICBFLmcuIFJ1YnkgaGFzXG4gKiAgICAgIFtSZWdleHAuZXNjYXBlKHN0cildKGh0dHA6Ly93d3cucnVieS1kb2Mub3JnL2NvcmUtMi4wLjAvUmVnZXhwLmh0bWwjbWV0aG9kLWMtZXNjYXBlKVxuICogICAgICBhbmQgUHl0aG9uIGhhcyBbcmUuZXNjYXBlXShodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvcmUuaHRtbCNyZS5lc2NhcGUpLlxuICogICAgICBKYXZhc2NyaXB0IGxhY2tzIGEgc2ltaWxhciBidWlsdCBpbiBmdW5jdGlvbiBmb3IgZXNjYXBpbmcuICBUYWtlIGEgbG9vayBhdCBHb29nbGVcbiAqICAgICAgQ2xvc3VyZSBsaWJyYXJ5J3MgW2dvb2cuc3RyaW5nLnJlZ0V4cEVzY2FwZShzKV0oXG4gKiAgICAgIGh0dHA6Ly9kb2NzLmNsb3N1cmUtbGlicmFyeS5nb29nbGVjb2RlLmNvbS9naXQvY2xvc3VyZV9nb29nX3N0cmluZ19zdHJpbmcuanMuc291cmNlLmh0bWwjbGluZTk2MikuXG4gKlxuICogUmVmZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyICRzY2VEZWxlZ2F0ZVByb3ZpZGVyfSBmb3IgYW4gZXhhbXBsZS5cbiAqXG4gKiAjIyBTaG93IG1lIGFuIGV4YW1wbGUgdXNpbmcgU0NFLlxuICpcbiAqIDxleGFtcGxlIG1vZHVsZT1cIm15U2NlQXBwXCIgZGVwcz1cImFuZ3VsYXItc2FuaXRpemUuanNcIj5cbiAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgIDxkaXYgbmctY29udHJvbGxlcj1cIkFwcENvbnRyb2xsZXIgYXMgbXlDdHJsXCI+XG4gKiAgICAgPGkgbmctYmluZC1odG1sPVwibXlDdHJsLmV4cGxpY2l0bHlUcnVzdGVkSHRtbFwiIGlkPVwiZXhwbGljaXRseVRydXN0ZWRIdG1sXCI+PC9pPjxicj48YnI+XG4gKiAgICAgPGI+VXNlciBjb21tZW50czwvYj48YnI+XG4gKiAgICAgQnkgZGVmYXVsdCwgSFRNTCB0aGF0IGlzbid0IGV4cGxpY2l0bHkgdHJ1c3RlZCAoZS5nLiBBbGljZSdzIGNvbW1lbnQpIGlzIHNhbml0aXplZCB3aGVuXG4gKiAgICAgJHNhbml0aXplIGlzIGF2YWlsYWJsZS4gIElmICRzYW5pdGl6ZSBpc24ndCBhdmFpbGFibGUsIHRoaXMgcmVzdWx0cyBpbiBhbiBlcnJvciBpbnN0ZWFkIG9mIGFuXG4gKiAgICAgZXhwbG9pdC5cbiAqICAgICA8ZGl2IGNsYXNzPVwid2VsbFwiPlxuICogICAgICAgPGRpdiBuZy1yZXBlYXQ9XCJ1c2VyQ29tbWVudCBpbiBteUN0cmwudXNlckNvbW1lbnRzXCI+XG4gKiAgICAgICAgIDxiPnt7dXNlckNvbW1lbnQubmFtZX19PC9iPjpcbiAqICAgICAgICAgPHNwYW4gbmctYmluZC1odG1sPVwidXNlckNvbW1lbnQuaHRtbENvbW1lbnRcIiBjbGFzcz1cImh0bWxDb21tZW50XCI+PC9zcGFuPlxuICogICAgICAgICA8YnI+XG4gKiAgICAgICA8L2Rpdj5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9kaXY+XG4gKiA8L2ZpbGU+XG4gKlxuICogPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICogICBhbmd1bGFyLm1vZHVsZSgnbXlTY2VBcHAnLCBbJ25nU2FuaXRpemUnXSlcbiAqICAgICAuY29udHJvbGxlcignQXBwQ29udHJvbGxlcicsIFsnJGh0dHAnLCAnJHRlbXBsYXRlQ2FjaGUnLCAnJHNjZScsXG4gKiAgICAgICBmdW5jdGlvbigkaHR0cCwgJHRlbXBsYXRlQ2FjaGUsICRzY2UpIHtcbiAqICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICogICAgICAgICAkaHR0cC5nZXQoXCJ0ZXN0X2RhdGEuanNvblwiLCB7Y2FjaGU6ICR0ZW1wbGF0ZUNhY2hlfSkuc3VjY2VzcyhmdW5jdGlvbih1c2VyQ29tbWVudHMpIHtcbiAqICAgICAgICAgICBzZWxmLnVzZXJDb21tZW50cyA9IHVzZXJDb21tZW50cztcbiAqICAgICAgICAgfSk7XG4gKiAgICAgICAgIHNlbGYuZXhwbGljaXRseVRydXN0ZWRIdG1sID0gJHNjZS50cnVzdEFzSHRtbChcbiAqICAgICAgICAgICAgICc8c3BhbiBvbm1vdXNlb3Zlcj1cInRoaXMudGV4dENvbnRlbnQ9JnF1b3Q7RXhwbGljaXRseSB0cnVzdGVkIEhUTUwgYnlwYXNzZXMgJyArXG4gKiAgICAgICAgICAgICAnc2FuaXRpemF0aW9uLiZxdW90O1wiPkhvdmVyIG92ZXIgdGhpcyB0ZXh0Ljwvc3Bhbj4nKTtcbiAqICAgICAgIH1dKTtcbiAqIDwvZmlsZT5cbiAqXG4gKiA8ZmlsZSBuYW1lPVwidGVzdF9kYXRhLmpzb25cIj5cbiAqIFtcbiAqICAgeyBcIm5hbWVcIjogXCJBbGljZVwiLFxuICogICAgIFwiaHRtbENvbW1lbnRcIjpcbiAqICAgICAgICAgXCI8c3BhbiBvbm1vdXNlb3Zlcj0ndGhpcy50ZXh0Q29udGVudD1cXFwiUFdOM0QhXFxcIic+SXMgPGk+YW55b25lPC9pPiByZWFkaW5nIHRoaXM/PC9zcGFuPlwiXG4gKiAgIH0sXG4gKiAgIHsgXCJuYW1lXCI6IFwiQm9iXCIsXG4gKiAgICAgXCJodG1sQ29tbWVudFwiOiBcIjxpPlllcyE8L2k+ICBBbSBJIHRoZSBvbmx5IG90aGVyIG9uZT9cIlxuICogICB9XG4gKiBdXG4gKiA8L2ZpbGU+XG4gKlxuICogPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICBkZXNjcmliZSgnU0NFIGRvYyBkZW1vJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgaXQoJ3Nob3VsZCBzYW5pdGl6ZSB1bnRydXN0ZWQgdmFsdWVzJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICBleHBlY3QoZWxlbWVudC5hbGwoYnkuY3NzKCcuaHRtbENvbW1lbnQnKSkuZmlyc3QoKS5nZXRJbm5lckh0bWwoKSlcbiAqICAgICAgICAgICAudG9CZSgnPHNwYW4+SXMgPGk+YW55b25lPC9pPiByZWFkaW5nIHRoaXM/PC9zcGFuPicpO1xuICogICAgIH0pO1xuICpcbiAqICAgICBpdCgnc2hvdWxkIE5PVCBzYW5pdGl6ZSBleHBsaWNpdGx5IHRydXN0ZWQgdmFsdWVzJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZXhwbGljaXRseVRydXN0ZWRIdG1sJykpLmdldElubmVySHRtbCgpKS50b0JlKFxuICogICAgICAgICAgICc8c3BhbiBvbm1vdXNlb3Zlcj1cInRoaXMudGV4dENvbnRlbnQ9JnF1b3Q7RXhwbGljaXRseSB0cnVzdGVkIEhUTUwgYnlwYXNzZXMgJyArXG4gKiAgICAgICAgICAgJ3Nhbml0aXphdGlvbi4mcXVvdDtcIj5Ib3ZlciBvdmVyIHRoaXMgdGV4dC48L3NwYW4+Jyk7XG4gKiAgICAgfSk7XG4gKiAgIH0pO1xuICogPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqXG4gKlxuICogIyMgQ2FuIEkgZGlzYWJsZSBTQ0UgY29tcGxldGVseT9cbiAqXG4gKiBZZXMsIHlvdSBjYW4uICBIb3dldmVyLCB0aGlzIGlzIHN0cm9uZ2x5IGRpc2NvdXJhZ2VkLiAgU0NFIGdpdmVzIHlvdSBhIGxvdCBvZiBzZWN1cml0eSBiZW5lZml0c1xuICogZm9yIGxpdHRsZSBjb2Rpbmcgb3ZlcmhlYWQuICBJdCB3aWxsIGJlIG11Y2ggaGFyZGVyIHRvIHRha2UgYW4gU0NFIGRpc2FibGVkIGFwcGxpY2F0aW9uIGFuZFxuICogZWl0aGVyIHNlY3VyZSBpdCBvbiB5b3VyIG93biBvciBlbmFibGUgU0NFIGF0IGEgbGF0ZXIgc3RhZ2UuICBJdCBtaWdodCBtYWtlIHNlbnNlIHRvIGRpc2FibGUgU0NFXG4gKiBmb3IgY2FzZXMgd2hlcmUgeW91IGhhdmUgYSBsb3Qgb2YgZXhpc3RpbmcgY29kZSB0aGF0IHdhcyB3cml0dGVuIGJlZm9yZSBTQ0Ugd2FzIGludHJvZHVjZWQgYW5kXG4gKiB5b3UncmUgbWlncmF0aW5nIHRoZW0gYSBtb2R1bGUgYXQgYSB0aW1lLlxuICpcbiAqIFRoYXQgc2FpZCwgaGVyZSdzIGhvdyB5b3UgY2FuIGNvbXBsZXRlbHkgZGlzYWJsZSBTQ0U6XG4gKlxuICogYGBgXG4gKiBhbmd1bGFyLm1vZHVsZSgnbXlBcHBXaXRoU2NlRGlzYWJsZWRteUFwcCcsIFtdKS5jb25maWcoZnVuY3Rpb24oJHNjZVByb3ZpZGVyKSB7XG4gKiAgIC8vIENvbXBsZXRlbHkgZGlzYWJsZSBTQ0UuICBGb3IgZGVtb25zdHJhdGlvbiBwdXJwb3NlcyBvbmx5IVxuICogICAvLyBEbyBub3QgdXNlIGluIG5ldyBwcm9qZWN0cy5cbiAqICAgJHNjZVByb3ZpZGVyLmVuYWJsZWQoZmFsc2UpO1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKi9cbi8qIGpzaGludCBtYXhsZW46IDEwMCAqL1xuXG5mdW5jdGlvbiAkU2NlUHJvdmlkZXIoKSB7XG4gIHZhciBlbmFibGVkID0gdHJ1ZTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkc2NlUHJvdmlkZXIjZW5hYmxlZFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB2YWx1ZSBJZiBwcm92aWRlZCwgdGhlbiBlbmFibGVzL2Rpc2FibGVzIFNDRS5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiBTQ0UgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRW5hYmxlcy9kaXNhYmxlcyBTQ0UgYW5kIHJldHVybnMgdGhlIGN1cnJlbnQgdmFsdWUuXG4gICAqL1xuICB0aGlzLmVuYWJsZWQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBlbmFibGVkID0gISF2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGVuYWJsZWQ7XG4gIH07XG5cblxuICAvKiBEZXNpZ24gbm90ZXMgb24gdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gZm9yIFNDRS5cbiAgICpcbiAgICogVGhlIEFQSSBjb250cmFjdCBmb3IgdGhlIFNDRSBkZWxlZ2F0ZVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIFRoZSBTQ0UgZGVsZWdhdGUgb2JqZWN0IG11c3QgcHJvdmlkZSB0aGUgZm9sbG93aW5nIDMgbWV0aG9kczpcbiAgICpcbiAgICogLSB0cnVzdEFzKGNvbnRleHRFbnVtLCB2YWx1ZSlcbiAgICogICAgIFRoaXMgbWV0aG9kIGlzIHVzZWQgdG8gdGVsbCB0aGUgU0NFIHNlcnZpY2UgdGhhdCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgT0sgdG8gdXNlIGluIHRoZVxuICAgKiAgICAgY29udGV4dHMgc3BlY2lmaWVkIGJ5IGNvbnRleHRFbnVtLiAgSXQgbXVzdCByZXR1cm4gYW4gb2JqZWN0IHRoYXQgd2lsbCBiZSBhY2NlcHRlZCBieVxuICAgKiAgICAgZ2V0VHJ1c3RlZCgpIGZvciBhIGNvbXBhdGlibGUgY29udGV4dEVudW0gYW5kIHJldHVybiB0aGlzIHZhbHVlLlxuICAgKlxuICAgKiAtIHZhbHVlT2YodmFsdWUpXG4gICAqICAgICBGb3IgdmFsdWVzIHRoYXQgd2VyZSBub3QgcHJvZHVjZWQgYnkgdHJ1c3RBcygpLCByZXR1cm4gdGhlbSBhcyBpcy4gIEZvciB2YWx1ZXMgdGhhdCB3ZXJlXG4gICAqICAgICBwcm9kdWNlZCBieSB0cnVzdEFzKCksIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyBpbnB1dCB2YWx1ZSB0byB0cnVzdEFzLiAgQmFzaWNhbGx5LCBpZlxuICAgKiAgICAgdHJ1c3RBcyBpcyB3cmFwcGluZyB0aGUgZ2l2ZW4gdmFsdWVzIGludG8gc29tZSB0eXBlLCB0aGlzIG9wZXJhdGlvbiB1bndyYXBzIGl0IHdoZW4gZ2l2ZW5cbiAgICogICAgIHN1Y2ggYSB2YWx1ZS5cbiAgICpcbiAgICogLSBnZXRUcnVzdGVkKGNvbnRleHRFbnVtLCB2YWx1ZSlcbiAgICogICAgIFRoaXMgZnVuY3Rpb24gc2hvdWxkIHJldHVybiB0aGUgYSB2YWx1ZSB0aGF0IGlzIHNhZmUgdG8gdXNlIGluIHRoZSBjb250ZXh0IHNwZWNpZmllZCBieVxuICAgKiAgICAgY29udGV4dEVudW0gb3IgdGhyb3cgYW5kIGV4Y2VwdGlvbiBvdGhlcndpc2UuXG4gICAqXG4gICAqIE5PVEU6IFRoaXMgY29udHJhY3QgZGVsaWJlcmF0ZWx5IGRvZXMgTk9UIHN0YXRlIHRoYXQgdmFsdWVzIHJldHVybmVkIGJ5IHRydXN0QXMoKSBtdXN0IGJlXG4gICAqIG9wYXF1ZSBvciB3cmFwcGVkIGluIHNvbWUgaG9sZGVyIG9iamVjdC4gIFRoYXQgaGFwcGVucyB0byBiZSBhbiBpbXBsZW1lbnRhdGlvbiBkZXRhaWwuICBGb3JcbiAgICogaW5zdGFuY2UsIGFuIGltcGxlbWVudGF0aW9uIGNvdWxkIG1haW50YWluIGEgcmVnaXN0cnkgb2YgYWxsIHRydXN0ZWQgb2JqZWN0cyBieSBjb250ZXh0LiAgSW5cbiAgICogc3VjaCBhIGNhc2UsIHRydXN0QXMoKSB3b3VsZCByZXR1cm4gdGhlIHNhbWUgb2JqZWN0IHRoYXQgd2FzIHBhc3NlZCBpbi4gIGdldFRydXN0ZWQoKSB3b3VsZFxuICAgKiByZXR1cm4gdGhlIHNhbWUgb2JqZWN0IHBhc3NlZCBpbiBpZiBpdCB3YXMgZm91bmQgaW4gdGhlIHJlZ2lzdHJ5IHVuZGVyIGEgY29tcGF0aWJsZSBjb250ZXh0IG9yXG4gICAqIHRocm93IGFuIGV4Y2VwdGlvbiBvdGhlcndpc2UuICBBbiBpbXBsZW1lbnRhdGlvbiBtaWdodCBvbmx5IHdyYXAgdmFsdWVzIHNvbWUgb2YgdGhlIHRpbWUgYmFzZWRcbiAgICogb24gc29tZSBjcml0ZXJpYS4gIGdldFRydXN0ZWQoKSBtaWdodCByZXR1cm4gYSB2YWx1ZSBhbmQgbm90IHRocm93IGFuIGV4Y2VwdGlvbiBmb3Igc3BlY2lhbFxuICAgKiBjb25zdGFudHMgb3Igb2JqZWN0cyBldmVuIGlmIG5vdCB3cmFwcGVkLiAgQWxsIHN1Y2ggaW1wbGVtZW50YXRpb25zIGZ1bGZpbGwgdGhpcyBjb250cmFjdC5cbiAgICpcbiAgICpcbiAgICogQSBub3RlIG9uIHRoZSBpbmhlcml0YW5jZSBtb2RlbCBmb3IgU0NFIGNvbnRleHRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBJJ3ZlIHVzZWQgaW5oZXJpdGFuY2UgYW5kIG1hZGUgUkVTT1VSQ0VfVVJMIHdyYXBwZWQgdHlwZXMgYSBzdWJ0eXBlIG9mIFVSTCB3cmFwcGVkIHR5cGVzLiAgVGhpc1xuICAgKiBpcyBwdXJlbHkgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlscy5cbiAgICpcbiAgICogVGhlIGNvbnRyYWN0IGlzIHNpbXBseSB0aGlzOlxuICAgKlxuICAgKiAgICAgZ2V0VHJ1c3RlZCgkc2NlLlJFU09VUkNFX1VSTCwgdmFsdWUpIHN1Y2NlZWRpbmcgaW1wbGllcyB0aGF0IGdldFRydXN0ZWQoJHNjZS5VUkwsIHZhbHVlKVxuICAgKiAgICAgd2lsbCBhbHNvIHN1Y2NlZWQuXG4gICAqXG4gICAqIEluaGVyaXRhbmNlIGhhcHBlbnMgdG8gY2FwdHVyZSB0aGlzIGluIGEgbmF0dXJhbCB3YXkuICBJbiBzb21lIGZ1dHVyZSwgd2VcbiAgICogbWF5IG5vdCB1c2UgaW5oZXJpdGFuY2UgYW55bW9yZS4gIFRoYXQgaXMgT0sgYmVjYXVzZSBubyBjb2RlIG91dHNpZGUgb2ZcbiAgICogc2NlLmpzIGFuZCBzY2VTcGVjcy5qcyB3b3VsZCBuZWVkIHRvIGJlIGF3YXJlIG9mIHRoaXMgZGV0YWlsLlxuICAgKi9cblxuICB0aGlzLiRnZXQgPSBbJyRwYXJzZScsICckc2NlRGVsZWdhdGUnLCBmdW5jdGlvbihcbiAgICAgICAgICAgICAgICAkcGFyc2UsICAgJHNjZURlbGVnYXRlKSB7XG4gICAgLy8gUHJlcmVxOiBFbnN1cmUgdGhhdCB3ZSdyZSBub3QgcnVubmluZyBpbiBJRTwxMSBxdWlya3MgbW9kZS4gIEluIHRoYXQgbW9kZSwgSUUgPCAxMSBhbGxvd1xuICAgIC8vIHRoZSBcImV4cHJlc3Npb24oamF2YXNjcmlwdCBleHByZXNzaW9uKVwiIHN5bnRheCB3aGljaCBpcyBpbnNlY3VyZS5cbiAgICBpZiAoZW5hYmxlZCAmJiBtc2llIDwgOCkge1xuICAgICAgdGhyb3cgJHNjZU1pbkVycignaWVxdWlya3MnLFxuICAgICAgICAnU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgZG9lcyBub3Qgc3VwcG9ydCBJbnRlcm5ldCBFeHBsb3JlciB2ZXJzaW9uIDwgMTEgaW4gcXVpcmtzICcgK1xuICAgICAgICAnbW9kZS4gIFlvdSBjYW4gZml4IHRoaXMgYnkgYWRkaW5nIHRoZSB0ZXh0IDwhZG9jdHlwZSBodG1sPiB0byB0aGUgdG9wIG9mIHlvdXIgSFRNTCAnICtcbiAgICAgICAgJ2RvY3VtZW50LiAgU2VlIGh0dHA6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nLiRzY2UgZm9yIG1vcmUgaW5mb3JtYXRpb24uJyk7XG4gICAgfVxuXG4gICAgdmFyIHNjZSA9IHNoYWxsb3dDb3B5KFNDRV9DT05URVhUUyk7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNpc0VuYWJsZWRcbiAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAqXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBTQ0UgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLiAgSWYgeW91IHdhbnQgdG8gc2V0IHRoZSB2YWx1ZSwgeW91XG4gICAgICogaGF2ZSB0byBkbyBpdCBhdCBtb2R1bGUgY29uZmlnIHRpbWUgb24ge0BsaW5rIG5nLiRzY2VQcm92aWRlciAkc2NlUHJvdmlkZXJ9LlxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiBTQ0UgaXMgZW5hYmxlZC5cbiAgICAgKi9cbiAgICBzY2UuaXNFbmFibGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZW5hYmxlZDtcbiAgICB9O1xuICAgIHNjZS50cnVzdEFzID0gJHNjZURlbGVnYXRlLnRydXN0QXM7XG4gICAgc2NlLmdldFRydXN0ZWQgPSAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZDtcbiAgICBzY2UudmFsdWVPZiA9ICRzY2VEZWxlZ2F0ZS52YWx1ZU9mO1xuXG4gICAgaWYgKCFlbmFibGVkKSB7XG4gICAgICBzY2UudHJ1c3RBcyA9IHNjZS5nZXRUcnVzdGVkID0gZnVuY3Rpb24odHlwZSwgdmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuICAgICAgc2NlLnZhbHVlT2YgPSBpZGVudGl0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNwYXJzZUFzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBDb252ZXJ0cyBBbmd1bGFyIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGludG8gYSBmdW5jdGlvbi4gIFRoaXMgaXMgbGlrZSB7QGxpbmtcbiAgICAgKiBuZy4kcGFyc2UgJHBhcnNlfSBhbmQgaXMgaWRlbnRpY2FsIHdoZW4gdGhlIGV4cHJlc3Npb24gaXMgYSBsaXRlcmFsIGNvbnN0YW50LiAgT3RoZXJ3aXNlLCBpdFxuICAgICAqIHdyYXBzIHRoZSBleHByZXNzaW9uIGluIGEgY2FsbCB0byB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZCgqdHlwZSosXG4gICAgICogKnJlc3VsdCopfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGtpbmQgb2YgU0NFIGNvbnRleHQgaW4gd2hpY2ggdGhpcyByZXN1bHQgd2lsbCBiZSB1c2VkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3NcbiAgICAgKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluXG4gICAgICogICAgICBgY29udGV4dGAuXG4gICAgICovXG4gICAgc2NlLnBhcnNlQXMgPSBmdW5jdGlvbiBzY2VQYXJzZUFzKHR5cGUsIGV4cHIpIHtcbiAgICAgIHZhciBwYXJzZWQgPSAkcGFyc2UoZXhwcik7XG4gICAgICBpZiAocGFyc2VkLmxpdGVyYWwgJiYgcGFyc2VkLmNvbnN0YW50KSB7XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJHBhcnNlKGV4cHIsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHNjZS5nZXRUcnVzdGVkKHR5cGUsIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3RydXN0QXNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIERlbGVnYXRlcyB0byB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0uICBBcyBzdWNoLFxuICAgICAqIHJldHVybnMgYW4gb2JqZWN0IHRoYXQgaXMgdHJ1c3RlZCBieSBhbmd1bGFyIGZvciB1c2UgaW4gc3BlY2lmaWVkIHN0cmljdCBjb250ZXh0dWFsXG4gICAgICogZXNjYXBpbmcgY29udGV4dHMgKHN1Y2ggYXMgbmctYmluZC1odG1sLCBuZy1pbmNsdWRlLCBhbnkgc3JjIGF0dHJpYnV0ZVxuICAgICAqIGludGVycG9sYXRpb24sIGFueSBkb20gZXZlbnQgYmluZGluZyBhdHRyaWJ1dGUgaW50ZXJwb2xhdGlvbiBzdWNoIGFzIGZvciBvbmNsaWNrLCAgZXRjLilcbiAgICAgKiB0aGF0IHVzZXMgdGhlIHByb3ZpZGVkIHZhbHVlLiAgU2VlICoge0BsaW5rIG5nLiRzY2UgJHNjZX0gZm9yIGVuYWJsaW5nIHN0cmljdCBjb250ZXh0dWFsXG4gICAgICogZXNjYXBpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUga2luZCBvZiBjb250ZXh0IGluIHdoaWNoIHRoaXMgdmFsdWUgaXMgc2FmZSBmb3IgdXNlLiAgZS5nLiB1cmwsXG4gICAgICogICByZXNvdXJjZVVybCwgaHRtbCwganMgYW5kIGNzcy5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0aGF0IHRoYXQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgdHJ1c3RlZC9zYWZlLlxuICAgICAqIEByZXR1cm5zIHsqfSBBIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgdG8gc3RhbmQgaW4gZm9yIHRoZSBwcm92aWRlZCBgdmFsdWVgIGluIHBsYWNlc1xuICAgICAqIHdoZXJlIEFuZ3VsYXIgZXhwZWN0cyBhICRzY2UudHJ1c3RBcygpIHJldHVybiB2YWx1ZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3RydXN0QXNIdG1sXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc0h0bWwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLkhUTUwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB0cnVzdEFzLlxuICAgICAqIEByZXR1cm5zIHsqfSBBbiBvYmplY3QgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWRIdG1sXG4gICAgICogICAgICRzY2UuZ2V0VHJ1c3RlZEh0bWwodmFsdWUpfSB0byBvYnRhaW4gdGhlIG9yaWdpbmFsIHZhbHVlLiAgKHByaXZpbGVnZWQgZGlyZWN0aXZlc1xuICAgICAqICAgICBvbmx5IGFjY2VwdCBleHByZXNzaW9ucyB0aGF0IGFyZSBlaXRoZXIgbGl0ZXJhbCBjb25zdGFudHMgb3IgYXJlIHRoZVxuICAgICAqICAgICByZXR1cm4gdmFsdWUgb2Yge0BsaW5rIG5nLiRzY2UjdHJ1c3RBcyAkc2NlLnRydXN0QXN9LilcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3RydXN0QXNVcmxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzVXJsKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5VUkwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB0cnVzdEFzLlxuICAgICAqIEByZXR1cm5zIHsqfSBBbiBvYmplY3QgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWRVcmxcbiAgICAgKiAgICAgJHNjZS5nZXRUcnVzdGVkVXJsKHZhbHVlKX0gdG8gb2J0YWluIHRoZSBvcmlnaW5hbCB2YWx1ZS4gIChwcml2aWxlZ2VkIGRpcmVjdGl2ZXNcbiAgICAgKiAgICAgb25seSBhY2NlcHQgZXhwcmVzc2lvbnMgdGhhdCBhcmUgZWl0aGVyIGxpdGVyYWwgY29uc3RhbnRzIG9yIGFyZSB0aGVcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlIG9mIHtAbGluayBuZy4kc2NlI3RydXN0QXMgJHNjZS50cnVzdEFzfS4pXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzUmVzb3VyY2VVcmxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzUmVzb3VyY2VVcmwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLlJFU09VUkNFX1VSTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHRydXN0QXMuXG4gICAgICogQHJldHVybnMgeyp9IEFuIG9iamVjdCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8ge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZFJlc291cmNlVXJsXG4gICAgICogICAgICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsKHZhbHVlKX0gdG8gb2J0YWluIHRoZSBvcmlnaW5hbCB2YWx1ZS4gIChwcml2aWxlZ2VkIGRpcmVjdGl2ZXNcbiAgICAgKiAgICAgb25seSBhY2NlcHQgZXhwcmVzc2lvbnMgdGhhdCBhcmUgZWl0aGVyIGxpdGVyYWwgY29uc3RhbnRzIG9yIGFyZSB0aGUgcmV0dXJuXG4gICAgICogICAgIHZhbHVlIG9mIHtAbGluayBuZy4kc2NlI3RydXN0QXMgJHNjZS50cnVzdEFzfS4pXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzSnNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzSnModmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLkpTLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdHJ1c3RBcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gQW4gb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCB0byB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkSnNcbiAgICAgKiAgICAgJHNjZS5nZXRUcnVzdGVkSnModmFsdWUpfSB0byBvYnRhaW4gdGhlIG9yaWdpbmFsIHZhbHVlLiAgKHByaXZpbGVnZWQgZGlyZWN0aXZlc1xuICAgICAqICAgICBvbmx5IGFjY2VwdCBleHByZXNzaW9ucyB0aGF0IGFyZSBlaXRoZXIgbGl0ZXJhbCBjb25zdGFudHMgb3IgYXJlIHRoZVxuICAgICAqICAgICByZXR1cm4gdmFsdWUgb2Yge0BsaW5rIG5nLiRzY2UjdHJ1c3RBcyAkc2NlLnRydXN0QXN9LilcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIERlbGVnYXRlcyB0byB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkYH0uICBBcyBzdWNoLFxuICAgICAqIHRha2VzIHRoZSByZXN1bHQgb2YgYSB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzIGAkc2NlLnRydXN0QXNgfSgpIGNhbGwgYW5kIHJldHVybnMgdGhlXG4gICAgICogb3JpZ2luYWxseSBzdXBwbGllZCB2YWx1ZSBpZiB0aGUgcXVlcmllZCBjb250ZXh0IHR5cGUgaXMgYSBzdXBlcnR5cGUgb2YgdGhlIGNyZWF0ZWQgdHlwZS5cbiAgICAgKiBJZiB0aGlzIGNvbmRpdGlvbiBpc24ndCBzYXRpc2ZpZWQsIHRocm93cyBhbiBleGNlcHRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUga2luZCBvZiBjb250ZXh0IGluIHdoaWNoIHRoaXMgdmFsdWUgaXMgdG8gYmUgdXNlZC5cbiAgICAgKiBAcGFyYW0geyp9IG1heWJlVHJ1c3RlZCBUaGUgcmVzdWx0IG9mIGEgcHJpb3Ige0BsaW5rIG5nLiRzY2UjdHJ1c3RBcyBgJHNjZS50cnVzdEFzYH1cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsLlxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgdmFsdWUgdGhlIHdhcyBvcmlnaW5hbGx5IHByb3ZpZGVkIHRvXG4gICAgICogICAgICAgICAgICAgIHtAbGluayBuZy4kc2NlI3RydXN0QXMgYCRzY2UudHJ1c3RBc2B9IGlmIHZhbGlkIGluIHRoaXMgY29udGV4dC5cbiAgICAgKiAgICAgICAgICAgICAgT3RoZXJ3aXNlLCB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZEh0bWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkSHRtbCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuSFRNTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuXG4gICAgICogQHJldHVybnMgeyp9IFRoZSByZXR1cm4gdmFsdWUgb2YgYCRzY2UuZ2V0VHJ1c3RlZCgkc2NlLkhUTUwsIHZhbHVlKWBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRDc3NcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkQ3NzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZCBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWQoJHNjZS5DU1MsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGAkc2NlLmdldFRydXN0ZWRgLlxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5DU1MsIHZhbHVlKWBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRVcmxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkVXJsKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZCBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWQoJHNjZS5VUkwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGAkc2NlLmdldFRydXN0ZWRgLlxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5VUkwsIHZhbHVlKWBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRSZXNvdXJjZVVybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWRgLlxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRKc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRKcyh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuSlMsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGAkc2NlLmdldFRydXN0ZWRgLlxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5KUywgdmFsdWUpYFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjcGFyc2VBc0h0bWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzSHRtbChleHByZXNzaW9uIHN0cmluZylgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNwYXJzZUFzIGAkc2NlLnBhcnNlQXMoJHNjZS5IVE1MLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS5cbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICAgICAqXG4gICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5nc1xuICAgICAqICAgICAgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW5cbiAgICAgKiAgICAgIGBjb250ZXh0YC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNDc3NcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzQ3NzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlI3BhcnNlQXMgYCRzY2UucGFyc2VBcygkc2NlLkNTUywgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3NcbiAgICAgKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluXG4gICAgICogICAgICBgY29udGV4dGAuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNwYXJzZUFzVXJsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc1VybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNwYXJzZUFzIGAkc2NlLnBhcnNlQXMoJHNjZS5VUkwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAgICpcbiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXG4gICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpblxuICAgICAqICAgICAgYGNvbnRleHRgLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjcGFyc2VBc1Jlc291cmNlVXJsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc1Jlc291cmNlVXJsKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlI3BhcnNlQXMgYCRzY2UucGFyc2VBcygkc2NlLlJFU09VUkNFX1VSTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3NcbiAgICAgKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluXG4gICAgICogICAgICBgY29udGV4dGAuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNwYXJzZUFzSnNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzSnModmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuSlMsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAgICpcbiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXG4gICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpblxuICAgICAqICAgICAgYGNvbnRleHRgLlxuICAgICAqL1xuXG4gICAgLy8gU2hvcnRoYW5kIGRlbGVnYXRpb25zLlxuICAgIHZhciBwYXJzZSA9IHNjZS5wYXJzZUFzLFxuICAgICAgICBnZXRUcnVzdGVkID0gc2NlLmdldFRydXN0ZWQsXG4gICAgICAgIHRydXN0QXMgPSBzY2UudHJ1c3RBcztcblxuICAgIGZvckVhY2goU0NFX0NPTlRFWFRTLCBmdW5jdGlvbihlbnVtVmFsdWUsIG5hbWUpIHtcbiAgICAgIHZhciBsTmFtZSA9IGxvd2VyY2FzZShuYW1lKTtcbiAgICAgIHNjZVtjYW1lbENhc2UoXCJwYXJzZV9hc19cIiArIGxOYW1lKV0gPSBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIHJldHVybiBwYXJzZShlbnVtVmFsdWUsIGV4cHIpO1xuICAgICAgfTtcbiAgICAgIHNjZVtjYW1lbENhc2UoXCJnZXRfdHJ1c3RlZF9cIiArIGxOYW1lKV0gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZ2V0VHJ1c3RlZChlbnVtVmFsdWUsIHZhbHVlKTtcbiAgICAgIH07XG4gICAgICBzY2VbY2FtZWxDYXNlKFwidHJ1c3RfYXNfXCIgKyBsTmFtZSldID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRydXN0QXMoZW51bVZhbHVlLCB2YWx1ZSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNjZTtcbiAgfV07XG59XG5cbi8qKlxuICogISEhIFRoaXMgaXMgYW4gdW5kb2N1bWVudGVkIFwicHJpdmF0ZVwiIHNlcnZpY2UgISEhXG4gKlxuICogQG5hbWUgJHNuaWZmZXJcbiAqIEByZXF1aXJlcyAkd2luZG93XG4gKiBAcmVxdWlyZXMgJGRvY3VtZW50XG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBoaXN0b3J5IERvZXMgdGhlIGJyb3dzZXIgc3VwcG9ydCBodG1sNSBoaXN0b3J5IGFwaSA/XG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHRyYW5zaXRpb25zIERvZXMgdGhlIGJyb3dzZXIgc3VwcG9ydCBDU1MgdHJhbnNpdGlvbiBldmVudHMgP1xuICogQHByb3BlcnR5IHtib29sZWFufSBhbmltYXRpb25zIERvZXMgdGhlIGJyb3dzZXIgc3VwcG9ydCBDU1MgYW5pbWF0aW9uIGV2ZW50cyA/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIGlzIHZlcnkgc2ltcGxlIGltcGxlbWVudGF0aW9uIG9mIHRlc3RpbmcgYnJvd3NlcidzIGZlYXR1cmVzLlxuICovXG5mdW5jdGlvbiAkU25pZmZlclByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJGRvY3VtZW50JywgZnVuY3Rpb24oJHdpbmRvdywgJGRvY3VtZW50KSB7XG4gICAgdmFyIGV2ZW50U3VwcG9ydCA9IHt9LFxuICAgICAgICBhbmRyb2lkID1cbiAgICAgICAgICB0b0ludCgoL2FuZHJvaWQgKFxcZCspLy5leGVjKGxvd2VyY2FzZSgoJHdpbmRvdy5uYXZpZ2F0b3IgfHwge30pLnVzZXJBZ2VudCkpIHx8IFtdKVsxXSksXG4gICAgICAgIGJveGVlID0gL0JveGVlL2kudGVzdCgoJHdpbmRvdy5uYXZpZ2F0b3IgfHwge30pLnVzZXJBZ2VudCksXG4gICAgICAgIGRvY3VtZW50ID0gJGRvY3VtZW50WzBdIHx8IHt9LFxuICAgICAgICB2ZW5kb3JQcmVmaXgsXG4gICAgICAgIHZlbmRvclJlZ2V4ID0gL14oTW96fHdlYmtpdHxtcykoPz1bQS1aXSkvLFxuICAgICAgICBib2R5U3R5bGUgPSBkb2N1bWVudC5ib2R5ICYmIGRvY3VtZW50LmJvZHkuc3R5bGUsXG4gICAgICAgIHRyYW5zaXRpb25zID0gZmFsc2UsXG4gICAgICAgIGFuaW1hdGlvbnMgPSBmYWxzZSxcbiAgICAgICAgbWF0Y2g7XG5cbiAgICBpZiAoYm9keVN0eWxlKSB7XG4gICAgICBmb3IgKHZhciBwcm9wIGluIGJvZHlTdHlsZSkge1xuICAgICAgICBpZiAobWF0Y2ggPSB2ZW5kb3JSZWdleC5leGVjKHByb3ApKSB7XG4gICAgICAgICAgdmVuZG9yUHJlZml4ID0gbWF0Y2hbMF07XG4gICAgICAgICAgdmVuZG9yUHJlZml4ID0gdmVuZG9yUHJlZml4LnN1YnN0cigwLCAxKS50b1VwcGVyQ2FzZSgpICsgdmVuZG9yUHJlZml4LnN1YnN0cigxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXZlbmRvclByZWZpeCkge1xuICAgICAgICB2ZW5kb3JQcmVmaXggPSAoJ1dlYmtpdE9wYWNpdHknIGluIGJvZHlTdHlsZSkgJiYgJ3dlYmtpdCc7XG4gICAgICB9XG5cbiAgICAgIHRyYW5zaXRpb25zID0gISEoKCd0cmFuc2l0aW9uJyBpbiBib2R5U3R5bGUpIHx8ICh2ZW5kb3JQcmVmaXggKyAnVHJhbnNpdGlvbicgaW4gYm9keVN0eWxlKSk7XG4gICAgICBhbmltYXRpb25zICA9ICEhKCgnYW5pbWF0aW9uJyBpbiBib2R5U3R5bGUpIHx8ICh2ZW5kb3JQcmVmaXggKyAnQW5pbWF0aW9uJyBpbiBib2R5U3R5bGUpKTtcblxuICAgICAgaWYgKGFuZHJvaWQgJiYgKCF0cmFuc2l0aW9ucyB8fCAgIWFuaW1hdGlvbnMpKSB7XG4gICAgICAgIHRyYW5zaXRpb25zID0gaXNTdHJpbmcoYm9keVN0eWxlLndlYmtpdFRyYW5zaXRpb24pO1xuICAgICAgICBhbmltYXRpb25zID0gaXNTdHJpbmcoYm9keVN0eWxlLndlYmtpdEFuaW1hdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICByZXR1cm4ge1xuICAgICAgLy8gQW5kcm9pZCBoYXMgaGlzdG9yeS5wdXNoU3RhdGUsIGJ1dCBpdCBkb2VzIG5vdCB1cGRhdGUgbG9jYXRpb24gY29ycmVjdGx5XG4gICAgICAvLyBzbyBsZXQncyBub3QgdXNlIHRoZSBoaXN0b3J5IEFQSSBhdCBhbGwuXG4gICAgICAvLyBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvYW5kcm9pZC9pc3N1ZXMvZGV0YWlsP2lkPTE3NDcxXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy85MDRcblxuICAgICAgLy8gb2xkZXIgd2Via2l0IGJyb3dzZXIgKDUzMy45KSBvbiBCb3hlZSBib3ggaGFzIGV4YWN0bHkgdGhlIHNhbWUgcHJvYmxlbSBhcyBBbmRyb2lkIGhhc1xuICAgICAgLy8gc28gbGV0J3Mgbm90IHVzZSB0aGUgaGlzdG9yeSBBUEkgYWxzb1xuICAgICAgLy8gV2UgYXJlIHB1cnBvc2VmdWxseSB1c2luZyBgIShhbmRyb2lkIDwgNClgIHRvIGNvdmVyIHRoZSBjYXNlIHdoZW4gYGFuZHJvaWRgIGlzIHVuZGVmaW5lZFxuICAgICAgLy8ganNoaW50IC1XMDE4XG4gICAgICBoaXN0b3J5OiAhISgkd2luZG93Lmhpc3RvcnkgJiYgJHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSAmJiAhKGFuZHJvaWQgPCA0KSAmJiAhYm94ZWUpLFxuICAgICAgLy8ganNoaW50ICtXMDE4XG4gICAgICBoYXNFdmVudDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgLy8gSUU5IGltcGxlbWVudHMgJ2lucHV0JyBldmVudCBpdCdzIHNvIGZ1YmFyZWQgdGhhdCB3ZSByYXRoZXIgcHJldGVuZCB0aGF0IGl0IGRvZXNuJ3QgaGF2ZVxuICAgICAgICAvLyBpdC4gSW4gcGFydGljdWxhciB0aGUgZXZlbnQgaXMgbm90IGZpcmVkIHdoZW4gYmFja3NwYWNlIG9yIGRlbGV0ZSBrZXkgYXJlIHByZXNzZWQgb3JcbiAgICAgICAgLy8gd2hlbiBjdXQgb3BlcmF0aW9uIGlzIHBlcmZvcm1lZC5cbiAgICAgICAgLy8gSUUxMCsgaW1wbGVtZW50cyAnaW5wdXQnIGV2ZW50IGJ1dCBpdCBlcnJvbmVvdXNseSBmaXJlcyB1bmRlciB2YXJpb3VzIHNpdHVhdGlvbnMsXG4gICAgICAgIC8vIGUuZy4gd2hlbiBwbGFjZWhvbGRlciBjaGFuZ2VzLCBvciBhIGZvcm0gaXMgZm9jdXNlZC5cbiAgICAgICAgaWYgKGV2ZW50ID09PSAnaW5wdXQnICYmIG1zaWUgPD0gMTEpIHJldHVybiBmYWxzZTtcblxuICAgICAgICBpZiAoaXNVbmRlZmluZWQoZXZlbnRTdXBwb3J0W2V2ZW50XSkpIHtcbiAgICAgICAgICB2YXIgZGl2RWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgZXZlbnRTdXBwb3J0W2V2ZW50XSA9ICdvbicgKyBldmVudCBpbiBkaXZFbG07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXZlbnRTdXBwb3J0W2V2ZW50XTtcbiAgICAgIH0sXG4gICAgICBjc3A6IGNzcCgpLFxuICAgICAgdmVuZG9yUHJlZml4OiB2ZW5kb3JQcmVmaXgsXG4gICAgICB0cmFuc2l0aW9uczogdHJhbnNpdGlvbnMsXG4gICAgICBhbmltYXRpb25zOiBhbmltYXRpb25zLFxuICAgICAgYW5kcm9pZDogYW5kcm9pZFxuICAgIH07XG4gIH1dO1xufVxuXG52YXIgJGNvbXBpbGVNaW5FcnIgPSBtaW5FcnIoJyRjb21waWxlJyk7XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICR0ZW1wbGF0ZVJlcXVlc3RcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgJHRlbXBsYXRlUmVxdWVzdGAgc2VydmljZSBydW5zIHNlY3VyaXR5IGNoZWNrcyB0aGVuIGRvd25sb2FkcyB0aGUgcHJvdmlkZWQgdGVtcGxhdGUgdXNpbmdcbiAqIGAkaHR0cGAgYW5kLCB1cG9uIHN1Y2Nlc3MsIHN0b3JlcyB0aGUgY29udGVudHMgaW5zaWRlIG9mIGAkdGVtcGxhdGVDYWNoZWAuIElmIHRoZSBIVFRQIHJlcXVlc3RcbiAqIGZhaWxzIG9yIHRoZSByZXNwb25zZSBkYXRhIG9mIHRoZSBIVFRQIHJlcXVlc3QgaXMgZW1wdHksIGEgYCRjb21waWxlYCBlcnJvciB3aWxsIGJlIHRocm93biAodGhlXG4gKiBleGNlcHRpb24gY2FuIGJlIHRod2FydGVkIGJ5IHNldHRpbmcgdGhlIDJuZCBwYXJhbWV0ZXIgb2YgdGhlIGZ1bmN0aW9uIHRvIHRydWUpLiBOb3RlIHRoYXQgdGhlXG4gKiBjb250ZW50cyBvZiBgJHRlbXBsYXRlQ2FjaGVgIGFyZSB0cnVzdGVkLCBzbyB0aGUgY2FsbCB0byBgJHNjZS5nZXRUcnVzdGVkVXJsKHRwbClgIGlzIG9taXR0ZWRcbiAqIHdoZW4gYHRwbGAgaXMgb2YgdHlwZSBzdHJpbmcgYW5kIGAkdGVtcGxhdGVDYWNoZWAgaGFzIHRoZSBtYXRjaGluZyBlbnRyeS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xUcnVzdGVkUmVzb3VyY2VVcmx9IHRwbCBUaGUgSFRUUCByZXF1ZXN0IHRlbXBsYXRlIFVSTFxuICogQHBhcmFtIHtib29sZWFuPX0gaWdub3JlUmVxdWVzdEVycm9yIFdoZXRoZXIgb3Igbm90IHRvIGlnbm9yZSB0aGUgZXhjZXB0aW9uIHdoZW4gdGhlIHJlcXVlc3QgZmFpbHMgb3IgdGhlIHRlbXBsYXRlIGlzIGVtcHR5XG4gKlxuICogQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIGZvciB0aGUgSFRUUCByZXNwb25zZSBkYXRhIG9mIHRoZSBnaXZlbiBVUkwuXG4gKlxuICogQHByb3BlcnR5IHtudW1iZXJ9IHRvdGFsUGVuZGluZ1JlcXVlc3RzIHRvdGFsIGFtb3VudCBvZiBwZW5kaW5nIHRlbXBsYXRlIHJlcXVlc3RzIGJlaW5nIGRvd25sb2FkZWQuXG4gKi9cbmZ1bmN0aW9uICRUZW1wbGF0ZVJlcXVlc3RQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckdGVtcGxhdGVDYWNoZScsICckaHR0cCcsICckcScsICckc2NlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUsICRodHRwLCAkcSwgJHNjZSkge1xuICAgIGZ1bmN0aW9uIGhhbmRsZVJlcXVlc3RGbih0cGwsIGlnbm9yZVJlcXVlc3RFcnJvcikge1xuICAgICAgaGFuZGxlUmVxdWVzdEZuLnRvdGFsUGVuZGluZ1JlcXVlc3RzKys7XG5cbiAgICAgIC8vIFdlIGNvbnNpZGVyIHRoZSB0ZW1wbGF0ZSBjYWNoZSBob2xkcyBvbmx5IHRydXN0ZWQgdGVtcGxhdGVzLCBzb1xuICAgICAgLy8gdGhlcmUncyBubyBuZWVkIHRvIGdvIHRocm91Z2ggd2hpdGVsaXN0aW5nIGFnYWluIGZvciBrZXlzIHRoYXQgYWxyZWFkeVxuICAgICAgLy8gYXJlIGluY2x1ZGVkIGluIHRoZXJlLiBUaGlzIGFsc28gbWFrZXMgQW5ndWxhciBhY2NlcHQgYW55IHNjcmlwdFxuICAgICAgLy8gZGlyZWN0aXZlLCBubyBtYXR0ZXIgaXRzIG5hbWUuIEhvd2V2ZXIsIHdlIHN0aWxsIG5lZWQgdG8gdW53cmFwIHRydXN0ZWRcbiAgICAgIC8vIHR5cGVzLlxuICAgICAgaWYgKCFpc1N0cmluZyh0cGwpIHx8ICEkdGVtcGxhdGVDYWNoZS5nZXQodHBsKSkge1xuICAgICAgICB0cGwgPSAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybCh0cGwpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdHJhbnNmb3JtUmVzcG9uc2UgPSAkaHR0cC5kZWZhdWx0cyAmJiAkaHR0cC5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZTtcblxuICAgICAgaWYgKGlzQXJyYXkodHJhbnNmb3JtUmVzcG9uc2UpKSB7XG4gICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlID0gdHJhbnNmb3JtUmVzcG9uc2UuZmlsdGVyKGZ1bmN0aW9uKHRyYW5zZm9ybWVyKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWVyICE9PSBkZWZhdWx0SHR0cFJlc3BvbnNlVHJhbnNmb3JtO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAodHJhbnNmb3JtUmVzcG9uc2UgPT09IGRlZmF1bHRIdHRwUmVzcG9uc2VUcmFuc2Zvcm0pIHtcbiAgICAgICAgdHJhbnNmb3JtUmVzcG9uc2UgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgaHR0cE9wdGlvbnMgPSB7XG4gICAgICAgIGNhY2hlOiAkdGVtcGxhdGVDYWNoZSxcbiAgICAgICAgdHJhbnNmb3JtUmVzcG9uc2U6IHRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KHRwbCwgaHR0cE9wdGlvbnMpXG4gICAgICAgIFsnZmluYWxseSddKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGhhbmRsZVJlcXVlc3RGbi50b3RhbFBlbmRpbmdSZXF1ZXN0cy0tO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICR0ZW1wbGF0ZUNhY2hlLnB1dCh0cGwsIHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICB9LCBoYW5kbGVFcnJvcik7XG5cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZUVycm9yKHJlc3ApIHtcbiAgICAgICAgaWYgKCFpZ25vcmVSZXF1ZXN0RXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigndHBsb2FkJywgJ0ZhaWxlZCB0byBsb2FkIHRlbXBsYXRlOiB7MH0gKEhUVFAgc3RhdHVzOiB7MX0gezJ9KScsXG4gICAgICAgICAgICB0cGwsIHJlc3Auc3RhdHVzLCByZXNwLnN0YXR1c1RleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkcS5yZWplY3QocmVzcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlUmVxdWVzdEZuLnRvdGFsUGVuZGluZ1JlcXVlc3RzID0gMDtcblxuICAgIHJldHVybiBoYW5kbGVSZXF1ZXN0Rm47XG4gIH1dO1xufVxuXG5mdW5jdGlvbiAkJFRlc3RhYmlsaXR5UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckYnJvd3NlcicsICckbG9jYXRpb24nLFxuICAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICAgJGJyb3dzZXIsICAgJGxvY2F0aW9uKSB7XG5cbiAgICAvKipcbiAgICAgKiBAbmFtZSAkdGVzdGFiaWxpdHlcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFRoZSBwcml2YXRlICQkdGVzdGFiaWxpdHkgc2VydmljZSBwcm92aWRlcyBhIGNvbGxlY3Rpb24gb2YgbWV0aG9kcyBmb3IgdXNlIHdoZW4gZGVidWdnaW5nXG4gICAgICogb3IgYnkgYXV0b21hdGVkIHRlc3QgYW5kIGRlYnVnZ2luZyB0b29scy5cbiAgICAgKi9cbiAgICB2YXIgdGVzdGFiaWxpdHkgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjZmluZEJpbmRpbmdzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGVsZW1lbnRzIHRoYXQgYXJlIGJvdW5kICh2aWEgbmctYmluZCBvciB7e319KVxuICAgICAqIHRvIGV4cHJlc3Npb25zIG1hdGNoaW5nIHRoZSBpbnB1dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCByb290IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFRoZSBiaW5kaW5nIGV4cHJlc3Npb24gdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtib29sZWFufSBvcHRfZXhhY3RNYXRjaCBJZiB0cnVlLCBvbmx5IHJldHVybnMgZXhhY3QgbWF0Y2hlc1xuICAgICAqICAgICBmb3IgdGhlIGV4cHJlc3Npb24uIEZpbHRlcnMgYW5kIHdoaXRlc3BhY2UgYXJlIGlnbm9yZWQuXG4gICAgICovXG4gICAgdGVzdGFiaWxpdHkuZmluZEJpbmRpbmdzID0gZnVuY3Rpb24oZWxlbWVudCwgZXhwcmVzc2lvbiwgb3B0X2V4YWN0TWF0Y2gpIHtcbiAgICAgIHZhciBiaW5kaW5ncyA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbmctYmluZGluZycpO1xuICAgICAgdmFyIG1hdGNoZXMgPSBbXTtcbiAgICAgIGZvckVhY2goYmluZGluZ3MsIGZ1bmN0aW9uKGJpbmRpbmcpIHtcbiAgICAgICAgdmFyIGRhdGFCaW5kaW5nID0gYW5ndWxhci5lbGVtZW50KGJpbmRpbmcpLmRhdGEoJyRiaW5kaW5nJyk7XG4gICAgICAgIGlmIChkYXRhQmluZGluZykge1xuICAgICAgICAgIGZvckVhY2goZGF0YUJpbmRpbmcsIGZ1bmN0aW9uKGJpbmRpbmdOYW1lKSB7XG4gICAgICAgICAgICBpZiAob3B0X2V4YWN0TWF0Y2gpIHtcbiAgICAgICAgICAgICAgdmFyIG1hdGNoZXIgPSBuZXcgUmVnRXhwKCcoXnxcXFxccyknICsgZXNjYXBlRm9yUmVnZXhwKGV4cHJlc3Npb24pICsgJyhcXFxcc3xcXFxcfHwkKScpO1xuICAgICAgICAgICAgICBpZiAobWF0Y2hlci50ZXN0KGJpbmRpbmdOYW1lKSkge1xuICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaChiaW5kaW5nKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGJpbmRpbmdOYW1lLmluZGV4T2YoZXhwcmVzc2lvbikgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVzLnB1c2goYmluZGluZyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWF0Y2hlcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5hbWUgJCR0ZXN0YWJpbGl0eSNmaW5kTW9kZWxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGVsZW1lbnRzIHRoYXQgYXJlIHR3by13YXkgZm91bmQgdmlhIG5nLW1vZGVsIHRvXG4gICAgICogZXhwcmVzc2lvbnMgbWF0Y2hpbmcgdGhlIGlucHV0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHJvb3QgdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gVGhlIG1vZGVsIGV4cHJlc3Npb24gdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtib29sZWFufSBvcHRfZXhhY3RNYXRjaCBJZiB0cnVlLCBvbmx5IHJldHVybnMgZXhhY3QgbWF0Y2hlc1xuICAgICAqICAgICBmb3IgdGhlIGV4cHJlc3Npb24uXG4gICAgICovXG4gICAgdGVzdGFiaWxpdHkuZmluZE1vZGVscyA9IGZ1bmN0aW9uKGVsZW1lbnQsIGV4cHJlc3Npb24sIG9wdF9leGFjdE1hdGNoKSB7XG4gICAgICB2YXIgcHJlZml4ZXMgPSBbJ25nLScsICdkYXRhLW5nLScsICduZ1xcXFw6J107XG4gICAgICBmb3IgKHZhciBwID0gMDsgcCA8IHByZWZpeGVzLmxlbmd0aDsgKytwKSB7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVFcXVhbHMgPSBvcHRfZXhhY3RNYXRjaCA/ICc9JyA6ICcqPSc7XG4gICAgICAgIHZhciBzZWxlY3RvciA9ICdbJyArIHByZWZpeGVzW3BdICsgJ21vZGVsJyArIGF0dHJpYnV0ZUVxdWFscyArICdcIicgKyBleHByZXNzaW9uICsgJ1wiXSc7XG4gICAgICAgIHZhciBlbGVtZW50cyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICAgIGlmIChlbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gZWxlbWVudHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5hbWUgJCR0ZXN0YWJpbGl0eSNnZXRMb2NhdGlvblxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgZm9yIGdldHRpbmcgdGhlIGxvY2F0aW9uIGluIGEgYnJvd3NlciBhZ25vc3RpYyB3YXkuIFJldHVybnNcbiAgICAgKiAgICAgdGhlIHBhdGgsIHNlYXJjaCwgYW5kIGhhc2guIChlLmcuIC9wYXRoP2E9YiNoYXNoKVxuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LmdldExvY2F0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJGxvY2F0aW9uLnVybCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmFtZSAkJHRlc3RhYmlsaXR5I3NldExvY2F0aW9uXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBmb3IgbmF2aWdhdGluZyB0byBhIGxvY2F0aW9uIHdpdGhvdXQgZG9pbmcgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgbG9jYXRpb24gdXJsIChwYXRoLCBzZWFyY2ggYW5kIGhhc2gsXG4gICAgICogICAgIGUuZy4gL3BhdGg/YT1iI2hhc2gpIHRvIGdvIHRvLlxuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LnNldExvY2F0aW9uID0gZnVuY3Rpb24odXJsKSB7XG4gICAgICBpZiAodXJsICE9PSAkbG9jYXRpb24udXJsKCkpIHtcbiAgICAgICAgJGxvY2F0aW9uLnVybCh1cmwpO1xuICAgICAgICAkcm9vdFNjb3BlLiRkaWdlc3QoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5hbWUgJCR0ZXN0YWJpbGl0eSN3aGVuU3RhYmxlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBDYWxscyB0aGUgY2FsbGJhY2sgd2hlbiAkdGltZW91dCBhbmQgJGh0dHAgcmVxdWVzdHMgYXJlIGNvbXBsZXRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICovXG4gICAgdGVzdGFiaWxpdHkud2hlblN0YWJsZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAkYnJvd3Nlci5ub3RpZnlXaGVuTm9PdXRzdGFuZGluZ1JlcXVlc3RzKGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRlc3RhYmlsaXR5O1xuICB9XTtcbn1cblxuZnVuY3Rpb24gJFRpbWVvdXRQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyRicm93c2VyJywgJyRxJywgJyQkcScsICckZXhjZXB0aW9uSGFuZGxlcicsXG4gICAgICAgZnVuY3Rpb24oJHJvb3RTY29wZSwgICAkYnJvd3NlciwgICAkcSwgICAkJHEsICAgJGV4Y2VwdGlvbkhhbmRsZXIpIHtcblxuICAgIHZhciBkZWZlcnJlZHMgPSB7fTtcblxuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAgKiBAbmFtZSAkdGltZW91dFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogQW5ndWxhcidzIHdyYXBwZXIgZm9yIGB3aW5kb3cuc2V0VGltZW91dGAuIFRoZSBgZm5gIGZ1bmN0aW9uIGlzIHdyYXBwZWQgaW50byBhIHRyeS9jYXRjaFxuICAgICAgKiBibG9jayBhbmQgZGVsZWdhdGVzIGFueSBleGNlcHRpb25zIHRvXG4gICAgICAqIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS5cbiAgICAgICpcbiAgICAgICogVGhlIHJldHVybiB2YWx1ZSBvZiBjYWxsaW5nIGAkdGltZW91dGAgaXMgYSBwcm9taXNlLCB3aGljaCB3aWxsIGJlIHJlc29sdmVkIHdoZW5cbiAgICAgICogdGhlIGRlbGF5IGhhcyBwYXNzZWQgYW5kIHRoZSB0aW1lb3V0IGZ1bmN0aW9uLCBpZiBwcm92aWRlZCwgaXMgZXhlY3V0ZWQuXG4gICAgICAqXG4gICAgICAqIFRvIGNhbmNlbCBhIHRpbWVvdXQgcmVxdWVzdCwgY2FsbCBgJHRpbWVvdXQuY2FuY2VsKHByb21pc2UpYC5cbiAgICAgICpcbiAgICAgICogSW4gdGVzdHMgeW91IGNhbiB1c2Uge0BsaW5rIG5nTW9jay4kdGltZW91dCBgJHRpbWVvdXQuZmx1c2goKWB9IHRvXG4gICAgICAqIHN5bmNocm9ub3VzbHkgZmx1c2ggdGhlIHF1ZXVlIG9mIGRlZmVycmVkIGZ1bmN0aW9ucy5cbiAgICAgICpcbiAgICAgICogSWYgeW91IG9ubHkgd2FudCBhIHByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkIGFmdGVyIHNvbWUgc3BlY2lmaWVkIGRlbGF5XG4gICAgICAqIHRoZW4geW91IGNhbiBjYWxsIGAkdGltZW91dGAgd2l0aG91dCB0aGUgYGZuYCBmdW5jdGlvbi5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtmdW5jdGlvbigpPX0gZm4gQSBmdW5jdGlvbiwgd2hvc2UgZXhlY3V0aW9uIHNob3VsZCBiZSBkZWxheWVkLlxuICAgICAgKiBAcGFyYW0ge251bWJlcj19IFtkZWxheT0wXSBEZWxheSBpbiBtaWxsaXNlY29uZHMuXG4gICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtpbnZva2VBcHBseT10cnVlXSBJZiBzZXQgdG8gYGZhbHNlYCBza2lwcyBtb2RlbCBkaXJ0eSBjaGVja2luZywgb3RoZXJ3aXNlXG4gICAgICAqICAgd2lsbCBpbnZva2UgYGZuYCB3aXRoaW4gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseSAkYXBwbHl9IGJsb2NrLlxuICAgICAgKiBAcGFyYW0gey4uLio9fSBQYXNzIGFkZGl0aW9uYWwgcGFyYW1ldGVycyB0byB0aGUgZXhlY3V0ZWQgZnVuY3Rpb24uXG4gICAgICAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aGVuIHRoZSB0aW1lb3V0IGlzIHJlYWNoZWQuIFRoZSB2YWx1ZSB0aGlzXG4gICAgICAqICAgcHJvbWlzZSB3aWxsIGJlIHJlc29sdmVkIHdpdGggaXMgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgYGZuYCBmdW5jdGlvbi5cbiAgICAgICpcbiAgICAgICovXG4gICAgZnVuY3Rpb24gdGltZW91dChmbiwgZGVsYXksIGludm9rZUFwcGx5KSB7XG4gICAgICBpZiAoIWlzRnVuY3Rpb24oZm4pKSB7XG4gICAgICAgIGludm9rZUFwcGx5ID0gZGVsYXk7XG4gICAgICAgIGRlbGF5ID0gZm47XG4gICAgICAgIGZuID0gbm9vcDtcbiAgICAgIH1cblxuICAgICAgdmFyIGFyZ3MgPSBzbGljZUFyZ3MoYXJndW1lbnRzLCAzKSxcbiAgICAgICAgICBza2lwQXBwbHkgPSAoaXNEZWZpbmVkKGludm9rZUFwcGx5KSAmJiAhaW52b2tlQXBwbHkpLFxuICAgICAgICAgIGRlZmVycmVkID0gKHNraXBBcHBseSA/ICQkcSA6ICRxKS5kZWZlcigpLFxuICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlLFxuICAgICAgICAgIHRpbWVvdXRJZDtcblxuICAgICAgdGltZW91dElkID0gJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShmbi5hcHBseShudWxsLCBhcmdzKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZSk7XG4gICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgZGVsZXRlIGRlZmVycmVkc1twcm9taXNlLiQkdGltZW91dElkXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc2tpcEFwcGx5KSAkcm9vdFNjb3BlLiRhcHBseSgpO1xuICAgICAgfSwgZGVsYXkpO1xuXG4gICAgICBwcm9taXNlLiQkdGltZW91dElkID0gdGltZW91dElkO1xuICAgICAgZGVmZXJyZWRzW3RpbWVvdXRJZF0gPSBkZWZlcnJlZDtcblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG5cbiAgICAgLyoqXG4gICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICogQG5hbWUgJHRpbWVvdXQjY2FuY2VsXG4gICAgICAqXG4gICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgKiBDYW5jZWxzIGEgdGFzayBhc3NvY2lhdGVkIHdpdGggdGhlIGBwcm9taXNlYC4gQXMgYSByZXN1bHQgb2YgdGhpcywgdGhlIHByb21pc2Ugd2lsbCBiZVxuICAgICAgKiByZXNvbHZlZCB3aXRoIGEgcmVqZWN0aW9uLlxuICAgICAgKlxuICAgICAgKiBAcGFyYW0ge1Byb21pc2U9fSBwcm9taXNlIFByb21pc2UgcmV0dXJuZWQgYnkgdGhlIGAkdGltZW91dGAgZnVuY3Rpb24uXG4gICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdGFzayBoYXNuJ3QgZXhlY3V0ZWQgeWV0IGFuZCB3YXMgc3VjY2Vzc2Z1bGx5XG4gICAgICAqICAgY2FuY2VsZWQuXG4gICAgICAqL1xuICAgIHRpbWVvdXQuY2FuY2VsID0gZnVuY3Rpb24ocHJvbWlzZSkge1xuICAgICAgaWYgKHByb21pc2UgJiYgcHJvbWlzZS4kJHRpbWVvdXRJZCBpbiBkZWZlcnJlZHMpIHtcbiAgICAgICAgZGVmZXJyZWRzW3Byb21pc2UuJCR0aW1lb3V0SWRdLnJlamVjdCgnY2FuY2VsZWQnKTtcbiAgICAgICAgZGVsZXRlIGRlZmVycmVkc1twcm9taXNlLiQkdGltZW91dElkXTtcbiAgICAgICAgcmV0dXJuICRicm93c2VyLmRlZmVyLmNhbmNlbChwcm9taXNlLiQkdGltZW91dElkKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRpbWVvdXQ7XG4gIH1dO1xufVxuXG4vLyBOT1RFOiAgVGhlIHVzYWdlIG9mIHdpbmRvdyBhbmQgZG9jdW1lbnQgaW5zdGVhZCBvZiAkd2luZG93IGFuZCAkZG9jdW1lbnQgaGVyZSBpc1xuLy8gZGVsaWJlcmF0ZS4gIFRoaXMgc2VydmljZSBkZXBlbmRzIG9uIHRoZSBzcGVjaWZpYyBiZWhhdmlvciBvZiBhbmNob3Igbm9kZXMgY3JlYXRlZCBieSB0aGVcbi8vIGJyb3dzZXIgKHJlc29sdmluZyBhbmQgcGFyc2luZyBVUkxzKSB0aGF0IGlzIHVubGlrZWx5IHRvIGJlIHByb3ZpZGVkIGJ5IG1vY2sgb2JqZWN0cyBhbmRcbi8vIGNhdXNlIHVzIHRvIGJyZWFrIHRlc3RzLiAgSW4gYWRkaXRpb24sIHdoZW4gdGhlIGJyb3dzZXIgcmVzb2x2ZXMgYSBVUkwgZm9yIFhIUiwgaXRcbi8vIGRvZXNuJ3Qga25vdyBhYm91dCBtb2NrZWQgbG9jYXRpb25zIGFuZCByZXNvbHZlcyBVUkxzIHRvIHRoZSByZWFsIGRvY3VtZW50IC0gd2hpY2ggaXNcbi8vIGV4YWN0bHkgdGhlIGJlaGF2aW9yIG5lZWRlZCBoZXJlLiAgVGhlcmUgaXMgbGl0dGxlIHZhbHVlIGlzIG1vY2tpbmcgdGhlc2Ugb3V0IGZvciB0aGlzXG4vLyBzZXJ2aWNlLlxudmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG52YXIgb3JpZ2luVXJsID0gdXJsUmVzb2x2ZSh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cblxuLyoqXG4gKlxuICogSW1wbGVtZW50YXRpb24gTm90ZXMgZm9yIG5vbi1JRSBicm93c2Vyc1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQXNzaWduaW5nIGEgVVJMIHRvIHRoZSBocmVmIHByb3BlcnR5IG9mIGFuIGFuY2hvciBET00gbm9kZSwgZXZlbiBvbmUgYXR0YWNoZWQgdG8gdGhlIERPTSxcbiAqIHJlc3VsdHMgYm90aCBpbiB0aGUgbm9ybWFsaXppbmcgYW5kIHBhcnNpbmcgb2YgdGhlIFVSTC4gIE5vcm1hbGl6aW5nIG1lYW5zIHRoYXQgYSByZWxhdGl2ZVxuICogVVJMIHdpbGwgYmUgcmVzb2x2ZWQgaW50byBhbiBhYnNvbHV0ZSBVUkwgaW4gdGhlIGNvbnRleHQgb2YgdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50LlxuICogUGFyc2luZyBtZWFucyB0aGF0IHRoZSBhbmNob3Igbm9kZSdzIGhvc3QsIGhvc3RuYW1lLCBwcm90b2NvbCwgcG9ydCwgcGF0aG5hbWUgYW5kIHJlbGF0ZWRcbiAqIHByb3BlcnRpZXMgYXJlIGFsbCBwb3B1bGF0ZWQgdG8gcmVmbGVjdCB0aGUgbm9ybWFsaXplZCBVUkwuICBUaGlzIGFwcHJvYWNoIGhhcyB3aWRlXG4gKiBjb21wYXRpYmlsaXR5IC0gU2FmYXJpIDErLCBNb3ppbGxhIDErLCBPcGVyYSA3KyxlIGV0Yy4gIFNlZVxuICogaHR0cDovL3d3dy5hcHRhbmEuY29tL3JlZmVyZW5jZS9odG1sL2FwaS9IVE1MQW5jaG9yRWxlbWVudC5odG1sXG4gKlxuICogSW1wbGVtZW50YXRpb24gTm90ZXMgZm9yIElFXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIElFIDw9IDEwIG5vcm1hbGl6ZXMgdGhlIFVSTCB3aGVuIGFzc2lnbmVkIHRvIHRoZSBhbmNob3Igbm9kZSBzaW1pbGFyIHRvIHRoZSBvdGhlclxuICogYnJvd3NlcnMuICBIb3dldmVyLCB0aGUgcGFyc2VkIGNvbXBvbmVudHMgd2lsbCBub3QgYmUgc2V0IGlmIHRoZSBVUkwgYXNzaWduZWQgZGlkIG5vdCBzcGVjaWZ5XG4gKiB0aGVtLiAgKGUuZy4gaWYgeW91IGFzc2lnbiBhLmhyZWYgPSBcImZvb1wiLCB0aGVuIGEucHJvdG9jb2wsIGEuaG9zdCwgZXRjLiB3aWxsIGJlIGVtcHR5LikgIFdlXG4gKiB3b3JrIGFyb3VuZCB0aGF0IGJ5IHBlcmZvcm1pbmcgdGhlIHBhcnNpbmcgaW4gYSAybmQgc3RlcCBieSB0YWtpbmcgYSBwcmV2aW91c2x5IG5vcm1hbGl6ZWRcbiAqIFVSTCAoZS5nLiBieSBhc3NpZ25pbmcgdG8gYS5ocmVmKSBhbmQgYXNzaWduaW5nIGl0IGEuaHJlZiBhZ2Fpbi4gIFRoaXMgY29ycmVjdGx5IHBvcHVsYXRlcyB0aGVcbiAqIHByb3BlcnRpZXMgc3VjaCBhcyBwcm90b2NvbCwgaG9zdG5hbWUsIHBvcnQsIGV0Yy5cbiAqXG4gKiBSZWZlcmVuY2VzOlxuICogICBodHRwOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MQW5jaG9yRWxlbWVudFxuICogICBodHRwOi8vd3d3LmFwdGFuYS5jb20vcmVmZXJlbmNlL2h0bWwvYXBpL0hUTUxBbmNob3JFbGVtZW50Lmh0bWxcbiAqICAgaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gKiAgIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvcHVsbC8yOTAyXG4gKiAgIGh0dHA6Ly9qYW1lcy5wYWRvbHNleS5jb20vamF2YXNjcmlwdC9wYXJzaW5nLXVybHMtd2l0aC10aGUtZG9tL1xuICpcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkLlxuICogQGRlc2NyaXB0aW9uIE5vcm1hbGl6ZXMgYW5kIHBhcnNlcyBhIFVSTC5cbiAqIEByZXR1cm5zIHtvYmplY3R9IFJldHVybnMgdGhlIG5vcm1hbGl6ZWQgVVJMIGFzIGEgZGljdGlvbmFyeS5cbiAqXG4gKiAgIHwgbWVtYmVyIG5hbWUgICB8IERlc2NyaXB0aW9uICAgIHxcbiAqICAgfC0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tfFxuICogICB8IGhyZWYgICAgICAgICAgfCBBIG5vcm1hbGl6ZWQgdmVyc2lvbiBvZiB0aGUgcHJvdmlkZWQgVVJMIGlmIGl0IHdhcyBub3QgYW4gYWJzb2x1dGUgVVJMIHxcbiAqICAgfCBwcm90b2NvbCAgICAgIHwgVGhlIHByb3RvY29sIGluY2x1ZGluZyB0aGUgdHJhaWxpbmcgY29sb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiAgIHwgaG9zdCAgICAgICAgICB8IFRoZSBob3N0IGFuZCBwb3J0IChpZiB0aGUgcG9ydCBpcyBub24tZGVmYXVsdCkgb2YgdGhlIG5vcm1hbGl6ZWRVcmwgICAgfFxuICogICB8IHNlYXJjaCAgICAgICAgfCBUaGUgc2VhcmNoIHBhcmFtcywgbWludXMgdGhlIHF1ZXN0aW9uIG1hcmsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqICAgfCBoYXNoICAgICAgICAgIHwgVGhlIGhhc2ggc3RyaW5nLCBtaW51cyB0aGUgaGFzaCBzeW1ib2xcbiAqICAgfCBob3N0bmFtZSAgICAgIHwgVGhlIGhvc3RuYW1lXG4gKiAgIHwgcG9ydCAgICAgICAgICB8IFRoZSBwb3J0LCB3aXRob3V0IFwiOlwiXG4gKiAgIHwgcGF0aG5hbWUgICAgICB8IFRoZSBwYXRobmFtZSwgYmVnaW5uaW5nIHdpdGggXCIvXCJcbiAqXG4gKi9cbmZ1bmN0aW9uIHVybFJlc29sdmUodXJsKSB7XG4gIHZhciBocmVmID0gdXJsO1xuXG4gIGlmIChtc2llKSB7XG4gICAgLy8gTm9ybWFsaXplIGJlZm9yZSBwYXJzZS4gIFJlZmVyIEltcGxlbWVudGF0aW9uIE5vdGVzIG9uIHdoeSB0aGlzIGlzXG4gICAgLy8gZG9uZSBpbiB0d28gc3RlcHMgb24gSUUuXG4gICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKFwiaHJlZlwiLCBocmVmKTtcbiAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgfVxuXG4gIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgcmV0dXJuIHtcbiAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKVxuICAgICAgPyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgOiAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICB9O1xufVxuXG4vKipcbiAqIFBhcnNlIGEgcmVxdWVzdCBVUkwgYW5kIGRldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYSBzYW1lLW9yaWdpbiByZXF1ZXN0IGFzIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHJlcXVlc3RVcmwgVGhlIHVybCBvZiB0aGUgcmVxdWVzdCBhcyBhIHN0cmluZyB0aGF0IHdpbGwgYmUgcmVzb2x2ZWRcbiAqIG9yIGEgcGFyc2VkIFVSTCBvYmplY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcmVxdWVzdCBpcyBmb3IgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudC5cbiAqL1xuZnVuY3Rpb24gdXJsSXNTYW1lT3JpZ2luKHJlcXVlc3RVcmwpIHtcbiAgdmFyIHBhcnNlZCA9IChpc1N0cmluZyhyZXF1ZXN0VXJsKSkgPyB1cmxSZXNvbHZlKHJlcXVlc3RVcmwpIDogcmVxdWVzdFVybDtcbiAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVybC5wcm90b2NvbCAmJlxuICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VcmwuaG9zdCk7XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICR3aW5kb3dcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgcmVmZXJlbmNlIHRvIHRoZSBicm93c2VyJ3MgYHdpbmRvd2Agb2JqZWN0LiBXaGlsZSBgd2luZG93YFxuICogaXMgZ2xvYmFsbHkgYXZhaWxhYmxlIGluIEphdmFTY3JpcHQsIGl0IGNhdXNlcyB0ZXN0YWJpbGl0eSBwcm9ibGVtcywgYmVjYXVzZVxuICogaXQgaXMgYSBnbG9iYWwgdmFyaWFibGUuIEluIGFuZ3VsYXIgd2UgYWx3YXlzIHJlZmVyIHRvIGl0IHRocm91Z2ggdGhlXG4gKiBgJHdpbmRvd2Agc2VydmljZSwgc28gaXQgbWF5IGJlIG92ZXJyaWRkZW4sIHJlbW92ZWQgb3IgbW9ja2VkIGZvciB0ZXN0aW5nLlxuICpcbiAqIEV4cHJlc3Npb25zLCBsaWtlIHRoZSBvbmUgZGVmaW5lZCBmb3IgdGhlIGBuZ0NsaWNrYCBkaXJlY3RpdmUgaW4gdGhlIGV4YW1wbGVcbiAqIGJlbG93LCBhcmUgZXZhbHVhdGVkIHdpdGggcmVzcGVjdCB0byB0aGUgY3VycmVudCBzY29wZS4gIFRoZXJlZm9yZSwgdGhlcmUgaXNcbiAqIG5vIHJpc2sgb2YgaW5hZHZlcnRlbnRseSBjb2RpbmcgaW4gYSBkZXBlbmRlbmN5IG9uIGEgZ2xvYmFsIHZhbHVlIGluIHN1Y2ggYW5cbiAqIGV4cHJlc3Npb24uXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cIndpbmRvd0V4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3dpbmRvd0V4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJHdpbmRvdycsIGZ1bmN0aW9uKCRzY29wZSwgJHdpbmRvdykge1xuICAgICAgICAgICAgICRzY29wZS5ncmVldGluZyA9ICdIZWxsbywgV29ybGQhJztcbiAgICAgICAgICAgICAkc2NvcGUuZG9HcmVldGluZyA9IGZ1bmN0aW9uKGdyZWV0aW5nKSB7XG4gICAgICAgICAgICAgICAkd2luZG93LmFsZXJ0KGdyZWV0aW5nKTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwiZ3JlZXRpbmdcIiBhcmlhLWxhYmVsPVwiZ3JlZXRpbmdcIiAvPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImRvR3JlZXRpbmcoZ3JlZXRpbmcpXCI+QUxFUlQ8L2J1dHRvbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICBpdCgnc2hvdWxkIGRpc3BsYXkgdGhlIGdyZWV0aW5nIGluIHRoZSBpbnB1dCBib3gnLCBmdW5jdGlvbigpIHtcbiAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdncmVldGluZycpKS5zZW5kS2V5cygnSGVsbG8sIEUyRSBUZXN0cycpO1xuICAgICAgIC8vIElmIHdlIGNsaWNrIHRoZSBidXR0b24gaXQgd2lsbCBibG9jayB0aGUgdGVzdCBydW5uZXJcbiAgICAgICAvLyBlbGVtZW50KCc6YnV0dG9uJykuY2xpY2soKTtcbiAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uICRXaW5kb3dQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gdmFsdWVGbih3aW5kb3cpO1xufVxuXG4vKipcbiAqIEBuYW1lICQkY29va2llUmVhZGVyXG4gKiBAcmVxdWlyZXMgJGRvY3VtZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIGlzIGEgcHJpdmF0ZSBzZXJ2aWNlIGZvciByZWFkaW5nIGNvb2tpZXMgdXNlZCBieSAkaHR0cCBhbmQgbmdDb29raWVzXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSBhIGtleS92YWx1ZSBtYXAgb2YgdGhlIGN1cnJlbnQgY29va2llc1xuICovXG5mdW5jdGlvbiAkJENvb2tpZVJlYWRlcigkZG9jdW1lbnQpIHtcbiAgdmFyIHJhd0RvY3VtZW50ID0gJGRvY3VtZW50WzBdIHx8IHt9O1xuICB2YXIgbGFzdENvb2tpZXMgPSB7fTtcbiAgdmFyIGxhc3RDb29raWVTdHJpbmcgPSAnJztcblxuICBmdW5jdGlvbiBzYWZlRGVjb2RlVVJJQ29tcG9uZW50KHN0cikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0cik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvb2tpZUFycmF5LCBjb29raWUsIGksIGluZGV4LCBuYW1lO1xuICAgIHZhciBjdXJyZW50Q29va2llU3RyaW5nID0gcmF3RG9jdW1lbnQuY29va2llIHx8ICcnO1xuXG4gICAgaWYgKGN1cnJlbnRDb29raWVTdHJpbmcgIT09IGxhc3RDb29raWVTdHJpbmcpIHtcbiAgICAgIGxhc3RDb29raWVTdHJpbmcgPSBjdXJyZW50Q29va2llU3RyaW5nO1xuICAgICAgY29va2llQXJyYXkgPSBsYXN0Q29va2llU3RyaW5nLnNwbGl0KCc7ICcpO1xuICAgICAgbGFzdENvb2tpZXMgPSB7fTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGNvb2tpZUFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvb2tpZSA9IGNvb2tpZUFycmF5W2ldO1xuICAgICAgICBpbmRleCA9IGNvb2tpZS5pbmRleE9mKCc9Jyk7XG4gICAgICAgIGlmIChpbmRleCA+IDApIHsgLy9pZ25vcmUgbmFtZWxlc3MgY29va2llc1xuICAgICAgICAgIG5hbWUgPSBzYWZlRGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZS5zdWJzdHJpbmcoMCwgaW5kZXgpKTtcbiAgICAgICAgICAvLyB0aGUgZmlyc3QgdmFsdWUgdGhhdCBpcyBzZWVuIGZvciBhIGNvb2tpZSBpcyB0aGUgbW9zdFxuICAgICAgICAgIC8vIHNwZWNpZmljIG9uZS4gIHZhbHVlcyBmb3IgdGhlIHNhbWUgY29va2llIG5hbWUgdGhhdFxuICAgICAgICAgIC8vIGZvbGxvdyBhcmUgZm9yIGxlc3Mgc3BlY2lmaWMgcGF0aHMuXG4gICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGxhc3RDb29raWVzW25hbWVdKSkge1xuICAgICAgICAgICAgbGFzdENvb2tpZXNbbmFtZV0gPSBzYWZlRGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZS5zdWJzdHJpbmcoaW5kZXggKyAxKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsYXN0Q29va2llcztcbiAgfTtcbn1cblxuJCRDb29raWVSZWFkZXIuJGluamVjdCA9IFsnJGRvY3VtZW50J107XG5cbmZ1bmN0aW9uICQkQ29va2llUmVhZGVyUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9ICQkQ29va2llUmVhZGVyO1xufVxuXG4vKiBnbG9iYWwgY3VycmVuY3lGaWx0ZXI6IHRydWUsXG4gZGF0ZUZpbHRlcjogdHJ1ZSxcbiBmaWx0ZXJGaWx0ZXI6IHRydWUsXG4ganNvbkZpbHRlcjogdHJ1ZSxcbiBsaW1pdFRvRmlsdGVyOiB0cnVlLFxuIGxvd2VyY2FzZUZpbHRlcjogdHJ1ZSxcbiBudW1iZXJGaWx0ZXI6IHRydWUsXG4gb3JkZXJCeUZpbHRlcjogdHJ1ZSxcbiB1cHBlcmNhc2VGaWx0ZXI6IHRydWUsXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRmaWx0ZXJQcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRmlsdGVycyBhcmUganVzdCBmdW5jdGlvbnMgd2hpY2ggdHJhbnNmb3JtIGlucHV0IHRvIGFuIG91dHB1dC4gSG93ZXZlciBmaWx0ZXJzIG5lZWQgdG8gYmVcbiAqIERlcGVuZGVuY3kgSW5qZWN0ZWQuIFRvIGFjaGlldmUgdGhpcyBhIGZpbHRlciBkZWZpbml0aW9uIGNvbnNpc3RzIG9mIGEgZmFjdG9yeSBmdW5jdGlvbiB3aGljaCBpc1xuICogYW5ub3RhdGVkIHdpdGggZGVwZW5kZW5jaWVzIGFuZCBpcyByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgYSBmaWx0ZXIgZnVuY3Rpb24uXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBGaWx0ZXIgbmFtZXMgbXVzdCBiZSB2YWxpZCBhbmd1bGFyIHtAbGluayBleHByZXNzaW9ufSBpZGVudGlmaWVycywgc3VjaCBhcyBgdXBwZXJjYXNlYCBvciBgb3JkZXJCeWAuXG4gKiBOYW1lcyB3aXRoIHNwZWNpYWwgY2hhcmFjdGVycywgc3VjaCBhcyBoeXBoZW5zIGFuZCBkb3RzLCBhcmUgbm90IGFsbG93ZWQuIElmIHlvdSB3aXNoIHRvIG5hbWVzcGFjZVxuICogeW91ciBmaWx0ZXJzLCB0aGVuIHlvdSBjYW4gdXNlIGNhcGl0YWxpemF0aW9uIChgbXlhcHBTdWJzZWN0aW9uRmlsdGVyeGApIG9yIHVuZGVyc2NvcmVzXG4gKiAoYG15YXBwX3N1YnNlY3Rpb25fZmlsdGVyeGApLlxuICogPC9kaXY+XG4gKlxuICogYGBganNcbiAqICAgLy8gRmlsdGVyIHJlZ2lzdHJhdGlvblxuICogICBmdW5jdGlvbiBNeU1vZHVsZSgkcHJvdmlkZSwgJGZpbHRlclByb3ZpZGVyKSB7XG4gKiAgICAgLy8gY3JlYXRlIGEgc2VydmljZSB0byBkZW1vbnN0cmF0ZSBpbmplY3Rpb24gKG5vdCBhbHdheXMgbmVlZGVkKVxuICogICAgICRwcm92aWRlLnZhbHVlKCdncmVldCcsIGZ1bmN0aW9uKG5hbWUpe1xuICogICAgICAgcmV0dXJuICdIZWxsbyAnICsgbmFtZSArICchJztcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgLy8gcmVnaXN0ZXIgYSBmaWx0ZXIgZmFjdG9yeSB3aGljaCB1c2VzIHRoZVxuICogICAgIC8vIGdyZWV0IHNlcnZpY2UgdG8gZGVtb25zdHJhdGUgREkuXG4gKiAgICAgJGZpbHRlclByb3ZpZGVyLnJlZ2lzdGVyKCdncmVldCcsIGZ1bmN0aW9uKGdyZWV0KXtcbiAqICAgICAgIC8vIHJldHVybiB0aGUgZmlsdGVyIGZ1bmN0aW9uIHdoaWNoIHVzZXMgdGhlIGdyZWV0IHNlcnZpY2VcbiAqICAgICAgIC8vIHRvIGdlbmVyYXRlIHNhbHV0YXRpb25cbiAqICAgICAgIHJldHVybiBmdW5jdGlvbih0ZXh0KSB7XG4gKiAgICAgICAgIC8vIGZpbHRlcnMgbmVlZCB0byBiZSBmb3JnaXZpbmcgc28gY2hlY2sgaW5wdXQgdmFsaWRpdHlcbiAqICAgICAgICAgcmV0dXJuIHRleHQgJiYgZ3JlZXQodGV4dCkgfHwgdGV4dDtcbiAqICAgICAgIH07XG4gKiAgICAgfSk7XG4gKiAgIH1cbiAqIGBgYFxuICpcbiAqIFRoZSBmaWx0ZXIgZnVuY3Rpb24gaXMgcmVnaXN0ZXJlZCB3aXRoIHRoZSBgJGluamVjdG9yYCB1bmRlciB0aGUgZmlsdGVyIG5hbWUgc3VmZml4IHdpdGhcbiAqIGBGaWx0ZXJgLlxuICpcbiAqIGBgYGpzXG4gKiAgIGl0KCdzaG91bGQgYmUgdGhlIHNhbWUgaW5zdGFuY2UnLCBpbmplY3QoXG4gKiAgICAgZnVuY3Rpb24oJGZpbHRlclByb3ZpZGVyKSB7XG4gKiAgICAgICAkZmlsdGVyUHJvdmlkZXIucmVnaXN0ZXIoJ3JldmVyc2UnLCBmdW5jdGlvbigpe1xuICogICAgICAgICByZXR1cm4gLi4uO1xuICogICAgICAgfSk7XG4gKiAgICAgfSxcbiAqICAgICBmdW5jdGlvbigkZmlsdGVyLCByZXZlcnNlRmlsdGVyKSB7XG4gKiAgICAgICBleHBlY3QoJGZpbHRlcigncmV2ZXJzZScpKS50b0JlKHJldmVyc2VGaWx0ZXIpO1xuICogICAgIH0pO1xuICogYGBgXG4gKlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IGhvdyBhbmd1bGFyIGZpbHRlcnMgd29yaywgYW5kIGhvdyB0byBjcmVhdGUgeW91ciBvd24gZmlsdGVycywgc2VlXG4gKiB7QGxpbmsgZ3VpZGUvZmlsdGVyIEZpbHRlcnN9IGluIHRoZSBBbmd1bGFyIERldmVsb3BlciBHdWlkZS5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkZmlsdGVyXG4gKiBAa2luZCBmdW5jdGlvblxuICogQGRlc2NyaXB0aW9uXG4gKiBGaWx0ZXJzIGFyZSB1c2VkIGZvciBmb3JtYXR0aW5nIGRhdGEgZGlzcGxheWVkIHRvIHRoZSB1c2VyLlxuICpcbiAqIFRoZSBnZW5lcmFsIHN5bnRheCBpbiB0ZW1wbGF0ZXMgaXMgYXMgZm9sbG93czpcbiAqXG4gKiAgICAgICAgIHt7IGV4cHJlc3Npb24gW3wgZmlsdGVyX25hbWVbOnBhcmFtZXRlcl92YWx1ZV0gLi4uIF0gfX1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBmaWx0ZXIgZnVuY3Rpb24gdG8gcmV0cmlldmVcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIiRmaWx0ZXJcIiBtb2R1bGU9XCJmaWx0ZXJFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiTWFpbkN0cmxcIj5cbiAgICAgICAgPGgzPnt7IG9yaWdpbmFsVGV4dCB9fTwvaDM+XG4gICAgICAgIDxoMz57eyBmaWx0ZXJlZFRleHQgfX08L2gzPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ2ZpbHRlckV4YW1wbGUnLCBbXSlcbiAgICAgIC5jb250cm9sbGVyKCdNYWluQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJGZpbHRlcikge1xuICAgICAgICAkc2NvcGUub3JpZ2luYWxUZXh0ID0gJ2hlbGxvJztcbiAgICAgICAgJHNjb3BlLmZpbHRlcmVkVGV4dCA9ICRmaWx0ZXIoJ3VwcGVyY2FzZScpKCRzY29wZS5vcmlnaW5hbFRleHQpO1xuICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAgKi9cbiRGaWx0ZXJQcm92aWRlci4kaW5qZWN0ID0gWyckcHJvdmlkZSddO1xuZnVuY3Rpb24gJEZpbHRlclByb3ZpZGVyKCRwcm92aWRlKSB7XG4gIHZhciBzdWZmaXggPSAnRmlsdGVyJztcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkZmlsdGVyUHJvdmlkZXIjcmVnaXN0ZXJcbiAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIE5hbWUgb2YgdGhlIGZpbHRlciBmdW5jdGlvbiwgb3IgYW4gb2JqZWN0IG1hcCBvZiBmaWx0ZXJzIHdoZXJlXG4gICAqICAgIHRoZSBrZXlzIGFyZSB0aGUgZmlsdGVyIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgZmlsdGVyIGZhY3Rvcmllcy5cbiAgICpcbiAgICogICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogICAgKipOb3RlOioqIEZpbHRlciBuYW1lcyBtdXN0IGJlIHZhbGlkIGFuZ3VsYXIge0BsaW5rIGV4cHJlc3Npb259IGlkZW50aWZpZXJzLCBzdWNoIGFzIGB1cHBlcmNhc2VgIG9yIGBvcmRlckJ5YC5cbiAgICogICAgTmFtZXMgd2l0aCBzcGVjaWFsIGNoYXJhY3RlcnMsIHN1Y2ggYXMgaHlwaGVucyBhbmQgZG90cywgYXJlIG5vdCBhbGxvd2VkLiBJZiB5b3Ugd2lzaCB0byBuYW1lc3BhY2VcbiAgICogICAgeW91ciBmaWx0ZXJzLCB0aGVuIHlvdSBjYW4gdXNlIGNhcGl0YWxpemF0aW9uIChgbXlhcHBTdWJzZWN0aW9uRmlsdGVyeGApIG9yIHVuZGVyc2NvcmVzXG4gICAqICAgIChgbXlhcHBfc3Vic2VjdGlvbl9maWx0ZXJ4YCkuXG4gICAqICAgIDwvZGl2PlxuICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmFjdG9yeSBJZiB0aGUgZmlyc3QgYXJndW1lbnQgd2FzIGEgc3RyaW5nLCBhIGZhY3RvcnkgZnVuY3Rpb24gZm9yIHRoZSBmaWx0ZXIgdG8gYmUgcmVnaXN0ZXJlZC5cbiAgICogQHJldHVybnMge09iamVjdH0gUmVnaXN0ZXJlZCBmaWx0ZXIgaW5zdGFuY2UsIG9yIGlmIGEgbWFwIG9mIGZpbHRlcnMgd2FzIHByb3ZpZGVkIHRoZW4gYSBtYXBcbiAgICogICAgb2YgdGhlIHJlZ2lzdGVyZWQgZmlsdGVyIGluc3RhbmNlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyKG5hbWUsIGZhY3RvcnkpIHtcbiAgICBpZiAoaXNPYmplY3QobmFtZSkpIHtcbiAgICAgIHZhciBmaWx0ZXJzID0ge307XG4gICAgICBmb3JFYWNoKG5hbWUsIGZ1bmN0aW9uKGZpbHRlciwga2V5KSB7XG4gICAgICAgIGZpbHRlcnNba2V5XSA9IHJlZ2lzdGVyKGtleSwgZmlsdGVyKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZpbHRlcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAkcHJvdmlkZS5mYWN0b3J5KG5hbWUgKyBzdWZmaXgsIGZhY3RvcnkpO1xuICAgIH1cbiAgfVxuICB0aGlzLnJlZ2lzdGVyID0gcmVnaXN0ZXI7XG5cbiAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCBmdW5jdGlvbigkaW5qZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24obmFtZSkge1xuICAgICAgcmV0dXJuICRpbmplY3Rvci5nZXQobmFtZSArIHN1ZmZpeCk7XG4gICAgfTtcbiAgfV07XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIC8qIGdsb2JhbFxuICAgIGN1cnJlbmN5RmlsdGVyOiBmYWxzZSxcbiAgICBkYXRlRmlsdGVyOiBmYWxzZSxcbiAgICBmaWx0ZXJGaWx0ZXI6IGZhbHNlLFxuICAgIGpzb25GaWx0ZXI6IGZhbHNlLFxuICAgIGxpbWl0VG9GaWx0ZXI6IGZhbHNlLFxuICAgIGxvd2VyY2FzZUZpbHRlcjogZmFsc2UsXG4gICAgbnVtYmVyRmlsdGVyOiBmYWxzZSxcbiAgICBvcmRlckJ5RmlsdGVyOiBmYWxzZSxcbiAgICB1cHBlcmNhc2VGaWx0ZXI6IGZhbHNlLFxuICAqL1xuXG4gIHJlZ2lzdGVyKCdjdXJyZW5jeScsIGN1cnJlbmN5RmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ2RhdGUnLCBkYXRlRmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ2ZpbHRlcicsIGZpbHRlckZpbHRlcik7XG4gIHJlZ2lzdGVyKCdqc29uJywganNvbkZpbHRlcik7XG4gIHJlZ2lzdGVyKCdsaW1pdFRvJywgbGltaXRUb0ZpbHRlcik7XG4gIHJlZ2lzdGVyKCdsb3dlcmNhc2UnLCBsb3dlcmNhc2VGaWx0ZXIpO1xuICByZWdpc3RlcignbnVtYmVyJywgbnVtYmVyRmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ29yZGVyQnknLCBvcmRlckJ5RmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ3VwcGVyY2FzZScsIHVwcGVyY2FzZUZpbHRlcik7XG59XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgZmlsdGVyXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2VsZWN0cyBhIHN1YnNldCBvZiBpdGVtcyBmcm9tIGBhcnJheWAgYW5kIHJldHVybnMgaXQgYXMgYSBuZXcgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvdXJjZSBhcnJheS5cbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdHxmdW5jdGlvbigpfSBleHByZXNzaW9uIFRoZSBwcmVkaWNhdGUgdG8gYmUgdXNlZCBmb3Igc2VsZWN0aW5nIGl0ZW1zIGZyb21cbiAqICAgYGFycmF5YC5cbiAqXG4gKiAgIENhbiBiZSBvbmUgb2Y6XG4gKlxuICogICAtIGBzdHJpbmdgOiBUaGUgc3RyaW5nIGlzIHVzZWQgZm9yIG1hdGNoaW5nIGFnYWluc3QgdGhlIGNvbnRlbnRzIG9mIHRoZSBgYXJyYXlgLiBBbGwgc3RyaW5ncyBvclxuICogICAgIG9iamVjdHMgd2l0aCBzdHJpbmcgcHJvcGVydGllcyBpbiBgYXJyYXlgIHRoYXQgbWF0Y2ggdGhpcyBzdHJpbmcgd2lsbCBiZSByZXR1cm5lZC4gVGhpcyBhbHNvXG4gKiAgICAgYXBwbGllcyB0byBuZXN0ZWQgb2JqZWN0IHByb3BlcnRpZXMuXG4gKiAgICAgVGhlIHByZWRpY2F0ZSBjYW4gYmUgbmVnYXRlZCBieSBwcmVmaXhpbmcgdGhlIHN0cmluZyB3aXRoIGAhYC5cbiAqXG4gKiAgIC0gYE9iamVjdGA6IEEgcGF0dGVybiBvYmplY3QgY2FuIGJlIHVzZWQgdG8gZmlsdGVyIHNwZWNpZmljIHByb3BlcnRpZXMgb24gb2JqZWN0cyBjb250YWluZWRcbiAqICAgICBieSBgYXJyYXlgLiBGb3IgZXhhbXBsZSBge25hbWU6XCJNXCIsIHBob25lOlwiMVwifWAgcHJlZGljYXRlIHdpbGwgcmV0dXJuIGFuIGFycmF5IG9mIGl0ZW1zXG4gKiAgICAgd2hpY2ggaGF2ZSBwcm9wZXJ0eSBgbmFtZWAgY29udGFpbmluZyBcIk1cIiBhbmQgcHJvcGVydHkgYHBob25lYCBjb250YWluaW5nIFwiMVwiLiBBIHNwZWNpYWxcbiAqICAgICBwcm9wZXJ0eSBuYW1lIGAkYCBjYW4gYmUgdXNlZCAoYXMgaW4gYHskOlwidGV4dFwifWApIHRvIGFjY2VwdCBhIG1hdGNoIGFnYWluc3QgYW55XG4gKiAgICAgcHJvcGVydHkgb2YgdGhlIG9iamVjdCBvciBpdHMgbmVzdGVkIG9iamVjdCBwcm9wZXJ0aWVzLiBUaGF0J3MgZXF1aXZhbGVudCB0byB0aGUgc2ltcGxlXG4gKiAgICAgc3Vic3RyaW5nIG1hdGNoIHdpdGggYSBgc3RyaW5nYCBhcyBkZXNjcmliZWQgYWJvdmUuIFRoZSBwcmVkaWNhdGUgY2FuIGJlIG5lZ2F0ZWQgYnkgcHJlZml4aW5nXG4gKiAgICAgdGhlIHN0cmluZyB3aXRoIGAhYC5cbiAqICAgICBGb3IgZXhhbXBsZSBge25hbWU6IFwiIU1cIn1gIHByZWRpY2F0ZSB3aWxsIHJldHVybiBhbiBhcnJheSBvZiBpdGVtcyB3aGljaCBoYXZlIHByb3BlcnR5IGBuYW1lYFxuICogICAgIG5vdCBjb250YWluaW5nIFwiTVwiLlxuICpcbiAqICAgICBOb3RlIHRoYXQgYSBuYW1lZCBwcm9wZXJ0eSB3aWxsIG1hdGNoIHByb3BlcnRpZXMgb24gdGhlIHNhbWUgbGV2ZWwgb25seSwgd2hpbGUgdGhlIHNwZWNpYWxcbiAqICAgICBgJGAgcHJvcGVydHkgd2lsbCBtYXRjaCBwcm9wZXJ0aWVzIG9uIHRoZSBzYW1lIGxldmVsIG9yIGRlZXBlci4gRS5nLiBhbiBhcnJheSBpdGVtIGxpa2VcbiAqICAgICBge25hbWU6IHtmaXJzdDogJ0pvaG4nLCBsYXN0OiAnRG9lJ319YCB3aWxsICoqbm90KiogYmUgbWF0Y2hlZCBieSBge25hbWU6ICdKb2huJ31gLCBidXRcbiAqICAgICAqKndpbGwqKiBiZSBtYXRjaGVkIGJ5IGB7JDogJ0pvaG4nfWAuXG4gKlxuICogICAtIGBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGFycmF5KWA6IEEgcHJlZGljYXRlIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIHdyaXRlIGFyYml0cmFyeSBmaWx0ZXJzLlxuICogICAgIFRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgZm9yIGVhY2ggZWxlbWVudCBvZiB0aGUgYXJyYXksIHdpdGggdGhlIGVsZW1lbnQsIGl0cyBpbmRleCwgYW5kXG4gKiAgICAgdGhlIGVudGlyZSBhcnJheSBpdHNlbGYgYXMgYXJndW1lbnRzLlxuICpcbiAqICAgICBUaGUgZmluYWwgcmVzdWx0IGlzIGFuIGFycmF5IG9mIHRob3NlIGVsZW1lbnRzIHRoYXQgdGhlIHByZWRpY2F0ZSByZXR1cm5lZCB0cnVlIGZvci5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpfHRydWV8dW5kZWZpbmVkfSBjb21wYXJhdG9yIENvbXBhcmF0b3Igd2hpY2ggaXMgdXNlZCBpblxuICogICAgIGRldGVybWluaW5nIGlmIHRoZSBleHBlY3RlZCB2YWx1ZSAoZnJvbSB0aGUgZmlsdGVyIGV4cHJlc3Npb24pIGFuZCBhY3R1YWwgdmFsdWUgKGZyb21cbiAqICAgICB0aGUgb2JqZWN0IGluIHRoZSBhcnJheSkgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYSBtYXRjaC5cbiAqXG4gKiAgIENhbiBiZSBvbmUgb2Y6XG4gKlxuICogICAtIGBmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkKWA6XG4gKiAgICAgVGhlIGZ1bmN0aW9uIHdpbGwgYmUgZ2l2ZW4gdGhlIG9iamVjdCB2YWx1ZSBhbmQgdGhlIHByZWRpY2F0ZSB2YWx1ZSB0byBjb21wYXJlIGFuZFxuICogICAgIHNob3VsZCByZXR1cm4gdHJ1ZSBpZiBib3RoIHZhbHVlcyBzaG91bGQgYmUgY29uc2lkZXJlZCBlcXVhbC5cbiAqXG4gKiAgIC0gYHRydWVgOiBBIHNob3J0aGFuZCBmb3IgYGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpIHsgcmV0dXJuIGFuZ3VsYXIuZXF1YWxzKGFjdHVhbCwgZXhwZWN0ZWQpfWAuXG4gKiAgICAgVGhpcyBpcyBlc3NlbnRpYWxseSBzdHJpY3QgY29tcGFyaXNvbiBvZiBleHBlY3RlZCBhbmQgYWN0dWFsLlxuICpcbiAqICAgLSBgZmFsc2V8dW5kZWZpbmVkYDogQSBzaG9ydCBoYW5kIGZvciBhIGZ1bmN0aW9uIHdoaWNoIHdpbGwgbG9vayBmb3IgYSBzdWJzdHJpbmcgbWF0Y2ggaW4gY2FzZVxuICogICAgIGluc2Vuc2l0aXZlIHdheS5cbiAqXG4gKiAgICAgUHJpbWl0aXZlIHZhbHVlcyBhcmUgY29udmVydGVkIHRvIHN0cmluZ3MuIE9iamVjdHMgYXJlIG5vdCBjb21wYXJlZCBhZ2FpbnN0IHByaW1pdGl2ZXMsXG4gKiAgICAgdW5sZXNzIHRoZXkgaGF2ZSBhIGN1c3RvbSBgdG9TdHJpbmdgIG1ldGhvZCAoZS5nLiBgRGF0ZWAgb2JqZWN0cykuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctaW5pdD1cImZyaWVuZHMgPSBbe25hbWU6J0pvaG4nLCBwaG9uZTonNTU1LTEyNzYnfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J01hcnknLCBwaG9uZTonODAwLUJJRy1NQVJZJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidNaWtlJywgcGhvbmU6JzU1NS00MzIxJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidBZGFtJywgcGhvbmU6JzU1NS01Njc4J30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidKdWxpZScsIHBob25lOic1NTUtODc2NSd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWV0dGUnLCBwaG9uZTonNTU1LTU2NzgnfV1cIj48L2Rpdj5cblxuICAgICAgIDxsYWJlbD5TZWFyY2g6IDxpbnB1dCBuZy1tb2RlbD1cInNlYXJjaFRleHRcIj48L2xhYmVsPlxuICAgICAgIDx0YWJsZSBpZD1cInNlYXJjaFRleHRSZXN1bHRzXCI+XG4gICAgICAgICA8dHI+PHRoPk5hbWU8L3RoPjx0aD5QaG9uZTwvdGg+PC90cj5cbiAgICAgICAgIDx0ciBuZy1yZXBlYXQ9XCJmcmllbmQgaW4gZnJpZW5kcyB8IGZpbHRlcjpzZWFyY2hUZXh0XCI+XG4gICAgICAgICAgIDx0ZD57e2ZyaWVuZC5uYW1lfX08L3RkPlxuICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+XG4gICAgICAgICA8L3RyPlxuICAgICAgIDwvdGFibGU+XG4gICAgICAgPGhyPlxuICAgICAgIDxsYWJlbD5Bbnk6IDxpbnB1dCBuZy1tb2RlbD1cInNlYXJjaC4kXCI+PC9sYWJlbD4gPGJyPlxuICAgICAgIDxsYWJlbD5OYW1lIG9ubHkgPGlucHV0IG5nLW1vZGVsPVwic2VhcmNoLm5hbWVcIj48L2xhYmVsPjxicj5cbiAgICAgICA8bGFiZWw+UGhvbmUgb25seSA8aW5wdXQgbmctbW9kZWw9XCJzZWFyY2gucGhvbmVcIj48L2xhYmVsPjxicj5cbiAgICAgICA8bGFiZWw+RXF1YWxpdHkgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwic3RyaWN0XCI+PC9sYWJlbD48YnI+XG4gICAgICAgPHRhYmxlIGlkPVwic2VhcmNoT2JqUmVzdWx0c1wiPlxuICAgICAgICAgPHRyPjx0aD5OYW1lPC90aD48dGg+UGhvbmU8L3RoPjwvdHI+XG4gICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kT2JqIGluIGZyaWVuZHMgfCBmaWx0ZXI6c2VhcmNoOnN0cmljdFwiPlxuICAgICAgICAgICA8dGQ+e3tmcmllbmRPYmoubmFtZX19PC90ZD5cbiAgICAgICAgICAgPHRkPnt7ZnJpZW5kT2JqLnBob25lfX08L3RkPlxuICAgICAgICAgPC90cj5cbiAgICAgICA8L3RhYmxlPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgZXhwZWN0RnJpZW5kTmFtZXMgPSBmdW5jdGlvbihleHBlY3RlZE5hbWVzLCBrZXkpIHtcbiAgICAgICAgIGVsZW1lbnQuYWxsKGJ5LnJlcGVhdGVyKGtleSArICcgaW4gZnJpZW5kcycpLmNvbHVtbihrZXkgKyAnLm5hbWUnKSkudGhlbihmdW5jdGlvbihhcnIpIHtcbiAgICAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24od2QsIGkpIHtcbiAgICAgICAgICAgICBleHBlY3Qod2QuZ2V0VGV4dCgpKS50b01hdGNoKGV4cGVjdGVkTmFtZXNbaV0pO1xuICAgICAgICAgICB9KTtcbiAgICAgICAgIH0pO1xuICAgICAgIH07XG5cbiAgICAgICBpdCgnc2hvdWxkIHNlYXJjaCBhY3Jvc3MgYWxsIGZpZWxkcyB3aGVuIGZpbHRlcmluZyB3aXRoIGEgc3RyaW5nJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICB2YXIgc2VhcmNoVGV4dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3NlYXJjaFRleHQnKSk7XG4gICAgICAgICBzZWFyY2hUZXh0LmNsZWFyKCk7XG4gICAgICAgICBzZWFyY2hUZXh0LnNlbmRLZXlzKCdtJyk7XG4gICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ01hcnknLCAnTWlrZScsICdBZGFtJ10sICdmcmllbmQnKTtcblxuICAgICAgICAgc2VhcmNoVGV4dC5jbGVhcigpO1xuICAgICAgICAgc2VhcmNoVGV4dC5zZW5kS2V5cygnNzYnKTtcbiAgICAgICAgIGV4cGVjdEZyaWVuZE5hbWVzKFsnSm9obicsICdKdWxpZSddLCAnZnJpZW5kJyk7XG4gICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHNlYXJjaCBpbiBzcGVjaWZpYyBmaWVsZHMgd2hlbiBmaWx0ZXJpbmcgd2l0aCBhIHByZWRpY2F0ZSBvYmplY3QnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBzZWFyY2hBbnkgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzZWFyY2guJCcpKTtcbiAgICAgICAgIHNlYXJjaEFueS5jbGVhcigpO1xuICAgICAgICAgc2VhcmNoQW55LnNlbmRLZXlzKCdpJyk7XG4gICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ01hcnknLCAnTWlrZScsICdKdWxpZScsICdKdWxpZXR0ZSddLCAnZnJpZW5kT2JqJyk7XG4gICAgICAgfSk7XG4gICAgICAgaXQoJ3Nob3VsZCB1c2UgYSBlcXVhbCBjb21wYXJpc29uIHdoZW4gY29tcGFyYXRvciBpcyB0cnVlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICB2YXIgc2VhcmNoTmFtZSA9IGVsZW1lbnQoYnkubW9kZWwoJ3NlYXJjaC5uYW1lJykpO1xuICAgICAgICAgdmFyIHN0cmljdCA9IGVsZW1lbnQoYnkubW9kZWwoJ3N0cmljdCcpKTtcbiAgICAgICAgIHNlYXJjaE5hbWUuY2xlYXIoKTtcbiAgICAgICAgIHNlYXJjaE5hbWUuc2VuZEtleXMoJ0p1bGllJyk7XG4gICAgICAgICBzdHJpY3QuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdEZyaWVuZE5hbWVzKFsnSnVsaWUnXSwgJ2ZyaWVuZE9iaicpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uIGZpbHRlckZpbHRlcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBleHByZXNzaW9uLCBjb21wYXJhdG9yKSB7XG4gICAgaWYgKCFpc0FycmF5TGlrZShhcnJheSkpIHtcbiAgICAgIGlmIChhcnJheSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG1pbkVycignZmlsdGVyJykoJ25vdGFycmF5JywgJ0V4cGVjdGVkIGFycmF5IGJ1dCByZWNlaXZlZDogezB9JywgYXJyYXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBleHByZXNzaW9uVHlwZSA9IGdldFR5cGVGb3JGaWx0ZXIoZXhwcmVzc2lvbik7XG4gICAgdmFyIHByZWRpY2F0ZUZuO1xuICAgIHZhciBtYXRjaEFnYWluc3RBbnlQcm9wO1xuXG4gICAgc3dpdGNoIChleHByZXNzaW9uVHlwZSkge1xuICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICBwcmVkaWNhdGVGbiA9IGV4cHJlc3Npb247XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICBjYXNlICdudWxsJzpcbiAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICBtYXRjaEFnYWluc3RBbnlQcm9wID0gdHJ1ZTtcbiAgICAgICAgLy9qc2hpbnQgLVcwODZcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIC8vanNoaW50ICtXMDg2XG4gICAgICAgIHByZWRpY2F0ZUZuID0gY3JlYXRlUHJlZGljYXRlRm4oZXhwcmVzc2lvbiwgY29tcGFyYXRvciwgbWF0Y2hBZ2FpbnN0QW55UHJvcCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoYXJyYXksIHByZWRpY2F0ZUZuKTtcbiAgfTtcbn1cblxuLy8gSGVscGVyIGZ1bmN0aW9ucyBmb3IgYGZpbHRlckZpbHRlcmBcbmZ1bmN0aW9uIGNyZWF0ZVByZWRpY2F0ZUZuKGV4cHJlc3Npb24sIGNvbXBhcmF0b3IsIG1hdGNoQWdhaW5zdEFueVByb3ApIHtcbiAgdmFyIHNob3VsZE1hdGNoUHJpbWl0aXZlcyA9IGlzT2JqZWN0KGV4cHJlc3Npb24pICYmICgnJCcgaW4gZXhwcmVzc2lvbik7XG4gIHZhciBwcmVkaWNhdGVGbjtcblxuICBpZiAoY29tcGFyYXRvciA9PT0gdHJ1ZSkge1xuICAgIGNvbXBhcmF0b3IgPSBlcXVhbHM7XG4gIH0gZWxzZSBpZiAoIWlzRnVuY3Rpb24oY29tcGFyYXRvcikpIHtcbiAgICBjb21wYXJhdG9yID0gZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCkge1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKGFjdHVhbCkpIHtcbiAgICAgICAgLy8gTm8gc3Vic3RyaW5nIG1hdGNoaW5nIGFnYWluc3QgYHVuZGVmaW5lZGBcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKChhY3R1YWwgPT09IG51bGwpIHx8IChleHBlY3RlZCA9PT0gbnVsbCkpIHtcbiAgICAgICAgLy8gTm8gc3Vic3RyaW5nIG1hdGNoaW5nIGFnYWluc3QgYG51bGxgOyBvbmx5IG1hdGNoIGFnYWluc3QgYG51bGxgXG4gICAgICAgIHJldHVybiBhY3R1YWwgPT09IGV4cGVjdGVkO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KGV4cGVjdGVkKSB8fCAoaXNPYmplY3QoYWN0dWFsKSAmJiAhaGFzQ3VzdG9tVG9TdHJpbmcoYWN0dWFsKSkpIHtcbiAgICAgICAgLy8gU2hvdWxkIG5vdCBjb21wYXJlIHByaW1pdGl2ZXMgYWdhaW5zdCBvYmplY3RzLCB1bmxlc3MgdGhleSBoYXZlIGN1c3RvbSBgdG9TdHJpbmdgIG1ldGhvZFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGFjdHVhbCA9IGxvd2VyY2FzZSgnJyArIGFjdHVhbCk7XG4gICAgICBleHBlY3RlZCA9IGxvd2VyY2FzZSgnJyArIGV4cGVjdGVkKTtcbiAgICAgIHJldHVybiBhY3R1YWwuaW5kZXhPZihleHBlY3RlZCkgIT09IC0xO1xuICAgIH07XG4gIH1cblxuICBwcmVkaWNhdGVGbiA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBpZiAoc2hvdWxkTWF0Y2hQcmltaXRpdmVzICYmICFpc09iamVjdChpdGVtKSkge1xuICAgICAgcmV0dXJuIGRlZXBDb21wYXJlKGl0ZW0sIGV4cHJlc3Npb24uJCwgY29tcGFyYXRvciwgZmFsc2UpO1xuICAgIH1cbiAgICByZXR1cm4gZGVlcENvbXBhcmUoaXRlbSwgZXhwcmVzc2lvbiwgY29tcGFyYXRvciwgbWF0Y2hBZ2FpbnN0QW55UHJvcCk7XG4gIH07XG5cbiAgcmV0dXJuIHByZWRpY2F0ZUZuO1xufVxuXG5mdW5jdGlvbiBkZWVwQ29tcGFyZShhY3R1YWwsIGV4cGVjdGVkLCBjb21wYXJhdG9yLCBtYXRjaEFnYWluc3RBbnlQcm9wLCBkb250TWF0Y2hXaG9sZU9iamVjdCkge1xuICB2YXIgYWN0dWFsVHlwZSA9IGdldFR5cGVGb3JGaWx0ZXIoYWN0dWFsKTtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGVGb3JGaWx0ZXIoZXhwZWN0ZWQpO1xuXG4gIGlmICgoZXhwZWN0ZWRUeXBlID09PSAnc3RyaW5nJykgJiYgKGV4cGVjdGVkLmNoYXJBdCgwKSA9PT0gJyEnKSkge1xuICAgIHJldHVybiAhZGVlcENvbXBhcmUoYWN0dWFsLCBleHBlY3RlZC5zdWJzdHJpbmcoMSksIGNvbXBhcmF0b3IsIG1hdGNoQWdhaW5zdEFueVByb3ApO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkoYWN0dWFsKSkge1xuICAgIC8vIEluIGNhc2UgYGFjdHVhbGAgaXMgYW4gYXJyYXksIGNvbnNpZGVyIGl0IGEgbWF0Y2hcbiAgICAvLyBpZiBBTlkgb2YgaXQncyBpdGVtcyBtYXRjaGVzIGBleHBlY3RlZGBcbiAgICByZXR1cm4gYWN0dWFsLnNvbWUoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgcmV0dXJuIGRlZXBDb21wYXJlKGl0ZW0sIGV4cGVjdGVkLCBjb21wYXJhdG9yLCBtYXRjaEFnYWluc3RBbnlQcm9wKTtcbiAgICB9KTtcbiAgfVxuXG4gIHN3aXRjaCAoYWN0dWFsVHlwZSkge1xuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICB2YXIga2V5O1xuICAgICAgaWYgKG1hdGNoQWdhaW5zdEFueVByb3ApIHtcbiAgICAgICAgZm9yIChrZXkgaW4gYWN0dWFsKSB7XG4gICAgICAgICAgaWYgKChrZXkuY2hhckF0KDApICE9PSAnJCcpICYmIGRlZXBDb21wYXJlKGFjdHVhbFtrZXldLCBleHBlY3RlZCwgY29tcGFyYXRvciwgdHJ1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG9udE1hdGNoV2hvbGVPYmplY3QgPyBmYWxzZSA6IGRlZXBDb21wYXJlKGFjdHVhbCwgZXhwZWN0ZWQsIGNvbXBhcmF0b3IsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3IgKGtleSBpbiBleHBlY3RlZCkge1xuICAgICAgICAgIHZhciBleHBlY3RlZFZhbCA9IGV4cGVjdGVkW2tleV07XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24oZXhwZWN0ZWRWYWwpIHx8IGlzVW5kZWZpbmVkKGV4cGVjdGVkVmFsKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIG1hdGNoQW55UHJvcGVydHkgPSBrZXkgPT09ICckJztcbiAgICAgICAgICB2YXIgYWN0dWFsVmFsID0gbWF0Y2hBbnlQcm9wZXJ0eSA/IGFjdHVhbCA6IGFjdHVhbFtrZXldO1xuICAgICAgICAgIGlmICghZGVlcENvbXBhcmUoYWN0dWFsVmFsLCBleHBlY3RlZFZhbCwgY29tcGFyYXRvciwgbWF0Y2hBbnlQcm9wZXJ0eSwgbWF0Y2hBbnlQcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29tcGFyYXRvcihhY3R1YWwsIGV4cGVjdGVkKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGNvbXBhcmF0b3IoYWN0dWFsLCBleHBlY3RlZCk7XG4gIH1cbn1cblxuLy8gVXNlZCBmb3IgZWFzaWx5IGRpZmZlcmVudGlhdGluZyBiZXR3ZWVuIGBudWxsYCBhbmQgYWN0dWFsIGBvYmplY3RgXG5mdW5jdGlvbiBnZXRUeXBlRm9yRmlsdGVyKHZhbCkge1xuICByZXR1cm4gKHZhbCA9PT0gbnVsbCkgPyAnbnVsbCcgOiB0eXBlb2YgdmFsO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGN1cnJlbmN5XG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRm9ybWF0cyBhIG51bWJlciBhcyBhIGN1cnJlbmN5IChpZSAkMSwyMzQuNTYpLiBXaGVuIG5vIGN1cnJlbmN5IHN5bWJvbCBpcyBwcm92aWRlZCwgZGVmYXVsdFxuICogc3ltYm9sIGZvciBjdXJyZW50IGxvY2FsZSBpcyB1c2VkLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBhbW91bnQgSW5wdXQgdG8gZmlsdGVyLlxuICogQHBhcmFtIHtzdHJpbmc9fSBzeW1ib2wgQ3VycmVuY3kgc3ltYm9sIG9yIGlkZW50aWZpZXIgdG8gYmUgZGlzcGxheWVkLlxuICogQHBhcmFtIHtudW1iZXI9fSBmcmFjdGlvblNpemUgTnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRvIHJvdW5kIHRoZSBhbW91bnQgdG8sIGRlZmF1bHRzIHRvIGRlZmF1bHQgbWF4IGZyYWN0aW9uIHNpemUgZm9yIGN1cnJlbnQgbG9jYWxlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBGb3JtYXR0ZWQgbnVtYmVyLlxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwiY3VycmVuY3lFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjdXJyZW5jeUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUuYW1vdW50ID0gMTIzNC41NjtcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwiYW1vdW50XCIgYXJpYS1sYWJlbD1cImFtb3VudFwiPiA8YnI+XG4gICAgICAgICBkZWZhdWx0IGN1cnJlbmN5IHN5bWJvbCAoJCk6IDxzcGFuIGlkPVwiY3VycmVuY3ktZGVmYXVsdFwiPnt7YW1vdW50IHwgY3VycmVuY3l9fTwvc3Bhbj48YnI+XG4gICAgICAgICBjdXN0b20gY3VycmVuY3kgaWRlbnRpZmllciAoVVNEJCk6IDxzcGFuIGlkPVwiY3VycmVuY3ktY3VzdG9tXCI+e3thbW91bnQgfCBjdXJyZW5jeTpcIlVTRCRcIn19PC9zcGFuPlxuICAgICAgICAgbm8gZnJhY3Rpb25zICgwKTogPHNwYW4gaWQ9XCJjdXJyZW5jeS1uby1mcmFjdGlvbnNcIj57e2Ftb3VudCB8IGN1cnJlbmN5OlwiVVNEJFwiOjB9fTwvc3Bhbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBpbml0IHdpdGggMTIzNC41NicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LWRlZmF1bHQnKSkuZ2V0VGV4dCgpKS50b0JlKCckMSwyMzQuNTYnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1jdXN0b20nKSkuZ2V0VGV4dCgpKS50b0JlKCdVU0QkMSwyMzQuNTYnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1uby1mcmFjdGlvbnMnKSkuZ2V0VGV4dCgpKS50b0JlKCdVU0QkMSwyMzUnKTtcbiAgICAgICB9KTtcbiAgICAgICBpdCgnc2hvdWxkIHVwZGF0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT0gJ3NhZmFyaScpIHtcbiAgICAgICAgICAgLy8gU2FmYXJpIGRvZXMgbm90IHVuZGVyc3RhbmQgdGhlIG1pbnVzIGtleS4gU2VlXG4gICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzQ4MVxuICAgICAgICAgICByZXR1cm47XG4gICAgICAgICB9XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdhbW91bnQnKSkuY2xlYXIoKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2Ftb3VudCcpKS5zZW5kS2V5cygnLTEyMzQnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1kZWZhdWx0JykpLmdldFRleHQoKSkudG9CZSgnLSQxLDIzNC4wMCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LWN1c3RvbScpKS5nZXRUZXh0KCkpLnRvQmUoJy1VU0QkMSwyMzQuMDAnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1uby1mcmFjdGlvbnMnKSkuZ2V0VGV4dCgpKS50b0JlKCctVVNEJDEsMjM0Jyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuY3VycmVuY3lGaWx0ZXIuJGluamVjdCA9IFsnJGxvY2FsZSddO1xuZnVuY3Rpb24gY3VycmVuY3lGaWx0ZXIoJGxvY2FsZSkge1xuICB2YXIgZm9ybWF0cyA9ICRsb2NhbGUuTlVNQkVSX0ZPUk1BVFM7XG4gIHJldHVybiBmdW5jdGlvbihhbW91bnQsIGN1cnJlbmN5U3ltYm9sLCBmcmFjdGlvblNpemUpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQoY3VycmVuY3lTeW1ib2wpKSB7XG4gICAgICBjdXJyZW5jeVN5bWJvbCA9IGZvcm1hdHMuQ1VSUkVOQ1lfU1lNO1xuICAgIH1cblxuICAgIGlmIChpc1VuZGVmaW5lZChmcmFjdGlvblNpemUpKSB7XG4gICAgICBmcmFjdGlvblNpemUgPSBmb3JtYXRzLlBBVFRFUk5TWzFdLm1heEZyYWM7XG4gICAgfVxuXG4gICAgLy8gaWYgbnVsbCBvciB1bmRlZmluZWQgcGFzcyBpdCB0aHJvdWdoXG4gICAgcmV0dXJuIChhbW91bnQgPT0gbnVsbClcbiAgICAgICAgPyBhbW91bnRcbiAgICAgICAgOiBmb3JtYXROdW1iZXIoYW1vdW50LCBmb3JtYXRzLlBBVFRFUk5TWzFdLCBmb3JtYXRzLkdST1VQX1NFUCwgZm9ybWF0cy5ERUNJTUFMX1NFUCwgZnJhY3Rpb25TaXplKS5cbiAgICAgICAgICAgIHJlcGxhY2UoL1xcdTAwQTQvZywgY3VycmVuY3lTeW1ib2wpO1xuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIG51bWJlclxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZvcm1hdHMgYSBudW1iZXIgYXMgdGV4dC5cbiAqXG4gKiBJZiB0aGUgaW5wdXQgaXMgbnVsbCBvciB1bmRlZmluZWQsIGl0IHdpbGwganVzdCBiZSByZXR1cm5lZC5cbiAqIElmIHRoZSBpbnB1dCBpcyBpbmZpbml0ZSAoSW5maW5pdHkvLUluZmluaXR5KSB0aGUgSW5maW5pdHkgc3ltYm9sICfiiJ4nIGlzIHJldHVybmVkLlxuICogSWYgdGhlIGlucHV0IGlzIG5vdCBhIG51bWJlciBhbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQuXG4gKlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gbnVtYmVyIE51bWJlciB0byBmb3JtYXQuXG4gKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKT19IGZyYWN0aW9uU2l6ZSBOdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdG8gcm91bmQgdGhlIG51bWJlciB0by5cbiAqIElmIHRoaXMgaXMgbm90IHByb3ZpZGVkIHRoZW4gdGhlIGZyYWN0aW9uIHNpemUgaXMgY29tcHV0ZWQgZnJvbSB0aGUgY3VycmVudCBsb2NhbGUncyBudW1iZXJcbiAqIGZvcm1hdHRpbmcgcGF0dGVybi4gSW4gdGhlIGNhc2Ugb2YgdGhlIGRlZmF1bHQgbG9jYWxlLCBpdCB3aWxsIGJlIDMuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBOdW1iZXIgcm91bmRlZCB0byBkZWNpbWFsUGxhY2VzIGFuZCBwbGFjZXMgYSDigJws4oCdIGFmdGVyIGVhY2ggdGhpcmQgZGlnaXQuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cIm51bWJlckZpbHRlckV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ251bWJlckZpbHRlckV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUudmFsID0gMTIzNC41Njc4OTtcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8bGFiZWw+RW50ZXIgbnVtYmVyOiA8aW5wdXQgbmctbW9kZWw9J3ZhbCc+PC9sYWJlbD48YnI+XG4gICAgICAgICBEZWZhdWx0IGZvcm1hdHRpbmc6IDxzcGFuIGlkPSdudW1iZXItZGVmYXVsdCc+e3t2YWwgfCBudW1iZXJ9fTwvc3Bhbj48YnI+XG4gICAgICAgICBObyBmcmFjdGlvbnM6IDxzcGFuPnt7dmFsIHwgbnVtYmVyOjB9fTwvc3Bhbj48YnI+XG4gICAgICAgICBOZWdhdGl2ZSBudW1iZXI6IDxzcGFuPnt7LXZhbCB8IG51bWJlcjo0fX08L3NwYW4+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgZm9ybWF0IG51bWJlcnMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdudW1iZXItZGVmYXVsdCcpKS5nZXRUZXh0KCkpLnRvQmUoJzEsMjM0LjU2OCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndmFsIHwgbnVtYmVyOjAnKSkuZ2V0VGV4dCgpKS50b0JlKCcxLDIzNScpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnLXZhbCB8IG51bWJlcjo0JykpLmdldFRleHQoKSkudG9CZSgnLTEsMjM0LjU2NzknKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgdXBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd2YWwnKSkuY2xlYXIoKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3ZhbCcpKS5zZW5kS2V5cygnMzM3NC4zMzMnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdudW1iZXItZGVmYXVsdCcpKS5nZXRUZXh0KCkpLnRvQmUoJzMsMzc0LjMzMycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndmFsIHwgbnVtYmVyOjAnKSkuZ2V0VGV4dCgpKS50b0JlKCczLDM3NCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnLXZhbCB8IG51bWJlcjo0JykpLmdldFRleHQoKSkudG9CZSgnLTMsMzc0LjMzMzAnKTtcbiAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG5udW1iZXJGaWx0ZXIuJGluamVjdCA9IFsnJGxvY2FsZSddO1xuZnVuY3Rpb24gbnVtYmVyRmlsdGVyKCRsb2NhbGUpIHtcbiAgdmFyIGZvcm1hdHMgPSAkbG9jYWxlLk5VTUJFUl9GT1JNQVRTO1xuICByZXR1cm4gZnVuY3Rpb24obnVtYmVyLCBmcmFjdGlvblNpemUpIHtcblxuICAgIC8vIGlmIG51bGwgb3IgdW5kZWZpbmVkIHBhc3MgaXQgdGhyb3VnaFxuICAgIHJldHVybiAobnVtYmVyID09IG51bGwpXG4gICAgICAgID8gbnVtYmVyXG4gICAgICAgIDogZm9ybWF0TnVtYmVyKG51bWJlciwgZm9ybWF0cy5QQVRURVJOU1swXSwgZm9ybWF0cy5HUk9VUF9TRVAsIGZvcm1hdHMuREVDSU1BTF9TRVAsXG4gICAgICAgICAgICAgICAgICAgICAgIGZyYWN0aW9uU2l6ZSk7XG4gIH07XG59XG5cbnZhciBERUNJTUFMX1NFUCA9ICcuJztcbmZ1bmN0aW9uIGZvcm1hdE51bWJlcihudW1iZXIsIHBhdHRlcm4sIGdyb3VwU2VwLCBkZWNpbWFsU2VwLCBmcmFjdGlvblNpemUpIHtcbiAgaWYgKGlzT2JqZWN0KG51bWJlcikpIHJldHVybiAnJztcblxuICB2YXIgaXNOZWdhdGl2ZSA9IG51bWJlciA8IDA7XG4gIG51bWJlciA9IE1hdGguYWJzKG51bWJlcik7XG5cbiAgdmFyIGlzSW5maW5pdHkgPSBudW1iZXIgPT09IEluZmluaXR5O1xuICBpZiAoIWlzSW5maW5pdHkgJiYgIWlzRmluaXRlKG51bWJlcikpIHJldHVybiAnJztcblxuICB2YXIgbnVtU3RyID0gbnVtYmVyICsgJycsXG4gICAgICBmb3JtYXRlZFRleHQgPSAnJyxcbiAgICAgIGhhc0V4cG9uZW50ID0gZmFsc2UsXG4gICAgICBwYXJ0cyA9IFtdO1xuXG4gIGlmIChpc0luZmluaXR5KSBmb3JtYXRlZFRleHQgPSAnXFx1MjIxZSc7XG5cbiAgaWYgKCFpc0luZmluaXR5ICYmIG51bVN0ci5pbmRleE9mKCdlJykgIT09IC0xKSB7XG4gICAgdmFyIG1hdGNoID0gbnVtU3RyLm1hdGNoKC8oW1xcZFxcLl0rKWUoLT8pKFxcZCspLyk7XG4gICAgaWYgKG1hdGNoICYmIG1hdGNoWzJdID09ICctJyAmJiBtYXRjaFszXSA+IGZyYWN0aW9uU2l6ZSArIDEpIHtcbiAgICAgIG51bWJlciA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcm1hdGVkVGV4dCA9IG51bVN0cjtcbiAgICAgIGhhc0V4cG9uZW50ID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWlzSW5maW5pdHkgJiYgIWhhc0V4cG9uZW50KSB7XG4gICAgdmFyIGZyYWN0aW9uTGVuID0gKG51bVN0ci5zcGxpdChERUNJTUFMX1NFUClbMV0gfHwgJycpLmxlbmd0aDtcblxuICAgIC8vIGRldGVybWluZSBmcmFjdGlvblNpemUgaWYgaXQgaXMgbm90IHNwZWNpZmllZFxuICAgIGlmIChpc1VuZGVmaW5lZChmcmFjdGlvblNpemUpKSB7XG4gICAgICBmcmFjdGlvblNpemUgPSBNYXRoLm1pbihNYXRoLm1heChwYXR0ZXJuLm1pbkZyYWMsIGZyYWN0aW9uTGVuKSwgcGF0dGVybi5tYXhGcmFjKTtcbiAgICB9XG5cbiAgICAvLyBzYWZlbHkgcm91bmQgbnVtYmVycyBpbiBKUyB3aXRob3V0IGhpdHRpbmcgaW1wcmVjaXNpb25zIG9mIGZsb2F0aW5nLXBvaW50IGFyaXRobWV0aWNzXG4gICAgLy8gaW5zcGlyZWQgYnk6XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9yb3VuZFxuICAgIG51bWJlciA9ICsoTWF0aC5yb3VuZCgrKG51bWJlci50b1N0cmluZygpICsgJ2UnICsgZnJhY3Rpb25TaXplKSkudG9TdHJpbmcoKSArICdlJyArIC1mcmFjdGlvblNpemUpO1xuXG4gICAgdmFyIGZyYWN0aW9uID0gKCcnICsgbnVtYmVyKS5zcGxpdChERUNJTUFMX1NFUCk7XG4gICAgdmFyIHdob2xlID0gZnJhY3Rpb25bMF07XG4gICAgZnJhY3Rpb24gPSBmcmFjdGlvblsxXSB8fCAnJztcblxuICAgIHZhciBpLCBwb3MgPSAwLFxuICAgICAgICBsZ3JvdXAgPSBwYXR0ZXJuLmxnU2l6ZSxcbiAgICAgICAgZ3JvdXAgPSBwYXR0ZXJuLmdTaXplO1xuXG4gICAgaWYgKHdob2xlLmxlbmd0aCA+PSAobGdyb3VwICsgZ3JvdXApKSB7XG4gICAgICBwb3MgPSB3aG9sZS5sZW5ndGggLSBsZ3JvdXA7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgcG9zOyBpKyspIHtcbiAgICAgICAgaWYgKChwb3MgLSBpKSAlIGdyb3VwID09PSAwICYmIGkgIT09IDApIHtcbiAgICAgICAgICBmb3JtYXRlZFRleHQgKz0gZ3JvdXBTZXA7XG4gICAgICAgIH1cbiAgICAgICAgZm9ybWF0ZWRUZXh0ICs9IHdob2xlLmNoYXJBdChpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSBwb3M7IGkgPCB3aG9sZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCh3aG9sZS5sZW5ndGggLSBpKSAlIGxncm91cCA9PT0gMCAmJiBpICE9PSAwKSB7XG4gICAgICAgIGZvcm1hdGVkVGV4dCArPSBncm91cFNlcDtcbiAgICAgIH1cbiAgICAgIGZvcm1hdGVkVGV4dCArPSB3aG9sZS5jaGFyQXQoaSk7XG4gICAgfVxuXG4gICAgLy8gZm9ybWF0IGZyYWN0aW9uIHBhcnQuXG4gICAgd2hpbGUgKGZyYWN0aW9uLmxlbmd0aCA8IGZyYWN0aW9uU2l6ZSkge1xuICAgICAgZnJhY3Rpb24gKz0gJzAnO1xuICAgIH1cblxuICAgIGlmIChmcmFjdGlvblNpemUgJiYgZnJhY3Rpb25TaXplICE9PSBcIjBcIikgZm9ybWF0ZWRUZXh0ICs9IGRlY2ltYWxTZXAgKyBmcmFjdGlvbi5zdWJzdHIoMCwgZnJhY3Rpb25TaXplKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZnJhY3Rpb25TaXplID4gMCAmJiBudW1iZXIgPCAxKSB7XG4gICAgICBmb3JtYXRlZFRleHQgPSBudW1iZXIudG9GaXhlZChmcmFjdGlvblNpemUpO1xuICAgICAgbnVtYmVyID0gcGFyc2VGbG9hdChmb3JtYXRlZFRleHQpO1xuICAgICAgZm9ybWF0ZWRUZXh0ID0gZm9ybWF0ZWRUZXh0LnJlcGxhY2UoREVDSU1BTF9TRVAsIGRlY2ltYWxTZXApO1xuICAgIH1cbiAgfVxuXG4gIGlmIChudW1iZXIgPT09IDApIHtcbiAgICBpc05lZ2F0aXZlID0gZmFsc2U7XG4gIH1cblxuICBwYXJ0cy5wdXNoKGlzTmVnYXRpdmUgPyBwYXR0ZXJuLm5lZ1ByZSA6IHBhdHRlcm4ucG9zUHJlLFxuICAgICAgICAgICAgIGZvcm1hdGVkVGV4dCxcbiAgICAgICAgICAgICBpc05lZ2F0aXZlID8gcGF0dGVybi5uZWdTdWYgOiBwYXR0ZXJuLnBvc1N1Zik7XG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKTtcbn1cblxuZnVuY3Rpb24gcGFkTnVtYmVyKG51bSwgZGlnaXRzLCB0cmltKSB7XG4gIHZhciBuZWcgPSAnJztcbiAgaWYgKG51bSA8IDApIHtcbiAgICBuZWcgPSAgJy0nO1xuICAgIG51bSA9IC1udW07XG4gIH1cbiAgbnVtID0gJycgKyBudW07XG4gIHdoaWxlIChudW0ubGVuZ3RoIDwgZGlnaXRzKSBudW0gPSAnMCcgKyBudW07XG4gIGlmICh0cmltKSB7XG4gICAgbnVtID0gbnVtLnN1YnN0cihudW0ubGVuZ3RoIC0gZGlnaXRzKTtcbiAgfVxuICByZXR1cm4gbmVnICsgbnVtO1xufVxuXG5cbmZ1bmN0aW9uIGRhdGVHZXR0ZXIobmFtZSwgc2l6ZSwgb2Zmc2V0LCB0cmltKSB7XG4gIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciB2YWx1ZSA9IGRhdGVbJ2dldCcgKyBuYW1lXSgpO1xuICAgIGlmIChvZmZzZXQgPiAwIHx8IHZhbHVlID4gLW9mZnNldCkge1xuICAgICAgdmFsdWUgKz0gb2Zmc2V0O1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IDAgJiYgb2Zmc2V0ID09IC0xMikgdmFsdWUgPSAxMjtcbiAgICByZXR1cm4gcGFkTnVtYmVyKHZhbHVlLCBzaXplLCB0cmltKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGF0ZVN0ckdldHRlcihuYW1lLCBzaG9ydEZvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUsIGZvcm1hdHMpIHtcbiAgICB2YXIgdmFsdWUgPSBkYXRlWydnZXQnICsgbmFtZV0oKTtcbiAgICB2YXIgZ2V0ID0gdXBwZXJjYXNlKHNob3J0Rm9ybSA/ICgnU0hPUlQnICsgbmFtZSkgOiBuYW1lKTtcblxuICAgIHJldHVybiBmb3JtYXRzW2dldF1bdmFsdWVdO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0aW1lWm9uZUdldHRlcihkYXRlLCBmb3JtYXRzLCBvZmZzZXQpIHtcbiAgdmFyIHpvbmUgPSAtMSAqIG9mZnNldDtcbiAgdmFyIHBhZGRlZFpvbmUgPSAoem9uZSA+PSAwKSA/IFwiK1wiIDogXCJcIjtcblxuICBwYWRkZWRab25lICs9IHBhZE51bWJlcihNYXRoW3pvbmUgPiAwID8gJ2Zsb29yJyA6ICdjZWlsJ10oem9uZSAvIDYwKSwgMikgK1xuICAgICAgICAgICAgICAgIHBhZE51bWJlcihNYXRoLmFicyh6b25lICUgNjApLCAyKTtcblxuICByZXR1cm4gcGFkZGVkWm9uZTtcbn1cblxuZnVuY3Rpb24gZ2V0Rmlyc3RUaHVyc2RheU9mWWVhcih5ZWFyKSB7XG4gICAgLy8gMCA9IGluZGV4IG9mIEphbnVhcnlcbiAgICB2YXIgZGF5T2ZXZWVrT25GaXJzdCA9IChuZXcgRGF0ZSh5ZWFyLCAwLCAxKSkuZ2V0RGF5KCk7XG4gICAgLy8gNCA9IGluZGV4IG9mIFRodXJzZGF5ICgrMSB0byBhY2NvdW50IGZvciAxc3QgPSA1KVxuICAgIC8vIDExID0gaW5kZXggb2YgKm5leHQqIFRodXJzZGF5ICgrMSBhY2NvdW50IGZvciAxc3QgPSAxMilcbiAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgMCwgKChkYXlPZldlZWtPbkZpcnN0IDw9IDQpID8gNSA6IDEyKSAtIGRheU9mV2Vla09uRmlyc3QpO1xufVxuXG5mdW5jdGlvbiBnZXRUaHVyc2RheVRoaXNXZWVrKGRhdGV0aW1lKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGRhdGV0aW1lLmdldEZ1bGxZZWFyKCksIGRhdGV0aW1lLmdldE1vbnRoKCksXG4gICAgICAvLyA0ID0gaW5kZXggb2YgVGh1cnNkYXlcbiAgICAgIGRhdGV0aW1lLmdldERhdGUoKSArICg0IC0gZGF0ZXRpbWUuZ2V0RGF5KCkpKTtcbn1cblxuZnVuY3Rpb24gd2Vla0dldHRlcihzaXplKSB7XG4gICByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgdmFyIGZpcnN0VGh1cnMgPSBnZXRGaXJzdFRodXJzZGF5T2ZZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSksXG4gICAgICAgICB0aGlzVGh1cnMgPSBnZXRUaHVyc2RheVRoaXNXZWVrKGRhdGUpO1xuXG4gICAgICB2YXIgZGlmZiA9ICt0aGlzVGh1cnMgLSArZmlyc3RUaHVycyxcbiAgICAgICAgIHJlc3VsdCA9IDEgKyBNYXRoLnJvdW5kKGRpZmYgLyA2LjA0OGU4KTsgLy8gNi4wNDhlOCBtcyBwZXIgd2Vla1xuXG4gICAgICByZXR1cm4gcGFkTnVtYmVyKHJlc3VsdCwgc2l6ZSk7XG4gICB9O1xufVxuXG5mdW5jdGlvbiBhbXBtR2V0dGVyKGRhdGUsIGZvcm1hdHMpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKSA8IDEyID8gZm9ybWF0cy5BTVBNU1swXSA6IGZvcm1hdHMuQU1QTVNbMV07XG59XG5cbmZ1bmN0aW9uIGVyYUdldHRlcihkYXRlLCBmb3JtYXRzKSB7XG4gIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCkgPD0gMCA/IGZvcm1hdHMuRVJBU1swXSA6IGZvcm1hdHMuRVJBU1sxXTtcbn1cblxuZnVuY3Rpb24gbG9uZ0VyYUdldHRlcihkYXRlLCBmb3JtYXRzKSB7XG4gIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCkgPD0gMCA/IGZvcm1hdHMuRVJBTkFNRVNbMF0gOiBmb3JtYXRzLkVSQU5BTUVTWzFdO1xufVxuXG52YXIgREFURV9GT1JNQVRTID0ge1xuICB5eXl5OiBkYXRlR2V0dGVyKCdGdWxsWWVhcicsIDQpLFxuICAgIHl5OiBkYXRlR2V0dGVyKCdGdWxsWWVhcicsIDIsIDAsIHRydWUpLFxuICAgICB5OiBkYXRlR2V0dGVyKCdGdWxsWWVhcicsIDEpLFxuICBNTU1NOiBkYXRlU3RyR2V0dGVyKCdNb250aCcpLFxuICAgTU1NOiBkYXRlU3RyR2V0dGVyKCdNb250aCcsIHRydWUpLFxuICAgIE1NOiBkYXRlR2V0dGVyKCdNb250aCcsIDIsIDEpLFxuICAgICBNOiBkYXRlR2V0dGVyKCdNb250aCcsIDEsIDEpLFxuICAgIGRkOiBkYXRlR2V0dGVyKCdEYXRlJywgMiksXG4gICAgIGQ6IGRhdGVHZXR0ZXIoJ0RhdGUnLCAxKSxcbiAgICBISDogZGF0ZUdldHRlcignSG91cnMnLCAyKSxcbiAgICAgSDogZGF0ZUdldHRlcignSG91cnMnLCAxKSxcbiAgICBoaDogZGF0ZUdldHRlcignSG91cnMnLCAyLCAtMTIpLFxuICAgICBoOiBkYXRlR2V0dGVyKCdIb3VycycsIDEsIC0xMiksXG4gICAgbW06IGRhdGVHZXR0ZXIoJ01pbnV0ZXMnLCAyKSxcbiAgICAgbTogZGF0ZUdldHRlcignTWludXRlcycsIDEpLFxuICAgIHNzOiBkYXRlR2V0dGVyKCdTZWNvbmRzJywgMiksXG4gICAgIHM6IGRhdGVHZXR0ZXIoJ1NlY29uZHMnLCAxKSxcbiAgICAgLy8gd2hpbGUgSVNPIDg2MDEgcmVxdWlyZXMgZnJhY3Rpb25zIHRvIGJlIHByZWZpeGVkIHdpdGggYC5gIG9yIGAsYFxuICAgICAvLyB3ZSBjYW4gYmUganVzdCBzYWZlbHkgcmVseSBvbiB1c2luZyBgc3NzYCBzaW5jZSB3ZSBjdXJyZW50bHkgZG9uJ3Qgc3VwcG9ydCBzaW5nbGUgb3IgdHdvIGRpZ2l0IGZyYWN0aW9uc1xuICAgc3NzOiBkYXRlR2V0dGVyKCdNaWxsaXNlY29uZHMnLCAzKSxcbiAgRUVFRTogZGF0ZVN0ckdldHRlcignRGF5JyksXG4gICBFRUU6IGRhdGVTdHJHZXR0ZXIoJ0RheScsIHRydWUpLFxuICAgICBhOiBhbXBtR2V0dGVyLFxuICAgICBaOiB0aW1lWm9uZUdldHRlcixcbiAgICB3dzogd2Vla0dldHRlcigyKSxcbiAgICAgdzogd2Vla0dldHRlcigxKSxcbiAgICAgRzogZXJhR2V0dGVyLFxuICAgICBHRzogZXJhR2V0dGVyLFxuICAgICBHR0c6IGVyYUdldHRlcixcbiAgICAgR0dHRzogbG9uZ0VyYUdldHRlclxufTtcblxudmFyIERBVEVfRk9STUFUU19TUExJVCA9IC8oKD86W155TWRIaG1zYVpFd0cnXSspfCg/OicoPzpbXiddfCcnKSonKXwoPzpFK3x5K3xNK3xkK3xIK3xoK3xtK3xzK3xhfFp8Ryt8dyspKSguKikvLFxuICAgIE5VTUJFUl9TVFJJTkcgPSAvXlxcLT9cXGQrJC87XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgZGF0ZVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqICAgRm9ybWF0cyBgZGF0ZWAgdG8gYSBzdHJpbmcgYmFzZWQgb24gdGhlIHJlcXVlc3RlZCBgZm9ybWF0YC5cbiAqXG4gKiAgIGBmb3JtYXRgIHN0cmluZyBjYW4gYmUgY29tcG9zZWQgb2YgdGhlIGZvbGxvd2luZyBlbGVtZW50czpcbiAqXG4gKiAgICogYCd5eXl5J2A6IDQgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciAoZS5nLiBBRCAxID0+IDAwMDEsIEFEIDIwMTAgPT4gMjAxMClcbiAqICAgKiBgJ3l5J2A6IDIgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciwgcGFkZGVkICgwMC05OSkuIChlLmcuIEFEIDIwMDEgPT4gMDEsIEFEIDIwMTAgPT4gMTApXG4gKiAgICogYCd5J2A6IDEgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciwgZS5nLiAoQUQgMSA9PiAxLCBBRCAxOTkgPT4gMTk5KVxuICogICAqIGAnTU1NTSdgOiBNb250aCBpbiB5ZWFyIChKYW51YXJ5LURlY2VtYmVyKVxuICogICAqIGAnTU1NJ2A6IE1vbnRoIGluIHllYXIgKEphbi1EZWMpXG4gKiAgICogYCdNTSdgOiBNb250aCBpbiB5ZWFyLCBwYWRkZWQgKDAxLTEyKVxuICogICAqIGAnTSdgOiBNb250aCBpbiB5ZWFyICgxLTEyKVxuICogICAqIGAnZGQnYDogRGF5IGluIG1vbnRoLCBwYWRkZWQgKDAxLTMxKVxuICogICAqIGAnZCdgOiBEYXkgaW4gbW9udGggKDEtMzEpXG4gKiAgICogYCdFRUVFJ2A6IERheSBpbiBXZWVrLChTdW5kYXktU2F0dXJkYXkpXG4gKiAgICogYCdFRUUnYDogRGF5IGluIFdlZWssIChTdW4tU2F0KVxuICogICAqIGAnSEgnYDogSG91ciBpbiBkYXksIHBhZGRlZCAoMDAtMjMpXG4gKiAgICogYCdIJ2A6IEhvdXIgaW4gZGF5ICgwLTIzKVxuICogICAqIGAnaGgnYDogSG91ciBpbiBBTS9QTSwgcGFkZGVkICgwMS0xMilcbiAqICAgKiBgJ2gnYDogSG91ciBpbiBBTS9QTSwgKDEtMTIpXG4gKiAgICogYCdtbSdgOiBNaW51dGUgaW4gaG91ciwgcGFkZGVkICgwMC01OSlcbiAqICAgKiBgJ20nYDogTWludXRlIGluIGhvdXIgKDAtNTkpXG4gKiAgICogYCdzcydgOiBTZWNvbmQgaW4gbWludXRlLCBwYWRkZWQgKDAwLTU5KVxuICogICAqIGAncydgOiBTZWNvbmQgaW4gbWludXRlICgwLTU5KVxuICogICAqIGAnc3NzJ2A6IE1pbGxpc2Vjb25kIGluIHNlY29uZCwgcGFkZGVkICgwMDAtOTk5KVxuICogICAqIGAnYSdgOiBBTS9QTSBtYXJrZXJcbiAqICAgKiBgJ1onYDogNCBkaWdpdCAoK3NpZ24pIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB0aW1lem9uZSBvZmZzZXQgKC0xMjAwLSsxMjAwKVxuICogICAqIGAnd3cnYDogV2VlayBvZiB5ZWFyLCBwYWRkZWQgKDAwLTUzKS4gV2VlayAwMSBpcyB0aGUgd2VlayB3aXRoIHRoZSBmaXJzdCBUaHVyc2RheSBvZiB0aGUgeWVhclxuICogICAqIGAndydgOiBXZWVrIG9mIHllYXIgKDAtNTMpLiBXZWVrIDEgaXMgdGhlIHdlZWsgd2l0aCB0aGUgZmlyc3QgVGh1cnNkYXkgb2YgdGhlIHllYXJcbiAqICAgKiBgJ0cnYCwgYCdHRydgLCBgJ0dHRydgOiBUaGUgYWJicmV2aWF0ZWQgZm9ybSBvZiB0aGUgZXJhIHN0cmluZyAoZS5nLiAnQUQnKVxuICogICAqIGAnR0dHRydgOiBUaGUgbG9uZyBmb3JtIG9mIHRoZSBlcmEgc3RyaW5nIChlLmcuICdBbm5vIERvbWluaScpXG4gKlxuICogICBgZm9ybWF0YCBzdHJpbmcgY2FuIGFsc28gYmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgcHJlZGVmaW5lZFxuICogICB7QGxpbmsgZ3VpZGUvaTE4biBsb2NhbGl6YWJsZSBmb3JtYXRzfTpcbiAqXG4gKiAgICogYCdtZWRpdW0nYDogZXF1aXZhbGVudCB0byBgJ01NTSBkLCB5IGg6bW06c3MgYSdgIGZvciBlbl9VUyBsb2NhbGVcbiAqICAgICAoZS5nLiBTZXAgMywgMjAxMCAxMjowNTowOCBQTSlcbiAqICAgKiBgJ3Nob3J0J2A6IGVxdWl2YWxlbnQgdG8gYCdNL2QveXkgaDptbSBhJ2AgZm9yIGVuX1VTICBsb2NhbGUgKGUuZy4gOS8zLzEwIDEyOjA1IFBNKVxuICogICAqIGAnZnVsbERhdGUnYDogZXF1aXZhbGVudCB0byBgJ0VFRUUsIE1NTU0gZCwgeSdgIGZvciBlbl9VUyAgbG9jYWxlXG4gKiAgICAgKGUuZy4gRnJpZGF5LCBTZXB0ZW1iZXIgMywgMjAxMClcbiAqICAgKiBgJ2xvbmdEYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCdNTU1NIGQsIHknYCBmb3IgZW5fVVMgIGxvY2FsZSAoZS5nLiBTZXB0ZW1iZXIgMywgMjAxMClcbiAqICAgKiBgJ21lZGl1bURhdGUnYDogZXF1aXZhbGVudCB0byBgJ01NTSBkLCB5J2AgZm9yIGVuX1VTICBsb2NhbGUgKGUuZy4gU2VwIDMsIDIwMTApXG4gKiAgICogYCdzaG9ydERhdGUnYDogZXF1aXZhbGVudCB0byBgJ00vZC95eSdgIGZvciBlbl9VUyBsb2NhbGUgKGUuZy4gOS8zLzEwKVxuICogICAqIGAnbWVkaXVtVGltZSdgOiBlcXVpdmFsZW50IHRvIGAnaDptbTpzcyBhJ2AgZm9yIGVuX1VTIGxvY2FsZSAoZS5nLiAxMjowNTowOCBQTSlcbiAqICAgKiBgJ3Nob3J0VGltZSdgOiBlcXVpdmFsZW50IHRvIGAnaDptbSBhJ2AgZm9yIGVuX1VTIGxvY2FsZSAoZS5nLiAxMjowNSBQTSlcbiAqXG4gKiAgIGBmb3JtYXRgIHN0cmluZyBjYW4gY29udGFpbiBsaXRlcmFsIHZhbHVlcy4gVGhlc2UgbmVlZCB0byBiZSBlc2NhcGVkIGJ5IHN1cnJvdW5kaW5nIHdpdGggc2luZ2xlIHF1b3RlcyAoZS5nLlxuICogICBgXCJoICdpbiB0aGUgbW9ybmluZydcImApLiBJbiBvcmRlciB0byBvdXRwdXQgYSBzaW5nbGUgcXVvdGUsIGVzY2FwZSBpdCAtIGkuZS4sIHR3byBzaW5nbGUgcXVvdGVzIGluIGEgc2VxdWVuY2VcbiAqICAgKGUuZy4gYFwiaCAnbycnY2xvY2snXCJgKS5cbiAqXG4gKiBAcGFyYW0geyhEYXRlfG51bWJlcnxzdHJpbmcpfSBkYXRlIERhdGUgdG8gZm9ybWF0IGVpdGhlciBhcyBEYXRlIG9iamVjdCwgbWlsbGlzZWNvbmRzIChzdHJpbmcgb3JcbiAqICAgIG51bWJlcikgb3IgdmFyaW91cyBJU08gODYwMSBkYXRldGltZSBzdHJpbmcgZm9ybWF0cyAoZS5nLiB5eXl5LU1NLWRkVEhIOm1tOnNzLnNzc1ogYW5kIGl0c1xuICogICAgc2hvcnRlciB2ZXJzaW9ucyBsaWtlIHl5eXktTU0tZGRUSEg6bW1aLCB5eXl5LU1NLWRkIG9yIHl5eXlNTWRkVEhIbW1zc1opLiBJZiBubyB0aW1lem9uZSBpc1xuICogICAgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaW5wdXQsIHRoZSB0aW1lIGlzIGNvbnNpZGVyZWQgdG8gYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICogQHBhcmFtIHtzdHJpbmc9fSBmb3JtYXQgRm9ybWF0dGluZyBydWxlcyAoc2VlIERlc2NyaXB0aW9uKS4gSWYgbm90IHNwZWNpZmllZCxcbiAqICAgIGBtZWRpdW1EYXRlYCBpcyB1c2VkLlxuICogQHBhcmFtIHtzdHJpbmc9fSB0aW1lem9uZSBUaW1lem9uZSB0byBiZSB1c2VkIGZvciBmb3JtYXR0aW5nLiBJdCB1bmRlcnN0YW5kcyBVVEMvR01UIGFuZCB0aGVcbiAqICAgIGNvbnRpbmVudGFsIFVTIHRpbWUgem9uZSBhYmJyZXZpYXRpb25zLCBidXQgZm9yIGdlbmVyYWwgdXNlLCB1c2UgYSB0aW1lIHpvbmUgb2Zmc2V0LCBmb3JcbiAqICAgIGV4YW1wbGUsIGAnKzA0MzAnYCAoNCBob3VycywgMzAgbWludXRlcyBlYXN0IG9mIHRoZSBHcmVlbndpY2ggbWVyaWRpYW4pXG4gKiAgICBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIgd2lsbCBiZSB1c2VkLlxuICogQHJldHVybnMge3N0cmluZ30gRm9ybWF0dGVkIHN0cmluZyBvciB0aGUgaW5wdXQgaWYgaW5wdXQgaXMgbm90IHJlY29nbml6ZWQgYXMgZGF0ZS9taWxsaXMuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOidtZWRpdW0nfX08L3NwYW4+OlxuICAgICAgICAgICA8c3Bhbj57ezEyODgzMjM2MjMwMDYgfCBkYXRlOidtZWRpdW0nfX08L3NwYW4+PGJyPlxuICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOid5eXl5LU1NLWRkIEhIOm1tOnNzIFonfX08L3NwYW4+OlxuICAgICAgICAgIDxzcGFuPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J3l5eXktTU0tZGQgSEg6bW06c3MgWid9fTwvc3Bhbj48YnI+XG4gICAgICAgPHNwYW4gbmctbm9uLWJpbmRhYmxlPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J01NL2RkL3l5eXkgQCBoOm1tYSd9fTwvc3Bhbj46XG4gICAgICAgICAgPHNwYW4+e3snMTI4ODMyMzYyMzAwNicgfCBkYXRlOidNTS9kZC95eXl5IEAgaDptbWEnfX08L3NwYW4+PGJyPlxuICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOlwiTU0vZGQveXl5eSAnYXQnIGg6bW1hXCJ9fTwvc3Bhbj46XG4gICAgICAgICAgPHNwYW4+e3snMTI4ODMyMzYyMzAwNicgfCBkYXRlOlwiTU0vZGQveXl5eSAnYXQnIGg6bW1hXCJ9fTwvc3Bhbj48YnI+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgZm9ybWF0IGRhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoXCIxMjg4MzIzNjIzMDA2IHwgZGF0ZTonbWVkaXVtJ1wiKSkuZ2V0VGV4dCgpKS5cbiAgICAgICAgICAgIHRvTWF0Y2goL09jdCAyXFxkLCAyMDEwIFxcZHsxLDJ9OlxcZHsyfTpcXGR7Mn0gKEFNfFBNKS8pO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZyhcIjEyODgzMjM2MjMwMDYgfCBkYXRlOid5eXl5LU1NLWRkIEhIOm1tOnNzIFonXCIpKS5nZXRUZXh0KCkpLlxuICAgICAgICAgICAgdG9NYXRjaCgvMjAxMFxcLTEwXFwtMlxcZCBcXGR7Mn06XFxkezJ9OlxcZHsyfSAoXFwtfFxcKyk/XFxkezR9Lyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKFwiJzEyODgzMjM2MjMwMDYnIHwgZGF0ZTonTU0vZGQveXl5eSBAIGg6bW1hJ1wiKSkuZ2V0VGV4dCgpKS5cbiAgICAgICAgICAgIHRvTWF0Y2goLzEwXFwvMlxcZFxcLzIwMTAgQCBcXGR7MSwyfTpcXGR7Mn0oQU18UE0pLyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKFwiJzEyODgzMjM2MjMwMDYnIHwgZGF0ZTpcXFwiTU0vZGQveXl5eSAnYXQnIGg6bW1hXFxcIlwiKSkuZ2V0VGV4dCgpKS5cbiAgICAgICAgICAgIHRvTWF0Y2goLzEwXFwvMlxcZFxcLzIwMTAgYXQgXFxkezEsMn06XFxkezJ9KEFNfFBNKS8pO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbmRhdGVGaWx0ZXIuJGluamVjdCA9IFsnJGxvY2FsZSddO1xuZnVuY3Rpb24gZGF0ZUZpbHRlcigkbG9jYWxlKSB7XG5cblxuICB2YXIgUl9JU084NjAxX1NUUiA9IC9eKFxcZHs0fSktPyhcXGRcXGQpLT8oXFxkXFxkKSg/OlQoXFxkXFxkKSg/Ojo/KFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86XFwuKFxcZCspKT8pPyk/KFp8KFsrLV0pKFxcZFxcZCk6PyhcXGRcXGQpKT8pPyQvO1xuICAgICAgICAgICAgICAgICAgICAgLy8gMSAgICAgICAgMiAgICAgICAzICAgICAgICAgNCAgICAgICAgICA1ICAgICAgICAgIDYgICAgICAgICAgNyAgICAgICAgICA4ICA5ICAgICAxMCAgICAgIDExXG4gIGZ1bmN0aW9uIGpzb25TdHJpbmdUb0RhdGUoc3RyaW5nKSB7XG4gICAgdmFyIG1hdGNoO1xuICAgIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChSX0lTTzg2MDFfU1RSKSkge1xuICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgwKSxcbiAgICAgICAgICB0ekhvdXIgPSAwLFxuICAgICAgICAgIHR6TWluICA9IDAsXG4gICAgICAgICAgZGF0ZVNldHRlciA9IG1hdGNoWzhdID8gZGF0ZS5zZXRVVENGdWxsWWVhciA6IGRhdGUuc2V0RnVsbFllYXIsXG4gICAgICAgICAgdGltZVNldHRlciA9IG1hdGNoWzhdID8gZGF0ZS5zZXRVVENIb3VycyA6IGRhdGUuc2V0SG91cnM7XG5cbiAgICAgIGlmIChtYXRjaFs5XSkge1xuICAgICAgICB0ekhvdXIgPSB0b0ludChtYXRjaFs5XSArIG1hdGNoWzEwXSk7XG4gICAgICAgIHR6TWluID0gdG9JbnQobWF0Y2hbOV0gKyBtYXRjaFsxMV0pO1xuICAgICAgfVxuICAgICAgZGF0ZVNldHRlci5jYWxsKGRhdGUsIHRvSW50KG1hdGNoWzFdKSwgdG9JbnQobWF0Y2hbMl0pIC0gMSwgdG9JbnQobWF0Y2hbM10pKTtcbiAgICAgIHZhciBoID0gdG9JbnQobWF0Y2hbNF0gfHwgMCkgLSB0ekhvdXI7XG4gICAgICB2YXIgbSA9IHRvSW50KG1hdGNoWzVdIHx8IDApIC0gdHpNaW47XG4gICAgICB2YXIgcyA9IHRvSW50KG1hdGNoWzZdIHx8IDApO1xuICAgICAgdmFyIG1zID0gTWF0aC5yb3VuZChwYXJzZUZsb2F0KCcwLicgKyAobWF0Y2hbN10gfHwgMCkpICogMTAwMCk7XG4gICAgICB0aW1lU2V0dGVyLmNhbGwoZGF0ZSwgaCwgbSwgcywgbXMpO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cblxuXG4gIHJldHVybiBmdW5jdGlvbihkYXRlLCBmb3JtYXQsIHRpbWV6b25lKSB7XG4gICAgdmFyIHRleHQgPSAnJyxcbiAgICAgICAgcGFydHMgPSBbXSxcbiAgICAgICAgZm4sIG1hdGNoO1xuXG4gICAgZm9ybWF0ID0gZm9ybWF0IHx8ICdtZWRpdW1EYXRlJztcbiAgICBmb3JtYXQgPSAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFNbZm9ybWF0XSB8fCBmb3JtYXQ7XG4gICAgaWYgKGlzU3RyaW5nKGRhdGUpKSB7XG4gICAgICBkYXRlID0gTlVNQkVSX1NUUklORy50ZXN0KGRhdGUpID8gdG9JbnQoZGF0ZSkgOiBqc29uU3RyaW5nVG9EYXRlKGRhdGUpO1xuICAgIH1cblxuICAgIGlmIChpc051bWJlcihkYXRlKSkge1xuICAgICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgIH1cblxuICAgIGlmICghaXNEYXRlKGRhdGUpIHx8ICFpc0Zpbml0ZShkYXRlLmdldFRpbWUoKSkpIHtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIHdoaWxlIChmb3JtYXQpIHtcbiAgICAgIG1hdGNoID0gREFURV9GT1JNQVRTX1NQTElULmV4ZWMoZm9ybWF0KTtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBwYXJ0cyA9IGNvbmNhdChwYXJ0cywgbWF0Y2gsIDEpO1xuICAgICAgICBmb3JtYXQgPSBwYXJ0cy5wb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnRzLnB1c2goZm9ybWF0KTtcbiAgICAgICAgZm9ybWF0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGF0ZVRpbWV6b25lT2Zmc2V0ID0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIGlmICh0aW1lem9uZSkge1xuICAgICAgZGF0ZVRpbWV6b25lT2Zmc2V0ID0gdGltZXpvbmVUb09mZnNldCh0aW1lem9uZSwgZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpKTtcbiAgICAgIGRhdGUgPSBjb252ZXJ0VGltZXpvbmVUb0xvY2FsKGRhdGUsIHRpbWV6b25lLCB0cnVlKTtcbiAgICB9XG4gICAgZm9yRWFjaChwYXJ0cywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGZuID0gREFURV9GT1JNQVRTW3ZhbHVlXTtcbiAgICAgIHRleHQgKz0gZm4gPyBmbihkYXRlLCAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMsIGRhdGVUaW1lem9uZU9mZnNldClcbiAgICAgICAgICAgICAgICAgOiB2YWx1ZS5yZXBsYWNlKC8oXid8JyQpL2csICcnKS5yZXBsYWNlKC8nJy9nLCBcIidcIik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGV4dDtcbiAgfTtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGpzb25cbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiAgIEFsbG93cyB5b3UgdG8gY29udmVydCBhIEphdmFTY3JpcHQgb2JqZWN0IGludG8gSlNPTiBzdHJpbmcuXG4gKlxuICogICBUaGlzIGZpbHRlciBpcyBtb3N0bHkgdXNlZnVsIGZvciBkZWJ1Z2dpbmcuIFdoZW4gdXNpbmcgdGhlIGRvdWJsZSBjdXJseSB7e3ZhbHVlfX0gbm90YXRpb25cbiAqICAgdGhlIGJpbmRpbmcgaXMgYXV0b21hdGljYWxseSBjb252ZXJ0ZWQgdG8gSlNPTi5cbiAqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBBbnkgSmF2YVNjcmlwdCBvYmplY3QgKGluY2x1ZGluZyBhcnJheXMgYW5kIHByaW1pdGl2ZSB0eXBlcykgdG8gZmlsdGVyLlxuICogQHBhcmFtIHtudW1iZXI9fSBzcGFjaW5nIFRoZSBudW1iZXIgb2Ygc3BhY2VzIHRvIHVzZSBwZXIgaW5kZW50YXRpb24sIGRlZmF1bHRzIHRvIDIuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBKU09OIHN0cmluZy5cbiAqXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxwcmUgaWQ9XCJkZWZhdWx0LXNwYWNpbmdcIj57eyB7J25hbWUnOid2YWx1ZSd9IHwganNvbiB9fTwvcHJlPlxuICAgICAgIDxwcmUgaWQ9XCJjdXN0b20tc3BhY2luZ1wiPnt7IHsnbmFtZSc6J3ZhbHVlJ30gfCBqc29uOjQgfX08L3ByZT5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBqc29uaWZ5IGZpbHRlcmVkIG9iamVjdHMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdkZWZhdWx0LXNwYWNpbmcnKSkuZ2V0VGV4dCgpKS50b01hdGNoKC9cXHtcXG4gIFwibmFtZVwiOiA/XCJ2YWx1ZVwiXFxufS8pO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1c3RvbS1zcGFjaW5nJykpLmdldFRleHQoKSkudG9NYXRjaCgvXFx7XFxuICAgIFwibmFtZVwiOiA/XCJ2YWx1ZVwiXFxufS8pO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKlxuICovXG5mdW5jdGlvbiBqc29uRmlsdGVyKCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBzcGFjaW5nKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHNwYWNpbmcpKSB7XG4gICAgICAgIHNwYWNpbmcgPSAyO1xuICAgIH1cbiAgICByZXR1cm4gdG9Kc29uKG9iamVjdCwgc3BhY2luZyk7XG4gIH07XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSBsb3dlcmNhc2VcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnRzIHN0cmluZyB0byBsb3dlcmNhc2UuXG4gKiBAc2VlIGFuZ3VsYXIubG93ZXJjYXNlXG4gKi9cbnZhciBsb3dlcmNhc2VGaWx0ZXIgPSB2YWx1ZUZuKGxvd2VyY2FzZSk7XG5cblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSB1cHBlcmNhc2VcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnRzIHN0cmluZyB0byB1cHBlcmNhc2UuXG4gKiBAc2VlIGFuZ3VsYXIudXBwZXJjYXNlXG4gKi9cbnZhciB1cHBlcmNhc2VGaWx0ZXIgPSB2YWx1ZUZuKHVwcGVyY2FzZSk7XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgbGltaXRUb1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgb3Igc3RyaW5nIGNvbnRhaW5pbmcgb25seSBhIHNwZWNpZmllZCBudW1iZXIgb2YgZWxlbWVudHMuIFRoZSBlbGVtZW50c1xuICogYXJlIHRha2VuIGZyb20gZWl0aGVyIHRoZSBiZWdpbm5pbmcgb3IgdGhlIGVuZCBvZiB0aGUgc291cmNlIGFycmF5LCBzdHJpbmcgb3IgbnVtYmVyLCBhcyBzcGVjaWZpZWQgYnlcbiAqIHRoZSB2YWx1ZSBhbmQgc2lnbiAocG9zaXRpdmUgb3IgbmVnYXRpdmUpIG9mIGBsaW1pdGAuIElmIGEgbnVtYmVyIGlzIHVzZWQgYXMgaW5wdXQsIGl0IGlzXG4gKiBjb252ZXJ0ZWQgdG8gYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd8bnVtYmVyfSBpbnB1dCBTb3VyY2UgYXJyYXksIHN0cmluZyBvciBudW1iZXIgdG8gYmUgbGltaXRlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gbGltaXQgVGhlIGxlbmd0aCBvZiB0aGUgcmV0dXJuZWQgYXJyYXkgb3Igc3RyaW5nLiBJZiB0aGUgYGxpbWl0YCBudW1iZXJcbiAqICAgICBpcyBwb3NpdGl2ZSwgYGxpbWl0YCBudW1iZXIgb2YgaXRlbXMgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzb3VyY2UgYXJyYXkvc3RyaW5nIGFyZSBjb3BpZWQuXG4gKiAgICAgSWYgdGhlIG51bWJlciBpcyBuZWdhdGl2ZSwgYGxpbWl0YCBudW1iZXIgIG9mIGl0ZW1zIGZyb20gdGhlIGVuZCBvZiB0aGUgc291cmNlIGFycmF5L3N0cmluZ1xuICogICAgIGFyZSBjb3BpZWQuIFRoZSBgbGltaXRgIHdpbGwgYmUgdHJpbW1lZCBpZiBpdCBleGNlZWRzIGBhcnJheS5sZW5ndGhgLiBJZiBgbGltaXRgIGlzIHVuZGVmaW5lZCxcbiAqICAgICB0aGUgaW5wdXQgd2lsbCBiZSByZXR1cm5lZCB1bmNoYW5nZWQuXG4gKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyKT19IGJlZ2luIEluZGV4IGF0IHdoaWNoIHRvIGJlZ2luIGxpbWl0YXRpb24uIEFzIGEgbmVnYXRpdmUgaW5kZXgsIGBiZWdpbmBcbiAqICAgICBpbmRpY2F0ZXMgYW4gb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgaW5wdXRgLiBEZWZhdWx0cyB0byBgMGAuXG4gKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfSBBIG5ldyBzdWItYXJyYXkgb3Igc3Vic3RyaW5nIG9mIGxlbmd0aCBgbGltaXRgIG9yIGxlc3MgaWYgaW5wdXQgYXJyYXlcbiAqICAgICBoYWQgbGVzcyB0aGFuIGBsaW1pdGAgZWxlbWVudHMuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImxpbWl0VG9FeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdsaW1pdFRvRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS5udW1iZXJzID0gWzEsMiwzLDQsNSw2LDcsOCw5XTtcbiAgICAgICAgICAgICAkc2NvcGUubGV0dGVycyA9IFwiYWJjZGVmZ2hpXCI7XG4gICAgICAgICAgICAgJHNjb3BlLmxvbmdOdW1iZXIgPSAyMzQ1NDMyMzQyO1xuICAgICAgICAgICAgICRzY29wZS5udW1MaW1pdCA9IDM7XG4gICAgICAgICAgICAgJHNjb3BlLmxldHRlckxpbWl0ID0gMztcbiAgICAgICAgICAgICAkc2NvcGUubG9uZ051bWJlckxpbWl0ID0gMztcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICBMaW1pdCB7e251bWJlcnN9fSB0bzpcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgc3RlcD1cIjFcIiBuZy1tb2RlbD1cIm51bUxpbWl0XCI+XG4gICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgPHA+T3V0cHV0IG51bWJlcnM6IHt7IG51bWJlcnMgfCBsaW1pdFRvOm51bUxpbWl0IH19PC9wPlxuICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgTGltaXQge3tsZXR0ZXJzfX0gdG86XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIHN0ZXA9XCIxXCIgbmctbW9kZWw9XCJsZXR0ZXJMaW1pdFwiPlxuICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgIDxwPk91dHB1dCBsZXR0ZXJzOiB7eyBsZXR0ZXJzIHwgbGltaXRUbzpsZXR0ZXJMaW1pdCB9fTwvcD5cbiAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgIExpbWl0IHt7bG9uZ051bWJlcn19IHRvOlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBzdGVwPVwiMVwiIG5nLW1vZGVsPVwibG9uZ051bWJlckxpbWl0XCI+XG4gICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgPHA+T3V0cHV0IGxvbmcgbnVtYmVyOiB7eyBsb25nTnVtYmVyIHwgbGltaXRUbzpsb25nTnVtYmVyTGltaXQgfX08L3A+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciBudW1MaW1pdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbnVtTGltaXQnKSk7XG4gICAgICAgdmFyIGxldHRlckxpbWl0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdsZXR0ZXJMaW1pdCcpKTtcbiAgICAgICB2YXIgbG9uZ051bWJlckxpbWl0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdsb25nTnVtYmVyTGltaXQnKSk7XG4gICAgICAgdmFyIGxpbWl0ZWROdW1iZXJzID0gZWxlbWVudChieS5iaW5kaW5nKCdudW1iZXJzIHwgbGltaXRUbzpudW1MaW1pdCcpKTtcbiAgICAgICB2YXIgbGltaXRlZExldHRlcnMgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2xldHRlcnMgfCBsaW1pdFRvOmxldHRlckxpbWl0JykpO1xuICAgICAgIHZhciBsaW1pdGVkTG9uZ051bWJlciA9IGVsZW1lbnQoYnkuYmluZGluZygnbG9uZ051bWJlciB8IGxpbWl0VG86bG9uZ051bWJlckxpbWl0JykpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBsaW1pdCB0aGUgbnVtYmVyIGFycmF5IHRvIGZpcnN0IHRocmVlIGl0ZW1zJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QobnVtTGltaXRJbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJzMnKTtcbiAgICAgICAgIGV4cGVjdChsZXR0ZXJMaW1pdElucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnMycpO1xuICAgICAgICAgZXhwZWN0KGxvbmdOdW1iZXJMaW1pdElucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnMycpO1xuICAgICAgICAgZXhwZWN0KGxpbWl0ZWROdW1iZXJzLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IG51bWJlcnM6IFsxLDIsM10nKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTGV0dGVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsZXR0ZXJzOiBhYmMnKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTG9uZ051bWJlci5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsb25nIG51bWJlcjogMjM0Jyk7XG4gICAgICAgfSk7XG5cbiAgICAgICAvLyBUaGVyZSBpcyBhIGJ1ZyBpbiBzYWZhcmkgYW5kIHByb3RyYWN0b3IgdGhhdCBkb2Vzbid0IGxpa2UgdGhlIG1pbnVzIGtleVxuICAgICAgIC8vIGl0KCdzaG91bGQgdXBkYXRlIHRoZSBvdXRwdXQgd2hlbiAtMyBpcyBlbnRlcmVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgLy8gICBudW1MaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgLy8gICBudW1MaW1pdElucHV0LnNlbmRLZXlzKCctMycpO1xuICAgICAgIC8vICAgbGV0dGVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgIC8vICAgbGV0dGVyTGltaXRJbnB1dC5zZW5kS2V5cygnLTMnKTtcbiAgICAgICAvLyAgIGxvbmdOdW1iZXJMaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgLy8gICBsb25nTnVtYmVyTGltaXRJbnB1dC5zZW5kS2V5cygnLTMnKTtcbiAgICAgICAvLyAgIGV4cGVjdChsaW1pdGVkTnVtYmVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBudW1iZXJzOiBbNyw4LDldJyk7XG4gICAgICAgLy8gICBleHBlY3QobGltaXRlZExldHRlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbGV0dGVyczogZ2hpJyk7XG4gICAgICAgLy8gICBleHBlY3QobGltaXRlZExvbmdOdW1iZXIuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbG9uZyBudW1iZXI6IDM0MicpO1xuICAgICAgIC8vIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBub3QgZXhjZWVkIHRoZSBtYXhpbXVtIHNpemUgb2YgaW5wdXQgYXJyYXknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIG51bUxpbWl0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIG51bUxpbWl0SW5wdXQuc2VuZEtleXMoJzEwMCcpO1xuICAgICAgICAgbGV0dGVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbGV0dGVyTGltaXRJbnB1dC5zZW5kS2V5cygnMTAwJyk7XG4gICAgICAgICBsb25nTnVtYmVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbG9uZ051bWJlckxpbWl0SW5wdXQuc2VuZEtleXMoJzEwMCcpO1xuICAgICAgICAgZXhwZWN0KGxpbWl0ZWROdW1iZXJzLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IG51bWJlcnM6IFsxLDIsMyw0LDUsNiw3LDgsOV0nKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTGV0dGVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsZXR0ZXJzOiBhYmNkZWZnaGknKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTG9uZ051bWJlci5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsb25nIG51bWJlcjogMjM0NTQzMjM0MicpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4qL1xuZnVuY3Rpb24gbGltaXRUb0ZpbHRlcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBsaW1pdCwgYmVnaW4pIHtcbiAgICBpZiAoTWF0aC5hYnMoTnVtYmVyKGxpbWl0KSkgPT09IEluZmluaXR5KSB7XG4gICAgICBsaW1pdCA9IE51bWJlcihsaW1pdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbWl0ID0gdG9JbnQobGltaXQpO1xuICAgIH1cbiAgICBpZiAoaXNOYU4obGltaXQpKSByZXR1cm4gaW5wdXQ7XG5cbiAgICBpZiAoaXNOdW1iZXIoaW5wdXQpKSBpbnB1dCA9IGlucHV0LnRvU3RyaW5nKCk7XG4gICAgaWYgKCFpc0FycmF5KGlucHV0KSAmJiAhaXNTdHJpbmcoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG5cbiAgICBiZWdpbiA9ICghYmVnaW4gfHwgaXNOYU4oYmVnaW4pKSA/IDAgOiB0b0ludChiZWdpbik7XG4gICAgYmVnaW4gPSAoYmVnaW4gPCAwKSA/IE1hdGgubWF4KDAsIGlucHV0Lmxlbmd0aCArIGJlZ2luKSA6IGJlZ2luO1xuXG4gICAgaWYgKGxpbWl0ID49IDApIHtcbiAgICAgIHJldHVybiBpbnB1dC5zbGljZShiZWdpbiwgYmVnaW4gKyBsaW1pdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChiZWdpbiA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaW5wdXQuc2xpY2UobGltaXQsIGlucHV0Lmxlbmd0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaW5wdXQuc2xpY2UoTWF0aC5tYXgoMCwgYmVnaW4gKyBsaW1pdCksIGJlZ2luKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgb3JkZXJCeVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIE9yZGVycyBhIHNwZWNpZmllZCBgYXJyYXlgIGJ5IHRoZSBgZXhwcmVzc2lvbmAgcHJlZGljYXRlLiBJdCBpcyBvcmRlcmVkIGFscGhhYmV0aWNhbGx5XG4gKiBmb3Igc3RyaW5ncyBhbmQgbnVtZXJpY2FsbHkgZm9yIG51bWJlcnMuIE5vdGU6IGlmIHlvdSBub3RpY2UgbnVtYmVycyBhcmUgbm90IGJlaW5nIHNvcnRlZFxuICogYXMgZXhwZWN0ZWQsIG1ha2Ugc3VyZSB0aGV5IGFyZSBhY3R1YWxseSBiZWluZyBzYXZlZCBhcyBudW1iZXJzIGFuZCBub3Qgc3RyaW5ncy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKil8c3RyaW5nfEFycmF5LjwoZnVuY3Rpb24oKil8c3RyaW5nKT49fSBleHByZXNzaW9uIEEgcHJlZGljYXRlIHRvIGJlXG4gKiAgICB1c2VkIGJ5IHRoZSBjb21wYXJhdG9yIHRvIGRldGVybWluZSB0aGUgb3JkZXIgb2YgZWxlbWVudHMuXG4gKlxuICogICAgQ2FuIGJlIG9uZSBvZjpcbiAqXG4gKiAgICAtIGBmdW5jdGlvbmA6IEdldHRlciBmdW5jdGlvbi4gVGhlIHJlc3VsdCBvZiB0aGlzIGZ1bmN0aW9uIHdpbGwgYmUgc29ydGVkIHVzaW5nIHRoZVxuICogICAgICBgPGAsIGA9PT1gLCBgPmAgb3BlcmF0b3IuXG4gKiAgICAtIGBzdHJpbmdgOiBBbiBBbmd1bGFyIGV4cHJlc3Npb24uIFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIGlzIHVzZWQgdG8gY29tcGFyZSBlbGVtZW50c1xuICogICAgICAoZm9yIGV4YW1wbGUgYG5hbWVgIHRvIHNvcnQgYnkgYSBwcm9wZXJ0eSBjYWxsZWQgYG5hbWVgIG9yIGBuYW1lLnN1YnN0cigwLCAzKWAgdG8gc29ydCBieVxuICogICAgICAzIGZpcnN0IGNoYXJhY3RlcnMgb2YgYSBwcm9wZXJ0eSBjYWxsZWQgYG5hbWVgKS4gVGhlIHJlc3VsdCBvZiBhIGNvbnN0YW50IGV4cHJlc3Npb25cbiAqICAgICAgaXMgaW50ZXJwcmV0ZWQgYXMgYSBwcm9wZXJ0eSBuYW1lIHRvIGJlIHVzZWQgaW4gY29tcGFyaXNvbnMgKGZvciBleGFtcGxlIGBcInNwZWNpYWwgbmFtZVwiYFxuICogICAgICB0byBzb3J0IG9iamVjdCBieSB0aGUgdmFsdWUgb2YgdGhlaXIgYHNwZWNpYWwgbmFtZWAgcHJvcGVydHkpLiBBbiBleHByZXNzaW9uIGNhbiBiZVxuICogICAgICBvcHRpb25hbGx5IHByZWZpeGVkIHdpdGggYCtgIG9yIGAtYCB0byBjb250cm9sIGFzY2VuZGluZyBvciBkZXNjZW5kaW5nIHNvcnQgb3JkZXJcbiAqICAgICAgKGZvciBleGFtcGxlLCBgK25hbWVgIG9yIGAtbmFtZWApLiBJZiBubyBwcm9wZXJ0eSBpcyBwcm92aWRlZCwgKGUuZy4gYCcrJ2ApIHRoZW4gdGhlIGFycmF5XG4gKiAgICAgIGVsZW1lbnQgaXRzZWxmIGlzIHVzZWQgdG8gY29tcGFyZSB3aGVyZSBzb3J0aW5nLlxuICogICAgLSBgQXJyYXlgOiBBbiBhcnJheSBvZiBmdW5jdGlvbiBvciBzdHJpbmcgcHJlZGljYXRlcy4gVGhlIGZpcnN0IHByZWRpY2F0ZSBpbiB0aGUgYXJyYXlcbiAqICAgICAgaXMgdXNlZCBmb3Igc29ydGluZywgYnV0IHdoZW4gdHdvIGl0ZW1zIGFyZSBlcXVpdmFsZW50LCB0aGUgbmV4dCBwcmVkaWNhdGUgaXMgdXNlZC5cbiAqXG4gKiAgICBJZiB0aGUgcHJlZGljYXRlIGlzIG1pc3Npbmcgb3IgZW1wdHkgdGhlbiBpdCBkZWZhdWx0cyB0byBgJysnYC5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSByZXZlcnNlIFJldmVyc2UgdGhlIG9yZGVyIG9mIHRoZSBhcnJheS5cbiAqIEByZXR1cm5zIHtBcnJheX0gU29ydGVkIGNvcHkgb2YgdGhlIHNvdXJjZSBhcnJheS5cbiAqXG4gKlxuICogQGV4YW1wbGVcbiAqIFRoZSBleGFtcGxlIGJlbG93IGRlbW9uc3RyYXRlcyBhIHNpbXBsZSBuZ1JlcGVhdCwgd2hlcmUgdGhlIGRhdGEgaXMgc29ydGVkXG4gKiBieSBhZ2UgaW4gZGVzY2VuZGluZyBvcmRlciAocHJlZGljYXRlIGlzIHNldCB0byBgJy1hZ2UnYCkuXG4gKiBgcmV2ZXJzZWAgaXMgbm90IHNldCwgd2hpY2ggbWVhbnMgaXQgZGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAgIDxleGFtcGxlIG1vZHVsZT1cIm9yZGVyQnlFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcmRlckJ5RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS5mcmllbmRzID1cbiAgICAgICAgICAgICAgICAgW3tuYW1lOidKb2huJywgcGhvbmU6JzU1NS0xMjEyJywgYWdlOjEwfSxcbiAgICAgICAgICAgICAgICAgIHtuYW1lOidNYXJ5JywgcGhvbmU6JzU1NS05ODc2JywgYWdlOjE5fSxcbiAgICAgICAgICAgICAgICAgIHtuYW1lOidNaWtlJywgcGhvbmU6JzU1NS00MzIxJywgYWdlOjIxfSxcbiAgICAgICAgICAgICAgICAgIHtuYW1lOidBZGFtJywgcGhvbmU6JzU1NS01Njc4JywgYWdlOjM1fSxcbiAgICAgICAgICAgICAgICAgIHtuYW1lOidKdWxpZScsIHBob25lOic1NTUtODc2NScsIGFnZToyOX1dO1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDx0YWJsZSBjbGFzcz1cImZyaWVuZFwiPlxuICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgPHRoPk5hbWU8L3RoPlxuICAgICAgICAgICAgIDx0aD5QaG9uZSBOdW1iZXI8L3RoPlxuICAgICAgICAgICAgIDx0aD5BZ2U8L3RoPlxuICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHMgfCBvcmRlckJ5OictYWdlJ1wiPlxuICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5uYW1lfX08L3RkPlxuICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5waG9uZX19PC90ZD5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQuYWdlfX08L3RkPlxuICAgICAgICAgICA8L3RyPlxuICAgICAgICAgPC90YWJsZT5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICpcbiAqIFRoZSBwcmVkaWNhdGUgYW5kIHJldmVyc2UgcGFyYW1ldGVycyBjYW4gYmUgY29udHJvbGxlZCBkeW5hbWljYWxseSB0aHJvdWdoIHNjb3BlIHByb3BlcnRpZXMsXG4gKiBhcyBzaG93biBpbiB0aGUgbmV4dCBleGFtcGxlLlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cIm9yZGVyQnlFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcmRlckJ5RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS5mcmllbmRzID1cbiAgICAgICAgICAgICAgICAgW3tuYW1lOidKb2huJywgcGhvbmU6JzU1NS0xMjEyJywgYWdlOjEwfSxcbiAgICAgICAgICAgICAgICAgIHtuYW1lOidNYXJ5JywgcGhvbmU6JzU1NS05ODc2JywgYWdlOjE5fSxcbiAgICAgICAgICAgICAgICAgIHtuYW1lOidNaWtlJywgcGhvbmU6JzU1NS00MzIxJywgYWdlOjIxfSxcbiAgICAgICAgICAgICAgICAgIHtuYW1lOidBZGFtJywgcGhvbmU6JzU1NS01Njc4JywgYWdlOjM1fSxcbiAgICAgICAgICAgICAgICAgIHtuYW1lOidKdWxpZScsIHBob25lOic1NTUtODc2NScsIGFnZToyOX1dO1xuICAgICAgICAgICAgICRzY29wZS5wcmVkaWNhdGUgPSAnYWdlJztcbiAgICAgICAgICAgICAkc2NvcGUucmV2ZXJzZSA9IHRydWU7XG4gICAgICAgICAgICAgJHNjb3BlLm9yZGVyID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUucmV2ZXJzZSA9ICgkc2NvcGUucHJlZGljYXRlID09PSBwcmVkaWNhdGUpID8gISRzY29wZS5yZXZlcnNlIDogZmFsc2U7XG4gICAgICAgICAgICAgICAkc2NvcGUucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+XG4gICAgICAgICAuc29ydG9yZGVyOmFmdGVyIHtcbiAgICAgICAgICAgY29udGVudDogJ1xcMjViMic7XG4gICAgICAgICB9XG4gICAgICAgICAuc29ydG9yZGVyLnJldmVyc2U6YWZ0ZXIge1xuICAgICAgICAgICBjb250ZW50OiAnXFwyNWJjJztcbiAgICAgICAgIH1cbiAgICAgICA8L3N0eWxlPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8cHJlPlNvcnRpbmcgcHJlZGljYXRlID0ge3twcmVkaWNhdGV9fTsgcmV2ZXJzZSA9IHt7cmV2ZXJzZX19PC9wcmU+XG4gICAgICAgICA8aHIvPlxuICAgICAgICAgWyA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJwcmVkaWNhdGU9JydcIj51bnNvcnRlZDwvYT4gXVxuICAgICAgICAgPHRhYmxlIGNsYXNzPVwiZnJpZW5kXCI+XG4gICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICA8dGg+XG4gICAgICAgICAgICAgICA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJvcmRlcignbmFtZScpXCI+TmFtZTwvYT5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic29ydG9yZGVyXCIgbmctc2hvdz1cInByZWRpY2F0ZSA9PT0gJ25hbWUnXCIgbmctY2xhc3M9XCJ7cmV2ZXJzZTpyZXZlcnNlfVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICAgIDx0aD5cbiAgICAgICAgICAgICAgIDxhIGhyZWY9XCJcIiBuZy1jbGljaz1cIm9yZGVyKCdwaG9uZScpXCI+UGhvbmUgTnVtYmVyPC9hPlxuICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzb3J0b3JkZXJcIiBuZy1zaG93PVwicHJlZGljYXRlID09PSAncGhvbmUnXCIgbmctY2xhc3M9XCJ7cmV2ZXJzZTpyZXZlcnNlfVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICAgIDx0aD5cbiAgICAgICAgICAgICAgIDxhIGhyZWY9XCJcIiBuZy1jbGljaz1cIm9yZGVyKCdhZ2UnKVwiPkFnZTwvYT5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic29ydG9yZGVyXCIgbmctc2hvdz1cInByZWRpY2F0ZSA9PT0gJ2FnZSdcIiBuZy1jbGFzcz1cIntyZXZlcnNlOnJldmVyc2V9XCI+PC9zcGFuPlxuICAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9XCJmcmllbmQgaW4gZnJpZW5kcyB8IG9yZGVyQnk6cHJlZGljYXRlOnJldmVyc2VcIj5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLmFnZX19PC90ZD5cbiAgICAgICAgICAgPC90cj5cbiAgICAgICAgIDwvdGFibGU+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqXG4gKiBJdCdzIGFsc28gcG9zc2libGUgdG8gY2FsbCB0aGUgb3JkZXJCeSBmaWx0ZXIgbWFudWFsbHksIGJ5IGluamVjdGluZyBgJGZpbHRlcmAsIHJldHJpZXZpbmcgdGhlXG4gKiBmaWx0ZXIgcm91dGluZSB3aXRoIGAkZmlsdGVyKCdvcmRlckJ5JylgLCBhbmQgY2FsbGluZyB0aGUgcmV0dXJuZWQgZmlsdGVyIHJvdXRpbmUgd2l0aCB0aGVcbiAqIGRlc2lyZWQgcGFyYW1ldGVycy5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIEBleGFtcGxlXG4gIDxleGFtcGxlIG1vZHVsZT1cIm9yZGVyQnlFeGFtcGxlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgIDx0YWJsZSBjbGFzcz1cImZyaWVuZFwiPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0aD48YSBocmVmPVwiXCIgbmctY2xpY2s9XCJyZXZlcnNlPWZhbHNlO29yZGVyKCduYW1lJywgZmFsc2UpXCI+TmFtZTwvYT5cbiAgICAgICAgICAgICAgKDxhIGhyZWY9XCJcIiBuZy1jbGljaz1cIm9yZGVyKCctbmFtZScsZmFsc2UpXCI+XjwvYT4pPC90aD5cbiAgICAgICAgICAgIDx0aD48YSBocmVmPVwiXCIgbmctY2xpY2s9XCJyZXZlcnNlPSFyZXZlcnNlO29yZGVyKCdwaG9uZScsIHJldmVyc2UpXCI+UGhvbmUgTnVtYmVyPC9hPjwvdGg+XG4gICAgICAgICAgICA8dGg+PGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwicmV2ZXJzZT0hcmV2ZXJzZTtvcmRlcignYWdlJyxyZXZlcnNlKVwiPkFnZTwvYT48L3RoPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzXCI+XG4gICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5waG9uZX19PC90ZD5cbiAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5hZ2V9fTwvdGQ+XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cblxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcmRlckJ5RXhhbXBsZScsIFtdKVxuICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsICckZmlsdGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkZmlsdGVyKSB7XG4gICAgICAgICAgdmFyIG9yZGVyQnkgPSAkZmlsdGVyKCdvcmRlckJ5Jyk7XG4gICAgICAgICAgJHNjb3BlLmZyaWVuZHMgPSBbXG4gICAgICAgICAgICB7IG5hbWU6ICdKb2huJywgICAgcGhvbmU6ICc1NTUtMTIxMicsICAgIGFnZTogMTAgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ01hcnknLCAgICBwaG9uZTogJzU1NS05ODc2JywgICAgYWdlOiAxOSB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnTWlrZScsICAgIHBob25lOiAnNTU1LTQzMjEnLCAgICBhZ2U6IDIxIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdBZGFtJywgICAgcGhvbmU6ICc1NTUtNTY3OCcsICAgIGFnZTogMzUgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ0p1bGllJywgICBwaG9uZTogJzU1NS04NzY1JywgICAgYWdlOiAyOSB9XG4gICAgICAgICAgXTtcbiAgICAgICAgICAkc2NvcGUub3JkZXIgPSBmdW5jdGlvbihwcmVkaWNhdGUsIHJldmVyc2UpIHtcbiAgICAgICAgICAgICRzY29wZS5mcmllbmRzID0gb3JkZXJCeSgkc2NvcGUuZnJpZW5kcywgcHJlZGljYXRlLCByZXZlcnNlKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgICRzY29wZS5vcmRlcignLWFnZScsZmFsc2UpO1xuICAgICAgICB9XSk7XG4gICAgPC9maWxlPlxuPC9leGFtcGxlPlxuICovXG5vcmRlckJ5RmlsdGVyLiRpbmplY3QgPSBbJyRwYXJzZSddO1xuZnVuY3Rpb24gb3JkZXJCeUZpbHRlcigkcGFyc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBzb3J0UHJlZGljYXRlLCByZXZlcnNlT3JkZXIpIHtcblxuICAgIGlmICghKGlzQXJyYXlMaWtlKGFycmF5KSkpIHJldHVybiBhcnJheTtcblxuICAgIGlmICghaXNBcnJheShzb3J0UHJlZGljYXRlKSkgeyBzb3J0UHJlZGljYXRlID0gW3NvcnRQcmVkaWNhdGVdOyB9XG4gICAgaWYgKHNvcnRQcmVkaWNhdGUubGVuZ3RoID09PSAwKSB7IHNvcnRQcmVkaWNhdGUgPSBbJysnXTsgfVxuXG4gICAgdmFyIHByZWRpY2F0ZXMgPSBwcm9jZXNzUHJlZGljYXRlcyhzb3J0UHJlZGljYXRlLCByZXZlcnNlT3JkZXIpO1xuICAgIC8vIEFkZCBhIHByZWRpY2F0ZSBhdCB0aGUgZW5kIHRoYXQgZXZhbHVhdGVzIHRvIHRoZSBlbGVtZW50IGluZGV4LiBUaGlzIG1ha2VzIHRoZVxuICAgIC8vIHNvcnQgc3RhYmxlIGFzIGl0IHdvcmtzIGFzIGEgdGllLWJyZWFrZXIgd2hlbiBhbGwgdGhlIGlucHV0IHByZWRpY2F0ZXMgY2Fubm90XG4gICAgLy8gZGlzdGluZ3Vpc2ggYmV0d2VlbiB0d28gZWxlbWVudHMuXG4gICAgcHJlZGljYXRlcy5wdXNoKHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHt9OyB9LCBkZXNjZW5kaW5nOiByZXZlcnNlT3JkZXIgPyAtMSA6IDF9KTtcblxuICAgIC8vIFRoZSBuZXh0IHRocmVlIGxpbmVzIGFyZSBhIHZlcnNpb24gb2YgYSBTd2FydHppYW4gVHJhbnNmb3JtIGlkaW9tIGZyb20gUGVybFxuICAgIC8vIChzb21ldGltZXMgY2FsbGVkIHRoZSBEZWNvcmF0ZS1Tb3J0LVVuZGVjb3JhdGUgaWRpb20pXG4gICAgLy8gU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NjaHdhcnR6aWFuX3RyYW5zZm9ybVxuICAgIHZhciBjb21wYXJlVmFsdWVzID0gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGFycmF5LCBnZXRDb21wYXJpc29uT2JqZWN0KTtcbiAgICBjb21wYXJlVmFsdWVzLnNvcnQoZG9Db21wYXJpc29uKTtcbiAgICBhcnJheSA9IGNvbXBhcmVWYWx1ZXMubWFwKGZ1bmN0aW9uKGl0ZW0pIHsgcmV0dXJuIGl0ZW0udmFsdWU7IH0pO1xuXG4gICAgcmV0dXJuIGFycmF5O1xuXG4gICAgZnVuY3Rpb24gZ2V0Q29tcGFyaXNvbk9iamVjdCh2YWx1ZSwgaW5kZXgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgcHJlZGljYXRlVmFsdWVzOiBwcmVkaWNhdGVzLm1hcChmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0UHJlZGljYXRlVmFsdWUocHJlZGljYXRlLmdldCh2YWx1ZSksIGluZGV4KTtcbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZG9Db21wYXJpc29uKHYxLCB2Mikge1xuICAgICAgdmFyIHJlc3VsdCA9IDA7XG4gICAgICBmb3IgKHZhciBpbmRleD0wLCBsZW5ndGggPSBwcmVkaWNhdGVzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgcmVzdWx0ID0gY29tcGFyZSh2MS5wcmVkaWNhdGVWYWx1ZXNbaW5kZXhdLCB2Mi5wcmVkaWNhdGVWYWx1ZXNbaW5kZXhdKSAqIHByZWRpY2F0ZXNbaW5kZXhdLmRlc2NlbmRpbmc7XG4gICAgICAgIGlmIChyZXN1bHQpIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc1ByZWRpY2F0ZXMoc29ydFByZWRpY2F0ZSwgcmV2ZXJzZU9yZGVyKSB7XG4gICAgcmV2ZXJzZU9yZGVyID0gcmV2ZXJzZU9yZGVyID8gLTEgOiAxO1xuICAgIHJldHVybiBzb3J0UHJlZGljYXRlLm1hcChmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBkZXNjZW5kaW5nID0gMSwgZ2V0ID0gaWRlbnRpdHk7XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKHByZWRpY2F0ZSkpIHtcbiAgICAgICAgZ2V0ID0gcHJlZGljYXRlO1xuICAgICAgfSBlbHNlIGlmIChpc1N0cmluZyhwcmVkaWNhdGUpKSB7XG4gICAgICAgIGlmICgocHJlZGljYXRlLmNoYXJBdCgwKSA9PSAnKycgfHwgcHJlZGljYXRlLmNoYXJBdCgwKSA9PSAnLScpKSB7XG4gICAgICAgICAgZGVzY2VuZGluZyA9IHByZWRpY2F0ZS5jaGFyQXQoMCkgPT0gJy0nID8gLTEgOiAxO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IHByZWRpY2F0ZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZWRpY2F0ZSAhPT0gJycpIHtcbiAgICAgICAgICBnZXQgPSAkcGFyc2UocHJlZGljYXRlKTtcbiAgICAgICAgICBpZiAoZ2V0LmNvbnN0YW50KSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gZ2V0KCk7XG4gICAgICAgICAgICBnZXQgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGdldDogZ2V0LCBkZXNjZW5kaW5nOiBkZXNjZW5kaW5nICogcmV2ZXJzZU9yZGVyIH07XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSkge1xuICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICBjYXNlICdudW1iZXInOiAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlICdib29sZWFuJzogLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb2JqZWN0VmFsdWUodmFsdWUsIGluZGV4KSB7XG4gICAgLy8gSWYgYHZhbHVlT2ZgIGlzIGEgdmFsaWQgZnVuY3Rpb24gdXNlIHRoYXRcbiAgICBpZiAodHlwZW9mIHZhbHVlLnZhbHVlT2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUudmFsdWVPZigpO1xuICAgICAgaWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICAvLyBJZiBgdG9TdHJpbmdgIGlzIGEgdmFsaWQgZnVuY3Rpb24gYW5kIG5vdCB0aGUgb25lIGZyb20gYE9iamVjdC5wcm90b3R5cGVgIHVzZSB0aGF0XG4gICAgaWYgKGhhc0N1c3RvbVRvU3RyaW5nKHZhbHVlKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgaWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICAvLyBXZSBoYXZlIGEgYmFzaWMgb2JqZWN0IHNvIHdlIHVzZSB0aGUgcG9zaXRpb24gb2YgdGhlIG9iamVjdCBpbiB0aGUgY29sbGVjdGlvblxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFByZWRpY2F0ZVZhbHVlKHZhbHVlLCBpbmRleCkge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgdHlwZSA9ICdzdHJpbmcnO1xuICAgICAgdmFsdWUgPSAnbnVsbCc7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhbHVlID0gb2JqZWN0VmFsdWUodmFsdWUsIGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCB0eXBlOiB0eXBlIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb21wYXJlKHYxLCB2Mikge1xuICAgIHZhciByZXN1bHQgPSAwO1xuICAgIGlmICh2MS50eXBlID09PSB2Mi50eXBlKSB7XG4gICAgICBpZiAodjEudmFsdWUgIT09IHYyLnZhbHVlKSB7XG4gICAgICAgIHJlc3VsdCA9IHYxLnZhbHVlIDwgdjIudmFsdWUgPyAtMSA6IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IHYxLnR5cGUgPCB2Mi50eXBlID8gLTEgOiAxO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG5cbmZ1bmN0aW9uIG5nRGlyZWN0aXZlKGRpcmVjdGl2ZSkge1xuICBpZiAoaXNGdW5jdGlvbihkaXJlY3RpdmUpKSB7XG4gICAgZGlyZWN0aXZlID0ge1xuICAgICAgbGluazogZGlyZWN0aXZlXG4gICAgfTtcbiAgfVxuICBkaXJlY3RpdmUucmVzdHJpY3QgPSBkaXJlY3RpdmUucmVzdHJpY3QgfHwgJ0FDJztcbiAgcmV0dXJuIHZhbHVlRm4oZGlyZWN0aXZlKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBhXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogTW9kaWZpZXMgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgdGhlIGh0bWwgQSB0YWcgc28gdGhhdCB0aGUgZGVmYXVsdCBhY3Rpb24gaXMgcHJldmVudGVkIHdoZW5cbiAqIHRoZSBocmVmIGF0dHJpYnV0ZSBpcyBlbXB0eS5cbiAqXG4gKiBUaGlzIGNoYW5nZSBwZXJtaXRzIHRoZSBlYXN5IGNyZWF0aW9uIG9mIGFjdGlvbiBsaW5rcyB3aXRoIHRoZSBgbmdDbGlja2AgZGlyZWN0aXZlXG4gKiB3aXRob3V0IGNoYW5naW5nIHRoZSBsb2NhdGlvbiBvciBjYXVzaW5nIHBhZ2UgcmVsb2FkcywgZS5nLjpcbiAqIGA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJsaXN0LmFkZEl0ZW0oKVwiPkFkZCBJdGVtPC9hPmBcbiAqL1xudmFyIGh0bWxBbmNob3JEaXJlY3RpdmUgPSB2YWx1ZUZuKHtcbiAgcmVzdHJpY3Q6ICdFJyxcbiAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikge1xuICAgIGlmICghYXR0ci5ocmVmICYmICFhdHRyLnhsaW5rSHJlZikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50KSB7XG4gICAgICAgIC8vIElmIHRoZSBsaW5rZWQgZWxlbWVudCBpcyBub3QgYW4gYW5jaG9yIHRhZyBhbnltb3JlLCBkbyBub3RoaW5nXG4gICAgICAgIGlmIChlbGVtZW50WzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdhJykgcmV0dXJuO1xuXG4gICAgICAgIC8vIFNWR0FFbGVtZW50IGRvZXMgbm90IHVzZSB0aGUgaHJlZiBhdHRyaWJ1dGUsIGJ1dCByYXRoZXIgdGhlICd4bGlua0hyZWYnIGF0dHJpYnV0ZS5cbiAgICAgICAgdmFyIGhyZWYgPSB0b1N0cmluZy5jYWxsKGVsZW1lbnQucHJvcCgnaHJlZicpKSA9PT0gJ1tvYmplY3QgU1ZHQW5pbWF0ZWRTdHJpbmddJyA/XG4gICAgICAgICAgICAgICAgICAgJ3hsaW5rOmhyZWYnIDogJ2hyZWYnO1xuICAgICAgICBlbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgLy8gaWYgd2UgaGF2ZSBubyBocmVmIHVybCwgdGhlbiBkb24ndCBuYXZpZ2F0ZSBhbnl3aGVyZS5cbiAgICAgICAgICBpZiAoIWVsZW1lbnQuYXR0cihocmVmKSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH1cbn0pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nSHJlZlxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSA5OVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVXNpbmcgQW5ndWxhciBtYXJrdXAgbGlrZSBge3toYXNofX1gIGluIGFuIGhyZWYgYXR0cmlidXRlIHdpbGxcbiAqIG1ha2UgdGhlIGxpbmsgZ28gdG8gdGhlIHdyb25nIFVSTCBpZiB0aGUgdXNlciBjbGlja3MgaXQgYmVmb3JlXG4gKiBBbmd1bGFyIGhhcyBhIGNoYW5jZSB0byByZXBsYWNlIHRoZSBge3toYXNofX1gIG1hcmt1cCB3aXRoIGl0c1xuICogdmFsdWUuIFVudGlsIEFuZ3VsYXIgcmVwbGFjZXMgdGhlIG1hcmt1cCB0aGUgbGluayB3aWxsIGJlIGJyb2tlblxuICogYW5kIHdpbGwgbW9zdCBsaWtlbHkgcmV0dXJuIGEgNDA0IGVycm9yLiBUaGUgYG5nSHJlZmAgZGlyZWN0aXZlXG4gKiBzb2x2ZXMgdGhpcyBwcm9ibGVtLlxuICpcbiAqIFRoZSB3cm9uZyB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8YSBocmVmPVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19XCI+bGluazE8L2E+XG4gKiBgYGBcbiAqXG4gKiBUaGUgY29ycmVjdCB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8YSBuZy1ocmVmPVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19XCI+bGluazE8L2E+XG4gKiBgYGBcbiAqXG4gKiBAZWxlbWVudCBBXG4gKiBAcGFyYW0ge3RlbXBsYXRlfSBuZ0hyZWYgYW55IHN0cmluZyB3aGljaCBjYW4gY29udGFpbiBge3t9fWAgbWFya3VwLlxuICpcbiAqIEBleGFtcGxlXG4gKiBUaGlzIGV4YW1wbGUgc2hvd3MgdmFyaW91cyBjb21iaW5hdGlvbnMgb2YgYGhyZWZgLCBgbmctaHJlZmAgYW5kIGBuZy1jbGlja2AgYXR0cmlidXRlc1xuICogaW4gbGlua3MgYW5kIHRoZWlyIGRpZmZlcmVudCBiZWhhdmlvcnM6XG4gICAgPGV4YW1wbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJ2YWx1ZVwiIC8+PGJyIC8+XG4gICAgICAgIDxhIGlkPVwibGluay0xXCIgaHJlZiBuZy1jbGljaz1cInZhbHVlID0gMVwiPmxpbmsgMTwvYT4gKGxpbmssIGRvbid0IHJlbG9hZCk8YnIgLz5cbiAgICAgICAgPGEgaWQ9XCJsaW5rLTJcIiBocmVmPVwiXCIgbmctY2xpY2s9XCJ2YWx1ZSA9IDJcIj5saW5rIDI8L2E+IChsaW5rLCBkb24ndCByZWxvYWQpPGJyIC8+XG4gICAgICAgIDxhIGlkPVwibGluay0zXCIgbmctaHJlZj1cIi97eycxMjMnfX1cIj5saW5rIDM8L2E+IChsaW5rLCByZWxvYWQhKTxiciAvPlxuICAgICAgICA8YSBpZD1cImxpbmstNFwiIGhyZWY9XCJcIiBuYW1lPVwieHhcIiBuZy1jbGljaz1cInZhbHVlID0gNFwiPmFuY2hvcjwvYT4gKGxpbmssIGRvbid0IHJlbG9hZCk8YnIgLz5cbiAgICAgICAgPGEgaWQ9XCJsaW5rLTVcIiBuYW1lPVwieHh4XCIgbmctY2xpY2s9XCJ2YWx1ZSA9IDVcIj5hbmNob3I8L2E+IChubyBsaW5rKTxiciAvPlxuICAgICAgICA8YSBpZD1cImxpbmstNlwiIG5nLWhyZWY9XCJ7e3ZhbHVlfX1cIj5saW5rPC9hPiAobGluaywgY2hhbmdlIGxvY2F0aW9uKVxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBocmVmIHdpdGhvdXQgdmFsdWUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTEnKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCcxJyk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmstMScpKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkudG9CZSgnJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIGhyZWYgZW1wdHkgc3RyaW5nJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay0yJykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnMicpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTInKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvQmUoJycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYW5kIGNoYW5nZSB1cmwgd2hlbiBuZy1ocmVmIHNwZWNpZmllZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTMnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvTWF0Y2goL1xcLzEyMyQvKTtcblxuICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2xpbmstMycpKS5jbGljaygpO1xuXG4gICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgd2UgbmF2aWdhdGUgYXdheSBmcm9tIGFuIEFuZ3VsYXIgcGFnZSwgc28gd2UgbmVlZFxuICAgICAgICAgIC8vIHRvIHVzZSBicm93c2VyLmRyaXZlciB0byBnZXQgdGhlIGJhc2Ugd2ViZHJpdmVyLlxuXG4gICAgICAgICAgYnJvd3Nlci53YWl0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXIuZHJpdmVyLmdldEN1cnJlbnRVcmwoKS50aGVuKGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgICByZXR1cm4gdXJsLm1hdGNoKC9cXC8xMjMkLyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCA1MDAwLCAncGFnZSBzaG91bGQgbmF2aWdhdGUgdG8gLzEyMycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBocmVmIGVtcHR5IHN0cmluZyBhbmQgbmFtZSBzcGVjaWZpZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTQnKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCc0Jyk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmstNCcpKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkudG9CZSgnJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIG5vIGhyZWYgYnV0IG5hbWUgc3BlY2lmaWVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay01JykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnNScpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTUnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvQmUobnVsbCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgb25seSBjaGFuZ2UgdXJsIHdoZW4gb25seSBuZy1ocmVmJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuY2xlYXIoKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKS5zZW5kS2V5cygnNicpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTYnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvTWF0Y2goL1xcLzYkLyk7XG5cbiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTYnKSkuY2xpY2soKTtcblxuICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIG5hdmlnYXRlIGF3YXkgZnJvbSBhbiBBbmd1bGFyIHBhZ2UsIHNvIHdlIG5lZWRcbiAgICAgICAgICAvLyB0byB1c2UgYnJvd3Nlci5kcml2ZXIgdG8gZ2V0IHRoZSBiYXNlIHdlYmRyaXZlci5cbiAgICAgICAgICBicm93c2VyLndhaXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gYnJvd3Nlci5kcml2ZXIuZ2V0Q3VycmVudFVybCgpLnRoZW4oZnVuY3Rpb24odXJsKSB7XG4gICAgICAgICAgICAgIHJldHVybiB1cmwubWF0Y2goL1xcLzYkLyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCA1MDAwLCAncGFnZSBzaG91bGQgbmF2aWdhdGUgdG8gLzYnKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTcmNcbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgOTlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzaW5nIEFuZ3VsYXIgbWFya3VwIGxpa2UgYHt7aGFzaH19YCBpbiBhIGBzcmNgIGF0dHJpYnV0ZSBkb2Vzbid0XG4gKiB3b3JrIHJpZ2h0OiBUaGUgYnJvd3NlciB3aWxsIGZldGNoIGZyb20gdGhlIFVSTCB3aXRoIHRoZSBsaXRlcmFsXG4gKiB0ZXh0IGB7e2hhc2h9fWAgdW50aWwgQW5ndWxhciByZXBsYWNlcyB0aGUgZXhwcmVzc2lvbiBpbnNpZGVcbiAqIGB7e2hhc2h9fWAuIFRoZSBgbmdTcmNgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtLlxuICpcbiAqIFRoZSBidWdneSB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8aW1nIHNyYz1cImh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fVwiIGFsdD1cIkRlc2NyaXB0aW9uXCIvPlxuICogYGBgXG4gKlxuICogVGhlIGNvcnJlY3Qgd2F5IHRvIHdyaXRlIGl0OlxuICogYGBgaHRtbFxuICogPGltZyBuZy1zcmM9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX1cIiBhbHQ9XCJEZXNjcmlwdGlvblwiIC8+XG4gKiBgYGBcbiAqXG4gKiBAZWxlbWVudCBJTUdcbiAqIEBwYXJhbSB7dGVtcGxhdGV9IG5nU3JjIGFueSBzdHJpbmcgd2hpY2ggY2FuIGNvbnRhaW4gYHt7fX1gIG1hcmt1cC5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nU3Jjc2V0XG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDk5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2luZyBBbmd1bGFyIG1hcmt1cCBsaWtlIGB7e2hhc2h9fWAgaW4gYSBgc3Jjc2V0YCBhdHRyaWJ1dGUgZG9lc24ndFxuICogd29yayByaWdodDogVGhlIGJyb3dzZXIgd2lsbCBmZXRjaCBmcm9tIHRoZSBVUkwgd2l0aCB0aGUgbGl0ZXJhbFxuICogdGV4dCBge3toYXNofX1gIHVudGlsIEFuZ3VsYXIgcmVwbGFjZXMgdGhlIGV4cHJlc3Npb24gaW5zaWRlXG4gKiBge3toYXNofX1gLiBUaGUgYG5nU3Jjc2V0YCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbS5cbiAqXG4gKiBUaGUgYnVnZ3kgd2F5IHRvIHdyaXRlIGl0OlxuICogYGBgaHRtbFxuICogPGltZyBzcmNzZXQ9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX0gMnhcIiBhbHQ9XCJEZXNjcmlwdGlvblwiLz5cbiAqIGBgYFxuICpcbiAqIFRoZSBjb3JyZWN0IHdheSB0byB3cml0ZSBpdDpcbiAqIGBgYGh0bWxcbiAqIDxpbWcgbmctc3Jjc2V0PVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19IDJ4XCIgYWx0PVwiRGVzY3JpcHRpb25cIiAvPlxuICogYGBgXG4gKlxuICogQGVsZW1lbnQgSU1HXG4gKiBAcGFyYW0ge3RlbXBsYXRlfSBuZ1NyY3NldCBhbnkgc3RyaW5nIHdoaWNoIGNhbiBjb250YWluIGB7e319YCBtYXJrdXAuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0Rpc2FibGVkXG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDEwMFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoaXMgZGlyZWN0aXZlIHNldHMgdGhlIGBkaXNhYmxlZGAgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50IGlmIHRoZVxuICoge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaW5zaWRlIGBuZ0Rpc2FibGVkYCBldmFsdWF0ZXMgdG8gdHJ1dGh5LlxuICpcbiAqIEEgc3BlY2lhbCBkaXJlY3RpdmUgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugd2UgY2Fubm90IHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGUgYGRpc2FibGVkYFxuICogYXR0cmlidXRlLiAgVGhlIGZvbGxvd2luZyBleGFtcGxlIHdvdWxkIG1ha2UgdGhlIGJ1dHRvbiBlbmFibGVkIG9uIENocm9tZS9GaXJlZm94XG4gKiBidXQgbm90IG9uIG9sZGVyIElFczpcbiAqXG4gKiBgYGBodG1sXG4gKiA8IS0tIFNlZSBiZWxvdyBmb3IgYW4gZXhhbXBsZSBvZiBuZy1kaXNhYmxlZCBiZWluZyB1c2VkIGNvcnJlY3RseSAtLT5cbiAqIDxkaXYgbmctaW5pdD1cImlzRGlzYWJsZWQgPSBmYWxzZVwiPlxuICogIDxidXR0b24gZGlzYWJsZWQ9XCJ7e2lzRGlzYWJsZWR9fVwiPkRpc2FibGVkPC9idXR0b24+XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIFRoaXMgaXMgYmVjYXVzZSB0aGUgSFRNTCBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IHJlcXVpcmUgYnJvd3NlcnMgdG8gcHJlc2VydmUgdGhlIHZhbHVlcyBvZlxuICogYm9vbGVhbiBhdHRyaWJ1dGVzIHN1Y2ggYXMgYGRpc2FibGVkYCAoVGhlaXIgcHJlc2VuY2UgbWVhbnMgdHJ1ZSBhbmQgdGhlaXIgYWJzZW5jZSBtZWFucyBmYWxzZS4pXG4gKiBJZiB3ZSBwdXQgYW4gQW5ndWxhciBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24gaW50byBzdWNoIGFuIGF0dHJpYnV0ZSB0aGVuIHRoZVxuICogYmluZGluZyBpbmZvcm1hdGlvbiB3b3VsZCBiZSBsb3N0IHdoZW4gdGhlIGJyb3dzZXIgcmVtb3ZlcyB0aGUgYXR0cmlidXRlLlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8bGFiZWw+Q2xpY2sgbWUgdG8gdG9nZ2xlOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCI+PC9sYWJlbD48YnIvPlxuICAgICAgICA8YnV0dG9uIG5nLW1vZGVsPVwiYnV0dG9uXCIgbmctZGlzYWJsZWQ9XCJjaGVja2VkXCI+QnV0dG9uPC9idXR0b24+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgdG9nZ2xlIGJ1dHRvbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnYnV0dG9uJykpLmdldEF0dHJpYnV0ZSgnZGlzYWJsZWQnKSkudG9CZUZhbHN5KCk7XG4gICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tlZCcpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnYnV0dG9uJykpLmdldEF0dHJpYnV0ZSgnZGlzYWJsZWQnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKlxuICogQGVsZW1lbnQgSU5QVVRcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdEaXNhYmxlZCBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5LFxuICogICAgIHRoZW4gdGhlIGBkaXNhYmxlZGAgYXR0cmlidXRlIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ2hlY2tlZFxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSAxMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNldHMgdGhlIGBjaGVja2VkYCBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQsIGlmIHRoZSBleHByZXNzaW9uIGluc2lkZSBgbmdDaGVja2VkYCBpcyB0cnV0aHkuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgZGlyZWN0aXZlIHNob3VsZCBub3QgYmUgdXNlZCB0b2dldGhlciB3aXRoIHtAbGluayBuZ01vZGVsIGBuZ01vZGVsYH0sXG4gKiBhcyB0aGlzIGNhbiBsZWFkIHRvIHVuZXhwZWN0ZWQgYmVoYXZpb3IuXG4gKlxuICogIyMjIFdoeSBkbyB3ZSBuZWVkIGBuZ0NoZWNrZWRgP1xuICpcbiAqIFRoZSBIVE1MIHNwZWNpZmljYXRpb24gZG9lcyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgdmFsdWVzIG9mIGJvb2xlYW4gYXR0cmlidXRlc1xuICogc3VjaCBhcyBjaGVja2VkLiAoVGhlaXIgcHJlc2VuY2UgbWVhbnMgdHJ1ZSBhbmQgdGhlaXIgYWJzZW5jZSBtZWFucyBmYWxzZS4pXG4gKiBJZiB3ZSBwdXQgYW4gQW5ndWxhciBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24gaW50byBzdWNoIGFuIGF0dHJpYnV0ZSB0aGVuIHRoZVxuICogYmluZGluZyBpbmZvcm1hdGlvbiB3b3VsZCBiZSBsb3N0IHdoZW4gdGhlIGJyb3dzZXIgcmVtb3ZlcyB0aGUgYXR0cmlidXRlLlxuICogVGhlIGBuZ0NoZWNrZWRgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtIGZvciB0aGUgYGNoZWNrZWRgIGF0dHJpYnV0ZS5cbiAqIFRoaXMgY29tcGxlbWVudGFyeSBkaXJlY3RpdmUgaXMgbm90IHJlbW92ZWQgYnkgdGhlIGJyb3dzZXIgYW5kIHNvIHByb3ZpZGVzXG4gKiBhIHBlcm1hbmVudCByZWxpYWJsZSBwbGFjZSB0byBzdG9yZSB0aGUgYmluZGluZyBpbmZvcm1hdGlvbi5cbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8bGFiZWw+Q2hlY2sgbWUgdG8gY2hlY2sgYm90aDogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwibWFzdGVyXCI+PC9sYWJlbD48YnIvPlxuICAgICAgICA8aW5wdXQgaWQ9XCJjaGVja1NsYXZlXCIgdHlwZT1cImNoZWNrYm94XCIgbmctY2hlY2tlZD1cIm1hc3RlclwiIGFyaWEtbGFiZWw9XCJTbGF2ZSBpbnB1dFwiPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIGNoZWNrIGJvdGggY2hlY2tCb3hlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjaGVja1NsYXZlJykpLmdldEF0dHJpYnV0ZSgnY2hlY2tlZCcpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdtYXN0ZXInKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY2hlY2tTbGF2ZScpKS5nZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKlxuICogQGVsZW1lbnQgSU5QVVRcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDaGVja2VkIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiB0aGUgYGNoZWNrZWRgIGF0dHJpYnV0ZSB3aWxsIGJlIHNldCBvbiB0aGUgZWxlbWVudFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1JlYWRvbmx5XG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDEwMFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIEhUTUwgc3BlY2lmaWNhdGlvbiBkb2VzIG5vdCByZXF1aXJlIGJyb3dzZXJzIHRvIHByZXNlcnZlIHRoZSB2YWx1ZXMgb2YgYm9vbGVhbiBhdHRyaWJ1dGVzXG4gKiBzdWNoIGFzIHJlYWRvbmx5LiAoVGhlaXIgcHJlc2VuY2UgbWVhbnMgdHJ1ZSBhbmQgdGhlaXIgYWJzZW5jZSBtZWFucyBmYWxzZS4pXG4gKiBJZiB3ZSBwdXQgYW4gQW5ndWxhciBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24gaW50byBzdWNoIGFuIGF0dHJpYnV0ZSB0aGVuIHRoZVxuICogYmluZGluZyBpbmZvcm1hdGlvbiB3b3VsZCBiZSBsb3N0IHdoZW4gdGhlIGJyb3dzZXIgcmVtb3ZlcyB0aGUgYXR0cmlidXRlLlxuICogVGhlIGBuZ1JlYWRvbmx5YCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbSBmb3IgdGhlIGByZWFkb25seWAgYXR0cmlidXRlLlxuICogVGhpcyBjb21wbGVtZW50YXJ5IGRpcmVjdGl2ZSBpcyBub3QgcmVtb3ZlZCBieSB0aGUgYnJvd3NlciBhbmQgc28gcHJvdmlkZXNcbiAqIGEgcGVybWFuZW50IHJlbGlhYmxlIHBsYWNlIHRvIHN0b3JlIHRoZSBiaW5kaW5nIGluZm9ybWF0aW9uLlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxsYWJlbD5DaGVjayBtZSB0byBtYWtlIHRleHQgcmVhZG9ubHk6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrZWRcIj48L2xhYmVsPjxici8+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLXJlYWRvbmx5PVwiY2hlY2tlZFwiIHZhbHVlPVwiSSdtIEFuZ3VsYXJcIiBhcmlhLWxhYmVsPVwiUmVhZG9ubHkgZmllbGRcIiAvPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIHRvZ2dsZSByZWFkb25seSBhdHRyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCdbdHlwZT1cInRleHRcIl0nKSkuZ2V0QXR0cmlidXRlKCdyZWFkb25seScpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2VkJykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCdbdHlwZT1cInRleHRcIl0nKSkuZ2V0QXR0cmlidXRlKCdyZWFkb25seScpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqXG4gKiBAZWxlbWVudCBJTlBVVFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1JlYWRvbmx5IElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSBcInJlYWRvbmx5XCIgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnRcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTZWxlY3RlZFxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSAxMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBIVE1MIHNwZWNpZmljYXRpb24gZG9lcyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgdmFsdWVzIG9mIGJvb2xlYW4gYXR0cmlidXRlc1xuICogc3VjaCBhcyBzZWxlY3RlZC4gKFRoZWlyIHByZXNlbmNlIG1lYW5zIHRydWUgYW5kIHRoZWlyIGFic2VuY2UgbWVhbnMgZmFsc2UuKVxuICogSWYgd2UgcHV0IGFuIEFuZ3VsYXIgaW50ZXJwb2xhdGlvbiBleHByZXNzaW9uIGludG8gc3VjaCBhbiBhdHRyaWJ1dGUgdGhlbiB0aGVcbiAqIGJpbmRpbmcgaW5mb3JtYXRpb24gd291bGQgYmUgbG9zdCB3aGVuIHRoZSBicm93c2VyIHJlbW92ZXMgdGhlIGF0dHJpYnV0ZS5cbiAqIFRoZSBgbmdTZWxlY3RlZGAgZGlyZWN0aXZlIHNvbHZlcyB0aGlzIHByb2JsZW0gZm9yIHRoZSBgc2VsZWN0ZWRgIGF0dHJpYnV0ZS5cbiAqIFRoaXMgY29tcGxlbWVudGFyeSBkaXJlY3RpdmUgaXMgbm90IHJlbW92ZWQgYnkgdGhlIGJyb3dzZXIgYW5kIHNvIHByb3ZpZGVzXG4gKiBhIHBlcm1hbmVudCByZWxpYWJsZSBwbGFjZSB0byBzdG9yZSB0aGUgYmluZGluZyBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGxhYmVsPkNoZWNrIG1lIHRvIHNlbGVjdDogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwic2VsZWN0ZWRcIj48L2xhYmVsPjxici8+XG4gICAgICAgIDxzZWxlY3QgYXJpYS1sYWJlbD1cIm5nU2VsZWN0ZWQgZGVtb1wiPlxuICAgICAgICAgIDxvcHRpb24+SGVsbG8hPC9vcHRpb24+XG4gICAgICAgICAgPG9wdGlvbiBpZD1cImdyZWV0XCIgbmctc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiPkdyZWV0aW5ncyE8L29wdGlvbj5cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgc2VsZWN0IEdyZWV0aW5ncyEnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZ3JlZXQnKSkuZ2V0QXR0cmlidXRlKCdzZWxlY3RlZCcpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzZWxlY3RlZCcpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdncmVldCcpKS5nZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICpcbiAqIEBlbGVtZW50IE9QVElPTlxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1NlbGVjdGVkIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSBcInNlbGVjdGVkXCIgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnRcbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nT3BlblxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSAxMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBIVE1MIHNwZWNpZmljYXRpb24gZG9lcyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgdmFsdWVzIG9mIGJvb2xlYW4gYXR0cmlidXRlc1xuICogc3VjaCBhcyBvcGVuLiAoVGhlaXIgcHJlc2VuY2UgbWVhbnMgdHJ1ZSBhbmQgdGhlaXIgYWJzZW5jZSBtZWFucyBmYWxzZS4pXG4gKiBJZiB3ZSBwdXQgYW4gQW5ndWxhciBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24gaW50byBzdWNoIGFuIGF0dHJpYnV0ZSB0aGVuIHRoZVxuICogYmluZGluZyBpbmZvcm1hdGlvbiB3b3VsZCBiZSBsb3N0IHdoZW4gdGhlIGJyb3dzZXIgcmVtb3ZlcyB0aGUgYXR0cmlidXRlLlxuICogVGhlIGBuZ09wZW5gIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtIGZvciB0aGUgYG9wZW5gIGF0dHJpYnV0ZS5cbiAqIFRoaXMgY29tcGxlbWVudGFyeSBkaXJlY3RpdmUgaXMgbm90IHJlbW92ZWQgYnkgdGhlIGJyb3dzZXIgYW5kIHNvIHByb3ZpZGVzXG4gKiBhIHBlcm1hbmVudCByZWxpYWJsZSBwbGFjZSB0byBzdG9yZSB0aGUgYmluZGluZyBpbmZvcm1hdGlvbi5cbiAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8bGFiZWw+Q2hlY2sgbWUgY2hlY2sgbXVsdGlwbGU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cIm9wZW5cIj48L2xhYmVsPjxici8+XG4gICAgICAgICA8ZGV0YWlscyBpZD1cImRldGFpbHNcIiBuZy1vcGVuPVwib3BlblwiPlxuICAgICAgICAgICAgPHN1bW1hcnk+U2hvdy9IaWRlIG1lPC9zdW1tYXJ5PlxuICAgICAgICAgPC9kZXRhaWxzPlxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICBpdCgnc2hvdWxkIHRvZ2dsZSBvcGVuJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdkZXRhaWxzJykpLmdldEF0dHJpYnV0ZSgnb3BlbicpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnb3BlbicpKS5jbGljaygpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZGV0YWlscycpKS5nZXRBdHRyaWJ1dGUoJ29wZW4nKSkudG9CZVRydXRoeSgpO1xuICAgICAgICAgfSk7XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gKlxuICogQGVsZW1lbnQgREVUQUlMU1xuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ09wZW4gSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSxcbiAqICAgICB0aGVuIHNwZWNpYWwgYXR0cmlidXRlIFwib3BlblwiIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50XG4gKi9cblxudmFyIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzID0ge307XG5cbi8vIGJvb2xlYW4gYXR0cnMgYXJlIGV2YWx1YXRlZFxuZm9yRWFjaChCT09MRUFOX0FUVFIsIGZ1bmN0aW9uKHByb3BOYW1lLCBhdHRyTmFtZSkge1xuICAvLyBiaW5kaW5nIHRvIG11bHRpcGxlIGlzIG5vdCBzdXBwb3J0ZWRcbiAgaWYgKHByb3BOYW1lID09IFwibXVsdGlwbGVcIikgcmV0dXJuO1xuXG4gIGZ1bmN0aW9uIGRlZmF1bHRMaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICBzY29wZS4kd2F0Y2goYXR0cltub3JtYWxpemVkXSwgZnVuY3Rpb24gbmdCb29sZWFuQXR0cldhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICBhdHRyLiRzZXQoYXR0ck5hbWUsICEhdmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIG5vcm1hbGl6ZWQgPSBkaXJlY3RpdmVOb3JtYWxpemUoJ25nLScgKyBhdHRyTmFtZSk7XG4gIHZhciBsaW5rRm4gPSBkZWZhdWx0TGlua0ZuO1xuXG4gIGlmIChwcm9wTmFtZSA9PT0gJ2NoZWNrZWQnKSB7XG4gICAgbGlua0ZuID0gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIC8vIGVuc3VyaW5nIG5nQ2hlY2tlZCBkb2Vzbid0IGludGVyZmVyZSB3aXRoIG5nTW9kZWwgd2hlbiBib3RoIGFyZSBzZXQgb24gdGhlIHNhbWUgaW5wdXRcbiAgICAgIGlmIChhdHRyLm5nTW9kZWwgIT09IGF0dHJbbm9ybWFsaXplZF0pIHtcbiAgICAgICAgZGVmYXVsdExpbmtGbihzY29wZSwgZWxlbWVudCwgYXR0cik7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzW25vcm1hbGl6ZWRdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBwcmlvcml0eTogMTAwLFxuICAgICAgbGluazogbGlua0ZuXG4gICAgfTtcbiAgfTtcbn0pO1xuXG4vLyBhbGlhc2VkIGlucHV0IGF0dHJzIGFyZSBldmFsdWF0ZWRcbmZvckVhY2goQUxJQVNFRF9BVFRSLCBmdW5jdGlvbihodG1sQXR0ciwgbmdBdHRyKSB7XG4gIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzW25nQXR0cl0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJpb3JpdHk6IDEwMCxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIC8vc3BlY2lhbCBjYXNlIG5nUGF0dGVybiB3aGVuIGEgbGl0ZXJhbCByZWd1bGFyIGV4cHJlc3Npb24gdmFsdWVcbiAgICAgICAgLy9pcyB1c2VkIGFzIHRoZSBleHByZXNzaW9uICh0aGlzIHdheSB3ZSBkb24ndCBoYXZlIHRvIHdhdGNoIGFueXRoaW5nKS5cbiAgICAgICAgaWYgKG5nQXR0ciA9PT0gXCJuZ1BhdHRlcm5cIiAmJiBhdHRyLm5nUGF0dGVybi5jaGFyQXQoMCkgPT0gXCIvXCIpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBhdHRyLm5nUGF0dGVybi5tYXRjaChSRUdFWF9TVFJJTkdfUkVHRVhQKTtcbiAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGF0dHIuJHNldChcIm5nUGF0dGVyblwiLCBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNjb3BlLiR3YXRjaChhdHRyW25nQXR0cl0sIGZ1bmN0aW9uIG5nQXR0ckFsaWFzV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBhdHRyLiRzZXQobmdBdHRyLCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59KTtcblxuLy8gbmctc3JjLCBuZy1zcmNzZXQsIG5nLWhyZWYgYXJlIGludGVycG9sYXRlZFxuZm9yRWFjaChbJ3NyYycsICdzcmNzZXQnLCAnaHJlZiddLCBmdW5jdGlvbihhdHRyTmFtZSkge1xuICB2YXIgbm9ybWFsaXplZCA9IGRpcmVjdGl2ZU5vcm1hbGl6ZSgnbmctJyArIGF0dHJOYW1lKTtcbiAgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXNbbm9ybWFsaXplZF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJpb3JpdHk6IDk5LCAvLyBpdCBuZWVkcyB0byBydW4gYWZ0ZXIgdGhlIGF0dHJpYnV0ZXMgYXJlIGludGVycG9sYXRlZFxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgdmFyIHByb3BOYW1lID0gYXR0ck5hbWUsXG4gICAgICAgICAgICBuYW1lID0gYXR0ck5hbWU7XG5cbiAgICAgICAgaWYgKGF0dHJOYW1lID09PSAnaHJlZicgJiZcbiAgICAgICAgICAgIHRvU3RyaW5nLmNhbGwoZWxlbWVudC5wcm9wKCdocmVmJykpID09PSAnW29iamVjdCBTVkdBbmltYXRlZFN0cmluZ10nKSB7XG4gICAgICAgICAgbmFtZSA9ICd4bGlua0hyZWYnO1xuICAgICAgICAgIGF0dHIuJGF0dHJbbmFtZV0gPSAneGxpbms6aHJlZic7XG4gICAgICAgICAgcHJvcE5hbWUgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgYXR0ci4kb2JzZXJ2ZShub3JtYWxpemVkLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChhdHRyTmFtZSA9PT0gJ2hyZWYnKSB7XG4gICAgICAgICAgICAgIGF0dHIuJHNldChuYW1lLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhdHRyLiRzZXQobmFtZSwgdmFsdWUpO1xuXG4gICAgICAgICAgLy8gb24gSUUsIGlmIFwibmc6c3JjXCIgZGlyZWN0aXZlIGRlY2xhcmF0aW9uIGlzIHVzZWQgYW5kIFwic3JjXCIgYXR0cmlidXRlIGRvZXNuJ3QgZXhpc3RcbiAgICAgICAgICAvLyB0aGVuIGNhbGxpbmcgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3NyYycsICdmb28nKSBkb2Vzbid0IGRvIGFueXRoaW5nLCBzbyB3ZSBuZWVkXG4gICAgICAgICAgLy8gdG8gc2V0IHRoZSBwcm9wZXJ0eSBhcyB3ZWxsIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgZWZmZWN0LlxuICAgICAgICAgIC8vIHdlIHVzZSBhdHRyW2F0dHJOYW1lXSB2YWx1ZSBzaW5jZSAkc2V0IGNhbiBzYW5pdGl6ZSB0aGUgdXJsLlxuICAgICAgICAgIGlmIChtc2llICYmIHByb3BOYW1lKSBlbGVtZW50LnByb3AocHJvcE5hbWUsIGF0dHJbbmFtZV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufSk7XG5cbi8qIGdsb2JhbCAtbnVsbEZvcm1DdHJsLCAtU1VCTUlUVEVEX0NMQVNTLCBhZGRTZXRWYWxpZGl0eU1ldGhvZDogdHJ1ZVxuICovXG52YXIgbnVsbEZvcm1DdHJsID0ge1xuICAkYWRkQ29udHJvbDogbm9vcCxcbiAgJCRyZW5hbWVDb250cm9sOiBudWxsRm9ybVJlbmFtZUNvbnRyb2wsXG4gICRyZW1vdmVDb250cm9sOiBub29wLFxuICAkc2V0VmFsaWRpdHk6IG5vb3AsXG4gICRzZXREaXJ0eTogbm9vcCxcbiAgJHNldFByaXN0aW5lOiBub29wLFxuICAkc2V0U3VibWl0dGVkOiBub29wXG59LFxuU1VCTUlUVEVEX0NMQVNTID0gJ25nLXN1Ym1pdHRlZCc7XG5cbmZ1bmN0aW9uIG51bGxGb3JtUmVuYW1lQ29udHJvbChjb250cm9sLCBuYW1lKSB7XG4gIGNvbnRyb2wuJG5hbWUgPSBuYW1lO1xufVxuXG4vKipcbiAqIEBuZ2RvYyB0eXBlXG4gKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSAkcHJpc3RpbmUgVHJ1ZSBpZiB1c2VyIGhhcyBub3QgaW50ZXJhY3RlZCB3aXRoIHRoZSBmb3JtIHlldC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGRpcnR5IFRydWUgaWYgdXNlciBoYXMgYWxyZWFkeSBpbnRlcmFjdGVkIHdpdGggdGhlIGZvcm0uXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICR2YWxpZCBUcnVlIGlmIGFsbCBvZiB0aGUgY29udGFpbmluZyBmb3JtcyBhbmQgY29udHJvbHMgYXJlIHZhbGlkLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkaW52YWxpZCBUcnVlIGlmIGF0IGxlYXN0IG9uZSBjb250YWluaW5nIGNvbnRyb2wgb3IgZm9ybSBpcyBpbnZhbGlkLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkcGVuZGluZyBUcnVlIGlmIGF0IGxlYXN0IG9uZSBjb250YWluaW5nIGNvbnRyb2wgb3IgZm9ybSBpcyBwZW5kaW5nLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkc3VibWl0dGVkIFRydWUgaWYgdXNlciBoYXMgc3VibWl0dGVkIHRoZSBmb3JtIGV2ZW4gaWYgaXRzIGludmFsaWQuXG4gKlxuICogQHByb3BlcnR5IHtPYmplY3R9ICRlcnJvciBJcyBhbiBvYmplY3QgaGFzaCwgY29udGFpbmluZyByZWZlcmVuY2VzIHRvIGNvbnRyb2xzIG9yXG4gKiAgZm9ybXMgd2l0aCBmYWlsaW5nIHZhbGlkYXRvcnMsIHdoZXJlOlxuICpcbiAqICAtIGtleXMgYXJlIHZhbGlkYXRpb24gdG9rZW5zIChlcnJvciBuYW1lcyksXG4gKiAgLSB2YWx1ZXMgYXJlIGFycmF5cyBvZiBjb250cm9scyBvciBmb3JtcyB0aGF0IGhhdmUgYSBmYWlsaW5nIHZhbGlkYXRvciBmb3IgZ2l2ZW4gZXJyb3IgbmFtZS5cbiAqXG4gKiAgQnVpbHQtaW4gdmFsaWRhdGlvbiB0b2tlbnM6XG4gKlxuICogIC0gYGVtYWlsYFxuICogIC0gYG1heGBcbiAqICAtIGBtYXhsZW5ndGhgXG4gKiAgLSBgbWluYFxuICogIC0gYG1pbmxlbmd0aGBcbiAqICAtIGBudW1iZXJgXG4gKiAgLSBgcGF0dGVybmBcbiAqICAtIGByZXF1aXJlZGBcbiAqICAtIGB1cmxgXG4gKiAgLSBgZGF0ZWBcbiAqICAtIGBkYXRldGltZWxvY2FsYFxuICogIC0gYHRpbWVgXG4gKiAgLSBgd2Vla2BcbiAqICAtIGBtb250aGBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGBGb3JtQ29udHJvbGxlcmAga2VlcHMgdHJhY2sgb2YgYWxsIGl0cyBjb250cm9scyBhbmQgbmVzdGVkIGZvcm1zIGFzIHdlbGwgYXMgdGhlIHN0YXRlIG9mIHRoZW0sXG4gKiBzdWNoIGFzIGJlaW5nIHZhbGlkL2ludmFsaWQgb3IgZGlydHkvcHJpc3RpbmUuXG4gKlxuICogRWFjaCB7QGxpbmsgbmcuZGlyZWN0aXZlOmZvcm0gZm9ybX0gZGlyZWN0aXZlIGNyZWF0ZXMgYW4gaW5zdGFuY2VcbiAqIG9mIGBGb3JtQ29udHJvbGxlcmAuXG4gKlxuICovXG4vL2Fza3MgZm9yICRzY29wZSB0byBmb29sIHRoZSBCQyBjb250cm9sbGVyIG1vZHVsZVxuRm9ybUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJGVsZW1lbnQnLCAnJGF0dHJzJywgJyRzY29wZScsICckYW5pbWF0ZScsICckaW50ZXJwb2xhdGUnXTtcbmZ1bmN0aW9uIEZvcm1Db250cm9sbGVyKGVsZW1lbnQsIGF0dHJzLCAkc2NvcGUsICRhbmltYXRlLCAkaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGZvcm0gPSB0aGlzLFxuICAgICAgY29udHJvbHMgPSBbXTtcblxuICAvLyBpbml0IHN0YXRlXG4gIGZvcm0uJGVycm9yID0ge307XG4gIGZvcm0uJCRzdWNjZXNzID0ge307XG4gIGZvcm0uJHBlbmRpbmcgPSB1bmRlZmluZWQ7XG4gIGZvcm0uJG5hbWUgPSAkaW50ZXJwb2xhdGUoYXR0cnMubmFtZSB8fCBhdHRycy5uZ0Zvcm0gfHwgJycpKCRzY29wZSk7XG4gIGZvcm0uJGRpcnR5ID0gZmFsc2U7XG4gIGZvcm0uJHByaXN0aW5lID0gdHJ1ZTtcbiAgZm9ybS4kdmFsaWQgPSB0cnVlO1xuICBmb3JtLiRpbnZhbGlkID0gZmFsc2U7XG4gIGZvcm0uJHN1Ym1pdHRlZCA9IGZhbHNlO1xuICBmb3JtLiQkcGFyZW50Rm9ybSA9IG51bGxGb3JtQ3RybDtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRyb2xsYmFja1ZpZXdWYWx1ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUm9sbGJhY2sgYWxsIGZvcm0gY29udHJvbHMgcGVuZGluZyB1cGRhdGVzIHRvIHRoZSBgJG1vZGVsVmFsdWVgLlxuICAgKlxuICAgKiBVcGRhdGVzIG1heSBiZSBwZW5kaW5nIGJ5IGEgZGVib3VuY2VkIGV2ZW50IG9yIGJlY2F1c2UgdGhlIGlucHV0IGlzIHdhaXRpbmcgZm9yIGEgc29tZSBmdXR1cmVcbiAgICogZXZlbnQgZGVmaW5lZCBpbiBgbmctbW9kZWwtb3B0aW9uc2AuIFRoaXMgbWV0aG9kIGlzIHR5cGljYWxseSBuZWVkZWQgYnkgdGhlIHJlc2V0IGJ1dHRvbiBvZlxuICAgKiBhIGZvcm0gdGhhdCB1c2VzIGBuZy1tb2RlbC1vcHRpb25zYCB0byBwZW5kIHVwZGF0ZXMuXG4gICAqL1xuICBmb3JtLiRyb2xsYmFja1ZpZXdWYWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgIGZvckVhY2goY29udHJvbHMsIGZ1bmN0aW9uKGNvbnRyb2wpIHtcbiAgICAgIGNvbnRyb2wuJHJvbGxiYWNrVmlld1ZhbHVlKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkY29tbWl0Vmlld1ZhbHVlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDb21taXQgYWxsIGZvcm0gY29udHJvbHMgcGVuZGluZyB1cGRhdGVzIHRvIHRoZSBgJG1vZGVsVmFsdWVgLlxuICAgKlxuICAgKiBVcGRhdGVzIG1heSBiZSBwZW5kaW5nIGJ5IGEgZGVib3VuY2VkIGV2ZW50IG9yIGJlY2F1c2UgdGhlIGlucHV0IGlzIHdhaXRpbmcgZm9yIGEgc29tZSBmdXR1cmVcbiAgICogZXZlbnQgZGVmaW5lZCBpbiBgbmctbW9kZWwtb3B0aW9uc2AuIFRoaXMgbWV0aG9kIGlzIHJhcmVseSBuZWVkZWQgYXMgYE5nTW9kZWxDb250cm9sbGVyYFxuICAgKiB1c3VhbGx5IGhhbmRsZXMgY2FsbGluZyB0aGlzIGluIHJlc3BvbnNlIHRvIGlucHV0IGV2ZW50cy5cbiAgICovXG4gIGZvcm0uJGNvbW1pdFZpZXdWYWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgIGZvckVhY2goY29udHJvbHMsIGZ1bmN0aW9uKGNvbnRyb2wpIHtcbiAgICAgIGNvbnRyb2wuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJGFkZENvbnRyb2xcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2wgY29udHJvbCBvYmplY3QsIGVpdGhlciBhIHtAbGluayBmb3JtLkZvcm1Db250cm9sbGVyfSBvciBhblxuICAgKiB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlcn1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVyIGEgY29udHJvbCB3aXRoIHRoZSBmb3JtLiBJbnB1dCBlbGVtZW50cyB1c2luZyBuZ01vZGVsQ29udHJvbGxlciBkbyB0aGlzIGF1dG9tYXRpY2FsbHlcbiAgICogd2hlbiB0aGV5IGFyZSBsaW5rZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgY29udHJvbCB3aWxsIG5vdCBiZSByZWZsZWN0ZWQgb24gdGhlIG5ldyBwYXJlbnQgZm9ybS4gVGhpc1xuICAgKiBpcyBub3QgYW4gaXNzdWUgd2l0aCBub3JtYWwgdXNlLCBhcyBmcmVzaGx5IGNvbXBpbGVkIGFuZCBsaW5rZWQgY29udHJvbHMgYXJlIGluIGEgYCRwcmlzdGluZWBcbiAgICogc3RhdGUuXG4gICAqXG4gICAqIEhvd2V2ZXIsIGlmIHRoZSBtZXRob2QgaXMgdXNlZCBwcm9ncmFtbWF0aWNhbGx5LCBmb3IgZXhhbXBsZSBieSBhZGRpbmcgZHluYW1pY2FsbHkgY3JlYXRlZCBjb250cm9scyxcbiAgICogb3IgY29udHJvbHMgdGhhdCBoYXZlIGJlZW4gcHJldmlvdXNseSByZW1vdmVkIHdpdGhvdXQgZGVzdHJveWluZyB0aGVpciBjb3JyZXNwb25kaW5nIERPTSBlbGVtZW50LFxuICAgKiBpdCdzIHRoZSBkZXZlbG9wZXJzIHJlc3BvbnNpYmxpdHkgdG8gbWFrZSBzdXJlIHRoZSBjdXJyZW50IHN0YXRlIHByb3BhZ2F0ZXMgdG8gdGhlIHBhcmVudCBmb3JtLlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZSwgaWYgYW4gaW5wdXQgY29udHJvbCBpcyBhZGRlZCB0aGF0IGlzIGFscmVhZHkgYCRkaXJ0eWAgYW5kIGhhcyBgJGVycm9yYCBwcm9wZXJ0aWVzLFxuICAgKiBjYWxsaW5nIGAkc2V0RGlydHkoKWAgYW5kIGAkdmFsaWRhdGUoKWAgYWZ0ZXJ3YXJkcyB3aWxsIHByb3BhZ2F0ZSB0aGUgc3RhdGUgdG8gdGhlIHBhcmVudCBmb3JtLlxuICAgKi9cbiAgZm9ybS4kYWRkQ29udHJvbCA9IGZ1bmN0aW9uKGNvbnRyb2wpIHtcbiAgICAvLyBCcmVha2luZyBjaGFuZ2UgLSBiZWZvcmUsIGlucHV0cyB3aG9zZSBuYW1lIHdhcyBcImhhc093blByb3BlcnR5XCIgd2VyZSBxdWlldGx5IGlnbm9yZWRcbiAgICAvLyBhbmQgbm90IGFkZGVkIHRvIHRoZSBzY29wZS4gIE5vdyB3ZSB0aHJvdyBhbiBlcnJvci5cbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShjb250cm9sLiRuYW1lLCAnaW5wdXQnKTtcbiAgICBjb250cm9scy5wdXNoKGNvbnRyb2wpO1xuXG4gICAgaWYgKGNvbnRyb2wuJG5hbWUpIHtcbiAgICAgIGZvcm1bY29udHJvbC4kbmFtZV0gPSBjb250cm9sO1xuICAgIH1cblxuICAgIGNvbnRyb2wuJCRwYXJlbnRGb3JtID0gZm9ybTtcbiAgfTtcblxuICAvLyBQcml2YXRlIEFQSTogcmVuYW1lIGEgZm9ybSBjb250cm9sXG4gIGZvcm0uJCRyZW5hbWVDb250cm9sID0gZnVuY3Rpb24oY29udHJvbCwgbmV3TmFtZSkge1xuICAgIHZhciBvbGROYW1lID0gY29udHJvbC4kbmFtZTtcblxuICAgIGlmIChmb3JtW29sZE5hbWVdID09PSBjb250cm9sKSB7XG4gICAgICBkZWxldGUgZm9ybVtvbGROYW1lXTtcbiAgICB9XG4gICAgZm9ybVtuZXdOYW1lXSA9IGNvbnRyb2w7XG4gICAgY29udHJvbC4kbmFtZSA9IG5ld05hbWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkcmVtb3ZlQ29udHJvbFxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udHJvbCBjb250cm9sIG9iamVjdCwgZWl0aGVyIGEge0BsaW5rIGZvcm0uRm9ybUNvbnRyb2xsZXJ9IG9yIGFuXG4gICAqIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyfVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRGVyZWdpc3RlciBhIGNvbnRyb2wgZnJvbSB0aGUgZm9ybS5cbiAgICpcbiAgICogSW5wdXQgZWxlbWVudHMgdXNpbmcgbmdNb2RlbENvbnRyb2xsZXIgZG8gdGhpcyBhdXRvbWF0aWNhbGx5IHdoZW4gdGhleSBhcmUgZGVzdHJveWVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgb25seSB0aGUgcmVtb3ZlZCBjb250cm9sJ3MgdmFsaWRhdGlvbiBzdGF0ZSAoYCRlcnJvcnNgZXRjLikgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlXG4gICAqIGZvcm0uIGAkZGlydHlgLCBgJHN1Ym1pdHRlZGAgc3RhdGVzIHdpbGwgbm90IGJlIGNoYW5nZWQsIGJlY2F1c2UgdGhlIGV4cGVjdGVkIGJlaGF2aW9yIGNhbiBiZVxuICAgKiBkaWZmZXJlbnQgZnJvbSBjYXNlIHRvIGNhc2UuIEZvciBleGFtcGxlLCByZW1vdmluZyB0aGUgb25seSBgJGRpcnR5YCBjb250cm9sIGZyb20gYSBmb3JtIG1heSBvclxuICAgKiBtYXkgbm90IG1lYW4gdGhhdCB0aGUgZm9ybSBpcyBzdGlsbCBgJGRpcnR5YC5cbiAgICovXG4gIGZvcm0uJHJlbW92ZUNvbnRyb2wgPSBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgaWYgKGNvbnRyb2wuJG5hbWUgJiYgZm9ybVtjb250cm9sLiRuYW1lXSA9PT0gY29udHJvbCkge1xuICAgICAgZGVsZXRlIGZvcm1bY29udHJvbC4kbmFtZV07XG4gICAgfVxuICAgIGZvckVhY2goZm9ybS4kcGVuZGluZywgZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIGZvcm0uJHNldFZhbGlkaXR5KG5hbWUsIG51bGwsIGNvbnRyb2wpO1xuICAgIH0pO1xuICAgIGZvckVhY2goZm9ybS4kZXJyb3IsIGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICBmb3JtLiRzZXRWYWxpZGl0eShuYW1lLCBudWxsLCBjb250cm9sKTtcbiAgICB9KTtcbiAgICBmb3JFYWNoKGZvcm0uJCRzdWNjZXNzLCBmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgZm9ybS4kc2V0VmFsaWRpdHkobmFtZSwgbnVsbCwgY29udHJvbCk7XG4gICAgfSk7XG5cbiAgICBhcnJheVJlbW92ZShjb250cm9scywgY29udHJvbCk7XG4gICAgY29udHJvbC4kJHBhcmVudEZvcm0gPSBudWxsRm9ybUN0cmw7XG4gIH07XG5cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRzZXRWYWxpZGl0eVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgdmFsaWRpdHkgb2YgYSBmb3JtIGNvbnRyb2wuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgYWxzbyBwcm9wYWdhdGUgdG8gcGFyZW50IGZvcm1zLlxuICAgKi9cbiAgYWRkU2V0VmFsaWRpdHlNZXRob2Qoe1xuICAgIGN0cmw6IHRoaXMsXG4gICAgJGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgc2V0OiBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5LCBjb250cm9sbGVyKSB7XG4gICAgICB2YXIgbGlzdCA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgICBpZiAoIWxpc3QpIHtcbiAgICAgICAgb2JqZWN0W3Byb3BlcnR5XSA9IFtjb250cm9sbGVyXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpbmRleCA9IGxpc3QuaW5kZXhPZihjb250cm9sbGVyKTtcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgIGxpc3QucHVzaChjb250cm9sbGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgdW5zZXQ6IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHksIGNvbnRyb2xsZXIpIHtcbiAgICAgIHZhciBsaXN0ID0gb2JqZWN0W3Byb3BlcnR5XTtcbiAgICAgIGlmICghbGlzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcnJheVJlbW92ZShsaXN0LCBjb250cm9sbGVyKTtcbiAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBkZWxldGUgb2JqZWN0W3Byb3BlcnR5XTtcbiAgICAgIH1cbiAgICB9LFxuICAgICRhbmltYXRlOiAkYW5pbWF0ZVxuICB9KTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRzZXREaXJ0eVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgZm9ybSB0byBhIGRpcnR5IHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIGFkZCB0aGUgJ25nLWRpcnR5JyBjbGFzcyBhbmQgc2V0IHRoZSBmb3JtIHRvIGEgZGlydHlcbiAgICogc3RhdGUgKG5nLWRpcnR5IGNsYXNzKS4gVGhpcyBtZXRob2Qgd2lsbCBhbHNvIHByb3BhZ2F0ZSB0byBwYXJlbnQgZm9ybXMuXG4gICAqL1xuICBmb3JtLiRzZXREaXJ0eSA9IGZ1bmN0aW9uKCkge1xuICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKGVsZW1lbnQsIFBSSVNUSU5FX0NMQVNTKTtcbiAgICAkYW5pbWF0ZS5hZGRDbGFzcyhlbGVtZW50LCBESVJUWV9DTEFTUyk7XG4gICAgZm9ybS4kZGlydHkgPSB0cnVlO1xuICAgIGZvcm0uJHByaXN0aW5lID0gZmFsc2U7XG4gICAgZm9ybS4kJHBhcmVudEZvcm0uJHNldERpcnR5KCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0UHJpc3RpbmVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGZvcm0gdG8gaXRzIHByaXN0aW5lIHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgJ25nLWRpcnR5JyBjbGFzcyBhbmQgc2V0IHRoZSBmb3JtIHRvIGl0cyBwcmlzdGluZVxuICAgKiBzdGF0ZSAobmctcHJpc3RpbmUgY2xhc3MpLiBUaGlzIG1ldGhvZCB3aWxsIGFsc28gcHJvcGFnYXRlIHRvIGFsbCB0aGUgY29udHJvbHMgY29udGFpbmVkXG4gICAqIGluIHRoaXMgZm9ybS5cbiAgICpcbiAgICogU2V0dGluZyBhIGZvcm0gYmFjayB0byBhIHByaXN0aW5lIHN0YXRlIGlzIG9mdGVuIHVzZWZ1bCB3aGVuIHdlIHdhbnQgdG8gJ3JldXNlJyBhIGZvcm0gYWZ0ZXJcbiAgICogc2F2aW5nIG9yIHJlc2V0dGluZyBpdC5cbiAgICovXG4gIGZvcm0uJHNldFByaXN0aW5lID0gZnVuY3Rpb24oKSB7XG4gICAgJGFuaW1hdGUuc2V0Q2xhc3MoZWxlbWVudCwgUFJJU1RJTkVfQ0xBU1MsIERJUlRZX0NMQVNTICsgJyAnICsgU1VCTUlUVEVEX0NMQVNTKTtcbiAgICBmb3JtLiRkaXJ0eSA9IGZhbHNlO1xuICAgIGZvcm0uJHByaXN0aW5lID0gdHJ1ZTtcbiAgICBmb3JtLiRzdWJtaXR0ZWQgPSBmYWxzZTtcbiAgICBmb3JFYWNoKGNvbnRyb2xzLCBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgICBjb250cm9sLiRzZXRQcmlzdGluZSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHNldFVudG91Y2hlZFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgZm9ybSB0byBpdHMgdW50b3VjaGVkIHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgJ25nLXRvdWNoZWQnIGNsYXNzIGFuZCBzZXQgdGhlIGZvcm0gY29udHJvbHMgdG8gdGhlaXJcbiAgICogdW50b3VjaGVkIHN0YXRlIChuZy11bnRvdWNoZWQgY2xhc3MpLlxuICAgKlxuICAgKiBTZXR0aW5nIGEgZm9ybSBjb250cm9scyBiYWNrIHRvIHRoZWlyIHVudG91Y2hlZCBzdGF0ZSBpcyBvZnRlbiB1c2VmdWwgd2hlbiBzZXR0aW5nIHRoZSBmb3JtXG4gICAqIGJhY2sgdG8gaXRzIHByaXN0aW5lIHN0YXRlLlxuICAgKi9cbiAgZm9ybS4kc2V0VW50b3VjaGVkID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yRWFjaChjb250cm9scywgZnVuY3Rpb24oY29udHJvbCkge1xuICAgICAgY29udHJvbC4kc2V0VW50b3VjaGVkKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0U3VibWl0dGVkXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBmb3JtIHRvIGl0cyBzdWJtaXR0ZWQgc3RhdGUuXG4gICAqL1xuICBmb3JtLiRzZXRTdWJtaXR0ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAkYW5pbWF0ZS5hZGRDbGFzcyhlbGVtZW50LCBTVUJNSVRURURfQ0xBU1MpO1xuICAgIGZvcm0uJHN1Ym1pdHRlZCA9IHRydWU7XG4gICAgZm9ybS4kJHBhcmVudEZvcm0uJHNldFN1Ym1pdHRlZCgpO1xuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nRm9ybVxuICogQHJlc3RyaWN0IEVBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogTmVzdGFibGUgYWxpYXMgb2Yge0BsaW5rIG5nLmRpcmVjdGl2ZTpmb3JtIGBmb3JtYH0gZGlyZWN0aXZlLiBIVE1MXG4gKiBkb2VzIG5vdCBhbGxvdyBuZXN0aW5nIG9mIGZvcm0gZWxlbWVudHMuIEl0IGlzIHVzZWZ1bCB0byBuZXN0IGZvcm1zLCBmb3IgZXhhbXBsZSBpZiB0aGUgdmFsaWRpdHkgb2YgYVxuICogc3ViLWdyb3VwIG9mIGNvbnRyb2xzIG5lZWRzIHRvIGJlIGRldGVybWluZWQuXG4gKlxuICogTm90ZTogdGhlIHB1cnBvc2Ugb2YgYG5nRm9ybWAgaXMgdG8gZ3JvdXAgY29udHJvbHMsXG4gKiBidXQgbm90IHRvIGJlIGEgcmVwbGFjZW1lbnQgZm9yIHRoZSBgPGZvcm0+YCB0YWcgd2l0aCBhbGwgb2YgaXRzIGNhcGFiaWxpdGllc1xuICogKGUuZy4gcG9zdGluZyB0byB0aGUgc2VydmVyLCAuLi4pLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdGb3JtfG5hbWUgTmFtZSBvZiB0aGUgZm9ybS4gSWYgc3BlY2lmaWVkLCB0aGUgZm9ybSBjb250cm9sbGVyIHdpbGwgYmUgcHVibGlzaGVkIGludG9cbiAqICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkIHNjb3BlLCB1bmRlciB0aGlzIG5hbWUuXG4gKlxuICovXG5cbiAvKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIGZvcm1cbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEaXJlY3RpdmUgdGhhdCBpbnN0YW50aWF0ZXNcbiAqIHtAbGluayBmb3JtLkZvcm1Db250cm9sbGVyIEZvcm1Db250cm9sbGVyfS5cbiAqXG4gKiBJZiB0aGUgYG5hbWVgIGF0dHJpYnV0ZSBpcyBzcGVjaWZpZWQsIHRoZSBmb3JtIGNvbnRyb2xsZXIgaXMgcHVibGlzaGVkIG9udG8gdGhlIGN1cnJlbnQgc2NvcGUgdW5kZXJcbiAqIHRoaXMgbmFtZS5cbiAqXG4gKiAjIEFsaWFzOiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nRm9ybSBgbmdGb3JtYH1cbiAqXG4gKiBJbiBBbmd1bGFyLCBmb3JtcyBjYW4gYmUgbmVzdGVkLiBUaGlzIG1lYW5zIHRoYXQgdGhlIG91dGVyIGZvcm0gaXMgdmFsaWQgd2hlbiBhbGwgb2YgdGhlIGNoaWxkXG4gKiBmb3JtcyBhcmUgdmFsaWQgYXMgd2VsbC4gSG93ZXZlciwgYnJvd3NlcnMgZG8gbm90IGFsbG93IG5lc3Rpbmcgb2YgYDxmb3JtPmAgZWxlbWVudHMsIHNvXG4gKiBBbmd1bGFyIHByb3ZpZGVzIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nRm9ybSBgbmdGb3JtYH0gZGlyZWN0aXZlIHdoaWNoIGJlaGF2ZXMgaWRlbnRpY2FsbHkgdG9cbiAqIGA8Zm9ybT5gIGJ1dCBjYW4gYmUgbmVzdGVkLiAgVGhpcyBhbGxvd3MgeW91IHRvIGhhdmUgbmVzdGVkIGZvcm1zLCB3aGljaCBpcyB2ZXJ5IHVzZWZ1bCB3aGVuXG4gKiB1c2luZyBBbmd1bGFyIHZhbGlkYXRpb24gZGlyZWN0aXZlcyBpbiBmb3JtcyB0aGF0IGFyZSBkeW5hbWljYWxseSBnZW5lcmF0ZWQgdXNpbmcgdGhlXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0IGBuZ1JlcGVhdGB9IGRpcmVjdGl2ZS4gU2luY2UgeW91IGNhbm5vdCBkeW5hbWljYWxseSBnZW5lcmF0ZSB0aGUgYG5hbWVgXG4gKiBhdHRyaWJ1dGUgb2YgaW5wdXQgZWxlbWVudHMgdXNpbmcgaW50ZXJwb2xhdGlvbiwgeW91IGhhdmUgdG8gd3JhcCBlYWNoIHNldCBvZiByZXBlYXRlZCBpbnB1dHMgaW4gYW5cbiAqIGBuZ0Zvcm1gIGRpcmVjdGl2ZSBhbmQgbmVzdCB0aGVzZSBpbiBhbiBvdXRlciBgZm9ybWAgZWxlbWVudC5cbiAqXG4gKlxuICogIyBDU1MgY2xhc3Nlc1xuICogIC0gYG5nLXZhbGlkYCBpcyBzZXQgaWYgdGhlIGZvcm0gaXMgdmFsaWQuXG4gKiAgLSBgbmctaW52YWxpZGAgaXMgc2V0IGlmIHRoZSBmb3JtIGlzIGludmFsaWQuXG4gKiAgLSBgbmctcGVuZGluZ2AgaXMgc2V0IGlmIHRoZSBmb3JtIGlzIHBlbmRpbmcuXG4gKiAgLSBgbmctcHJpc3RpbmVgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyBwcmlzdGluZS5cbiAqICAtIGBuZy1kaXJ0eWAgaXMgc2V0IGlmIHRoZSBmb3JtIGlzIGRpcnR5LlxuICogIC0gYG5nLXN1Ym1pdHRlZGAgaXMgc2V0IGlmIHRoZSBmb3JtIHdhcyBzdWJtaXR0ZWQuXG4gKlxuICogS2VlcCBpbiBtaW5kIHRoYXQgbmdBbmltYXRlIGNhbiBkZXRlY3QgZWFjaCBvZiB0aGVzZSBjbGFzc2VzIHdoZW4gYWRkZWQgYW5kIHJlbW92ZWQuXG4gKlxuICpcbiAqICMgU3VibWl0dGluZyBhIGZvcm0gYW5kIHByZXZlbnRpbmcgdGhlIGRlZmF1bHQgYWN0aW9uXG4gKlxuICogU2luY2UgdGhlIHJvbGUgb2YgZm9ybXMgaW4gY2xpZW50LXNpZGUgQW5ndWxhciBhcHBsaWNhdGlvbnMgaXMgZGlmZmVyZW50IHRoYW4gaW4gY2xhc3NpY2FsXG4gKiByb3VuZHRyaXAgYXBwcywgaXQgaXMgZGVzaXJhYmxlIGZvciB0aGUgYnJvd3NlciBub3QgdG8gdHJhbnNsYXRlIHRoZSBmb3JtIHN1Ym1pc3Npb24gaW50byBhIGZ1bGxcbiAqIHBhZ2UgcmVsb2FkIHRoYXQgc2VuZHMgdGhlIGRhdGEgdG8gdGhlIHNlcnZlci4gSW5zdGVhZCBzb21lIGphdmFzY3JpcHQgbG9naWMgc2hvdWxkIGJlIHRyaWdnZXJlZFxuICogdG8gaGFuZGxlIHRoZSBmb3JtIHN1Ym1pc3Npb24gaW4gYW4gYXBwbGljYXRpb24tc3BlY2lmaWMgd2F5LlxuICpcbiAqIEZvciB0aGlzIHJlYXNvbiwgQW5ndWxhciBwcmV2ZW50cyB0aGUgZGVmYXVsdCBhY3Rpb24gKGZvcm0gc3VibWlzc2lvbiB0byB0aGUgc2VydmVyKSB1bmxlc3MgdGhlXG4gKiBgPGZvcm0+YCBlbGVtZW50IGhhcyBhbiBgYWN0aW9uYCBhdHRyaWJ1dGUgc3BlY2lmaWVkLlxuICpcbiAqIFlvdSBjYW4gdXNlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHR3byB3YXlzIHRvIHNwZWNpZnkgd2hhdCBqYXZhc2NyaXB0IG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHdoZW5cbiAqIGEgZm9ybSBpcyBzdWJtaXR0ZWQ6XG4gKlxuICogLSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nU3VibWl0IG5nU3VibWl0fSBkaXJlY3RpdmUgb24gdGhlIGZvcm0gZWxlbWVudFxuICogLSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30gZGlyZWN0aXZlIG9uIHRoZSBmaXJzdFxuICAqICBidXR0b24gb3IgaW5wdXQgZmllbGQgb2YgdHlwZSBzdWJtaXQgKGlucHV0W3R5cGU9c3VibWl0XSlcbiAqXG4gKiBUbyBwcmV2ZW50IGRvdWJsZSBleGVjdXRpb24gb2YgdGhlIGhhbmRsZXIsIHVzZSBvbmx5IG9uZSBvZiB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1N1Ym1pdCBuZ1N1Ym1pdH1cbiAqIG9yIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfSBkaXJlY3RpdmVzLlxuICogVGhpcyBpcyBiZWNhdXNlIG9mIHRoZSBmb2xsb3dpbmcgZm9ybSBzdWJtaXNzaW9uIHJ1bGVzIGluIHRoZSBIVE1MIHNwZWNpZmljYXRpb246XG4gKlxuICogLSBJZiBhIGZvcm0gaGFzIG9ubHkgb25lIGlucHV0IGZpZWxkIHRoZW4gaGl0dGluZyBlbnRlciBpbiB0aGlzIGZpZWxkIHRyaWdnZXJzIGZvcm0gc3VibWl0XG4gKiAoYG5nU3VibWl0YClcbiAqIC0gaWYgYSBmb3JtIGhhcyAyKyBpbnB1dCBmaWVsZHMgYW5kIG5vIGJ1dHRvbnMgb3IgaW5wdXRbdHlwZT1zdWJtaXRdIHRoZW4gaGl0dGluZyBlbnRlclxuICogZG9lc24ndCB0cmlnZ2VyIHN1Ym1pdFxuICogLSBpZiBhIGZvcm0gaGFzIG9uZSBvciBtb3JlIGlucHV0IGZpZWxkcyBhbmQgb25lIG9yIG1vcmUgYnV0dG9ucyBvciBpbnB1dFt0eXBlPXN1Ym1pdF0gdGhlblxuICogaGl0dGluZyBlbnRlciBpbiBhbnkgb2YgdGhlIGlucHV0IGZpZWxkcyB3aWxsIHRyaWdnZXIgdGhlIGNsaWNrIGhhbmRsZXIgb24gdGhlICpmaXJzdCogYnV0dG9uIG9yXG4gKiBpbnB1dFt0eXBlPXN1Ym1pdF0gKGBuZ0NsaWNrYCkgKmFuZCogYSBzdWJtaXQgaGFuZGxlciBvbiB0aGUgZW5jbG9zaW5nIGZvcm0gKGBuZ1N1Ym1pdGApXG4gKlxuICogQW55IHBlbmRpbmcgYG5nTW9kZWxPcHRpb25zYCBjaGFuZ2VzIHdpbGwgdGFrZSBwbGFjZSBpbW1lZGlhdGVseSB3aGVuIGFuIGVuY2xvc2luZyBmb3JtIGlzXG4gKiBzdWJtaXR0ZWQuIE5vdGUgdGhhdCBgbmdDbGlja2AgZXZlbnRzIHdpbGwgb2NjdXIgYmVmb3JlIHRoZSBtb2RlbCBpcyB1cGRhdGVkLiBVc2UgYG5nU3VibWl0YFxuICogdG8gaGF2ZSBhY2Nlc3MgdG8gdGhlIHVwZGF0ZWQgbW9kZWwuXG4gKlxuICogIyMgQW5pbWF0aW9uIEhvb2tzXG4gKlxuICogQW5pbWF0aW9ucyBpbiBuZ0Zvcm0gYXJlIHRyaWdnZXJlZCB3aGVuIGFueSBvZiB0aGUgYXNzb2NpYXRlZCBDU1MgY2xhc3NlcyBhcmUgYWRkZWQgYW5kIHJlbW92ZWQuXG4gKiBUaGVzZSBjbGFzc2VzIGFyZTogYC5uZy1wcmlzdGluZWAsIGAubmctZGlydHlgLCBgLm5nLWludmFsaWRgIGFuZCBgLm5nLXZhbGlkYCBhcyB3ZWxsIGFzIGFueVxuICogb3RoZXIgdmFsaWRhdGlvbnMgdGhhdCBhcmUgcGVyZm9ybWVkIHdpdGhpbiB0aGUgZm9ybS4gQW5pbWF0aW9ucyBpbiBuZ0Zvcm0gYXJlIHNpbWlsYXIgdG8gaG93XG4gKiB0aGV5IHdvcmsgaW4gbmdDbGFzcyBhbmQgYW5pbWF0aW9ucyBjYW4gYmUgaG9va2VkIGludG8gdXNpbmcgQ1NTIHRyYW5zaXRpb25zLCBrZXlmcmFtZXMgYXMgd2VsbFxuICogYXMgSlMgYW5pbWF0aW9ucy5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgYSBzaW1wbGUgd2F5IHRvIHV0aWxpemUgQ1NTIHRyYW5zaXRpb25zIHRvIHN0eWxlIGEgZm9ybSBlbGVtZW50XG4gKiB0aGF0IGhhcyBiZWVuIHJlbmRlcmVkIGFzIGludmFsaWQgYWZ0ZXIgaXQgaGFzIGJlZW4gdmFsaWRhdGVkOlxuICpcbiAqIDxwcmU+XG4gKiAvL2JlIHN1cmUgdG8gaW5jbHVkZSBuZ0FuaW1hdGUgYXMgYSBtb2R1bGUgdG8gaG9vayBpbnRvIG1vcmVcbiAqIC8vYWR2YW5jZWQgYW5pbWF0aW9uc1xuICogLm15LWZvcm0ge1xuICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDtcbiAqICAgYmFja2dyb3VuZDogd2hpdGU7XG4gKiB9XG4gKiAubXktZm9ybS5uZy1pbnZhbGlkIHtcbiAqICAgYmFja2dyb3VuZDogcmVkO1xuICogICBjb2xvcjp3aGl0ZTtcbiAqIH1cbiAqIDwvcHJlPlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCIgZml4QmFzZT1cInRydWVcIiBtb2R1bGU9XCJmb3JtRXhhbXBsZVwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2Zvcm1FeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdGb3JtQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgJHNjb3BlLnVzZXJUeXBlID0gJ2d1ZXN0JztcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxzdHlsZT5cbiAgICAgICAgLm15LWZvcm0ge1xuICAgICAgICAgIHRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xuICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIC5teS1mb3JtLm5nLWludmFsaWQge1xuICAgICAgICAgIGJhY2tncm91bmQ6IHJlZDtcbiAgICAgICAgfVxuICAgICAgIDwvc3R5bGU+XG4gICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJGb3JtQ29udHJvbGxlclwiIGNsYXNzPVwibXktZm9ybVwiPlxuICAgICAgICAgdXNlclR5cGU6IDxpbnB1dCBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cInVzZXJUeXBlXCIgcmVxdWlyZWQ+XG4gICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5SZXF1aXJlZCE8L3NwYW4+PGJyPlxuICAgICAgICAgPGNvZGU+dXNlclR5cGUgPSB7e3VzZXJUeXBlfX08L2NvZGU+PGJyPlxuICAgICAgICAgPGNvZGU+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC9jb2RlPjxicj5cbiAgICAgICAgIDxjb2RlPm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvY29kZT48YnI+XG4gICAgICAgICA8Y29kZT5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L2NvZGU+PGJyPlxuICAgICAgICAgPGNvZGU+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L2NvZGU+PGJyPlxuICAgICAgICA8L2Zvcm0+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB1c2VyVHlwZSA9IGVsZW1lbnQoYnkuYmluZGluZygndXNlclR5cGUnKSk7XG4gICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuXG4gICAgICAgICAgZXhwZWN0KHVzZXJUeXBlLmdldFRleHQoKSkudG9Db250YWluKCdndWVzdCcpO1xuICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdXNlclR5cGUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3VzZXJUeXBlJykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgICB2YXIgdXNlcklucHV0ID0gZWxlbWVudChieS5tb2RlbCgndXNlclR5cGUnKSk7XG5cbiAgICAgICAgICB1c2VySW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICB1c2VySW5wdXQuc2VuZEtleXMoJycpO1xuXG4gICAgICAgICAgZXhwZWN0KHVzZXJUeXBlLmdldFRleHQoKSkudG9FcXVhbCgndXNlclR5cGUgPScpO1xuICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBOYW1lIG9mIHRoZSBmb3JtLiBJZiBzcGVjaWZpZWQsIHRoZSBmb3JtIGNvbnRyb2xsZXIgd2lsbCBiZSBwdWJsaXNoZWQgaW50b1xuICogICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZWQgc2NvcGUsIHVuZGVyIHRoaXMgbmFtZS5cbiAqL1xudmFyIGZvcm1EaXJlY3RpdmVGYWN0b3J5ID0gZnVuY3Rpb24oaXNOZ0Zvcm0pIHtcbiAgcmV0dXJuIFsnJHRpbWVvdXQnLCAnJHBhcnNlJywgZnVuY3Rpb24oJHRpbWVvdXQsICRwYXJzZSkge1xuICAgIHZhciBmb3JtRGlyZWN0aXZlID0ge1xuICAgICAgbmFtZTogJ2Zvcm0nLFxuICAgICAgcmVzdHJpY3Q6IGlzTmdGb3JtID8gJ0VBQycgOiAnRScsXG4gICAgICByZXF1aXJlOiBbJ2Zvcm0nLCAnXl4/Zm9ybSddLCAvL2ZpcnN0IGlzIHRoZSBmb3JtJ3Mgb3duIGN0cmwsIHNlY29uZCBpcyBhbiBvcHRpb25hbCBwYXJlbnQgZm9ybVxuICAgICAgY29udHJvbGxlcjogRm9ybUNvbnRyb2xsZXIsXG4gICAgICBjb21waWxlOiBmdW5jdGlvbiBuZ0Zvcm1Db21waWxlKGZvcm1FbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIC8vIFNldHVwIGluaXRpYWwgc3RhdGUgb2YgdGhlIGNvbnRyb2xcbiAgICAgICAgZm9ybUVsZW1lbnQuYWRkQ2xhc3MoUFJJU1RJTkVfQ0xBU1MpLmFkZENsYXNzKFZBTElEX0NMQVNTKTtcblxuICAgICAgICB2YXIgbmFtZUF0dHIgPSBhdHRyLm5hbWUgPyAnbmFtZScgOiAoaXNOZ0Zvcm0gJiYgYXR0ci5uZ0Zvcm0gPyAnbmdGb3JtJyA6IGZhbHNlKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHByZTogZnVuY3Rpb24gbmdGb3JtUHJlTGluayhzY29wZSwgZm9ybUVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG4gICAgICAgICAgICB2YXIgY29udHJvbGxlciA9IGN0cmxzWzBdO1xuXG4gICAgICAgICAgICAvLyBpZiBgYWN0aW9uYCBhdHRyIGlzIG5vdCBwcmVzZW50IG9uIHRoZSBmb3JtLCBwcmV2ZW50IHRoZSBkZWZhdWx0IGFjdGlvbiAoc3VibWlzc2lvbilcbiAgICAgICAgICAgIGlmICghKCdhY3Rpb24nIGluIGF0dHIpKSB7XG4gICAgICAgICAgICAgIC8vIHdlIGNhbid0IHVzZSBqcSBldmVudHMgYmVjYXVzZSBpZiBhIGZvcm0gaXMgZGVzdHJveWVkIGR1cmluZyBzdWJtaXNzaW9uIHRoZSBkZWZhdWx0XG4gICAgICAgICAgICAgIC8vIGFjdGlvbiBpcyBub3QgcHJldmVudGVkLiBzZWUgIzEyMzhcbiAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgLy8gSUUgOSBpcyBub3QgYWZmZWN0ZWQgYmVjYXVzZSBpdCBkb2Vzbid0IGZpcmUgYSBzdWJtaXQgZXZlbnQgYW5kIHRyeSB0byBkbyBhIGZ1bGxcbiAgICAgICAgICAgICAgLy8gcGFnZSByZWxvYWQgaWYgdGhlIGZvcm0gd2FzIGRlc3Ryb3llZCBieSBzdWJtaXNzaW9uIG9mIHRoZSBmb3JtIHZpYSBhIGNsaWNrIGhhbmRsZXJcbiAgICAgICAgICAgICAgLy8gb24gYSBidXR0b24gaW4gdGhlIGZvcm0uIExvb2tzIGxpa2UgYW4gSUU5IHNwZWNpZmljIGJ1Zy5cbiAgICAgICAgICAgICAgdmFyIGhhbmRsZUZvcm1TdWJtaXNzaW9uID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBjb250cm9sbGVyLiRjb21taXRWaWV3VmFsdWUoKTtcbiAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuJHNldFN1Ym1pdHRlZCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyRm4oZm9ybUVsZW1lbnRbMF0sICdzdWJtaXQnLCBoYW5kbGVGb3JtU3VibWlzc2lvbik7XG5cbiAgICAgICAgICAgICAgLy8gdW5yZWdpc3RlciB0aGUgcHJldmVudERlZmF1bHQgbGlzdGVuZXIgc28gdGhhdCB3ZSBkb24ndCBub3QgbGVhayBtZW1vcnkgYnV0IGluIGFcbiAgICAgICAgICAgICAgLy8gd2F5IHRoYXQgd2lsbCBhY2hpZXZlIHRoZSBwcmV2ZW50aW9uIG9mIHRoZSBkZWZhdWx0IGFjdGlvbi5cbiAgICAgICAgICAgICAgZm9ybUVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyRm4oZm9ybUVsZW1lbnRbMF0sICdzdWJtaXQnLCBoYW5kbGVGb3JtU3VibWlzc2lvbik7XG4gICAgICAgICAgICAgICAgfSwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBhcmVudEZvcm1DdHJsID0gY3RybHNbMV0gfHwgY29udHJvbGxlci4kJHBhcmVudEZvcm07XG4gICAgICAgICAgICBwYXJlbnRGb3JtQ3RybC4kYWRkQ29udHJvbChjb250cm9sbGVyKTtcblxuICAgICAgICAgICAgdmFyIHNldHRlciA9IG5hbWVBdHRyID8gZ2V0U2V0dGVyKGNvbnRyb2xsZXIuJG5hbWUpIDogbm9vcDtcblxuICAgICAgICAgICAgaWYgKG5hbWVBdHRyKSB7XG4gICAgICAgICAgICAgIHNldHRlcihzY29wZSwgY29udHJvbGxlcik7XG4gICAgICAgICAgICAgIGF0dHIuJG9ic2VydmUobmFtZUF0dHIsIGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXIuJG5hbWUgPT09IG5ld1ZhbHVlKSByZXR1cm47XG4gICAgICAgICAgICAgICAgc2V0dGVyKHNjb3BlLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuJCRwYXJlbnRGb3JtLiQkcmVuYW1lQ29udHJvbChjb250cm9sbGVyLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgc2V0dGVyID0gZ2V0U2V0dGVyKGNvbnRyb2xsZXIuJG5hbWUpO1xuICAgICAgICAgICAgICAgIHNldHRlcihzY29wZSwgY29udHJvbGxlcik7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9ybUVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuJCRwYXJlbnRGb3JtLiRyZW1vdmVDb250cm9sKGNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICBzZXR0ZXIoc2NvcGUsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgIGV4dGVuZChjb250cm9sbGVyLCBudWxsRm9ybUN0cmwpOyAvL3N0b3AgcHJvcGFnYXRpbmcgY2hpbGQgZGVzdHJ1Y3Rpb24gaGFuZGxlcnMgdXB3YXJkc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gZm9ybURpcmVjdGl2ZTtcblxuICAgIGZ1bmN0aW9uIGdldFNldHRlcihleHByZXNzaW9uKSB7XG4gICAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHtcbiAgICAgICAgLy9jcmVhdGUgYW4gYXNzaWduYWJsZSBleHByZXNzaW9uLCBzbyBmb3JtcyB3aXRoIGFuIGVtcHR5IG5hbWUgY2FuIGJlIHJlbmFtZWQgbGF0ZXJcbiAgICAgICAgcmV0dXJuICRwYXJzZSgndGhpc1tcIlwiXScpLmFzc2lnbjtcbiAgICAgIH1cbiAgICAgIHJldHVybiAkcGFyc2UoZXhwcmVzc2lvbikuYXNzaWduIHx8IG5vb3A7XG4gICAgfVxuICB9XTtcbn07XG5cbnZhciBmb3JtRGlyZWN0aXZlID0gZm9ybURpcmVjdGl2ZUZhY3RvcnkoKTtcbnZhciBuZ0Zvcm1EaXJlY3RpdmUgPSBmb3JtRGlyZWN0aXZlRmFjdG9yeSh0cnVlKTtcblxuLyogZ2xvYmFsIFZBTElEX0NMQVNTOiBmYWxzZSxcbiAgSU5WQUxJRF9DTEFTUzogZmFsc2UsXG4gIFBSSVNUSU5FX0NMQVNTOiBmYWxzZSxcbiAgRElSVFlfQ0xBU1M6IGZhbHNlLFxuICBVTlRPVUNIRURfQ0xBU1M6IGZhbHNlLFxuICBUT1VDSEVEX0NMQVNTOiBmYWxzZSxcbiAgbmdNb2RlbE1pbkVycjogZmFsc2UsXG4qL1xuXG4vLyBSZWdleCBjb2RlIGlzIG9idGFpbmVkIGZyb20gU086IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMxNDMwNzAvamF2YXNjcmlwdC1yZWdleC1pc28tZGF0ZXRpbWUjYW5zd2VyLTMxNDMyMzFcbnZhciBJU09fREFURV9SRUdFWFAgPSAvXFxkezR9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGRcXC5cXGQrKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKS87XG4vLyBTZWUgdmFsaWQgVVJMcyBpbiBSRkMzOTg3IChodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg3KVxudmFyIFVSTF9SRUdFWFAgPSAvXltBLVphLXpdW0EtWmEtelxcZC4rLV0qOlxcLyooPzpcXHcrKD86OlxcdyspP0ApP1teXFxzL10rKD86OlxcZCspPyg/OlxcL1tcXHcjITouPys9JiVAXFwtL10qKT8kLztcbnZhciBFTUFJTF9SRUdFWFAgPSAvXlthLXowLTkhIyQlJicqK1xcLz0/Xl9ge3x9fi4tXStAW2EtejAtOV0oW2EtejAtOS1dKlthLXowLTldKT8oXFwuW2EtejAtOV0oW2EtejAtOS1dKlthLXowLTldKT8pKiQvaTtcbnZhciBOVU1CRVJfUkVHRVhQID0gL15cXHMqKFxcLXxcXCspPyhcXGQrfChcXGQqKFxcLlxcZCopKSkoW2VFXVsrLV0/XFxkKyk/XFxzKiQvO1xudmFyIERBVEVfUkVHRVhQID0gL14oXFxkezR9KS0oXFxkezJ9KS0oXFxkezJ9KSQvO1xudmFyIERBVEVUSU1FTE9DQUxfUkVHRVhQID0gL14oXFxkezR9KS0oXFxkXFxkKS0oXFxkXFxkKVQoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKShcXC5cXGR7MSwzfSk/KT8kLztcbnZhciBXRUVLX1JFR0VYUCA9IC9eKFxcZHs0fSktVyhcXGRcXGQpJC87XG52YXIgTU9OVEhfUkVHRVhQID0gL14oXFxkezR9KS0oXFxkXFxkKSQvO1xudmFyIFRJTUVfUkVHRVhQID0gL14oXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKShcXC5cXGR7MSwzfSk/KT8kLztcblxudmFyIGlucHV0VHlwZSA9IHtcblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W3RleHRdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTdGFuZGFyZCBIVE1MIHRleHQgaW5wdXQgd2l0aCBhbmd1bGFyIGRhdGEgYmluZGluZywgaW5oZXJpdGVkIGJ5IG1vc3Qgb2YgdGhlIGBpbnB1dGAgZWxlbWVudHMuXG4gICAqXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW5cbiAgICogICAgbWlubGVuZ3RoLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXG4gICAqICAgIG1heGxlbmd0aC4gU2V0dGluZyB0aGUgYXR0cmlidXRlIHRvIGEgbmVnYXRpdmUgb3Igbm9uLW51bWVyaWMgdmFsdWUsIGFsbG93cyB2aWV3IHZhbHVlcyBvZlxuICAgKiAgICBhbnkgbGVuZ3RoLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHBhdHRlcm4gU2ltaWxhciB0byBgbmdQYXR0ZXJuYCBleGNlcHQgdGhhdCB0aGUgYXR0cmlidXRlIHZhbHVlIGlzIHRoZSBhY3R1YWwgc3RyaW5nXG4gICAqICAgIHRoYXQgY29udGFpbnMgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBib2R5IHRoYXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSByZWd1bGFyIGV4cHJlc3Npb25cbiAgICogICAgYXMgaW4gdGhlIG5nUGF0dGVybiBkaXJlY3RpdmUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBuZ01vZGVsIHZhbHVlIGRvZXMgbm90IG1hdGNoXG4gICAqICAgIGEgUmVnRXhwIGZvdW5kIGJ5IGV2YWx1YXRpbmcgdGhlIEFuZ3VsYXIgZXhwcmVzc2lvbiBnaXZlbiBpbiB0aGUgYXR0cmlidXRlIHZhbHVlLlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBSZWdFeHAgb2JqZWN0LCB0aGVuIHRoaXMgaXMgdXNlZCBkaXJlY3RseS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgc3RyaW5nLCB0aGVuIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgUmVnRXhwXG4gICAqICAgIGFmdGVyIHdyYXBwaW5nIGl0IGluIGBeYCBhbmQgYCRgIGNoYXJhY3RlcnMuIEZvciBpbnN0YW5jZSwgYFwiYWJjXCJgIHdpbGwgYmUgY29udmVydGVkIHRvXG4gICAqICAgIGBuZXcgUmVnRXhwKCdeYWJjJCcpYC48YnIgLz5cbiAgICogICAgKipOb3RlOioqIEF2b2lkIHVzaW5nIHRoZSBgZ2AgZmxhZyBvbiB0aGUgUmVnRXhwLCBhcyBpdCB3aWxsIGNhdXNlIGVhY2ggc3VjY2Vzc2l2ZSBzZWFyY2ggdG9cbiAgICogICAgc3RhcnQgYXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHNlYXJjaCdzIG1hdGNoLCB0aHVzIG5vdCB0YWtpbmcgdGhlIHdob2xlIGlucHV0IHZhbHVlIGludG9cbiAgICogICAgYWNjb3VudC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtuZ1RyaW09dHJ1ZV0gSWYgc2V0IHRvIGZhbHNlIEFuZ3VsYXIgd2lsbCBub3QgYXV0b21hdGljYWxseSB0cmltIHRoZSBpbnB1dC5cbiAgICogICAgVGhpcyBwYXJhbWV0ZXIgaXMgaWdub3JlZCBmb3IgaW5wdXRbdHlwZT1wYXNzd29yZF0gY29udHJvbHMsIHdoaWNoIHdpbGwgbmV2ZXIgdHJpbSB0aGVcbiAgICogICAgaW5wdXQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwidGV4dC1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJ0ZXh0SW5wdXRFeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgndGV4dElucHV0RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgICAgICAgdGV4dDogJ2d1ZXN0JyxcbiAgICAgICAgICAgICAgICAgd29yZDogL15cXHMqXFx3KlxccyokL1xuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGxhYmVsPlNpbmdsZSB3b3JkOlxuICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS50ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgbmctcGF0dGVybj1cImV4YW1wbGUud29yZFwiIHJlcXVpcmVkIG5nLXRyaW09XCJmYWxzZVwiPlxuICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5wYXR0ZXJuXCI+XG4gICAgICAgICAgICAgICBTaW5nbGUgd29yZCBvbmx5ITwvc3Bhbj5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgIDx0dD50ZXh0ID0ge3tleGFtcGxlLnRleHR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgdmFyIHRleHQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2V4YW1wbGUudGV4dCcpKTtcbiAgICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnZXhhbXBsZS50ZXh0JykpO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvQ29udGFpbignZ3Vlc3QnKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJycpO1xuXG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3RleHQgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG11bHRpIHdvcmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnaGVsbG8gd29ybGQnKTtcblxuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAndGV4dCc6IHRleHRJbnB1dFR5cGUsXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgaW5wdXRcbiAgICAgKiBAbmFtZSBpbnB1dFtkYXRlXVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogSW5wdXQgd2l0aCBkYXRlIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydFxuICAgICAqIHRoZSBIVE1MNSBkYXRlIGlucHV0LCBhIHRleHQgZWxlbWVudCB3aWxsIGJlIHVzZWQuIEluIHRoYXQgY2FzZSwgdGV4dCBtdXN0IGJlIGVudGVyZWQgaW4gYSB2YWxpZCBJU08tODYwMVxuICAgICAqIGRhdGUgZm9ybWF0ICh5eXl5LU1NLWRkKSwgZm9yIGV4YW1wbGU6IGAyMDA5LTAxLTA2YC4gU2luY2UgbWFueVxuICAgICAqIG1vZGVybiBicm93c2VycyBkbyBub3QgeWV0IHN1cHBvcnQgdGhpcyBpbnB1dCB0eXBlLCBpdCBpcyBpbXBvcnRhbnQgdG8gcHJvdmlkZSBjdWVzIHRvIHVzZXJzIG9uIHRoZVxuICAgICAqIGV4cGVjdGVkIGlucHV0IGZvcm1hdCB2aWEgYSBwbGFjZWhvbGRlciBvciBsYWJlbC5cbiAgICAgKlxuICAgICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgICAqIEludmFsaWQgYERhdGVgIG9iamVjdHMgKGRhdGVzIHdob3NlIGBnZXRUaW1lKClgIGlzIGBOYU5gKSB3aWxsIGJlIHJlbmRlcmVkIGFzIGFuIGVtcHR5IHN0cmluZy5cbiAgICAgKlxuICAgICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfS4gQnkgZGVmYXVsdCwgdGhpcyBpcyB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC4gVGhpcyBtdXN0IGJlIGFcbiAgICAgKiAgIHZhbGlkIElTTyBkYXRlIHN0cmluZyAoeXl5eS1NTS1kZCkuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpcyBhdHRyaWJ1dGVcbiAgICAgKiAgIChlLmcuIGBtaW49XCJ7e21pbkRhdGUgfCBkYXRlOid5eXl5LU1NLWRkJ319XCJgKS4gTm90ZSB0aGF0IGBtaW5gIHdpbGwgYWxzbyBhZGQgbmF0aXZlIEhUTUw1XG4gICAgICogICBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLiBUaGlzIG11c3QgYmVcbiAgICAgKiAgIGEgdmFsaWQgSVNPIGRhdGUgc3RyaW5nICh5eXl5LU1NLWRkKS4gWW91IGNhbiBhbHNvIHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGlzIGF0dHJpYnV0ZVxuICAgICAqICAgKGUuZy4gYG1heD1cInt7bWF4RGF0ZSB8IGRhdGU6J3l5eXktTU0tZGQnfX1cImApLiBOb3RlIHRoYXQgYG1heGAgd2lsbCBhbHNvIGFkZCBuYXRpdmUgSFRNTDVcbiAgICAgKiAgIGNvbnN0cmFpbnQgdmFsaWRhdGlvbi5cbiAgICAgKiBAcGFyYW0geyhkYXRlfHN0cmluZyk9fSBuZ01pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8gdGhlIERhdGUgLyBJU08gZGF0ZSBzdHJpbmdcbiAgICAgKiAgIHRoZSBgbmdNaW5gIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWluYCBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvIHRoZSBEYXRlIC8gSVNPIGRhdGUgc3RyaW5nXG4gICAgICogICB0aGUgYG5nTWF4YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1heGAgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBuYW1lPVwiZGF0ZS1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJkYXRlSW5wdXRFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnZGF0ZUlucHV0RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IG5ldyBEYXRlKDIwMTMsIDksIDIyKVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICAgICA8bGFiZWwgZm9yPVwiZXhhbXBsZUlucHV0XCI+UGljayBhIGRhdGUgaW4gMjAxMzo8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZGF0ZVwiIGlkPVwiZXhhbXBsZUlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJleGFtcGxlLnZhbHVlXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJ5eXl5LU1NLWRkXCIgbWluPVwiMjAxMy0wMS0wMVwiIG1heD1cIjIwMTMtMTItMzFcIiByZXF1aXJlZCAvPlxuICAgICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IuZGF0ZVwiPlxuICAgICAgICAgICAgICAgIE5vdCBhIHZhbGlkIGRhdGUhPC9zcGFuPlxuICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgPHR0PnZhbHVlID0ge3tleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NLWRkXCJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgIDwvZm9ybT5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygnZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1NTS1kZFwiJykpO1xuICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2V4YW1wbGUudmFsdWUnKSk7XG5cbiAgICAgICAgLy8gY3VycmVudGx5IHByb3RyYWN0b3Ivd2ViZHJpdmVyIGRvZXMgbm90IHN1cHBvcnRcbiAgICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9sc1xuICAgICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYW5kIGZvcmNlIHZhbGlkYXRpb24uXG4gICAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgICBcImFuZ3VsYXIuZWxlbWVudChpcHQpLnNjb3BlKCkuJGFwcGx5KGZ1bmN0aW9uKHMpIHsgcy5teUZvcm1baXB0Lm5hbWVdLiRzZXRWaWV3VmFsdWUoJ1wiICsgdmFsICsgXCInKTsgfSk7XCI7XG4gICAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICAgIH1cblxuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzIwMTMtMTAtMjInKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7XG4gICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2V0SW5wdXQoJzIwMTUtMDEtMDEnKTtcbiAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgICAgKi9cbiAgJ2RhdGUnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCdkYXRlJywgREFURV9SRUdFWFAsXG4gICAgICAgICBjcmVhdGVEYXRlUGFyc2VyKERBVEVfUkVHRVhQLCBbJ3l5eXknLCAnTU0nLCAnZGQnXSksXG4gICAgICAgICAneXl5eS1NTS1kZCcpLFxuXG4gICAvKipcbiAgICAqIEBuZ2RvYyBpbnB1dFxuICAgICogQG5hbWUgaW5wdXRbZGF0ZXRpbWUtbG9jYWxdXG4gICAgKlxuICAgICogQGRlc2NyaXB0aW9uXG4gICAgKiBJbnB1dCB3aXRoIGRhdGV0aW1lIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydFxuICAgICogdGhlIEhUTUw1IGRhdGUgaW5wdXQsIGEgdGV4dCBlbGVtZW50IHdpbGwgYmUgdXNlZC4gSW4gdGhhdCBjYXNlLCB0aGUgdGV4dCBtdXN0IGJlIGVudGVyZWQgaW4gYSB2YWxpZCBJU08tODYwMVxuICAgICogbG9jYWwgZGF0ZXRpbWUgZm9ybWF0ICh5eXl5LU1NLWRkVEhIOm1tOnNzKSwgZm9yIGV4YW1wbGU6IGAyMDEwLTEyLTI4VDE0OjU3OjAwYC5cbiAgICAqXG4gICAgKiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgYSBEYXRlIG9iamVjdCwgb3RoZXJ3aXNlIEFuZ3VsYXIgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICAqIEludmFsaWQgYERhdGVgIG9iamVjdHMgKGRhdGVzIHdob3NlIGBnZXRUaW1lKClgIGlzIGBOYU5gKSB3aWxsIGJlIHJlbmRlcmVkIGFzIGFuIGVtcHR5IHN0cmluZy5cbiAgICAqXG4gICAgKiBUaGUgdGltZXpvbmUgdG8gYmUgdXNlZCB0byByZWFkL3dyaXRlIHRoZSBgRGF0ZWAgaW5zdGFuY2UgaW4gdGhlIG1vZGVsIGNhbiBiZSBkZWZpbmVkIHVzaW5nXG4gICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfS4gQnkgZGVmYXVsdCwgdGhpcyBpcyB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIuXG4gICAgKlxuICAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLlxuICAgICogICBUaGlzIG11c3QgYmUgYSB2YWxpZCBJU08gZGF0ZXRpbWUgZm9ybWF0ICh5eXl5LU1NLWRkVEhIOm1tOnNzKS4gWW91IGNhbiBhbHNvIHVzZSBpbnRlcnBvbGF0aW9uXG4gICAgKiAgIGluc2lkZSB0aGlzIGF0dHJpYnV0ZSAoZS5nLiBgbWluPVwie3ttaW5EYXRldGltZUxvY2FsIHwgZGF0ZToneXl5eS1NTS1kZFRISDptbTpzcyd9fVwiYCkuXG4gICAgKiAgIE5vdGUgdGhhdCBgbWluYCB3aWxsIGFsc28gYWRkIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuXG4gICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyBkYXRldGltZSBmb3JtYXQgKHl5eXktTU0tZGRUSEg6bW06c3MpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb25cbiAgICAqICAgaW5zaWRlIHRoaXMgYXR0cmlidXRlIChlLmcuIGBtYXg9XCJ7e21heERhdGV0aW1lTG9jYWwgfCBkYXRlOid5eXl5LU1NLWRkVEhIOm1tOnNzJ319XCJgKS5cbiAgICAqICAgTm90ZSB0aGF0IGBtYXhgIHdpbGwgYWxzbyBhZGQgbmF0aXZlIEhUTUw1IGNvbnN0cmFpbnQgdmFsaWRhdGlvbi5cbiAgICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IHRvIHRoZSBEYXRlIC8gSVNPIGRhdGV0aW1lIHN0cmluZ1xuICAgICogICB0aGUgYG5nTWluYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1pbmAgYXR0cmlidXRlLlxuICAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgdG8gdGhlIERhdGUgLyBJU08gZGF0ZXRpbWUgc3RyaW5nXG4gICAgKiAgIHRoZSBgbmdNYXhgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWF4YCBhdHRyaWJ1dGUuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICAqXG4gICAgKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJkYXRldGltZWxvY2FsLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImRhdGVFeGFtcGxlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxzY3JpcHQ+XG4gICAgICAgIGFuZ3VsYXIubW9kdWxlKCdkYXRlRXhhbXBsZScsIFtdKVxuICAgICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgICAgdmFsdWU6IG5ldyBEYXRlKDIwMTAsIDExLCAyOCwgMTQsIDU3KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XSk7XG4gICAgICA8L3NjcmlwdD5cbiAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICAgPGxhYmVsIGZvcj1cImV4YW1wbGVJbnB1dFwiPlBpY2sgYSBkYXRlIGJldHdlZW4gaW4gMjAxMzo8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgaWQ9XCJleGFtcGxlSW5wdXRcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJ5eXl5LU1NLWRkVEhIOm1tOnNzXCIgbWluPVwiMjAwMS0wMS0wMVQwMDowMDowMFwiIG1heD1cIjIwMTMtMTItMzFUMDA6MDA6MDBcIiByZXF1aXJlZCAvPlxuICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLmRhdGV0aW1lbG9jYWxcIj5cbiAgICAgICAgICAgICAgTm90IGEgdmFsaWQgZGF0ZSE8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktTU0tZGRUSEg6bW06c3NcIn19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgICA8L2Zvcm0+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygnZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1NTS1kZFRISDptbTpzc1wiJykpO1xuICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnZXhhbXBsZS52YWx1ZScpKTtcblxuICAgICAgLy8gY3VycmVudGx5IHByb3RyYWN0b3Ivd2ViZHJpdmVyIGRvZXMgbm90IHN1cHBvcnRcbiAgICAgIC8vIHNlbmRpbmcga2V5cyB0byBhbGwga25vd24gSFRNTDUgaW5wdXQgY29udHJvbHNcbiAgICAgIC8vIGZvciB2YXJpb3VzIGJyb3dzZXJzIChodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy81NjIpLlxuICAgICAgZnVuY3Rpb24gc2V0SW5wdXQodmFsKSB7XG4gICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYW5kIGZvcmNlIHZhbGlkYXRpb24uXG4gICAgICAgIHZhciBzY3IgPSBcInZhciBpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhhbXBsZUlucHV0Jyk7IFwiICtcbiAgICAgICAgXCJpcHQudmFsdWUgPSAnXCIgKyB2YWwgKyBcIic7XCIgK1xuICAgICAgICBcImFuZ3VsYXIuZWxlbWVudChpcHQpLnNjb3BlKCkuJGFwcGx5KGZ1bmN0aW9uKHMpIHsgcy5teUZvcm1baXB0Lm5hbWVdLiRzZXRWaWV3VmFsdWUoJ1wiICsgdmFsICsgXCInKTsgfSk7XCI7XG4gICAgICAgIGJyb3dzZXIuZXhlY3V0ZVNjcmlwdChzY3IpO1xuICAgICAgfVxuXG4gICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcyMDEwLTEyLTI4VDE0OjU3OjAwJyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IHRydWUnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJycpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcyMDE1LTAxLTAxVDIzOjU5OjAwJyk7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICAgICovXG4gICdkYXRldGltZS1sb2NhbCc6IGNyZWF0ZURhdGVJbnB1dFR5cGUoJ2RhdGV0aW1lbG9jYWwnLCBEQVRFVElNRUxPQ0FMX1JFR0VYUCxcbiAgICAgIGNyZWF0ZURhdGVQYXJzZXIoREFURVRJTUVMT0NBTF9SRUdFWFAsIFsneXl5eScsICdNTScsICdkZCcsICdISCcsICdtbScsICdzcycsICdzc3MnXSksXG4gICAgICAneXl5eS1NTS1kZFRISDptbTpzcy5zc3MnKSxcblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W3RpbWVdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBJbnB1dCB3aXRoIHRpbWUgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0XG4gICAqIHRoZSBIVE1MNSBkYXRlIGlucHV0LCBhIHRleHQgZWxlbWVudCB3aWxsIGJlIHVzZWQuIEluIHRoYXQgY2FzZSwgdGhlIHRleHQgbXVzdCBiZSBlbnRlcmVkIGluIGEgdmFsaWQgSVNPLTg2MDFcbiAgICogbG9jYWwgdGltZSBmb3JtYXQgKEhIOm1tOnNzKSwgZm9yIGV4YW1wbGU6IGAxNDo1NzowMGAuIE1vZGVsIG11c3QgYmUgYSBEYXRlIG9iamVjdC4gVGhpcyBiaW5kaW5nIHdpbGwgYWx3YXlzIG91dHB1dCBhXG4gICAqIERhdGUgb2JqZWN0IHRvIHRoZSBtb2RlbCBvZiBKYW51YXJ5IDEsIDE5NzAsIG9yIGxvY2FsIGRhdGUgYG5ldyBEYXRlKDE5NzAsIDAsIDEsIEhILCBtbSwgc3MpYC5cbiAgICpcbiAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIGEgRGF0ZSBvYmplY3QsIG90aGVyd2lzZSBBbmd1bGFyIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAqIEludmFsaWQgYERhdGVgIG9iamVjdHMgKGRhdGVzIHdob3NlIGBnZXRUaW1lKClgIGlzIGBOYU5gKSB3aWxsIGJlIHJlbmRlcmVkIGFzIGFuIGVtcHR5IHN0cmluZy5cbiAgICpcbiAgICogVGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBjYW4gYmUgZGVmaW5lZCB1c2luZ1xuICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfS4gQnkgZGVmYXVsdCwgdGhpcyBpcyB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1pbmAuXG4gICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIHRpbWUgZm9ybWF0IChISDptbTpzcykuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpc1xuICAgKiAgIGF0dHJpYnV0ZSAoZS5nLiBgbWluPVwie3ttaW5UaW1lIHwgZGF0ZTonSEg6bW06c3MnfX1cImApLiBOb3RlIHRoYXQgYG1pbmAgd2lsbCBhbHNvIGFkZFxuICAgKiAgIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC5cbiAgICogICBUaGlzIG11c3QgYmUgYSB2YWxpZCBJU08gdGltZSBmb3JtYXQgKEhIOm1tOnNzKS4gWW91IGNhbiBhbHNvIHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGlzXG4gICAqICAgYXR0cmlidXRlIChlLmcuIGBtYXg9XCJ7e21heFRpbWUgfCBkYXRlOidISDptbTpzcyd9fVwiYCkuIE5vdGUgdGhhdCBgbWF4YCB3aWxsIGFsc28gYWRkXG4gICAqICAgbmF0aXZlIEhUTUw1IGNvbnN0cmFpbnQgdmFsaWRhdGlvbi5cbiAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvIHRoZSBEYXRlIC8gSVNPIHRpbWUgc3RyaW5nIHRoZVxuICAgKiAgIGBuZ01pbmAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtaW5gIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvIHRoZSBEYXRlIC8gSVNPIHRpbWUgc3RyaW5nIHRoZVxuICAgKiAgIGBuZ01heGAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtYXhgIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cInRpbWUtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwidGltZUV4YW1wbGVcIj5cbiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgIDxzY3JpcHQ+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgndGltZUV4YW1wbGUnLCBbXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZSgxOTcwLCAwLCAxLCAxNCwgNTcsIDApXG4gICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xuICAgICA8L3NjcmlwdD5cbiAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybFwiPlxuICAgICAgICA8bGFiZWwgZm9yPVwiZXhhbXBsZUlucHV0XCI+UGljayBhIGJldHdlZW4gOGFtIGFuZCA1cG06PC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0aW1lXCIgaWQ9XCJleGFtcGxlSW5wdXRcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJISDptbTpzc1wiIG1pbj1cIjA4OjAwOjAwXCIgbWF4PVwiMTc6MDA6MDBcIiByZXF1aXJlZCAvPlxuICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnRpbWVcIj5cbiAgICAgICAgICAgICAgTm90IGEgdmFsaWQgZGF0ZSE8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcIkhIOm1tOnNzXCJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICA8L2Zvcm0+XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcIkhIOm1tOnNzXCInKSk7XG4gICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdleGFtcGxlLnZhbHVlJykpO1xuXG4gICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9sc1xuICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICBmdW5jdGlvbiBzZXRJbnB1dCh2YWwpIHtcbiAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi5cbiAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICBcImlwdC52YWx1ZSA9ICdcIiArIHZhbCArIFwiJztcIiArXG4gICAgICAgIFwiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnXCIgKyB2YWwgKyBcIicpOyB9KTtcIjtcbiAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICB9XG5cbiAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzE0OjU3OjAwJyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IHRydWUnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJycpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcyMzo1OTowMCcpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG4gICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gICAqL1xuICAndGltZSc6IGNyZWF0ZURhdGVJbnB1dFR5cGUoJ3RpbWUnLCBUSU1FX1JFR0VYUCxcbiAgICAgIGNyZWF0ZURhdGVQYXJzZXIoVElNRV9SRUdFWFAsIFsnSEgnLCAnbW0nLCAnc3MnLCAnc3NzJ10pLFxuICAgICAnSEg6bW06c3Muc3NzJyksXG5cbiAgIC8qKlxuICAgICogQG5nZG9jIGlucHV0XG4gICAgKiBAbmFtZSBpbnB1dFt3ZWVrXVxuICAgICpcbiAgICAqIEBkZXNjcmlwdGlvblxuICAgICogSW5wdXQgd2l0aCB3ZWVrLW9mLXRoZS15ZWFyIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uIHRvIERhdGUuIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0XG4gICAgKiB0aGUgSFRNTDUgd2VlayBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAgKiB3ZWVrIGZvcm1hdCAoeXl5eS1XIyMpLCBmb3IgZXhhbXBsZTogYDIwMTMtVzAyYC5cbiAgICAqXG4gICAgKiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgYSBEYXRlIG9iamVjdCwgb3RoZXJ3aXNlIEFuZ3VsYXIgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICAqIEludmFsaWQgYERhdGVgIG9iamVjdHMgKGRhdGVzIHdob3NlIGBnZXRUaW1lKClgIGlzIGBOYU5gKSB3aWxsIGJlIHJlbmRlcmVkIGFzIGFuIGVtcHR5IHN0cmluZy5cbiAgICAqXG4gICAgKiBUaGUgdGltZXpvbmUgdG8gYmUgdXNlZCB0byByZWFkL3dyaXRlIHRoZSBgRGF0ZWAgaW5zdGFuY2UgaW4gdGhlIG1vZGVsIGNhbiBiZSBkZWZpbmVkIHVzaW5nXG4gICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfS4gQnkgZGVmYXVsdCwgdGhpcyBpcyB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIuXG4gICAgKlxuICAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLlxuICAgICogICBUaGlzIG11c3QgYmUgYSB2YWxpZCBJU08gd2VlayBmb3JtYXQgKHl5eXktVyMjKS4gWW91IGNhbiBhbHNvIHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGlzXG4gICAgKiAgIGF0dHJpYnV0ZSAoZS5nLiBgbWluPVwie3ttaW5XZWVrIHwgZGF0ZToneXl5eS1Xd3cnfX1cImApLiBOb3RlIHRoYXQgYG1pbmAgd2lsbCBhbHNvIGFkZFxuICAgICogICBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLlxuICAgICogICBUaGlzIG11c3QgYmUgYSB2YWxpZCBJU08gd2VlayBmb3JtYXQgKHl5eXktVyMjKS4gWW91IGNhbiBhbHNvIHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGlzXG4gICAgKiAgIGF0dHJpYnV0ZSAoZS5nLiBgbWF4PVwie3ttYXhXZWVrIHwgZGF0ZToneXl5eS1Xd3cnfX1cImApLiBOb3RlIHRoYXQgYG1heGAgd2lsbCBhbHNvIGFkZFxuICAgICogICBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvIHRoZSBEYXRlIC8gSVNPIHdlZWsgc3RyaW5nXG4gICAgKiAgIHRoZSBgbmdNaW5gIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWluYCBhdHRyaWJ1dGUuXG4gICAgKiBAcGFyYW0geyhkYXRlfHN0cmluZyk9fSBuZ01heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8gdGhlIERhdGUgLyBJU08gd2VlayBzdHJpbmdcbiAgICAqICAgdGhlIGBuZ01heGAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtYXhgIGF0dHJpYnV0ZS5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgICpcbiAgICAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbmFtZT1cIndlZWstaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwid2Vla0V4YW1wbGVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPHNjcmlwdD5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCd3ZWVrRXhhbXBsZScsIFtdKVxuICAgICAgICAuY29udHJvbGxlcignRGF0ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICRzY29wZS5leGFtcGxlID0ge1xuICAgICAgICAgICAgdmFsdWU6IG5ldyBEYXRlKDIwMTMsIDAsIDMpXG4gICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xuICAgICAgPC9zY3JpcHQ+XG4gICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkRhdGVDb250cm9sbGVyIGFzIGRhdGVDdHJsXCI+XG4gICAgICAgIDxsYWJlbD5QaWNrIGEgZGF0ZSBiZXR3ZWVuIGluIDIwMTM6XG4gICAgICAgICAgPGlucHV0IGlkPVwiZXhhbXBsZUlucHV0XCIgdHlwZT1cIndlZWtcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIllZWVktVyMjXCIgbWluPVwiMjAxMi1XMzJcIlxuICAgICAgICAgICAgICAgICBtYXg9XCIyMDEzLVc1MlwiIHJlcXVpcmVkIC8+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3Iud2Vla1wiPlxuICAgICAgICAgICAgICBOb3QgYSB2YWxpZCBkYXRlITwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDx0dD52YWx1ZSA9IHt7ZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1Xd3dcIn19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgICA8L2Zvcm0+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygnZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1Xd3dcIicpKTtcbiAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2V4YW1wbGUudmFsdWUnKSk7XG5cbiAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS5cbiAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLlxuICAgICAgICB2YXIgc2NyID0gXCJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyBcIiArXG4gICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgXCJhbmd1bGFyLmVsZW1lbnQoaXB0KS5zY29wZSgpLiRhcHBseShmdW5jdGlvbihzKSB7IHMubXlGb3JtW2lwdC5uYW1lXS4kc2V0Vmlld1ZhbHVlKCdcIiArIHZhbCArIFwiJyk7IH0pO1wiO1xuICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTtcbiAgICAgIH1cblxuICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMy1XMDEnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gdHJ1ZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnJyk7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJzIwMTUtVzAxJyk7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICAgICovXG4gICd3ZWVrJzogY3JlYXRlRGF0ZUlucHV0VHlwZSgnd2VlaycsIFdFRUtfUkVHRVhQLCB3ZWVrUGFyc2VyLCAneXl5eS1Xd3cnKSxcblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W21vbnRoXVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSW5wdXQgd2l0aCBtb250aCB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbi4gSW4gYnJvd3NlcnMgdGhhdCBkbyBub3QgeWV0IHN1cHBvcnRcbiAgICogdGhlIEhUTUw1IG1vbnRoIGlucHV0LCBhIHRleHQgZWxlbWVudCB3aWxsIGJlIHVzZWQuIEluIHRoYXQgY2FzZSwgdGhlIHRleHQgbXVzdCBiZSBlbnRlcmVkIGluIGEgdmFsaWQgSVNPLTg2MDFcbiAgICogbW9udGggZm9ybWF0ICh5eXl5LU1NKSwgZm9yIGV4YW1wbGU6IGAyMDA5LTAxYC5cbiAgICpcbiAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIGEgRGF0ZSBvYmplY3QsIG90aGVyd2lzZSBBbmd1bGFyIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAqIEludmFsaWQgYERhdGVgIG9iamVjdHMgKGRhdGVzIHdob3NlIGBnZXRUaW1lKClgIGlzIGBOYU5gKSB3aWxsIGJlIHJlbmRlcmVkIGFzIGFuIGVtcHR5IHN0cmluZy5cbiAgICogSWYgdGhlIG1vZGVsIGlzIG5vdCBzZXQgdG8gdGhlIGZpcnN0IG9mIHRoZSBtb250aCwgdGhlIG5leHQgdmlldyB0byBtb2RlbCB1cGRhdGUgd2lsbCBzZXQgaXRcbiAgICogdG8gdGhlIGZpcnN0IG9mIHRoZSBtb250aC5cbiAgICpcbiAgICogVGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBjYW4gYmUgZGVmaW5lZCB1c2luZ1xuICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfS4gQnkgZGVmYXVsdCwgdGhpcyBpcyB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1pbmAuXG4gICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIG1vbnRoIGZvcm1hdCAoeXl5eS1NTSkuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpc1xuICAgKiAgIGF0dHJpYnV0ZSAoZS5nLiBgbWluPVwie3ttaW5Nb250aCB8IGRhdGU6J3l5eXktTU0nfX1cImApLiBOb3RlIHRoYXQgYG1pbmAgd2lsbCBhbHNvIGFkZFxuICAgKiAgIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC5cbiAgICogICBUaGlzIG11c3QgYmUgYSB2YWxpZCBJU08gbW9udGggZm9ybWF0ICh5eXl5LU1NKS4gWW91IGNhbiBhbHNvIHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGlzXG4gICAqICAgYXR0cmlidXRlIChlLmcuIGBtYXg9XCJ7e21heE1vbnRoIHwgZGF0ZToneXl5eS1NTSd9fVwiYCkuIE5vdGUgdGhhdCBgbWF4YCB3aWxsIGFsc28gYWRkXG4gICAqICAgbmF0aXZlIEhUTUw1IGNvbnN0cmFpbnQgdmFsaWRhdGlvbi5cbiAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvIHRoZSBEYXRlIC8gSVNPIHdlZWsgc3RyaW5nXG4gICAqICAgdGhlIGBuZ01pbmAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtaW5gIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvIHRoZSBEYXRlIC8gSVNPIHdlZWsgc3RyaW5nXG4gICAqICAgdGhlIGBuZ01heGAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtYXhgIGF0dHJpYnV0ZS5cblxuICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwibW9udGgtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwibW9udGhFeGFtcGxlXCI+XG4gICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICA8c2NyaXB0PlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ21vbnRoRXhhbXBsZScsIFtdKVxuICAgICAgICAuY29udHJvbGxlcignRGF0ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICRzY29wZS5leGFtcGxlID0ge1xuICAgICAgICAgICAgdmFsdWU6IG5ldyBEYXRlKDIwMTMsIDksIDEpXG4gICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xuICAgICA8L3NjcmlwdD5cbiAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybFwiPlxuICAgICAgIDxsYWJlbCBmb3I9XCJleGFtcGxlSW5wdXRcIj5QaWNrIGEgbW9udGggaW4gMjAxMzo8L2xhYmVsPlxuICAgICAgIDxpbnB1dCBpZD1cImV4YW1wbGVJbnB1dFwiIHR5cGU9XCJtb250aFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS52YWx1ZVwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJ5eXl5LU1NXCIgbWluPVwiMjAxMy0wMVwiIG1heD1cIjIwMTMtMTJcIiByZXF1aXJlZCAvPlxuICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5tb250aFwiPlxuICAgICAgICAgICAgTm90IGEgdmFsaWQgbW9udGghPC9zcGFuPlxuICAgICAgIDwvZGl2PlxuICAgICAgIDx0dD52YWx1ZSA9IHt7ZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1NTVwifX08L3R0Pjxici8+XG4gICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICA8L2Zvcm0+XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktTU1cIicpKTtcbiAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2V4YW1wbGUudmFsdWUnKSk7XG5cbiAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS5cbiAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLlxuICAgICAgICB2YXIgc2NyID0gXCJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyBcIiArXG4gICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgXCJhbmd1bGFyLmVsZW1lbnQoaXB0KS5zY29wZSgpLiRhcHBseShmdW5jdGlvbihzKSB7IHMubXlGb3JtW2lwdC5uYW1lXS4kc2V0Vmlld1ZhbHVlKCdcIiArIHZhbCArIFwiJyk7IH0pO1wiO1xuICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTtcbiAgICAgIH1cblxuICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMy0xMCcpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnMjAxNS0wMScpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG4gICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gICAqL1xuICAnbW9udGgnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCdtb250aCcsIE1PTlRIX1JFR0VYUCxcbiAgICAgY3JlYXRlRGF0ZVBhcnNlcihNT05USF9SRUdFWFAsIFsneXl5eScsICdNTSddKSxcbiAgICAgJ3l5eXktTU0nKSxcblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W251bWJlcl1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRleHQgaW5wdXQgd2l0aCBudW1iZXIgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIFNldHMgdGhlIGBudW1iZXJgIHZhbGlkYXRpb25cbiAgICogZXJyb3IgaWYgbm90IGEgdmFsaWQgbnVtYmVyLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgb2YgdHlwZSBgbnVtYmVyYCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgKiBCZSBhd2FyZSB0aGF0IGEgc3RyaW5nIGNvbnRhaW5pbmcgYSBudW1iZXIgaXMgbm90IGVub3VnaC4gU2VlIHRoZSB7QGxpbmsgbmdNb2RlbDpudW1mbXR9XG4gICAqIGVycm9yIGRvY3MgZm9yIG1vcmUgaW5mb3JtYXRpb24gYW5kIGFuIGV4YW1wbGUgb2YgaG93IHRvIGNvbnZlcnQgeW91ciBtb2RlbCBpZiBuZWNlc3NhcnkuXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiAjIyBJc3N1ZXMgd2l0aCBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb25cbiAgICpcbiAgICogSW4gYnJvd3NlcnMgdGhhdCBmb2xsb3cgdGhlXG4gICAqIFtIVE1MNSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI251bWJlci1zdGF0ZS0lMjh0eXBlPW51bWJlciUyOSksXG4gICAqIGBpbnB1dFtudW1iZXJdYCBkb2VzIG5vdCB3b3JrIGFzIGV4cGVjdGVkIHdpdGgge0BsaW5rIG5nTW9kZWxPcHRpb25zIGBuZ01vZGVsT3B0aW9ucy5hbGxvd0ludmFsaWRgfS5cbiAgICogSWYgYSBub24tbnVtYmVyIGlzIGVudGVyZWQgaW4gdGhlIGlucHV0LCB0aGUgYnJvd3NlciB3aWxsIHJlcG9ydCB0aGUgdmFsdWUgYXMgYW4gZW1wdHkgc3RyaW5nLFxuICAgKiB3aGljaCBtZWFucyB0aGUgdmlldyAvIG1vZGVsIHZhbHVlcyBpbiBgbmdNb2RlbGAgYW5kIHN1YnNlcXVlbnRseSB0aGUgc2NvcGUgdmFsdWVcbiAgICogd2lsbCBhbHNvIGJlIGFuIGVtcHR5IHN0cmluZy5cbiAgICpcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW5cbiAgICogICAgbWlubGVuZ3RoLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXG4gICAqICAgIG1heGxlbmd0aC4gU2V0dGluZyB0aGUgYXR0cmlidXRlIHRvIGEgbmVnYXRpdmUgb3Igbm9uLW51bWVyaWMgdmFsdWUsIGFsbG93cyB2aWV3IHZhbHVlcyBvZlxuICAgKiAgICBhbnkgbGVuZ3RoLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHBhdHRlcm4gU2ltaWxhciB0byBgbmdQYXR0ZXJuYCBleGNlcHQgdGhhdCB0aGUgYXR0cmlidXRlIHZhbHVlIGlzIHRoZSBhY3R1YWwgc3RyaW5nXG4gICAqICAgIHRoYXQgY29udGFpbnMgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBib2R5IHRoYXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSByZWd1bGFyIGV4cHJlc3Npb25cbiAgICogICAgYXMgaW4gdGhlIG5nUGF0dGVybiBkaXJlY3RpdmUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBuZ01vZGVsIHZhbHVlIGRvZXMgbm90IG1hdGNoXG4gICAqICAgIGEgUmVnRXhwIGZvdW5kIGJ5IGV2YWx1YXRpbmcgdGhlIEFuZ3VsYXIgZXhwcmVzc2lvbiBnaXZlbiBpbiB0aGUgYXR0cmlidXRlIHZhbHVlLlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBSZWdFeHAgb2JqZWN0LCB0aGVuIHRoaXMgaXMgdXNlZCBkaXJlY3RseS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgc3RyaW5nLCB0aGVuIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgUmVnRXhwXG4gICAqICAgIGFmdGVyIHdyYXBwaW5nIGl0IGluIGBeYCBhbmQgYCRgIGNoYXJhY3RlcnMuIEZvciBpbnN0YW5jZSwgYFwiYWJjXCJgIHdpbGwgYmUgY29udmVydGVkIHRvXG4gICAqICAgIGBuZXcgUmVnRXhwKCdeYWJjJCcpYC48YnIgLz5cbiAgICogICAgKipOb3RlOioqIEF2b2lkIHVzaW5nIHRoZSBgZ2AgZmxhZyBvbiB0aGUgUmVnRXhwLCBhcyBpdCB3aWxsIGNhdXNlIGVhY2ggc3VjY2Vzc2l2ZSBzZWFyY2ggdG9cbiAgICogICAgc3RhcnQgYXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHNlYXJjaCdzIG1hdGNoLCB0aHVzIG5vdCB0YWtpbmcgdGhlIHdob2xlIGlucHV0IHZhbHVlIGludG9cbiAgICogICAgYWNjb3VudC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwibnVtYmVyLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cIm51bWJlckV4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdudW1iZXJFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5leGFtcGxlID0ge1xuICAgICAgICAgICAgICAgICB2YWx1ZTogMTJcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxsYWJlbD5OdW1iZXI6XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgICAgICAgICAgICBtaW49XCIwXCIgbWF4PVwiOTlcIiByZXF1aXJlZD5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5udW1iZXJcIj5cbiAgICAgICAgICAgICAgIE5vdCB2YWxpZCBudW1iZXIhPC9zcGFuPlxuICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgPHR0PnZhbHVlID0ge3tleGFtcGxlLnZhbHVlfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygnZXhhbXBsZS52YWx1ZScpKTtcbiAgICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnZXhhbXBsZS52YWx1ZScpKTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcxMicpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnMTIzJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgICovXG4gICdudW1iZXInOiBudW1iZXJJbnB1dFR5cGUsXG5cblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W3VybF1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRleHQgaW5wdXQgd2l0aCBVUkwgdmFsaWRhdGlvbi4gU2V0cyB0aGUgYHVybGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIGNvbnRlbnQgaXMgbm90IGFcbiAgICogdmFsaWQgVVJMLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAqKk5vdGU6KiogYGlucHV0W3VybF1gIHVzZXMgYSByZWdleCB0byB2YWxpZGF0ZSB1cmxzIHRoYXQgaXMgZGVyaXZlZCBmcm9tIHRoZSByZWdleFxuICAgKiB1c2VkIGluIENocm9taXVtLiBJZiB5b3UgbmVlZCBzdHJpY3RlciB2YWxpZGF0aW9uLCB5b3UgY2FuIHVzZSBgbmctcGF0dGVybmAgb3IgbW9kaWZ5XG4gICAqIHRoZSBidWlsdC1pbiB2YWxpZGF0b3JzIChzZWUgdGhlIHtAbGluayBndWlkZS9mb3JtcyBGb3JtcyBndWlkZX0pXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gICAqICAgIG1pbmxlbmd0aC5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICAgKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2ZcbiAgICogICAgYW55IGxlbmd0aC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwYXR0ZXJuIFNpbWlsYXIgdG8gYG5nUGF0dGVybmAgZXhjZXB0IHRoYXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBpcyB0aGUgYWN0dWFsIHN0cmluZ1xuICAgKiAgICB0aGF0IGNvbnRhaW5zIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYm9keSB0aGF0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgcmVndWxhciBleHByZXNzaW9uXG4gICAqICAgIGFzIGluIHRoZSBuZ1BhdHRlcm4gZGlyZWN0aXZlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgbmdNb2RlbCB2YWx1ZSBkb2VzIG5vdCBtYXRjaFxuICAgKiAgICBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCwgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cFxuICAgKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICAgKiAgICBgbmV3IFJlZ0V4cCgnXmFiYyQnKWAuPGJyIC8+XG4gICAqICAgICoqTm90ZToqKiBBdm9pZCB1c2luZyB0aGUgYGdgIGZsYWcgb24gdGhlIFJlZ0V4cCwgYXMgaXQgd2lsbCBjYXVzZSBlYWNoIHN1Y2Nlc3NpdmUgc2VhcmNoIHRvXG4gICAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gICAqICAgIGFjY291bnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cInVybC1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJ1cmxFeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgndXJsRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUudXJsID0ge1xuICAgICAgICAgICAgICAgICB0ZXh0OiAnaHR0cDovL2dvb2dsZS5jb20nXG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICA8bGFiZWw+VVJMOlxuICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidXJsXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJ1cmwudGV4dFwiIHJlcXVpcmVkPlxuICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnVybFwiPlxuICAgICAgICAgICAgICAgTm90IHZhbGlkIHVybCE8L3NwYW4+XG4gICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICA8dHQ+dGV4dCA9IHt7dXJsLnRleHR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci51cmwgPSB7eyEhbXlGb3JtLiRlcnJvci51cmx9fTwvdHQ+PGJyLz5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIHZhciB0ZXh0ID0gZWxlbWVudChieS5iaW5kaW5nKCd1cmwudGV4dCcpKTtcbiAgICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgndXJsLnRleHQnKSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9Db250YWluKCdodHRwOi8vZ29vZ2xlLmNvbScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9FcXVhbCgndGV4dCA9Jyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbm90IHVybCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCdib3gnKTtcblxuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAndXJsJzogdXJsSW5wdXRUeXBlLFxuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFtlbWFpbF1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRleHQgaW5wdXQgd2l0aCBlbWFpbCB2YWxpZGF0aW9uLiBTZXRzIHRoZSBgZW1haWxgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIG5vdCBhIHZhbGlkIGVtYWlsXG4gICAqIGFkZHJlc3MuXG4gICAqXG4gICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAqICoqTm90ZToqKiBgaW5wdXRbZW1haWxdYCB1c2VzIGEgcmVnZXggdG8gdmFsaWRhdGUgZW1haWwgYWRkcmVzc2VzIHRoYXQgaXMgZGVyaXZlZCBmcm9tIHRoZSByZWdleFxuICAgKiB1c2VkIGluIENocm9taXVtLiBJZiB5b3UgbmVlZCBzdHJpY3RlciB2YWxpZGF0aW9uIChlLmcuIHJlcXVpcmluZyBhIHRvcC1sZXZlbCBkb21haW4pLCB5b3UgY2FuXG4gICAqIHVzZSBgbmctcGF0dGVybmAgb3IgbW9kaWZ5IHRoZSBidWlsdC1pbiB2YWxpZGF0b3JzIChzZWUgdGhlIHtAbGluayBndWlkZS9mb3JtcyBGb3JtcyBndWlkZX0pXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gICAqICAgIG1pbmxlbmd0aC5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICAgKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2ZcbiAgICogICAgYW55IGxlbmd0aC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwYXR0ZXJuIFNpbWlsYXIgdG8gYG5nUGF0dGVybmAgZXhjZXB0IHRoYXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBpcyB0aGUgYWN0dWFsIHN0cmluZ1xuICAgKiAgICB0aGF0IGNvbnRhaW5zIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYm9keSB0aGF0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgcmVndWxhciBleHByZXNzaW9uXG4gICAqICAgIGFzIGluIHRoZSBuZ1BhdHRlcm4gZGlyZWN0aXZlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgbmdNb2RlbCB2YWx1ZSBkb2VzIG5vdCBtYXRjaFxuICAgKiAgICBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCwgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cFxuICAgKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICAgKiAgICBgbmV3IFJlZ0V4cCgnXmFiYyQnKWAuPGJyIC8+XG4gICAqICAgICoqTm90ZToqKiBBdm9pZCB1c2luZyB0aGUgYGdgIGZsYWcgb24gdGhlIFJlZ0V4cCwgYXMgaXQgd2lsbCBjYXVzZSBlYWNoIHN1Y2Nlc3NpdmUgc2VhcmNoIHRvXG4gICAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gICAqICAgIGFjY291bnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cImVtYWlsLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImVtYWlsRXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2VtYWlsRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUuZW1haWwgPSB7XG4gICAgICAgICAgICAgICAgIHRleHQ6ICdtZUBleGFtcGxlLmNvbSdcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgICA8bGFiZWw+RW1haWw6XG4gICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImVtYWlsXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJlbWFpbC50ZXh0XCIgcmVxdWlyZWQ+XG4gICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5lbWFpbFwiPlxuICAgICAgICAgICAgICAgICBOb3QgdmFsaWQgZW1haWwhPC9zcGFuPlxuICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgIDx0dD50ZXh0ID0ge3tlbWFpbC50ZXh0fX08L3R0Pjxici8+XG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLmVtYWlsID0ge3shIW15Rm9ybS4kZXJyb3IuZW1haWx9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgdmFyIHRleHQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2VtYWlsLnRleHQnKSk7XG4gICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2VtYWlsLnRleHQnKSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9Db250YWluKCdtZUBleGFtcGxlLmNvbScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7XG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3RleHQgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG5vdCBlbWFpbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCd4eHgnKTtcblxuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAnZW1haWwnOiBlbWFpbElucHV0VHlwZSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbcmFkaW9dXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBIVE1MIHJhZGlvIGJ1dHRvbi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBgbmdNb2RlbGAgZXhwcmVzc2lvbiBzaG91bGQgYmUgc2V0IHdoZW4gc2VsZWN0ZWQuXG4gICAqICAgIE5vdGUgdGhhdCBgdmFsdWVgIG9ubHkgc3VwcG9ydHMgYHN0cmluZ2AgdmFsdWVzLCBpLmUuIHRoZSBzY29wZSBtb2RlbCBuZWVkcyB0byBiZSBhIHN0cmluZyxcbiAgICogICAgdG9vLiBVc2UgYG5nVmFsdWVgIGlmIHlvdSBuZWVkIGNvbXBsZXggbW9kZWxzIChgbnVtYmVyYCwgYG9iamVjdGAsIC4uLikuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ1ZhbHVlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byB3aGljaCBgbmdNb2RlbGAgd2lsbCBiZSBiZSBzZXQgd2hlbiB0aGUgcmFkaW9cbiAgICogICAgaXMgc2VsZWN0ZWQuIFNob3VsZCBiZSB1c2VkIGluc3RlYWQgb2YgdGhlIGB2YWx1ZWAgYXR0cmlidXRlIGlmIHlvdSBuZWVkXG4gICAqICAgIGEgbm9uLXN0cmluZyBgbmdNb2RlbGAgKGBib29sZWFuYCwgYGFycmF5YCwgLi4uKS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJyYWRpby1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJyYWRpb0V4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdyYWRpb0V4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmNvbG9yID0ge1xuICAgICAgICAgICAgICAgICBuYW1lOiAnYmx1ZSdcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAkc2NvcGUuc3BlY2lhbFZhbHVlID0ge1xuICAgICAgICAgICAgICAgICBcImlkXCI6IFwiMTIzNDVcIixcbiAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcImdyZWVuXCJcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmctbW9kZWw9XCJjb2xvci5uYW1lXCIgdmFsdWU9XCJyZWRcIj5cbiAgICAgICAgICAgICBSZWRcbiAgICAgICAgICAgPC9sYWJlbD48YnIvPlxuICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwiY29sb3IubmFtZVwiIG5nLXZhbHVlPVwic3BlY2lhbFZhbHVlXCI+XG4gICAgICAgICAgICAgR3JlZW5cbiAgICAgICAgICAgPC9sYWJlbD48YnIvPlxuICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwiY29sb3IubmFtZVwiIHZhbHVlPVwiYmx1ZVwiPlxuICAgICAgICAgICAgIEJsdWVcbiAgICAgICAgICAgPC9sYWJlbD48YnIvPlxuICAgICAgICAgICA8dHQ+Y29sb3IgPSB7e2NvbG9yLm5hbWUgfCBqc29ufX08L3R0Pjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgIE5vdGUgdGhhdCBgbmctdmFsdWU9XCJzcGVjaWFsVmFsdWVcImAgc2V0cyByYWRpbyBpdGVtJ3MgdmFsdWUgdG8gYmUgdGhlIHZhbHVlIG9mIGAkc2NvcGUuc3BlY2lhbFZhbHVlYC5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2Ugc3RhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjb2xvciA9IGVsZW1lbnQoYnkuYmluZGluZygnY29sb3IubmFtZScpKTtcblxuICAgICAgICAgICAgZXhwZWN0KGNvbG9yLmdldFRleHQoKSkudG9Db250YWluKCdibHVlJyk7XG5cbiAgICAgICAgICAgIGVsZW1lbnQuYWxsKGJ5Lm1vZGVsKCdjb2xvci5uYW1lJykpLmdldCgwKS5jbGljaygpO1xuXG4gICAgICAgICAgICBleHBlY3QoY29sb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3JlZCcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAncmFkaW8nOiByYWRpb0lucHV0VHlwZSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbY2hlY2tib3hdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBIVE1MIGNoZWNrYm94LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtleHByZXNzaW9uPX0gbmdUcnVlVmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBleHByZXNzaW9uIHNob3VsZCBiZSBzZXQgd2hlbiBzZWxlY3RlZC5cbiAgICogQHBhcmFtIHtleHByZXNzaW9uPX0gbmdGYWxzZVZhbHVlIFRoZSB2YWx1ZSB0byB3aGljaCB0aGUgZXhwcmVzc2lvbiBzaG91bGQgYmUgc2V0IHdoZW4gbm90IHNlbGVjdGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJjaGVja2JveC1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJjaGVja2JveEV4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjaGVja2JveEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmNoZWNrYm94TW9kZWwgPSB7XG4gICAgICAgICAgICAgICAgdmFsdWUxIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTIgOiAnWUVTJ1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICA8bGFiZWw+VmFsdWUxOlxuICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrYm94TW9kZWwudmFsdWUxXCI+XG4gICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICAgPGxhYmVsPlZhbHVlMjpcbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2JveE1vZGVsLnZhbHVlMlwiXG4gICAgICAgICAgICAgICAgICAgIG5nLXRydWUtdmFsdWU9XCInWUVTJ1wiIG5nLWZhbHNlLXZhbHVlPVwiJ05PJ1wiPlxuICAgICAgICAgICAgPC9sYWJlbD48YnIvPlxuICAgICAgICAgICA8dHQ+dmFsdWUxID0ge3tjaGVja2JveE1vZGVsLnZhbHVlMX19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+dmFsdWUyID0ge3tjaGVja2JveE1vZGVsLnZhbHVlMn19PC90dD48YnIvPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2Ugc3RhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZTEgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2NoZWNrYm94TW9kZWwudmFsdWUxJykpO1xuICAgICAgICAgICAgdmFyIHZhbHVlMiA9IGVsZW1lbnQoYnkuYmluZGluZygnY2hlY2tib3hNb2RlbC52YWx1ZTInKSk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZTEuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZTIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ1lFUycpO1xuXG4gICAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2JveE1vZGVsLnZhbHVlMScpKS5jbGljaygpO1xuICAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tib3hNb2RlbC52YWx1ZTInKSkuY2xpY2soKTtcblxuICAgICAgICAgICAgZXhwZWN0KHZhbHVlMS5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZTIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ05PJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgICovXG4gICdjaGVja2JveCc6IGNoZWNrYm94SW5wdXRUeXBlLFxuXG4gICdoaWRkZW4nOiBub29wLFxuICAnYnV0dG9uJzogbm9vcCxcbiAgJ3N1Ym1pdCc6IG5vb3AsXG4gICdyZXNldCc6IG5vb3AsXG4gICdmaWxlJzogbm9vcFxufTtcblxuZnVuY3Rpb24gc3RyaW5nQmFzZWRJbnB1dFR5cGUoY3RybCkge1xuICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgPyB2YWx1ZSA6IHZhbHVlLnRvU3RyaW5nKCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0ZXh0SW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHtcbiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcbiAgc3RyaW5nQmFzZWRJbnB1dFR5cGUoY3RybCk7XG59XG5cbmZ1bmN0aW9uIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcikge1xuICB2YXIgdHlwZSA9IGxvd2VyY2FzZShlbGVtZW50WzBdLnR5cGUpO1xuXG4gIC8vIEluIGNvbXBvc2l0aW9uIG1vZGUsIHVzZXJzIGFyZSBzdGlsbCBpbnB1dGluZyBpbnRlcm1lZGlhdGUgdGV4dCBidWZmZXIsXG4gIC8vIGhvbGQgdGhlIGxpc3RlbmVyIHVudGlsIGNvbXBvc2l0aW9uIGlzIGRvbmUuXG4gIC8vIE1vcmUgYWJvdXQgY29tcG9zaXRpb24gZXZlbnRzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ29tcG9zaXRpb25FdmVudFxuICBpZiAoISRzbmlmZmVyLmFuZHJvaWQpIHtcbiAgICB2YXIgY29tcG9zaW5nID0gZmFsc2U7XG5cbiAgICBlbGVtZW50Lm9uKCdjb21wb3NpdGlvbnN0YXJ0JywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgY29tcG9zaW5nID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIGVsZW1lbnQub24oJ2NvbXBvc2l0aW9uZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICBjb21wb3NpbmcgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbihldikge1xuICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAkYnJvd3Nlci5kZWZlci5jYW5jZWwodGltZW91dCk7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGNvbXBvc2luZykgcmV0dXJuO1xuICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQudmFsKCksXG4gICAgICAgIGV2ZW50ID0gZXYgJiYgZXYudHlwZTtcblxuICAgIC8vIEJ5IGRlZmF1bHQgd2Ugd2lsbCB0cmltIHRoZSB2YWx1ZVxuICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgbmctdHJpbSBleGlzdHMgd2Ugd2lsbCBhdm9pZCB0cmltbWluZ1xuICAgIC8vIElmIGlucHV0IHR5cGUgaXMgJ3Bhc3N3b3JkJywgdGhlIHZhbHVlIGlzIG5ldmVyIHRyaW1tZWRcbiAgICBpZiAodHlwZSAhPT0gJ3Bhc3N3b3JkJyAmJiAoIWF0dHIubmdUcmltIHx8IGF0dHIubmdUcmltICE9PSAnZmFsc2UnKSkge1xuICAgICAgdmFsdWUgPSB0cmltKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBJZiBhIGNvbnRyb2wgaXMgc3VmZmVyaW5nIGZyb20gYmFkIGlucHV0IChkdWUgdG8gbmF0aXZlIHZhbGlkYXRvcnMpLCBicm93c2VycyBkaXNjYXJkIGl0c1xuICAgIC8vIHZhbHVlLCBzbyBpdCBtYXkgYmUgbmVjZXNzYXJ5IHRvIHJldmFsaWRhdGUgKGJ5IGNhbGxpbmcgJHNldFZpZXdWYWx1ZSBhZ2FpbikgZXZlbiBpZiB0aGVcbiAgICAvLyBjb250cm9sJ3MgdmFsdWUgaXMgdGhlIHNhbWUgZW1wdHkgdmFsdWUgdHdpY2UgaW4gYSByb3cuXG4gICAgaWYgKGN0cmwuJHZpZXdWYWx1ZSAhPT0gdmFsdWUgfHwgKHZhbHVlID09PSAnJyAmJiBjdHJsLiQkaGFzTmF0aXZlVmFsaWRhdG9ycykpIHtcbiAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZSh2YWx1ZSwgZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICAvLyBpZiB0aGUgYnJvd3NlciBkb2VzIHN1cHBvcnQgXCJpbnB1dFwiIGV2ZW50LCB3ZSBhcmUgZmluZSAtIGV4Y2VwdCBvbiBJRTkgd2hpY2ggZG9lc24ndCBmaXJlIHRoZVxuICAvLyBpbnB1dCBldmVudCBvbiBiYWNrc3BhY2UsIGRlbGV0ZSBvciBjdXRcbiAgaWYgKCRzbmlmZmVyLmhhc0V2ZW50KCdpbnB1dCcpKSB7XG4gICAgZWxlbWVudC5vbignaW5wdXQnLCBsaXN0ZW5lcik7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRpbWVvdXQ7XG5cbiAgICB2YXIgZGVmZXJMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2LCBpbnB1dCwgb3JpZ1ZhbHVlKSB7XG4gICAgICBpZiAoIXRpbWVvdXQpIHtcbiAgICAgICAgdGltZW91dCA9ICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgIGlmICghaW5wdXQgfHwgaW5wdXQudmFsdWUgIT09IG9yaWdWYWx1ZSkge1xuICAgICAgICAgICAgbGlzdGVuZXIoZXYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGVsZW1lbnQub24oJ2tleWRvd24nLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgdmFyIGtleSA9IGV2ZW50LmtleUNvZGU7XG5cbiAgICAgIC8vIGlnbm9yZVxuICAgICAgLy8gICAgY29tbWFuZCAgICAgICAgICAgIG1vZGlmaWVycyAgICAgICAgICAgICAgICAgICBhcnJvd3NcbiAgICAgIGlmIChrZXkgPT09IDkxIHx8ICgxNSA8IGtleSAmJiBrZXkgPCAxOSkgfHwgKDM3IDw9IGtleSAmJiBrZXkgPD0gNDApKSByZXR1cm47XG5cbiAgICAgIGRlZmVyTGlzdGVuZXIoZXZlbnQsIHRoaXMsIHRoaXMudmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLy8gaWYgdXNlciBtb2RpZmllcyBpbnB1dCB2YWx1ZSB1c2luZyBjb250ZXh0IG1lbnUgaW4gSUUsIHdlIG5lZWQgXCJwYXN0ZVwiIGFuZCBcImN1dFwiIGV2ZW50cyB0byBjYXRjaCBpdFxuICAgIGlmICgkc25pZmZlci5oYXNFdmVudCgncGFzdGUnKSkge1xuICAgICAgZWxlbWVudC5vbigncGFzdGUgY3V0JywgZGVmZXJMaXN0ZW5lcik7XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdXNlciBwYXN0ZSBpbnRvIGlucHV0IHVzaW5nIG1vdXNlIG9uIG9sZGVyIGJyb3dzZXJcbiAgLy8gb3IgZm9ybSBhdXRvY29tcGxldGUgb24gbmV3ZXIgYnJvd3Nlciwgd2UgbmVlZCBcImNoYW5nZVwiIGV2ZW50IHRvIGNhdGNoIGl0XG4gIGVsZW1lbnQub24oJ2NoYW5nZScsIGxpc3RlbmVyKTtcblxuICBjdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBXb3JrYXJvdW5kIGZvciBGaXJlZm94IHZhbGlkYXRpb24gIzEyMTAyLlxuICAgIHZhciB2YWx1ZSA9IGN0cmwuJGlzRW1wdHkoY3RybC4kdmlld1ZhbHVlKSA/ICcnIDogY3RybC4kdmlld1ZhbHVlO1xuICAgIGlmIChlbGVtZW50LnZhbCgpICE9PSB2YWx1ZSkge1xuICAgICAgZWxlbWVudC52YWwodmFsdWUpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gd2Vla1BhcnNlcihpc29XZWVrLCBleGlzdGluZ0RhdGUpIHtcbiAgaWYgKGlzRGF0ZShpc29XZWVrKSkge1xuICAgIHJldHVybiBpc29XZWVrO1xuICB9XG5cbiAgaWYgKGlzU3RyaW5nKGlzb1dlZWspKSB7XG4gICAgV0VFS19SRUdFWFAubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgcGFydHMgPSBXRUVLX1JFR0VYUC5leGVjKGlzb1dlZWspO1xuICAgIGlmIChwYXJ0cykge1xuICAgICAgdmFyIHllYXIgPSArcGFydHNbMV0sXG4gICAgICAgICAgd2VlayA9ICtwYXJ0c1syXSxcbiAgICAgICAgICBob3VycyA9IDAsXG4gICAgICAgICAgbWludXRlcyA9IDAsXG4gICAgICAgICAgc2Vjb25kcyA9IDAsXG4gICAgICAgICAgbWlsbGlzZWNvbmRzID0gMCxcbiAgICAgICAgICBmaXJzdFRodXJzID0gZ2V0Rmlyc3RUaHVyc2RheU9mWWVhcih5ZWFyKSxcbiAgICAgICAgICBhZGREYXlzID0gKHdlZWsgLSAxKSAqIDc7XG5cbiAgICAgIGlmIChleGlzdGluZ0RhdGUpIHtcbiAgICAgICAgaG91cnMgPSBleGlzdGluZ0RhdGUuZ2V0SG91cnMoKTtcbiAgICAgICAgbWludXRlcyA9IGV4aXN0aW5nRGF0ZS5nZXRNaW51dGVzKCk7XG4gICAgICAgIHNlY29uZHMgPSBleGlzdGluZ0RhdGUuZ2V0U2Vjb25kcygpO1xuICAgICAgICBtaWxsaXNlY29uZHMgPSBleGlzdGluZ0RhdGUuZ2V0TWlsbGlzZWNvbmRzKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCAwLCBmaXJzdFRodXJzLmdldERhdGUoKSArIGFkZERheXMsIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBtaWxsaXNlY29uZHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBOYU47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURhdGVQYXJzZXIocmVnZXhwLCBtYXBwaW5nKSB7XG4gIHJldHVybiBmdW5jdGlvbihpc28sIGRhdGUpIHtcbiAgICB2YXIgcGFydHMsIG1hcDtcblxuICAgIGlmIChpc0RhdGUoaXNvKSkge1xuICAgICAgcmV0dXJuIGlzbztcbiAgICB9XG5cbiAgICBpZiAoaXNTdHJpbmcoaXNvKSkge1xuICAgICAgLy8gV2hlbiBhIGRhdGUgaXMgSlNPTidpZmllZCB0byB3cmFwcyBpdHNlbGYgaW5zaWRlIG9mIGFuIGV4dHJhXG4gICAgICAvLyBzZXQgb2YgZG91YmxlIHF1b3Rlcy4gVGhpcyBtYWtlcyB0aGUgZGF0ZSBwYXJzaW5nIGNvZGUgdW5hYmxlXG4gICAgICAvLyB0byBtYXRjaCB0aGUgZGF0ZSBzdHJpbmcgYW5kIHBhcnNlIGl0IGFzIGEgZGF0ZS5cbiAgICAgIGlmIChpc28uY2hhckF0KDApID09ICdcIicgJiYgaXNvLmNoYXJBdChpc28ubGVuZ3RoIC0gMSkgPT0gJ1wiJykge1xuICAgICAgICBpc28gPSBpc28uc3Vic3RyaW5nKDEsIGlzby5sZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChJU09fREFURV9SRUdFWFAudGVzdChpc28pKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShpc28pO1xuICAgICAgfVxuICAgICAgcmVnZXhwLmxhc3RJbmRleCA9IDA7XG4gICAgICBwYXJ0cyA9IHJlZ2V4cC5leGVjKGlzbyk7XG5cbiAgICAgIGlmIChwYXJ0cykge1xuICAgICAgICBwYXJ0cy5zaGlmdCgpO1xuICAgICAgICBpZiAoZGF0ZSkge1xuICAgICAgICAgIG1hcCA9IHtcbiAgICAgICAgICAgIHl5eXk6IGRhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICAgIE1NOiBkYXRlLmdldE1vbnRoKCkgKyAxLFxuICAgICAgICAgICAgZGQ6IGRhdGUuZ2V0RGF0ZSgpLFxuICAgICAgICAgICAgSEg6IGRhdGUuZ2V0SG91cnMoKSxcbiAgICAgICAgICAgIG1tOiBkYXRlLmdldE1pbnV0ZXMoKSxcbiAgICAgICAgICAgIHNzOiBkYXRlLmdldFNlY29uZHMoKSxcbiAgICAgICAgICAgIHNzczogZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAvIDEwMDBcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hcCA9IHsgeXl5eTogMTk3MCwgTU06IDEsIGRkOiAxLCBISDogMCwgbW06IDAsIHNzOiAwLCBzc3M6IDAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvckVhY2gocGFydHMsIGZ1bmN0aW9uKHBhcnQsIGluZGV4KSB7XG4gICAgICAgICAgaWYgKGluZGV4IDwgbWFwcGluZy5sZW5ndGgpIHtcbiAgICAgICAgICAgIG1hcFttYXBwaW5nW2luZGV4XV0gPSArcGFydDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IERhdGUobWFwLnl5eXksIG1hcC5NTSAtIDEsIG1hcC5kZCwgbWFwLkhILCBtYXAubW0sIG1hcC5zcyB8fCAwLCBtYXAuc3NzICogMTAwMCB8fCAwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gTmFOO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEYXRlSW5wdXRUeXBlKHR5cGUsIHJlZ2V4cCwgcGFyc2VEYXRlLCBmb3JtYXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGR5bmFtaWNEYXRlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIsICRmaWx0ZXIpIHtcbiAgICBiYWRJbnB1dENoZWNrZXIoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpO1xuICAgIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG4gICAgdmFyIHRpbWV6b25lID0gY3RybCAmJiBjdHJsLiRvcHRpb25zICYmIGN0cmwuJG9wdGlvbnMudGltZXpvbmU7XG4gICAgdmFyIHByZXZpb3VzRGF0ZTtcblxuICAgIGN0cmwuJCRwYXJzZXJOYW1lID0gdHlwZTtcbiAgICBjdHJsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmIChjdHJsLiRpc0VtcHR5KHZhbHVlKSkgcmV0dXJuIG51bGw7XG4gICAgICBpZiAocmVnZXhwLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIC8vIE5vdGU6IFdlIGNhbm5vdCByZWFkIGN0cmwuJG1vZGVsVmFsdWUsIGFzIHRoZXJlIG1pZ2h0IGJlIGEgZGlmZmVyZW50XG4gICAgICAgIC8vIHBhcnNlci9mb3JtYXR0ZXIgaW4gdGhlIHByb2Nlc3NpbmcgY2hhaW4gc28gdGhhdCB0aGUgbW9kZWxcbiAgICAgICAgLy8gY29udGFpbnMgc29tZSBkaWZmZXJlbnQgZGF0YSBmb3JtYXQhXG4gICAgICAgIHZhciBwYXJzZWREYXRlID0gcGFyc2VEYXRlKHZhbHVlLCBwcmV2aW91c0RhdGUpO1xuICAgICAgICBpZiAodGltZXpvbmUpIHtcbiAgICAgICAgICBwYXJzZWREYXRlID0gY29udmVydFRpbWV6b25lVG9Mb2NhbChwYXJzZWREYXRlLCB0aW1lem9uZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlZERhdGU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0pO1xuXG4gICAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgJiYgIWlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmdNb2RlbE1pbkVycignZGF0ZWZtdCcsICdFeHBlY3RlZCBgezB9YCB0byBiZSBhIGRhdGUnLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNWYWxpZERhdGUodmFsdWUpKSB7XG4gICAgICAgIHByZXZpb3VzRGF0ZSA9IHZhbHVlO1xuICAgICAgICBpZiAocHJldmlvdXNEYXRlICYmIHRpbWV6b25lKSB7XG4gICAgICAgICAgcHJldmlvdXNEYXRlID0gY29udmVydFRpbWV6b25lVG9Mb2NhbChwcmV2aW91c0RhdGUsIHRpbWV6b25lLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJGZpbHRlcignZGF0ZScpKHZhbHVlLCBmb3JtYXQsIHRpbWV6b25lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByZXZpb3VzRGF0ZSA9IG51bGw7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChpc0RlZmluZWQoYXR0ci5taW4pIHx8IGF0dHIubmdNaW4pIHtcbiAgICAgIHZhciBtaW5WYWw7XG4gICAgICBjdHJsLiR2YWxpZGF0b3JzLm1pbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhaXNWYWxpZERhdGUodmFsdWUpIHx8IGlzVW5kZWZpbmVkKG1pblZhbCkgfHwgcGFyc2VEYXRlKHZhbHVlKSA+PSBtaW5WYWw7XG4gICAgICB9O1xuICAgICAgYXR0ci4kb2JzZXJ2ZSgnbWluJywgZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIG1pblZhbCA9IHBhcnNlT2JzZXJ2ZWREYXRlVmFsdWUodmFsKTtcbiAgICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChpc0RlZmluZWQoYXR0ci5tYXgpIHx8IGF0dHIubmdNYXgpIHtcbiAgICAgIHZhciBtYXhWYWw7XG4gICAgICBjdHJsLiR2YWxpZGF0b3JzLm1heCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhaXNWYWxpZERhdGUodmFsdWUpIHx8IGlzVW5kZWZpbmVkKG1heFZhbCkgfHwgcGFyc2VEYXRlKHZhbHVlKSA8PSBtYXhWYWw7XG4gICAgICB9O1xuICAgICAgYXR0ci4kb2JzZXJ2ZSgnbWF4JywgZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIG1heFZhbCA9IHBhcnNlT2JzZXJ2ZWREYXRlVmFsdWUodmFsKTtcbiAgICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWREYXRlKHZhbHVlKSB7XG4gICAgICAvLyBJbnZhbGlkIERhdGU6IGdldFRpbWUoKSByZXR1cm5zIE5hTlxuICAgICAgcmV0dXJuIHZhbHVlICYmICEodmFsdWUuZ2V0VGltZSAmJiB2YWx1ZS5nZXRUaW1lKCkgIT09IHZhbHVlLmdldFRpbWUoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VPYnNlcnZlZERhdGVWYWx1ZSh2YWwpIHtcbiAgICAgIHJldHVybiBpc0RlZmluZWQodmFsKSAmJiAhaXNEYXRlKHZhbCkgPyBwYXJzZURhdGUodmFsKSB8fCB1bmRlZmluZWQgOiB2YWw7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBiYWRJbnB1dENoZWNrZXIoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHtcbiAgdmFyIG5vZGUgPSBlbGVtZW50WzBdO1xuICB2YXIgbmF0aXZlVmFsaWRhdGlvbiA9IGN0cmwuJCRoYXNOYXRpdmVWYWxpZGF0b3JzID0gaXNPYmplY3Qobm9kZS52YWxpZGl0eSk7XG4gIGlmIChuYXRpdmVWYWxpZGF0aW9uKSB7XG4gICAgY3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgdmFsaWRpdHkgPSBlbGVtZW50LnByb3AoVkFMSURJVFlfU1RBVEVfUFJPUEVSVFkpIHx8IHt9O1xuICAgICAgLy8gRGV0ZWN0IGJ1ZyBpbiBGRjM1IGZvciBpbnB1dFtlbWFpbF0gKGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEwNjQ0MzApOlxuICAgICAgLy8gLSBhbHNvIHNldHMgdmFsaWRpdHkuYmFkSW5wdXQgKHNob3VsZCBvbmx5IGJlIHZhbGlkaXR5LnR5cGVNaXNtYXRjaCkuXG4gICAgICAvLyAtIHNlZSBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9mb3Jtcy5odG1sI2UtbWFpbC1zdGF0ZS0odHlwZT1lbWFpbClcbiAgICAgIC8vIC0gY2FuIGlnbm9yZSB0aGlzIGNhc2UgYXMgd2UgY2FuIHN0aWxsIHJlYWQgb3V0IHRoZSBlcnJvbmVvdXMgZW1haWwuLi5cbiAgICAgIHJldHVybiB2YWxpZGl0eS5iYWRJbnB1dCAmJiAhdmFsaWRpdHkudHlwZU1pc21hdGNoID8gdW5kZWZpbmVkIDogdmFsdWU7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbnVtYmVySW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHtcbiAgYmFkSW5wdXRDaGVja2VyKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKTtcbiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcblxuICBjdHJsLiQkcGFyc2VyTmFtZSA9ICdudW1iZXInO1xuICBjdHJsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoY3RybC4kaXNFbXB0eSh2YWx1ZSkpICAgICAgcmV0dXJuIG51bGw7XG4gICAgaWYgKE5VTUJFUl9SRUdFWFAudGVzdCh2YWx1ZSkpIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9KTtcblxuICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoIWN0cmwuJGlzRW1wdHkodmFsdWUpKSB7XG4gICAgICBpZiAoIWlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZ01vZGVsTWluRXJyKCdudW1mbXQnLCAnRXhwZWN0ZWQgYHswfWAgdG8gYmUgYSBudW1iZXInLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSk7XG5cbiAgaWYgKGlzRGVmaW5lZChhdHRyLm1pbikgfHwgYXR0ci5uZ01pbikge1xuICAgIHZhciBtaW5WYWw7XG4gICAgY3RybC4kdmFsaWRhdG9ycy5taW4gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IGlzVW5kZWZpbmVkKG1pblZhbCkgfHwgdmFsdWUgPj0gbWluVmFsO1xuICAgIH07XG5cbiAgICBhdHRyLiRvYnNlcnZlKCdtaW4nLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmIChpc0RlZmluZWQodmFsKSAmJiAhaXNOdW1iZXIodmFsKSkge1xuICAgICAgICB2YWwgPSBwYXJzZUZsb2F0KHZhbCwgMTApO1xuICAgICAgfVxuICAgICAgbWluVmFsID0gaXNOdW1iZXIodmFsKSAmJiAhaXNOYU4odmFsKSA/IHZhbCA6IHVuZGVmaW5lZDtcbiAgICAgIC8vIFRPRE8obWF0c2tvKTogaW1wbGVtZW50IHZhbGlkYXRlTGF0ZXIgdG8gcmVkdWNlIG51bWJlciBvZiB2YWxpZGF0aW9uc1xuICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChpc0RlZmluZWQoYXR0ci5tYXgpIHx8IGF0dHIubmdNYXgpIHtcbiAgICB2YXIgbWF4VmFsO1xuICAgIGN0cmwuJHZhbGlkYXRvcnMubWF4ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBpc1VuZGVmaW5lZChtYXhWYWwpIHx8IHZhbHVlIDw9IG1heFZhbDtcbiAgICB9O1xuXG4gICAgYXR0ci4kb2JzZXJ2ZSgnbWF4JywgZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAoaXNEZWZpbmVkKHZhbCkgJiYgIWlzTnVtYmVyKHZhbCkpIHtcbiAgICAgICAgdmFsID0gcGFyc2VGbG9hdCh2YWwsIDEwKTtcbiAgICAgIH1cbiAgICAgIG1heFZhbCA9IGlzTnVtYmVyKHZhbCkgJiYgIWlzTmFOKHZhbCkgPyB2YWwgOiB1bmRlZmluZWQ7XG4gICAgICAvLyBUT0RPKG1hdHNrbyk6IGltcGxlbWVudCB2YWxpZGF0ZUxhdGVyIHRvIHJlZHVjZSBudW1iZXIgb2YgdmFsaWRhdGlvbnNcbiAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXJsSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHtcbiAgLy8gTm90ZTogbm8gYmFkSW5wdXRDaGVja2VyIGhlcmUgYnkgcHVycG9zZSBhcyBgdXJsYCBpcyBvbmx5IGEgdmFsaWRhdGlvblxuICAvLyBpbiBicm93c2VycywgaS5lLiB3ZSBjYW4gYWx3YXlzIHJlYWQgb3V0IGlucHV0LnZhbHVlIGV2ZW4gaWYgaXQgaXMgbm90IHZhbGlkIVxuICBiYXNlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpO1xuICBzdHJpbmdCYXNlZElucHV0VHlwZShjdHJsKTtcblxuICBjdHJsLiQkcGFyc2VyTmFtZSA9ICd1cmwnO1xuICBjdHJsLiR2YWxpZGF0b3JzLnVybCA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgIHZhciB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBVUkxfUkVHRVhQLnRlc3QodmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBlbWFpbElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIC8vIE5vdGU6IG5vIGJhZElucHV0Q2hlY2tlciBoZXJlIGJ5IHB1cnBvc2UgYXMgYHVybGAgaXMgb25seSBhIHZhbGlkYXRpb25cbiAgLy8gaW4gYnJvd3NlcnMsIGkuZS4gd2UgY2FuIGFsd2F5cyByZWFkIG91dCBpbnB1dC52YWx1ZSBldmVuIGlmIGl0IGlzIG5vdCB2YWxpZCFcbiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcbiAgc3RyaW5nQmFzZWRJbnB1dFR5cGUoY3RybCk7XG5cbiAgY3RybC4kJHBhcnNlck5hbWUgPSAnZW1haWwnO1xuICBjdHJsLiR2YWxpZGF0b3JzLmVtYWlsID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgdmFyIHZhbHVlID0gbW9kZWxWYWx1ZSB8fCB2aWV3VmFsdWU7XG4gICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IEVNQUlMX1JFR0VYUC50ZXN0KHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmFkaW9JbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHtcbiAgLy8gbWFrZSB0aGUgbmFtZSB1bmlxdWUsIGlmIG5vdCBkZWZpbmVkXG4gIGlmIChpc1VuZGVmaW5lZChhdHRyLm5hbWUpKSB7XG4gICAgZWxlbWVudC5hdHRyKCduYW1lJywgbmV4dFVpZCgpKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgaWYgKGVsZW1lbnRbMF0uY2hlY2tlZCkge1xuICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKGF0dHIudmFsdWUsIGV2ICYmIGV2LnR5cGUpO1xuICAgIH1cbiAgfTtcblxuICBlbGVtZW50Lm9uKCdjbGljaycsIGxpc3RlbmVyKTtcblxuICBjdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBhdHRyLnZhbHVlO1xuICAgIGVsZW1lbnRbMF0uY2hlY2tlZCA9ICh2YWx1ZSA9PSBjdHJsLiR2aWV3VmFsdWUpO1xuICB9O1xuXG4gIGF0dHIuJG9ic2VydmUoJ3ZhbHVlJywgY3RybC4kcmVuZGVyKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VDb25zdGFudEV4cHIoJHBhcnNlLCBjb250ZXh0LCBuYW1lLCBleHByZXNzaW9uLCBmYWxsYmFjaykge1xuICB2YXIgcGFyc2VGbjtcbiAgaWYgKGlzRGVmaW5lZChleHByZXNzaW9uKSkge1xuICAgIHBhcnNlRm4gPSAkcGFyc2UoZXhwcmVzc2lvbik7XG4gICAgaWYgKCFwYXJzZUZuLmNvbnN0YW50KSB7XG4gICAgICB0aHJvdyBuZ01vZGVsTWluRXJyKCdjb25zdGV4cHInLCAnRXhwZWN0ZWQgY29uc3RhbnQgZXhwcmVzc2lvbiBmb3IgYHswfWAsIGJ1dCBzYXcgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdgezF9YC4nLCBuYW1lLCBleHByZXNzaW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlRm4oY29udGV4dCk7XG4gIH1cbiAgcmV0dXJuIGZhbGxiYWNrO1xufVxuXG5mdW5jdGlvbiBjaGVja2JveElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyLCAkZmlsdGVyLCAkcGFyc2UpIHtcbiAgdmFyIHRydWVWYWx1ZSA9IHBhcnNlQ29uc3RhbnRFeHByKCRwYXJzZSwgc2NvcGUsICduZ1RydWVWYWx1ZScsIGF0dHIubmdUcnVlVmFsdWUsIHRydWUpO1xuICB2YXIgZmFsc2VWYWx1ZSA9IHBhcnNlQ29uc3RhbnRFeHByKCRwYXJzZSwgc2NvcGUsICduZ0ZhbHNlVmFsdWUnLCBhdHRyLm5nRmFsc2VWYWx1ZSwgZmFsc2UpO1xuXG4gIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgY3RybC4kc2V0Vmlld1ZhbHVlKGVsZW1lbnRbMF0uY2hlY2tlZCwgZXYgJiYgZXYudHlwZSk7XG4gIH07XG5cbiAgZWxlbWVudC5vbignY2xpY2snLCBsaXN0ZW5lcik7XG5cbiAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgZWxlbWVudFswXS5jaGVja2VkID0gY3RybC4kdmlld1ZhbHVlO1xuICB9O1xuXG4gIC8vIE92ZXJyaWRlIHRoZSBzdGFuZGFyZCBgJGlzRW1wdHlgIGJlY2F1c2UgdGhlICR2aWV3VmFsdWUgb2YgYW4gZW1wdHkgY2hlY2tib3ggaXMgYWx3YXlzIHNldCB0byBgZmFsc2VgXG4gIC8vIFRoaXMgaXMgYmVjYXVzZSBvZiB0aGUgcGFyc2VyIGJlbG93LCB3aGljaCBjb21wYXJlcyB0aGUgYCRtb2RlbFZhbHVlYCB3aXRoIGB0cnVlVmFsdWVgIHRvIGNvbnZlcnRcbiAgLy8gaXQgdG8gYSBib29sZWFuLlxuICBjdHJsLiRpc0VtcHR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IGZhbHNlO1xuICB9O1xuXG4gIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBlcXVhbHModmFsdWUsIHRydWVWYWx1ZSk7XG4gIH0pO1xuXG4gIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA/IHRydWVWYWx1ZSA6IGZhbHNlVmFsdWU7XG4gIH0pO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgdGV4dGFyZWFcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIVE1MIHRleHRhcmVhIGVsZW1lbnQgY29udHJvbCB3aXRoIGFuZ3VsYXIgZGF0YS1iaW5kaW5nLiBUaGUgZGF0YS1iaW5kaW5nIGFuZCB2YWxpZGF0aW9uXG4gKiBwcm9wZXJ0aWVzIG9mIHRoaXMgZWxlbWVudCBhcmUgZXhhY3RseSB0aGUgc2FtZSBhcyB0aG9zZSBvZiB0aGVcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQgaW5wdXQgZWxlbWVudH0uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICogICAgbWlubGVuZ3RoLlxuICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mIGFueVxuICogICAgbGVuZ3RoLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIG5nTW9kZWwgdmFsdWUgZG9lcyBub3QgbWF0Y2hcbiAqICAgIGEgUmVnRXhwIGZvdW5kIGJ5IGV2YWx1YXRpbmcgdGhlIEFuZ3VsYXIgZXhwcmVzc2lvbiBnaXZlbiBpbiB0aGUgYXR0cmlidXRlIHZhbHVlLlxuICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCwgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHBcbiAqICAgIGFmdGVyIHdyYXBwaW5nIGl0IGluIGBeYCBhbmQgYCRgIGNoYXJhY3RlcnMuIEZvciBpbnN0YW5jZSwgYFwiYWJjXCJgIHdpbGwgYmUgY29udmVydGVkIHRvXG4gKiAgICBgbmV3IFJlZ0V4cCgnXmFiYyQnKWAuPGJyIC8+XG4gKiAgICAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICogICAgc3RhcnQgYXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHNlYXJjaCdzIG1hdGNoLCB0aHVzIG5vdCB0YWtpbmcgdGhlIHdob2xlIGlucHV0IHZhbHVlIGludG9cbiAqICAgIGFjY291bnQuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBbbmdUcmltPXRydWVdIElmIHNldCB0byBmYWxzZSBBbmd1bGFyIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgdHJpbSB0aGUgaW5wdXQuXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIGlucHV0XG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSFRNTCBpbnB1dCBlbGVtZW50IGNvbnRyb2wuIFdoZW4gdXNlZCB0b2dldGhlciB3aXRoIHtAbGluayBuZ01vZGVsIGBuZ01vZGVsYH0sIGl0IHByb3ZpZGVzIGRhdGEtYmluZGluZyxcbiAqIGlucHV0IHN0YXRlIGNvbnRyb2wsIGFuZCB2YWxpZGF0aW9uLlxuICogSW5wdXQgY29udHJvbCBmb2xsb3dzIEhUTUw1IGlucHV0IHR5cGVzIGFuZCBwb2x5ZmlsbHMgdGhlIEhUTUw1IHZhbGlkYXRpb24gYmVoYXZpb3IgZm9yIG9sZGVyIGJyb3dzZXJzLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogTm90IGV2ZXJ5IGZlYXR1cmUgb2ZmZXJlZCBpcyBhdmFpbGFibGUgZm9yIGFsbCBpbnB1dCB0eXBlcy5cbiAqIFNwZWNpZmljYWxseSwgZGF0YSBiaW5kaW5nIGFuZCBldmVudCBoYW5kbGluZyB2aWEgYG5nLW1vZGVsYCBpcyB1bnN1cHBvcnRlZCBmb3IgYGlucHV0W2ZpbGVdYC5cbiAqIDwvZGl2PlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG5nUmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBpZiBzZXQgdG8gdHJ1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW5cbiAqICAgIG1pbmxlbmd0aC5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cbiAqICAgIG1heGxlbmd0aC4gU2V0dGluZyB0aGUgYXR0cmlidXRlIHRvIGEgbmVnYXRpdmUgb3Igbm9uLW51bWVyaWMgdmFsdWUsIGFsbG93cyB2aWV3IHZhbHVlcyBvZiBhbnlcbiAqICAgIGxlbmd0aC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBuZ01vZGVsIHZhbHVlIGRvZXMgbm90IG1hdGNoXG4gKiAgICBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgc3RyaW5nLCB0aGVuIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgUmVnRXhwXG4gKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICogICAgYG5ldyBSZWdFeHAoJ15hYmMkJylgLjxiciAvPlxuICogICAgKipOb3RlOioqIEF2b2lkIHVzaW5nIHRoZSBgZ2AgZmxhZyBvbiB0aGUgUmVnRXhwLCBhcyBpdCB3aWxsIGNhdXNlIGVhY2ggc3VjY2Vzc2l2ZSBzZWFyY2ggdG9cbiAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gKiAgICBhY2NvdW50LlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICogQHBhcmFtIHtib29sZWFuPX0gW25nVHJpbT10cnVlXSBJZiBzZXQgdG8gZmFsc2UgQW5ndWxhciB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHRyaW0gdGhlIGlucHV0LlxuICogICAgVGhpcyBwYXJhbWV0ZXIgaXMgaWdub3JlZCBmb3IgaW5wdXRbdHlwZT1wYXNzd29yZF0gY29udHJvbHMsIHdoaWNoIHdpbGwgbmV2ZXIgdHJpbSB0aGVcbiAqICAgIGlucHV0LlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbmFtZT1cImlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImlucHV0RXhhbXBsZVwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdpbnB1dEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICRzY29wZS51c2VyID0ge25hbWU6ICdndWVzdCcsIGxhc3Q6ICd2aXNpdG9yJ307XG4gICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICBVc2VyIG5hbWU6XG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ1c2VyTmFtZVwiIG5nLW1vZGVsPVwidXNlci5uYW1lXCIgcmVxdWlyZWQ+XG4gICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0udXNlck5hbWUuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgTGFzdCBuYW1lOlxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwibGFzdE5hbWVcIiBuZy1tb2RlbD1cInVzZXIubGFzdFwiXG4gICAgICAgICAgICAgIG5nLW1pbmxlbmd0aD1cIjNcIiBuZy1tYXhsZW5ndGg9XCIxMFwiPlxuICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmxhc3ROYW1lLiRlcnJvci5taW5sZW5ndGhcIj5cbiAgICAgICAgICAgICAgIFRvbyBzaG9ydCE8L3NwYW4+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0ubGFzdE5hbWUuJGVycm9yLm1heGxlbmd0aFwiPlxuICAgICAgICAgICAgICAgVG9vIGxvbmchPC9zcGFuPlxuICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgIDxocj5cbiAgICAgICAgIDx0dD51c2VyID0ge3t1c2VyfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLnVzZXJOYW1lLiR2YWxpZCA9IHt7bXlGb3JtLnVzZXJOYW1lLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS51c2VyTmFtZS4kZXJyb3IgPSB7e215Rm9ybS51c2VyTmFtZS4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0ubGFzdE5hbWUuJHZhbGlkID0ge3tteUZvcm0ubGFzdE5hbWUuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLmxhc3ROYW1lLiRlcnJvciA9IHt7bXlGb3JtLmxhc3ROYW1lLiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLm1pbmxlbmd0aCA9IHt7ISFteUZvcm0uJGVycm9yLm1pbmxlbmd0aH19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IubWF4bGVuZ3RoID0ge3shIW15Rm9ybS4kZXJyb3IubWF4bGVuZ3RofX08L3R0Pjxici8+XG4gICAgICAgPC9kaXY+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIHZhciB1c2VyID0gZWxlbWVudChieS5leGFjdEJpbmRpbmcoJ3VzZXInKSk7XG4gICAgICAgIHZhciB1c2VyTmFtZVZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0udXNlck5hbWUuJHZhbGlkJykpO1xuICAgICAgICB2YXIgbGFzdE5hbWVWYWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmxhc3ROYW1lLiR2YWxpZCcpKTtcbiAgICAgICAgdmFyIGxhc3ROYW1lRXJyb3IgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5sYXN0TmFtZS4kZXJyb3InKSk7XG4gICAgICAgIHZhciBmb3JtVmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS4kdmFsaWQnKSk7XG4gICAgICAgIHZhciB1c2VyTmFtZUlucHV0ID0gZWxlbWVudChieS5tb2RlbCgndXNlci5uYW1lJykpO1xuICAgICAgICB2YXIgdXNlckxhc3RJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIubGFzdCcpKTtcblxuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigne1wibmFtZVwiOlwiZ3Vlc3RcIixcImxhc3RcIjpcInZpc2l0b3JcIn0nKTtcbiAgICAgICAgICBleHBlY3QodXNlck5hbWVWYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5IHdoZW4gcmVxdWlyZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1c2VyTmFtZUlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgdXNlck5hbWVJbnB1dC5zZW5kS2V5cygnJyk7XG5cbiAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigne1wibGFzdFwiOlwidmlzaXRvclwifScpO1xuICAgICAgICAgIGV4cGVjdCh1c2VyTmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgdmFsaWQgaWYgZW1wdHkgd2hlbiBtaW4gbGVuZ3RoIGlzIHNldCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LnNlbmRLZXlzKCcnKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyLmdldFRleHQoKSkudG9Db250YWluKCd7XCJuYW1lXCI6XCJndWVzdFwiLFwibGFzdFwiOlwiXCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBsZXNzIHRoYW4gcmVxdWlyZWQgbWluIGxlbmd0aCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LnNlbmRLZXlzKCd4eCcpO1xuXG4gICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3tcIm5hbWVcIjpcImd1ZXN0XCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lRXJyb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ21pbmxlbmd0aCcpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBsb25nZXIgdGhhbiBtYXggbGVuZ3RoJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdXNlckxhc3RJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuc2VuZEtleXMoJ3NvbWUgcmlkaWN1bG91c2x5IGxvbmcgbmFtZScpO1xuXG4gICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3tcIm5hbWVcIjpcImd1ZXN0XCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lRXJyb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ21heGxlbmd0aCcpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIGlucHV0RGlyZWN0aXZlID0gWyckYnJvd3NlcicsICckc25pZmZlcicsICckZmlsdGVyJywgJyRwYXJzZScsXG4gICAgZnVuY3Rpb24oJGJyb3dzZXIsICRzbmlmZmVyLCAkZmlsdGVyLCAkcGFyc2UpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcXVpcmU6IFsnP25nTW9kZWwnXSxcbiAgICBsaW5rOiB7XG4gICAgICBwcmU6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgICBpZiAoY3RybHNbMF0pIHtcbiAgICAgICAgICAoaW5wdXRUeXBlW2xvd2VyY2FzZShhdHRyLnR5cGUpXSB8fCBpbnB1dFR5cGUudGV4dCkoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzWzBdLCAkc25pZmZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGJyb3dzZXIsICRmaWx0ZXIsICRwYXJzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XTtcblxuXG5cbnZhciBDT05TVEFOVF9WQUxVRV9SRUdFWFAgPSAvXih0cnVlfGZhbHNlfFxcZCspJC87XG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nVmFsdWVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEJpbmRzIHRoZSBnaXZlbiBleHByZXNzaW9uIHRvIHRoZSB2YWx1ZSBvZiBgPG9wdGlvbj5gIG9yIHtAbGluayBpbnB1dFtyYWRpb10gYGlucHV0W3JhZGlvXWB9LFxuICogc28gdGhhdCB3aGVuIHRoZSBlbGVtZW50IGlzIHNlbGVjdGVkLCB0aGUge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfSBvZiB0aGF0IGVsZW1lbnQgaXMgc2V0IHRvXG4gKiB0aGUgYm91bmQgdmFsdWUuXG4gKlxuICogYG5nVmFsdWVgIGlzIHVzZWZ1bCB3aGVuIGR5bmFtaWNhbGx5IGdlbmVyYXRpbmcgbGlzdHMgb2YgcmFkaW8gYnV0dG9ucyB1c2luZ1xuICoge0BsaW5rIG5nUmVwZWF0IGBuZ1JlcGVhdGB9LCBhcyBzaG93biBiZWxvdy5cbiAqXG4gKiBMaWtld2lzZSwgYG5nVmFsdWVgIGNhbiBiZSB1c2VkIHRvIGdlbmVyYXRlIGA8b3B0aW9uPmAgZWxlbWVudHMgZm9yXG4gKiB0aGUge0BsaW5rIHNlbGVjdCBgc2VsZWN0YH0gZWxlbWVudC4gSW4gdGhhdCBjYXNlIGhvd2V2ZXIsIG9ubHkgc3RyaW5ncyBhcmUgc3VwcG9ydGVkXG4gKiBmb3IgdGhlIGB2YWx1ZSBgYXR0cmlidXRlLCBzbyB0aGUgcmVzdWx0aW5nIGBuZ01vZGVsYCB3aWxsIGFsd2F5cyBiZSBhIHN0cmluZy5cbiAqIFN1cHBvcnQgZm9yIGBzZWxlY3RgIG1vZGVscyB3aXRoIG5vbi1zdHJpbmcgdmFsdWVzIGlzIGF2YWlsYWJsZSB2aWEgYG5nT3B0aW9uc2AuXG4gKlxuICogQGVsZW1lbnQgaW5wdXRcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdWYWx1ZSBhbmd1bGFyIGV4cHJlc3Npb24sIHdob3NlIHZhbHVlIHdpbGwgYmUgYm91bmQgdG8gdGhlIGB2YWx1ZWAgYXR0cmlidXRlXG4gKiAgIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnRcbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJuZ1ZhbHVlLWRpcmVjdGl2ZVwiIG1vZHVsZT1cInZhbHVlRXhhbXBsZVwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd2YWx1ZUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICRzY29wZS5uYW1lcyA9IFsncGl6emEnLCAndW5pY29ybnMnLCAncm9ib3RzJ107XG4gICAgICAgICAgICAgICRzY29wZS5teSA9IHsgZmF2b3JpdGU6ICd1bmljb3JucycgfTtcbiAgICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPGZvcm0gbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgPGgyPldoaWNoIGlzIHlvdXIgZmF2b3JpdGU/PC9oMj5cbiAgICAgICAgICAgIDxsYWJlbCBuZy1yZXBlYXQ9XCJuYW1lIGluIG5hbWVzXCIgZm9yPVwie3tuYW1lfX1cIj5cbiAgICAgICAgICAgICAge3tuYW1lfX1cbiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICAgICAgICAgICBuZy1tb2RlbD1cIm15LmZhdm9yaXRlXCJcbiAgICAgICAgICAgICAgICAgICAgIG5nLXZhbHVlPVwibmFtZVwiXG4gICAgICAgICAgICAgICAgICAgICBpZD1cInt7bmFtZX19XCJcbiAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJmYXZvcml0ZVwiPlxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8ZGl2PllvdSBjaG9zZSB7e215LmZhdm9yaXRlfX08L2Rpdj5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICB2YXIgZmF2b3JpdGUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215LmZhdm9yaXRlJykpO1xuXG4gICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChmYXZvcml0ZS5nZXRUZXh0KCkpLnRvQ29udGFpbigndW5pY29ybnMnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgYmluZCB0aGUgdmFsdWVzIHRvIHRoZSBpbnB1dHMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50LmFsbChieS5tb2RlbCgnbXkuZmF2b3JpdGUnKSkuZ2V0KDApLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGZhdm9yaXRlLmdldFRleHQoKSkudG9Db250YWluKCdwaXp6YScpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ1ZhbHVlRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBwcmlvcml0eTogMTAwLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKHRwbCwgdHBsQXR0cikge1xuICAgICAgaWYgKENPTlNUQU5UX1ZBTFVFX1JFR0VYUC50ZXN0KHRwbEF0dHIubmdWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nVmFsdWVDb25zdGFudExpbmsoc2NvcGUsIGVsbSwgYXR0cikge1xuICAgICAgICAgIGF0dHIuJHNldCgndmFsdWUnLCBzY29wZS4kZXZhbChhdHRyLm5nVmFsdWUpKTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZ1ZhbHVlTGluayhzY29wZSwgZWxtLCBhdHRyKSB7XG4gICAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHIubmdWYWx1ZSwgZnVuY3Rpb24gdmFsdWVXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgYXR0ci4kc2V0KCd2YWx1ZScsIHZhbHVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQmluZFxuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQmluZGAgYXR0cmlidXRlIHRlbGxzIEFuZ3VsYXIgdG8gcmVwbGFjZSB0aGUgdGV4dCBjb250ZW50IG9mIHRoZSBzcGVjaWZpZWQgSFRNTCBlbGVtZW50XG4gKiB3aXRoIHRoZSB2YWx1ZSBvZiBhIGdpdmVuIGV4cHJlc3Npb24sIGFuZCB0byB1cGRhdGUgdGhlIHRleHQgY29udGVudCB3aGVuIHRoZSB2YWx1ZSBvZiB0aGF0XG4gKiBleHByZXNzaW9uIGNoYW5nZXMuXG4gKlxuICogVHlwaWNhbGx5LCB5b3UgZG9uJ3QgdXNlIGBuZ0JpbmRgIGRpcmVjdGx5LCBidXQgaW5zdGVhZCB5b3UgdXNlIHRoZSBkb3VibGUgY3VybHkgbWFya3VwIGxpa2VcbiAqIGB7eyBleHByZXNzaW9uIH19YCB3aGljaCBpcyBzaW1pbGFyIGJ1dCBsZXNzIHZlcmJvc2UuXG4gKlxuICogSXQgaXMgcHJlZmVyYWJsZSB0byB1c2UgYG5nQmluZGAgaW5zdGVhZCBvZiBge3sgZXhwcmVzc2lvbiB9fWAgaWYgYSB0ZW1wbGF0ZSBpcyBtb21lbnRhcmlseVxuICogZGlzcGxheWVkIGJ5IHRoZSBicm93c2VyIGluIGl0cyByYXcgc3RhdGUgYmVmb3JlIEFuZ3VsYXIgY29tcGlsZXMgaXQuIFNpbmNlIGBuZ0JpbmRgIGlzIGFuXG4gKiBlbGVtZW50IGF0dHJpYnV0ZSwgaXQgbWFrZXMgdGhlIGJpbmRpbmdzIGludmlzaWJsZSB0byB0aGUgdXNlciB3aGlsZSB0aGUgcGFnZSBpcyBsb2FkaW5nLlxuICpcbiAqIEFuIGFsdGVybmF0aXZlIHNvbHV0aW9uIHRvIHRoaXMgcHJvYmxlbSB3b3VsZCBiZSB1c2luZyB0aGVcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbG9hayBuZ0Nsb2FrfSBkaXJlY3RpdmUuXG4gKlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0JpbmQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUuXG4gKlxuICogQGV4YW1wbGVcbiAqIEVudGVyIGEgbmFtZSBpbiB0aGUgTGl2ZSBQcmV2aWV3IHRleHQgYm94OyB0aGUgZ3JlZXRpbmcgYmVsb3cgdGhlIHRleHQgYm94IGNoYW5nZXMgaW5zdGFudGx5LlxuICAgPGV4YW1wbGUgbW9kdWxlPVwiYmluZEV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2JpbmRFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgJHNjb3BlLm5hbWUgPSAnV2hpcmxlZCc7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGxhYmVsPkVudGVyIG5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibmFtZVwiPjwvbGFiZWw+PGJyPlxuICAgICAgICAgSGVsbG8gPHNwYW4gbmctYmluZD1cIm5hbWVcIj48L3NwYW4+IVxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWJpbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBuYW1lSW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCduYW1lJykpO1xuXG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCduYW1lJykpLmdldFRleHQoKSkudG9CZSgnV2hpcmxlZCcpO1xuICAgICAgICAgbmFtZUlucHV0LmNsZWFyKCk7XG4gICAgICAgICBuYW1lSW5wdXQuc2VuZEtleXMoJ3dvcmxkJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCduYW1lJykpLmdldFRleHQoKSkudG9CZSgnd29ybGQnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdCaW5kRGlyZWN0aXZlID0gWyckY29tcGlsZScsIGZ1bmN0aW9uKCRjb21waWxlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBQycsXG4gICAgY29tcGlsZTogZnVuY3Rpb24gbmdCaW5kQ29tcGlsZSh0ZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0NsYXNzKHRlbXBsYXRlRWxlbWVudCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gbmdCaW5kTGluayhzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvKGVsZW1lbnQsIGF0dHIubmdCaW5kKTtcbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnRbMF07XG4gICAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nQmluZCwgZnVuY3Rpb24gbmdCaW5kV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gaXNVbmRlZmluZWQodmFsdWUpID8gJycgOiB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dO1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdCaW5kVGVtcGxhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdCaW5kVGVtcGxhdGVgIGRpcmVjdGl2ZSBzcGVjaWZpZXMgdGhhdCB0aGUgZWxlbWVudFxuICogdGV4dCBjb250ZW50IHNob3VsZCBiZSByZXBsYWNlZCB3aXRoIHRoZSBpbnRlcnBvbGF0aW9uIG9mIHRoZSB0ZW1wbGF0ZVxuICogaW4gdGhlIGBuZ0JpbmRUZW1wbGF0ZWAgYXR0cmlidXRlLlxuICogVW5saWtlIGBuZ0JpbmRgLCB0aGUgYG5nQmluZFRlbXBsYXRlYCBjYW4gY29udGFpbiBtdWx0aXBsZSBge3tgIGB9fWBcbiAqIGV4cHJlc3Npb25zLiBUaGlzIGRpcmVjdGl2ZSBpcyBuZWVkZWQgc2luY2Ugc29tZSBIVE1MIGVsZW1lbnRzXG4gKiAoc3VjaCBhcyBUSVRMRSBhbmQgT1BUSU9OKSBjYW5ub3QgY29udGFpbiBTUEFOIGVsZW1lbnRzLlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtzdHJpbmd9IG5nQmluZFRlbXBsYXRlIHRlbXBsYXRlIG9mIGZvcm1cbiAqICAgPHR0Pnt7PC90dD4gPHR0PmV4cHJlc3Npb248L3R0PiA8dHQ+fX08L3R0PiB0byBldmFsLlxuICpcbiAqIEBleGFtcGxlXG4gKiBUcnkgaXQgaGVyZTogZW50ZXIgdGV4dCBpbiB0ZXh0IGJveCBhbmQgd2F0Y2ggdGhlIGdyZWV0aW5nIGNoYW5nZS5cbiAgIDxleGFtcGxlIG1vZHVsZT1cImJpbmRFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdiaW5kRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS5zYWx1dGF0aW9uID0gJ0hlbGxvJztcbiAgICAgICAgICAgICAkc2NvcGUubmFtZSA9ICdXb3JsZCc7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8bGFiZWw+U2FsdXRhdGlvbjogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJzYWx1dGF0aW9uXCI+PC9sYWJlbD48YnI+XG4gICAgICAgIDxsYWJlbD5OYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm5hbWVcIj48L2xhYmVsPjxicj5cbiAgICAgICAgPHByZSBuZy1iaW5kLXRlbXBsYXRlPVwie3tzYWx1dGF0aW9ufX0ge3tuYW1lfX0hXCI+PC9wcmU+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctYmluZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgdmFyIHNhbHV0YXRpb25FbGVtID0gZWxlbWVudChieS5iaW5kaW5nKCdzYWx1dGF0aW9uJykpO1xuICAgICAgICAgdmFyIHNhbHV0YXRpb25JbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3NhbHV0YXRpb24nKSk7XG4gICAgICAgICB2YXIgbmFtZUlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbmFtZScpKTtcblxuICAgICAgICAgZXhwZWN0KHNhbHV0YXRpb25FbGVtLmdldFRleHQoKSkudG9CZSgnSGVsbG8gV29ybGQhJyk7XG5cbiAgICAgICAgIHNhbHV0YXRpb25JbnB1dC5jbGVhcigpO1xuICAgICAgICAgc2FsdXRhdGlvbklucHV0LnNlbmRLZXlzKCdHcmVldGluZ3MnKTtcbiAgICAgICAgIG5hbWVJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbmFtZUlucHV0LnNlbmRLZXlzKCd1c2VyJyk7XG5cbiAgICAgICAgIGV4cGVjdChzYWx1dGF0aW9uRWxlbS5nZXRUZXh0KCkpLnRvQmUoJ0dyZWV0aW5ncyB1c2VyIScpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0JpbmRUZW1wbGF0ZURpcmVjdGl2ZSA9IFsnJGludGVycG9sYXRlJywgJyRjb21waWxlJywgZnVuY3Rpb24oJGludGVycG9sYXRlLCAkY29tcGlsZSkge1xuICByZXR1cm4ge1xuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nQmluZFRlbXBsYXRlQ29tcGlsZSh0ZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0NsYXNzKHRlbXBsYXRlRWxlbWVudCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gbmdCaW5kVGVtcGxhdGVMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIHZhciBpbnRlcnBvbGF0ZUZuID0gJGludGVycG9sYXRlKGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyLm5nQmluZFRlbXBsYXRlKSk7XG4gICAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0luZm8oZWxlbWVudCwgaW50ZXJwb2xhdGVGbi5leHByZXNzaW9ucyk7XG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50WzBdO1xuICAgICAgICBhdHRyLiRvYnNlcnZlKCduZ0JpbmRUZW1wbGF0ZScsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IGlzVW5kZWZpbmVkKHZhbHVlKSA/ICcnIDogdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQmluZEh0bWxcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEV2YWx1YXRlcyB0aGUgZXhwcmVzc2lvbiBhbmQgaW5zZXJ0cyB0aGUgcmVzdWx0aW5nIEhUTUwgaW50byB0aGUgZWxlbWVudCBpbiBhIHNlY3VyZSB3YXkuIEJ5IGRlZmF1bHQsXG4gKiB0aGUgcmVzdWx0aW5nIEhUTUwgY29udGVudCB3aWxsIGJlIHNhbml0aXplZCB1c2luZyB0aGUge0BsaW5rIG5nU2FuaXRpemUuJHNhbml0aXplICRzYW5pdGl6ZX0gc2VydmljZS5cbiAqIFRvIHV0aWxpemUgdGhpcyBmdW5jdGlvbmFsaXR5LCBlbnN1cmUgdGhhdCBgJHNhbml0aXplYCBpcyBhdmFpbGFibGUsIGZvciBleGFtcGxlLCBieSBpbmNsdWRpbmcge0BsaW5rXG4gKiBuZ1Nhbml0aXplfSBpbiB5b3VyIG1vZHVsZSdzIGRlcGVuZGVuY2llcyAobm90IGluIGNvcmUgQW5ndWxhcikuIEluIG9yZGVyIHRvIHVzZSB7QGxpbmsgbmdTYW5pdGl6ZX1cbiAqIGluIHlvdXIgbW9kdWxlJ3MgZGVwZW5kZW5jaWVzLCB5b3UgbmVlZCB0byBpbmNsdWRlIFwiYW5ndWxhci1zYW5pdGl6ZS5qc1wiIGluIHlvdXIgYXBwbGljYXRpb24uXG4gKlxuICogWW91IG1heSBhbHNvIGJ5cGFzcyBzYW5pdGl6YXRpb24gZm9yIHZhbHVlcyB5b3Uga25vdyBhcmUgc2FmZS4gVG8gZG8gc28sIGJpbmQgdG9cbiAqIGFuIGV4cGxpY2l0bHkgdHJ1c3RlZCB2YWx1ZSB2aWEge0BsaW5rIG5nLiRzY2UjdHJ1c3RBc0h0bWwgJHNjZS50cnVzdEFzSHRtbH0uICBTZWUgdGhlIGV4YW1wbGVcbiAqIHVuZGVyIHtAbGluayBuZy4kc2NlI3Nob3ctbWUtYW4tZXhhbXBsZS11c2luZy1zY2UtIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpfS5cbiAqXG4gKiBOb3RlOiBJZiBhIGAkc2FuaXRpemVgIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUgYW5kIHRoZSBib3VuZCB2YWx1ZSBpc24ndCBleHBsaWNpdGx5IHRydXN0ZWQsIHlvdVxuICogd2lsbCBoYXZlIGFuIGV4Y2VwdGlvbiAoaW5zdGVhZCBvZiBhbiBleHBsb2l0LilcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdCaW5kSHRtbCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZS5cbiAqXG4gKiBAZXhhbXBsZVxuXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJiaW5kSHRtbEV4YW1wbGVcIiBkZXBzPVwiYW5ndWxhci1zYW5pdGl6ZS5qc1wiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgIDxwIG5nLWJpbmQtaHRtbD1cIm15SFRNTFwiPjwvcD5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuXG4gICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICBhbmd1bGFyLm1vZHVsZSgnYmluZEh0bWxFeGFtcGxlJywgWyduZ1Nhbml0aXplJ10pXG4gICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAkc2NvcGUubXlIVE1MID1cbiAgICAgICAgICAgICAgJ0kgYW0gYW4gPGNvZGU+SFRNTDwvY29kZT5zdHJpbmcgd2l0aCAnICtcbiAgICAgICAgICAgICAgJzxhIGhyZWY9XCIjXCI+bGlua3MhPC9hPiBhbmQgb3RoZXIgPGVtPnN0dWZmPC9lbT4nO1xuICAgICAgICAgfV0pO1xuICAgICA8L2ZpbGU+XG5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctYmluZC1odG1sJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdteUhUTUwnKSkuZ2V0VGV4dCgpKS50b0JlKFxuICAgICAgICAgICAgICdJIGFtIGFuIEhUTUxzdHJpbmcgd2l0aCBsaW5rcyEgYW5kIG90aGVyIHN0dWZmJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQmluZEh0bWxEaXJlY3RpdmUgPSBbJyRzY2UnLCAnJHBhcnNlJywgJyRjb21waWxlJywgZnVuY3Rpb24oJHNjZSwgJHBhcnNlLCAkY29tcGlsZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29tcGlsZTogZnVuY3Rpb24gbmdCaW5kSHRtbENvbXBpbGUodEVsZW1lbnQsIHRBdHRycykge1xuICAgICAgdmFyIG5nQmluZEh0bWxHZXR0ZXIgPSAkcGFyc2UodEF0dHJzLm5nQmluZEh0bWwpO1xuICAgICAgdmFyIG5nQmluZEh0bWxXYXRjaCA9ICRwYXJzZSh0QXR0cnMubmdCaW5kSHRtbCwgZnVuY3Rpb24gZ2V0U3RyaW5nVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSB8fCAnJykudG9TdHJpbmcoKTtcbiAgICAgIH0pO1xuICAgICAgJGNvbXBpbGUuJCRhZGRCaW5kaW5nQ2xhc3ModEVsZW1lbnQpO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gbmdCaW5kSHRtbExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgJGNvbXBpbGUuJCRhZGRCaW5kaW5nSW5mbyhlbGVtZW50LCBhdHRyLm5nQmluZEh0bWwpO1xuXG4gICAgICAgIHNjb3BlLiR3YXRjaChuZ0JpbmRIdG1sV2F0Y2gsIGZ1bmN0aW9uIG5nQmluZEh0bWxXYXRjaEFjdGlvbigpIHtcbiAgICAgICAgICAvLyB3ZSByZS1ldmFsdWF0ZSB0aGUgZXhwciBiZWNhdXNlIHdlIHdhbnQgYSBUcnVzdGVkVmFsdWVIb2xkZXJUeXBlXG4gICAgICAgICAgLy8gZm9yICRzY2UsIG5vdCBhIHN0cmluZ1xuICAgICAgICAgIGVsZW1lbnQuaHRtbCgkc2NlLmdldFRydXN0ZWRIdG1sKG5nQmluZEh0bWxHZXR0ZXIoc2NvcGUpKSB8fCAnJyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NoYW5nZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRXZhbHVhdGUgdGhlIGdpdmVuIGV4cHJlc3Npb24gd2hlbiB0aGUgdXNlciBjaGFuZ2VzIHRoZSBpbnB1dC5cbiAqIFRoZSBleHByZXNzaW9uIGlzIGV2YWx1YXRlZCBpbW1lZGlhdGVseSwgdW5saWtlIHRoZSBKYXZhU2NyaXB0IG9uY2hhbmdlIGV2ZW50XG4gKiB3aGljaCBvbmx5IHRyaWdnZXJzIGF0IHRoZSBlbmQgb2YgYSBjaGFuZ2UgKHVzdWFsbHksIHdoZW4gdGhlIHVzZXIgbGVhdmVzIHRoZVxuICogZm9ybSBlbGVtZW50IG9yIHByZXNzZXMgdGhlIHJldHVybiBrZXkpLlxuICpcbiAqIFRoZSBgbmdDaGFuZ2VgIGV4cHJlc3Npb24gaXMgb25seSBldmFsdWF0ZWQgd2hlbiBhIGNoYW5nZSBpbiB0aGUgaW5wdXQgdmFsdWUgY2F1c2VzXG4gKiBhIG5ldyB2YWx1ZSB0byBiZSBjb21taXR0ZWQgdG8gdGhlIG1vZGVsLlxuICpcbiAqIEl0IHdpbGwgbm90IGJlIGV2YWx1YXRlZDpcbiAqICogaWYgdGhlIHZhbHVlIHJldHVybmVkIGZyb20gdGhlIGAkcGFyc2Vyc2AgdHJhbnNmb3JtYXRpb24gcGlwZWxpbmUgaGFzIG5vdCBjaGFuZ2VkXG4gKiAqIGlmIHRoZSBpbnB1dCBoYXMgY29udGludWVkIHRvIGJlIGludmFsaWQgc2luY2UgdGhlIG1vZGVsIHdpbGwgc3RheSBgbnVsbGBcbiAqICogaWYgdGhlIG1vZGVsIGlzIGNoYW5nZWQgcHJvZ3JhbW1hdGljYWxseSBhbmQgbm90IGJ5IGEgY2hhbmdlIHRvIHRoZSBpbnB1dCB2YWx1ZVxuICpcbiAqXG4gKiBOb3RlLCB0aGlzIGRpcmVjdGl2ZSByZXF1aXJlcyBgbmdNb2RlbGAgdG8gYmUgcHJlc2VudC5cbiAqXG4gKiBAZWxlbWVudCBpbnB1dFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NoYW5nZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uIGNoYW5nZVxuICogaW4gaW5wdXQgdmFsdWUuXG4gKlxuICogQGV4YW1wbGVcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ0NoYW5nZS1kaXJlY3RpdmVcIiBtb2R1bGU9XCJjaGFuZ2VFeGFtcGxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICAgPHNjcmlwdD5cbiAqICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjaGFuZ2VFeGFtcGxlJywgW10pXG4gKiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAgICAgJHNjb3BlLmNvdW50ZXIgPSAwO1xuICogICAgICAgICAgICRzY29wZS5jaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgICRzY29wZS5jb3VudGVyKys7XG4gKiAgICAgICAgICAgfTtcbiAqICAgICAgICAgfV0pO1xuICogICAgIDwvc2NyaXB0PlxuICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjb25maXJtZWRcIiBuZy1jaGFuZ2U9XCJjaGFuZ2UoKVwiIGlkPVwibmctY2hhbmdlLWV4YW1wbGUxXCIgLz5cbiAqICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNvbmZpcm1lZFwiIGlkPVwibmctY2hhbmdlLWV4YW1wbGUyXCIgLz5cbiAqICAgICAgIDxsYWJlbCBmb3I9XCJuZy1jaGFuZ2UtZXhhbXBsZTJcIj5Db25maXJtZWQ8L2xhYmVsPjxiciAvPlxuICogICAgICAgPHR0PmRlYnVnID0ge3tjb25maXJtZWR9fTwvdHQ+PGJyLz5cbiAqICAgICAgIDx0dD5jb3VudGVyID0ge3tjb3VudGVyfX08L3R0Pjxici8+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgIHZhciBjb3VudGVyID0gZWxlbWVudChieS5iaW5kaW5nKCdjb3VudGVyJykpO1xuICogICAgIHZhciBkZWJ1ZyA9IGVsZW1lbnQoYnkuYmluZGluZygnY29uZmlybWVkJykpO1xuICpcbiAqICAgICBpdCgnc2hvdWxkIGV2YWx1YXRlIHRoZSBleHByZXNzaW9uIGlmIGNoYW5naW5nIGZyb20gdmlldycsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzAnKTtcbiAqXG4gKiAgICAgICBlbGVtZW50KGJ5LmlkKCduZy1jaGFuZ2UtZXhhbXBsZTEnKSkuY2xpY2soKTtcbiAqXG4gKiAgICAgICBleHBlY3QoY291bnRlci5nZXRUZXh0KCkpLnRvQ29udGFpbignMScpO1xuICogICAgICAgZXhwZWN0KGRlYnVnLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gKiAgICAgfSk7XG4gKlxuICogICAgIGl0KCdzaG91bGQgbm90IGV2YWx1YXRlIHRoZSBleHByZXNzaW9uIGlmIGNoYW5naW5nIGZyb20gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGVsZW1lbnQoYnkuaWQoJ25nLWNoYW5nZS1leGFtcGxlMicpKS5jbGljaygpO1xuXG4gKiAgICAgICBleHBlY3QoY291bnRlci5nZXRUZXh0KCkpLnRvQ29udGFpbignMCcpO1xuICogICAgICAgZXhwZWN0KGRlYnVnLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gKiAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQ2hhbmdlRGlyZWN0aXZlID0gdmFsdWVGbih7XG4gIHJlc3RyaWN0OiAnQScsXG4gIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHtcbiAgICBjdHJsLiR2aWV3Q2hhbmdlTGlzdGVuZXJzLnB1c2goZnVuY3Rpb24oKSB7XG4gICAgICBzY29wZS4kZXZhbChhdHRyLm5nQ2hhbmdlKTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNsYXNzRGlyZWN0aXZlKG5hbWUsIHNlbGVjdG9yKSB7XG4gIG5hbWUgPSAnbmdDbGFzcycgKyBuYW1lO1xuICByZXR1cm4gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnQUMnLFxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgdmFyIG9sZFZhbDtcblxuICAgICAgICBzY29wZS4kd2F0Y2goYXR0cltuYW1lXSwgbmdDbGFzc1dhdGNoQWN0aW9uLCB0cnVlKTtcblxuICAgICAgICBhdHRyLiRvYnNlcnZlKCdjbGFzcycsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgbmdDbGFzc1dhdGNoQWN0aW9uKHNjb3BlLiRldmFsKGF0dHJbbmFtZV0pKTtcbiAgICAgICAgfSk7XG5cblxuICAgICAgICBpZiAobmFtZSAhPT0gJ25nQ2xhc3MnKSB7XG4gICAgICAgICAgc2NvcGUuJHdhdGNoKCckaW5kZXgnLCBmdW5jdGlvbigkaW5kZXgsIG9sZCRpbmRleCkge1xuICAgICAgICAgICAgLy8ganNoaW50IGJpdHdpc2U6IGZhbHNlXG4gICAgICAgICAgICB2YXIgbW9kID0gJGluZGV4ICYgMTtcbiAgICAgICAgICAgIGlmIChtb2QgIT09IChvbGQkaW5kZXggJiAxKSkge1xuICAgICAgICAgICAgICB2YXIgY2xhc3NlcyA9IGFycmF5Q2xhc3NlcyhzY29wZS4kZXZhbChhdHRyW25hbWVdKSk7XG4gICAgICAgICAgICAgIG1vZCA9PT0gc2VsZWN0b3IgP1xuICAgICAgICAgICAgICAgIGFkZENsYXNzZXMoY2xhc3NlcykgOlxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzZXMoY2xhc3Nlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhZGRDbGFzc2VzKGNsYXNzZXMpIHtcbiAgICAgICAgICB2YXIgbmV3Q2xhc3NlcyA9IGRpZ2VzdENsYXNzQ291bnRzKGNsYXNzZXMsIDEpO1xuICAgICAgICAgIGF0dHIuJGFkZENsYXNzKG5ld0NsYXNzZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3NlcyhjbGFzc2VzKSB7XG4gICAgICAgICAgdmFyIG5ld0NsYXNzZXMgPSBkaWdlc3RDbGFzc0NvdW50cyhjbGFzc2VzLCAtMSk7XG4gICAgICAgICAgYXR0ci4kcmVtb3ZlQ2xhc3MobmV3Q2xhc3Nlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkaWdlc3RDbGFzc0NvdW50cyhjbGFzc2VzLCBjb3VudCkge1xuICAgICAgICAgIC8vIFVzZSBjcmVhdGVNYXAoKSB0byBwcmV2ZW50IGNsYXNzIGFzc3VtcHRpb25zIGludm9sdmluZyBwcm9wZXJ0eVxuICAgICAgICAgIC8vIG5hbWVzIGluIE9iamVjdC5wcm90b3R5cGVcbiAgICAgICAgICB2YXIgY2xhc3NDb3VudHMgPSBlbGVtZW50LmRhdGEoJyRjbGFzc0NvdW50cycpIHx8IGNyZWF0ZU1hcCgpO1xuICAgICAgICAgIHZhciBjbGFzc2VzVG9VcGRhdGUgPSBbXTtcbiAgICAgICAgICBmb3JFYWNoKGNsYXNzZXMsIGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgaWYgKGNvdW50ID4gMCB8fCBjbGFzc0NvdW50c1tjbGFzc05hbWVdKSB7XG4gICAgICAgICAgICAgIGNsYXNzQ291bnRzW2NsYXNzTmFtZV0gPSAoY2xhc3NDb3VudHNbY2xhc3NOYW1lXSB8fCAwKSArIGNvdW50O1xuICAgICAgICAgICAgICBpZiAoY2xhc3NDb3VudHNbY2xhc3NOYW1lXSA9PT0gKyhjb3VudCA+IDApKSB7XG4gICAgICAgICAgICAgICAgY2xhc3Nlc1RvVXBkYXRlLnB1c2goY2xhc3NOYW1lKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGVsZW1lbnQuZGF0YSgnJGNsYXNzQ291bnRzJywgY2xhc3NDb3VudHMpO1xuICAgICAgICAgIHJldHVybiBjbGFzc2VzVG9VcGRhdGUuam9pbignICcpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlQ2xhc3NlcyhvbGRDbGFzc2VzLCBuZXdDbGFzc2VzKSB7XG4gICAgICAgICAgdmFyIHRvQWRkID0gYXJyYXlEaWZmZXJlbmNlKG5ld0NsYXNzZXMsIG9sZENsYXNzZXMpO1xuICAgICAgICAgIHZhciB0b1JlbW92ZSA9IGFycmF5RGlmZmVyZW5jZShvbGRDbGFzc2VzLCBuZXdDbGFzc2VzKTtcbiAgICAgICAgICB0b0FkZCA9IGRpZ2VzdENsYXNzQ291bnRzKHRvQWRkLCAxKTtcbiAgICAgICAgICB0b1JlbW92ZSA9IGRpZ2VzdENsYXNzQ291bnRzKHRvUmVtb3ZlLCAtMSk7XG4gICAgICAgICAgaWYgKHRvQWRkICYmIHRvQWRkLmxlbmd0aCkge1xuICAgICAgICAgICAgJGFuaW1hdGUuYWRkQ2xhc3MoZWxlbWVudCwgdG9BZGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodG9SZW1vdmUgJiYgdG9SZW1vdmUubGVuZ3RoKSB7XG4gICAgICAgICAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCB0b1JlbW92ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbmdDbGFzc1dhdGNoQWN0aW9uKG5ld1ZhbCkge1xuICAgICAgICAgIGlmIChzZWxlY3RvciA9PT0gdHJ1ZSB8fCBzY29wZS4kaW5kZXggJSAyID09PSBzZWxlY3Rvcikge1xuICAgICAgICAgICAgdmFyIG5ld0NsYXNzZXMgPSBhcnJheUNsYXNzZXMobmV3VmFsIHx8IFtdKTtcbiAgICAgICAgICAgIGlmICghb2xkVmFsKSB7XG4gICAgICAgICAgICAgIGFkZENsYXNzZXMobmV3Q2xhc3Nlcyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFlcXVhbHMobmV3VmFsLG9sZFZhbCkpIHtcbiAgICAgICAgICAgICAgdmFyIG9sZENsYXNzZXMgPSBhcnJheUNsYXNzZXMob2xkVmFsKTtcbiAgICAgICAgICAgICAgdXBkYXRlQ2xhc3NlcyhvbGRDbGFzc2VzLCBuZXdDbGFzc2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgb2xkVmFsID0gc2hhbGxvd0NvcHkobmV3VmFsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBhcnJheURpZmZlcmVuY2UodG9rZW5zMSwgdG9rZW5zMikge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zMS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdG9rZW4gPSB0b2tlbnMxW2ldO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRva2VuczIubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBpZiAodG9rZW4gPT0gdG9rZW5zMltqXSkgY29udGludWUgb3V0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWVzLnB1c2godG9rZW4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcnJheUNsYXNzZXMoY2xhc3NWYWwpIHtcbiAgICAgIHZhciBjbGFzc2VzID0gW107XG4gICAgICBpZiAoaXNBcnJheShjbGFzc1ZhbCkpIHtcbiAgICAgICAgZm9yRWFjaChjbGFzc1ZhbCwgZnVuY3Rpb24odikge1xuICAgICAgICAgIGNsYXNzZXMgPSBjbGFzc2VzLmNvbmNhdChhcnJheUNsYXNzZXModikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNsYXNzZXM7XG4gICAgICB9IGVsc2UgaWYgKGlzU3RyaW5nKGNsYXNzVmFsKSkge1xuICAgICAgICByZXR1cm4gY2xhc3NWYWwuc3BsaXQoJyAnKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoY2xhc3NWYWwpKSB7XG4gICAgICAgIGZvckVhY2goY2xhc3NWYWwsIGZ1bmN0aW9uKHYsIGspIHtcbiAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgY2xhc3NlcyA9IGNsYXNzZXMuY29uY2F0KGsuc3BsaXQoJyAnKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNsYXNzZXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2xhc3NWYWw7XG4gICAgfVxuICB9XTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NsYXNzXG4gKiBAcmVzdHJpY3QgQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdDbGFzc2AgZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gZHluYW1pY2FsbHkgc2V0IENTUyBjbGFzc2VzIG9uIGFuIEhUTUwgZWxlbWVudCBieSBkYXRhYmluZGluZ1xuICogYW4gZXhwcmVzc2lvbiB0aGF0IHJlcHJlc2VudHMgYWxsIGNsYXNzZXMgdG8gYmUgYWRkZWQuXG4gKlxuICogVGhlIGRpcmVjdGl2ZSBvcGVyYXRlcyBpbiB0aHJlZSBkaWZmZXJlbnQgd2F5cywgZGVwZW5kaW5nIG9uIHdoaWNoIG9mIHRocmVlIHR5cGVzIHRoZSBleHByZXNzaW9uXG4gKiBldmFsdWF0ZXMgdG86XG4gKlxuICogMS4gSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgc3RyaW5nLCB0aGUgc3RyaW5nIHNob3VsZCBiZSBvbmUgb3IgbW9yZSBzcGFjZS1kZWxpbWl0ZWQgY2xhc3NcbiAqIG5hbWVzLlxuICpcbiAqIDIuIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhbiBvYmplY3QsIHRoZW4gZm9yIGVhY2gga2V5LXZhbHVlIHBhaXIgb2YgdGhlXG4gKiBvYmplY3Qgd2l0aCBhIHRydXRoeSB2YWx1ZSB0aGUgY29ycmVzcG9uZGluZyBrZXkgaXMgdXNlZCBhcyBhIGNsYXNzIG5hbWUuXG4gKlxuICogMy4gSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGFuIGFycmF5LCBlYWNoIGVsZW1lbnQgb2YgdGhlIGFycmF5IHNob3VsZCBlaXRoZXIgYmUgYSBzdHJpbmcgYXMgaW5cbiAqIHR5cGUgMSBvciBhbiBvYmplY3QgYXMgaW4gdHlwZSAyLiBUaGlzIG1lYW5zIHRoYXQgeW91IGNhbiBtaXggc3RyaW5ncyBhbmQgb2JqZWN0cyB0b2dldGhlciBpbiBhbiBhcnJheVxuICogdG8gZ2l2ZSB5b3UgbW9yZSBjb250cm9sIG92ZXIgd2hhdCBDU1MgY2xhc3NlcyBhcHBlYXIuIFNlZSB0aGUgY29kZSBiZWxvdyBmb3IgYW4gZXhhbXBsZSBvZiB0aGlzLlxuICpcbiAqXG4gKiBUaGUgZGlyZWN0aXZlIHdvbid0IGFkZCBkdXBsaWNhdGUgY2xhc3NlcyBpZiBhIHBhcnRpY3VsYXIgY2xhc3Mgd2FzIGFscmVhZHkgc2V0LlxuICpcbiAqIFdoZW4gdGhlIGV4cHJlc3Npb24gY2hhbmdlcywgdGhlIHByZXZpb3VzbHkgYWRkZWQgY2xhc3NlcyBhcmUgcmVtb3ZlZCBhbmQgb25seSB0aGVuIGFyZSB0aGVcbiAqIG5ldyBjbGFzc2VzIGFkZGVkLlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiAqKmFkZCoqIC0gaGFwcGVucyBqdXN0IGJlZm9yZSB0aGUgY2xhc3MgaXMgYXBwbGllZCB0byB0aGUgZWxlbWVudHNcbiAqXG4gKiAqKnJlbW92ZSoqIC0gaGFwcGVucyBqdXN0IGJlZm9yZSB0aGUgY2xhc3MgaXMgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50XG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3Mge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbC4gVGhlIHJlc3VsdFxuICogICBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzc1xuICogICBuYW1lcywgYW4gYXJyYXksIG9yIGEgbWFwIG9mIGNsYXNzIG5hbWVzIHRvIGJvb2xlYW4gdmFsdWVzLiBJbiB0aGUgY2FzZSBvZiBhIG1hcCwgdGhlXG4gKiAgIG5hbWVzIG9mIHRoZSBwcm9wZXJ0aWVzIHdob3NlIHZhbHVlcyBhcmUgdHJ1dGh5IHdpbGwgYmUgYWRkZWQgYXMgY3NzIGNsYXNzZXMgdG8gdGhlXG4gKiAgIGVsZW1lbnQuXG4gKlxuICogQGV4YW1wbGUgRXhhbXBsZSB0aGF0IGRlbW9uc3RyYXRlcyBiYXNpYyBiaW5kaW5ncyB2aWEgbmdDbGFzcyBkaXJlY3RpdmUuXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8cCBuZy1jbGFzcz1cIntzdHJpa2U6IGRlbGV0ZWQsIGJvbGQ6IGltcG9ydGFudCwgJ2hhcy1lcnJvcic6IGVycm9yfVwiPk1hcCBTeW50YXggRXhhbXBsZTwvcD5cbiAgICAgICA8bGFiZWw+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiZGVsZXRlZFwiPlxuICAgICAgICAgIGRlbGV0ZWQgKGFwcGx5IFwic3RyaWtlXCIgY2xhc3MpXG4gICAgICAgPC9sYWJlbD48YnI+XG4gICAgICAgPGxhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImltcG9ydGFudFwiPlxuICAgICAgICAgIGltcG9ydGFudCAoYXBwbHkgXCJib2xkXCIgY2xhc3MpXG4gICAgICAgPC9sYWJlbD48YnI+XG4gICAgICAgPGxhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImVycm9yXCI+XG4gICAgICAgICAgZXJyb3IgKGFwcGx5IFwiaGFzLWVycm9yXCIgY2xhc3MpXG4gICAgICAgPC9sYWJlbD5cbiAgICAgICA8aHI+XG4gICAgICAgPHAgbmctY2xhc3M9XCJzdHlsZVwiPlVzaW5nIFN0cmluZyBTeW50YXg8L3A+XG4gICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJzdHlsZVwiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVHlwZTogYm9sZCBzdHJpa2UgcmVkXCIgYXJpYS1sYWJlbD1cIlR5cGU6IGJvbGQgc3RyaWtlIHJlZFwiPlxuICAgICAgIDxocj5cbiAgICAgICA8cCBuZy1jbGFzcz1cIltzdHlsZTEsIHN0eWxlMiwgc3R5bGUzXVwiPlVzaW5nIEFycmF5IFN5bnRheDwvcD5cbiAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJzdHlsZTFcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWRcIiBhcmlhLWxhYmVsPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZFwiPjxicj5cbiAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJzdHlsZTJcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWRcIiBhcmlhLWxhYmVsPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZCAyXCI+PGJyPlxuICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInN0eWxlM1wiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZFwiIGFyaWEtbGFiZWw9XCJUeXBlOiBib2xkLCBzdHJpa2Ugb3IgcmVkIDNcIj48YnI+XG4gICAgICAgPGhyPlxuICAgICAgIDxwIG5nLWNsYXNzPVwiW3N0eWxlNCwge29yYW5nZTogd2FybmluZ31dXCI+VXNpbmcgQXJyYXkgYW5kIE1hcCBTeW50YXg8L3A+XG4gICAgICAgPGlucHV0IG5nLW1vZGVsPVwic3R5bGU0XCIgcGxhY2Vob2xkZXI9XCJUeXBlOiBib2xkLCBzdHJpa2VcIiBhcmlhLWxhYmVsPVwiVHlwZTogYm9sZCwgc3RyaWtlXCI+PGJyPlxuICAgICAgIDxsYWJlbD48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJ3YXJuaW5nXCI+IHdhcm5pbmcgKGFwcGx5IFwib3JhbmdlXCIgY2xhc3MpPC9sYWJlbD5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgLnN0cmlrZSB7XG4gICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1xuICAgICAgIH1cbiAgICAgICAuYm9sZCB7XG4gICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgIH1cbiAgICAgICAucmVkIHtcbiAgICAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgICB9XG4gICAgICAgLmhhcy1lcnJvciB7XG4gICAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHllbGxvdztcbiAgICAgICB9XG4gICAgICAgLm9yYW5nZSB7XG4gICAgICAgICAgIGNvbG9yOiBvcmFuZ2U7XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgcHMgPSBlbGVtZW50LmFsbChieS5jc3MoJ3AnKSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIGxldCB5b3UgdG9nZ2xlIHRoZSBjbGFzcycsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICBleHBlY3QocHMuZmlyc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLm5vdC50b01hdGNoKC9ib2xkLyk7XG4gICAgICAgICBleHBlY3QocHMuZmlyc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLm5vdC50b01hdGNoKC9oYXMtZXJyb3IvKTtcblxuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnaW1wb3J0YW50JykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QocHMuZmlyc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvTWF0Y2goL2JvbGQvKTtcblxuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnZXJyb3InKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChwcy5maXJzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9NYXRjaCgvaGFzLWVycm9yLyk7XG4gICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIGxldCB5b3UgdG9nZ2xlIHN0cmluZyBleGFtcGxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QocHMuZ2V0KDEpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZScpKS5jbGVhcigpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGUnKSkuc2VuZEtleXMoJ3JlZCcpO1xuICAgICAgICAgZXhwZWN0KHBzLmdldCgxKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJ3JlZCcpO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ2FycmF5IGV4YW1wbGUgc2hvdWxkIGhhdmUgMyBjbGFzc2VzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QocHMuZ2V0KDIpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZTEnKSkuc2VuZEtleXMoJ2JvbGQnKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlMicpKS5zZW5kS2V5cygnc3RyaWtlJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZTMnKSkuc2VuZEtleXMoJ3JlZCcpO1xuICAgICAgICAgZXhwZWN0KHBzLmdldCgyKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJ2JvbGQgc3RyaWtlIHJlZCcpO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ2FycmF5IHdpdGggbWFwIGV4YW1wbGUgc2hvdWxkIGhhdmUgMiBjbGFzc2VzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QocHMubGFzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZTQnKSkuc2VuZEtleXMoJ2JvbGQnKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3dhcm5pbmcnKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChwcy5sYXN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCdib2xkIG9yYW5nZScpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG5cbiAgICMjIEFuaW1hdGlvbnNcblxuICAgVGhlIGV4YW1wbGUgYmVsb3cgZGVtb25zdHJhdGVzIGhvdyB0byBwZXJmb3JtIGFuaW1hdGlvbnMgdXNpbmcgbmdDbGFzcy5cblxuICAgPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8aW5wdXQgaWQ9XCJzZXRidG5cIiB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJzZXRcIiBuZy1jbGljaz1cIm15VmFyPSdteS1jbGFzcydcIj5cbiAgICAgIDxpbnB1dCBpZD1cImNsZWFyYnRuXCIgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiY2xlYXJcIiBuZy1jbGljaz1cIm15VmFyPScnXCI+XG4gICAgICA8YnI+XG4gICAgICA8c3BhbiBjbGFzcz1cImJhc2UtY2xhc3NcIiBuZy1jbGFzcz1cIm15VmFyXCI+U2FtcGxlIFRleHQ8L3NwYW4+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgIC5iYXNlLWNsYXNzIHtcbiAgICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcbiAgICAgICB9XG5cbiAgICAgICAuYmFzZS1jbGFzcy5teS1jbGFzcyB7XG4gICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgICAgZm9udC1zaXplOjNlbTtcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnLmJhc2UtY2xhc3MnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QuXG4gICAgICAgICAgIHRvTWF0Y2goL215LWNsYXNzLyk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ3NldGJ0bicpKS5jbGljaygpO1xuXG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJy5iYXNlLWNsYXNzJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkuXG4gICAgICAgICAgIHRvTWF0Y2goL215LWNsYXNzLyk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2NsZWFyYnRuJykpLmNsaWNrKCk7XG5cbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnLmJhc2UtY2xhc3MnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QuXG4gICAgICAgICAgIHRvTWF0Y2goL215LWNsYXNzLyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cblxuXG4gICAjIyBuZ0NsYXNzIGFuZCBwcmUtZXhpc3RpbmcgQ1NTMyBUcmFuc2l0aW9ucy9BbmltYXRpb25zXG4gICBUaGUgbmdDbGFzcyBkaXJlY3RpdmUgc3RpbGwgc3VwcG9ydHMgQ1NTMyBUcmFuc2l0aW9ucy9BbmltYXRpb25zIGV2ZW4gaWYgdGhleSBkbyBub3QgZm9sbG93IHRoZSBuZ0FuaW1hdGUgQ1NTIG5hbWluZyBzdHJ1Y3R1cmUuXG4gICBVcG9uIGFuaW1hdGlvbiBuZ0FuaW1hdGUgd2lsbCBhcHBseSBzdXBwbGVtZW50YXJ5IENTUyBjbGFzc2VzIHRvIHRyYWNrIHRoZSBzdGFydCBhbmQgZW5kIG9mIGFuIGFuaW1hdGlvbiwgYnV0IHRoaXMgd2lsbCBub3QgaGluZGVyXG4gICBhbnkgcHJlLWV4aXN0aW5nIENTUyB0cmFuc2l0aW9ucyBhbHJlYWR5IG9uIHRoZSBlbGVtZW50LiBUbyBnZXQgYW4gaWRlYSBvZiB3aGF0IGhhcHBlbnMgZHVyaW5nIGEgY2xhc3MtYmFzZWQgYW5pbWF0aW9uLCBiZSBzdXJlXG4gICB0byB2aWV3IHRoZSBzdGVwIGJ5IHN0ZXAgZGV0YWlscyBvZiB7QGxpbmsgJGFuaW1hdGUjYWRkQ2xhc3MgJGFuaW1hdGUuYWRkQ2xhc3N9IGFuZFxuICAge0BsaW5rICRhbmltYXRlI3JlbW92ZUNsYXNzICRhbmltYXRlLnJlbW92ZUNsYXNzfS5cbiAqL1xudmFyIG5nQ2xhc3NEaXJlY3RpdmUgPSBjbGFzc0RpcmVjdGl2ZSgnJywgdHJ1ZSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbGFzc09kZFxuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQ2xhc3NPZGRgIGFuZCBgbmdDbGFzc0V2ZW5gIGRpcmVjdGl2ZXMgd29yayBleGFjdGx5IGFzXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xhc3MgbmdDbGFzc30sIGV4Y2VwdCB0aGV5IHdvcmsgaW5cbiAqIGNvbmp1bmN0aW9uIHdpdGggYG5nUmVwZWF0YCBhbmQgdGFrZSBlZmZlY3Qgb25seSBvbiBvZGQgKGV2ZW4pIHJvd3MuXG4gKlxuICogVGhpcyBkaXJlY3RpdmUgY2FuIGJlIGFwcGxpZWQgb25seSB3aXRoaW4gdGhlIHNjb3BlIG9mIGFuXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0IG5nUmVwZWF0fS5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGFzc09kZCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsLiBUaGUgcmVzdWx0XG4gKiAgIG9mIHRoZSBldmFsdWF0aW9uIGNhbiBiZSBhIHN0cmluZyByZXByZXNlbnRpbmcgc3BhY2UgZGVsaW1pdGVkIGNsYXNzIG5hbWVzIG9yIGFuIGFycmF5LlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPG9sIG5nLWluaXQ9XCJuYW1lcz1bJ0pvaG4nLCAnTWFyeScsICdDYXRlJywgJ1N1eiddXCI+XG4gICAgICAgICAgPGxpIG5nLXJlcGVhdD1cIm5hbWUgaW4gbmFtZXNcIj5cbiAgICAgICAgICAgPHNwYW4gbmctY2xhc3Mtb2RkPVwiJ29kZCdcIiBuZy1jbGFzcy1ldmVuPVwiJ2V2ZW4nXCI+XG4gICAgICAgICAgICAge3tuYW1lfX1cbiAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgIDwvb2w+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgIC5vZGQge1xuICAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgICB9XG4gICAgICAgLmV2ZW4ge1xuICAgICAgICAgY29sb3I6IGJsdWU7XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWNsYXNzLW9kZCBhbmQgbmctY2xhc3MtZXZlbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkucmVwZWF0ZXIoJ25hbWUgaW4gbmFtZXMnKS5yb3coMCkuY29sdW1uKCduYW1lJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkuXG4gICAgICAgICAgIHRvTWF0Y2goL29kZC8pO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkucmVwZWF0ZXIoJ25hbWUgaW4gbmFtZXMnKS5yb3coMSkuY29sdW1uKCduYW1lJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkuXG4gICAgICAgICAgIHRvTWF0Y2goL2V2ZW4vKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdDbGFzc09kZERpcmVjdGl2ZSA9IGNsYXNzRGlyZWN0aXZlKCdPZGQnLCAwKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NsYXNzRXZlblxuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQ2xhc3NPZGRgIGFuZCBgbmdDbGFzc0V2ZW5gIGRpcmVjdGl2ZXMgd29yayBleGFjdGx5IGFzXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xhc3MgbmdDbGFzc30sIGV4Y2VwdCB0aGV5IHdvcmsgaW5cbiAqIGNvbmp1bmN0aW9uIHdpdGggYG5nUmVwZWF0YCBhbmQgdGFrZSBlZmZlY3Qgb25seSBvbiBvZGQgKGV2ZW4pIHJvd3MuXG4gKlxuICogVGhpcyBkaXJlY3RpdmUgY2FuIGJlIGFwcGxpZWQgb25seSB3aXRoaW4gdGhlIHNjb3BlIG9mIGFuXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0IG5nUmVwZWF0fS5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGFzc0V2ZW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbC4gVGhlXG4gKiAgIHJlc3VsdCBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzcyBuYW1lcyBvciBhbiBhcnJheS5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxvbCBuZy1pbml0PVwibmFtZXM9WydKb2huJywgJ01hcnknLCAnQ2F0ZScsICdTdXonXVwiPlxuICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJuYW1lIGluIG5hbWVzXCI+XG4gICAgICAgICAgIDxzcGFuIG5nLWNsYXNzLW9kZD1cIidvZGQnXCIgbmctY2xhc3MtZXZlbj1cIidldmVuJ1wiPlxuICAgICAgICAgICAgIHt7bmFtZX19ICZuYnNwOyAmbmJzcDsgJm5ic3A7XG4gICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L29sPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAub2RkIHtcbiAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgfVxuICAgICAgIC5ldmVuIHtcbiAgICAgICAgIGNvbG9yOiBibHVlO1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGFzcy1vZGQgYW5kIG5nLWNsYXNzLWV2ZW4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDApLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9vZGQvKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDEpLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9ldmVuLyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQ2xhc3NFdmVuRGlyZWN0aXZlID0gY2xhc3NEaXJlY3RpdmUoJ0V2ZW4nLCAxKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0Nsb2FrXG4gKiBAcmVzdHJpY3QgQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdDbG9ha2AgZGlyZWN0aXZlIGlzIHVzZWQgdG8gcHJldmVudCB0aGUgQW5ndWxhciBodG1sIHRlbXBsYXRlIGZyb20gYmVpbmcgYnJpZWZseVxuICogZGlzcGxheWVkIGJ5IHRoZSBicm93c2VyIGluIGl0cyByYXcgKHVuY29tcGlsZWQpIGZvcm0gd2hpbGUgeW91ciBhcHBsaWNhdGlvbiBpcyBsb2FkaW5nLiBVc2UgdGhpc1xuICogZGlyZWN0aXZlIHRvIGF2b2lkIHRoZSB1bmRlc2lyYWJsZSBmbGlja2VyIGVmZmVjdCBjYXVzZWQgYnkgdGhlIGh0bWwgdGVtcGxhdGUgZGlzcGxheS5cbiAqXG4gKiBUaGUgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIHRvIHRoZSBgPGJvZHk+YCBlbGVtZW50LCBidXQgdGhlIHByZWZlcnJlZCB1c2FnZSBpcyB0byBhcHBseVxuICogbXVsdGlwbGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZXMgdG8gc21hbGwgcG9ydGlvbnMgb2YgdGhlIHBhZ2UgdG8gcGVybWl0IHByb2dyZXNzaXZlIHJlbmRlcmluZ1xuICogb2YgdGhlIGJyb3dzZXIgdmlldy5cbiAqXG4gKiBgbmdDbG9ha2Agd29ya3MgaW4gY29vcGVyYXRpb24gd2l0aCB0aGUgZm9sbG93aW5nIGNzcyBydWxlIGVtYmVkZGVkIHdpdGhpbiBgYW5ndWxhci5qc2AgYW5kXG4gKiBgYW5ndWxhci5taW4uanNgLlxuICogRm9yIENTUCBtb2RlIHBsZWFzZSBhZGQgYGFuZ3VsYXItY3NwLmNzc2AgdG8geW91ciBodG1sIGZpbGUgKHNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ3NwIG5nQ3NwfSkuXG4gKlxuICogYGBgY3NzXG4gKiBbbmdcXDpjbG9ha10sIFtuZy1jbG9ha10sIFtkYXRhLW5nLWNsb2FrXSwgW3gtbmctY2xvYWtdLCAubmctY2xvYWssIC54LW5nLWNsb2FrIHtcbiAqICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGlzIGNzcyBydWxlIGlzIGxvYWRlZCBieSB0aGUgYnJvd3NlciwgYWxsIGh0bWwgZWxlbWVudHMgKGluY2x1ZGluZyB0aGVpciBjaGlsZHJlbikgdGhhdFxuICogYXJlIHRhZ2dlZCB3aXRoIHRoZSBgbmdDbG9ha2AgZGlyZWN0aXZlIGFyZSBoaWRkZW4uIFdoZW4gQW5ndWxhciBlbmNvdW50ZXJzIHRoaXMgZGlyZWN0aXZlXG4gKiBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uIG9mIHRoZSB0ZW1wbGF0ZSBpdCBkZWxldGVzIHRoZSBgbmdDbG9ha2AgZWxlbWVudCBhdHRyaWJ1dGUsIG1ha2luZ1xuICogdGhlIGNvbXBpbGVkIGVsZW1lbnQgdmlzaWJsZS5cbiAqXG4gKiBGb3IgdGhlIGJlc3QgcmVzdWx0LCB0aGUgYGFuZ3VsYXIuanNgIHNjcmlwdCBtdXN0IGJlIGxvYWRlZCBpbiB0aGUgaGVhZCBzZWN0aW9uIG9mIHRoZSBodG1sXG4gKiBkb2N1bWVudDsgYWx0ZXJuYXRpdmVseSwgdGhlIGNzcyBydWxlIGFib3ZlIG11c3QgYmUgaW5jbHVkZWQgaW4gdGhlIGV4dGVybmFsIHN0eWxlc2hlZXQgb2YgdGhlXG4gKiBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxkaXYgaWQ9XCJ0ZW1wbGF0ZTFcIiBuZy1jbG9haz57eyAnaGVsbG8nIH19PC9kaXY+XG4gICAgICAgIDxkaXYgaWQ9XCJ0ZW1wbGF0ZTJcIiBjbGFzcz1cIm5nLWNsb2FrXCI+e3sgJ3dvcmxkJyB9fTwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIHJlbW92ZSB0aGUgdGVtcGxhdGUgZGlyZWN0aXZlIGFuZCBjc3MgY2xhc3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdCgkKCcjdGVtcGxhdGUxJykuZ2V0QXR0cmlidXRlKCduZy1jbG9haycpKS5cbiAgICAgICAgICAgdG9CZU51bGwoKTtcbiAgICAgICAgIGV4cGVjdCgkKCcjdGVtcGxhdGUyJykuZ2V0QXR0cmlidXRlKCduZy1jbG9haycpKS5cbiAgICAgICAgICAgdG9CZU51bGwoKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICpcbiAqL1xudmFyIG5nQ2xvYWtEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7XG4gIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHtcbiAgICBhdHRyLiRzZXQoJ25nQ2xvYWsnLCB1bmRlZmluZWQpO1xuICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ25nLWNsb2FrJyk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ29udHJvbGxlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0NvbnRyb2xsZXJgIGRpcmVjdGl2ZSBhdHRhY2hlcyBhIGNvbnRyb2xsZXIgY2xhc3MgdG8gdGhlIHZpZXcuIFRoaXMgaXMgYSBrZXkgYXNwZWN0IG9mIGhvdyBhbmd1bGFyXG4gKiBzdXBwb3J0cyB0aGUgcHJpbmNpcGxlcyBiZWhpbmQgdGhlIE1vZGVsLVZpZXctQ29udHJvbGxlciBkZXNpZ24gcGF0dGVybi5cbiAqXG4gKiBNVkMgY29tcG9uZW50cyBpbiBhbmd1bGFyOlxuICpcbiAqICogTW9kZWwg4oCUIE1vZGVscyBhcmUgdGhlIHByb3BlcnRpZXMgb2YgYSBzY29wZTsgc2NvcGVzIGFyZSBhdHRhY2hlZCB0byB0aGUgRE9NIHdoZXJlIHNjb3BlIHByb3BlcnRpZXNcbiAqICAgYXJlIGFjY2Vzc2VkIHRocm91Z2ggYmluZGluZ3MuXG4gKiAqIFZpZXcg4oCUIFRoZSB0ZW1wbGF0ZSAoSFRNTCB3aXRoIGRhdGEgYmluZGluZ3MpIHRoYXQgaXMgcmVuZGVyZWQgaW50byB0aGUgVmlldy5cbiAqICogQ29udHJvbGxlciDigJQgVGhlIGBuZ0NvbnRyb2xsZXJgIGRpcmVjdGl2ZSBzcGVjaWZpZXMgYSBDb250cm9sbGVyIGNsYXNzOyB0aGUgY2xhc3MgY29udGFpbnMgYnVzaW5lc3NcbiAqICAgbG9naWMgYmVoaW5kIHRoZSBhcHBsaWNhdGlvbiB0byBkZWNvcmF0ZSB0aGUgc2NvcGUgd2l0aCBmdW5jdGlvbnMgYW5kIHZhbHVlc1xuICpcbiAqIE5vdGUgdGhhdCB5b3UgY2FuIGFsc28gYXR0YWNoIGNvbnRyb2xsZXJzIHRvIHRoZSBET00gYnkgZGVjbGFyaW5nIGl0IGluIGEgcm91dGUgZGVmaW5pdGlvblxuICogdmlhIHRoZSB7QGxpbmsgbmdSb3V0ZS4kcm91dGUgJHJvdXRlfSBzZXJ2aWNlLiBBIGNvbW1vbiBtaXN0YWtlIGlzIHRvIGRlY2xhcmUgdGhlIGNvbnRyb2xsZXJcbiAqIGFnYWluIHVzaW5nIGBuZy1jb250cm9sbGVyYCBpbiB0aGUgdGVtcGxhdGUgaXRzZWxmLiAgVGhpcyB3aWxsIGNhdXNlIHRoZSBjb250cm9sbGVyIHRvIGJlIGF0dGFjaGVkXG4gKiBhbmQgZXhlY3V0ZWQgdHdpY2UuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAc2NvcGVcbiAqIEBwcmlvcml0eSA1MDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDb250cm9sbGVyIE5hbWUgb2YgYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiByZWdpc3RlcmVkIHdpdGggdGhlIGN1cnJlbnRcbiAqIHtAbGluayBuZy4kY29udHJvbGxlclByb3ZpZGVyICRjb250cm9sbGVyUHJvdmlkZXJ9IG9yIGFuIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259XG4gKiB0aGF0IG9uIHRoZSBjdXJyZW50IHNjb3BlIGV2YWx1YXRlcyB0byBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICpcbiAqIFRoZSBjb250cm9sbGVyIGluc3RhbmNlIGNhbiBiZSBwdWJsaXNoZWQgaW50byBhIHNjb3BlIHByb3BlcnR5IGJ5IHNwZWNpZnlpbmdcbiAqIGBuZy1jb250cm9sbGVyPVwiYXMgcHJvcGVydHlOYW1lXCJgLlxuICpcbiAqIElmIHRoZSBjdXJyZW50IGAkY29udHJvbGxlclByb3ZpZGVyYCBpcyBjb25maWd1cmVkIHRvIHVzZSBnbG9iYWxzICh2aWFcbiAqIHtAbGluayBuZy4kY29udHJvbGxlclByb3ZpZGVyI2FsbG93R2xvYmFscyBgJGNvbnRyb2xsZXJQcm92aWRlci5hbGxvd0dsb2JhbHMoKWAgfSksIHRoaXMgbWF5XG4gKiBhbHNvIGJlIHRoZSBuYW1lIG9mIGEgZ2xvYmFsbHkgYWNjZXNzaWJsZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiAobm90IHJlY29tbWVuZGVkKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSBpcyBhIHNpbXBsZSBmb3JtIGZvciBlZGl0aW5nIHVzZXIgY29udGFjdCBpbmZvcm1hdGlvbi4gQWRkaW5nLCByZW1vdmluZywgY2xlYXJpbmcsIGFuZFxuICogZ3JlZXRpbmcgYXJlIG1ldGhvZHMgZGVjbGFyZWQgb24gdGhlIGNvbnRyb2xsZXIgKHNlZSBzb3VyY2UgdGFiKS4gVGhlc2UgbWV0aG9kcyBjYW5cbiAqIGVhc2lseSBiZSBjYWxsZWQgZnJvbSB0aGUgYW5ndWxhciBtYXJrdXAuIEFueSBjaGFuZ2VzIHRvIHRoZSBkYXRhIGFyZSBhdXRvbWF0aWNhbGx5IHJlZmxlY3RlZFxuICogaW4gdGhlIFZpZXcgd2l0aG91dCB0aGUgbmVlZCBmb3IgYSBtYW51YWwgdXBkYXRlLlxuICpcbiAqIFR3byBkaWZmZXJlbnQgZGVjbGFyYXRpb24gc3R5bGVzIGFyZSBpbmNsdWRlZCBiZWxvdzpcbiAqXG4gKiAqIG9uZSBiaW5kcyBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzIGRpcmVjdGx5IG9udG8gdGhlIGNvbnRyb2xsZXIgdXNpbmcgYHRoaXNgOlxuICogYG5nLWNvbnRyb2xsZXI9XCJTZXR0aW5nc0NvbnRyb2xsZXIxIGFzIHNldHRpbmdzXCJgXG4gKiAqIG9uZSBpbmplY3RzIGAkc2NvcGVgIGludG8gdGhlIGNvbnRyb2xsZXI6XG4gKiBgbmctY29udHJvbGxlcj1cIlNldHRpbmdzQ29udHJvbGxlcjJcImBcbiAqXG4gKiBUaGUgc2Vjb25kIG9wdGlvbiBpcyBtb3JlIGNvbW1vbiBpbiB0aGUgQW5ndWxhciBjb21tdW5pdHksIGFuZCBpcyBnZW5lcmFsbHkgdXNlZCBpbiBib2lsZXJwbGF0ZXNcbiAqIGFuZCBpbiB0aGlzIGd1aWRlLiBIb3dldmVyLCB0aGVyZSBhcmUgYWR2YW50YWdlcyB0byBiaW5kaW5nIHByb3BlcnRpZXMgZGlyZWN0bHkgdG8gdGhlIGNvbnRyb2xsZXJcbiAqIGFuZCBhdm9pZGluZyBzY29wZS5cbiAqXG4gKiAqIFVzaW5nIGBjb250cm9sbGVyIGFzYCBtYWtlcyBpdCBvYnZpb3VzIHdoaWNoIGNvbnRyb2xsZXIgeW91IGFyZSBhY2Nlc3NpbmcgaW4gdGhlIHRlbXBsYXRlIHdoZW5cbiAqIG11bHRpcGxlIGNvbnRyb2xsZXJzIGFwcGx5IHRvIGFuIGVsZW1lbnQuXG4gKiAqIElmIHlvdSBhcmUgd3JpdGluZyB5b3VyIGNvbnRyb2xsZXJzIGFzIGNsYXNzZXMgeW91IGhhdmUgZWFzaWVyIGFjY2VzcyB0byB0aGUgcHJvcGVydGllcyBhbmRcbiAqIG1ldGhvZHMsIHdoaWNoIHdpbGwgYXBwZWFyIG9uIHRoZSBzY29wZSwgZnJvbSBpbnNpZGUgdGhlIGNvbnRyb2xsZXIgY29kZS5cbiAqICogU2luY2UgdGhlcmUgaXMgYWx3YXlzIGEgYC5gIGluIHRoZSBiaW5kaW5ncywgeW91IGRvbid0IGhhdmUgdG8gd29ycnkgYWJvdXQgcHJvdG90eXBhbFxuICogaW5oZXJpdGFuY2UgbWFza2luZyBwcmltaXRpdmVzLlxuICpcbiAqIFRoaXMgZXhhbXBsZSBkZW1vbnN0cmF0ZXMgdGhlIGBjb250cm9sbGVyIGFzYCBzeW50YXguXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cIm5nQ29udHJvbGxlckFzXCIgbW9kdWxlPVwiY29udHJvbGxlckFzRXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgPGRpdiBpZD1cImN0cmwtYXMtZXhtcGxcIiBuZy1jb250cm9sbGVyPVwiU2V0dGluZ3NDb250cm9sbGVyMSBhcyBzZXR0aW5nc1wiPlxuICogICAgICA8bGFiZWw+TmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJzZXR0aW5ncy5uYW1lXCIvPjwvbGFiZWw+XG4gKiAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzZXR0aW5ncy5ncmVldCgpXCI+Z3JlZXQ8L2J1dHRvbj48YnIvPlxuICogICAgICBDb250YWN0OlxuICogICAgICA8dWw+XG4gKiAgICAgICAgPGxpIG5nLXJlcGVhdD1cImNvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHNcIj5cbiAqICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJjb250YWN0LnR5cGVcIiBhcmlhLWxhYmVsPVwiQ29udGFjdCBtZXRob2RcIiBpZD1cInNlbGVjdF97eyRpbmRleH19XCI+XG4gKiAgICAgICAgICAgICA8b3B0aW9uPnBob25lPC9vcHRpb24+XG4gKiAgICAgICAgICAgICA8b3B0aW9uPmVtYWlsPC9vcHRpb24+XG4gKiAgICAgICAgICA8L3NlbGVjdD5cbiAqICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwiY29udGFjdC52YWx1ZVwiIGFyaWEtbGFiZWxsZWRieT1cInNlbGVjdF97eyRpbmRleH19XCIgLz5cbiAqICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzZXR0aW5ncy5jbGVhckNvbnRhY3QoY29udGFjdClcIj5jbGVhcjwvYnV0dG9uPlxuICogICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInNldHRpbmdzLnJlbW92ZUNvbnRhY3QoY29udGFjdClcIiBhcmlhLWxhYmVsPVwiUmVtb3ZlXCI+WDwvYnV0dG9uPlxuICogICAgICAgIDwvbGk+XG4gKiAgICAgICAgPGxpPjxidXR0b24gbmctY2xpY2s9XCJzZXR0aW5ncy5hZGRDb250YWN0KClcIj5hZGQ8L2J1dHRvbj48L2xpPlxuICogICAgIDwvdWw+XG4gKiAgICA8L2Rpdj5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgICBhbmd1bGFyLm1vZHVsZSgnY29udHJvbGxlckFzRXhhbXBsZScsIFtdKVxuICogICAgICAuY29udHJvbGxlcignU2V0dGluZ3NDb250cm9sbGVyMScsIFNldHRpbmdzQ29udHJvbGxlcjEpO1xuICpcbiAqICAgIGZ1bmN0aW9uIFNldHRpbmdzQ29udHJvbGxlcjEoKSB7XG4gKiAgICAgIHRoaXMubmFtZSA9IFwiSm9obiBTbWl0aFwiO1xuICogICAgICB0aGlzLmNvbnRhY3RzID0gW1xuICogICAgICAgIHt0eXBlOiAncGhvbmUnLCB2YWx1ZTogJzQwOCA1NTUgMTIxMid9LFxuICogICAgICAgIHt0eXBlOiAnZW1haWwnLCB2YWx1ZTogJ2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnfSBdO1xuICogICAgfVxuICpcbiAqICAgIFNldHRpbmdzQ29udHJvbGxlcjEucHJvdG90eXBlLmdyZWV0ID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgIGFsZXJ0KHRoaXMubmFtZSk7XG4gKiAgICB9O1xuICpcbiAqICAgIFNldHRpbmdzQ29udHJvbGxlcjEucHJvdG90eXBlLmFkZENvbnRhY3QgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgdGhpcy5jb250YWN0cy5wdXNoKHt0eXBlOiAnZW1haWwnLCB2YWx1ZTogJ3lvdXJuYW1lQGV4YW1wbGUub3JnJ30pO1xuICogICAgfTtcbiAqXG4gKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5yZW1vdmVDb250YWN0ID0gZnVuY3Rpb24oY29udGFjdFRvUmVtb3ZlKSB7XG4gKiAgICAgdmFyIGluZGV4ID0gdGhpcy5jb250YWN0cy5pbmRleE9mKGNvbnRhY3RUb1JlbW92ZSk7XG4gKiAgICAgIHRoaXMuY29udGFjdHMuc3BsaWNlKGluZGV4LCAxKTtcbiAqICAgIH07XG4gKlxuICogICAgU2V0dGluZ3NDb250cm9sbGVyMS5wcm90b3R5cGUuY2xlYXJDb250YWN0ID0gZnVuY3Rpb24oY29udGFjdCkge1xuICogICAgICBjb250YWN0LnR5cGUgPSAncGhvbmUnO1xuICogICAgICBjb250YWN0LnZhbHVlID0gJyc7XG4gKiAgICB9O1xuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgICBpdCgnc2hvdWxkIGNoZWNrIGNvbnRyb2xsZXIgYXMnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIHZhciBjb250YWluZXIgPSBlbGVtZW50KGJ5LmlkKCdjdHJsLWFzLWV4bXBsJykpO1xuICogICAgICAgICBleHBlY3QoY29udGFpbmVyLmVsZW1lbnQoYnkubW9kZWwoJ3NldHRpbmdzLm5hbWUnKSlcbiAqICAgICAgICAgICAuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0JlKCdKb2huIFNtaXRoJyk7XG4gKlxuICogICAgICAgdmFyIGZpcnN0UmVwZWF0ID1cbiAqICAgICAgICAgICBjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBzZXR0aW5ncy5jb250YWN0cycpLnJvdygwKSk7XG4gKiAgICAgICB2YXIgc2Vjb25kUmVwZWF0ID1cbiAqICAgICAgICAgICBjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBzZXR0aW5ncy5jb250YWN0cycpLnJvdygxKSk7XG4gKlxuICogICAgICAgZXhwZWN0KGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgIC50b0JlKCc0MDggNTU1IDEyMTInKTtcbiAqXG4gKiAgICAgICBleHBlY3Qoc2Vjb25kUmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgIC50b0JlKCdqb2huLnNtaXRoQGV4YW1wbGUub3JnJyk7XG4gKlxuICogICAgICAgZmlyc3RSZXBlYXQuZWxlbWVudChieS5idXR0b25UZXh0KCdjbGVhcicpKS5jbGljaygpO1xuICpcbiAqICAgICAgIGV4cGVjdChmaXJzdFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgICAudG9CZSgnJyk7XG4gKlxuICogICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkuYnV0dG9uVGV4dCgnYWRkJykpLmNsaWNrKCk7XG4gKlxuICogICAgICAgZXhwZWN0KGNvbnRhaW5lci5lbGVtZW50KGJ5LnJlcGVhdGVyKCdjb250YWN0IGluIHNldHRpbmdzLmNvbnRhY3RzJykucm93KDIpKVxuICogICAgICAgICAgIC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpXG4gKiAgICAgICAgICAgLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgICAudG9CZSgneW91cm5hbWVAZXhhbXBsZS5vcmcnKTtcbiAqICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIFRoaXMgZXhhbXBsZSBkZW1vbnN0cmF0ZXMgdGhlIFwiYXR0YWNoIHRvIGAkc2NvcGVgXCIgc3R5bGUgb2YgY29udHJvbGxlci5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdDb250cm9sbGVyXCIgbW9kdWxlPVwiY29udHJvbGxlckV4YW1wbGVcIj5cbiAqICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICA8ZGl2IGlkPVwiY3RybC1leG1wbFwiIG5nLWNvbnRyb2xsZXI9XCJTZXR0aW5nc0NvbnRyb2xsZXIyXCI+XG4gKiAgICAgPGxhYmVsPk5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibmFtZVwiLz48L2xhYmVsPlxuICogICAgIDxidXR0b24gbmctY2xpY2s9XCJncmVldCgpXCI+Z3JlZXQ8L2J1dHRvbj48YnIvPlxuICogICAgIENvbnRhY3Q6XG4gKiAgICAgPHVsPlxuICogICAgICAgPGxpIG5nLXJlcGVhdD1cImNvbnRhY3QgaW4gY29udGFjdHNcIj5cbiAqICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cImNvbnRhY3QudHlwZVwiIGlkPVwic2VsZWN0X3t7JGluZGV4fX1cIj5cbiAqICAgICAgICAgICAgPG9wdGlvbj5waG9uZTwvb3B0aW9uPlxuICogICAgICAgICAgICA8b3B0aW9uPmVtYWlsPC9vcHRpb24+XG4gKiAgICAgICAgIDwvc2VsZWN0PlxuICogICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cImNvbnRhY3QudmFsdWVcIiBhcmlhLWxhYmVsbGVkYnk9XCJzZWxlY3Rfe3skaW5kZXh9fVwiIC8+XG4gKiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJjbGVhckNvbnRhY3QoY29udGFjdClcIj5jbGVhcjwvYnV0dG9uPlxuICogICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwicmVtb3ZlQ29udGFjdChjb250YWN0KVwiPlg8L2J1dHRvbj5cbiAqICAgICAgIDwvbGk+XG4gKiAgICAgICA8bGk+WyA8YnV0dG9uIG5nLWNsaWNrPVwiYWRkQ29udGFjdCgpXCI+YWRkPC9idXR0b24+IF08L2xpPlxuICogICAgPC91bD5cbiAqICAgPC9kaXY+XG4gKiAgPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICAgYW5ndWxhci5tb2R1bGUoJ2NvbnRyb2xsZXJFeGFtcGxlJywgW10pXG4gKiAgICAgLmNvbnRyb2xsZXIoJ1NldHRpbmdzQ29udHJvbGxlcjInLCBbJyRzY29wZScsIFNldHRpbmdzQ29udHJvbGxlcjJdKTtcbiAqXG4gKiAgIGZ1bmN0aW9uIFNldHRpbmdzQ29udHJvbGxlcjIoJHNjb3BlKSB7XG4gKiAgICAgJHNjb3BlLm5hbWUgPSBcIkpvaG4gU21pdGhcIjtcbiAqICAgICAkc2NvcGUuY29udGFjdHMgPSBbXG4gKiAgICAgICB7dHlwZToncGhvbmUnLCB2YWx1ZTonNDA4IDU1NSAxMjEyJ30sXG4gKiAgICAgICB7dHlwZTonZW1haWwnLCB2YWx1ZTonam9obi5zbWl0aEBleGFtcGxlLm9yZyd9IF07XG4gKlxuICogICAgICRzY29wZS5ncmVldCA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgYWxlcnQoJHNjb3BlLm5hbWUpO1xuICogICAgIH07XG4gKlxuICogICAgICRzY29wZS5hZGRDb250YWN0ID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgICAkc2NvcGUuY29udGFjdHMucHVzaCh7dHlwZTonZW1haWwnLCB2YWx1ZToneW91cm5hbWVAZXhhbXBsZS5vcmcnfSk7XG4gKiAgICAgfTtcbiAqXG4gKiAgICAgJHNjb3BlLnJlbW92ZUNvbnRhY3QgPSBmdW5jdGlvbihjb250YWN0VG9SZW1vdmUpIHtcbiAqICAgICAgIHZhciBpbmRleCA9ICRzY29wZS5jb250YWN0cy5pbmRleE9mKGNvbnRhY3RUb1JlbW92ZSk7XG4gKiAgICAgICAkc2NvcGUuY29udGFjdHMuc3BsaWNlKGluZGV4LCAxKTtcbiAqICAgICB9O1xuICpcbiAqICAgICAkc2NvcGUuY2xlYXJDb250YWN0ID0gZnVuY3Rpb24oY29udGFjdCkge1xuICogICAgICAgY29udGFjdC50eXBlID0gJ3Bob25lJztcbiAqICAgICAgIGNvbnRhY3QudmFsdWUgPSAnJztcbiAqICAgICB9O1xuICogICB9XG4gKiAgPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgIGl0KCdzaG91bGQgY2hlY2sgY29udHJvbGxlcicsIGZ1bmN0aW9uKCkge1xuICogICAgICB2YXIgY29udGFpbmVyID0gZWxlbWVudChieS5pZCgnY3RybC1leG1wbCcpKTtcbiAqXG4gKiAgICAgIGV4cGVjdChjb250YWluZXIuZWxlbWVudChieS5tb2RlbCgnbmFtZScpKVxuICogICAgICAgICAgLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnSm9obiBTbWl0aCcpO1xuICpcbiAqICAgICAgdmFyIGZpcnN0UmVwZWF0ID1cbiAqICAgICAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LnJlcGVhdGVyKCdjb250YWN0IGluIGNvbnRhY3RzJykucm93KDApKTtcbiAqICAgICAgdmFyIHNlY29uZFJlcGVhdCA9XG4gKiAgICAgICAgICBjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBjb250YWN0cycpLnJvdygxKSk7XG4gKlxuICogICAgICBleHBlY3QoZmlyc3RSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAudG9CZSgnNDA4IDU1NSAxMjEyJyk7XG4gKiAgICAgIGV4cGVjdChzZWNvbmRSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAudG9CZSgnam9obi5zbWl0aEBleGFtcGxlLm9yZycpO1xuICpcbiAqICAgICAgZmlyc3RSZXBlYXQuZWxlbWVudChieS5idXR0b25UZXh0KCdjbGVhcicpKS5jbGljaygpO1xuICpcbiAqICAgICAgZXhwZWN0KGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgLnRvQmUoJycpO1xuICpcbiAqICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkuYnV0dG9uVGV4dCgnYWRkJykpLmNsaWNrKCk7XG4gKlxuICogICAgICBleHBlY3QoY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gY29udGFjdHMnKS5yb3coMikpXG4gKiAgICAgICAgICAuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKVxuICogICAgICAgICAgLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgIC50b0JlKCd5b3VybmFtZUBleGFtcGxlLm9yZycpO1xuICogICAgfSk7XG4gKiAgPC9maWxlPlxuICo8L2V4YW1wbGU+XG5cbiAqL1xudmFyIG5nQ29udHJvbGxlckRpcmVjdGl2ZSA9IFtmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHNjb3BlOiB0cnVlLFxuICAgIGNvbnRyb2xsZXI6ICdAJyxcbiAgICBwcmlvcml0eTogNTAwXG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NzcFxuICpcbiAqIEBlbGVtZW50IGh0bWxcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEFuZ3VsYXIgaGFzIHNvbWUgZmVhdHVyZXMgdGhhdCBjYW4gYnJlYWsgY2VydGFpblxuICogW0NTUCAoQ29udGVudCBTZWN1cml0eSBQb2xpY3kpXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9TZWN1cml0eS9DU1ApIHJ1bGVzLlxuICpcbiAqIElmIHlvdSBpbnRlbmQgdG8gaW1wbGVtZW50IHRoZXNlIHJ1bGVzIHRoZW4geW91IG11c3QgdGVsbCBBbmd1bGFyIG5vdCB0byB1c2UgdGhlc2UgZmVhdHVyZXMuXG4gKlxuICogVGhpcyBpcyBuZWNlc3Nhcnkgd2hlbiBkZXZlbG9waW5nIHRoaW5ncyBsaWtlIEdvb2dsZSBDaHJvbWUgRXh0ZW5zaW9ucyBvciBVbml2ZXJzYWwgV2luZG93cyBBcHBzLlxuICpcbiAqXG4gKiBUaGUgZm9sbG93aW5nIHJ1bGVzIGFmZmVjdCBBbmd1bGFyOlxuICpcbiAqICogYHVuc2FmZS1ldmFsYDogdGhpcyBydWxlIGZvcmJpZHMgYXBwcyB0byB1c2UgYGV2YWxgIG9yIGBGdW5jdGlvbihzdHJpbmcpYCBnZW5lcmF0ZWQgZnVuY3Rpb25zXG4gKiAoYW1vbmcgb3RoZXIgdGhpbmdzKS4gQW5ndWxhciBtYWtlcyB1c2Ugb2YgdGhpcyBpbiB0aGUge0BsaW5rICRwYXJzZX0gc2VydmljZSB0byBwcm92aWRlIGEgMzAlXG4gKiBpbmNyZWFzZSBpbiB0aGUgc3BlZWQgb2YgZXZhbHVhdGluZyBBbmd1bGFyIGV4cHJlc3Npb25zLlxuICpcbiAqICogYHVuc2FmZS1pbmxpbmVgOiB0aGlzIHJ1bGUgZm9yYmlkcyBhcHBzIGZyb20gaW5qZWN0IGN1c3RvbSBzdHlsZXMgaW50byB0aGUgZG9jdW1lbnQuIEFuZ3VsYXJcbiAqIG1ha2VzIHVzZSBvZiB0aGlzIHRvIGluY2x1ZGUgc29tZSBDU1MgcnVsZXMgKGUuZy4ge0BsaW5rIG5nQ2xvYWt9IGFuZCB7QGxpbmsgbmdIaWRlfSkuXG4gKiBUbyBtYWtlIHRoZXNlIGRpcmVjdGl2ZXMgd29yayB3aGVuIGEgQ1NQIHJ1bGUgaXMgYmxvY2tpbmcgaW5saW5lIHN0eWxlcywgeW91IG11c3QgbGluayB0byB0aGVcbiAqIGBhbmd1bGFyLWNzcC5jc3NgIGluIHlvdXIgSFRNTCBtYW51YWxseS5cbiAqXG4gKiBJZiB5b3UgZG8gbm90IHByb3ZpZGUgYG5nQ3NwYCB0aGVuIEFuZ3VsYXIgdHJpZXMgdG8gYXV0b2RldGVjdCBpZiBDU1AgaXMgYmxvY2tpbmcgdW5zYWZlLWV2YWxcbiAqIGFuZCBhdXRvbWF0aWNhbGx5IGRlYWN0aXZhdGVzIHRoaXMgZmVhdHVyZSBpbiB0aGUge0BsaW5rICRwYXJzZX0gc2VydmljZS4gVGhpcyBhdXRvZGV0ZWN0aW9uLFxuICogaG93ZXZlciwgdHJpZ2dlcnMgYSBDU1AgZXJyb3IgdG8gYmUgbG9nZ2VkIGluIHRoZSBjb25zb2xlOlxuICpcbiAqIGBgYFxuICogUmVmdXNlZCB0byBldmFsdWF0ZSBhIHN0cmluZyBhcyBKYXZhU2NyaXB0IGJlY2F1c2UgJ3Vuc2FmZS1ldmFsJyBpcyBub3QgYW4gYWxsb3dlZCBzb3VyY2Ugb2ZcbiAqIHNjcmlwdCBpbiB0aGUgZm9sbG93aW5nIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGRpcmVjdGl2ZTogXCJkZWZhdWx0LXNyYyAnc2VsZidcIi4gTm90ZSB0aGF0XG4gKiAnc2NyaXB0LXNyYycgd2FzIG5vdCBleHBsaWNpdGx5IHNldCwgc28gJ2RlZmF1bHQtc3JjJyBpcyB1c2VkIGFzIGEgZmFsbGJhY2suXG4gKiBgYGBcbiAqXG4gKiBUaGlzIGVycm9yIGlzIGhhcm1sZXNzIGJ1dCBhbm5veWluZy4gVG8gcHJldmVudCB0aGUgZXJyb3IgZnJvbSBzaG93aW5nIHVwLCBwdXQgdGhlIGBuZ0NzcGBcbiAqIGRpcmVjdGl2ZSBvbiBhbiBlbGVtZW50IG9mIHRoZSBIVE1MIGRvY3VtZW50IHRoYXQgYXBwZWFycyBiZWZvcmUgdGhlIGA8c2NyaXB0PmAgdGFnIHRoYXQgbG9hZHNcbiAqIHRoZSBgYW5ndWxhci5qc2AgZmlsZS5cbiAqXG4gKiAqTm90ZTogVGhpcyBkaXJlY3RpdmUgaXMgb25seSBhdmFpbGFibGUgaW4gdGhlIGBuZy1jc3BgIGFuZCBgZGF0YS1uZy1jc3BgIGF0dHJpYnV0ZSBmb3JtLipcbiAqXG4gKiBZb3UgY2FuIHNwZWNpZnkgd2hpY2ggb2YgdGhlIENTUCByZWxhdGVkIEFuZ3VsYXIgZmVhdHVyZXMgc2hvdWxkIGJlIGRlYWN0aXZhdGVkIGJ5IHByb3ZpZGluZ1xuICogYSB2YWx1ZSBmb3IgdGhlIGBuZy1jc3BgIGF0dHJpYnV0ZS4gVGhlIG9wdGlvbnMgYXJlIGFzIGZvbGxvd3M6XG4gKlxuICogKiBuby1pbmxpbmUtc3R5bGU6IHRoaXMgc3RvcHMgQW5ndWxhciBmcm9tIGluamVjdGluZyBDU1Mgc3R5bGVzIGludG8gdGhlIERPTVxuICpcbiAqICogbm8tdW5zYWZlLWV2YWw6IHRoaXMgc3RvcHMgQW5ndWxhciBmcm9tIG9wdGltaXNpbmcgJHBhcnNlIHdpdGggdW5zYWZlIGV2YWwgb2Ygc3RyaW5nc1xuICpcbiAqIFlvdSBjYW4gdXNlIHRoZXNlIHZhbHVlcyBpbiB0aGUgZm9sbG93aW5nIGNvbWJpbmF0aW9uczpcbiAqXG4gKlxuICogKiBObyBkZWNsYXJhdGlvbiBtZWFucyB0aGF0IEFuZ3VsYXIgd2lsbCBhc3N1bWUgdGhhdCB5b3UgY2FuIGRvIGlubGluZSBzdHlsZXMsIGJ1dCBpdCB3aWxsIGRvXG4gKiBhIHJ1bnRpbWUgY2hlY2sgZm9yIHVuc2FmZS1ldmFsLiBFLmcuIGA8Ym9keT5gLiBUaGlzIGlzIGJhY2t3YXJkbHkgY29tcGF0aWJsZSB3aXRoIHByZXZpb3VzIHZlcnNpb25zXG4gKiBvZiBBbmd1bGFyLlxuICpcbiAqICogQSBzaW1wbGUgYG5nLWNzcGAgKG9yIGBkYXRhLW5nLWNzcGApIGF0dHJpYnV0ZSB3aWxsIHRlbGwgQW5ndWxhciB0byBkZWFjdGl2YXRlIGJvdGggaW5saW5lXG4gKiBzdHlsZXMgYW5kIHVuc2FmZSBldmFsLiBFLmcuIGA8Ym9keSBuZy1jc3A+YC4gVGhpcyBpcyBiYWNrd2FyZGx5IGNvbXBhdGlibGUgd2l0aCBwcmV2aW91cyB2ZXJzaW9uc1xuICogb2YgQW5ndWxhci5cbiAqXG4gKiAqIFNwZWNpZnlpbmcgb25seSBgbm8tdW5zYWZlLWV2YWxgIHRlbGxzIEFuZ3VsYXIgdGhhdCB3ZSBtdXN0IG5vdCB1c2UgZXZhbCwgYnV0IHRoYXQgd2UgY2FuIGluamVjdFxuICogaW5saW5lIHN0eWxlcy4gRS5nLiBgPGJvZHkgbmctY3NwPVwibm8tdW5zYWZlLWV2YWxcIj5gLlxuICpcbiAqICogU3BlY2lmeWluZyBvbmx5IGBuby1pbmxpbmUtc3R5bGVgIHRlbGxzIEFuZ3VsYXIgdGhhdCB3ZSBtdXN0IG5vdCBpbmplY3Qgc3R5bGVzLCBidXQgdGhhdCB3ZSBjYW5cbiAqIHJ1biBldmFsIC0gbm8gYXV0b21jYXRpYyBjaGVjayBmb3IgdW5zYWZlIGV2YWwgd2lsbCBvY2N1ci4gRS5nLiBgPGJvZHkgbmctY3NwPVwibm8taW5saW5lLXN0eWxlXCI+YFxuICpcbiAqICogU3BlY2lmeWluZyBib3RoIGBuby11bnNhZmUtZXZhbGAgYW5kIGBuby1pbmxpbmUtc3R5bGVgIHRlbGxzIEFuZ3VsYXIgdGhhdCB3ZSBtdXN0IG5vdCBpbmplY3RcbiAqIHN0eWxlcyBub3IgdXNlIGV2YWwsIHdoaWNoIGlzIHRoZSBzYW1lIGFzIGFuIGVtcHR5OiBuZy1jc3AuXG4gKiBFLmcuYDxib2R5IG5nLWNzcD1cIm5vLWlubGluZS1zdHlsZTtuby11bnNhZmUtZXZhbFwiPmBcbiAqXG4gKiBAZXhhbXBsZVxuICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byBhcHBseSB0aGUgYG5nQ3NwYCBkaXJlY3RpdmUgdG8gdGhlIGBodG1sYCB0YWcuXG4gICBgYGBodG1sXG4gICAgIDwhZG9jdHlwZSBodG1sPlxuICAgICA8aHRtbCBuZy1hcHAgbmctY3NwPlxuICAgICAuLi5cbiAgICAgLi4uXG4gICAgIDwvaHRtbD5cbiAgIGBgYFxuICAqIEBleGFtcGxlXG4gICAgICAvLyBOb3RlOiB0aGUgc3VmZml4IGAuY3NwYCBpbiB0aGUgZXhhbXBsZSBuYW1lIHRyaWdnZXJzXG4gICAgICAvLyBjc3AgbW9kZSBpbiBvdXIgaHR0cCBzZXJ2ZXIhXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwiZXhhbXBsZS5jc3BcIiBtb2R1bGU9XCJjc3BFeGFtcGxlXCIgbmctY3NwPVwidHJ1ZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIk1haW5Db250cm9sbGVyIGFzIGN0cmxcIj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJjdHJsLmluYygpXCIgaWQ9XCJpbmNcIj5JbmNyZW1lbnQ8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPHNwYW4gaWQ9XCJjb3VudGVyXCI+XG4gICAgICAgICAgICAgICAge3tjdHJsLmNvdW50ZXJ9fVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImN0cmwuZXZpbCgpXCIgaWQ9XCJldmlsXCI+RXZpbDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8c3BhbiBpZD1cImV2aWxFcnJvclwiPlxuICAgICAgICAgICAgICAgIHt7Y3RybC5ldmlsRXJyb3J9fVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjc3BFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ01haW5Db250cm9sbGVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb3VudGVyID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLmluYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5jb3VudGVyKys7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLmV2aWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIC8vIGpzaGludCBldmlsOnRydWVcbiAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGV2YWwoJzErMicpO1xuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmV2aWxFcnJvciA9IGUubWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgdmFyIHV0aWwsIHdlYmRyaXZlcjtcblxuICAgICAgICAgIHZhciBpbmNCdG4gPSBlbGVtZW50KGJ5LmlkKCdpbmMnKSk7XG4gICAgICAgICAgdmFyIGNvdW50ZXIgPSBlbGVtZW50KGJ5LmlkKCdjb3VudGVyJykpO1xuICAgICAgICAgIHZhciBldmlsQnRuID0gZWxlbWVudChieS5pZCgnZXZpbCcpKTtcbiAgICAgICAgICB2YXIgZXZpbEVycm9yID0gZWxlbWVudChieS5pZCgnZXZpbEVycm9yJykpO1xuXG4gICAgICAgICAgZnVuY3Rpb24gZ2V0QW5kQ2xlYXJTZXZlcmVFcnJvcnMoKSB7XG4gICAgICAgICAgICByZXR1cm4gYnJvd3Nlci5tYW5hZ2UoKS5sb2dzKCkuZ2V0KCdicm93c2VyJykudGhlbihmdW5jdGlvbihicm93c2VyTG9nKSB7XG4gICAgICAgICAgICAgIHJldHVybiBicm93c2VyTG9nLmZpbHRlcihmdW5jdGlvbihsb2dFbnRyeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2dFbnRyeS5sZXZlbC52YWx1ZSA+IHdlYmRyaXZlci5sb2dnaW5nLkxldmVsLldBUk5JTkcudmFsdWU7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZnVuY3Rpb24gY2xlYXJFcnJvcnMoKSB7XG4gICAgICAgICAgICBnZXRBbmRDbGVhclNldmVyZUVycm9ycygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bmN0aW9uIGV4cGVjdE5vRXJyb3JzKCkge1xuICAgICAgICAgICAgZ2V0QW5kQ2xlYXJTZXZlcmVFcnJvcnMoKS50aGVuKGZ1bmN0aW9uKGZpbHRlcmVkTG9nKSB7XG4gICAgICAgICAgICAgIGV4cGVjdChmaWx0ZXJlZExvZy5sZW5ndGgpLnRvRXF1YWwoMCk7XG4gICAgICAgICAgICAgIGlmIChmaWx0ZXJlZExvZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnYnJvd3NlciBjb25zb2xlIGVycm9yczogJyArIHV0aWwuaW5zcGVjdChmaWx0ZXJlZExvZykpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiBleHBlY3RFcnJvcihyZWdleCkge1xuICAgICAgICAgICAgZ2V0QW5kQ2xlYXJTZXZlcmVFcnJvcnMoKS50aGVuKGZ1bmN0aW9uKGZpbHRlcmVkTG9nKSB7XG4gICAgICAgICAgICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICBmaWx0ZXJlZExvZy5mb3JFYWNoKGZ1bmN0aW9uKGxvZykge1xuICAgICAgICAgICAgICAgIGlmIChsb2cubWVzc2FnZS5tYXRjaChyZWdleCkpIHtcbiAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdleHBlY3RlZCBhbiBlcnJvciB0aGF0IG1hdGNoZXMgJyArIHJlZ2V4KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG4gICAgICAgICAgICB3ZWJkcml2ZXIgPSByZXF1aXJlKCdwcm90cmFjdG9yL25vZGVfbW9kdWxlcy9zZWxlbml1bS13ZWJkcml2ZXInKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIEZvciBub3csIHdlIG9ubHkgdGVzdCBvbiBDaHJvbWUsXG4gICAgICAgICAgLy8gYXMgU2FmYXJpIGRvZXMgbm90IGxvYWQgdGhlIHBhZ2Ugd2l0aCBQcm90cmFjdG9yJ3MgaW5qZWN0ZWQgc2NyaXB0cyxcbiAgICAgICAgICAvLyBhbmQgRmlyZWZveCB3ZWJkcml2ZXIgYWx3YXlzIGRpc2FibGVzIGNvbnRlbnQgc2VjdXJpdHkgcG9saWN5ICgjNjM1OClcbiAgICAgICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciAhPT0gJ2Nocm9tZScpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIG5vdCByZXBvcnQgZXJyb3JzIHdoZW4gdGhlIHBhZ2UgaXMgbG9hZGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBjbGVhciBlcnJvcnMgc28gd2UgYXJlIG5vdCBkZXBlbmRlbnQgb24gcHJldmlvdXMgdGVzdHNcbiAgICAgICAgICAgIGNsZWFyRXJyb3JzKCk7XG4gICAgICAgICAgICAvLyBOZWVkIHRvIHJlbG9hZCB0aGUgcGFnZSBhcyB0aGUgcGFnZSBpcyBhbHJlYWR5IGxvYWRlZCB3aGVuXG4gICAgICAgICAgICAvLyB3ZSBjb21lIGhlcmVcbiAgICAgICAgICAgIGJyb3dzZXIuZHJpdmVyLmdldEN1cnJlbnRVcmwoKS50aGVuKGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgICBicm93c2VyLmdldCh1cmwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBleHBlY3ROb0Vycm9ycygpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBldmFsdWF0ZSBleHByZXNzaW9ucycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0VxdWFsKCcwJyk7XG4gICAgICAgICAgICBpbmNCdG4uY2xpY2soKTtcbiAgICAgICAgICAgIGV4cGVjdChjb3VudGVyLmdldFRleHQoKSkudG9FcXVhbCgnMScpO1xuICAgICAgICAgICAgZXhwZWN0Tm9FcnJvcnMoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW5kIHJlcG9ydCBhbiBlcnJvciB3aGVuIHVzaW5nIFwiZXZhbFwiJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBldmlsQnRuLmNsaWNrKCk7XG4gICAgICAgICAgICBleHBlY3QoZXZpbEVycm9yLmdldFRleHQoKSkudG9NYXRjaCgvQ29udGVudCBTZWN1cml0eSBQb2xpY3kvKTtcbiAgICAgICAgICAgIGV4cGVjdEVycm9yKC9Db250ZW50IFNlY3VyaXR5IFBvbGljeS8pO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICovXG5cbi8vIG5nQ3NwIGlzIG5vdCBpbXBsZW1lbnRlZCBhcyBhIHByb3BlciBkaXJlY3RpdmUgYW55IG1vcmUsIGJlY2F1c2Ugd2UgbmVlZCBpdCBiZSBwcm9jZXNzZWQgd2hpbGUgd2Vcbi8vIGJvb3RzdHJhcCB0aGUgc3lzdGVtIChiZWZvcmUgJHBhcnNlIGlzIGluc3RhbnRpYXRlZCksIGZvciB0aGlzIHJlYXNvbiB3ZSBqdXN0IGhhdmVcbi8vIHRoZSBjc3AoKSBmbiB0aGF0IGxvb2tzIGZvciB0aGUgYG5nLWNzcGAgYXR0cmlidXRlIGFueXdoZXJlIGluIHRoZSBjdXJyZW50IGRvY1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ2xpY2tcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBuZ0NsaWNrIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIHdoZW5cbiAqIGFuIGVsZW1lbnQgaXMgY2xpY2tlZC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xpY2sge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogY2xpY2suICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctY2xpY2s9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudFxuICAgICAgPC9idXR0b24+XG4gICAgICA8c3Bhbj5cbiAgICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICAgPC9zcGFuPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWNsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdjb3VudCcpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJzAnKTtcbiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCdidXR0b24nKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2NvdW50JykpLmdldFRleHQoKSkudG9NYXRjaCgnMScpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbi8qXG4gKiBBIGNvbGxlY3Rpb24gb2YgZGlyZWN0aXZlcyB0aGF0IGFsbG93cyBjcmVhdGlvbiBvZiBjdXN0b20gZXZlbnQgaGFuZGxlcnMgdGhhdCBhcmUgZGVmaW5lZCBhc1xuICogYW5ndWxhciBleHByZXNzaW9ucyBhbmQgYXJlIGNvbXBpbGVkIGFuZCBleGVjdXRlZCB3aXRoaW4gdGhlIGN1cnJlbnQgc2NvcGUuXG4gKi9cbnZhciBuZ0V2ZW50RGlyZWN0aXZlcyA9IHt9O1xuXG4vLyBGb3IgZXZlbnRzIHRoYXQgbWlnaHQgZmlyZSBzeW5jaHJvbm91c2x5IGR1cmluZyBET00gbWFuaXB1bGF0aW9uXG4vLyB3ZSBuZWVkIHRvIGV4ZWN1dGUgdGhlaXIgZXZlbnQgaGFuZGxlcnMgYXN5bmNocm9ub3VzbHkgdXNpbmcgJGV2YWxBc3luYyxcbi8vIHNvIHRoYXQgdGhleSBhcmUgbm90IGV4ZWN1dGVkIGluIGFuIGluY29uc2lzdGVudCBzdGF0ZS5cbnZhciBmb3JjZUFzeW5jRXZlbnRzID0ge1xuICAnYmx1cic6IHRydWUsXG4gICdmb2N1cyc6IHRydWVcbn07XG5mb3JFYWNoKFxuICAnY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlbW92ZSBtb3VzZWVudGVyIG1vdXNlbGVhdmUga2V5ZG93biBrZXl1cCBrZXlwcmVzcyBzdWJtaXQgZm9jdXMgYmx1ciBjb3B5IGN1dCBwYXN0ZScuc3BsaXQoJyAnKSxcbiAgZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gICAgdmFyIGRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUoJ25nLScgKyBldmVudE5hbWUpO1xuICAgIG5nRXZlbnREaXJlY3RpdmVzW2RpcmVjdGl2ZU5hbWVdID0gWyckcGFyc2UnLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCRwYXJzZSwgJHJvb3RTY29wZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgY29tcGlsZTogZnVuY3Rpb24oJGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgICAvLyBXZSBleHBvc2UgdGhlIHBvd2VyZnVsICRldmVudCBvYmplY3Qgb24gdGhlIHNjb3BlIHRoYXQgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBXaW5kb3csXG4gICAgICAgICAgLy8gZXRjLiB0aGF0IGlzbid0IHByb3RlY3RlZCBieSB0aGUgZmFzdCBwYXRocyBpbiAkcGFyc2UuICBXZSBleHBsaWNpdGx5IHJlcXVlc3QgYmV0dGVyXG4gICAgICAgICAgLy8gY2hlY2tzIGF0IHRoZSBjb3N0IG9mIHNwZWVkIHNpbmNlIGV2ZW50IGhhbmRsZXIgZXhwcmVzc2lvbnMgYXJlIG5vdCBleGVjdXRlZCBhc1xuICAgICAgICAgIC8vIGZyZXF1ZW50bHkgYXMgcmVndWxhciBjaGFuZ2UgZGV0ZWN0aW9uLlxuICAgICAgICAgIHZhciBmbiA9ICRwYXJzZShhdHRyW2RpcmVjdGl2ZU5hbWVdLCAvKiBpbnRlcmNlcHRvckZuICovIG51bGwsIC8qIGV4cGVuc2l2ZUNoZWNrcyAqLyB0cnVlKTtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmdFdmVudEhhbmRsZXIoc2NvcGUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQub24oZXZlbnROYW1lLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBmbihzY29wZSwgeyRldmVudDpldmVudH0pO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBpZiAoZm9yY2VBc3luY0V2ZW50c1tldmVudE5hbWVdICYmICRyb290U2NvcGUuJCRwaGFzZSkge1xuICAgICAgICAgICAgICAgIHNjb3BlLiRldmFsQXN5bmMoY2FsbGJhY2spO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShjYWxsYmFjayk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfV07XG4gIH1cbik7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdEYmxjbGlja1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0RibGNsaWNrYCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBhIGRibGNsaWNrIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdEYmxjbGljayB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBhIGRibGNsaWNrLiAoVGhlIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGApXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1kYmxjbGljaz1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgSW5jcmVtZW50IChvbiBkb3VibGUgY2xpY2spXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vdXNlZG93blxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIG5nTW91c2Vkb3duIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlZG93biBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2Vkb3duIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIG1vdXNlZG93bi4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZWRvd249XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAob24gbW91c2UgZG93bilcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW91c2V1cFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2V1cCBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2V1cCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBtb3VzZXVwLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8YnV0dG9uIG5nLW1vdXNldXA9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAob24gbW91c2UgdXApXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZW92ZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlb3ZlciBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2VvdmVyIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIG1vdXNlb3Zlci4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZW92ZXI9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAod2hlbiBtb3VzZSBpcyBvdmVyKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZWVudGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZWVudGVyIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZWVudGVyIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIG1vdXNlZW50ZXIuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2VlbnRlcj1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgSW5jcmVtZW50ICh3aGVuIG1vdXNlIGVudGVycylcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW91c2VsZWF2ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2VsZWF2ZSBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2VsZWF2ZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBtb3VzZWxlYXZlLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8YnV0dG9uIG5nLW1vdXNlbGVhdmU9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAod2hlbiBtb3VzZSBsZWF2ZXMpXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vdXNlbW92ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2Vtb3ZlIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZW1vdmUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogbW91c2Vtb3ZlLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8YnV0dG9uIG5nLW1vdXNlbW92ZT1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgSW5jcmVtZW50ICh3aGVuIG1vdXNlIG1vdmVzKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdLZXlkb3duXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBrZXlkb3duIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXlkb3duIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGtleWRvd24uIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgIGFuZCBjYW4gYmUgaW50ZXJyb2dhdGVkIGZvciBrZXlDb2RlLCBhbHRLZXksIGV0Yy4pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGlucHV0IG5nLWtleWRvd249XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICBrZXkgZG93biBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdLZXl1cFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24ga2V5dXAgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0tleXVwIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGtleXVwLiAoRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YCBhbmQgY2FuIGJlIGludGVycm9nYXRlZCBmb3Iga2V5Q29kZSwgYWx0S2V5LCBldGMuKVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8cD5UeXBpbmcgaW4gdGhlIGlucHV0IGJveCBiZWxvdyB1cGRhdGVzIHRoZSBrZXkgY291bnQ8L3A+XG4gICAgICAgPGlucHV0IG5nLWtleXVwPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPiBrZXkgdXAgY291bnQ6IHt7Y291bnR9fVxuXG4gICAgICAgPHA+VHlwaW5nIGluIHRoZSBpbnB1dCBib3ggYmVsb3cgdXBkYXRlcyB0aGUga2V5Y29kZTwvcD5cbiAgICAgICA8aW5wdXQgbmcta2V5dXA9XCJldmVudD0kZXZlbnRcIj5cbiAgICAgICA8cD5ldmVudCBrZXlDb2RlOiB7eyBldmVudC5rZXlDb2RlIH19PC9wPlxuICAgICAgIDxwPmV2ZW50IGFsdEtleToge3sgZXZlbnQuYWx0S2V5IH19PC9wPlxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nS2V5cHJlc3NcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGtleXByZXNzIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0tleXByZXNzIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGtleXByZXNzLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfVxuICogYW5kIGNhbiBiZSBpbnRlcnJvZ2F0ZWQgZm9yIGtleUNvZGUsIGFsdEtleSwgZXRjLilcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8aW5wdXQgbmcta2V5cHJlc3M9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICBrZXkgcHJlc3MgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nU3VibWl0XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBFbmFibGVzIGJpbmRpbmcgYW5ndWxhciBleHByZXNzaW9ucyB0byBvbnN1Ym1pdCBldmVudHMuXG4gKlxuICogQWRkaXRpb25hbGx5IGl0IHByZXZlbnRzIHRoZSBkZWZhdWx0IGFjdGlvbiAod2hpY2ggZm9yIGZvcm0gbWVhbnMgc2VuZGluZyB0aGUgcmVxdWVzdCB0byB0aGVcbiAqIHNlcnZlciBhbmQgcmVsb2FkaW5nIHRoZSBjdXJyZW50IHBhZ2UpLCBidXQgb25seSBpZiB0aGUgZm9ybSBkb2VzIG5vdCBjb250YWluIGBhY3Rpb25gLFxuICogYGRhdGEtYWN0aW9uYCwgb3IgYHgtYWN0aW9uYCBhdHRyaWJ1dGVzLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKldhcm5pbmc6KiogQmUgY2FyZWZ1bCBub3QgdG8gY2F1c2UgXCJkb3VibGUtc3VibWlzc2lvblwiIGJ5IHVzaW5nIGJvdGggdGhlIGBuZ0NsaWNrYCBhbmRcbiAqIGBuZ1N1Ym1pdGAgaGFuZGxlcnMgdG9nZXRoZXIuIFNlZSB0aGVcbiAqIHtAbGluayBmb3JtI3N1Ym1pdHRpbmctYS1mb3JtLWFuZC1wcmV2ZW50aW5nLXRoZS1kZWZhdWx0LWFjdGlvbiBgZm9ybWAgZGlyZWN0aXZlIGRvY3VtZW50YXRpb259XG4gKiBmb3IgYSBkZXRhaWxlZCBkaXNjdXNzaW9uIG9mIHdoZW4gYG5nU3VibWl0YCBtYXkgYmUgdHJpZ2dlcmVkLlxuICogPC9kaXY+XG4gKlxuICogQGVsZW1lbnQgZm9ybVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdTdWJtaXQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbC5cbiAqICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJzdWJtaXRFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8c2NyaXB0PlxuICAgICAgICBhbmd1bGFyLm1vZHVsZSgnc3VibWl0RXhhbXBsZScsIFtdKVxuICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUubGlzdCA9IFtdO1xuICAgICAgICAgICAgJHNjb3BlLnRleHQgPSAnaGVsbG8nO1xuICAgICAgICAgICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpZiAoJHNjb3BlLnRleHQpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5wdXNoKHRoaXMudGV4dCk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnRleHQgPSAnJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XSk7XG4gICAgICA8L3NjcmlwdD5cbiAgICAgIDxmb3JtIG5nLXN1Ym1pdD1cInN1Ym1pdCgpXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgIEVudGVyIHRleHQgYW5kIGhpdCBlbnRlcjpcbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJ0ZXh0XCIgbmFtZT1cInRleHRcIiAvPlxuICAgICAgICA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIGlkPVwic3VibWl0XCIgdmFsdWU9XCJTdWJtaXRcIiAvPlxuICAgICAgICA8cHJlPmxpc3Q9e3tsaXN0fX08L3ByZT5cbiAgICAgIDwvZm9ybT5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1zdWJtaXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QnKSkuZ2V0VGV4dCgpKS50b0JlKCdsaXN0PVtdJyk7XG4gICAgICAgICBlbGVtZW50KGJ5LmNzcygnI3N1Ym1pdCcpKS5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbGlzdCcpKS5nZXRUZXh0KCkpLnRvQ29udGFpbignaGVsbG8nKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5Lm1vZGVsKCd0ZXh0JykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnJyk7XG4gICAgICAgfSk7XG4gICAgICAgaXQoJ3Nob3VsZCBpZ25vcmUgZW1wdHkgc3RyaW5ncycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbGlzdCcpKS5nZXRUZXh0KCkpLnRvQmUoJ2xpc3Q9W10nKTtcbiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCcjc3VibWl0JykpLmNsaWNrKCk7XG4gICAgICAgICBlbGVtZW50KGJ5LmNzcygnI3N1Ym1pdCcpKS5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbGlzdCcpKS5nZXRUZXh0KCkpLnRvQ29udGFpbignaGVsbG8nKTtcbiAgICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nRm9jdXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGZvY3VzIGV2ZW50LlxuICpcbiAqIE5vdGU6IEFzIHRoZSBgZm9jdXNgIGV2ZW50IGlzIGV4ZWN1dGVkIHN5bmNocm9ub3VzbHkgd2hlbiBjYWxsaW5nIGBpbnB1dC5mb2N1cygpYFxuICogQW5ndWxhckpTIGV4ZWN1dGVzIHRoZSBleHByZXNzaW9uIHVzaW5nIGBzY29wZS4kZXZhbEFzeW5jYCBpZiB0aGUgZXZlbnQgaXMgZmlyZWRcbiAqIGR1cmluZyBhbiBgJGFwcGx5YCB0byBlbnN1cmUgYSBjb25zaXN0ZW50IHN0YXRlLlxuICpcbiAqIEBlbGVtZW50IHdpbmRvdywgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIGFcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nRm9jdXMge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogZm9jdXMuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gKiBTZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0JsdXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGJsdXIgZXZlbnQuXG4gKlxuICogQSBbYmx1ciBldmVudF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL2JsdXIpIGZpcmVzIHdoZW5cbiAqIGFuIGVsZW1lbnQgaGFzIGxvc3QgZm9jdXMuXG4gKlxuICogTm90ZTogQXMgdGhlIGBibHVyYCBldmVudCBpcyBleGVjdXRlZCBzeW5jaHJvbm91c2x5IGFsc28gZHVyaW5nIERPTSBtYW5pcHVsYXRpb25zXG4gKiAoZS5nLiByZW1vdmluZyBhIGZvY3Vzc2VkIGlucHV0KSxcbiAqIEFuZ3VsYXJKUyBleGVjdXRlcyB0aGUgZXhwcmVzc2lvbiB1c2luZyBgc2NvcGUuJGV2YWxBc3luY2AgaWYgdGhlIGV2ZW50IGlzIGZpcmVkXG4gKiBkdXJpbmcgYW4gYCRhcHBseWAgdG8gZW5zdXJlIGEgY29uc2lzdGVudCBzdGF0ZS5cbiAqXG4gKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0JsdXIge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogYmx1ci4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAqIFNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja31cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ29weVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gY29weSBldmVudC5cbiAqXG4gKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NvcHkge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogY29weS4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGlucHV0IG5nLWNvcHk9XCJjb3BpZWQ9dHJ1ZVwiIG5nLWluaXQ9XCJjb3BpZWQ9ZmFsc2U7IHZhbHVlPSdjb3B5IG1lJ1wiIG5nLW1vZGVsPVwidmFsdWVcIj5cbiAgICAgIGNvcGllZDoge3tjb3BpZWR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0N1dFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gY3V0IGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IHdpbmRvdywgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIGFcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ3V0IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGN1dC4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGlucHV0IG5nLWN1dD1cImN1dD10cnVlXCIgbmctaW5pdD1cImN1dD1mYWxzZTsgdmFsdWU9J2N1dCBtZSdcIiBuZy1tb2RlbD1cInZhbHVlXCI+XG4gICAgICBjdXQ6IHt7Y3V0fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdQYXN0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gcGFzdGUgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdQYXN0ZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBwYXN0ZS4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGlucHV0IG5nLXBhc3RlPVwicGFzdGU9dHJ1ZVwiIG5nLWluaXQ9XCJwYXN0ZT1mYWxzZVwiIHBsYWNlaG9sZGVyPSdwYXN0ZSBoZXJlJz5cbiAgICAgIHBhc3RlZDoge3twYXN0ZX19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nSWZcbiAqIEByZXN0cmljdCBBXG4gKiBAbXVsdGlFbGVtZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nSWZgIGRpcmVjdGl2ZSByZW1vdmVzIG9yIHJlY3JlYXRlcyBhIHBvcnRpb24gb2YgdGhlIERPTSB0cmVlIGJhc2VkIG9uIGFuXG4gKiB7ZXhwcmVzc2lvbn0uIElmIHRoZSBleHByZXNzaW9uIGFzc2lnbmVkIHRvIGBuZ0lmYCBldmFsdWF0ZXMgdG8gYSBmYWxzZVxuICogdmFsdWUgdGhlbiB0aGUgZWxlbWVudCBpcyByZW1vdmVkIGZyb20gdGhlIERPTSwgb3RoZXJ3aXNlIGEgY2xvbmUgb2YgdGhlXG4gKiBlbGVtZW50IGlzIHJlaW5zZXJ0ZWQgaW50byB0aGUgRE9NLlxuICpcbiAqIGBuZ0lmYCBkaWZmZXJzIGZyb20gYG5nU2hvd2AgYW5kIGBuZ0hpZGVgIGluIHRoYXQgYG5nSWZgIGNvbXBsZXRlbHkgcmVtb3ZlcyBhbmQgcmVjcmVhdGVzIHRoZVxuICogZWxlbWVudCBpbiB0aGUgRE9NIHJhdGhlciB0aGFuIGNoYW5naW5nIGl0cyB2aXNpYmlsaXR5IHZpYSB0aGUgYGRpc3BsYXlgIGNzcyBwcm9wZXJ0eS4gIEEgY29tbW9uXG4gKiBjYXNlIHdoZW4gdGhpcyBkaWZmZXJlbmNlIGlzIHNpZ25pZmljYW50IGlzIHdoZW4gdXNpbmcgY3NzIHNlbGVjdG9ycyB0aGF0IHJlbHkgb24gYW4gZWxlbWVudCdzXG4gKiBwb3NpdGlvbiB3aXRoaW4gdGhlIERPTSwgc3VjaCBhcyB0aGUgYDpmaXJzdC1jaGlsZGAgb3IgYDpsYXN0LWNoaWxkYCBwc2V1ZG8tY2xhc3Nlcy5cbiAqXG4gKiBOb3RlIHRoYXQgd2hlbiBhbiBlbGVtZW50IGlzIHJlbW92ZWQgdXNpbmcgYG5nSWZgIGl0cyBzY29wZSBpcyBkZXN0cm95ZWQgYW5kIGEgbmV3IHNjb3BlXG4gKiBpcyBjcmVhdGVkIHdoZW4gdGhlIGVsZW1lbnQgaXMgcmVzdG9yZWQuICBUaGUgc2NvcGUgY3JlYXRlZCB3aXRoaW4gYG5nSWZgIGluaGVyaXRzIGZyb21cbiAqIGl0cyBwYXJlbnQgc2NvcGUgdXNpbmdcbiAqIFtwcm90b3R5cGFsIGluaGVyaXRhbmNlXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3dpa2kvVW5kZXJzdGFuZGluZy1TY29wZXMjamF2YXNjcmlwdC1wcm90b3R5cGFsLWluaGVyaXRhbmNlKS5cbiAqIEFuIGltcG9ydGFudCBpbXBsaWNhdGlvbiBvZiB0aGlzIGlzIGlmIGBuZ01vZGVsYCBpcyB1c2VkIHdpdGhpbiBgbmdJZmAgdG8gYmluZCB0b1xuICogYSBqYXZhc2NyaXB0IHByaW1pdGl2ZSBkZWZpbmVkIGluIHRoZSBwYXJlbnQgc2NvcGUuIEluIHRoaXMgY2FzZSBhbnkgbW9kaWZpY2F0aW9ucyBtYWRlIHRvIHRoZVxuICogdmFyaWFibGUgd2l0aGluIHRoZSBjaGlsZCBzY29wZSB3aWxsIG92ZXJyaWRlIChoaWRlKSB0aGUgdmFsdWUgaW4gdGhlIHBhcmVudCBzY29wZS5cbiAqXG4gKiBBbHNvLCBgbmdJZmAgcmVjcmVhdGVzIGVsZW1lbnRzIHVzaW5nIHRoZWlyIGNvbXBpbGVkIHN0YXRlLiBBbiBleGFtcGxlIG9mIHRoaXMgYmVoYXZpb3JcbiAqIGlzIGlmIGFuIGVsZW1lbnQncyBjbGFzcyBhdHRyaWJ1dGUgaXMgZGlyZWN0bHkgbW9kaWZpZWQgYWZ0ZXIgaXQncyBjb21waWxlZCwgdXNpbmcgc29tZXRoaW5nIGxpa2VcbiAqIGpRdWVyeSdzIGAuYWRkQ2xhc3MoKWAgbWV0aG9kLCBhbmQgdGhlIGVsZW1lbnQgaXMgbGF0ZXIgcmVtb3ZlZC4gV2hlbiBgbmdJZmAgcmVjcmVhdGVzIHRoZSBlbGVtZW50XG4gKiB0aGUgYWRkZWQgY2xhc3Mgd2lsbCBiZSBsb3N0IGJlY2F1c2UgdGhlIG9yaWdpbmFsIGNvbXBpbGVkIHN0YXRlIGlzIHVzZWQgdG8gcmVnZW5lcmF0ZSB0aGUgZWxlbWVudC5cbiAqXG4gKiBBZGRpdGlvbmFsbHksIHlvdSBjYW4gcHJvdmlkZSBhbmltYXRpb25zIHZpYSB0aGUgYG5nQW5pbWF0ZWAgbW9kdWxlIHRvIGFuaW1hdGUgdGhlIGBlbnRlcmBcbiAqIGFuZCBgbGVhdmVgIGVmZmVjdHMuXG4gKlxuICogQGFuaW1hdGlvbnNcbiAqIGVudGVyIC0gaGFwcGVucyBqdXN0IGFmdGVyIHRoZSBgbmdJZmAgY29udGVudHMgY2hhbmdlIGFuZCBhIG5ldyBET00gZWxlbWVudCBpcyBjcmVhdGVkIGFuZCBpbmplY3RlZCBpbnRvIHRoZSBgbmdJZmAgY29udGFpbmVyXG4gKiBsZWF2ZSAtIGhhcHBlbnMganVzdCBiZWZvcmUgdGhlIGBuZ0lmYCBjb250ZW50cyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBET01cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBzY29wZVxuICogQHByaW9yaXR5IDYwMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0lmIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyBmYWxzeSB0aGVuXG4gKiAgICAgdGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00gdHJlZS4gSWYgaXQgaXMgdHJ1dGh5IGEgY29weSBvZiB0aGUgY29tcGlsZWRcbiAqICAgICBlbGVtZW50IGlzIGFkZGVkIHRvIHRoZSBET00gdHJlZS5cbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FuaW1hdGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGxhYmVsPkNsaWNrIG1lOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCIgbmctaW5pdD1cImNoZWNrZWQ9dHJ1ZVwiIC8+PC9sYWJlbD48YnIvPlxuICAgICAgU2hvdyB3aGVuIGNoZWNrZWQ6XG4gICAgICA8c3BhbiBuZy1pZj1cImNoZWNrZWRcIiBjbGFzcz1cImFuaW1hdGUtaWZcIj5cbiAgICAgICAgVGhpcyBpcyByZW1vdmVkIHdoZW4gdGhlIGNoZWNrYm94IGlzIHVuY2hlY2tlZC5cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XG4gICAgICAuYW5pbWF0ZS1pZiB7XG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XG4gICAgICAgIHBhZGRpbmc6MTBweDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtaWYubmctZW50ZXIsIC5hbmltYXRlLWlmLm5nLWxlYXZlIHtcbiAgICAgICAgdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1pZi5uZy1lbnRlcixcbiAgICAgIC5hbmltYXRlLWlmLm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSB7XG4gICAgICAgIG9wYWNpdHk6MDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtaWYubmctbGVhdmUsXG4gICAgICAuYW5pbWF0ZS1pZi5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xuICAgICAgICBvcGFjaXR5OjE7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0lmRGlyZWN0aXZlID0gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XG4gIHJldHVybiB7XG4gICAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICAgIHRyYW5zY2x1ZGU6ICdlbGVtZW50JyxcbiAgICBwcmlvcml0eTogNjAwLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgJCR0bGI6IHRydWUsXG4gICAgbGluazogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHIsIGN0cmwsICR0cmFuc2NsdWRlKSB7XG4gICAgICAgIHZhciBibG9jaywgY2hpbGRTY29wZSwgcHJldmlvdXNFbGVtZW50cztcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgkYXR0ci5uZ0lmLCBmdW5jdGlvbiBuZ0lmV2F0Y2hBY3Rpb24odmFsdWUpIHtcblxuICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFjaGlsZFNjb3BlKSB7XG4gICAgICAgICAgICAgICR0cmFuc2NsdWRlKGZ1bmN0aW9uKGNsb25lLCBuZXdTY29wZSkge1xuICAgICAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBuZXdTY29wZTtcbiAgICAgICAgICAgICAgICBjbG9uZVtjbG9uZS5sZW5ndGgrK10gPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KCcgZW5kIG5nSWY6ICcgKyAkYXR0ci5uZ0lmICsgJyAnKTtcbiAgICAgICAgICAgICAgICAvLyBOb3RlOiBXZSBvbmx5IG5lZWQgdGhlIGZpcnN0L2xhc3Qgbm9kZSBvZiB0aGUgY2xvbmVkIG5vZGVzLlxuICAgICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHdlIG5lZWQgdG8ga2VlcCB0aGUgcmVmZXJlbmNlIHRvIHRoZSBqcWxpdGUgd3JhcHBlciBhcyBpdCBtaWdodCBiZSBjaGFuZ2VkIGxhdGVyXG4gICAgICAgICAgICAgICAgLy8gYnkgYSBkaXJlY3RpdmUgd2l0aCB0ZW1wbGF0ZVVybCB3aGVuIGl0cyB0ZW1wbGF0ZSBhcnJpdmVzLlxuICAgICAgICAgICAgICAgIGJsb2NrID0ge1xuICAgICAgICAgICAgICAgICAgY2xvbmU6IGNsb25lXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjbG9uZSwgJGVsZW1lbnQucGFyZW50KCksICRlbGVtZW50KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwcmV2aW91c0VsZW1lbnRzKSB7XG4gICAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudHMucmVtb3ZlKCk7XG4gICAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudHMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoaWxkU2NvcGUpIHtcbiAgICAgICAgICAgICAgY2hpbGRTY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChibG9jaykge1xuICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnRzID0gZ2V0QmxvY2tOb2RlcyhibG9jay5jbG9uZSk7XG4gICAgICAgICAgICAgICRhbmltYXRlLmxlYXZlKHByZXZpb3VzRWxlbWVudHMpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50cyA9IG51bGw7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBibG9jayA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0luY2x1ZGVcbiAqIEByZXN0cmljdCBFQ0FcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZldGNoZXMsIGNvbXBpbGVzIGFuZCBpbmNsdWRlcyBhbiBleHRlcm5hbCBIVE1MIGZyYWdtZW50LlxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoZSB0ZW1wbGF0ZSBVUkwgaXMgcmVzdHJpY3RlZCB0byB0aGUgc2FtZSBkb21haW4gYW5kIHByb3RvY29sIGFzIHRoZVxuICogYXBwbGljYXRpb24gZG9jdW1lbnQuIFRoaXMgaXMgZG9uZSBieSBjYWxsaW5nIHtAbGluayAkc2NlI2dldFRydXN0ZWRSZXNvdXJjZVVybFxuICogJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmx9IG9uIGl0LiBUbyBsb2FkIHRlbXBsYXRlcyBmcm9tIG90aGVyIGRvbWFpbnMgb3IgcHJvdG9jb2xzXG4gKiB5b3UgbWF5IGVpdGhlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3Qgd2hpdGVsaXN0IHRoZW19IG9yXG4gKiB7QGxpbmsgJHNjZSN0cnVzdEFzUmVzb3VyY2VVcmwgd3JhcCB0aGVtfSBhcyB0cnVzdGVkIHZhbHVlcy4gUmVmZXIgdG8gQW5ndWxhcidzIHtAbGlua1xuICogbmcuJHNjZSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZ30uXG4gKlxuICogSW4gYWRkaXRpb24sIHRoZSBicm93c2VyJ3NcbiAqIFtTYW1lIE9yaWdpbiBQb2xpY3ldKGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvYnJvd3NlcnNlYy93aWtpL1BhcnQyI1NhbWUtb3JpZ2luX3BvbGljeV9mb3JfWE1MSHR0cFJlcXVlc3QpXG4gKiBhbmQgW0Nyb3NzLU9yaWdpbiBSZXNvdXJjZSBTaGFyaW5nIChDT1JTKV0oaHR0cDovL3d3dy53My5vcmcvVFIvY29ycy8pXG4gKiBwb2xpY3kgbWF5IGZ1cnRoZXIgcmVzdHJpY3Qgd2hldGhlciB0aGUgdGVtcGxhdGUgaXMgc3VjY2Vzc2Z1bGx5IGxvYWRlZC5cbiAqIEZvciBleGFtcGxlLCBgbmdJbmNsdWRlYCB3b24ndCB3b3JrIGZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMgb24gYWxsIGJyb3dzZXJzIGFuZCBmb3IgYGZpbGU6Ly9gXG4gKiBhY2Nlc3Mgb24gc29tZSBicm93c2Vycy5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogZW50ZXIgLSBhbmltYXRpb24gaXMgdXNlZCB0byBicmluZyBuZXcgY29udGVudCBpbnRvIHRoZSBicm93c2VyLlxuICogbGVhdmUgLSBhbmltYXRpb24gaXMgdXNlZCB0byBhbmltYXRlIGV4aXN0aW5nIGNvbnRlbnQgYXdheS5cbiAqXG4gKiBUaGUgZW50ZXIgYW5kIGxlYXZlIGFuaW1hdGlvbiBvY2N1ciBjb25jdXJyZW50bHkuXG4gKlxuICogQHNjb3BlXG4gKiBAcHJpb3JpdHkgNDAwXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5nSW5jbHVkZXxzcmMgYW5ndWxhciBleHByZXNzaW9uIGV2YWx1YXRpbmcgdG8gVVJMLiBJZiB0aGUgc291cmNlIGlzIGEgc3RyaW5nIGNvbnN0YW50LFxuICogICAgICAgICAgICAgICAgIG1ha2Ugc3VyZSB5b3Ugd3JhcCBpdCBpbiAqKnNpbmdsZSoqIHF1b3RlcywgZS5nLiBgc3JjPVwiJ215UGFydGlhbFRlbXBsYXRlLmh0bWwnXCJgLlxuICogQHBhcmFtIHtzdHJpbmc9fSBvbmxvYWQgRXhwcmVzc2lvbiB0byBldmFsdWF0ZSB3aGVuIGEgbmV3IHBhcnRpYWwgaXMgbG9hZGVkLlxuICogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogICAgICAgICAgICAgICAgICAqKk5vdGU6KiogV2hlbiB1c2luZyBvbmxvYWQgb24gU1ZHIGVsZW1lbnRzIGluIElFMTEsIHRoZSBicm93c2VyIHdpbGwgdHJ5IHRvIGNhbGxcbiAqICAgICAgICAgICAgICAgICAgYSBmdW5jdGlvbiB3aXRoIHRoZSBuYW1lIG9uIHRoZSB3aW5kb3cgZWxlbWVudCwgd2hpY2ggd2lsbCB1c3VhbGx5IHRocm93IGFcbiAqICAgICAgICAgICAgICAgICAgXCJmdW5jdGlvbiBpcyB1bmRlZmluZWRcIiBlcnJvci4gVG8gZml4IHRoaXMsIHlvdSBjYW4gaW5zdGVhZCB1c2UgYGRhdGEtb25sb2FkYCBvciBhXG4gKiAgICAgICAgICAgICAgICAgIGRpZmZlcmVudCBmb3JtIHRoYXQge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSNub3JtYWxpemF0aW9uIG1hdGNoZXN9IGBvbmxvYWRgLlxuICogICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gYXV0b3Njcm9sbCBXaGV0aGVyIGBuZ0luY2x1ZGVgIHNob3VsZCBjYWxsIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsXG4gKiAgICAgICAgICAgICAgICAgICRhbmNob3JTY3JvbGx9IHRvIHNjcm9sbCB0aGUgdmlld3BvcnQgYWZ0ZXIgdGhlIGNvbnRlbnQgaXMgbG9hZGVkLlxuICpcbiAqICAgICAgICAgICAgICAgICAgLSBJZiB0aGUgYXR0cmlidXRlIGlzIG5vdCBzZXQsIGRpc2FibGUgc2Nyb2xsaW5nLlxuICogICAgICAgICAgICAgICAgICAtIElmIHRoZSBhdHRyaWJ1dGUgaXMgc2V0IHdpdGhvdXQgdmFsdWUsIGVuYWJsZSBzY3JvbGxpbmcuXG4gKiAgICAgICAgICAgICAgICAgIC0gT3RoZXJ3aXNlIGVuYWJsZSBzY3JvbGxpbmcgb25seSBpZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1dGh5IHZhbHVlLlxuICpcbiAqIEBleGFtcGxlXG4gIDxleGFtcGxlIG1vZHVsZT1cImluY2x1ZGVFeGFtcGxlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwidGVtcGxhdGVcIiBuZy1vcHRpb25zPVwidC5uYW1lIGZvciB0IGluIHRlbXBsYXRlc1wiPlxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+KGJsYW5rKTwvb3B0aW9uPlxuICAgICAgIDwvc2VsZWN0PlxuICAgICAgIHVybCBvZiB0aGUgdGVtcGxhdGU6IDxjb2RlPnt7dGVtcGxhdGUudXJsfX08L2NvZGU+XG4gICAgICAgPGhyLz5cbiAgICAgICA8ZGl2IGNsYXNzPVwic2xpZGUtYW5pbWF0ZS1jb250YWluZXJcIj5cbiAgICAgICAgIDxkaXYgY2xhc3M9XCJzbGlkZS1hbmltYXRlXCIgbmctaW5jbHVkZT1cInRlbXBsYXRlLnVybFwiPjwvZGl2PlxuICAgICAgIDwvZGl2PlxuICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ2luY2x1ZGVFeGFtcGxlJywgWyduZ0FuaW1hdGUnXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUudGVtcGxhdGVzID1cbiAgICAgICAgICAgIFsgeyBuYW1lOiAndGVtcGxhdGUxLmh0bWwnLCB1cmw6ICd0ZW1wbGF0ZTEuaHRtbCd9LFxuICAgICAgICAgICAgICB7IG5hbWU6ICd0ZW1wbGF0ZTIuaHRtbCcsIHVybDogJ3RlbXBsYXRlMi5odG1sJ30gXTtcbiAgICAgICAgICAkc2NvcGUudGVtcGxhdGUgPSAkc2NvcGUudGVtcGxhdGVzWzBdO1xuICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwidGVtcGxhdGUxLmh0bWxcIj5cbiAgICAgIENvbnRlbnQgb2YgdGVtcGxhdGUxLmh0bWxcbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInRlbXBsYXRlMi5odG1sXCI+XG4gICAgICBDb250ZW50IG9mIHRlbXBsYXRlMi5odG1sXG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLnNsaWRlLWFuaW1hdGUtY29udGFpbmVyIHtcbiAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7XG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGhlaWdodDo0MHB4O1xuICAgICAgICBvdmVyZmxvdzpoaWRkZW47XG4gICAgICB9XG5cbiAgICAgIC5zbGlkZS1hbmltYXRlIHtcbiAgICAgICAgcGFkZGluZzoxMHB4O1xuICAgICAgfVxuXG4gICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1lbnRlciwgLnNsaWRlLWFuaW1hdGUubmctbGVhdmUge1xuICAgICAgICB0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XG5cbiAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XG4gICAgICAgIHRvcDowO1xuICAgICAgICBsZWZ0OjA7XG4gICAgICAgIHJpZ2h0OjA7XG4gICAgICAgIGJvdHRvbTowO1xuICAgICAgICBkaXNwbGF5OmJsb2NrO1xuICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWVudGVyIHtcbiAgICAgICAgdG9wOi01MHB4O1xuICAgICAgfVxuICAgICAgLnNsaWRlLWFuaW1hdGUubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAgICAgICAgdG9wOjA7XG4gICAgICB9XG5cbiAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWxlYXZlIHtcbiAgICAgICAgdG9wOjA7XG4gICAgICB9XG4gICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUge1xuICAgICAgICB0b3A6NTBweDtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHRlbXBsYXRlU2VsZWN0ID0gZWxlbWVudChieS5tb2RlbCgndGVtcGxhdGUnKSk7XG4gICAgICB2YXIgaW5jbHVkZUVsZW0gPSBlbGVtZW50KGJ5LmNzcygnW25nLWluY2x1ZGVdJykpO1xuXG4gICAgICBpdCgnc2hvdWxkIGxvYWQgdGVtcGxhdGUxLmh0bWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KGluY2x1ZGVFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvQ29udGVudCBvZiB0ZW1wbGF0ZTEuaHRtbC8pO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgbG9hZCB0ZW1wbGF0ZTIuaHRtbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PSAnZmlyZWZveCcpIHtcbiAgICAgICAgICAvLyBGaXJlZm94IGNhbid0IGhhbmRsZSB1c2luZyBzZWxlY3RzXG4gICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzQ4MFxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0ZW1wbGF0ZVNlbGVjdC5jbGljaygpO1xuICAgICAgICB0ZW1wbGF0ZVNlbGVjdC5hbGwoYnkuY3NzKCdvcHRpb24nKSkuZ2V0KDIpLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChpbmNsdWRlRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL0NvbnRlbnQgb2YgdGVtcGxhdGUyLmh0bWwvKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGNoYW5nZSB0byBibGFuaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PSAnZmlyZWZveCcpIHtcbiAgICAgICAgICAvLyBGaXJlZm94IGNhbid0IGhhbmRsZSB1c2luZyBzZWxlY3RzXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRlbXBsYXRlU2VsZWN0LmNsaWNrKCk7XG4gICAgICAgIHRlbXBsYXRlU2VsZWN0LmFsbChieS5jc3MoJ29wdGlvbicpKS5nZXQoMCkuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGluY2x1ZGVFbGVtLmlzUHJlc2VudCgpKS50b0JlKGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZXZlbnRcbiAqIEBuYW1lIG5nSW5jbHVkZSMkaW5jbHVkZUNvbnRlbnRSZXF1ZXN0ZWRcbiAqIEBldmVudFR5cGUgZW1pdCBvbiB0aGUgc2NvcGUgbmdJbmNsdWRlIHdhcyBkZWNsYXJlZCBpblxuICogQGRlc2NyaXB0aW9uXG4gKiBFbWl0dGVkIGV2ZXJ5IHRpbWUgdGhlIG5nSW5jbHVkZSBjb250ZW50IGlzIHJlcXVlc3RlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuXG4gKiBAcGFyYW0ge1N0cmluZ30gc3JjIFVSTCBvZiBjb250ZW50IHRvIGxvYWQuXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBldmVudFxuICogQG5hbWUgbmdJbmNsdWRlIyRpbmNsdWRlQ29udGVudExvYWRlZFxuICogQGV2ZW50VHlwZSBlbWl0IG9uIHRoZSBjdXJyZW50IG5nSW5jbHVkZSBzY29wZVxuICogQGRlc2NyaXB0aW9uXG4gKiBFbWl0dGVkIGV2ZXJ5IHRpbWUgdGhlIG5nSW5jbHVkZSBjb250ZW50IGlzIHJlbG9hZGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhbmd1bGFyRXZlbnQgU3ludGhldGljIGV2ZW50IG9iamVjdC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVVJMIG9mIGNvbnRlbnQgdG8gbG9hZC5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGV2ZW50XG4gKiBAbmFtZSBuZ0luY2x1ZGUjJGluY2x1ZGVDb250ZW50RXJyb3JcbiAqIEBldmVudFR5cGUgZW1pdCBvbiB0aGUgc2NvcGUgbmdJbmNsdWRlIHdhcyBkZWNsYXJlZCBpblxuICogQGRlc2NyaXB0aW9uXG4gKiBFbWl0dGVkIHdoZW4gYSB0ZW1wbGF0ZSBIVFRQIHJlcXVlc3QgeWllbGRzIGFuIGVycm9uZW91cyByZXNwb25zZSAoc3RhdHVzIDwgMjAwIHx8IHN0YXR1cyA+IDI5OSlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuXG4gKiBAcGFyYW0ge1N0cmluZ30gc3JjIFVSTCBvZiBjb250ZW50IHRvIGxvYWQuXG4gKi9cbnZhciBuZ0luY2x1ZGVEaXJlY3RpdmUgPSBbJyR0ZW1wbGF0ZVJlcXVlc3QnLCAnJGFuY2hvclNjcm9sbCcsICckYW5pbWF0ZScsXG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbigkdGVtcGxhdGVSZXF1ZXN0LCAgICRhbmNob3JTY3JvbGwsICAgJGFuaW1hdGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0VDQScsXG4gICAgcHJpb3JpdHk6IDQwMCxcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gICAgY29udHJvbGxlcjogYW5ndWxhci5ub29wLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIHZhciBzcmNFeHAgPSBhdHRyLm5nSW5jbHVkZSB8fCBhdHRyLnNyYyxcbiAgICAgICAgICBvbmxvYWRFeHAgPSBhdHRyLm9ubG9hZCB8fCAnJyxcbiAgICAgICAgICBhdXRvU2Nyb2xsRXhwID0gYXR0ci5hdXRvc2Nyb2xsO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsICRlbGVtZW50LCAkYXR0ciwgY3RybCwgJHRyYW5zY2x1ZGUpIHtcbiAgICAgICAgdmFyIGNoYW5nZUNvdW50ZXIgPSAwLFxuICAgICAgICAgICAgY3VycmVudFNjb3BlLFxuICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50LFxuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQ7XG5cbiAgICAgICAgdmFyIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAocHJldmlvdXNFbGVtZW50KSB7XG4gICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY3VycmVudFNjb3BlKSB7XG4gICAgICAgICAgICBjdXJyZW50U2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgICAgIGN1cnJlbnRTY29wZSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjdXJyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgJGFuaW1hdGUubGVhdmUoY3VycmVudEVsZW1lbnQpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudCA9IGN1cnJlbnRFbGVtZW50O1xuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBzY29wZS4kd2F0Y2goc3JjRXhwLCBmdW5jdGlvbiBuZ0luY2x1ZGVXYXRjaEFjdGlvbihzcmMpIHtcbiAgICAgICAgICB2YXIgYWZ0ZXJBbmltYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChpc0RlZmluZWQoYXV0b1Njcm9sbEV4cCkgJiYgKCFhdXRvU2Nyb2xsRXhwIHx8IHNjb3BlLiRldmFsKGF1dG9TY3JvbGxFeHApKSkge1xuICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgdGhpc0NoYW5nZUlkID0gKytjaGFuZ2VDb3VudGVyO1xuXG4gICAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgICAgLy9zZXQgdGhlIDJuZCBwYXJhbSB0byB0cnVlIHRvIGlnbm9yZSB0aGUgdGVtcGxhdGUgcmVxdWVzdCBlcnJvciBzbyB0aGF0IHRoZSBpbm5lclxuICAgICAgICAgICAgLy9jb250ZW50cyBhbmQgc2NvcGUgY2FuIGJlIGNsZWFuZWQgdXAuXG4gICAgICAgICAgICAkdGVtcGxhdGVSZXF1ZXN0KHNyYywgdHJ1ZSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICBpZiAodGhpc0NoYW5nZUlkICE9PSBjaGFuZ2VDb3VudGVyKSByZXR1cm47XG4gICAgICAgICAgICAgIHZhciBuZXdTY29wZSA9IHNjb3BlLiRuZXcoKTtcbiAgICAgICAgICAgICAgY3RybC50ZW1wbGF0ZSA9IHJlc3BvbnNlO1xuXG4gICAgICAgICAgICAgIC8vIE5vdGU6IFRoaXMgd2lsbCBhbHNvIGxpbmsgYWxsIGNoaWxkcmVuIG9mIG5nLWluY2x1ZGUgdGhhdCB3ZXJlIGNvbnRhaW5lZCBpbiB0aGUgb3JpZ2luYWxcbiAgICAgICAgICAgICAgLy8gaHRtbC4gSWYgdGhhdCBjb250ZW50IGNvbnRhaW5zIGNvbnRyb2xsZXJzLCAuLi4gdGhleSBjb3VsZCBwb2xsdXRlL2NoYW5nZSB0aGUgc2NvcGUuXG4gICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHVzaW5nIG5nLWluY2x1ZGUgb24gYW4gZWxlbWVudCB3aXRoIGFkZGl0aW9uYWwgY29udGVudCBkb2VzIG5vdCBtYWtlIHNlbnNlLi4uXG4gICAgICAgICAgICAgIC8vIE5vdGU6IFdlIGNhbid0IHJlbW92ZSB0aGVtIGluIHRoZSBjbG9uZUF0dGNoRm4gb2YgJHRyYW5zY2x1ZGUgYXMgdGhhdFxuICAgICAgICAgICAgICAvLyBmdW5jdGlvbiBpcyBjYWxsZWQgYmVmb3JlIGxpbmtpbmcgdGhlIGNvbnRlbnQsIHdoaWNoIHdvdWxkIGFwcGx5IGNoaWxkXG4gICAgICAgICAgICAgIC8vIGRpcmVjdGl2ZXMgdG8gbm9uIGV4aXN0aW5nIGVsZW1lbnRzLlxuICAgICAgICAgICAgICB2YXIgY2xvbmUgPSAkdHJhbnNjbHVkZShuZXdTY29wZSwgZnVuY3Rpb24oY2xvbmUpIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2xvbmUsIG51bGwsICRlbGVtZW50KS50aGVuKGFmdGVyQW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgY3VycmVudFNjb3BlID0gbmV3U2NvcGU7XG4gICAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gY2xvbmU7XG5cbiAgICAgICAgICAgICAgY3VycmVudFNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRMb2FkZWQnLCBzcmMpO1xuICAgICAgICAgICAgICBzY29wZS4kZXZhbChvbmxvYWRFeHApO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzQ2hhbmdlSWQgPT09IGNoYW5nZUNvdW50ZXIpIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGVtaXQoJyRpbmNsdWRlQ29udGVudEVycm9yJywgc3JjKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzY29wZS4kZW1pdCgnJGluY2x1ZGVDb250ZW50UmVxdWVzdGVkJywgc3JjKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpO1xuICAgICAgICAgICAgY3RybC50ZW1wbGF0ZSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cbi8vIFRoaXMgZGlyZWN0aXZlIGlzIGNhbGxlZCBkdXJpbmcgdGhlICR0cmFuc2NsdWRlIGNhbGwgb2YgdGhlIGZpcnN0IGBuZ0luY2x1ZGVgIGRpcmVjdGl2ZS5cbi8vIEl0IHdpbGwgcmVwbGFjZSBhbmQgY29tcGlsZSB0aGUgY29udGVudCBvZiB0aGUgZWxlbWVudCB3aXRoIHRoZSBsb2FkZWQgdGVtcGxhdGUuXG4vLyBXZSBuZWVkIHRoaXMgZGlyZWN0aXZlIHNvIHRoYXQgdGhlIGVsZW1lbnQgY29udGVudCBpcyBhbHJlYWR5IGZpbGxlZCB3aGVuXG4vLyB0aGUgbGluayBmdW5jdGlvbiBvZiBhbm90aGVyIGRpcmVjdGl2ZSBvbiB0aGUgc2FtZSBlbGVtZW50IGFzIG5nSW5jbHVkZVxuLy8gaXMgY2FsbGVkLlxudmFyIG5nSW5jbHVkZUZpbGxDb250ZW50RGlyZWN0aXZlID0gWyckY29tcGlsZScsXG4gIGZ1bmN0aW9uKCRjb21waWxlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnRUNBJyxcbiAgICAgIHByaW9yaXR5OiAtNDAwLFxuICAgICAgcmVxdWlyZTogJ25nSW5jbHVkZScsXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsKSB7XG4gICAgICAgIGlmICgvU1ZHLy50ZXN0KCRlbGVtZW50WzBdLnRvU3RyaW5nKCkpKSB7XG4gICAgICAgICAgLy8gV2ViS2l0OiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM1Njk4IC0tLSBTVkcgZWxlbWVudHMgZG8gbm90XG4gICAgICAgICAgLy8gc3VwcG9ydCBpbm5lckhUTUwsIHNvIGRldGVjdCB0aGlzIGhlcmUgYW5kIHRyeSB0byBnZW5lcmF0ZSB0aGUgY29udGVudHNcbiAgICAgICAgICAvLyBzcGVjaWFsbHkuXG4gICAgICAgICAgJGVsZW1lbnQuZW1wdHkoKTtcbiAgICAgICAgICAkY29tcGlsZShqcUxpdGVCdWlsZEZyYWdtZW50KGN0cmwudGVtcGxhdGUsIGRvY3VtZW50KS5jaGlsZE5vZGVzKShzY29wZSxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gbmFtZXNwYWNlQWRhcHRlZENsb25lKGNsb25lKSB7XG4gICAgICAgICAgICAkZWxlbWVudC5hcHBlbmQoY2xvbmUpO1xuICAgICAgICAgIH0sIHtmdXR1cmVQYXJlbnRFbGVtZW50OiAkZWxlbWVudH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgICRlbGVtZW50Lmh0bWwoY3RybC50ZW1wbGF0ZSk7XG4gICAgICAgICRjb21waWxlKCRlbGVtZW50LmNvbnRlbnRzKCkpKHNjb3BlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0luaXRcbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0luaXRgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIGV2YWx1YXRlIGFuIGV4cHJlc3Npb24gaW4gdGhlXG4gKiBjdXJyZW50IHNjb3BlLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXJcIj5cbiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhYnVzZWQgdG8gYWRkIHVubmVjZXNzYXJ5IGFtb3VudHMgb2YgbG9naWMgaW50byB5b3VyIHRlbXBsYXRlcy5cbiAqIFRoZXJlIGFyZSBvbmx5IGEgZmV3IGFwcHJvcHJpYXRlIHVzZXMgb2YgYG5nSW5pdGAsIHN1Y2ggYXMgZm9yIGFsaWFzaW5nIHNwZWNpYWwgcHJvcGVydGllcyBvZlxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBgbmdSZXBlYXRgfSwgYXMgc2VlbiBpbiB0aGUgZGVtbyBiZWxvdzsgYW5kIGZvciBpbmplY3RpbmcgZGF0YSB2aWFcbiAqIHNlcnZlciBzaWRlIHNjcmlwdGluZy4gQmVzaWRlcyB0aGVzZSBmZXcgY2FzZXMsIHlvdSBzaG91bGQgdXNlIHtAbGluayBndWlkZS9jb250cm9sbGVyIGNvbnRyb2xsZXJzfVxuICogcmF0aGVyIHRoYW4gYG5nSW5pdGAgdG8gaW5pdGlhbGl6ZSB2YWx1ZXMgb24gYSBzY29wZS5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGUqKjogSWYgeW91IGhhdmUgYXNzaWdubWVudCBpbiBgbmdJbml0YCBhbG9uZyB3aXRoIGEge0BsaW5rIG5nLiRmaWx0ZXIgYGZpbHRlcmB9LCBtYWtlXG4gKiBzdXJlIHlvdSBoYXZlIHBhcmVudGhlc2VzIHRvIGVuc3VyZSBjb3JyZWN0IG9wZXJhdG9yIHByZWNlZGVuY2U6XG4gKiA8cHJlIGNsYXNzPVwicHJldHR5cHJpbnRcIj5cbiAqIGA8ZGl2IG5nLWluaXQ9XCJ0ZXN0MSA9ICgkaW5kZXggfCB0b1N0cmluZylcIj48L2Rpdj5gXG4gKiA8L3ByZT5cbiAqIDwvZGl2PlxuICpcbiAqIEBwcmlvcml0eSA0NTBcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdJbml0IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImluaXRFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICA8c2NyaXB0PlxuICAgICBhbmd1bGFyLm1vZHVsZSgnaW5pdEV4YW1wbGUnLCBbXSlcbiAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgJHNjb3BlLmxpc3QgPSBbWydhJywgJ2InXSwgWydjJywgJ2QnXV07XG4gICAgICAgfV0pO1xuICAgPC9zY3JpcHQ+XG4gICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICA8ZGl2IG5nLXJlcGVhdD1cImlubmVyTGlzdCBpbiBsaXN0XCIgbmctaW5pdD1cIm91dGVySW5kZXggPSAkaW5kZXhcIj5cbiAgICAgICA8ZGl2IG5nLXJlcGVhdD1cInZhbHVlIGluIGlubmVyTGlzdFwiIG5nLWluaXQ9XCJpbm5lckluZGV4ID0gJGluZGV4XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJleGFtcGxlLWluaXRcIj5saXN0WyB7e291dGVySW5kZXh9fSBdWyB7e2lubmVySW5kZXh9fSBdID0ge3t2YWx1ZX19Ozwvc3Bhbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9kaXY+XG4gICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBhbGlhcyBpbmRleCBwb3NpdGlvbnMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBlbGVtZW50cyA9IGVsZW1lbnQuYWxsKGJ5LmNzcygnLmV4YW1wbGUtaW5pdCcpKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50cy5nZXQoMCkuZ2V0VGV4dCgpKS50b0JlKCdsaXN0WyAwIF1bIDAgXSA9IGE7Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDEpLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMCBdWyAxIF0gPSBiOycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnRzLmdldCgyKS5nZXRUZXh0KCkpLnRvQmUoJ2xpc3RbIDEgXVsgMCBdID0gYzsnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50cy5nZXQoMykuZ2V0VGV4dCgpKS50b0JlKCdsaXN0WyAxIF1bIDEgXSA9IGQ7Jyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nSW5pdERpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHtcbiAgcHJpb3JpdHk6IDQ1MCxcbiAgY29tcGlsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByZTogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgIHNjb3BlLiRldmFsKGF0dHJzLm5nSW5pdCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdMaXN0XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUZXh0IGlucHV0IHRoYXQgY29udmVydHMgYmV0d2VlbiBhIGRlbGltaXRlZCBzdHJpbmcgYW5kIGFuIGFycmF5IG9mIHN0cmluZ3MuIFRoZSBkZWZhdWx0XG4gKiBkZWxpbWl0ZXIgaXMgYSBjb21tYSBmb2xsb3dlZCBieSBhIHNwYWNlIC0gZXF1aXZhbGVudCB0byBgbmctbGlzdD1cIiwgXCJgLiBZb3UgY2FuIHNwZWNpZnkgYSBjdXN0b21cbiAqIGRlbGltaXRlciBhcyB0aGUgdmFsdWUgb2YgdGhlIGBuZ0xpc3RgIGF0dHJpYnV0ZSAtIGZvciBleGFtcGxlLCBgbmctbGlzdD1cIiB8IFwiYC5cbiAqXG4gKiBUaGUgYmVoYXZpb3VyIG9mIHRoZSBkaXJlY3RpdmUgaXMgYWZmZWN0ZWQgYnkgdGhlIHVzZSBvZiB0aGUgYG5nVHJpbWAgYXR0cmlidXRlLlxuICogKiBJZiBgbmdUcmltYCBpcyBzZXQgdG8gYFwiZmFsc2VcImAgdGhlbiB3aGl0ZXNwYWNlIGFyb3VuZCBib3RoIHRoZSBzZXBhcmF0b3IgYW5kIGVhY2hcbiAqICAgbGlzdCBpdGVtIGlzIHJlc3BlY3RlZC4gVGhpcyBpbXBsaWVzIHRoYXQgdGhlIHVzZXIgb2YgdGhlIGRpcmVjdGl2ZSBpcyByZXNwb25zaWJsZSBmb3JcbiAqICAgZGVhbGluZyB3aXRoIHdoaXRlc3BhY2UgYnV0IGFsc28gYWxsb3dzIHlvdSB0byB1c2Ugd2hpdGVzcGFjZSBhcyBhIGRlbGltaXRlciwgc3VjaCBhcyBhXG4gKiAgIHRhYiBvciBuZXdsaW5lIGNoYXJhY3Rlci5cbiAqICogT3RoZXJ3aXNlIHdoaXRlc3BhY2UgYXJvdW5kIHRoZSBkZWxpbWl0ZXIgaXMgaWdub3JlZCB3aGVuIHNwbGl0dGluZyAoYWx0aG91Z2ggaXQgaXMgcmVzcGVjdGVkXG4gKiAgIHdoZW4gam9pbmluZyB0aGUgbGlzdCBpdGVtcyBiYWNrIHRvZ2V0aGVyKSBhbmQgd2hpdGVzcGFjZSBhcm91bmQgZWFjaCBsaXN0IGl0ZW0gaXMgc3RyaXBwZWRcbiAqICAgYmVmb3JlIGl0IGlzIGFkZGVkIHRvIHRoZSBtb2RlbC5cbiAqXG4gKiAjIyMgRXhhbXBsZSB3aXRoIFZhbGlkYXRpb25cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdMaXN0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImxpc3RFeGFtcGxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICAgICAgYW5ndWxhci5tb2R1bGUoJ2xpc3RFeGFtcGxlJywgW10pXG4gKiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICAgICRzY29wZS5uYW1lcyA9IFsnbW9ycGhldXMnLCAnbmVvJywgJ3RyaW5pdHknXTtcbiAqICAgICAgICB9XSk7XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgICAgPGxhYmVsPkxpc3Q6IDxpbnB1dCBuYW1lPVwibmFtZXNJbnB1dFwiIG5nLW1vZGVsPVwibmFtZXNcIiBuZy1saXN0IHJlcXVpcmVkPjwvbGFiZWw+XG4gKiAgICAgIDxzcGFuIHJvbGU9XCJhbGVydFwiPlxuICogICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLm5hbWVzSW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gKiAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICogICAgICA8L3NwYW4+XG4gKiAgICAgIDxicj5cbiAqICAgICAgPHR0Pm5hbWVzID0ge3tuYW1lc319PC90dD48YnIvPlxuICogICAgICA8dHQ+bXlGb3JtLm5hbWVzSW5wdXQuJHZhbGlkID0ge3tteUZvcm0ubmFtZXNJbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAqICAgICAgPHR0Pm15Rm9ybS5uYW1lc0lucHV0LiRlcnJvciA9IHt7bXlGb3JtLm5hbWVzSW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gKiAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gKiAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAqICAgICA8L2Zvcm0+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgIHZhciBsaXN0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCduYW1lcycpKTtcbiAqICAgICB2YXIgbmFtZXMgPSBlbGVtZW50KGJ5LmV4YWN0QmluZGluZygnbmFtZXMnKSk7XG4gKiAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0ubmFtZXNJbnB1dC4kdmFsaWQnKSk7XG4gKiAgICAgdmFyIGVycm9yID0gZWxlbWVudChieS5jc3MoJ3NwYW4uZXJyb3InKSk7XG4gKlxuICogICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZXhwZWN0KG5hbWVzLmdldFRleHQoKSkudG9Db250YWluKCdbXCJtb3JwaGV1c1wiLFwibmVvXCIsXCJ0cmluaXR5XCJdJyk7XG4gKiAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAqICAgICAgIGV4cGVjdChlcnJvci5nZXRDc3NWYWx1ZSgnZGlzcGxheScpKS50b0JlKCdub25lJyk7XG4gKiAgICAgfSk7XG4gKlxuICogICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICogICAgICAgbGlzdElucHV0LmNsZWFyKCk7XG4gKiAgICAgICBsaXN0SW5wdXQuc2VuZEtleXMoJycpO1xuICpcbiAqICAgICAgIGV4cGVjdChuYW1lcy5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7XG4gKiAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gKiAgICAgICBleHBlY3QoZXJyb3IuZ2V0Q3NzVmFsdWUoJ2Rpc3BsYXknKSkubm90LnRvQmUoJ25vbmUnKTtcbiAqICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqICMjIyBFeGFtcGxlIC0gc3BsaXR0aW5nIG9uIG5ld2xpbmVcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ0xpc3QtZGlyZWN0aXZlLW5ld2xpbmVzXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICA8dGV4dGFyZWEgbmctbW9kZWw9XCJsaXN0XCIgbmctbGlzdD1cIiYjMTA7XCIgbmctdHJpbT1cImZhbHNlXCI+PC90ZXh0YXJlYT5cbiAqICAgIDxwcmU+e3sgbGlzdCB8IGpzb24gfX08L3ByZT5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICAgaXQoXCJzaG91bGQgc3BsaXQgdGhlIHRleHQgYnkgbmV3bGluZXNcIiwgZnVuY3Rpb24oKSB7XG4gKiAgICAgICB2YXIgbGlzdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbGlzdCcpKTtcbiAqICAgICAgIHZhciBvdXRwdXQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QgfCBqc29uJykpO1xuICogICAgICAgbGlzdElucHV0LnNlbmRLZXlzKCdhYmNcXG5kZWZcXG5naGknKTtcbiAqICAgICAgIGV4cGVjdChvdXRwdXQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ1tcXG4gIFwiYWJjXCIsXFxuICBcImRlZlwiLFxcbiAgXCJnaGlcIlxcbl0nKTtcbiAqICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIEBlbGVtZW50IGlucHV0XG4gKiBAcGFyYW0ge3N0cmluZz19IG5nTGlzdCBvcHRpb25hbCBkZWxpbWl0ZXIgdGhhdCBzaG91bGQgYmUgdXNlZCB0byBzcGxpdCB0aGUgdmFsdWUuXG4gKi9cbnZhciBuZ0xpc3REaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHByaW9yaXR5OiAxMDAsXG4gICAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gICAgICAvLyBXZSB3YW50IHRvIGNvbnRyb2wgd2hpdGVzcGFjZSB0cmltbWluZyBzbyB3ZSB1c2UgdGhpcyBjb252b2x1dGVkIGFwcHJvYWNoXG4gICAgICAvLyB0byBhY2Nlc3MgdGhlIG5nTGlzdCBhdHRyaWJ1dGUsIHdoaWNoIGRvZXNuJ3QgcHJlLXRyaW0gdGhlIGF0dHJpYnV0ZVxuICAgICAgdmFyIG5nTGlzdCA9IGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyLm5nTGlzdCkgfHwgJywgJztcbiAgICAgIHZhciB0cmltVmFsdWVzID0gYXR0ci5uZ1RyaW0gIT09ICdmYWxzZSc7XG4gICAgICB2YXIgc2VwYXJhdG9yID0gdHJpbVZhbHVlcyA/IHRyaW0obmdMaXN0KSA6IG5nTGlzdDtcblxuICAgICAgdmFyIHBhcnNlID0gZnVuY3Rpb24odmlld1ZhbHVlKSB7XG4gICAgICAgIC8vIElmIHRoZSB2aWV3VmFsdWUgaXMgaW52YWxpZCAoc2F5IHJlcXVpcmVkIGJ1dCBlbXB0eSkgaXQgd2lsbCBiZSBgdW5kZWZpbmVkYFxuICAgICAgICBpZiAoaXNVbmRlZmluZWQodmlld1ZhbHVlKSkgcmV0dXJuO1xuXG4gICAgICAgIHZhciBsaXN0ID0gW107XG5cbiAgICAgICAgaWYgKHZpZXdWYWx1ZSkge1xuICAgICAgICAgIGZvckVhY2godmlld1ZhbHVlLnNwbGl0KHNlcGFyYXRvciksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUpIGxpc3QucHVzaCh0cmltVmFsdWVzID8gdHJpbSh2YWx1ZSkgOiB2YWx1ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICAgIH07XG5cbiAgICAgIGN0cmwuJHBhcnNlcnMucHVzaChwYXJzZSk7XG4gICAgICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlLmpvaW4obmdMaXN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9KTtcblxuICAgICAgLy8gT3ZlcnJpZGUgdGhlIHN0YW5kYXJkICRpc0VtcHR5IGJlY2F1c2UgYW4gZW1wdHkgYXJyYXkgbWVhbnMgdGhlIGlucHV0IGlzIGVtcHR5LlxuICAgICAgY3RybC4kaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUgfHwgIXZhbHVlLmxlbmd0aDtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTtcblxuLyogZ2xvYmFsIFZBTElEX0NMQVNTOiB0cnVlLFxuICBJTlZBTElEX0NMQVNTOiB0cnVlLFxuICBQUklTVElORV9DTEFTUzogdHJ1ZSxcbiAgRElSVFlfQ0xBU1M6IHRydWUsXG4gIFVOVE9VQ0hFRF9DTEFTUzogdHJ1ZSxcbiAgVE9VQ0hFRF9DTEFTUzogdHJ1ZSxcbiovXG5cbnZhciBWQUxJRF9DTEFTUyA9ICduZy12YWxpZCcsXG4gICAgSU5WQUxJRF9DTEFTUyA9ICduZy1pbnZhbGlkJyxcbiAgICBQUklTVElORV9DTEFTUyA9ICduZy1wcmlzdGluZScsXG4gICAgRElSVFlfQ0xBU1MgPSAnbmctZGlydHknLFxuICAgIFVOVE9VQ0hFRF9DTEFTUyA9ICduZy11bnRvdWNoZWQnLFxuICAgIFRPVUNIRURfQ0xBU1MgPSAnbmctdG91Y2hlZCcsXG4gICAgUEVORElOR19DTEFTUyA9ICduZy1wZW5kaW5nJztcblxudmFyIG5nTW9kZWxNaW5FcnIgPSBtaW5FcnIoJ25nTW9kZWwnKTtcblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlclxuICpcbiAqIEBwcm9wZXJ0eSB7Kn0gJHZpZXdWYWx1ZSBUaGUgYWN0dWFsIHZhbHVlIGZyb20gdGhlIGNvbnRyb2wncyB2aWV3LiBGb3IgYGlucHV0YCBlbGVtZW50cywgdGhpcyBpcyBhXG4gKiBTdHJpbmcuIFNlZSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0Vmlld1ZhbHVlfSBmb3IgaW5mb3JtYXRpb24gYWJvdXQgd2hlbiB0aGUgJHZpZXdWYWx1ZVxuICogaXMgc2V0LlxuICogQHByb3BlcnR5IHsqfSAkbW9kZWxWYWx1ZSBUaGUgdmFsdWUgaW4gdGhlIG1vZGVsIHRoYXQgdGhlIGNvbnRyb2wgaXMgYm91bmQgdG8uXG4gKiBAcHJvcGVydHkge0FycmF5LjxGdW5jdGlvbj59ICRwYXJzZXJzIEFycmF5IG9mIGZ1bmN0aW9ucyB0byBleGVjdXRlLCBhcyBhIHBpcGVsaW5lLCB3aGVuZXZlclxuICAgICAgIHRoZSBjb250cm9sIHJlYWRzIHZhbHVlIGZyb20gdGhlIERPTS4gVGhlIGZ1bmN0aW9ucyBhcmUgY2FsbGVkIGluIGFycmF5IG9yZGVyLCBlYWNoIHBhc3NpbmdcbiAgICAgICBpdHMgcmV0dXJuIHZhbHVlIHRocm91Z2ggdG8gdGhlIG5leHQuIFRoZSBsYXN0IHJldHVybiB2YWx1ZSBpcyBmb3J3YXJkZWQgdG8gdGhlXG4gICAgICAge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZhbGlkYXRvcnMgYCR2YWxpZGF0b3JzYH0gY29sbGVjdGlvbi5cblxuUGFyc2VycyBhcmUgdXNlZCB0byBzYW5pdGl6ZSAvIGNvbnZlcnQgdGhlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWVcbmAkdmlld1ZhbHVlYH0uXG5cblJldHVybmluZyBgdW5kZWZpbmVkYCBmcm9tIGEgcGFyc2VyIG1lYW5zIGEgcGFyc2UgZXJyb3Igb2NjdXJyZWQuIEluIHRoYXQgY2FzZSxcbm5vIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0b3JzIGAkdmFsaWRhdG9yc2B9IHdpbGwgcnVuIGFuZCB0aGUgYG5nTW9kZWxgXG53aWxsIGJlIHNldCB0byBgdW5kZWZpbmVkYCB1bmxlc3Mge0BsaW5rIG5nTW9kZWxPcHRpb25zIGBuZ01vZGVsT3B0aW9ucy5hbGxvd0ludmFsaWRgfVxuaXMgc2V0IHRvIGB0cnVlYC4gVGhlIHBhcnNlIGVycm9yIGlzIHN0b3JlZCBpbiBgbmdNb2RlbC4kZXJyb3IucGFyc2VgLlxuXG4gKlxuICogQHByb3BlcnR5IHtBcnJheS48RnVuY3Rpb24+fSAkZm9ybWF0dGVycyBBcnJheSBvZiBmdW5jdGlvbnMgdG8gZXhlY3V0ZSwgYXMgYSBwaXBlbGluZSwgd2hlbmV2ZXJcbiAgICAgICB0aGUgbW9kZWwgdmFsdWUgY2hhbmdlcy4gVGhlIGZ1bmN0aW9ucyBhcmUgY2FsbGVkIGluIHJldmVyc2UgYXJyYXkgb3JkZXIsIGVhY2ggcGFzc2luZyB0aGUgdmFsdWUgdGhyb3VnaCB0byB0aGVcbiAgICAgICBuZXh0LiBUaGUgbGFzdCByZXR1cm4gdmFsdWUgaXMgdXNlZCBhcyB0aGUgYWN0dWFsIERPTSB2YWx1ZS5cbiAgICAgICBVc2VkIHRvIGZvcm1hdCAvIGNvbnZlcnQgdmFsdWVzIGZvciBkaXNwbGF5IGluIHRoZSBjb250cm9sLlxuICogYGBganNcbiAqIGZ1bmN0aW9uIGZvcm1hdHRlcih2YWx1ZSkge1xuICogICBpZiAodmFsdWUpIHtcbiAqICAgICByZXR1cm4gdmFsdWUudG9VcHBlckNhc2UoKTtcbiAqICAgfVxuICogfVxuICogbmdNb2RlbC4kZm9ybWF0dGVycy5wdXNoKGZvcm1hdHRlcik7XG4gKiBgYGBcbiAqXG4gKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLCBmdW5jdGlvbj59ICR2YWxpZGF0b3JzIEEgY29sbGVjdGlvbiBvZiB2YWxpZGF0b3JzIHRoYXQgYXJlIGFwcGxpZWRcbiAqICAgICAgd2hlbmV2ZXIgdGhlIG1vZGVsIHZhbHVlIGNoYW5nZXMuIFRoZSBrZXkgdmFsdWUgd2l0aGluIHRoZSBvYmplY3QgcmVmZXJzIHRvIHRoZSBuYW1lIG9mIHRoZVxuICogICAgICB2YWxpZGF0b3Igd2hpbGUgdGhlIGZ1bmN0aW9uIHJlZmVycyB0byB0aGUgdmFsaWRhdGlvbiBvcGVyYXRpb24uIFRoZSB2YWxpZGF0aW9uIG9wZXJhdGlvbiBpc1xuICogICAgICBwcm92aWRlZCB3aXRoIHRoZSBtb2RlbCB2YWx1ZSBhcyBhbiBhcmd1bWVudCBhbmQgbXVzdCByZXR1cm4gYSB0cnVlIG9yIGZhbHNlIHZhbHVlIGRlcGVuZGluZ1xuICogICAgICBvbiB0aGUgcmVzcG9uc2Ugb2YgdGhhdCB2YWxpZGF0aW9uLlxuICpcbiAqIGBgYGpzXG4gKiBuZ01vZGVsLiR2YWxpZGF0b3JzLnZhbGlkQ2hhcmFjdGVycyA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICogICB2YXIgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTtcbiAqICAgcmV0dXJuIC9bMC05XSsvLnRlc3QodmFsdWUpICYmXG4gKiAgICAgICAgICAvW2Etel0rLy50ZXN0KHZhbHVlKSAmJlxuICogICAgICAgICAgL1tBLVpdKy8udGVzdCh2YWx1ZSkgJiZcbiAqICAgICAgICAgIC9cXFcrLy50ZXN0KHZhbHVlKTtcbiAqIH07XG4gKiBgYGBcbiAqXG4gKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLCBmdW5jdGlvbj59ICRhc3luY1ZhbGlkYXRvcnMgQSBjb2xsZWN0aW9uIG9mIHZhbGlkYXRpb25zIHRoYXQgYXJlIGV4cGVjdGVkIHRvXG4gKiAgICAgIHBlcmZvcm0gYW4gYXN5bmNocm9ub3VzIHZhbGlkYXRpb24gKGUuZy4gYSBIVFRQIHJlcXVlc3QpLiBUaGUgdmFsaWRhdGlvbiBmdW5jdGlvbiB0aGF0IGlzIHByb3ZpZGVkXG4gKiAgICAgIGlzIGV4cGVjdGVkIHRvIHJldHVybiBhIHByb21pc2Ugd2hlbiBpdCBpcyBydW4gZHVyaW5nIHRoZSBtb2RlbCB2YWxpZGF0aW9uIHByb2Nlc3MuIE9uY2UgdGhlIHByb21pc2VcbiAqICAgICAgaXMgZGVsaXZlcmVkIHRoZW4gdGhlIHZhbGlkYXRpb24gc3RhdHVzIHdpbGwgYmUgc2V0IHRvIHRydWUgd2hlbiBmdWxmaWxsZWQgYW5kIGZhbHNlIHdoZW4gcmVqZWN0ZWQuXG4gKiAgICAgIFdoZW4gdGhlIGFzeW5jaHJvbm91cyB2YWxpZGF0b3JzIGFyZSB0cmlnZ2VyZWQsIGVhY2ggb2YgdGhlIHZhbGlkYXRvcnMgd2lsbCBydW4gaW4gcGFyYWxsZWwgYW5kIHRoZSBtb2RlbFxuICogICAgICB2YWx1ZSB3aWxsIG9ubHkgYmUgdXBkYXRlZCBvbmNlIGFsbCB2YWxpZGF0b3JzIGhhdmUgYmVlbiBmdWxmaWxsZWQuIEFzIGxvbmcgYXMgYW4gYXN5bmNocm9ub3VzIHZhbGlkYXRvclxuICogICAgICBpcyB1bmZ1bGZpbGxlZCwgaXRzIGtleSB3aWxsIGJlIGFkZGVkIHRvIHRoZSBjb250cm9sbGVycyBgJHBlbmRpbmdgIHByb3BlcnR5LiBBbHNvLCBhbGwgYXN5bmNocm9ub3VzIHZhbGlkYXRvcnNcbiAqICAgICAgd2lsbCBvbmx5IHJ1biBvbmNlIGFsbCBzeW5jaHJvbm91cyB2YWxpZGF0b3JzIGhhdmUgcGFzc2VkLlxuICpcbiAqIFBsZWFzZSBub3RlIHRoYXQgaWYgJGh0dHAgaXMgdXNlZCB0aGVuIGl0IGlzIGltcG9ydGFudCB0aGF0IHRoZSBzZXJ2ZXIgcmV0dXJucyBhIHN1Y2Nlc3MgSFRUUCByZXNwb25zZSBjb2RlXG4gKiBpbiBvcmRlciB0byBmdWxmaWxsIHRoZSB2YWxpZGF0aW9uIGFuZCBhIHN0YXR1cyBsZXZlbCBvZiBgNHh4YCBpbiBvcmRlciB0byByZWplY3QgdGhlIHZhbGlkYXRpb24uXG4gKlxuICogYGBganNcbiAqIG5nTW9kZWwuJGFzeW5jVmFsaWRhdG9ycy51bmlxdWVVc2VybmFtZSA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICogICB2YXIgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTtcbiAqXG4gKiAgIC8vIExvb2t1cCB1c2VyIGJ5IHVzZXJuYW1lXG4gKiAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMvJyArIHZhbHVlKS5cbiAqICAgICAgdGhlbihmdW5jdGlvbiByZXNvbHZlZCgpIHtcbiAqICAgICAgICAvL3VzZXJuYW1lIGV4aXN0cywgdGhpcyBtZWFucyB2YWxpZGF0aW9uIGZhaWxzXG4gKiAgICAgICAgcmV0dXJuICRxLnJlamVjdCgnZXhpc3RzJyk7XG4gKiAgICAgIH0sIGZ1bmN0aW9uIHJlamVjdGVkKCkge1xuICogICAgICAgIC8vdXNlcm5hbWUgZG9lcyBub3QgZXhpc3QsIHRoZXJlZm9yZSB0aGlzIHZhbGlkYXRpb24gcGFzc2VzXG4gKiAgICAgICAgcmV0dXJuIHRydWU7XG4gKiAgICAgIH0pO1xuICogfTtcbiAqIGBgYFxuICpcbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPEZ1bmN0aW9uPn0gJHZpZXdDaGFuZ2VMaXN0ZW5lcnMgQXJyYXkgb2YgZnVuY3Rpb25zIHRvIGV4ZWN1dGUgd2hlbmV2ZXIgdGhlXG4gKiAgICAgdmlldyB2YWx1ZSBoYXMgY2hhbmdlZC4gSXQgaXMgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzLCBhbmQgaXRzIHJldHVybiB2YWx1ZSBpcyBpZ25vcmVkLlxuICogICAgIFRoaXMgY2FuIGJlIHVzZWQgaW4gcGxhY2Ugb2YgYWRkaXRpb25hbCAkd2F0Y2hlcyBhZ2FpbnN0IHRoZSBtb2RlbCB2YWx1ZS5cbiAqXG4gKiBAcHJvcGVydHkge09iamVjdH0gJGVycm9yIEFuIG9iamVjdCBoYXNoIHdpdGggYWxsIGZhaWxpbmcgdmFsaWRhdG9yIGlkcyBhcyBrZXlzLlxuICogQHByb3BlcnR5IHtPYmplY3R9ICRwZW5kaW5nIEFuIG9iamVjdCBoYXNoIHdpdGggYWxsIHBlbmRpbmcgdmFsaWRhdG9yIGlkcyBhcyBrZXlzLlxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHVudG91Y2hlZCBUcnVlIGlmIGNvbnRyb2wgaGFzIG5vdCBsb3N0IGZvY3VzIHlldC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHRvdWNoZWQgVHJ1ZSBpZiBjb250cm9sIGhhcyBsb3N0IGZvY3VzLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkcHJpc3RpbmUgVHJ1ZSBpZiB1c2VyIGhhcyBub3QgaW50ZXJhY3RlZCB3aXRoIHRoZSBjb250cm9sIHlldC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGRpcnR5IFRydWUgaWYgdXNlciBoYXMgYWxyZWFkeSBpbnRlcmFjdGVkIHdpdGggdGhlIGNvbnRyb2wuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICR2YWxpZCBUcnVlIGlmIHRoZXJlIGlzIG5vIGVycm9yLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkaW52YWxpZCBUcnVlIGlmIGF0IGxlYXN0IG9uZSBlcnJvciBvbiB0aGUgY29udHJvbC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAkbmFtZSBUaGUgbmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGNvbnRyb2wuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogYE5nTW9kZWxDb250cm9sbGVyYCBwcm92aWRlcyBBUEkgZm9yIHRoZSB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9IGRpcmVjdGl2ZS5cbiAqIFRoZSBjb250cm9sbGVyIGNvbnRhaW5zIHNlcnZpY2VzIGZvciBkYXRhLWJpbmRpbmcsIHZhbGlkYXRpb24sIENTUyB1cGRhdGVzLCBhbmQgdmFsdWUgZm9ybWF0dGluZ1xuICogYW5kIHBhcnNpbmcuIEl0IHB1cnBvc2VmdWxseSBkb2VzIG5vdCBjb250YWluIGFueSBsb2dpYyB3aGljaCBkZWFscyB3aXRoIERPTSByZW5kZXJpbmcgb3JcbiAqIGxpc3RlbmluZyB0byBET00gZXZlbnRzLlxuICogU3VjaCBET00gcmVsYXRlZCBsb2dpYyBzaG91bGQgYmUgcHJvdmlkZWQgYnkgb3RoZXIgZGlyZWN0aXZlcyB3aGljaCBtYWtlIHVzZSBvZlxuICogYE5nTW9kZWxDb250cm9sbGVyYCBmb3IgZGF0YS1iaW5kaW5nIHRvIGNvbnRyb2wgZWxlbWVudHMuXG4gKiBBbmd1bGFyIHByb3ZpZGVzIHRoaXMgRE9NIGxvZ2ljIGZvciBtb3N0IHtAbGluayBpbnB1dCBgaW5wdXRgfSBlbGVtZW50cy5cbiAqIEF0IHRoZSBlbmQgb2YgdGhpcyBwYWdlIHlvdSBjYW4gZmluZCBhIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyI2N1c3RvbS1jb250cm9sLWV4YW1wbGVcbiAqIGN1c3RvbSBjb250cm9sIGV4YW1wbGV9IHRoYXQgdXNlcyBgbmdNb2RlbENvbnRyb2xsZXJgIHRvIGJpbmQgdG8gYGNvbnRlbnRlZGl0YWJsZWAgZWxlbWVudHMuXG4gKlxuICogQGV4YW1wbGVcbiAqICMjIyBDdXN0b20gQ29udHJvbCBFeGFtcGxlXG4gKiBUaGlzIGV4YW1wbGUgc2hvd3MgaG93IHRvIHVzZSBgTmdNb2RlbENvbnRyb2xsZXJgIHdpdGggYSBjdXN0b20gY29udHJvbCB0byBhY2hpZXZlXG4gKiBkYXRhLWJpbmRpbmcuIE5vdGljZSBob3cgZGlmZmVyZW50IGRpcmVjdGl2ZXMgKGBjb250ZW50ZWRpdGFibGVgLCBgbmctbW9kZWxgLCBhbmQgYHJlcXVpcmVkYClcbiAqIGNvbGxhYm9yYXRlIHRvZ2V0aGVyIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgcmVzdWx0LlxuICpcbiAqIGBjb250ZW50ZWRpdGFibGVgIGlzIGFuIEhUTUw1IGF0dHJpYnV0ZSwgd2hpY2ggdGVsbHMgdGhlIGJyb3dzZXIgdG8gbGV0IHRoZSBlbGVtZW50XG4gKiBjb250ZW50cyBiZSBlZGl0ZWQgaW4gcGxhY2UgYnkgdGhlIHVzZXIuXG4gKlxuICogV2UgYXJlIHVzaW5nIHRoZSB7QGxpbmsgbmcuc2VydmljZTokc2NlICRzY2V9IHNlcnZpY2UgaGVyZSBhbmQgaW5jbHVkZSB0aGUge0BsaW5rIG5nU2FuaXRpemUgJHNhbml0aXplfVxuICogbW9kdWxlIHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIFwiYmFkXCIgY29udGVudCBsaWtlIGlubGluZSBldmVudCBsaXN0ZW5lciAoZS5nLiBgPHNwYW4gb25jbGljaz1cIi4uLlwiPmApLlxuICogSG93ZXZlciwgYXMgd2UgYXJlIHVzaW5nIGAkc2NlYCB0aGUgbW9kZWwgY2FuIHN0aWxsIGRlY2lkZSB0byBwcm92aWRlIHVuc2FmZSBjb250ZW50IGlmIGl0IG1hcmtzXG4gKiB0aGF0IGNvbnRlbnQgdXNpbmcgdGhlIGAkc2NlYCBzZXJ2aWNlLlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJOZ01vZGVsQ29udHJvbGxlclwiIG1vZHVsZT1cImN1c3RvbUNvbnRyb2xcIiBkZXBzPVwiYW5ndWxhci1zYW5pdGl6ZS5qc1wiPlxuICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgIFtjb250ZW50ZWRpdGFibGVdIHtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgICAgICBtaW4taGVpZ2h0OiAyMHB4O1xuICAgICAgfVxuXG4gICAgICAubmctaW52YWxpZCB7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJlZDtcbiAgICAgIH1cblxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnY3VzdG9tQ29udHJvbCcsIFsnbmdTYW5pdGl6ZSddKS5cbiAgICAgICAgZGlyZWN0aXZlKCdjb250ZW50ZWRpdGFibGUnLCBbJyRzY2UnLCBmdW5jdGlvbigkc2NlKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsIC8vIG9ubHkgYWN0aXZhdGUgb24gZWxlbWVudCBhdHRyaWJ1dGVcbiAgICAgICAgICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsIC8vIGdldCBhIGhvbGQgb2YgTmdNb2RlbENvbnRyb2xsZXJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xuICAgICAgICAgICAgICBpZiAoIW5nTW9kZWwpIHJldHVybjsgLy8gZG8gbm90aGluZyBpZiBubyBuZy1tb2RlbFxuXG4gICAgICAgICAgICAgIC8vIFNwZWNpZnkgaG93IFVJIHNob3VsZCBiZSB1cGRhdGVkXG4gICAgICAgICAgICAgIG5nTW9kZWwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuaHRtbCgkc2NlLmdldFRydXN0ZWRIdG1sKG5nTW9kZWwuJHZpZXdWYWx1ZSB8fCAnJykpO1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgY2hhbmdlIGV2ZW50cyB0byBlbmFibGUgYmluZGluZ1xuICAgICAgICAgICAgICBlbGVtZW50Lm9uKCdibHVyIGtleXVwIGNoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHNjb3BlLiRldmFsQXN5bmMocmVhZCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZWFkKCk7IC8vIGluaXRpYWxpemVcblxuICAgICAgICAgICAgICAvLyBXcml0ZSBkYXRhIHRvIHRoZSBtb2RlbFxuICAgICAgICAgICAgICBmdW5jdGlvbiByZWFkKCkge1xuICAgICAgICAgICAgICAgIHZhciBodG1sID0gZWxlbWVudC5odG1sKCk7XG4gICAgICAgICAgICAgICAgLy8gV2hlbiB3ZSBjbGVhciB0aGUgY29udGVudCBlZGl0YWJsZSB0aGUgYnJvd3NlciBsZWF2ZXMgYSA8YnI+IGJlaGluZFxuICAgICAgICAgICAgICAgIC8vIElmIHN0cmlwLWJyIGF0dHJpYnV0ZSBpcyBwcm92aWRlZCB0aGVuIHdlIHN0cmlwIHRoaXMgb3V0XG4gICAgICAgICAgICAgICAgaWYgKCBhdHRycy5zdHJpcEJyICYmIGh0bWwgPT0gJzxicj4nICkge1xuICAgICAgICAgICAgICAgICAgaHRtbCA9ICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZ01vZGVsLiRzZXRWaWV3VmFsdWUoaHRtbCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XSk7XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gICAgICAgPGRpdiBjb250ZW50ZWRpdGFibGVcbiAgICAgICAgICAgIG5hbWU9XCJteVdpZGdldFwiIG5nLW1vZGVsPVwidXNlckNvbnRlbnRcIlxuICAgICAgICAgICAgc3RyaXAtYnI9XCJ0cnVlXCJcbiAgICAgICAgICAgIHJlcXVpcmVkPkNoYW5nZSBtZSE8L2Rpdj5cbiAgICAgICAgPHNwYW4gbmctc2hvdz1cIm15Rm9ybS5teVdpZGdldC4kZXJyb3IucmVxdWlyZWRcIj5SZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgPGhyPlxuICAgICAgIDx0ZXh0YXJlYSBuZy1tb2RlbD1cInVzZXJDb250ZW50XCIgYXJpYS1sYWJlbD1cIkR5bmFtaWMgdGV4dGFyZWFcIj48L3RleHRhcmVhPlxuICAgICAgPC9mb3JtPlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgaXQoJ3Nob3VsZCBkYXRhLWJpbmQgYW5kIGJlY29tZSBpbnZhbGlkJywgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PSAnc2FmYXJpJyB8fCBicm93c2VyLnBhcmFtcy5icm93c2VyID09ICdmaXJlZm94Jykge1xuICAgICAgICAvLyBTYWZhcmlEcml2ZXIgY2FuJ3QgaGFuZGxlIGNvbnRlbnRlZGl0YWJsZVxuICAgICAgICAvLyBhbmQgRmlyZWZveCBkcml2ZXIgY2FuJ3QgY2xlYXIgY29udGVudGVkaXRhYmxlcyB2ZXJ5IHdlbGxcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGNvbnRlbnRFZGl0YWJsZSA9IGVsZW1lbnQoYnkuY3NzKCdbY29udGVudGVkaXRhYmxlXScpKTtcbiAgICAgIHZhciBjb250ZW50ID0gJ0NoYW5nZSBtZSEnO1xuXG4gICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLmdldFRleHQoKSkudG9FcXVhbChjb250ZW50KTtcblxuICAgICAgY29udGVudEVkaXRhYmxlLmNsZWFyKCk7XG4gICAgICBjb250ZW50RWRpdGFibGUuc2VuZEtleXMocHJvdHJhY3Rvci5LZXkuQkFDS19TUEFDRSk7XG4gICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLmdldFRleHQoKSkudG9FcXVhbCgnJyk7XG4gICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9NYXRjaCgvbmctaW52YWxpZC1yZXF1aXJlZC8pO1xuICAgIH0pO1xuICAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKlxuICovXG52YXIgTmdNb2RlbENvbnRyb2xsZXIgPSBbJyRzY29wZScsICckZXhjZXB0aW9uSGFuZGxlcicsICckYXR0cnMnLCAnJGVsZW1lbnQnLCAnJHBhcnNlJywgJyRhbmltYXRlJywgJyR0aW1lb3V0JywgJyRyb290U2NvcGUnLCAnJHEnLCAnJGludGVycG9sYXRlJyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRleGNlcHRpb25IYW5kbGVyLCAkYXR0ciwgJGVsZW1lbnQsICRwYXJzZSwgJGFuaW1hdGUsICR0aW1lb3V0LCAkcm9vdFNjb3BlLCAkcSwgJGludGVycG9sYXRlKSB7XG4gIHRoaXMuJHZpZXdWYWx1ZSA9IE51bWJlci5OYU47XG4gIHRoaXMuJG1vZGVsVmFsdWUgPSBOdW1iZXIuTmFOO1xuICB0aGlzLiQkcmF3TW9kZWxWYWx1ZSA9IHVuZGVmaW5lZDsgLy8gc3RvcmVzIHRoZSBwYXJzZWQgbW9kZWxWYWx1ZSAvIG1vZGVsIHNldCBmcm9tIHNjb3BlIHJlZ2FyZGxlc3Mgb2YgdmFsaWRpdHkuXG4gIHRoaXMuJHZhbGlkYXRvcnMgPSB7fTtcbiAgdGhpcy4kYXN5bmNWYWxpZGF0b3JzID0ge307XG4gIHRoaXMuJHBhcnNlcnMgPSBbXTtcbiAgdGhpcy4kZm9ybWF0dGVycyA9IFtdO1xuICB0aGlzLiR2aWV3Q2hhbmdlTGlzdGVuZXJzID0gW107XG4gIHRoaXMuJHVudG91Y2hlZCA9IHRydWU7XG4gIHRoaXMuJHRvdWNoZWQgPSBmYWxzZTtcbiAgdGhpcy4kcHJpc3RpbmUgPSB0cnVlO1xuICB0aGlzLiRkaXJ0eSA9IGZhbHNlO1xuICB0aGlzLiR2YWxpZCA9IHRydWU7XG4gIHRoaXMuJGludmFsaWQgPSBmYWxzZTtcbiAgdGhpcy4kZXJyb3IgPSB7fTsgLy8ga2VlcCBpbnZhbGlkIGtleXMgaGVyZVxuICB0aGlzLiQkc3VjY2VzcyA9IHt9OyAvLyBrZWVwIHZhbGlkIGtleXMgaGVyZVxuICB0aGlzLiRwZW5kaW5nID0gdW5kZWZpbmVkOyAvLyBrZWVwIHBlbmRpbmcga2V5cyBoZXJlXG4gIHRoaXMuJG5hbWUgPSAkaW50ZXJwb2xhdGUoJGF0dHIubmFtZSB8fCAnJywgZmFsc2UpKCRzY29wZSk7XG4gIHRoaXMuJCRwYXJlbnRGb3JtID0gbnVsbEZvcm1DdHJsO1xuXG4gIHZhciBwYXJzZWROZ01vZGVsID0gJHBhcnNlKCRhdHRyLm5nTW9kZWwpLFxuICAgICAgcGFyc2VkTmdNb2RlbEFzc2lnbiA9IHBhcnNlZE5nTW9kZWwuYXNzaWduLFxuICAgICAgbmdNb2RlbEdldCA9IHBhcnNlZE5nTW9kZWwsXG4gICAgICBuZ01vZGVsU2V0ID0gcGFyc2VkTmdNb2RlbEFzc2lnbixcbiAgICAgIHBlbmRpbmdEZWJvdW5jZSA9IG51bGwsXG4gICAgICBwYXJzZXJWYWxpZCxcbiAgICAgIGN0cmwgPSB0aGlzO1xuXG4gIHRoaXMuJCRzZXRPcHRpb25zID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIGN0cmwuJG9wdGlvbnMgPSBvcHRpb25zO1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZ2V0dGVyU2V0dGVyKSB7XG4gICAgICB2YXIgaW52b2tlTW9kZWxHZXR0ZXIgPSAkcGFyc2UoJGF0dHIubmdNb2RlbCArICcoKScpLFxuICAgICAgICAgIGludm9rZU1vZGVsU2V0dGVyID0gJHBhcnNlKCRhdHRyLm5nTW9kZWwgKyAnKCQkJHApJyk7XG5cbiAgICAgIG5nTW9kZWxHZXQgPSBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgdmFyIG1vZGVsVmFsdWUgPSBwYXJzZWROZ01vZGVsKCRzY29wZSk7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG1vZGVsVmFsdWUpKSB7XG4gICAgICAgICAgbW9kZWxWYWx1ZSA9IGludm9rZU1vZGVsR2V0dGVyKCRzY29wZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1vZGVsVmFsdWU7XG4gICAgICB9O1xuICAgICAgbmdNb2RlbFNldCA9IGZ1bmN0aW9uKCRzY29wZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ocGFyc2VkTmdNb2RlbCgkc2NvcGUpKSkge1xuICAgICAgICAgIGludm9rZU1vZGVsU2V0dGVyKCRzY29wZSwgeyQkJHA6IGN0cmwuJG1vZGVsVmFsdWV9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJzZWROZ01vZGVsQXNzaWduKCRzY29wZSwgY3RybC4kbW9kZWxWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICghcGFyc2VkTmdNb2RlbC5hc3NpZ24pIHtcbiAgICAgIHRocm93IG5nTW9kZWxNaW5FcnIoJ25vbmFzc2lnbicsIFwiRXhwcmVzc2lvbiAnezB9JyBpcyBub24tYXNzaWduYWJsZS4gRWxlbWVudDogezF9XCIsXG4gICAgICAgICAgJGF0dHIubmdNb2RlbCwgc3RhcnRpbmdUYWcoJGVsZW1lbnQpKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkcmVuZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDYWxsZWQgd2hlbiB0aGUgdmlldyBuZWVkcyB0byBiZSB1cGRhdGVkLiBJdCBpcyBleHBlY3RlZCB0aGF0IHRoZSB1c2VyIG9mIHRoZSBuZy1tb2RlbFxuICAgKiBkaXJlY3RpdmUgd2lsbCBpbXBsZW1lbnQgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIFRoZSBgJHJlbmRlcigpYCBtZXRob2QgaXMgaW52b2tlZCBpbiB0aGUgZm9sbG93aW5nIHNpdHVhdGlvbnM6XG4gICAqXG4gICAqICogYCRyb2xsYmFja1ZpZXdWYWx1ZSgpYCBpcyBjYWxsZWQuICBJZiB3ZSBhcmUgcm9sbGluZyBiYWNrIHRoZSB2aWV3IHZhbHVlIHRvIHRoZSBsYXN0XG4gICAqICAgY29tbWl0dGVkIHZhbHVlIHRoZW4gYCRyZW5kZXIoKWAgaXMgY2FsbGVkIHRvIHVwZGF0ZSB0aGUgaW5wdXQgY29udHJvbC5cbiAgICogKiBUaGUgdmFsdWUgcmVmZXJlbmNlZCBieSBgbmctbW9kZWxgIGlzIGNoYW5nZWQgcHJvZ3JhbW1hdGljYWxseSBhbmQgYm90aCB0aGUgYCRtb2RlbFZhbHVlYCBhbmRcbiAgICogICB0aGUgYCR2aWV3VmFsdWVgIGFyZSBkaWZmZXJlbnQgZnJvbSBsYXN0IHRpbWUuXG4gICAqXG4gICAqIFNpbmNlIGBuZy1tb2RlbGAgZG9lcyBub3QgZG8gYSBkZWVwIHdhdGNoLCBgJHJlbmRlcigpYCBpcyBvbmx5IGludm9rZWQgaWYgdGhlIHZhbHVlcyBvZlxuICAgKiBgJG1vZGVsVmFsdWVgIGFuZCBgJHZpZXdWYWx1ZWAgYXJlIGFjdHVhbGx5IGRpZmZlcmVudCBmcm9tIHRoZWlyIHByZXZpb3VzIHZhbHVlLiBJZiBgJG1vZGVsVmFsdWVgXG4gICAqIG9yIGAkdmlld1ZhbHVlYCBhcmUgb2JqZWN0cyAocmF0aGVyIHRoYW4gYSBzdHJpbmcgb3IgbnVtYmVyKSB0aGVuIGAkcmVuZGVyKClgIHdpbGwgbm90IGJlXG4gICAqIGludm9rZWQgaWYgeW91IG9ubHkgY2hhbmdlIGEgcHJvcGVydHkgb24gdGhlIG9iamVjdHMuXG4gICAqL1xuICB0aGlzLiRyZW5kZXIgPSBub29wO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJGlzRW1wdHlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgaXMgY2FsbGVkIHdoZW4gd2UgbmVlZCB0byBkZXRlcm1pbmUgaWYgdGhlIHZhbHVlIG9mIGFuIGlucHV0IGlzIGVtcHR5LlxuICAgKlxuICAgKiBGb3IgaW5zdGFuY2UsIHRoZSByZXF1aXJlZCBkaXJlY3RpdmUgZG9lcyB0aGlzIHRvIHdvcmsgb3V0IGlmIHRoZSBpbnB1dCBoYXMgZGF0YSBvciBub3QuXG4gICAqXG4gICAqIFRoZSBkZWZhdWx0IGAkaXNFbXB0eWAgZnVuY3Rpb24gY2hlY2tzIHdoZXRoZXIgdGhlIHZhbHVlIGlzIGB1bmRlZmluZWRgLCBgJydgLCBgbnVsbGAgb3IgYE5hTmAuXG4gICAqXG4gICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhpcyBmb3IgaW5wdXQgZGlyZWN0aXZlcyB3aG9zZSBjb25jZXB0IG9mIGJlaW5nIGVtcHR5IGlzIGRpZmZlcmVudCBmcm9tIHRoZVxuICAgKiBkZWZhdWx0LiBUaGUgYGNoZWNrYm94SW5wdXRUeXBlYCBkaXJlY3RpdmUgZG9lcyB0aGlzIGJlY2F1c2UgaW4gaXRzIGNhc2UgYSB2YWx1ZSBvZiBgZmFsc2VgXG4gICAqIGltcGxpZXMgZW1wdHkuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBpbnB1dCB0byBjaGVjayBmb3IgZW1wdGluZXNzLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIFwiZW1wdHlcIi5cbiAgICovXG4gIHRoaXMuJGlzRW1wdHkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBpc1VuZGVmaW5lZCh2YWx1ZSkgfHwgdmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZTtcbiAgfTtcblxuICB2YXIgY3VycmVudFZhbGlkYXRpb25SdW5JZCA9IDA7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0VmFsaWRpdHlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENoYW5nZSB0aGUgdmFsaWRpdHkgc3RhdGUsIGFuZCBub3RpZnkgdGhlIGZvcm0uXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgd2l0aGluICRwYXJzZXJzLyRmb3JtYXR0ZXJzIG9yIGEgY3VzdG9tIHZhbGlkYXRpb24gaW1wbGVtZW50YXRpb24uXG4gICAqIEhvd2V2ZXIsIGluIG1vc3QgY2FzZXMgaXQgc2hvdWxkIGJlIHN1ZmZpY2llbnQgdG8gdXNlIHRoZSBgbmdNb2RlbC4kdmFsaWRhdG9yc2AgYW5kXG4gICAqIGBuZ01vZGVsLiRhc3luY1ZhbGlkYXRvcnNgIGNvbGxlY3Rpb25zIHdoaWNoIHdpbGwgY2FsbCBgJHNldFZhbGlkaXR5YCBhdXRvbWF0aWNhbGx5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsaWRhdGlvbkVycm9yS2V5IE5hbWUgb2YgdGhlIHZhbGlkYXRvci4gVGhlIGB2YWxpZGF0aW9uRXJyb3JLZXlgIHdpbGwgYmUgYXNzaWduZWRcbiAgICogICAgICAgIHRvIGVpdGhlciBgJGVycm9yW3ZhbGlkYXRpb25FcnJvcktleV1gIG9yIGAkcGVuZGluZ1t2YWxpZGF0aW9uRXJyb3JLZXldYFxuICAgKiAgICAgICAgKGZvciB1bmZ1bGZpbGxlZCBgJGFzeW5jVmFsaWRhdG9yc2ApLCBzbyB0aGF0IGl0IGlzIGF2YWlsYWJsZSBmb3IgZGF0YS1iaW5kaW5nLlxuICAgKiAgICAgICAgVGhlIGB2YWxpZGF0aW9uRXJyb3JLZXlgIHNob3VsZCBiZSBpbiBjYW1lbENhc2UgYW5kIHdpbGwgZ2V0IGNvbnZlcnRlZCBpbnRvIGRhc2gtY2FzZVxuICAgKiAgICAgICAgZm9yIGNsYXNzIG5hbWUuIEV4YW1wbGU6IGBteUVycm9yYCB3aWxsIHJlc3VsdCBpbiBgbmctdmFsaWQtbXktZXJyb3JgIGFuZCBgbmctaW52YWxpZC1teS1lcnJvcmBcbiAgICogICAgICAgIGNsYXNzIGFuZCBjYW4gYmUgYm91bmQgdG8gYXMgIGB7e3NvbWVGb3JtLnNvbWVDb250cm9sLiRlcnJvci5teUVycm9yfX1gIC5cbiAgICogQHBhcmFtIHtib29sZWFufSBpc1ZhbGlkIFdoZXRoZXIgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdmFsaWQgKHRydWUpLCBpbnZhbGlkIChmYWxzZSksIHBlbmRpbmcgKHVuZGVmaW5lZCksXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBvciBza2lwcGVkIChudWxsKS4gUGVuZGluZyBpcyB1c2VkIGZvciB1bmZ1bGZpbGxlZCBgJGFzeW5jVmFsaWRhdG9yc2AuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBTa2lwcGVkIGlzIHVzZWQgYnkgQW5ndWxhciB3aGVuIHZhbGlkYXRvcnMgZG8gbm90IHJ1biBiZWNhdXNlIG9mIHBhcnNlIGVycm9ycyBhbmRcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gYCRhc3luY1ZhbGlkYXRvcnNgIGRvIG5vdCBydW4gYmVjYXVzZSBhbnkgb2YgdGhlIGAkdmFsaWRhdG9yc2AgZmFpbGVkLlxuICAgKi9cbiAgYWRkU2V0VmFsaWRpdHlNZXRob2Qoe1xuICAgIGN0cmw6IHRoaXMsXG4gICAgJGVsZW1lbnQ6ICRlbGVtZW50LFxuICAgIHNldDogZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkge1xuICAgICAgb2JqZWN0W3Byb3BlcnR5XSA9IHRydWU7XG4gICAgfSxcbiAgICB1bnNldDogZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkge1xuICAgICAgZGVsZXRlIG9iamVjdFtwcm9wZXJ0eV07XG4gICAgfSxcbiAgICAkYW5pbWF0ZTogJGFuaW1hdGVcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0UHJpc3RpbmVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGNvbnRyb2wgdG8gaXRzIHByaXN0aW5lIHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgYG5nLWRpcnR5YCBjbGFzcyBhbmQgc2V0IHRoZSBjb250cm9sIHRvIGl0cyBwcmlzdGluZVxuICAgKiBzdGF0ZSAoYG5nLXByaXN0aW5lYCBjbGFzcykuIEEgbW9kZWwgaXMgY29uc2lkZXJlZCB0byBiZSBwcmlzdGluZSB3aGVuIHRoZSBjb250cm9sXG4gICAqIGhhcyBub3QgYmVlbiBjaGFuZ2VkIGZyb20gd2hlbiBmaXJzdCBjb21waWxlZC5cbiAgICovXG4gIHRoaXMuJHNldFByaXN0aW5lID0gZnVuY3Rpb24oKSB7XG4gICAgY3RybC4kZGlydHkgPSBmYWxzZTtcbiAgICBjdHJsLiRwcmlzdGluZSA9IHRydWU7XG4gICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3MoJGVsZW1lbnQsIERJUlRZX0NMQVNTKTtcbiAgICAkYW5pbWF0ZS5hZGRDbGFzcygkZWxlbWVudCwgUFJJU1RJTkVfQ0xBU1MpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldERpcnR5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBjb250cm9sIHRvIGl0cyBkaXJ0eSBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlIGBuZy1wcmlzdGluZWAgY2xhc3MgYW5kIHNldCB0aGUgY29udHJvbCB0byBpdHMgZGlydHlcbiAgICogc3RhdGUgKGBuZy1kaXJ0eWAgY2xhc3MpLiBBIG1vZGVsIGlzIGNvbnNpZGVyZWQgdG8gYmUgZGlydHkgd2hlbiB0aGUgY29udHJvbCBoYXMgYmVlbiBjaGFuZ2VkXG4gICAqIGZyb20gd2hlbiBmaXJzdCBjb21waWxlZC5cbiAgICovXG4gIHRoaXMuJHNldERpcnR5ID0gZnVuY3Rpb24oKSB7XG4gICAgY3RybC4kZGlydHkgPSB0cnVlO1xuICAgIGN0cmwuJHByaXN0aW5lID0gZmFsc2U7XG4gICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3MoJGVsZW1lbnQsIFBSSVNUSU5FX0NMQVNTKTtcbiAgICAkYW5pbWF0ZS5hZGRDbGFzcygkZWxlbWVudCwgRElSVFlfQ0xBU1MpO1xuICAgIGN0cmwuJCRwYXJlbnRGb3JtLiRzZXREaXJ0eSgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFVudG91Y2hlZFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgY29udHJvbCB0byBpdHMgdW50b3VjaGVkIHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgYG5nLXRvdWNoZWRgIGNsYXNzIGFuZCBzZXQgdGhlIGNvbnRyb2wgdG8gaXRzXG4gICAqIHVudG91Y2hlZCBzdGF0ZSAoYG5nLXVudG91Y2hlZGAgY2xhc3MpLiBVcG9uIGNvbXBpbGF0aW9uLCBhIG1vZGVsIGlzIHNldCBhcyB1bnRvdWNoZWRcbiAgICogYnkgZGVmYXVsdCwgaG93ZXZlciB0aGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIHJlc3RvcmUgdGhhdCBzdGF0ZSBpZiB0aGUgbW9kZWwgaGFzXG4gICAqIGFscmVhZHkgYmVlbiB0b3VjaGVkIGJ5IHRoZSB1c2VyLlxuICAgKi9cbiAgdGhpcy4kc2V0VW50b3VjaGVkID0gZnVuY3Rpb24oKSB7XG4gICAgY3RybC4kdG91Y2hlZCA9IGZhbHNlO1xuICAgIGN0cmwuJHVudG91Y2hlZCA9IHRydWU7XG4gICAgJGFuaW1hdGUuc2V0Q2xhc3MoJGVsZW1lbnQsIFVOVE9VQ0hFRF9DTEFTUywgVE9VQ0hFRF9DTEFTUyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0VG91Y2hlZFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgY29udHJvbCB0byBpdHMgdG91Y2hlZCBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlIGBuZy11bnRvdWNoZWRgIGNsYXNzIGFuZCBzZXQgdGhlIGNvbnRyb2wgdG8gaXRzXG4gICAqIHRvdWNoZWQgc3RhdGUgKGBuZy10b3VjaGVkYCBjbGFzcykuIEEgbW9kZWwgaXMgY29uc2lkZXJlZCB0byBiZSB0b3VjaGVkIHdoZW4gdGhlIHVzZXIgaGFzXG4gICAqIGZpcnN0IGZvY3VzZWQgdGhlIGNvbnRyb2wgZWxlbWVudCBhbmQgdGhlbiBzaGlmdGVkIGZvY3VzIGF3YXkgZnJvbSB0aGUgY29udHJvbCAoYmx1ciBldmVudCkuXG4gICAqL1xuICB0aGlzLiRzZXRUb3VjaGVkID0gZnVuY3Rpb24oKSB7XG4gICAgY3RybC4kdG91Y2hlZCA9IHRydWU7XG4gICAgY3RybC4kdW50b3VjaGVkID0gZmFsc2U7XG4gICAgJGFuaW1hdGUuc2V0Q2xhc3MoJGVsZW1lbnQsIFRPVUNIRURfQ0xBU1MsIFVOVE9VQ0hFRF9DTEFTUyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkcm9sbGJhY2tWaWV3VmFsdWVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENhbmNlbCBhbiB1cGRhdGUgYW5kIHJlc2V0IHRoZSBpbnB1dCBlbGVtZW50J3MgdmFsdWUgdG8gcHJldmVudCBhbiB1cGRhdGUgdG8gdGhlIGAkbW9kZWxWYWx1ZWAsXG4gICAqIHdoaWNoIG1heSBiZSBjYXVzZWQgYnkgYSBwZW5kaW5nIGRlYm91bmNlZCBldmVudCBvciBiZWNhdXNlIHRoZSBpbnB1dCBpcyB3YWl0aW5nIGZvciBhIHNvbWVcbiAgICogZnV0dXJlIGV2ZW50LlxuICAgKlxuICAgKiBJZiB5b3UgaGF2ZSBhbiBpbnB1dCB0aGF0IHVzZXMgYG5nLW1vZGVsLW9wdGlvbnNgIHRvIHNldCB1cCBkZWJvdW5jZWQgZXZlbnRzIG9yIGV2ZW50cyBzdWNoXG4gICAqIGFzIGJsdXIgeW91IGNhbiBoYXZlIGEgc2l0dWF0aW9uIHdoZXJlIHRoZXJlIGlzIGEgcGVyaW9kIHdoZW4gdGhlIGAkdmlld1ZhbHVlYFxuICAgKiBpcyBvdXQgb2Ygc3luY2ggd2l0aCB0aGUgbmdNb2RlbCdzIGAkbW9kZWxWYWx1ZWAuXG4gICAqXG4gICAqIEluIHRoaXMgY2FzZSwgeW91IGNhbiBydW4gaW50byBkaWZmaWN1bHRpZXMgaWYgeW91IHRyeSB0byB1cGRhdGUgdGhlIG5nTW9kZWwncyBgJG1vZGVsVmFsdWVgXG4gICAqIHByb2dyYW1tYXRpY2FsbHkgYmVmb3JlIHRoZXNlIGRlYm91bmNlZC9mdXR1cmUgZXZlbnRzIGhhdmUgcmVzb2x2ZWQvb2NjdXJyZWQsIGJlY2F1c2UgQW5ndWxhcidzXG4gICAqIGRpcnR5IGNoZWNraW5nIG1lY2hhbmlzbSBpcyBub3QgYWJsZSB0byB0ZWxsIHdoZXRoZXIgdGhlIG1vZGVsIGhhcyBhY3R1YWxseSBjaGFuZ2VkIG9yIG5vdC5cbiAgICpcbiAgICogVGhlIGAkcm9sbGJhY2tWaWV3VmFsdWUoKWAgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgYmVmb3JlIHByb2dyYW1tYXRpY2FsbHkgY2hhbmdpbmcgdGhlIG1vZGVsIG9mIGFuXG4gICAqIGlucHV0IHdoaWNoIG1heSBoYXZlIHN1Y2ggZXZlbnRzIHBlbmRpbmcuIFRoaXMgaXMgaW1wb3J0YW50IGluIG9yZGVyIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZVxuICAgKiBpbnB1dCBmaWVsZCB3aWxsIGJlIHVwZGF0ZWQgd2l0aCB0aGUgbmV3IG1vZGVsIHZhbHVlIGFuZCBhbnkgcGVuZGluZyBvcGVyYXRpb25zIGFyZSBjYW5jZWxsZWQuXG4gICAqXG4gICAqIDxleGFtcGxlIG5hbWU9XCJuZy1tb2RlbC1jYW5jZWwtdXBkYXRlXCIgbW9kdWxlPVwiY2FuY2VsLXVwZGF0ZS1leGFtcGxlXCI+XG4gICAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICAgKiAgICAgYW5ndWxhci5tb2R1bGUoJ2NhbmNlbC11cGRhdGUtZXhhbXBsZScsIFtdKVxuICAgKlxuICAgKiAgICAgLmNvbnRyb2xsZXIoJ0NhbmNlbFVwZGF0ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgKiAgICAgICAkc2NvcGUucmVzZXRXaXRoQ2FuY2VsID0gZnVuY3Rpb24oZSkge1xuICAgKiAgICAgICAgIGlmIChlLmtleUNvZGUgPT0gMjcpIHtcbiAgICogICAgICAgICAgICRzY29wZS5teUZvcm0ubXlJbnB1dDEuJHJvbGxiYWNrVmlld1ZhbHVlKCk7XG4gICAqICAgICAgICAgICAkc2NvcGUubXlWYWx1ZSA9ICcnO1xuICAgKiAgICAgICAgIH1cbiAgICogICAgICAgfTtcbiAgICogICAgICAgJHNjb3BlLnJlc2V0V2l0aG91dENhbmNlbCA9IGZ1bmN0aW9uKGUpIHtcbiAgICogICAgICAgICBpZiAoZS5rZXlDb2RlID09IDI3KSB7XG4gICAqICAgICAgICAgICAkc2NvcGUubXlWYWx1ZSA9ICcnO1xuICAgKiAgICAgICAgIH1cbiAgICogICAgICAgfTtcbiAgICogICAgIH1dKTtcbiAgICogICA8L2ZpbGU+XG4gICAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkNhbmNlbFVwZGF0ZUNvbnRyb2xsZXJcIj5cbiAgICogICAgICAgPHA+VHJ5IHR5cGluZyBzb21ldGhpbmcgaW4gZWFjaCBpbnB1dC4gIFNlZSB0aGF0IHRoZSBtb2RlbCBvbmx5IHVwZGF0ZXMgd2hlbiB5b3VcbiAgICogICAgICAgICAgYmx1ciBvZmYgdGhlIGlucHV0LlxuICAgKiAgICAgICAgPC9wPlxuICAgKiAgICAgICAgPHA+Tm93IHNlZSB3aGF0IGhhcHBlbnMgaWYgeW91IHN0YXJ0IHR5cGluZyB0aGVuIHByZXNzIHRoZSBFc2NhcGUga2V5PC9wPlxuICAgKlxuICAgKiAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctbW9kZWwtb3B0aW9ucz1cInsgdXBkYXRlT246ICdibHVyJyB9XCI+XG4gICAqICAgICAgICAgPHAgaWQ9XCJpbnB1dERlc2NyaXB0aW9uMVwiPldpdGggJHJvbGxiYWNrVmlld1ZhbHVlKCk8L3A+XG4gICAqICAgICAgICAgPGlucHV0IG5hbWU9XCJteUlucHV0MVwiIGFyaWEtZGVzY3JpYmVkYnk9XCJpbnB1dERlc2NyaXB0aW9uMVwiIG5nLW1vZGVsPVwibXlWYWx1ZVwiXG4gICAqICAgICAgICAgICAgICAgIG5nLWtleWRvd249XCJyZXNldFdpdGhDYW5jZWwoJGV2ZW50KVwiPjxici8+XG4gICAqICAgICAgICAgbXlWYWx1ZTogXCJ7eyBteVZhbHVlIH19XCJcbiAgICpcbiAgICogICAgICAgICA8cCBpZD1cImlucHV0RGVzY3JpcHRpb24yXCI+V2l0aG91dCAkcm9sbGJhY2tWaWV3VmFsdWUoKTwvcD5cbiAgICogICAgICAgICA8aW5wdXQgbmFtZT1cIm15SW5wdXQyXCIgYXJpYS1kZXNjcmliZWRieT1cImlucHV0RGVzY3JpcHRpb24yXCIgbmctbW9kZWw9XCJteVZhbHVlXCJcbiAgICogICAgICAgICAgICAgICAgbmcta2V5ZG93bj1cInJlc2V0V2l0aG91dENhbmNlbCgkZXZlbnQpXCI+PGJyLz5cbiAgICogICAgICAgICBteVZhbHVlOiBcInt7IG15VmFsdWUgfX1cIlxuICAgKiAgICAgICA8L2Zvcm0+XG4gICAqICAgICA8L2Rpdj5cbiAgICogICA8L2ZpbGU+XG4gICAqIDwvZXhhbXBsZT5cbiAgICovXG4gIHRoaXMuJHJvbGxiYWNrVmlld1ZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgJHRpbWVvdXQuY2FuY2VsKHBlbmRpbmdEZWJvdW5jZSk7XG4gICAgY3RybC4kdmlld1ZhbHVlID0gY3RybC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWU7XG4gICAgY3RybC4kcmVuZGVyKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmFsaWRhdGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJ1bnMgZWFjaCBvZiB0aGUgcmVnaXN0ZXJlZCB2YWxpZGF0b3JzIChmaXJzdCBzeW5jaHJvbm91cyB2YWxpZGF0b3JzIGFuZCB0aGVuXG4gICAqIGFzeW5jaHJvbm91cyB2YWxpZGF0b3JzKS5cbiAgICogSWYgdGhlIHZhbGlkaXR5IGNoYW5nZXMgdG8gaW52YWxpZCwgdGhlIG1vZGVsIHdpbGwgYmUgc2V0IHRvIGB1bmRlZmluZWRgLFxuICAgKiB1bmxlc3Mge0BsaW5rIG5nTW9kZWxPcHRpb25zIGBuZ01vZGVsT3B0aW9ucy5hbGxvd0ludmFsaWRgfSBpcyBgdHJ1ZWAuXG4gICAqIElmIHRoZSB2YWxpZGl0eSBjaGFuZ2VzIHRvIHZhbGlkLCBpdCB3aWxsIHNldCB0aGUgbW9kZWwgdG8gdGhlIGxhc3QgYXZhaWxhYmxlIHZhbGlkXG4gICAqIGAkbW9kZWxWYWx1ZWAsIGkuZS4gZWl0aGVyIHRoZSBsYXN0IHBhcnNlZCB2YWx1ZSBvciB0aGUgbGFzdCB2YWx1ZSBzZXQgZnJvbSB0aGUgc2NvcGUuXG4gICAqL1xuICB0aGlzLiR2YWxpZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGlnbm9yZSAkdmFsaWRhdGUgYmVmb3JlIG1vZGVsIGlzIGluaXRpYWxpemVkXG4gICAgaWYgKGlzTnVtYmVyKGN0cmwuJG1vZGVsVmFsdWUpICYmIGlzTmFOKGN0cmwuJG1vZGVsVmFsdWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHZpZXdWYWx1ZSA9IGN0cmwuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlO1xuICAgIC8vIE5vdGU6IHdlIHVzZSB0aGUgJCRyYXdNb2RlbFZhbHVlIGFzICRtb2RlbFZhbHVlIG1pZ2h0IGhhdmUgYmVlblxuICAgIC8vIHNldCB0byB1bmRlZmluZWQgZHVyaW5nIGEgdmlldyAtPiBtb2RlbCB1cGRhdGUgdGhhdCBmb3VuZCB2YWxpZGF0aW9uXG4gICAgLy8gZXJyb3JzLiBXZSBjYW4ndCBwYXJzZSB0aGUgdmlldyBoZXJlLCBzaW5jZSB0aGF0IGNvdWxkIGNoYW5nZVxuICAgIC8vIHRoZSBtb2RlbCBhbHRob3VnaCBuZWl0aGVyIHZpZXdWYWx1ZSBub3IgdGhlIG1vZGVsIG9uIHRoZSBzY29wZSBjaGFuZ2VkXG4gICAgdmFyIG1vZGVsVmFsdWUgPSBjdHJsLiQkcmF3TW9kZWxWYWx1ZTtcblxuICAgIHZhciBwcmV2VmFsaWQgPSBjdHJsLiR2YWxpZDtcbiAgICB2YXIgcHJldk1vZGVsVmFsdWUgPSBjdHJsLiRtb2RlbFZhbHVlO1xuXG4gICAgdmFyIGFsbG93SW52YWxpZCA9IGN0cmwuJG9wdGlvbnMgJiYgY3RybC4kb3B0aW9ucy5hbGxvd0ludmFsaWQ7XG5cbiAgICBjdHJsLiQkcnVuVmFsaWRhdG9ycyhtb2RlbFZhbHVlLCB2aWV3VmFsdWUsIGZ1bmN0aW9uKGFsbFZhbGlkKSB7XG4gICAgICAvLyBJZiB0aGVyZSB3YXMgbm8gY2hhbmdlIGluIHZhbGlkaXR5LCBkb24ndCB1cGRhdGUgdGhlIG1vZGVsXG4gICAgICAvLyBUaGlzIHByZXZlbnRzIGNoYW5naW5nIGFuIGludmFsaWQgbW9kZWxWYWx1ZSB0byB1bmRlZmluZWRcbiAgICAgIGlmICghYWxsb3dJbnZhbGlkICYmIHByZXZWYWxpZCAhPT0gYWxsVmFsaWQpIHtcbiAgICAgICAgLy8gTm90ZTogRG9uJ3QgY2hlY2sgY3RybC4kdmFsaWQgaGVyZSwgYXMgd2UgY291bGQgaGF2ZVxuICAgICAgICAvLyBleHRlcm5hbCB2YWxpZGF0b3JzIChlLmcuIGNhbGN1bGF0ZWQgb24gdGhlIHNlcnZlciksXG4gICAgICAgIC8vIHRoYXQganVzdCBjYWxsICRzZXRWYWxpZGl0eSBhbmQgbmVlZCB0aGUgbW9kZWwgdmFsdWVcbiAgICAgICAgLy8gdG8gY2FsY3VsYXRlIHRoZWlyIHZhbGlkaXR5LlxuICAgICAgICBjdHJsLiRtb2RlbFZhbHVlID0gYWxsVmFsaWQgPyBtb2RlbFZhbHVlIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChjdHJsLiRtb2RlbFZhbHVlICE9PSBwcmV2TW9kZWxWYWx1ZSkge1xuICAgICAgICAgIGN0cmwuJCR3cml0ZU1vZGVsVG9TY29wZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfTtcblxuICB0aGlzLiQkcnVuVmFsaWRhdG9ycyA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSwgZG9uZUNhbGxiYWNrKSB7XG4gICAgY3VycmVudFZhbGlkYXRpb25SdW5JZCsrO1xuICAgIHZhciBsb2NhbFZhbGlkYXRpb25SdW5JZCA9IGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQ7XG5cbiAgICAvLyBjaGVjayBwYXJzZXIgZXJyb3JcbiAgICBpZiAoIXByb2Nlc3NQYXJzZUVycm9ycygpKSB7XG4gICAgICB2YWxpZGF0aW9uRG9uZShmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghcHJvY2Vzc1N5bmNWYWxpZGF0b3JzKCkpIHtcbiAgICAgIHZhbGlkYXRpb25Eb25lKGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHJvY2Vzc0FzeW5jVmFsaWRhdG9ycygpO1xuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1BhcnNlRXJyb3JzKCkge1xuICAgICAgdmFyIGVycm9yS2V5ID0gY3RybC4kJHBhcnNlck5hbWUgfHwgJ3BhcnNlJztcbiAgICAgIGlmIChpc1VuZGVmaW5lZChwYXJzZXJWYWxpZCkpIHtcbiAgICAgICAgc2V0VmFsaWRpdHkoZXJyb3JLZXksIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFwYXJzZXJWYWxpZCkge1xuICAgICAgICAgIGZvckVhY2goY3RybC4kdmFsaWRhdG9ycywgZnVuY3Rpb24odiwgbmFtZSkge1xuICAgICAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgbnVsbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZm9yRWFjaChjdHJsLiRhc3luY1ZhbGlkYXRvcnMsIGZ1bmN0aW9uKHYsIG5hbWUpIHtcbiAgICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIG51bGwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNldCB0aGUgcGFyc2UgZXJyb3IgbGFzdCwgdG8gcHJldmVudCB1bnNldHRpbmcgaXQsIHNob3VsZCBhICR2YWxpZGF0b3JzIGtleSA9PSBwYXJzZXJOYW1lXG4gICAgICAgIHNldFZhbGlkaXR5KGVycm9yS2V5LCBwYXJzZXJWYWxpZCk7XG4gICAgICAgIHJldHVybiBwYXJzZXJWYWxpZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NTeW5jVmFsaWRhdG9ycygpIHtcbiAgICAgIHZhciBzeW5jVmFsaWRhdG9yc1ZhbGlkID0gdHJ1ZTtcbiAgICAgIGZvckVhY2goY3RybC4kdmFsaWRhdG9ycywgZnVuY3Rpb24odmFsaWRhdG9yLCBuYW1lKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB2YWxpZGF0b3IobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKTtcbiAgICAgICAgc3luY1ZhbGlkYXRvcnNWYWxpZCA9IHN5bmNWYWxpZGF0b3JzVmFsaWQgJiYgcmVzdWx0O1xuICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCByZXN1bHQpO1xuICAgICAgfSk7XG4gICAgICBpZiAoIXN5bmNWYWxpZGF0b3JzVmFsaWQpIHtcbiAgICAgICAgZm9yRWFjaChjdHJsLiRhc3luY1ZhbGlkYXRvcnMsIGZ1bmN0aW9uKHYsIG5hbWUpIHtcbiAgICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCBudWxsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NBc3luY1ZhbGlkYXRvcnMoKSB7XG4gICAgICB2YXIgdmFsaWRhdG9yUHJvbWlzZXMgPSBbXTtcbiAgICAgIHZhciBhbGxWYWxpZCA9IHRydWU7XG4gICAgICBmb3JFYWNoKGN0cmwuJGFzeW5jVmFsaWRhdG9ycywgZnVuY3Rpb24odmFsaWRhdG9yLCBuYW1lKSB7XG4gICAgICAgIHZhciBwcm9taXNlID0gdmFsaWRhdG9yKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSk7XG4gICAgICAgIGlmICghaXNQcm9taXNlTGlrZShwcm9taXNlKSkge1xuICAgICAgICAgIHRocm93IG5nTW9kZWxNaW5FcnIoXCIkYXN5bmNWYWxpZGF0b3JzXCIsXG4gICAgICAgICAgICBcIkV4cGVjdGVkIGFzeW5jaHJvbm91cyB2YWxpZGF0b3IgdG8gcmV0dXJuIGEgcHJvbWlzZSBidXQgZ290ICd7MH0nIGluc3RlYWQuXCIsIHByb21pc2UpO1xuICAgICAgICB9XG4gICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIHVuZGVmaW5lZCk7XG4gICAgICAgIHZhbGlkYXRvclByb21pc2VzLnB1c2gocHJvbWlzZS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIHRydWUpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIGFsbFZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgZmFsc2UpO1xuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICAgIGlmICghdmFsaWRhdG9yUHJvbWlzZXMubGVuZ3RoKSB7XG4gICAgICAgIHZhbGlkYXRpb25Eb25lKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHEuYWxsKHZhbGlkYXRvclByb21pc2VzKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhbGlkYXRpb25Eb25lKGFsbFZhbGlkKTtcbiAgICAgICAgfSwgbm9vcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0VmFsaWRpdHkobmFtZSwgaXNWYWxpZCkge1xuICAgICAgaWYgKGxvY2FsVmFsaWRhdGlvblJ1bklkID09PSBjdXJyZW50VmFsaWRhdGlvblJ1bklkKSB7XG4gICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KG5hbWUsIGlzVmFsaWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRpb25Eb25lKGFsbFZhbGlkKSB7XG4gICAgICBpZiAobG9jYWxWYWxpZGF0aW9uUnVuSWQgPT09IGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQpIHtcblxuICAgICAgICBkb25lQ2FsbGJhY2soYWxsVmFsaWQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRjb21taXRWaWV3VmFsdWVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENvbW1pdCBhIHBlbmRpbmcgdXBkYXRlIHRvIHRoZSBgJG1vZGVsVmFsdWVgLlxuICAgKlxuICAgKiBVcGRhdGVzIG1heSBiZSBwZW5kaW5nIGJ5IGEgZGVib3VuY2VkIGV2ZW50IG9yIGJlY2F1c2UgdGhlIGlucHV0IGlzIHdhaXRpbmcgZm9yIGEgc29tZSBmdXR1cmVcbiAgICogZXZlbnQgZGVmaW5lZCBpbiBgbmctbW9kZWwtb3B0aW9uc2AuIHRoaXMgbWV0aG9kIGlzIHJhcmVseSBuZWVkZWQgYXMgYE5nTW9kZWxDb250cm9sbGVyYFxuICAgKiB1c3VhbGx5IGhhbmRsZXMgY2FsbGluZyB0aGlzIGluIHJlc3BvbnNlIHRvIGlucHV0IGV2ZW50cy5cbiAgICovXG4gIHRoaXMuJGNvbW1pdFZpZXdWYWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2aWV3VmFsdWUgPSBjdHJsLiR2aWV3VmFsdWU7XG5cbiAgICAkdGltZW91dC5jYW5jZWwocGVuZGluZ0RlYm91bmNlKTtcblxuICAgIC8vIElmIHRoZSB2aWV3IHZhbHVlIGhhcyBub3QgY2hhbmdlZCB0aGVuIHdlIHNob3VsZCBqdXN0IGV4aXQsIGV4Y2VwdCBpbiB0aGUgY2FzZSB3aGVyZSB0aGVyZSBpc1xuICAgIC8vIGEgbmF0aXZlIHZhbGlkYXRvciBvbiB0aGUgZWxlbWVudC4gSW4gdGhpcyBjYXNlIHRoZSB2YWxpZGF0aW9uIHN0YXRlIG1heSBoYXZlIGNoYW5nZWQgZXZlbiB0aG91Z2hcbiAgICAvLyB0aGUgdmlld1ZhbHVlIGhhcyBzdGF5ZWQgZW1wdHkuXG4gICAgaWYgKGN0cmwuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlID09PSB2aWV3VmFsdWUgJiYgKHZpZXdWYWx1ZSAhPT0gJycgfHwgIWN0cmwuJCRoYXNOYXRpdmVWYWxpZGF0b3JzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdHJsLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSA9IHZpZXdWYWx1ZTtcblxuICAgIC8vIGNoYW5nZSB0byBkaXJ0eVxuICAgIGlmIChjdHJsLiRwcmlzdGluZSkge1xuICAgICAgdGhpcy4kc2V0RGlydHkoKTtcbiAgICB9XG4gICAgdGhpcy4kJHBhcnNlQW5kVmFsaWRhdGUoKTtcbiAgfTtcblxuICB0aGlzLiQkcGFyc2VBbmRWYWxpZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2aWV3VmFsdWUgPSBjdHJsLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZTtcbiAgICB2YXIgbW9kZWxWYWx1ZSA9IHZpZXdWYWx1ZTtcbiAgICBwYXJzZXJWYWxpZCA9IGlzVW5kZWZpbmVkKG1vZGVsVmFsdWUpID8gdW5kZWZpbmVkIDogdHJ1ZTtcblxuICAgIGlmIChwYXJzZXJWYWxpZCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjdHJsLiRwYXJzZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1vZGVsVmFsdWUgPSBjdHJsLiRwYXJzZXJzW2ldKG1vZGVsVmFsdWUpO1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQobW9kZWxWYWx1ZSkpIHtcbiAgICAgICAgICBwYXJzZXJWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc051bWJlcihjdHJsLiRtb2RlbFZhbHVlKSAmJiBpc05hTihjdHJsLiRtb2RlbFZhbHVlKSkge1xuICAgICAgLy8gY3RybC4kbW9kZWxWYWx1ZSBoYXMgbm90IGJlZW4gdG91Y2hlZCB5ZXQuLi5cbiAgICAgIGN0cmwuJG1vZGVsVmFsdWUgPSBuZ01vZGVsR2V0KCRzY29wZSk7XG4gICAgfVxuICAgIHZhciBwcmV2TW9kZWxWYWx1ZSA9IGN0cmwuJG1vZGVsVmFsdWU7XG4gICAgdmFyIGFsbG93SW52YWxpZCA9IGN0cmwuJG9wdGlvbnMgJiYgY3RybC4kb3B0aW9ucy5hbGxvd0ludmFsaWQ7XG4gICAgY3RybC4kJHJhd01vZGVsVmFsdWUgPSBtb2RlbFZhbHVlO1xuXG4gICAgaWYgKGFsbG93SW52YWxpZCkge1xuICAgICAgY3RybC4kbW9kZWxWYWx1ZSA9IG1vZGVsVmFsdWU7XG4gICAgICB3cml0ZVRvTW9kZWxJZk5lZWRlZCgpO1xuICAgIH1cblxuICAgIC8vIFBhc3MgdGhlICQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSBoZXJlLCBiZWNhdXNlIHRoZSBjYWNoZWQgdmlld1ZhbHVlIG1pZ2h0IGJlIG91dCBvZiBkYXRlLlxuICAgIC8vIFRoaXMgY2FuIGhhcHBlbiBpZiBlLmcuICRzZXRWaWV3VmFsdWUgaXMgY2FsbGVkIGZyb20gaW5zaWRlIGEgcGFyc2VyXG4gICAgY3RybC4kJHJ1blZhbGlkYXRvcnMobW9kZWxWYWx1ZSwgY3RybC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUsIGZ1bmN0aW9uKGFsbFZhbGlkKSB7XG4gICAgICBpZiAoIWFsbG93SW52YWxpZCkge1xuICAgICAgICAvLyBOb3RlOiBEb24ndCBjaGVjayBjdHJsLiR2YWxpZCBoZXJlLCBhcyB3ZSBjb3VsZCBoYXZlXG4gICAgICAgIC8vIGV4dGVybmFsIHZhbGlkYXRvcnMgKGUuZy4gY2FsY3VsYXRlZCBvbiB0aGUgc2VydmVyKSxcbiAgICAgICAgLy8gdGhhdCBqdXN0IGNhbGwgJHNldFZhbGlkaXR5IGFuZCBuZWVkIHRoZSBtb2RlbCB2YWx1ZVxuICAgICAgICAvLyB0byBjYWxjdWxhdGUgdGhlaXIgdmFsaWRpdHkuXG4gICAgICAgIGN0cmwuJG1vZGVsVmFsdWUgPSBhbGxWYWxpZCA/IG1vZGVsVmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgICAgIHdyaXRlVG9Nb2RlbElmTmVlZGVkKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiB3cml0ZVRvTW9kZWxJZk5lZWRlZCgpIHtcbiAgICAgIGlmIChjdHJsLiRtb2RlbFZhbHVlICE9PSBwcmV2TW9kZWxWYWx1ZSkge1xuICAgICAgICBjdHJsLiQkd3JpdGVNb2RlbFRvU2NvcGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdGhpcy4kJHdyaXRlTW9kZWxUb1Njb3BlID0gZnVuY3Rpb24oKSB7XG4gICAgbmdNb2RlbFNldCgkc2NvcGUsIGN0cmwuJG1vZGVsVmFsdWUpO1xuICAgIGZvckVhY2goY3RybC4kdmlld0NoYW5nZUxpc3RlbmVycywgZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZpZXdWYWx1ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVXBkYXRlIHRoZSB2aWV3IHZhbHVlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYSBjb250cm9sIHdhbnRzIHRvIGNoYW5nZSB0aGUgdmlldyB2YWx1ZTsgdHlwaWNhbGx5LFxuICAgKiB0aGlzIGlzIGRvbmUgZnJvbSB3aXRoaW4gYSBET00gZXZlbnQgaGFuZGxlci4gRm9yIGV4YW1wbGUsIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0IGlucHV0fVxuICAgKiBkaXJlY3RpdmUgY2FsbHMgaXQgd2hlbiB0aGUgdmFsdWUgb2YgdGhlIGlucHV0IGNoYW5nZXMgYW5kIHtAbGluayBuZy5kaXJlY3RpdmU6c2VsZWN0IHNlbGVjdH1cbiAgICogY2FsbHMgaXQgd2hlbiBhbiBvcHRpb24gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIFdoZW4gYCRzZXRWaWV3VmFsdWVgIGlzIGNhbGxlZCwgdGhlIG5ldyBgdmFsdWVgIHdpbGwgYmUgc3RhZ2VkIGZvciBjb21taXR0aW5nIHRocm91Z2ggdGhlIGAkcGFyc2Vyc2BcbiAgICogYW5kIGAkdmFsaWRhdG9yc2AgcGlwZWxpbmVzLiBJZiB0aGVyZSBhcmUgbm8gc3BlY2lhbCB7QGxpbmsgbmdNb2RlbE9wdGlvbnN9IHNwZWNpZmllZCB0aGVuIHRoZSBzdGFnZWRcbiAgICogdmFsdWUgc2VudCBkaXJlY3RseSBmb3IgcHJvY2Vzc2luZywgZmluYWxseSB0byBiZSBhcHBsaWVkIHRvIGAkbW9kZWxWYWx1ZWAgYW5kIHRoZW4gdGhlXG4gICAqICoqZXhwcmVzc2lvbioqIHNwZWNpZmllZCBpbiB0aGUgYG5nLW1vZGVsYCBhdHRyaWJ1dGUuIExhc3RseSwgYWxsIHRoZSByZWdpc3RlcmVkIGNoYW5nZSBsaXN0ZW5lcnMsXG4gICAqIGluIHRoZSBgJHZpZXdDaGFuZ2VMaXN0ZW5lcnNgIGxpc3QsIGFyZSBjYWxsZWQuXG4gICAqXG4gICAqIEluIGNhc2UgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9IGRpcmVjdGl2ZSBpcyB1c2VkIHdpdGggYHVwZGF0ZU9uYFxuICAgKiBhbmQgdGhlIGBkZWZhdWx0YCB0cmlnZ2VyIGlzIG5vdCBsaXN0ZWQsIGFsbCB0aG9zZSBhY3Rpb25zIHdpbGwgcmVtYWluIHBlbmRpbmcgdW50aWwgb25lIG9mIHRoZVxuICAgKiBgdXBkYXRlT25gIGV2ZW50cyBpcyB0cmlnZ2VyZWQgb24gdGhlIERPTSBlbGVtZW50LlxuICAgKiBBbGwgdGhlc2UgYWN0aW9ucyB3aWxsIGJlIGRlYm91bmNlZCBpZiB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc31cbiAgICogZGlyZWN0aXZlIGlzIHVzZWQgd2l0aCBhIGN1c3RvbSBkZWJvdW5jZSBmb3IgdGhpcyBwYXJ0aWN1bGFyIGV2ZW50LlxuICAgKiBOb3RlIHRoYXQgYSBgJGRpZ2VzdGAgaXMgb25seSB0cmlnZ2VyZWQgb25jZSB0aGUgYHVwZGF0ZU9uYCBldmVudHMgYXJlIGZpcmVkLCBvciBpZiBgZGVib3VuY2VgXG4gICAqIGlzIHNwZWNpZmllZCwgb25jZSB0aGUgdGltZXIgcnVucyBvdXQuXG4gICAqXG4gICAqIFdoZW4gdXNlZCB3aXRoIHN0YW5kYXJkIGlucHV0cywgdGhlIHZpZXcgdmFsdWUgd2lsbCBhbHdheXMgYmUgYSBzdHJpbmcgKHdoaWNoIGlzIGluIHNvbWUgY2FzZXNcbiAgICogcGFyc2VkIGludG8gYW5vdGhlciB0eXBlLCBzdWNoIGFzIGEgYERhdGVgIG9iamVjdCBmb3IgYGlucHV0W2RhdGVdYC4pXG4gICAqIEhvd2V2ZXIsIGN1c3RvbSBjb250cm9scyBtaWdodCBhbHNvIHBhc3Mgb2JqZWN0cyB0byB0aGlzIG1ldGhvZC4gSW4gdGhpcyBjYXNlLCB3ZSBzaG91bGQgbWFrZVxuICAgKiBhIGNvcHkgb2YgdGhlIG9iamVjdCBiZWZvcmUgcGFzc2luZyBpdCB0byBgJHNldFZpZXdWYWx1ZWAuIFRoaXMgaXMgYmVjYXVzZSBgbmdNb2RlbGAgZG9lcyBub3RcbiAgICogcGVyZm9ybSBhIGRlZXAgd2F0Y2ggb2Ygb2JqZWN0cywgaXQgb25seSBsb29rcyBmb3IgYSBjaGFuZ2Ugb2YgaWRlbnRpdHkuIElmIHlvdSBvbmx5IGNoYW5nZVxuICAgKiB0aGUgcHJvcGVydHkgb2YgdGhlIG9iamVjdCB0aGVuIG5nTW9kZWwgd2lsbCBub3QgcmVhbGlzZSB0aGF0IHRoZSBvYmplY3QgaGFzIGNoYW5nZWQgYW5kXG4gICAqIHdpbGwgbm90IGludm9rZSB0aGUgYCRwYXJzZXJzYCBhbmQgYCR2YWxpZGF0b3JzYCBwaXBlbGluZXMuIEZvciB0aGlzIHJlYXNvbiwgeW91IHNob3VsZFxuICAgKiBub3QgY2hhbmdlIHByb3BlcnRpZXMgb2YgdGhlIGNvcHkgb25jZSBpdCBoYXMgYmVlbiBwYXNzZWQgdG8gYCRzZXRWaWV3VmFsdWVgLlxuICAgKiBPdGhlcndpc2UgeW91IG1heSBjYXVzZSB0aGUgbW9kZWwgdmFsdWUgb24gdGhlIHNjb3BlIHRvIGNoYW5nZSBpbmNvcnJlY3RseS5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAgICogSW4gYW55IGNhc2UsIHRoZSB2YWx1ZSBwYXNzZWQgdG8gdGhlIG1ldGhvZCBzaG91bGQgYWx3YXlzIHJlZmxlY3QgdGhlIGN1cnJlbnQgdmFsdWVcbiAgICogb2YgdGhlIGNvbnRyb2wuIEZvciBleGFtcGxlLCBpZiB5b3UgYXJlIGNhbGxpbmcgYCRzZXRWaWV3VmFsdWVgIGZvciBhbiBpbnB1dCBlbGVtZW50LFxuICAgKiB5b3Ugc2hvdWxkIHBhc3MgdGhlIGlucHV0IERPTSB2YWx1ZS4gT3RoZXJ3aXNlLCB0aGUgY29udHJvbCBhbmQgdGhlIHNjb3BlIG1vZGVsIGJlY29tZVxuICAgKiBvdXQgb2Ygc3luYy4gSXQncyBhbHNvIGltcG9ydGFudCB0byBub3RlIHRoYXQgYCRzZXRWaWV3VmFsdWVgIGRvZXMgbm90IGNhbGwgYCRyZW5kZXJgIG9yIGNoYW5nZVxuICAgKiB0aGUgY29udHJvbCdzIERPTSB2YWx1ZSBpbiBhbnkgd2F5LiBJZiB3ZSB3YW50IHRvIGNoYW5nZSB0aGUgY29udHJvbCdzIERPTSB2YWx1ZVxuICAgKiBwcm9ncmFtbWF0aWNhbGx5LCB3ZSBzaG91bGQgdXBkYXRlIHRoZSBgbmdNb2RlbGAgc2NvcGUgZXhwcmVzc2lvbi4gSXRzIG5ldyB2YWx1ZSB3aWxsIGJlXG4gICAqIHBpY2tlZCB1cCBieSB0aGUgbW9kZWwgY29udHJvbGxlciwgd2hpY2ggd2lsbCBydW4gaXQgdGhyb3VnaCB0aGUgYCRmb3JtYXR0ZXJzYCwgYCRyZW5kZXJgIGl0XG4gICAqIHRvIHVwZGF0ZSB0aGUgRE9NLCBhbmQgZmluYWxseSBjYWxsIGAkdmFsaWRhdGVgIG9uIGl0LlxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSB2YWx1ZSBmcm9tIHRoZSB2aWV3LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHJpZ2dlciBFdmVudCB0aGF0IHRyaWdnZXJlZCB0aGUgdXBkYXRlLlxuICAgKi9cbiAgdGhpcy4kc2V0Vmlld1ZhbHVlID0gZnVuY3Rpb24odmFsdWUsIHRyaWdnZXIpIHtcbiAgICBjdHJsLiR2aWV3VmFsdWUgPSB2YWx1ZTtcbiAgICBpZiAoIWN0cmwuJG9wdGlvbnMgfHwgY3RybC4kb3B0aW9ucy51cGRhdGVPbkRlZmF1bHQpIHtcbiAgICAgIGN0cmwuJCRkZWJvdW5jZVZpZXdWYWx1ZUNvbW1pdCh0cmlnZ2VyKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy4kJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0ID0gZnVuY3Rpb24odHJpZ2dlcikge1xuICAgIHZhciBkZWJvdW5jZURlbGF5ID0gMCxcbiAgICAgICAgb3B0aW9ucyA9IGN0cmwuJG9wdGlvbnMsXG4gICAgICAgIGRlYm91bmNlO1xuXG4gICAgaWYgKG9wdGlvbnMgJiYgaXNEZWZpbmVkKG9wdGlvbnMuZGVib3VuY2UpKSB7XG4gICAgICBkZWJvdW5jZSA9IG9wdGlvbnMuZGVib3VuY2U7XG4gICAgICBpZiAoaXNOdW1iZXIoZGVib3VuY2UpKSB7XG4gICAgICAgIGRlYm91bmNlRGVsYXkgPSBkZWJvdW5jZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoZGVib3VuY2VbdHJpZ2dlcl0pKSB7XG4gICAgICAgIGRlYm91bmNlRGVsYXkgPSBkZWJvdW5jZVt0cmlnZ2VyXTtcbiAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoZGVib3VuY2VbJ2RlZmF1bHQnXSkpIHtcbiAgICAgICAgZGVib3VuY2VEZWxheSA9IGRlYm91bmNlWydkZWZhdWx0J107XG4gICAgICB9XG4gICAgfVxuXG4gICAgJHRpbWVvdXQuY2FuY2VsKHBlbmRpbmdEZWJvdW5jZSk7XG4gICAgaWYgKGRlYm91bmNlRGVsYXkpIHtcbiAgICAgIHBlbmRpbmdEZWJvdW5jZSA9ICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBjdHJsLiRjb21taXRWaWV3VmFsdWUoKTtcbiAgICAgIH0sIGRlYm91bmNlRGVsYXkpO1xuICAgIH0gZWxzZSBpZiAoJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICBjdHJsLiRjb21taXRWaWV3VmFsdWUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgY3RybC4kY29tbWl0Vmlld1ZhbHVlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gbW9kZWwgLT4gdmFsdWVcbiAgLy8gTm90ZTogd2UgY2Fubm90IHVzZSBhIG5vcm1hbCBzY29wZS4kd2F0Y2ggYXMgd2Ugd2FudCB0byBkZXRlY3QgdGhlIGZvbGxvd2luZzpcbiAgLy8gMS4gc2NvcGUgdmFsdWUgaXMgJ2EnXG4gIC8vIDIuIHVzZXIgZW50ZXJzICdiJ1xuICAvLyAzLiBuZy1jaGFuZ2Uga2lja3MgaW4gYW5kIHJldmVydHMgc2NvcGUgdmFsdWUgdG8gJ2EnXG4gIC8vICAgIC0+IHNjb3BlIHZhbHVlIGRpZCBub3QgY2hhbmdlIHNpbmNlIHRoZSBsYXN0IGRpZ2VzdCBhc1xuICAvLyAgICAgICBuZy1jaGFuZ2UgZXhlY3V0ZXMgaW4gYXBwbHkgcGhhc2VcbiAgLy8gNC4gdmlldyBzaG91bGQgYmUgY2hhbmdlZCBiYWNrIHRvICdhJ1xuICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIG5nTW9kZWxXYXRjaCgpIHtcbiAgICB2YXIgbW9kZWxWYWx1ZSA9IG5nTW9kZWxHZXQoJHNjb3BlKTtcblxuICAgIC8vIGlmIHNjb3BlIG1vZGVsIHZhbHVlIGFuZCBuZ01vZGVsIHZhbHVlIGFyZSBvdXQgb2Ygc3luY1xuICAgIC8vIFRPRE8ocGVyZik6IHdoeSBub3QgbW92ZSB0aGlzIHRvIHRoZSBhY3Rpb24gZm4/XG4gICAgaWYgKG1vZGVsVmFsdWUgIT09IGN0cmwuJG1vZGVsVmFsdWUgJiZcbiAgICAgICAvLyBjaGVja3MgZm9yIE5hTiBpcyBuZWVkZWQgdG8gYWxsb3cgc2V0dGluZyB0aGUgbW9kZWwgdG8gTmFOIHdoZW4gdGhlcmUncyBhbiBhc3luY1ZhbGlkYXRvclxuICAgICAgIChjdHJsLiRtb2RlbFZhbHVlID09PSBjdHJsLiRtb2RlbFZhbHVlIHx8IG1vZGVsVmFsdWUgPT09IG1vZGVsVmFsdWUpXG4gICAgKSB7XG4gICAgICBjdHJsLiRtb2RlbFZhbHVlID0gY3RybC4kJHJhd01vZGVsVmFsdWUgPSBtb2RlbFZhbHVlO1xuICAgICAgcGFyc2VyVmFsaWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBmb3JtYXR0ZXJzID0gY3RybC4kZm9ybWF0dGVycyxcbiAgICAgICAgICBpZHggPSBmb3JtYXR0ZXJzLmxlbmd0aDtcblxuICAgICAgdmFyIHZpZXdWYWx1ZSA9IG1vZGVsVmFsdWU7XG4gICAgICB3aGlsZSAoaWR4LS0pIHtcbiAgICAgICAgdmlld1ZhbHVlID0gZm9ybWF0dGVyc1tpZHhdKHZpZXdWYWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoY3RybC4kdmlld1ZhbHVlICE9PSB2aWV3VmFsdWUpIHtcbiAgICAgICAgY3RybC4kdmlld1ZhbHVlID0gY3RybC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUgPSB2aWV3VmFsdWU7XG4gICAgICAgIGN0cmwuJHJlbmRlcigpO1xuXG4gICAgICAgIGN0cmwuJCRydW5WYWxpZGF0b3JzKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSwgbm9vcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vZGVsVmFsdWU7XG4gIH0pO1xufV07XG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vZGVsXG4gKlxuICogQGVsZW1lbnQgaW5wdXRcbiAqIEBwcmlvcml0eSAxXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nTW9kZWxgIGRpcmVjdGl2ZSBiaW5kcyBhbiBgaW5wdXRgLGBzZWxlY3RgLCBgdGV4dGFyZWFgIChvciBjdXN0b20gZm9ybSBjb250cm9sKSB0byBhXG4gKiBwcm9wZXJ0eSBvbiB0aGUgc2NvcGUgdXNpbmcge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIgTmdNb2RlbENvbnRyb2xsZXJ9LFxuICogd2hpY2ggaXMgY3JlYXRlZCBhbmQgZXhwb3NlZCBieSB0aGlzIGRpcmVjdGl2ZS5cbiAqXG4gKiBgbmdNb2RlbGAgaXMgcmVzcG9uc2libGUgZm9yOlxuICpcbiAqIC0gQmluZGluZyB0aGUgdmlldyBpbnRvIHRoZSBtb2RlbCwgd2hpY2ggb3RoZXIgZGlyZWN0aXZlcyBzdWNoIGFzIGBpbnB1dGAsIGB0ZXh0YXJlYWAgb3IgYHNlbGVjdGBcbiAqICAgcmVxdWlyZS5cbiAqIC0gUHJvdmlkaW5nIHZhbGlkYXRpb24gYmVoYXZpb3IgKGkuZS4gcmVxdWlyZWQsIG51bWJlciwgZW1haWwsIHVybCkuXG4gKiAtIEtlZXBpbmcgdGhlIHN0YXRlIG9mIHRoZSBjb250cm9sICh2YWxpZC9pbnZhbGlkLCBkaXJ0eS9wcmlzdGluZSwgdG91Y2hlZC91bnRvdWNoZWQsIHZhbGlkYXRpb24gZXJyb3JzKS5cbiAqIC0gU2V0dGluZyByZWxhdGVkIGNzcyBjbGFzc2VzIG9uIHRoZSBlbGVtZW50IChgbmctdmFsaWRgLCBgbmctaW52YWxpZGAsIGBuZy1kaXJ0eWAsIGBuZy1wcmlzdGluZWAsIGBuZy10b3VjaGVkYCwgYG5nLXVudG91Y2hlZGApIGluY2x1ZGluZyBhbmltYXRpb25zLlxuICogLSBSZWdpc3RlcmluZyB0aGUgY29udHJvbCB3aXRoIGl0cyBwYXJlbnQge0BsaW5rIG5nLmRpcmVjdGl2ZTpmb3JtIGZvcm19LlxuICpcbiAqIE5vdGU6IGBuZ01vZGVsYCB3aWxsIHRyeSB0byBiaW5kIHRvIHRoZSBwcm9wZXJ0eSBnaXZlbiBieSBldmFsdWF0aW5nIHRoZSBleHByZXNzaW9uIG9uIHRoZVxuICogY3VycmVudCBzY29wZS4gSWYgdGhlIHByb3BlcnR5IGRvZXNuJ3QgYWxyZWFkeSBleGlzdCBvbiB0aGlzIHNjb3BlLCBpdCB3aWxsIGJlIGNyZWF0ZWRcbiAqIGltcGxpY2l0bHkgYW5kIGFkZGVkIHRvIHRoZSBzY29wZS5cbiAqXG4gKiBGb3IgYmVzdCBwcmFjdGljZXMgb24gdXNpbmcgYG5nTW9kZWxgLCBzZWU6XG4gKlxuICogIC0gW1VuZGVyc3RhbmRpbmcgU2NvcGVzXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3dpa2kvVW5kZXJzdGFuZGluZy1TY29wZXMpXG4gKlxuICogRm9yIGJhc2ljIGV4YW1wbGVzLCBob3cgdG8gdXNlIGBuZ01vZGVsYCwgc2VlOlxuICpcbiAqICAtIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQgaW5wdXR9XG4gKiAgICAtIHtAbGluayBpbnB1dFt0ZXh0XSB0ZXh0fVxuICogICAgLSB7QGxpbmsgaW5wdXRbY2hlY2tib3hdIGNoZWNrYm94fVxuICogICAgLSB7QGxpbmsgaW5wdXRbcmFkaW9dIHJhZGlvfVxuICogICAgLSB7QGxpbmsgaW5wdXRbbnVtYmVyXSBudW1iZXJ9XG4gKiAgICAtIHtAbGluayBpbnB1dFtlbWFpbF0gZW1haWx9XG4gKiAgICAtIHtAbGluayBpbnB1dFt1cmxdIHVybH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W2RhdGVdIGRhdGV9XG4gKiAgICAtIHtAbGluayBpbnB1dFtkYXRldGltZS1sb2NhbF0gZGF0ZXRpbWUtbG9jYWx9XG4gKiAgICAtIHtAbGluayBpbnB1dFt0aW1lXSB0aW1lfVxuICogICAgLSB7QGxpbmsgaW5wdXRbbW9udGhdIG1vbnRofVxuICogICAgLSB7QGxpbmsgaW5wdXRbd2Vla10gd2Vla31cbiAqICAtIHtAbGluayBuZy5kaXJlY3RpdmU6c2VsZWN0IHNlbGVjdH1cbiAqICAtIHtAbGluayBuZy5kaXJlY3RpdmU6dGV4dGFyZWEgdGV4dGFyZWF9XG4gKlxuICogIyBDU1MgY2xhc3Nlc1xuICogVGhlIGZvbGxvd2luZyBDU1MgY2xhc3NlcyBhcmUgYWRkZWQgYW5kIHJlbW92ZWQgb24gdGhlIGFzc29jaWF0ZWQgaW5wdXQvc2VsZWN0L3RleHRhcmVhIGVsZW1lbnRcbiAqIGRlcGVuZGluZyBvbiB0aGUgdmFsaWRpdHkgb2YgdGhlIG1vZGVsLlxuICpcbiAqICAtIGBuZy12YWxpZGA6IHRoZSBtb2RlbCBpcyB2YWxpZFxuICogIC0gYG5nLWludmFsaWRgOiB0aGUgbW9kZWwgaXMgaW52YWxpZFxuICogIC0gYG5nLXZhbGlkLVtrZXldYDogZm9yIGVhY2ggdmFsaWQga2V5IGFkZGVkIGJ5IGAkc2V0VmFsaWRpdHlgXG4gKiAgLSBgbmctaW52YWxpZC1ba2V5XWA6IGZvciBlYWNoIGludmFsaWQga2V5IGFkZGVkIGJ5IGAkc2V0VmFsaWRpdHlgXG4gKiAgLSBgbmctcHJpc3RpbmVgOiB0aGUgY29udHJvbCBoYXNuJ3QgYmVlbiBpbnRlcmFjdGVkIHdpdGggeWV0XG4gKiAgLSBgbmctZGlydHlgOiB0aGUgY29udHJvbCBoYXMgYmVlbiBpbnRlcmFjdGVkIHdpdGhcbiAqICAtIGBuZy10b3VjaGVkYDogdGhlIGNvbnRyb2wgaGFzIGJlZW4gYmx1cnJlZFxuICogIC0gYG5nLXVudG91Y2hlZGA6IHRoZSBjb250cm9sIGhhc24ndCBiZWVuIGJsdXJyZWRcbiAqICAtIGBuZy1wZW5kaW5nYDogYW55IGAkYXN5bmNWYWxpZGF0b3JzYCBhcmUgdW5mdWxmaWxsZWRcbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCBuZ0FuaW1hdGUgY2FuIGRldGVjdCBlYWNoIG9mIHRoZXNlIGNsYXNzZXMgd2hlbiBhZGRlZCBhbmQgcmVtb3ZlZC5cbiAqXG4gKiAjIyBBbmltYXRpb24gSG9va3NcbiAqXG4gKiBBbmltYXRpb25zIHdpdGhpbiBtb2RlbHMgYXJlIHRyaWdnZXJlZCB3aGVuIGFueSBvZiB0aGUgYXNzb2NpYXRlZCBDU1MgY2xhc3NlcyBhcmUgYWRkZWQgYW5kIHJlbW92ZWRcbiAqIG9uIHRoZSBpbnB1dCBlbGVtZW50IHdoaWNoIGlzIGF0dGFjaGVkIHRvIHRoZSBtb2RlbC4gVGhlc2UgY2xhc3NlcyBhcmU6IGAubmctcHJpc3RpbmVgLCBgLm5nLWRpcnR5YCxcbiAqIGAubmctaW52YWxpZGAgYW5kIGAubmctdmFsaWRgIGFzIHdlbGwgYXMgYW55IG90aGVyIHZhbGlkYXRpb25zIHRoYXQgYXJlIHBlcmZvcm1lZCBvbiB0aGUgbW9kZWwgaXRzZWxmLlxuICogVGhlIGFuaW1hdGlvbnMgdGhhdCBhcmUgdHJpZ2dlcmVkIHdpdGhpbiBuZ01vZGVsIGFyZSBzaW1pbGFyIHRvIGhvdyB0aGV5IHdvcmsgaW4gbmdDbGFzcyBhbmRcbiAqIGFuaW1hdGlvbnMgY2FuIGJlIGhvb2tlZCBpbnRvIHVzaW5nIENTUyB0cmFuc2l0aW9ucywga2V5ZnJhbWVzIGFzIHdlbGwgYXMgSlMgYW5pbWF0aW9ucy5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgYSBzaW1wbGUgd2F5IHRvIHV0aWxpemUgQ1NTIHRyYW5zaXRpb25zIHRvIHN0eWxlIGFuIGlucHV0IGVsZW1lbnRcbiAqIHRoYXQgaGFzIGJlZW4gcmVuZGVyZWQgYXMgaW52YWxpZCBhZnRlciBpdCBoYXMgYmVlbiB2YWxpZGF0ZWQ6XG4gKlxuICogPHByZT5cbiAqIC8vYmUgc3VyZSB0byBpbmNsdWRlIG5nQW5pbWF0ZSBhcyBhIG1vZHVsZSB0byBob29rIGludG8gbW9yZVxuICogLy9hZHZhbmNlZCBhbmltYXRpb25zXG4gKiAubXktaW5wdXQge1xuICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDtcbiAqICAgYmFja2dyb3VuZDogd2hpdGU7XG4gKiB9XG4gKiAubXktaW5wdXQubmctaW52YWxpZCB7XG4gKiAgIGJhY2tncm91bmQ6IHJlZDtcbiAqICAgY29sb3I6d2hpdGU7XG4gKiB9XG4gKiA8L3ByZT5cbiAqXG4gKiBAZXhhbXBsZVxuICogPGV4YW1wbGUgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCIgZml4QmFzZT1cInRydWVcIiBtb2R1bGU9XCJpbnB1dEV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICBhbmd1bGFyLm1vZHVsZSgnaW5wdXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICRzY29wZS52YWwgPSAnMSc7XG4gICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxzdHlsZT5cbiAgICAgICAgIC5teS1pbnB1dCB7XG4gICAgICAgICAgIHRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xuICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgIH1cbiAgICAgICAgIC5teS1pbnB1dC5uZy1pbnZhbGlkIHtcbiAgICAgICAgICAgY29sb3I6d2hpdGU7XG4gICAgICAgICAgIGJhY2tncm91bmQ6IHJlZDtcbiAgICAgICAgIH1cbiAgICAgICA8L3N0eWxlPlxuICAgICAgIDxwIGlkPVwiaW5wdXREZXNjcmlwdGlvblwiPlxuICAgICAgICBVcGRhdGUgaW5wdXQgdG8gc2VlIHRyYW5zaXRpb25zIHdoZW4gdmFsaWQvaW52YWxpZC5cbiAgICAgICAgSW50ZWdlciBpcyBhIHZhbGlkIHZhbHVlLlxuICAgICAgIDwvcD5cbiAgICAgICA8Zm9ybSBuYW1lPVwidGVzdEZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInZhbFwiIG5nLXBhdHRlcm49XCIvXlxcZCskL1wiIG5hbWU9XCJhbmltXCIgY2xhc3M9XCJteS1pbnB1dFwiXG4gICAgICAgICAgICAgICAgYXJpYS1kZXNjcmliZWRieT1cImlucHV0RGVzY3JpcHRpb25cIiAvPlxuICAgICAgIDwvZm9ybT5cbiAgICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqICMjIEJpbmRpbmcgdG8gYSBnZXR0ZXIvc2V0dGVyXG4gKlxuICogU29tZXRpbWVzIGl0J3MgaGVscGZ1bCB0byBiaW5kIGBuZ01vZGVsYCB0byBhIGdldHRlci9zZXR0ZXIgZnVuY3Rpb24uICBBIGdldHRlci9zZXR0ZXIgaXMgYVxuICogZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1vZGVsIHdoZW4gY2FsbGVkIHdpdGggemVybyBhcmd1bWVudHMsIGFuZCBzZXRzXG4gKiB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgYSBtb2RlbCB3aGVuIGNhbGxlZCB3aXRoIGFuIGFyZ3VtZW50LiBJdCdzIHNvbWV0aW1lcyB1c2VmdWwgdG8gdXNlIHRoaXNcbiAqIGZvciBtb2RlbHMgdGhhdCBoYXZlIGFuIGludGVybmFsIHJlcHJlc2VudGF0aW9uIHRoYXQncyBkaWZmZXJlbnQgZnJvbSB3aGF0IHRoZSBtb2RlbCBleHBvc2VzXG4gKiB0byB0aGUgdmlldy5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtc3VjY2Vzc1wiPlxuICogKipCZXN0IFByYWN0aWNlOioqIEl0J3MgYmVzdCB0byBrZWVwIGdldHRlcnMgZmFzdCBiZWNhdXNlIEFuZ3VsYXIgaXMgbGlrZWx5IHRvIGNhbGwgdGhlbSBtb3JlXG4gKiBmcmVxdWVudGx5IHRoYW4gb3RoZXIgcGFydHMgb2YgeW91ciBjb2RlLlxuICogPC9kaXY+XG4gKlxuICogWW91IHVzZSB0aGlzIGJlaGF2aW9yIGJ5IGFkZGluZyBgbmctbW9kZWwtb3B0aW9ucz1cInsgZ2V0dGVyU2V0dGVyOiB0cnVlIH1cImAgdG8gYW4gZWxlbWVudCB0aGF0XG4gKiBoYXMgYG5nLW1vZGVsYCBhdHRhY2hlZCB0byBpdC4gWW91IGNhbiBhbHNvIGFkZCBgbmctbW9kZWwtb3B0aW9ucz1cInsgZ2V0dGVyU2V0dGVyOiB0cnVlIH1cImAgdG9cbiAqIGEgYDxmb3JtPmAsIHdoaWNoIHdpbGwgZW5hYmxlIHRoaXMgYmVoYXZpb3IgZm9yIGFsbCBgPGlucHV0PmBzIHdpdGhpbiBpdC4gU2VlXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIGBuZ01vZGVsT3B0aW9uc2B9IGZvciBtb3JlLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gdXNlIGBuZ01vZGVsYCB3aXRoIGEgZ2V0dGVyL3NldHRlcjpcbiAqXG4gKiBAZXhhbXBsZVxuICogPGV4YW1wbGUgbmFtZT1cIm5nTW9kZWwtZ2V0dGVyLXNldHRlclwiIG1vZHVsZT1cImdldHRlclNldHRlckV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGZvcm0gbmFtZT1cInVzZXJGb3JtXCI+XG4gICAgICAgICAgIDxsYWJlbD5OYW1lOlxuICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ1c2VyTmFtZVwiXG4gICAgICAgICAgICAgICAgICAgIG5nLW1vZGVsPVwidXNlci5uYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgbmctbW9kZWwtb3B0aW9ucz1cInsgZ2V0dGVyU2V0dGVyOiB0cnVlIH1cIiAvPlxuICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgPHByZT51c2VyLm5hbWUgPSA8c3BhbiBuZy1iaW5kPVwidXNlci5uYW1lKClcIj48L3NwYW4+PC9wcmU+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdnZXR0ZXJTZXR0ZXJFeGFtcGxlJywgW10pXG4gICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICB2YXIgX25hbWUgPSAnQnJpYW4nO1xuICAgICAgICAgICAkc2NvcGUudXNlciA9IHtcbiAgICAgICAgICAgICBuYW1lOiBmdW5jdGlvbihuZXdOYW1lKSB7XG4gICAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBuZXdOYW1lIGNhbiBiZSB1bmRlZmluZWQgZm9yIHR3byByZWFzb25zOlxuICAgICAgICAgICAgICAvLyAxLiBCZWNhdXNlIGl0IGlzIGNhbGxlZCBhcyBhIGdldHRlciBhbmQgdGh1cyBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHNcbiAgICAgICAgICAgICAgLy8gMi4gQmVjYXVzZSB0aGUgcHJvcGVydHkgc2hvdWxkIGFjdHVhbGx5IGJlIHNldCB0byB1bmRlZmluZWQuIFRoaXMgaGFwcGVucyBlLmcuIGlmIHRoZVxuICAgICAgICAgICAgICAvLyAgICBpbnB1dCBpcyBpbnZhbGlkXG4gICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF9uYW1lID0gbmV3TmFtZSkgOiBfbmFtZTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgIH07XG4gICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nTW9kZWxEaXJlY3RpdmUgPSBbJyRyb290U2NvcGUnLCBmdW5jdGlvbigkcm9vdFNjb3BlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiBbJ25nTW9kZWwnLCAnXj9mb3JtJywgJ14/bmdNb2RlbE9wdGlvbnMnXSxcbiAgICBjb250cm9sbGVyOiBOZ01vZGVsQ29udHJvbGxlcixcbiAgICAvLyBQcmVsaW5rIG5lZWRzIHRvIHJ1biBiZWZvcmUgYW55IGlucHV0IGRpcmVjdGl2ZVxuICAgIC8vIHNvIHRoYXQgd2UgY2FuIHNldCB0aGUgTmdNb2RlbE9wdGlvbnMgaW4gTmdNb2RlbENvbnRyb2xsZXJcbiAgICAvLyBiZWZvcmUgYW55b25lIGVsc2UgdXNlcyBpdC5cbiAgICBwcmlvcml0eTogMSxcbiAgICBjb21waWxlOiBmdW5jdGlvbiBuZ01vZGVsQ29tcGlsZShlbGVtZW50KSB7XG4gICAgICAvLyBTZXR1cCBpbml0aWFsIHN0YXRlIG9mIHRoZSBjb250cm9sXG4gICAgICBlbGVtZW50LmFkZENsYXNzKFBSSVNUSU5FX0NMQVNTKS5hZGRDbGFzcyhVTlRPVUNIRURfQ0xBU1MpLmFkZENsYXNzKFZBTElEX0NMQVNTKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcHJlOiBmdW5jdGlvbiBuZ01vZGVsUHJlTGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHMpIHtcbiAgICAgICAgICB2YXIgbW9kZWxDdHJsID0gY3RybHNbMF0sXG4gICAgICAgICAgICAgIGZvcm1DdHJsID0gY3RybHNbMV0gfHwgbW9kZWxDdHJsLiQkcGFyZW50Rm9ybTtcblxuICAgICAgICAgIG1vZGVsQ3RybC4kJHNldE9wdGlvbnMoY3RybHNbMl0gJiYgY3RybHNbMl0uJG9wdGlvbnMpO1xuXG4gICAgICAgICAgLy8gbm90aWZ5IG90aGVycywgZXNwZWNpYWxseSBwYXJlbnQgZm9ybXNcbiAgICAgICAgICBmb3JtQ3RybC4kYWRkQ29udHJvbChtb2RlbEN0cmwpO1xuXG4gICAgICAgICAgYXR0ci4kb2JzZXJ2ZSgnbmFtZScsIGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICBpZiAobW9kZWxDdHJsLiRuYW1lICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICBtb2RlbEN0cmwuJCRwYXJlbnRGb3JtLiQkcmVuYW1lQ29udHJvbChtb2RlbEN0cmwsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG1vZGVsQ3RybC4kJHBhcmVudEZvcm0uJHJlbW92ZUNvbnRyb2wobW9kZWxDdHJsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdDogZnVuY3Rpb24gbmdNb2RlbFBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgICAgIHZhciBtb2RlbEN0cmwgPSBjdHJsc1swXTtcbiAgICAgICAgICBpZiAobW9kZWxDdHJsLiRvcHRpb25zICYmIG1vZGVsQ3RybC4kb3B0aW9ucy51cGRhdGVPbikge1xuICAgICAgICAgICAgZWxlbWVudC5vbihtb2RlbEN0cmwuJG9wdGlvbnMudXBkYXRlT24sIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICAgIG1vZGVsQ3RybC4kJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0KGV2ICYmIGV2LnR5cGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZWxlbWVudC5vbignYmx1cicsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICBpZiAobW9kZWxDdHJsLiR0b3VjaGVkKSByZXR1cm47XG5cbiAgICAgICAgICAgIGlmICgkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgICAgICAgICAgc2NvcGUuJGV2YWxBc3luYyhtb2RlbEN0cmwuJHNldFRvdWNoZWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KG1vZGVsQ3RybC4kc2V0VG91Y2hlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cbnZhciBERUZBVUxUX1JFR0VYUCA9IC8oXFxzK3xeKWRlZmF1bHQoXFxzK3wkKS87XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb2RlbE9wdGlvbnNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFsbG93cyB0dW5pbmcgaG93IG1vZGVsIHVwZGF0ZXMgYXJlIGRvbmUuIFVzaW5nIGBuZ01vZGVsT3B0aW9uc2AgeW91IGNhbiBzcGVjaWZ5IGEgY3VzdG9tIGxpc3Qgb2ZcbiAqIGV2ZW50cyB0aGF0IHdpbGwgdHJpZ2dlciBhIG1vZGVsIHVwZGF0ZSBhbmQvb3IgYSBkZWJvdW5jaW5nIGRlbGF5IHNvIHRoYXQgdGhlIGFjdHVhbCB1cGRhdGUgb25seVxuICogdGFrZXMgcGxhY2Ugd2hlbiBhIHRpbWVyIGV4cGlyZXM7IHRoaXMgdGltZXIgd2lsbCBiZSByZXNldCBhZnRlciBhbm90aGVyIGNoYW5nZSB0YWtlcyBwbGFjZS5cbiAqXG4gKiBHaXZlbiB0aGUgbmF0dXJlIG9mIGBuZ01vZGVsT3B0aW9uc2AsIHRoZSB2YWx1ZSBkaXNwbGF5ZWQgaW5zaWRlIGlucHV0IGZpZWxkcyBpbiB0aGUgdmlldyBtaWdodFxuICogYmUgZGlmZmVyZW50IGZyb20gdGhlIHZhbHVlIGluIHRoZSBhY3R1YWwgbW9kZWwuIFRoaXMgbWVhbnMgdGhhdCBpZiB5b3UgdXBkYXRlIHRoZSBtb2RlbCB5b3VcbiAqIHNob3VsZCBhbHNvIGludm9rZSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciBgJHJvbGxiYWNrVmlld1ZhbHVlYH0gb24gdGhlIHJlbGV2YW50IGlucHV0IGZpZWxkIGluXG4gKiBvcmRlciB0byBtYWtlIHN1cmUgaXQgaXMgc3luY2hyb25pemVkIHdpdGggdGhlIG1vZGVsIGFuZCB0aGF0IGFueSBkZWJvdW5jZWQgYWN0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIFRoZSBlYXNpZXN0IHdheSB0byByZWZlcmVuY2UgdGhlIGNvbnRyb2wncyB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciBgJHJvbGxiYWNrVmlld1ZhbHVlYH1cbiAqIG1ldGhvZCBpcyBieSBtYWtpbmcgc3VyZSB0aGUgaW5wdXQgaXMgcGxhY2VkIGluc2lkZSBhIGZvcm0gdGhhdCBoYXMgYSBgbmFtZWAgYXR0cmlidXRlLiBUaGlzIGlzXG4gKiBpbXBvcnRhbnQgYmVjYXVzZSBgZm9ybWAgY29udHJvbGxlcnMgYXJlIHB1Ymxpc2hlZCB0byB0aGUgcmVsYXRlZCBzY29wZSB1bmRlciB0aGUgbmFtZSBpbiB0aGVpclxuICogYG5hbWVgIGF0dHJpYnV0ZS5cbiAqXG4gKiBBbnkgcGVuZGluZyBjaGFuZ2VzIHdpbGwgdGFrZSBwbGFjZSBpbW1lZGlhdGVseSB3aGVuIGFuIGVuY2xvc2luZyBmb3JtIGlzIHN1Ym1pdHRlZCB2aWEgdGhlXG4gKiBgc3VibWl0YCBldmVudC4gTm90ZSB0aGF0IGBuZ0NsaWNrYCBldmVudHMgd2lsbCBvY2N1ciBiZWZvcmUgdGhlIG1vZGVsIGlzIHVwZGF0ZWQuIFVzZSBgbmdTdWJtaXRgXG4gKiB0byBoYXZlIGFjY2VzcyB0byB0aGUgdXBkYXRlZCBtb2RlbC5cbiAqXG4gKiBgbmdNb2RlbE9wdGlvbnNgIGhhcyBhbiBlZmZlY3Qgb24gdGhlIGVsZW1lbnQgaXQncyBkZWNsYXJlZCBvbiBhbmQgaXRzIGRlc2NlbmRhbnRzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBuZ01vZGVsT3B0aW9ucyBvcHRpb25zIHRvIGFwcGx5IHRvIHRoZSBjdXJyZW50IG1vZGVsLiBWYWxpZCBrZXlzIGFyZTpcbiAqICAgLSBgdXBkYXRlT25gOiBzdHJpbmcgc3BlY2lmeWluZyB3aGljaCBldmVudCBzaG91bGQgdGhlIGlucHV0IGJlIGJvdW5kIHRvLiBZb3UgY2FuIHNldCBzZXZlcmFsXG4gKiAgICAgZXZlbnRzIHVzaW5nIGFuIHNwYWNlIGRlbGltaXRlZCBsaXN0LiBUaGVyZSBpcyBhIHNwZWNpYWwgZXZlbnQgY2FsbGVkIGBkZWZhdWx0YCB0aGF0XG4gKiAgICAgbWF0Y2hlcyB0aGUgZGVmYXVsdCBldmVudHMgYmVsb25naW5nIG9mIHRoZSBjb250cm9sLlxuICogICAtIGBkZWJvdW5jZWA6IGludGVnZXIgdmFsdWUgd2hpY2ggY29udGFpbnMgdGhlIGRlYm91bmNlIG1vZGVsIHVwZGF0ZSB2YWx1ZSBpbiBtaWxsaXNlY29uZHMuIEFcbiAqICAgICB2YWx1ZSBvZiAwIHRyaWdnZXJzIGFuIGltbWVkaWF0ZSB1cGRhdGUuIElmIGFuIG9iamVjdCBpcyBzdXBwbGllZCBpbnN0ZWFkLCB5b3UgY2FuIHNwZWNpZnkgYVxuICogICAgIGN1c3RvbSB2YWx1ZSBmb3IgZWFjaCBldmVudC4gRm9yIGV4YW1wbGU6XG4gKiAgICAgYG5nLW1vZGVsLW9wdGlvbnM9XCJ7IHVwZGF0ZU9uOiAnZGVmYXVsdCBibHVyJywgZGVib3VuY2U6IHsgJ2RlZmF1bHQnOiA1MDAsICdibHVyJzogMCB9IH1cImBcbiAqICAgLSBgYWxsb3dJbnZhbGlkYDogYm9vbGVhbiB2YWx1ZSB3aGljaCBpbmRpY2F0ZXMgdGhhdCB0aGUgbW9kZWwgY2FuIGJlIHNldCB3aXRoIHZhbHVlcyB0aGF0IGRpZFxuICogICAgIG5vdCB2YWxpZGF0ZSBjb3JyZWN0bHkgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiBzZXR0aW5nIHRoZSBtb2RlbCB0byB1bmRlZmluZWQuXG4gKiAgIC0gYGdldHRlclNldHRlcmA6IGJvb2xlYW4gdmFsdWUgd2hpY2ggZGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0byB0cmVhdCBmdW5jdGlvbnMgYm91bmQgdG9cbiAgICAgICBgbmdNb2RlbGAgYXMgZ2V0dGVycy9zZXR0ZXJzLlxuICogICAtIGB0aW1lem9uZWA6IERlZmluZXMgdGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBmb3JcbiAqICAgICBgPGlucHV0IHR5cGU9XCJkYXRlXCI+YCwgYDxpbnB1dCB0eXBlPVwidGltZVwiPmAsIC4uLiAuIEl0IHVuZGVyc3RhbmRzIFVUQy9HTVQgYW5kIHRoZVxuICogICAgIGNvbnRpbmVudGFsIFVTIHRpbWUgem9uZSBhYmJyZXZpYXRpb25zLCBidXQgZm9yIGdlbmVyYWwgdXNlLCB1c2UgYSB0aW1lIHpvbmUgb2Zmc2V0LCBmb3JcbiAqICAgICBleGFtcGxlLCBgJyswNDMwJ2AgKDQgaG91cnMsIDMwIG1pbnV0ZXMgZWFzdCBvZiB0aGUgR3JlZW53aWNoIG1lcmlkaWFuKVxuICogICAgIElmIG5vdCBzcGVjaWZpZWQsIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3NlciB3aWxsIGJlIHVzZWQuXG4gKlxuICogQGV4YW1wbGVcblxuICBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIG92ZXJyaWRlIGltbWVkaWF0ZSB1cGRhdGVzLiBDaGFuZ2VzIG9uIHRoZSBpbnB1dHMgd2l0aGluIHRoZVxuICBmb3JtIHdpbGwgdXBkYXRlIHRoZSBtb2RlbCBvbmx5IHdoZW4gdGhlIGNvbnRyb2wgbG9zZXMgZm9jdXMgKGJsdXIgZXZlbnQpLiBJZiBgZXNjYXBlYCBrZXkgaXNcbiAgcHJlc3NlZCB3aGlsZSB0aGUgaW5wdXQgZmllbGQgaXMgZm9jdXNlZCwgdGhlIHZhbHVlIGlzIHJlc2V0IHRvIHRoZSB2YWx1ZSBpbiB0aGUgY3VycmVudCBtb2RlbC5cblxuICA8ZXhhbXBsZSBuYW1lPVwibmdNb2RlbE9wdGlvbnMtZGlyZWN0aXZlLWJsdXJcIiBtb2R1bGU9XCJvcHRpb25zRXhhbXBsZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8Zm9ybSBuYW1lPVwidXNlckZvcm1cIj5cbiAgICAgICAgICA8bGFiZWw+TmFtZTpcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ1c2VyTmFtZVwiXG4gICAgICAgICAgICAgICAgICAgbmctbW9kZWw9XCJ1c2VyLm5hbWVcIlxuICAgICAgICAgICAgICAgICAgIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IHVwZGF0ZU9uOiAnYmx1cicgfVwiXG4gICAgICAgICAgICAgICAgICAgbmcta2V5dXA9XCJjYW5jZWwoJGV2ZW50KVwiIC8+XG4gICAgICAgICAgPC9sYWJlbD48YnIgLz5cbiAgICAgICAgICA8bGFiZWw+T3RoZXIgZGF0YTpcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXNlci5kYXRhXCIgLz5cbiAgICAgICAgICA8L2xhYmVsPjxiciAvPlxuICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDxwcmU+dXNlci5uYW1lID0gPHNwYW4gbmctYmluZD1cInVzZXIubmFtZVwiPjwvc3Bhbj48L3ByZT5cbiAgICAgICAgPHByZT51c2VyLmRhdGEgPSA8c3BhbiBuZy1iaW5kPVwidXNlci5kYXRhXCI+PC9zcGFuPjwvcHJlPlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcHRpb25zRXhhbXBsZScsIFtdKVxuICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICRzY29wZS51c2VyID0geyBuYW1lOiAnSm9obicsIGRhdGE6ICcnIH07XG5cbiAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PSAyNykge1xuICAgICAgICAgICAgICAkc2NvcGUudXNlckZvcm0udXNlck5hbWUuJHJvbGxiYWNrVmlld1ZhbHVlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgbW9kZWwgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3VzZXIubmFtZScpKTtcbiAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIubmFtZScpKTtcbiAgICAgIHZhciBvdGhlciA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIuZGF0YScpKTtcblxuICAgICAgaXQoJ3Nob3VsZCBhbGxvdyBjdXN0b20gZXZlbnRzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlucHV0LnNlbmRLZXlzKCcgRG9lJyk7XG4gICAgICAgIGlucHV0LmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0pvaG4nKTtcbiAgICAgICAgb3RoZXIuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9FcXVhbCgnSm9obiBEb2UnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkICRyb2xsYmFja1ZpZXdWYWx1ZSB3aGVuIG1vZGVsIGNoYW5nZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaW5wdXQuc2VuZEtleXMoJyBEb2UnKTtcbiAgICAgICAgZXhwZWN0KGlucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnSm9obiBEb2UnKTtcbiAgICAgICAgaW5wdXQuc2VuZEtleXMocHJvdHJhY3Rvci5LZXkuRVNDQVBFKTtcbiAgICAgICAgZXhwZWN0KGlucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnSm9obicpO1xuICAgICAgICBvdGhlci5jbGljaygpO1xuICAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS50b0VxdWFsKCdKb2huJyk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cblxuICBUaGlzIG9uZSBzaG93cyBob3cgdG8gZGVib3VuY2UgbW9kZWwgY2hhbmdlcy4gTW9kZWwgd2lsbCBiZSB1cGRhdGVkIG9ubHkgMSBzZWMgYWZ0ZXIgbGFzdCBjaGFuZ2UuXG4gIElmIHRoZSBgQ2xlYXJgIGJ1dHRvbiBpcyBwcmVzc2VkLCBhbnkgZGVib3VuY2VkIGFjdGlvbiBpcyBjYW5jZWxlZCBhbmQgdGhlIHZhbHVlIGJlY29tZXMgZW1wdHkuXG5cbiAgPGV4YW1wbGUgbmFtZT1cIm5nTW9kZWxPcHRpb25zLWRpcmVjdGl2ZS1kZWJvdW5jZVwiIG1vZHVsZT1cIm9wdGlvbnNFeGFtcGxlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgIDxmb3JtIG5hbWU9XCJ1c2VyRm9ybVwiPlxuICAgICAgICAgIDxsYWJlbD5OYW1lOlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInVzZXJOYW1lXCJcbiAgICAgICAgICAgICAgICAgICBuZy1tb2RlbD1cInVzZXIubmFtZVwiXG4gICAgICAgICAgICAgICAgICAgbmctbW9kZWwtb3B0aW9ucz1cInsgZGVib3VuY2U6IDEwMDAgfVwiIC8+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwidXNlckZvcm0udXNlck5hbWUuJHJvbGxiYWNrVmlld1ZhbHVlKCk7IHVzZXIubmFtZT0nJ1wiPkNsZWFyPC9idXR0b24+XG4gICAgICAgICAgPGJyIC8+XG4gICAgICAgIDwvZm9ybT5cbiAgICAgICAgPHByZT51c2VyLm5hbWUgPSA8c3BhbiBuZy1iaW5kPVwidXNlci5uYW1lXCI+PC9zcGFuPjwvcHJlPlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcHRpb25zRXhhbXBsZScsIFtdKVxuICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICRzY29wZS51c2VyID0geyBuYW1lOiAnSWdvcicgfTtcbiAgICAgICAgfV0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuXG4gIFRoaXMgb25lIHNob3dzIGhvdyB0byBiaW5kIHRvIGdldHRlci9zZXR0ZXJzOlxuXG4gIDxleGFtcGxlIG5hbWU9XCJuZ01vZGVsT3B0aW9ucy1kaXJlY3RpdmUtZ2V0dGVyLXNldHRlclwiIG1vZHVsZT1cImdldHRlclNldHRlckV4YW1wbGVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgPGZvcm0gbmFtZT1cInVzZXJGb3JtXCI+XG4gICAgICAgICAgPGxhYmVsPk5hbWU6XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidXNlck5hbWVcIlxuICAgICAgICAgICAgICAgICAgIG5nLW1vZGVsPVwidXNlci5uYW1lXCJcbiAgICAgICAgICAgICAgICAgICBuZy1tb2RlbC1vcHRpb25zPVwieyBnZXR0ZXJTZXR0ZXI6IHRydWUgfVwiIC8+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgICA8cHJlPnVzZXIubmFtZSA9IDxzcGFuIG5nLWJpbmQ9XCJ1c2VyLm5hbWUoKVwiPjwvc3Bhbj48L3ByZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnZ2V0dGVyU2V0dGVyRXhhbXBsZScsIFtdKVxuICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgIHZhciBfbmFtZSA9ICdCcmlhbic7XG4gICAgICAgICAgJHNjb3BlLnVzZXIgPSB7XG4gICAgICAgICAgICBuYW1lOiBmdW5jdGlvbihuZXdOYW1lKSB7XG4gICAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBuZXdOYW1lIGNhbiBiZSB1bmRlZmluZWQgZm9yIHR3byByZWFzb25zOlxuICAgICAgICAgICAgICAvLyAxLiBCZWNhdXNlIGl0IGlzIGNhbGxlZCBhcyBhIGdldHRlciBhbmQgdGh1cyBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHNcbiAgICAgICAgICAgICAgLy8gMi4gQmVjYXVzZSB0aGUgcHJvcGVydHkgc2hvdWxkIGFjdHVhbGx5IGJlIHNldCB0byB1bmRlZmluZWQuIFRoaXMgaGFwcGVucyBlLmcuIGlmIHRoZVxuICAgICAgICAgICAgICAvLyAgICBpbnB1dCBpcyBpbnZhbGlkXG4gICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF9uYW1lID0gbmV3TmFtZSkgOiBfbmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ01vZGVsT3B0aW9uc0RpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJGF0dHJzJywgZnVuY3Rpb24oJHNjb3BlLCAkYXR0cnMpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHRoaXMuJG9wdGlvbnMgPSBjb3B5KCRzY29wZS4kZXZhbCgkYXR0cnMubmdNb2RlbE9wdGlvbnMpKTtcbiAgICAgIC8vIEFsbG93IGFkZGluZy9vdmVycmlkaW5nIGJvdW5kIGV2ZW50c1xuICAgICAgaWYgKGlzRGVmaW5lZCh0aGlzLiRvcHRpb25zLnVwZGF0ZU9uKSkge1xuICAgICAgICB0aGlzLiRvcHRpb25zLnVwZGF0ZU9uRGVmYXVsdCA9IGZhbHNlO1xuICAgICAgICAvLyBleHRyYWN0IFwiZGVmYXVsdFwiIHBzZXVkby1ldmVudCBmcm9tIGxpc3Qgb2YgZXZlbnRzIHRoYXQgY2FuIHRyaWdnZXIgYSBtb2RlbCB1cGRhdGVcbiAgICAgICAgdGhpcy4kb3B0aW9ucy51cGRhdGVPbiA9IHRyaW0odGhpcy4kb3B0aW9ucy51cGRhdGVPbi5yZXBsYWNlKERFRkFVTFRfUkVHRVhQLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aGF0LiRvcHRpb25zLnVwZGF0ZU9uRGVmYXVsdCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuICcgJztcbiAgICAgICAgfSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kb3B0aW9ucy51cGRhdGVPbkRlZmF1bHQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1dXG4gIH07XG59O1xuXG5cblxuLy8gaGVscGVyIG1ldGhvZHNcbmZ1bmN0aW9uIGFkZFNldFZhbGlkaXR5TWV0aG9kKGNvbnRleHQpIHtcbiAgdmFyIGN0cmwgPSBjb250ZXh0LmN0cmwsXG4gICAgICAkZWxlbWVudCA9IGNvbnRleHQuJGVsZW1lbnQsXG4gICAgICBjbGFzc0NhY2hlID0ge30sXG4gICAgICBzZXQgPSBjb250ZXh0LnNldCxcbiAgICAgIHVuc2V0ID0gY29udGV4dC51bnNldCxcbiAgICAgICRhbmltYXRlID0gY29udGV4dC4kYW5pbWF0ZTtcblxuICBjbGFzc0NhY2hlW0lOVkFMSURfQ0xBU1NdID0gIShjbGFzc0NhY2hlW1ZBTElEX0NMQVNTXSA9ICRlbGVtZW50Lmhhc0NsYXNzKFZBTElEX0NMQVNTKSk7XG5cbiAgY3RybC4kc2V0VmFsaWRpdHkgPSBzZXRWYWxpZGl0eTtcblxuICBmdW5jdGlvbiBzZXRWYWxpZGl0eSh2YWxpZGF0aW9uRXJyb3JLZXksIHN0YXRlLCBjb250cm9sbGVyKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHN0YXRlKSkge1xuICAgICAgY3JlYXRlQW5kU2V0KCckcGVuZGluZycsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVuc2V0QW5kQ2xlYW51cCgnJHBlbmRpbmcnLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgIH1cbiAgICBpZiAoIWlzQm9vbGVhbihzdGF0ZSkpIHtcbiAgICAgIHVuc2V0KGN0cmwuJGVycm9yLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgICAgdW5zZXQoY3RybC4kJHN1Y2Nlc3MsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICB1bnNldChjdHJsLiRlcnJvciwgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICAgICAgc2V0KGN0cmwuJCRzdWNjZXNzLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0KGN0cmwuJGVycm9yLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgICAgICB1bnNldChjdHJsLiQkc3VjY2VzcywgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGN0cmwuJHBlbmRpbmcpIHtcbiAgICAgIGNhY2hlZFRvZ2dsZUNsYXNzKFBFTkRJTkdfQ0xBU1MsIHRydWUpO1xuICAgICAgY3RybC4kdmFsaWQgPSBjdHJsLiRpbnZhbGlkID0gdW5kZWZpbmVkO1xuICAgICAgdG9nZ2xlVmFsaWRhdGlvbkNzcygnJywgbnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhY2hlZFRvZ2dsZUNsYXNzKFBFTkRJTkdfQ0xBU1MsIGZhbHNlKTtcbiAgICAgIGN0cmwuJHZhbGlkID0gaXNPYmplY3RFbXB0eShjdHJsLiRlcnJvcik7XG4gICAgICBjdHJsLiRpbnZhbGlkID0gIWN0cmwuJHZhbGlkO1xuICAgICAgdG9nZ2xlVmFsaWRhdGlvbkNzcygnJywgY3RybC4kdmFsaWQpO1xuICAgIH1cblxuICAgIC8vIHJlLXJlYWQgdGhlIHN0YXRlIGFzIHRoZSBzZXQvdW5zZXQgbWV0aG9kcyBjb3VsZCBoYXZlXG4gICAgLy8gY29tYmluZWQgc3RhdGUgaW4gY3RybC4kZXJyb3JbdmFsaWRhdGlvbkVycm9yXSAodXNlZCBmb3IgZm9ybXMpLFxuICAgIC8vIHdoZXJlIHNldHRpbmcvdW5zZXR0aW5nIG9ubHkgaW5jcmVtZW50cy9kZWNyZW1lbnRzIHRoZSB2YWx1ZSxcbiAgICAvLyBhbmQgZG9lcyBub3QgcmVwbGFjZSBpdC5cbiAgICB2YXIgY29tYmluZWRTdGF0ZTtcbiAgICBpZiAoY3RybC4kcGVuZGluZyAmJiBjdHJsLiRwZW5kaW5nW3ZhbGlkYXRpb25FcnJvcktleV0pIHtcbiAgICAgIGNvbWJpbmVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIGlmIChjdHJsLiRlcnJvclt2YWxpZGF0aW9uRXJyb3JLZXldKSB7XG4gICAgICBjb21iaW5lZFN0YXRlID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChjdHJsLiQkc3VjY2Vzc1t2YWxpZGF0aW9uRXJyb3JLZXldKSB7XG4gICAgICBjb21iaW5lZFN0YXRlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tYmluZWRTdGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgdG9nZ2xlVmFsaWRhdGlvbkNzcyh2YWxpZGF0aW9uRXJyb3JLZXksIGNvbWJpbmVkU3RhdGUpO1xuICAgIGN0cmwuJCRwYXJlbnRGb3JtLiRzZXRWYWxpZGl0eSh2YWxpZGF0aW9uRXJyb3JLZXksIGNvbWJpbmVkU3RhdGUsIGN0cmwpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQW5kU2V0KG5hbWUsIHZhbHVlLCBjb250cm9sbGVyKSB7XG4gICAgaWYgKCFjdHJsW25hbWVdKSB7XG4gICAgICBjdHJsW25hbWVdID0ge307XG4gICAgfVxuICAgIHNldChjdHJsW25hbWVdLCB2YWx1ZSwgY29udHJvbGxlcik7XG4gIH1cblxuICBmdW5jdGlvbiB1bnNldEFuZENsZWFudXAobmFtZSwgdmFsdWUsIGNvbnRyb2xsZXIpIHtcbiAgICBpZiAoY3RybFtuYW1lXSkge1xuICAgICAgdW5zZXQoY3RybFtuYW1lXSwgdmFsdWUsIGNvbnRyb2xsZXIpO1xuICAgIH1cbiAgICBpZiAoaXNPYmplY3RFbXB0eShjdHJsW25hbWVdKSkge1xuICAgICAgY3RybFtuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjYWNoZWRUb2dnbGVDbGFzcyhjbGFzc05hbWUsIHN3aXRjaFZhbHVlKSB7XG4gICAgaWYgKHN3aXRjaFZhbHVlICYmICFjbGFzc0NhY2hlW2NsYXNzTmFtZV0pIHtcbiAgICAgICRhbmltYXRlLmFkZENsYXNzKCRlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgY2xhc3NDYWNoZVtjbGFzc05hbWVdID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKCFzd2l0Y2hWYWx1ZSAmJiBjbGFzc0NhY2hlW2NsYXNzTmFtZV0pIHtcbiAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKCRlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgY2xhc3NDYWNoZVtjbGFzc05hbWVdID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG9nZ2xlVmFsaWRhdGlvbkNzcyh2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQpIHtcbiAgICB2YWxpZGF0aW9uRXJyb3JLZXkgPSB2YWxpZGF0aW9uRXJyb3JLZXkgPyAnLScgKyBzbmFrZV9jYXNlKHZhbGlkYXRpb25FcnJvcktleSwgJy0nKSA6ICcnO1xuXG4gICAgY2FjaGVkVG9nZ2xlQ2xhc3MoVkFMSURfQ0xBU1MgKyB2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQgPT09IHRydWUpO1xuICAgIGNhY2hlZFRvZ2dsZUNsYXNzKElOVkFMSURfQ0xBU1MgKyB2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQgPT09IGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICBpZiAob2JqKSB7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ05vbkJpbmRhYmxlXG4gKiBAcmVzdHJpY3QgQUNcbiAqIEBwcmlvcml0eSAxMDAwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nTm9uQmluZGFibGVgIGRpcmVjdGl2ZSB0ZWxscyBBbmd1bGFyIG5vdCB0byBjb21waWxlIG9yIGJpbmQgdGhlIGNvbnRlbnRzIG9mIHRoZSBjdXJyZW50XG4gKiBET00gZWxlbWVudC4gVGhpcyBpcyB1c2VmdWwgaWYgdGhlIGVsZW1lbnQgY29udGFpbnMgd2hhdCBhcHBlYXJzIHRvIGJlIEFuZ3VsYXIgZGlyZWN0aXZlcyBhbmRcbiAqIGJpbmRpbmdzIGJ1dCB3aGljaCBzaG91bGQgYmUgaWdub3JlZCBieSBBbmd1bGFyLiBUaGlzIGNvdWxkIGJlIHRoZSBjYXNlIGlmIHlvdSBoYXZlIGEgc2l0ZSB0aGF0XG4gKiBkaXNwbGF5cyBzbmlwcGV0cyBvZiBjb2RlLCBmb3IgaW5zdGFuY2UuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKlxuICogQGV4YW1wbGVcbiAqIEluIHRoaXMgZXhhbXBsZSB0aGVyZSBhcmUgdHdvIGxvY2F0aW9ucyB3aGVyZSBhIHNpbXBsZSBpbnRlcnBvbGF0aW9uIGJpbmRpbmcgKGB7e319YCkgaXMgcHJlc2VudCxcbiAqIGJ1dCB0aGUgb25lIHdyYXBwZWQgaW4gYG5nTm9uQmluZGFibGVgIGlzIGxlZnQgYWxvbmUuXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxkaXY+Tm9ybWFsOiB7ezEgKyAyfX08L2Rpdj5cbiAgICAgICAgPGRpdiBuZy1ub24tYmluZGFibGU+SWdub3JlZDoge3sxICsgMn19PC9kaXY+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1ub24tYmluZGFibGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJzEgKyAyJykpLmdldFRleHQoKSkudG9Db250YWluKCczJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudC5hbGwoYnkuY3NzKCdkaXYnKSkubGFzdCgpLmdldFRleHQoKSkudG9NYXRjaCgvMSBcXCsgMi8pO1xuICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nTm9uQmluZGFibGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7IHRlcm1pbmFsOiB0cnVlLCBwcmlvcml0eTogMTAwMCB9KTtcblxuLyogZ2xvYmFsIGpxTGl0ZVJlbW92ZSAqL1xuXG52YXIgbmdPcHRpb25zTWluRXJyID0gbWluRXJyKCduZ09wdGlvbnMnKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ09wdGlvbnNcbiAqIEByZXN0cmljdCBBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhlIGBuZ09wdGlvbnNgIGF0dHJpYnV0ZSBjYW4gYmUgdXNlZCB0byBkeW5hbWljYWxseSBnZW5lcmF0ZSBhIGxpc3Qgb2YgYDxvcHRpb24+YFxuICogZWxlbWVudHMgZm9yIHRoZSBgPHNlbGVjdD5gIGVsZW1lbnQgdXNpbmcgdGhlIGFycmF5IG9yIG9iamVjdCBvYnRhaW5lZCBieSBldmFsdWF0aW5nIHRoZVxuICogYG5nT3B0aW9uc2AgY29tcHJlaGVuc2lvbiBleHByZXNzaW9uLlxuICpcbiAqIEluIG1hbnkgY2FzZXMsIGBuZ1JlcGVhdGAgY2FuIGJlIHVzZWQgb24gYDxvcHRpb24+YCBlbGVtZW50cyBpbnN0ZWFkIG9mIGBuZ09wdGlvbnNgIHRvIGFjaGlldmUgYVxuICogc2ltaWxhciByZXN1bHQuIEhvd2V2ZXIsIGBuZ09wdGlvbnNgIHByb3ZpZGVzIHNvbWUgYmVuZWZpdHMgc3VjaCBhcyByZWR1Y2luZyBtZW1vcnkgYW5kXG4gKiBpbmNyZWFzaW5nIHNwZWVkIGJ5IG5vdCBjcmVhdGluZyBhIG5ldyBzY29wZSBmb3IgZWFjaCByZXBlYXRlZCBpbnN0YW5jZSwgYXMgd2VsbCBhcyBwcm92aWRpbmdcbiAqIG1vcmUgZmxleGliaWxpdHkgaW4gaG93IHRoZSBgPHNlbGVjdD5gJ3MgbW9kZWwgaXMgYXNzaWduZWQgdmlhIHRoZSBgc2VsZWN0YCAqKmBhc2AqKiBwYXJ0IG9mIHRoZVxuICogY29tcHJlaGVuc2lvbiBleHByZXNzaW9uLiBgbmdPcHRpb25zYCBzaG91bGQgYmUgdXNlZCB3aGVuIHRoZSBgPHNlbGVjdD5gIG1vZGVsIG5lZWRzIHRvIGJlIGJvdW5kXG4gKiAgdG8gYSBub24tc3RyaW5nIHZhbHVlLiBUaGlzIGlzIGJlY2F1c2UgYW4gb3B0aW9uIGVsZW1lbnQgY2FuIG9ubHkgYmUgYm91bmQgdG8gc3RyaW5nIHZhbHVlcyBhdFxuICogcHJlc2VudC5cbiAqXG4gKiBXaGVuIGFuIGl0ZW0gaW4gdGhlIGA8c2VsZWN0PmAgbWVudSBpcyBzZWxlY3RlZCwgdGhlIGFycmF5IGVsZW1lbnQgb3Igb2JqZWN0IHByb3BlcnR5XG4gKiByZXByZXNlbnRlZCBieSB0aGUgc2VsZWN0ZWQgb3B0aW9uIHdpbGwgYmUgYm91bmQgdG8gdGhlIG1vZGVsIGlkZW50aWZpZWQgYnkgdGhlIGBuZ01vZGVsYFxuICogZGlyZWN0aXZlLlxuICpcbiAqIE9wdGlvbmFsbHksIGEgc2luZ2xlIGhhcmQtY29kZWQgYDxvcHRpb24+YCBlbGVtZW50LCB3aXRoIHRoZSB2YWx1ZSBzZXQgdG8gYW4gZW1wdHkgc3RyaW5nLCBjYW5cbiAqIGJlIG5lc3RlZCBpbnRvIHRoZSBgPHNlbGVjdD5gIGVsZW1lbnQuIFRoaXMgZWxlbWVudCB3aWxsIHRoZW4gcmVwcmVzZW50IHRoZSBgbnVsbGAgb3IgXCJub3Qgc2VsZWN0ZWRcIlxuICogb3B0aW9uLiBTZWUgZXhhbXBsZSBiZWxvdyBmb3IgZGVtb25zdHJhdGlvbi5cbiAqXG4gKiAjIyBDb21wbGV4IE1vZGVscyAob2JqZWN0cyBvciBjb2xsZWN0aW9ucylcbiAqXG4gKiBCeSBkZWZhdWx0LCBgbmdNb2RlbGAgd2F0Y2hlcyB0aGUgbW9kZWwgYnkgcmVmZXJlbmNlLCBub3QgdmFsdWUuIFRoaXMgaXMgaW1wb3J0YW50IHRvIGtub3cgd2hlblxuICogYmluZGluZyB0aGUgc2VsZWN0IHRvIGEgbW9kZWwgdGhhdCBpcyBhbiBvYmplY3Qgb3IgYSBjb2xsZWN0aW9uLlxuICpcbiAqIE9uZSBpc3N1ZSBvY2N1cnMgaWYgeW91IHdhbnQgdG8gcHJlc2VsZWN0IGFuIG9wdGlvbi4gRm9yIGV4YW1wbGUsIGlmIHlvdSBzZXRcbiAqIHRoZSBtb2RlbCB0byBhbiBvYmplY3QgdGhhdCBpcyBlcXVhbCB0byBhbiBvYmplY3QgaW4geW91ciBjb2xsZWN0aW9uLCBgbmdPcHRpb25zYCB3b24ndCBiZSBhYmxlIHRvIHNldCB0aGUgc2VsZWN0aW9uLFxuICogYmVjYXVzZSB0aGUgb2JqZWN0cyBhcmUgbm90IGlkZW50aWNhbC4gU28gYnkgZGVmYXVsdCwgeW91IHNob3VsZCBhbHdheXMgcmVmZXJlbmNlIHRoZSBpdGVtIGluIHlvdXIgY29sbGVjdGlvblxuICogZm9yIHByZXNlbGVjdGlvbnMsIGUuZy46IGAkc2NvcGUuc2VsZWN0ZWQgPSAkc2NvcGUuY29sbGVjdGlvblszXWAuXG4gKlxuICogQW5vdGhlciBzb2x1dGlvbiBpcyB0byB1c2UgYSBgdHJhY2sgYnlgIGNsYXVzZSwgYmVjYXVzZSB0aGVuIGBuZ09wdGlvbnNgIHdpbGwgdHJhY2sgdGhlIGlkZW50aXR5XG4gKiBvZiB0aGUgaXRlbSBub3QgYnkgcmVmZXJlbmNlLCBidXQgYnkgdGhlIHJlc3VsdCBvZiB0aGUgYHRyYWNrIGJ5YCBleHByZXNzaW9uLiBGb3IgZXhhbXBsZSwgaWYgeW91clxuICogY29sbGVjdGlvbiBpdGVtcyBoYXZlIGFuIGlkIHByb3BlcnR5LCB5b3Ugd291bGQgYHRyYWNrIGJ5IGl0ZW0uaWRgLlxuICpcbiAqIEEgZGlmZmVyZW50IGlzc3VlIHdpdGggb2JqZWN0cyBvciBjb2xsZWN0aW9ucyBpcyB0aGF0IG5nTW9kZWwgd29uJ3QgZGV0ZWN0IGlmIGFuIG9iamVjdCBwcm9wZXJ0eSBvclxuICogYSBjb2xsZWN0aW9uIGl0ZW0gY2hhbmdlcy4gRm9yIHRoYXQgcmVhc29uLCBgbmdPcHRpb25zYCBhZGRpdGlvbmFsbHkgd2F0Y2hlcyB0aGUgbW9kZWwgdXNpbmdcbiAqIGAkd2F0Y2hDb2xsZWN0aW9uYCwgd2hlbiB0aGUgZXhwcmVzc2lvbiBjb250YWlucyBhIGB0cmFjayBieWAgY2xhdXNlIG9yIHRoZSB0aGUgc2VsZWN0IGhhcyB0aGUgYG11bHRpcGxlYCBhdHRyaWJ1dGUuXG4gKiBUaGlzIGFsbG93cyBuZ09wdGlvbnMgdG8gdHJpZ2dlciBhIHJlLXJlbmRlcmluZyBvZiB0aGUgb3B0aW9ucyBldmVuIGlmIHRoZSBhY3R1YWwgb2JqZWN0L2NvbGxlY3Rpb25cbiAqIGhhcyBub3QgY2hhbmdlZCBpZGVudGl0eSwgYnV0IG9ubHkgYSBwcm9wZXJ0eSBvbiB0aGUgb2JqZWN0IG9yIGFuIGl0ZW0gaW4gdGhlIGNvbGxlY3Rpb24gY2hhbmdlcy5cbiAqXG4gKiBOb3RlIHRoYXQgYCR3YXRjaENvbGxlY3Rpb25gIGRvZXMgYSBzaGFsbG93IGNvbXBhcmlzb24gb2YgdGhlIHByb3BlcnRpZXMgb2YgdGhlIG9iamVjdCAob3IgdGhlIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uXG4gKiBpZiB0aGUgbW9kZWwgaXMgYW4gYXJyYXkpLiBUaGlzIG1lYW5zIHRoYXQgY2hhbmdpbmcgYSBwcm9wZXJ0eSBkZWVwZXIgdGhhbiB0aGUgZmlyc3QgbGV2ZWwgaW5zaWRlIHRoZVxuICogb2JqZWN0L2NvbGxlY3Rpb24gd2lsbCBub3QgdHJpZ2dlciBhIHJlLXJlbmRlcmluZy5cbiAqXG4gKiAjIyBgc2VsZWN0YCAqKmBhc2AqKlxuICpcbiAqIFVzaW5nIGBzZWxlY3RgICoqYGFzYCoqIHdpbGwgYmluZCB0aGUgcmVzdWx0IG9mIHRoZSBgc2VsZWN0YCBleHByZXNzaW9uIHRvIHRoZSBtb2RlbCwgYnV0XG4gKiB0aGUgdmFsdWUgb2YgdGhlIGA8c2VsZWN0PmAgYW5kIGA8b3B0aW9uPmAgaHRtbCBlbGVtZW50cyB3aWxsIGJlIGVpdGhlciB0aGUgaW5kZXggKGZvciBhcnJheSBkYXRhIHNvdXJjZXMpXG4gKiBvciBwcm9wZXJ0eSBuYW1lIChmb3Igb2JqZWN0IGRhdGEgc291cmNlcykgb2YgdGhlIHZhbHVlIHdpdGhpbiB0aGUgY29sbGVjdGlvbi4gSWYgYSAqKmB0cmFjayBieWAqKiBleHByZXNzaW9uXG4gKiBpcyB1c2VkLCB0aGUgcmVzdWx0IG9mIHRoYXQgZXhwcmVzc2lvbiB3aWxsIGJlIHNldCBhcyB0aGUgdmFsdWUgb2YgdGhlIGBvcHRpb25gIGFuZCBgc2VsZWN0YCBlbGVtZW50cy5cbiAqXG4gKlxuICogIyMjIGBzZWxlY3RgICoqYGFzYCoqIGFuZCAqKmB0cmFjayBieWAqKlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiBCZSBjYXJlZnVsIHdoZW4gdXNpbmcgYHNlbGVjdGAgKipgYXNgKiogYW5kICoqYHRyYWNrIGJ5YCoqIGluIHRoZSBzYW1lIGV4cHJlc3Npb24uXG4gKiA8L2Rpdj5cbiAqXG4gKiBHaXZlbiB0aGlzIGFycmF5IG9mIGl0ZW1zIG9uIHRoZSAkc2NvcGU6XG4gKlxuICogYGBganNcbiAqICRzY29wZS5pdGVtcyA9IFt7XG4gKiAgIGlkOiAxLFxuICogICBsYWJlbDogJ2FMYWJlbCcsXG4gKiAgIHN1Ykl0ZW06IHsgbmFtZTogJ2FTdWJJdGVtJyB9XG4gKiB9LCB7XG4gKiAgIGlkOiAyLFxuICogICBsYWJlbDogJ2JMYWJlbCcsXG4gKiAgIHN1Ykl0ZW06IHsgbmFtZTogJ2JTdWJJdGVtJyB9XG4gKiB9XTtcbiAqIGBgYFxuICpcbiAqIFRoaXMgd2lsbCB3b3JrOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxzZWxlY3Qgbmctb3B0aW9ucz1cIml0ZW0gYXMgaXRlbS5sYWJlbCBmb3IgaXRlbSBpbiBpdGVtcyB0cmFjayBieSBpdGVtLmlkXCIgbmctbW9kZWw9XCJzZWxlY3RlZFwiPjwvc2VsZWN0PlxuICogYGBgXG4gKiBgYGBqc1xuICogJHNjb3BlLnNlbGVjdGVkID0gJHNjb3BlLml0ZW1zWzBdO1xuICogYGBgXG4gKlxuICogYnV0IHRoaXMgd2lsbCBub3Qgd29yazpcbiAqXG4gKiBgYGBodG1sXG4gKiA8c2VsZWN0IG5nLW9wdGlvbnM9XCJpdGVtLnN1Ykl0ZW0gYXMgaXRlbS5sYWJlbCBmb3IgaXRlbSBpbiBpdGVtcyB0cmFjayBieSBpdGVtLmlkXCIgbmctbW9kZWw9XCJzZWxlY3RlZFwiPjwvc2VsZWN0PlxuICogYGBgXG4gKiBgYGBqc1xuICogJHNjb3BlLnNlbGVjdGVkID0gJHNjb3BlLml0ZW1zWzBdLnN1Ykl0ZW07XG4gKiBgYGBcbiAqXG4gKiBJbiBib3RoIGV4YW1wbGVzLCB0aGUgKipgdHJhY2sgYnlgKiogZXhwcmVzc2lvbiBpcyBhcHBsaWVkIHN1Y2Nlc3NmdWxseSB0byBlYWNoIGBpdGVtYCBpbiB0aGVcbiAqIGBpdGVtc2AgYXJyYXkuIEJlY2F1c2UgdGhlIHNlbGVjdGVkIG9wdGlvbiBoYXMgYmVlbiBzZXQgcHJvZ3JhbW1hdGljYWxseSBpbiB0aGUgY29udHJvbGxlciwgdGhlXG4gKiAqKmB0cmFjayBieWAqKiBleHByZXNzaW9uIGlzIGFsc28gYXBwbGllZCB0byB0aGUgYG5nTW9kZWxgIHZhbHVlLiBJbiB0aGUgZmlyc3QgZXhhbXBsZSwgdGhlXG4gKiBgbmdNb2RlbGAgdmFsdWUgaXMgYGl0ZW1zWzBdYCBhbmQgdGhlICoqYHRyYWNrIGJ5YCoqIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGBpdGVtc1swXS5pZGAgd2l0aFxuICogbm8gaXNzdWUuIEluIHRoZSBzZWNvbmQgZXhhbXBsZSwgdGhlIGBuZ01vZGVsYCB2YWx1ZSBpcyBgaXRlbXNbMF0uc3ViSXRlbWAgYW5kIHRoZSAqKmB0cmFjayBieWAqKlxuICogZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYGl0ZW1zWzBdLnN1Ykl0ZW0uaWRgICh3aGljaCBpcyB1bmRlZmluZWQpLiBBcyBhIHJlc3VsdCwgdGhlIG1vZGVsIHZhbHVlXG4gKiBpcyBub3QgbWF0Y2hlZCBhZ2FpbnN0IGFueSBgPG9wdGlvbj5gIGFuZCB0aGUgYDxzZWxlY3Q+YCBhcHBlYXJzIGFzIGhhdmluZyBubyBzZWxlY3RlZCB2YWx1ZS5cbiAqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBUaGUgY29udHJvbCBpcyBjb25zaWRlcmVkIHZhbGlkIG9ubHkgaWYgdmFsdWUgaXMgZW50ZXJlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICogQHBhcmFtIHtjb21wcmVoZW5zaW9uX2V4cHJlc3Npb249fSBuZ09wdGlvbnMgaW4gb25lIG9mIHRoZSBmb2xsb3dpbmcgZm9ybXM6XG4gKlxuICogICAqIGZvciBhcnJheSBkYXRhIHNvdXJjZXM6XG4gKiAgICAgKiBgbGFiZWxgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWBcbiAqICAgICAqIGBzZWxlY3RgICoqYGFzYCoqIGBsYWJlbGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YFxuICogICAgICogYGxhYmVsYCAqKmBncm91cCBieWAqKiBgZ3JvdXBgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWBcbiAqICAgICAqIGBsYWJlbGAgKipgZGlzYWJsZSB3aGVuYCoqIGBkaXNhYmxlYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgXG4gKiAgICAgKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YCAqKmB0cmFjayBieWAqKiBgdHJhY2tleHByYFxuICogICAgICogYGxhYmVsYCAqKmBkaXNhYmxlIHdoZW5gKiogYGRpc2FibGVgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWAgKipgdHJhY2sgYnlgKiogYHRyYWNrZXhwcmBcbiAqICAgICAqIGBsYWJlbGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YCB8IG9yZGVyQnk6YG9yZGVyZXhwcmAgKipgdHJhY2sgYnlgKiogYHRyYWNrZXhwcmBcbiAqICAgICAgICAoZm9yIGluY2x1ZGluZyBhIGZpbHRlciB3aXRoIGB0cmFjayBieWApXG4gKiAgICogZm9yIG9iamVjdCBkYXRhIHNvdXJjZXM6XG4gKiAgICAgKiBgbGFiZWxgICoqYGZvciAoYCoqYGtleWAgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBmb3IgKGAqKmBrZXlgICoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAqICAgICAqIGBsYWJlbGAgKipgZ3JvdXAgYnlgKiogYGdyb3VwYCAqKmBmb3IgKGAqKmBrZXlgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICogICAgICogYGxhYmVsYCAqKmBkaXNhYmxlIHdoZW5gKiogYGRpc2FibGVgICoqYGZvciAoYCoqYGtleWAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgXG4gKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGBcbiAqICAgICAgICAgKipgZm9yYCBgKGAqKmBrZXlgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBkaXNhYmxlIHdoZW5gKiogYGRpc2FibGVgXG4gKiAgICAgICAgICoqYGZvcmAgYChgKipga2V5YCoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAqXG4gKiBXaGVyZTpcbiAqXG4gKiAgICogYGFycmF5YCAvIGBvYmplY3RgOiBhbiBleHByZXNzaW9uIHdoaWNoIGV2YWx1YXRlcyB0byBhbiBhcnJheSAvIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiAgICogYHZhbHVlYDogbG9jYWwgdmFyaWFibGUgd2hpY2ggd2lsbCByZWZlciB0byBlYWNoIGl0ZW0gaW4gdGhlIGBhcnJheWAgb3IgZWFjaCBwcm9wZXJ0eSB2YWx1ZVxuICogICAgICBvZiBgb2JqZWN0YCBkdXJpbmcgaXRlcmF0aW9uLlxuICogICAqIGBrZXlgOiBsb2NhbCB2YXJpYWJsZSB3aGljaCB3aWxsIHJlZmVyIHRvIGEgcHJvcGVydHkgbmFtZSBpbiBgb2JqZWN0YCBkdXJpbmcgaXRlcmF0aW9uLlxuICogICAqIGBsYWJlbGA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgdGhlIGxhYmVsIGZvciBgPG9wdGlvbj5gIGVsZW1lbnQuIFRoZVxuICogICAgIGBleHByZXNzaW9uYCB3aWxsIG1vc3QgbGlrZWx5IHJlZmVyIHRvIHRoZSBgdmFsdWVgIHZhcmlhYmxlIChlLmcuIGB2YWx1ZS5wcm9wZXJ0eU5hbWVgKS5cbiAqICAgKiBgc2VsZWN0YDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSBib3VuZCB0byB0aGUgbW9kZWwgb2YgdGhlIHBhcmVudCBgPHNlbGVjdD5gXG4gKiAgICAgIGVsZW1lbnQuIElmIG5vdCBzcGVjaWZpZWQsIGBzZWxlY3RgIGV4cHJlc3Npb24gd2lsbCBkZWZhdWx0IHRvIGB2YWx1ZWAuXG4gKiAgICogYGdyb3VwYDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSB1c2VkIHRvIGdyb3VwIG9wdGlvbnMgdXNpbmcgdGhlIGA8b3B0Z3JvdXA+YFxuICogICAgICBET00gZWxlbWVudC5cbiAqICAgKiBgZGlzYWJsZWA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgdXNlZCB0byBkaXNhYmxlIHRoZSByZW5kZXJlZCBgPG9wdGlvbj5gXG4gKiAgICAgIGVsZW1lbnQuIFJldHVybiBgdHJ1ZWAgdG8gZGlzYWJsZS5cbiAqICAgKiBgdHJhY2tleHByYDogVXNlZCB3aGVuIHdvcmtpbmcgd2l0aCBhbiBhcnJheSBvZiBvYmplY3RzLiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlXG4gKiAgICAgIHVzZWQgdG8gaWRlbnRpZnkgdGhlIG9iamVjdHMgaW4gdGhlIGFycmF5LiBUaGUgYHRyYWNrZXhwcmAgd2lsbCBtb3N0IGxpa2VseSByZWZlciB0byB0aGVcbiAqICAgICBgdmFsdWVgIHZhcmlhYmxlIChlLmcuIGB2YWx1ZS5wcm9wZXJ0eU5hbWVgKS4gV2l0aCB0aGlzIHRoZSBzZWxlY3Rpb24gaXMgcHJlc2VydmVkXG4gKiAgICAgIGV2ZW4gd2hlbiB0aGUgb3B0aW9ucyBhcmUgcmVjcmVhdGVkIChlLmcuIHJlbG9hZGVkIGZyb20gdGhlIHNlcnZlcikuXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBtb2R1bGU9XCJzZWxlY3RFeGFtcGxlXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8c2NyaXB0PlxuICAgICAgICBhbmd1bGFyLm1vZHVsZSgnc2VsZWN0RXhhbXBsZScsIFtdKVxuICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUuY29sb3JzID0gW1xuICAgICAgICAgICAgICB7bmFtZTonYmxhY2snLCBzaGFkZTonZGFyayd9LFxuICAgICAgICAgICAgICB7bmFtZTond2hpdGUnLCBzaGFkZTonbGlnaHQnLCBub3RBbk9wdGlvbjogdHJ1ZX0sXG4gICAgICAgICAgICAgIHtuYW1lOidyZWQnLCBzaGFkZTonZGFyayd9LFxuICAgICAgICAgICAgICB7bmFtZTonYmx1ZScsIHNoYWRlOidkYXJrJywgbm90QW5PcHRpb246IHRydWV9LFxuICAgICAgICAgICAgICB7bmFtZToneWVsbG93Jywgc2hhZGU6J2xpZ2h0Jywgbm90QW5PcHRpb246IGZhbHNlfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICRzY29wZS5teUNvbG9yID0gJHNjb3BlLmNvbG9yc1syXTsgLy8gcmVkXG4gICAgICAgICAgfV0pO1xuICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICA8dWw+XG4gICAgICAgICAgICA8bGkgbmctcmVwZWF0PVwiY29sb3IgaW4gY29sb3JzXCI+XG4gICAgICAgICAgICAgIDxsYWJlbD5OYW1lOiA8aW5wdXQgbmctbW9kZWw9XCJjb2xvci5uYW1lXCI+PC9sYWJlbD5cbiAgICAgICAgICAgICAgPGxhYmVsPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNvbG9yLm5vdEFuT3B0aW9uXCI+IERpc2FibGVkPzwvbGFiZWw+XG4gICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJjb2xvcnMuc3BsaWNlKCRpbmRleCwgMSlcIiBhcmlhLWxhYmVsPVwiUmVtb3ZlXCI+WDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImNvbG9ycy5wdXNoKHt9KVwiPmFkZDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICA8L3VsPlxuICAgICAgICAgIDxoci8+XG4gICAgICAgICAgPGxhYmVsPkNvbG9yIChudWxsIG5vdCBhbGxvd2VkKTpcbiAgICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJteUNvbG9yXCIgbmctb3B0aW9ucz1cImNvbG9yLm5hbWUgZm9yIGNvbG9yIGluIGNvbG9yc1wiPjwvc2VsZWN0PlxuICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICA8bGFiZWw+Q29sb3IgKG51bGwgYWxsb3dlZCk6XG4gICAgICAgICAgPHNwYW4gIGNsYXNzPVwibnVsbGFibGVcIj5cbiAgICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJteUNvbG9yXCIgbmctb3B0aW9ucz1cImNvbG9yLm5hbWUgZm9yIGNvbG9yIGluIGNvbG9yc1wiPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+LS0gY2hvb3NlIGNvbG9yIC0tPC9vcHRpb24+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICA8L3NwYW4+PC9sYWJlbD48YnIvPlxuXG4gICAgICAgICAgPGxhYmVsPkNvbG9yIGdyb3VwZWQgYnkgc2hhZGU6XG4gICAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwibXlDb2xvclwiIG5nLW9wdGlvbnM9XCJjb2xvci5uYW1lIGdyb3VwIGJ5IGNvbG9yLnNoYWRlIGZvciBjb2xvciBpbiBjb2xvcnNcIj5cbiAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgIDwvbGFiZWw+PGJyLz5cblxuICAgICAgICAgIDxsYWJlbD5Db2xvciBncm91cGVkIGJ5IHNoYWRlLCB3aXRoIHNvbWUgZGlzYWJsZWQ6XG4gICAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwibXlDb2xvclwiXG4gICAgICAgICAgICAgICAgICBuZy1vcHRpb25zPVwiY29sb3IubmFtZSBncm91cCBieSBjb2xvci5zaGFkZSBkaXNhYmxlIHdoZW4gY29sb3Iubm90QW5PcHRpb24gZm9yIGNvbG9yIGluIGNvbG9yc1wiPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9sYWJlbD48YnIvPlxuXG5cblxuICAgICAgICAgIFNlbGVjdCA8YnV0dG9uIG5nLWNsaWNrPVwibXlDb2xvciA9IHsgbmFtZTonbm90IGluIGxpc3QnLCBzaGFkZTogJ290aGVyJyB9XCI+Ym9ndXM8L2J1dHRvbj4uXG4gICAgICAgICAgPGJyLz5cbiAgICAgICAgICA8aHIvPlxuICAgICAgICAgIEN1cnJlbnRseSBzZWxlY3RlZDoge3sge3NlbGVjdGVkX2NvbG9yOm15Q29sb3J9IH19XG4gICAgICAgICAgPGRpdiBzdHlsZT1cImJvcmRlcjpzb2xpZCAxcHggYmxhY2s7IGhlaWdodDoyMHB4XCJcbiAgICAgICAgICAgICAgIG5nLXN0eWxlPVwieydiYWNrZ3JvdW5kLWNvbG9yJzpteUNvbG9yLm5hbWV9XCI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1vcHRpb25zJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3tzZWxlY3RlZF9jb2xvcjpteUNvbG9yfScpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJ3JlZCcpO1xuICAgICAgICAgICBlbGVtZW50LmFsbChieS5tb2RlbCgnbXlDb2xvcicpKS5maXJzdCgpLmNsaWNrKCk7XG4gICAgICAgICAgIGVsZW1lbnQuYWxsKGJ5LmNzcygnc2VsZWN0W25nLW1vZGVsPVwibXlDb2xvclwiXSBvcHRpb24nKSkuZmlyc3QoKS5jbGljaygpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd7c2VsZWN0ZWRfY29sb3I6bXlDb2xvcn0nKSkuZ2V0VGV4dCgpKS50b01hdGNoKCdibGFjaycpO1xuICAgICAgICAgICBlbGVtZW50KGJ5LmNzcygnLm51bGxhYmxlIHNlbGVjdFtuZy1tb2RlbD1cIm15Q29sb3JcIl0nKSkuY2xpY2soKTtcbiAgICAgICAgICAgZWxlbWVudC5hbGwoYnkuY3NzKCcubnVsbGFibGUgc2VsZWN0W25nLW1vZGVsPVwibXlDb2xvclwiXSBvcHRpb24nKSkuZmlyc3QoKS5jbGljaygpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd7c2VsZWN0ZWRfY29sb3I6bXlDb2xvcn0nKSkuZ2V0VGV4dCgpKS50b01hdGNoKCdudWxsJyk7XG4gICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cblxuLy8ganNoaW50IG1heGxlbjogZmFsc2Vcbi8vICAgICAgICAgICAgICAgICAgICAgLy8wMDAwMTExMTExMTExMTAwMDAwMDAwMDAwMjIyMjIyMjIyMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDMzMzMzMzMzMzMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDQ0NDQ0NDQ0NDQwMDAwMDAwMDAwMDAwNTU1NTU1NTU1NTU1NTU1MDAwMDAwMDAwNjY2NjY2NjY2NjY2NjY2MDAwMDAwMDc3Nzc3Nzc3Nzc3Nzc3NzAwMDAwMDAwMDAwMDAwMDg4ODg4ODg4ODgwMDAwMDAwMDAwMDAwMDAwMDAwOTk5OTk5OTk5OVxudmFyIE5HX09QVElPTlNfUkVHRVhQID0gL15cXHMqKFtcXHNcXFNdKz8pKD86XFxzK2FzXFxzKyhbXFxzXFxTXSs/KSk/KD86XFxzK2dyb3VwXFxzK2J5XFxzKyhbXFxzXFxTXSs/KSk/KD86XFxzK2Rpc2FibGVcXHMrd2hlblxccysoW1xcc1xcU10rPykpP1xccytmb3JcXHMrKD86KFtcXCRcXHddW1xcJFxcd10qKXwoPzpcXChcXHMqKFtcXCRcXHddW1xcJFxcd10qKVxccyosXFxzKihbXFwkXFx3XVtcXCRcXHddKilcXHMqXFwpKSlcXHMraW5cXHMrKFtcXHNcXFNdKz8pKD86XFxzK3RyYWNrXFxzK2J5XFxzKyhbXFxzXFxTXSs/KSk/JC87XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAxOiB2YWx1ZSBleHByZXNzaW9uICh2YWx1ZUZuKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMjogbGFiZWwgZXhwcmVzc2lvbiAoZGlzcGxheUZuKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMzogZ3JvdXAgYnkgZXhwcmVzc2lvbiAoZ3JvdXBCeUZuKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gNDogZGlzYWJsZSB3aGVuIGV4cHJlc3Npb24gKGRpc2FibGVXaGVuRm4pXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA1OiBhcnJheSBpdGVtIHZhcmlhYmxlIG5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDY6IG9iamVjdCBpdGVtIGtleSB2YXJpYWJsZSBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA3OiBvYmplY3QgaXRlbSB2YWx1ZSB2YXJpYWJsZSBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA4OiBjb2xsZWN0aW9uIGV4cHJlc3Npb25cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDk6IHRyYWNrIGJ5IGV4cHJlc3Npb25cbi8vIGpzaGludCBtYXhsZW46IDEwMFxuXG5cbnZhciBuZ09wdGlvbnNEaXJlY3RpdmUgPSBbJyRjb21waWxlJywgJyRwYXJzZScsIGZ1bmN0aW9uKCRjb21waWxlLCAkcGFyc2UpIHtcblxuICBmdW5jdGlvbiBwYXJzZU9wdGlvbnNFeHByZXNzaW9uKG9wdGlvbnNFeHAsIHNlbGVjdEVsZW1lbnQsIHNjb3BlKSB7XG5cbiAgICB2YXIgbWF0Y2ggPSBvcHRpb25zRXhwLm1hdGNoKE5HX09QVElPTlNfUkVHRVhQKTtcbiAgICBpZiAoIShtYXRjaCkpIHtcbiAgICAgIHRocm93IG5nT3B0aW9uc01pbkVycignaWV4cCcsXG4gICAgICAgIFwiRXhwZWN0ZWQgZXhwcmVzc2lvbiBpbiBmb3JtIG9mIFwiICtcbiAgICAgICAgXCInX3NlbGVjdF8gKGFzIF9sYWJlbF8pPyBmb3IgKF9rZXlfLCk/X3ZhbHVlXyBpbiBfY29sbGVjdGlvbl8nXCIgK1xuICAgICAgICBcIiBidXQgZ290ICd7MH0nLiBFbGVtZW50OiB7MX1cIixcbiAgICAgICAgb3B0aW9uc0V4cCwgc3RhcnRpbmdUYWcoc2VsZWN0RWxlbWVudCkpO1xuICAgIH1cblxuICAgIC8vIEV4dHJhY3QgdGhlIHBhcnRzIGZyb20gdGhlIG5nT3B0aW9ucyBleHByZXNzaW9uXG5cbiAgICAvLyBUaGUgdmFyaWFibGUgbmFtZSBmb3IgdGhlIHZhbHVlIG9mIHRoZSBpdGVtIGluIHRoZSBjb2xsZWN0aW9uXG4gICAgdmFyIHZhbHVlTmFtZSA9IG1hdGNoWzVdIHx8IG1hdGNoWzddO1xuICAgIC8vIFRoZSB2YXJpYWJsZSBuYW1lIGZvciB0aGUga2V5IG9mIHRoZSBpdGVtIGluIHRoZSBjb2xsZWN0aW9uXG4gICAgdmFyIGtleU5hbWUgPSBtYXRjaFs2XTtcblxuICAgIC8vIEFuIGV4cHJlc3Npb24gdGhhdCBnZW5lcmF0ZXMgdGhlIHZpZXdWYWx1ZSBmb3IgYW4gb3B0aW9uIGlmIHRoZXJlIGlzIGEgbGFiZWwgZXhwcmVzc2lvblxuICAgIHZhciBzZWxlY3RBcyA9IC8gYXMgLy50ZXN0KG1hdGNoWzBdKSAmJiBtYXRjaFsxXTtcbiAgICAvLyBBbiBleHByZXNzaW9uIHRoYXQgaXMgdXNlZCB0byB0cmFjayB0aGUgaWQgb2YgZWFjaCBvYmplY3QgaW4gdGhlIG9wdGlvbnMgY29sbGVjdGlvblxuICAgIHZhciB0cmFja0J5ID0gbWF0Y2hbOV07XG4gICAgLy8gQW4gZXhwcmVzc2lvbiB0aGF0IGdlbmVyYXRlcyB0aGUgdmlld1ZhbHVlIGZvciBhbiBvcHRpb24gaWYgdGhlcmUgaXMgbm8gbGFiZWwgZXhwcmVzc2lvblxuICAgIHZhciB2YWx1ZUZuID0gJHBhcnNlKG1hdGNoWzJdID8gbWF0Y2hbMV0gOiB2YWx1ZU5hbWUpO1xuICAgIHZhciBzZWxlY3RBc0ZuID0gc2VsZWN0QXMgJiYgJHBhcnNlKHNlbGVjdEFzKTtcbiAgICB2YXIgdmlld1ZhbHVlRm4gPSBzZWxlY3RBc0ZuIHx8IHZhbHVlRm47XG4gICAgdmFyIHRyYWNrQnlGbiA9IHRyYWNrQnkgJiYgJHBhcnNlKHRyYWNrQnkpO1xuXG4gICAgLy8gR2V0IHRoZSB2YWx1ZSBieSB3aGljaCB3ZSBhcmUgZ29pbmcgdG8gdHJhY2sgdGhlIG9wdGlvblxuICAgIC8vIGlmIHdlIGhhdmUgYSB0cmFja0ZuIHRoZW4gdXNlIHRoYXQgKHBhc3Npbmcgc2NvcGUgYW5kIGxvY2FscylcbiAgICAvLyBvdGhlcndpc2UganVzdCBoYXNoIHRoZSBnaXZlbiB2aWV3VmFsdWVcbiAgICB2YXIgZ2V0VHJhY2tCeVZhbHVlRm4gPSB0cmFja0J5ID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHZhbHVlLCBsb2NhbHMpIHsgcmV0dXJuIHRyYWNrQnlGbihzY29wZSwgbG9jYWxzKTsgfSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRIYXNoT2ZWYWx1ZSh2YWx1ZSkgeyByZXR1cm4gaGFzaEtleSh2YWx1ZSk7IH07XG4gICAgdmFyIGdldFRyYWNrQnlWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIHJldHVybiBnZXRUcmFja0J5VmFsdWVGbih2YWx1ZSwgZ2V0TG9jYWxzKHZhbHVlLCBrZXkpKTtcbiAgICB9O1xuXG4gICAgdmFyIGRpc3BsYXlGbiA9ICRwYXJzZShtYXRjaFsyXSB8fCBtYXRjaFsxXSk7XG4gICAgdmFyIGdyb3VwQnlGbiA9ICRwYXJzZShtYXRjaFszXSB8fCAnJyk7XG4gICAgdmFyIGRpc2FibGVXaGVuRm4gPSAkcGFyc2UobWF0Y2hbNF0gfHwgJycpO1xuICAgIHZhciB2YWx1ZXNGbiA9ICRwYXJzZShtYXRjaFs4XSk7XG5cbiAgICB2YXIgbG9jYWxzID0ge307XG4gICAgdmFyIGdldExvY2FscyA9IGtleU5hbWUgPyBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICBsb2NhbHNba2V5TmFtZV0gPSBrZXk7XG4gICAgICBsb2NhbHNbdmFsdWVOYW1lXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIGxvY2FscztcbiAgICB9IDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGxvY2Fsc1t2YWx1ZU5hbWVdID0gdmFsdWU7XG4gICAgICByZXR1cm4gbG9jYWxzO1xuICAgIH07XG5cblxuICAgIGZ1bmN0aW9uIE9wdGlvbihzZWxlY3RWYWx1ZSwgdmlld1ZhbHVlLCBsYWJlbCwgZ3JvdXAsIGRpc2FibGVkKSB7XG4gICAgICB0aGlzLnNlbGVjdFZhbHVlID0gc2VsZWN0VmFsdWU7XG4gICAgICB0aGlzLnZpZXdWYWx1ZSA9IHZpZXdWYWx1ZTtcbiAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcbiAgICAgIHRoaXMuZ3JvdXAgPSBncm91cDtcbiAgICAgIHRoaXMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRPcHRpb25WYWx1ZXNLZXlzKG9wdGlvblZhbHVlcykge1xuICAgICAgdmFyIG9wdGlvblZhbHVlc0tleXM7XG5cbiAgICAgIGlmICgha2V5TmFtZSAmJiBpc0FycmF5TGlrZShvcHRpb25WYWx1ZXMpKSB7XG4gICAgICAgIG9wdGlvblZhbHVlc0tleXMgPSBvcHRpb25WYWx1ZXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpZiBvYmplY3QsIGV4dHJhY3Qga2V5cywgaW4gZW51bWVyYXRpb24gb3JkZXIsIHVuc29ydGVkXG4gICAgICAgIG9wdGlvblZhbHVlc0tleXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaXRlbUtleSBpbiBvcHRpb25WYWx1ZXMpIHtcbiAgICAgICAgICBpZiAob3B0aW9uVmFsdWVzLmhhc093blByb3BlcnR5KGl0ZW1LZXkpICYmIGl0ZW1LZXkuY2hhckF0KDApICE9PSAnJCcpIHtcbiAgICAgICAgICAgIG9wdGlvblZhbHVlc0tleXMucHVzaChpdGVtS2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvcHRpb25WYWx1ZXNLZXlzO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0cmFja0J5OiB0cmFja0J5LFxuICAgICAgZ2V0VHJhY2tCeVZhbHVlOiBnZXRUcmFja0J5VmFsdWUsXG4gICAgICBnZXRXYXRjaGFibGVzOiAkcGFyc2UodmFsdWVzRm4sIGZ1bmN0aW9uKG9wdGlvblZhbHVlcykge1xuICAgICAgICAvLyBDcmVhdGUgYSBjb2xsZWN0aW9uIG9mIHRoaW5ncyB0aGF0IHdlIHdvdWxkIGxpa2UgdG8gd2F0Y2ggKHdhdGNoZWRBcnJheSlcbiAgICAgICAgLy8gc28gdGhhdCB0aGV5IGNhbiBhbGwgYmUgd2F0Y2hlZCB1c2luZyBhIHNpbmdsZSAkd2F0Y2hDb2xsZWN0aW9uXG4gICAgICAgIC8vIHRoYXQgb25seSBydW5zIHRoZSBoYW5kbGVyIG9uY2UgaWYgYW55dGhpbmcgY2hhbmdlc1xuICAgICAgICB2YXIgd2F0Y2hlZEFycmF5ID0gW107XG4gICAgICAgIG9wdGlvblZhbHVlcyA9IG9wdGlvblZhbHVlcyB8fCBbXTtcblxuICAgICAgICB2YXIgb3B0aW9uVmFsdWVzS2V5cyA9IGdldE9wdGlvblZhbHVlc0tleXMob3B0aW9uVmFsdWVzKTtcbiAgICAgICAgdmFyIG9wdGlvblZhbHVlc0xlbmd0aCA9IG9wdGlvblZhbHVlc0tleXMubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgb3B0aW9uVmFsdWVzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgdmFyIGtleSA9IChvcHRpb25WYWx1ZXMgPT09IG9wdGlvblZhbHVlc0tleXMpID8gaW5kZXggOiBvcHRpb25WYWx1ZXNLZXlzW2luZGV4XTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBvcHRpb25WYWx1ZXNba2V5XTtcblxuICAgICAgICAgIHZhciBsb2NhbHMgPSBnZXRMb2NhbHMob3B0aW9uVmFsdWVzW2tleV0sIGtleSk7XG4gICAgICAgICAgdmFyIHNlbGVjdFZhbHVlID0gZ2V0VHJhY2tCeVZhbHVlRm4ob3B0aW9uVmFsdWVzW2tleV0sIGxvY2Fscyk7XG4gICAgICAgICAgd2F0Y2hlZEFycmF5LnB1c2goc2VsZWN0VmFsdWUpO1xuXG4gICAgICAgICAgLy8gT25seSBuZWVkIHRvIHdhdGNoIHRoZSBkaXNwbGF5Rm4gaWYgdGhlcmUgaXMgYSBzcGVjaWZpYyBsYWJlbCBleHByZXNzaW9uXG4gICAgICAgICAgaWYgKG1hdGNoWzJdIHx8IG1hdGNoWzFdKSB7XG4gICAgICAgICAgICB2YXIgbGFiZWwgPSBkaXNwbGF5Rm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgICB3YXRjaGVkQXJyYXkucHVzaChsYWJlbCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gT25seSBuZWVkIHRvIHdhdGNoIHRoZSBkaXNhYmxlV2hlbkZuIGlmIHRoZXJlIGlzIGEgc3BlY2lmaWMgZGlzYWJsZSBleHByZXNzaW9uXG4gICAgICAgICAgaWYgKG1hdGNoWzRdKSB7XG4gICAgICAgICAgICB2YXIgZGlzYWJsZVdoZW4gPSBkaXNhYmxlV2hlbkZuKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgICAgd2F0Y2hlZEFycmF5LnB1c2goZGlzYWJsZVdoZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2F0Y2hlZEFycmF5O1xuICAgICAgfSksXG5cbiAgICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBvcHRpb25JdGVtcyA9IFtdO1xuICAgICAgICB2YXIgc2VsZWN0VmFsdWVNYXAgPSB7fTtcblxuICAgICAgICAvLyBUaGUgb3B0aW9uIHZhbHVlcyB3ZXJlIGFscmVhZHkgY29tcHV0ZWQgaW4gdGhlIGBnZXRXYXRjaGFibGVzYCBmbixcbiAgICAgICAgLy8gd2hpY2ggbXVzdCBoYXZlIGJlZW4gY2FsbGVkIHRvIHRyaWdnZXIgYGdldE9wdGlvbnNgXG4gICAgICAgIHZhciBvcHRpb25WYWx1ZXMgPSB2YWx1ZXNGbihzY29wZSkgfHwgW107XG4gICAgICAgIHZhciBvcHRpb25WYWx1ZXNLZXlzID0gZ2V0T3B0aW9uVmFsdWVzS2V5cyhvcHRpb25WYWx1ZXMpO1xuICAgICAgICB2YXIgb3B0aW9uVmFsdWVzTGVuZ3RoID0gb3B0aW9uVmFsdWVzS2V5cy5sZW5ndGg7XG5cbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IG9wdGlvblZhbHVlc0xlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIHZhciBrZXkgPSAob3B0aW9uVmFsdWVzID09PSBvcHRpb25WYWx1ZXNLZXlzKSA/IGluZGV4IDogb3B0aW9uVmFsdWVzS2V5c1tpbmRleF07XG4gICAgICAgICAgdmFyIHZhbHVlID0gb3B0aW9uVmFsdWVzW2tleV07XG4gICAgICAgICAgdmFyIGxvY2FscyA9IGdldExvY2Fscyh2YWx1ZSwga2V5KTtcbiAgICAgICAgICB2YXIgdmlld1ZhbHVlID0gdmlld1ZhbHVlRm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgdmFyIHNlbGVjdFZhbHVlID0gZ2V0VHJhY2tCeVZhbHVlRm4odmlld1ZhbHVlLCBsb2NhbHMpO1xuICAgICAgICAgIHZhciBsYWJlbCA9IGRpc3BsYXlGbihzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICB2YXIgZ3JvdXAgPSBncm91cEJ5Rm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgdmFyIGRpc2FibGVkID0gZGlzYWJsZVdoZW5GbihzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICB2YXIgb3B0aW9uSXRlbSA9IG5ldyBPcHRpb24oc2VsZWN0VmFsdWUsIHZpZXdWYWx1ZSwgbGFiZWwsIGdyb3VwLCBkaXNhYmxlZCk7XG5cbiAgICAgICAgICBvcHRpb25JdGVtcy5wdXNoKG9wdGlvbkl0ZW0pO1xuICAgICAgICAgIHNlbGVjdFZhbHVlTWFwW3NlbGVjdFZhbHVlXSA9IG9wdGlvbkl0ZW07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGl0ZW1zOiBvcHRpb25JdGVtcyxcbiAgICAgICAgICBzZWxlY3RWYWx1ZU1hcDogc2VsZWN0VmFsdWVNYXAsXG4gICAgICAgICAgZ2V0T3B0aW9uRnJvbVZpZXdWYWx1ZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3RWYWx1ZU1hcFtnZXRUcmFja0J5VmFsdWUodmFsdWUpXTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGdldFZpZXdWYWx1ZUZyb21PcHRpb246IGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgICAgLy8gSWYgdGhlIHZpZXdWYWx1ZSBjb3VsZCBiZSBhbiBvYmplY3QgdGhhdCBtYXkgYmUgbXV0YXRlZCBieSB0aGUgYXBwbGljYXRpb24sXG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIG1ha2UgYSBjb3B5IGFuZCBub3QgcmV0dXJuIHRoZSByZWZlcmVuY2UgdG8gdGhlIHZhbHVlIG9uIHRoZSBvcHRpb24uXG4gICAgICAgICAgICByZXR1cm4gdHJhY2tCeSA/IGFuZ3VsYXIuY29weShvcHRpb24udmlld1ZhbHVlKSA6IG9wdGlvbi52aWV3VmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuXG4gIC8vIHdlIGNhbid0IGp1c3QganFMaXRlKCc8b3B0aW9uPicpIHNpbmNlIGpxTGl0ZSBpcyBub3Qgc21hcnQgZW5vdWdoXG4gIC8vIHRvIGNyZWF0ZSBpdCBpbiA8c2VsZWN0PiBhbmQgSUUgYmFyZnMgb3RoZXJ3aXNlLlxuICB2YXIgb3B0aW9uVGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKSxcbiAgICAgIG9wdEdyb3VwVGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRncm91cCcpO1xuXG5cbiAgICBmdW5jdGlvbiBuZ09wdGlvbnNQb3N0TGluayhzY29wZSwgc2VsZWN0RWxlbWVudCwgYXR0ciwgY3RybHMpIHtcblxuICAgICAgLy8gaWYgbmdNb2RlbCBpcyBub3QgZGVmaW5lZCwgd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZ1xuICAgICAgdmFyIG5nTW9kZWxDdHJsID0gY3RybHNbMV07XG4gICAgICBpZiAoIW5nTW9kZWxDdHJsKSByZXR1cm47XG5cbiAgICAgIHZhciBzZWxlY3RDdHJsID0gY3RybHNbMF07XG4gICAgICB2YXIgbXVsdGlwbGUgPSBhdHRyLm11bHRpcGxlO1xuXG4gICAgICAvLyBUaGUgZW1wdHlPcHRpb24gYWxsb3dzIHRoZSBhcHBsaWNhdGlvbiBkZXZlbG9wZXIgdG8gcHJvdmlkZSB0aGVpciBvd24gY3VzdG9tIFwiZW1wdHlcIlxuICAgICAgLy8gb3B0aW9uIHdoZW4gdGhlIHZpZXdWYWx1ZSBkb2VzIG5vdCBtYXRjaCBhbnkgb2YgdGhlIG9wdGlvbiB2YWx1ZXMuXG4gICAgICB2YXIgZW1wdHlPcHRpb247XG4gICAgICBmb3IgKHZhciBpID0gMCwgY2hpbGRyZW4gPSBzZWxlY3RFbGVtZW50LmNoaWxkcmVuKCksIGlpID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBpZiAoY2hpbGRyZW5baV0udmFsdWUgPT09ICcnKSB7XG4gICAgICAgICAgZW1wdHlPcHRpb24gPSBjaGlsZHJlbi5lcShpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgcHJvdmlkZWRFbXB0eU9wdGlvbiA9ICEhZW1wdHlPcHRpb247XG5cbiAgICAgIHZhciB1bmtub3duT3B0aW9uID0ganFMaXRlKG9wdGlvblRlbXBsYXRlLmNsb25lTm9kZShmYWxzZSkpO1xuICAgICAgdW5rbm93bk9wdGlvbi52YWwoJz8nKTtcblxuICAgICAgdmFyIG9wdGlvbnM7XG4gICAgICB2YXIgbmdPcHRpb25zID0gcGFyc2VPcHRpb25zRXhwcmVzc2lvbihhdHRyLm5nT3B0aW9ucywgc2VsZWN0RWxlbWVudCwgc2NvcGUpO1xuXG5cbiAgICAgIHZhciByZW5kZXJFbXB0eU9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXByb3ZpZGVkRW1wdHlPcHRpb24pIHtcbiAgICAgICAgICBzZWxlY3RFbGVtZW50LnByZXBlbmQoZW1wdHlPcHRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHNlbGVjdEVsZW1lbnQudmFsKCcnKTtcbiAgICAgICAgZW1wdHlPcHRpb24ucHJvcCgnc2VsZWN0ZWQnLCB0cnVlKTsgLy8gbmVlZGVkIGZvciBJRVxuICAgICAgICBlbXB0eU9wdGlvbi5hdHRyKCdzZWxlY3RlZCcsIHRydWUpO1xuICAgICAgfTtcblxuICAgICAgdmFyIHJlbW92ZUVtcHR5T3B0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghcHJvdmlkZWRFbXB0eU9wdGlvbikge1xuICAgICAgICAgIGVtcHR5T3B0aW9uLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG5cbiAgICAgIHZhciByZW5kZXJVbmtub3duT3B0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGVjdEVsZW1lbnQucHJlcGVuZCh1bmtub3duT3B0aW9uKTtcbiAgICAgICAgc2VsZWN0RWxlbWVudC52YWwoJz8nKTtcbiAgICAgICAgdW5rbm93bk9wdGlvbi5wcm9wKCdzZWxlY3RlZCcsIHRydWUpOyAvLyBuZWVkZWQgZm9yIElFXG4gICAgICAgIHVua25vd25PcHRpb24uYXR0cignc2VsZWN0ZWQnLCB0cnVlKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciByZW1vdmVVbmtub3duT3B0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHVua25vd25PcHRpb24ucmVtb3ZlKCk7XG4gICAgICB9O1xuXG4gICAgICAvLyBVcGRhdGUgdGhlIGNvbnRyb2xsZXIgbWV0aG9kcyBmb3IgbXVsdGlwbGUgc2VsZWN0YWJsZSBvcHRpb25zXG4gICAgICBpZiAoIW11bHRpcGxlKSB7XG5cbiAgICAgICAgc2VsZWN0Q3RybC53cml0ZVZhbHVlID0gZnVuY3Rpb24gd3JpdGVOZ09wdGlvbnNWYWx1ZSh2YWx1ZSkge1xuICAgICAgICAgIHZhciBvcHRpb24gPSBvcHRpb25zLmdldE9wdGlvbkZyb21WaWV3VmFsdWUodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKG9wdGlvbiAmJiAhb3B0aW9uLmRpc2FibGVkKSB7XG4gICAgICAgICAgICBpZiAoc2VsZWN0RWxlbWVudFswXS52YWx1ZSAhPT0gb3B0aW9uLnNlbGVjdFZhbHVlKSB7XG4gICAgICAgICAgICAgIHJlbW92ZVVua25vd25PcHRpb24oKTtcbiAgICAgICAgICAgICAgcmVtb3ZlRW1wdHlPcHRpb24oKTtcblxuICAgICAgICAgICAgICBzZWxlY3RFbGVtZW50WzBdLnZhbHVlID0gb3B0aW9uLnNlbGVjdFZhbHVlO1xuICAgICAgICAgICAgICBvcHRpb24uZWxlbWVudC5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgIG9wdGlvbi5lbGVtZW50LnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCAnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHByb3ZpZGVkRW1wdHlPcHRpb24pIHtcbiAgICAgICAgICAgICAgcmVtb3ZlVW5rbm93bk9wdGlvbigpO1xuICAgICAgICAgICAgICByZW5kZXJFbXB0eU9wdGlvbigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVtb3ZlRW1wdHlPcHRpb24oKTtcbiAgICAgICAgICAgICAgcmVuZGVyVW5rbm93bk9wdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBzZWxlY3RDdHJsLnJlYWRWYWx1ZSA9IGZ1bmN0aW9uIHJlYWROZ09wdGlvbnNWYWx1ZSgpIHtcblxuICAgICAgICAgIHZhciBzZWxlY3RlZE9wdGlvbiA9IG9wdGlvbnMuc2VsZWN0VmFsdWVNYXBbc2VsZWN0RWxlbWVudC52YWwoKV07XG5cbiAgICAgICAgICBpZiAoc2VsZWN0ZWRPcHRpb24gJiYgIXNlbGVjdGVkT3B0aW9uLmRpc2FibGVkKSB7XG4gICAgICAgICAgICByZW1vdmVFbXB0eU9wdGlvbigpO1xuICAgICAgICAgICAgcmVtb3ZlVW5rbm93bk9wdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZ2V0Vmlld1ZhbHVlRnJvbU9wdGlvbihzZWxlY3RlZE9wdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIElmIHdlIGFyZSB1c2luZyBgdHJhY2sgYnlgIHRoZW4gd2UgbXVzdCB3YXRjaCB0aGUgdHJhY2tlZCB2YWx1ZSBvbiB0aGUgbW9kZWxcbiAgICAgICAgLy8gc2luY2UgbmdNb2RlbCBvbmx5IHdhdGNoZXMgZm9yIG9iamVjdCBpZGVudGl0eSBjaGFuZ2VcbiAgICAgICAgaWYgKG5nT3B0aW9ucy50cmFja0J5KSB7XG4gICAgICAgICAgc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBuZ09wdGlvbnMuZ2V0VHJhY2tCeVZhbHVlKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpOyB9LFxuICAgICAgICAgICAgZnVuY3Rpb24oKSB7IG5nTW9kZWxDdHJsLiRyZW5kZXIoKTsgfVxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIHtcblxuICAgICAgICBuZ01vZGVsQ3RybC4kaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuICF2YWx1ZSB8fCB2YWx1ZS5sZW5ndGggPT09IDA7XG4gICAgICAgIH07XG5cblxuICAgICAgICBzZWxlY3RDdHJsLndyaXRlVmFsdWUgPSBmdW5jdGlvbiB3cml0ZU5nT3B0aW9uc011bHRpcGxlKHZhbHVlKSB7XG4gICAgICAgICAgb3B0aW9ucy5pdGVtcy5mb3JFYWNoKGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgICAgb3B0aW9uLmVsZW1lbnQuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgIHZhciBvcHRpb24gPSBvcHRpb25zLmdldE9wdGlvbkZyb21WaWV3VmFsdWUoaXRlbSk7XG4gICAgICAgICAgICAgIGlmIChvcHRpb24gJiYgIW9wdGlvbi5kaXNhYmxlZCkgb3B0aW9uLmVsZW1lbnQuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG5cbiAgICAgICAgc2VsZWN0Q3RybC5yZWFkVmFsdWUgPSBmdW5jdGlvbiByZWFkTmdPcHRpb25zTXVsdGlwbGUoKSB7XG4gICAgICAgICAgdmFyIHNlbGVjdGVkVmFsdWVzID0gc2VsZWN0RWxlbWVudC52YWwoKSB8fCBbXSxcbiAgICAgICAgICAgICAgc2VsZWN0aW9ucyA9IFtdO1xuXG4gICAgICAgICAgZm9yRWFjaChzZWxlY3RlZFZhbHVlcywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBvcHRpb24gPSBvcHRpb25zLnNlbGVjdFZhbHVlTWFwW3ZhbHVlXTtcbiAgICAgICAgICAgIGlmIChvcHRpb24gJiYgIW9wdGlvbi5kaXNhYmxlZCkgc2VsZWN0aW9ucy5wdXNoKG9wdGlvbnMuZ2V0Vmlld1ZhbHVlRnJvbU9wdGlvbihvcHRpb24pKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiBzZWxlY3Rpb25zO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIElmIHdlIGFyZSB1c2luZyBgdHJhY2sgYnlgIHRoZW4gd2UgbXVzdCB3YXRjaCB0aGVzZSB0cmFja2VkIHZhbHVlcyBvbiB0aGUgbW9kZWxcbiAgICAgICAgLy8gc2luY2UgbmdNb2RlbCBvbmx5IHdhdGNoZXMgZm9yIG9iamVjdCBpZGVudGl0eSBjaGFuZ2VcbiAgICAgICAgaWYgKG5nT3B0aW9ucy50cmFja0J5KSB7XG5cbiAgICAgICAgICBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5nT3B0aW9ucy5nZXRUcmFja0J5VmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgaWYgKHByb3ZpZGVkRW1wdHlPcHRpb24pIHtcblxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHJlbW92ZSBpdCBiZWZvcmUgY2FsbGluZyBzZWxlY3RFbGVtZW50LmVtcHR5KCkgYmVjYXVzZSBvdGhlcndpc2UgSUUgd2lsbFxuICAgICAgICAvLyByZW1vdmUgdGhlIGxhYmVsIGZyb20gdGhlIGVsZW1lbnQuIHd0Zj9cbiAgICAgICAgZW1wdHlPcHRpb24ucmVtb3ZlKCk7XG5cbiAgICAgICAgLy8gY29tcGlsZSB0aGUgZWxlbWVudCBzaW5jZSB0aGVyZSBtaWdodCBiZSBiaW5kaW5ncyBpbiBpdFxuICAgICAgICAkY29tcGlsZShlbXB0eU9wdGlvbikoc2NvcGUpO1xuXG4gICAgICAgIC8vIHJlbW92ZSB0aGUgY2xhc3MsIHdoaWNoIGlzIGFkZGVkIGF1dG9tYXRpY2FsbHkgYmVjYXVzZSB3ZSByZWNvbXBpbGUgdGhlIGVsZW1lbnQgYW5kIGl0XG4gICAgICAgIC8vIGJlY29tZXMgdGhlIGNvbXBpbGF0aW9uIHJvb3RcbiAgICAgICAgZW1wdHlPcHRpb24ucmVtb3ZlQ2xhc3MoJ25nLXNjb3BlJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbXB0eU9wdGlvbiA9IGpxTGl0ZShvcHRpb25UZW1wbGF0ZS5jbG9uZU5vZGUoZmFsc2UpKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2UgbmVlZCB0byBkbyB0aGlzIGhlcmUgdG8gZW5zdXJlIHRoYXQgdGhlIG9wdGlvbnMgb2JqZWN0IGlzIGRlZmluZWRcbiAgICAgIC8vIHdoZW4gd2UgZmlyc3QgaGl0IGl0IGluIHdyaXRlTmdPcHRpb25zVmFsdWVcbiAgICAgIHVwZGF0ZU9wdGlvbnMoKTtcblxuICAgICAgLy8gV2Ugd2lsbCByZS1yZW5kZXIgdGhlIG9wdGlvbiBlbGVtZW50cyBpZiB0aGUgb3B0aW9uIHZhbHVlcyBvciBsYWJlbHMgY2hhbmdlXG4gICAgICBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKG5nT3B0aW9ucy5nZXRXYXRjaGFibGVzLCB1cGRhdGVPcHRpb25zKTtcblxuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cblxuICAgICAgZnVuY3Rpb24gdXBkYXRlT3B0aW9uRWxlbWVudChvcHRpb24sIGVsZW1lbnQpIHtcbiAgICAgICAgb3B0aW9uLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICBlbGVtZW50LmRpc2FibGVkID0gb3B0aW9uLmRpc2FibGVkO1xuICAgICAgICAvLyBOT1RFOiBUaGUgbGFiZWwgbXVzdCBiZSBzZXQgYmVmb3JlIHRoZSB2YWx1ZSwgb3RoZXJ3aXNlIElFMTAvMTEvRURHRSBjcmVhdGUgdW5yZXNwb25zaXZlXG4gICAgICAgIC8vIHNlbGVjdHMgaW4gY2VydGFpbiBjaXJjdW1zdGFuY2VzIHdoZW4gbXVsdGlwbGUgc2VsZWN0cyBhcmUgbmV4dCB0byBlYWNoIG90aGVyIGFuZCBkaXNwbGF5XG4gICAgICAgIC8vIHRoZSBvcHRpb24gbGlzdCBpbiBsaXN0Ym94IHN0eWxlLCBpLmUuIHRoZSBzZWxlY3QgaXMgW211bHRpcGxlXSwgb3Igc3BlY2lmaWVzIGEgW3NpemVdLlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTEzMTQgZm9yIG1vcmUgaW5mby5cbiAgICAgICAgLy8gVGhpcyBpcyB1bmZvcnR1bmF0ZWx5IHVudGVzdGFibGUgd2l0aCB1bml0IC8gZTJlIHRlc3RzXG4gICAgICAgIGlmIChvcHRpb24ubGFiZWwgIT09IGVsZW1lbnQubGFiZWwpIHtcbiAgICAgICAgICBlbGVtZW50LmxhYmVsID0gb3B0aW9uLmxhYmVsO1xuICAgICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSBvcHRpb24ubGFiZWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbi52YWx1ZSAhPT0gZWxlbWVudC52YWx1ZSkgZWxlbWVudC52YWx1ZSA9IG9wdGlvbi5zZWxlY3RWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYWRkT3JSZXVzZUVsZW1lbnQocGFyZW50LCBjdXJyZW50LCB0eXBlLCB0ZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQ7XG4gICAgICAgIC8vIENoZWNrIHdoZXRoZXIgd2UgY2FuIHJldXNlIHRoZSBuZXh0IGVsZW1lbnRcbiAgICAgICAgaWYgKGN1cnJlbnQgJiYgbG93ZXJjYXNlKGN1cnJlbnQubm9kZU5hbWUpID09PSB0eXBlKSB7XG4gICAgICAgICAgLy8gVGhlIG5leHQgZWxlbWVudCBpcyB0aGUgcmlnaHQgdHlwZSBzbyByZXVzZSBpdFxuICAgICAgICAgIGVsZW1lbnQgPSBjdXJyZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRoZSBuZXh0IGVsZW1lbnQgaXMgbm90IHRoZSByaWdodCB0eXBlIHNvIGNyZWF0ZSBhIG5ldyBvbmVcbiAgICAgICAgICBlbGVtZW50ID0gdGVtcGxhdGVFbGVtZW50LmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgICAgaWYgKCFjdXJyZW50KSB7XG4gICAgICAgICAgICAvLyBUaGVyZSBhcmUgbm8gbW9yZSBlbGVtZW50cyBzbyBqdXN0IGFwcGVuZCBpdCB0byB0aGUgc2VsZWN0XG4gICAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRoZSBuZXh0IGVsZW1lbnQgaXMgbm90IGEgZ3JvdXAgc28gaW5zZXJ0IHRoZSBuZXcgb25lXG4gICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIGN1cnJlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgIH1cblxuXG4gICAgICBmdW5jdGlvbiByZW1vdmVFeGNlc3NFbGVtZW50cyhjdXJyZW50KSB7XG4gICAgICAgIHZhciBuZXh0O1xuICAgICAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgICAgIG5leHQgPSBjdXJyZW50Lm5leHRTaWJsaW5nO1xuICAgICAgICAgIGpxTGl0ZVJlbW92ZShjdXJyZW50KTtcbiAgICAgICAgICBjdXJyZW50ID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIGZ1bmN0aW9uIHNraXBFbXB0eUFuZFVua25vd25PcHRpb25zKGN1cnJlbnQpIHtcbiAgICAgICAgdmFyIGVtcHR5T3B0aW9uXyA9IGVtcHR5T3B0aW9uICYmIGVtcHR5T3B0aW9uWzBdO1xuICAgICAgICB2YXIgdW5rbm93bk9wdGlvbl8gPSB1bmtub3duT3B0aW9uICYmIHVua25vd25PcHRpb25bMF07XG5cbiAgICAgICAgLy8gV2UgY2Fubm90IHJlbHkgb24gdGhlIGV4dHJhY3RlZCBlbXB0eSBvcHRpb24gYmVpbmcgdGhlIHNhbWUgYXMgdGhlIGNvbXBpbGVkIGVtcHR5IG9wdGlvbixcbiAgICAgICAgLy8gYmVjYXVzZSB0aGUgY29tcGlsZWQgZW1wdHkgb3B0aW9uIG1pZ2h0IGhhdmUgYmVlbiByZXBsYWNlZCBieSBhIGNvbW1lbnQgYmVjYXVzZVxuICAgICAgICAvLyBpdCBoYWQgYW4gXCJlbGVtZW50XCIgdHJhbnNjbHVzaW9uIGRpcmVjdGl2ZSBvbiBpdCAoc3VjaCBhcyBuZ0lmKVxuICAgICAgICBpZiAoZW1wdHlPcHRpb25fIHx8IHVua25vd25PcHRpb25fKSB7XG4gICAgICAgICAgd2hpbGUgKGN1cnJlbnQgJiZcbiAgICAgICAgICAgICAgICAoY3VycmVudCA9PT0gZW1wdHlPcHRpb25fIHx8XG4gICAgICAgICAgICAgICAgY3VycmVudCA9PT0gdW5rbm93bk9wdGlvbl8gfHxcbiAgICAgICAgICAgICAgICBjdXJyZW50Lm5vZGVUeXBlID09PSBOT0RFX1RZUEVfQ09NTUVOVCB8fFxuICAgICAgICAgICAgICAgIGN1cnJlbnQudmFsdWUgPT09ICcnKSkge1xuICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdXJyZW50O1xuICAgICAgfVxuXG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMoKSB7XG5cbiAgICAgICAgdmFyIHByZXZpb3VzVmFsdWUgPSBvcHRpb25zICYmIHNlbGVjdEN0cmwucmVhZFZhbHVlKCk7XG5cbiAgICAgICAgb3B0aW9ucyA9IG5nT3B0aW9ucy5nZXRPcHRpb25zKCk7XG5cbiAgICAgICAgdmFyIGdyb3VwTWFwID0ge307XG4gICAgICAgIHZhciBjdXJyZW50RWxlbWVudCA9IHNlbGVjdEVsZW1lbnRbMF0uZmlyc3RDaGlsZDtcblxuICAgICAgICAvLyBFbnN1cmUgdGhhdCB0aGUgZW1wdHkgb3B0aW9uIGlzIGFsd2F5cyB0aGVyZSBpZiBpdCB3YXMgZXhwbGljaXRseSBwcm92aWRlZFxuICAgICAgICBpZiAocHJvdmlkZWRFbXB0eU9wdGlvbikge1xuICAgICAgICAgIHNlbGVjdEVsZW1lbnQucHJlcGVuZChlbXB0eU9wdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50RWxlbWVudCA9IHNraXBFbXB0eUFuZFVua25vd25PcHRpb25zKGN1cnJlbnRFbGVtZW50KTtcblxuICAgICAgICBvcHRpb25zLml0ZW1zLmZvckVhY2goZnVuY3Rpb24gdXBkYXRlT3B0aW9uKG9wdGlvbikge1xuICAgICAgICAgIHZhciBncm91cDtcbiAgICAgICAgICB2YXIgZ3JvdXBFbGVtZW50O1xuICAgICAgICAgIHZhciBvcHRpb25FbGVtZW50O1xuXG4gICAgICAgICAgaWYgKG9wdGlvbi5ncm91cCkge1xuXG4gICAgICAgICAgICAvLyBUaGlzIG9wdGlvbiBpcyB0byBsaXZlIGluIGEgZ3JvdXBcbiAgICAgICAgICAgIC8vIFNlZSBpZiB3ZSBoYXZlIGFscmVhZHkgY3JlYXRlZCB0aGlzIGdyb3VwXG4gICAgICAgICAgICBncm91cCA9IGdyb3VwTWFwW29wdGlvbi5ncm91cF07XG5cbiAgICAgICAgICAgIGlmICghZ3JvdXApIHtcblxuICAgICAgICAgICAgICAvLyBXZSBoYXZlIG5vdCBhbHJlYWR5IGNyZWF0ZWQgdGhpcyBncm91cFxuICAgICAgICAgICAgICBncm91cEVsZW1lbnQgPSBhZGRPclJldXNlRWxlbWVudChzZWxlY3RFbGVtZW50WzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29wdGdyb3VwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0R3JvdXBUZW1wbGF0ZSk7XG4gICAgICAgICAgICAgIC8vIE1vdmUgdG8gdGhlIG5leHQgZWxlbWVudFxuICAgICAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IGdyb3VwRWxlbWVudC5uZXh0U2libGluZztcblxuICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGxhYmVsIG9uIHRoZSBncm91cCBlbGVtZW50XG4gICAgICAgICAgICAgIGdyb3VwRWxlbWVudC5sYWJlbCA9IG9wdGlvbi5ncm91cDtcblxuICAgICAgICAgICAgICAvLyBTdG9yZSBpdCBmb3IgdXNlIGxhdGVyXG4gICAgICAgICAgICAgIGdyb3VwID0gZ3JvdXBNYXBbb3B0aW9uLmdyb3VwXSA9IHtcbiAgICAgICAgICAgICAgICBncm91cEVsZW1lbnQ6IGdyb3VwRWxlbWVudCxcbiAgICAgICAgICAgICAgICBjdXJyZW50T3B0aW9uRWxlbWVudDogZ3JvdXBFbGVtZW50LmZpcnN0Q2hpbGRcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTbyBub3cgd2UgaGF2ZSBhIGdyb3VwIGZvciB0aGlzIG9wdGlvbiB3ZSBhZGQgdGhlIG9wdGlvbiB0byB0aGUgZ3JvdXBcbiAgICAgICAgICAgIG9wdGlvbkVsZW1lbnQgPSBhZGRPclJldXNlRWxlbWVudChncm91cC5ncm91cEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAuY3VycmVudE9wdGlvbkVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29wdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uVGVtcGxhdGUpO1xuICAgICAgICAgICAgdXBkYXRlT3B0aW9uRWxlbWVudChvcHRpb24sIG9wdGlvbkVsZW1lbnQpO1xuICAgICAgICAgICAgLy8gTW92ZSB0byB0aGUgbmV4dCBlbGVtZW50XG4gICAgICAgICAgICBncm91cC5jdXJyZW50T3B0aW9uRWxlbWVudCA9IG9wdGlvbkVsZW1lbnQubmV4dFNpYmxpbmc7XG5cbiAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAvLyBUaGlzIG9wdGlvbiBpcyBub3QgaW4gYSBncm91cFxuICAgICAgICAgICAgb3B0aW9uRWxlbWVudCA9IGFkZE9yUmV1c2VFbGVtZW50KHNlbGVjdEVsZW1lbnRbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29wdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uVGVtcGxhdGUpO1xuICAgICAgICAgICAgdXBkYXRlT3B0aW9uRWxlbWVudChvcHRpb24sIG9wdGlvbkVsZW1lbnQpO1xuICAgICAgICAgICAgLy8gTW92ZSB0byB0aGUgbmV4dCBlbGVtZW50XG4gICAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IG9wdGlvbkVsZW1lbnQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuXG4gICAgICAgIC8vIE5vdyByZW1vdmUgYWxsIGV4Y2VzcyBvcHRpb25zIGFuZCBncm91cFxuICAgICAgICBPYmplY3Qua2V5cyhncm91cE1hcCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICByZW1vdmVFeGNlc3NFbGVtZW50cyhncm91cE1hcFtrZXldLmN1cnJlbnRPcHRpb25FbGVtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlbW92ZUV4Y2Vzc0VsZW1lbnRzKGN1cnJlbnRFbGVtZW50KTtcblxuICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG5cbiAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZCBkdWUgdG8gdGhlIHVwZGF0ZSB0byB0aGUgb3B0aW9uc1xuICAgICAgICBpZiAoIW5nTW9kZWxDdHJsLiRpc0VtcHR5KHByZXZpb3VzVmFsdWUpKSB7XG4gICAgICAgICAgdmFyIG5leHRWYWx1ZSA9IHNlbGVjdEN0cmwucmVhZFZhbHVlKCk7XG4gICAgICAgICAgaWYgKG5nT3B0aW9ucy50cmFja0J5ID8gIWVxdWFscyhwcmV2aW91c1ZhbHVlLCBuZXh0VmFsdWUpIDogcHJldmlvdXNWYWx1ZSAhPT0gbmV4dFZhbHVlKSB7XG4gICAgICAgICAgICBuZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKG5leHRWYWx1ZSk7XG4gICAgICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICByZXF1aXJlOiBbJ3NlbGVjdCcsICc/bmdNb2RlbCddLFxuICAgIGxpbms6IHtcbiAgICAgIHByZTogZnVuY3Rpb24gbmdPcHRpb25zUHJlTGluayhzY29wZSwgc2VsZWN0RWxlbWVudCwgYXR0ciwgY3RybHMpIHtcbiAgICAgICAgLy8gRGVhY3RpdmF0ZSB0aGUgU2VsZWN0Q29udHJvbGxlci5yZWdpc3RlciBtZXRob2QgdG8gcHJldmVudFxuICAgICAgICAvLyBvcHRpb24gZGlyZWN0aXZlcyBmcm9tIGFjY2lkZW50YWxseSByZWdpc3RlcmluZyB0aGVtc2VsdmVzXG4gICAgICAgIC8vIChhbmQgdW53YW50ZWQgJGRlc3Ryb3kgaGFuZGxlcnMgZXRjLilcbiAgICAgICAgY3RybHNbMF0ucmVnaXN0ZXJPcHRpb24gPSBub29wO1xuICAgICAgfSxcbiAgICAgIHBvc3Q6IG5nT3B0aW9uc1Bvc3RMaW5rXG4gICAgfVxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdQbHVyYWxpemVcbiAqIEByZXN0cmljdCBFQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogYG5nUGx1cmFsaXplYCBpcyBhIGRpcmVjdGl2ZSB0aGF0IGRpc3BsYXlzIG1lc3NhZ2VzIGFjY29yZGluZyB0byBlbi1VUyBsb2NhbGl6YXRpb24gcnVsZXMuXG4gKiBUaGVzZSBydWxlcyBhcmUgYnVuZGxlZCB3aXRoIGFuZ3VsYXIuanMsIGJ1dCBjYW4gYmUgb3ZlcnJpZGRlblxuICogKHNlZSB7QGxpbmsgZ3VpZGUvaTE4biBBbmd1bGFyIGkxOG59IGRldiBndWlkZSkuIFlvdSBjb25maWd1cmUgbmdQbHVyYWxpemUgZGlyZWN0aXZlXG4gKiBieSBzcGVjaWZ5aW5nIHRoZSBtYXBwaW5ncyBiZXR3ZWVuXG4gKiBbcGx1cmFsIGNhdGVnb3JpZXNdKGh0dHA6Ly91bmljb2RlLm9yZy9yZXBvcy9jbGRyLXRtcC90cnVuay9kaWZmL3N1cHBsZW1lbnRhbC9sYW5ndWFnZV9wbHVyYWxfcnVsZXMuaHRtbClcbiAqIGFuZCB0aGUgc3RyaW5ncyB0byBiZSBkaXNwbGF5ZWQuXG4gKlxuICogIyBQbHVyYWwgY2F0ZWdvcmllcyBhbmQgZXhwbGljaXQgbnVtYmVyIHJ1bGVzXG4gKiBUaGVyZSBhcmUgdHdvXG4gKiBbcGx1cmFsIGNhdGVnb3JpZXNdKGh0dHA6Ly91bmljb2RlLm9yZy9yZXBvcy9jbGRyLXRtcC90cnVuay9kaWZmL3N1cHBsZW1lbnRhbC9sYW5ndWFnZV9wbHVyYWxfcnVsZXMuaHRtbClcbiAqIGluIEFuZ3VsYXIncyBkZWZhdWx0IGVuLVVTIGxvY2FsZTogXCJvbmVcIiBhbmQgXCJvdGhlclwiLlxuICpcbiAqIFdoaWxlIGEgcGx1cmFsIGNhdGVnb3J5IG1heSBtYXRjaCBtYW55IG51bWJlcnMgKGZvciBleGFtcGxlLCBpbiBlbi1VUyBsb2NhbGUsIFwib3RoZXJcIiBjYW4gbWF0Y2hcbiAqIGFueSBudW1iZXIgdGhhdCBpcyBub3QgMSksIGFuIGV4cGxpY2l0IG51bWJlciBydWxlIGNhbiBvbmx5IG1hdGNoIG9uZSBudW1iZXIuIEZvciBleGFtcGxlLCB0aGVcbiAqIGV4cGxpY2l0IG51bWJlciBydWxlIGZvciBcIjNcIiBtYXRjaGVzIHRoZSBudW1iZXIgMy4gVGhlcmUgYXJlIGV4YW1wbGVzIG9mIHBsdXJhbCBjYXRlZ29yaWVzXG4gKiBhbmQgZXhwbGljaXQgbnVtYmVyIHJ1bGVzIHRocm91Z2hvdXQgdGhlIHJlc3Qgb2YgdGhpcyBkb2N1bWVudGF0aW9uLlxuICpcbiAqICMgQ29uZmlndXJpbmcgbmdQbHVyYWxpemVcbiAqIFlvdSBjb25maWd1cmUgbmdQbHVyYWxpemUgYnkgcHJvdmlkaW5nIDIgYXR0cmlidXRlczogYGNvdW50YCBhbmQgYHdoZW5gLlxuICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYW4gb3B0aW9uYWwgYXR0cmlidXRlLCBgb2Zmc2V0YC5cbiAqXG4gKiBUaGUgdmFsdWUgb2YgdGhlIGBjb3VudGAgYXR0cmlidXRlIGNhbiBiZSBlaXRoZXIgYSBzdHJpbmcgb3IgYW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb25cbiAqIEFuZ3VsYXIgZXhwcmVzc2lvbn07IHRoZXNlIGFyZSBldmFsdWF0ZWQgb24gdGhlIGN1cnJlbnQgc2NvcGUgZm9yIGl0cyBib3VuZCB2YWx1ZS5cbiAqXG4gKiBUaGUgYHdoZW5gIGF0dHJpYnV0ZSBzcGVjaWZpZXMgdGhlIG1hcHBpbmdzIGJldHdlZW4gcGx1cmFsIGNhdGVnb3JpZXMgYW5kIHRoZSBhY3R1YWxcbiAqIHN0cmluZyB0byBiZSBkaXNwbGF5ZWQuIFRoZSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlIHNob3VsZCBiZSBhIEpTT04gb2JqZWN0LlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gY29uZmlndXJlIG5nUGx1cmFsaXplOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxuZy1wbHVyYWxpemUgY291bnQ9XCJwZXJzb25Db3VudFwiXG4gICAgICAgICAgICAgICAgIHdoZW49XCJ7JzAnOiAnTm9ib2R5IGlzIHZpZXdpbmcuJyxcbiAqICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAnMSBwZXJzb24gaXMgdmlld2luZy4nLFxuICogICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t9IHBlb3BsZSBhcmUgdmlld2luZy4nfVwiPlxuICogPC9uZy1wbHVyYWxpemU+XG4gKmBgYFxuICpcbiAqIEluIHRoZSBleGFtcGxlLCBgXCIwOiBOb2JvZHkgaXMgdmlld2luZy5cImAgaXMgYW4gZXhwbGljaXQgbnVtYmVyIHJ1bGUuIElmIHlvdSBkaWQgbm90XG4gKiBzcGVjaWZ5IHRoaXMgcnVsZSwgMCB3b3VsZCBiZSBtYXRjaGVkIHRvIHRoZSBcIm90aGVyXCIgY2F0ZWdvcnkgYW5kIFwiMCBwZW9wbGUgYXJlIHZpZXdpbmdcIlxuICogd291bGQgYmUgc2hvd24gaW5zdGVhZCBvZiBcIk5vYm9keSBpcyB2aWV3aW5nXCIuIFlvdSBjYW4gc3BlY2lmeSBhbiBleHBsaWNpdCBudW1iZXIgcnVsZSBmb3JcbiAqIG90aGVyIG51bWJlcnMsIGZvciBleGFtcGxlIDEyLCBzbyB0aGF0IGluc3RlYWQgb2Ygc2hvd2luZyBcIjEyIHBlb3BsZSBhcmUgdmlld2luZ1wiLCB5b3UgY2FuXG4gKiBzaG93IFwiYSBkb3plbiBwZW9wbGUgYXJlIHZpZXdpbmdcIi5cbiAqXG4gKiBZb3UgY2FuIHVzZSBhIHNldCBvZiBjbG9zZWQgYnJhY2VzIChge31gKSBhcyBhIHBsYWNlaG9sZGVyIGZvciB0aGUgbnVtYmVyIHRoYXQgeW91IHdhbnQgc3Vic3RpdHV0ZWRcbiAqIGludG8gcGx1cmFsaXplZCBzdHJpbmdzLiBJbiB0aGUgcHJldmlvdXMgZXhhbXBsZSwgQW5ndWxhciB3aWxsIHJlcGxhY2UgYHt9YCB3aXRoXG4gKiA8c3BhbiBuZy1ub24tYmluZGFibGU+YHt7cGVyc29uQ291bnR9fWA8L3NwYW4+LiBUaGUgY2xvc2VkIGJyYWNlcyBge31gIGlzIGEgcGxhY2Vob2xkZXJcbiAqIGZvciA8c3BhbiBuZy1ub24tYmluZGFibGU+e3tudW1iZXJFeHByZXNzaW9ufX08L3NwYW4+LlxuICpcbiAqIElmIG5vIHJ1bGUgaXMgZGVmaW5lZCBmb3IgYSBjYXRlZ29yeSwgdGhlbiBhbiBlbXB0eSBzdHJpbmcgaXMgZGlzcGxheWVkIGFuZCBhIHdhcm5pbmcgaXMgZ2VuZXJhdGVkLlxuICogTm90ZSB0aGF0IHNvbWUgbG9jYWxlcyBkZWZpbmUgbW9yZSBjYXRlZ29yaWVzIHRoYW4gYG9uZWAgYW5kIGBvdGhlcmAuIEZvciBleGFtcGxlLCBmci1mciBkZWZpbmVzIGBmZXdgIGFuZCBgbWFueWAuXG4gKlxuICogIyBDb25maWd1cmluZyBuZ1BsdXJhbGl6ZSB3aXRoIG9mZnNldFxuICogVGhlIGBvZmZzZXRgIGF0dHJpYnV0ZSBhbGxvd3MgZnVydGhlciBjdXN0b21pemF0aW9uIG9mIHBsdXJhbGl6ZWQgdGV4dCwgd2hpY2ggY2FuIHJlc3VsdCBpblxuICogYSBiZXR0ZXIgdXNlciBleHBlcmllbmNlLiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZiB0aGUgbWVzc2FnZSBcIjQgcGVvcGxlIGFyZSB2aWV3aW5nIHRoaXMgZG9jdW1lbnRcIixcbiAqIHlvdSBtaWdodCBkaXNwbGF5IFwiSm9obiwgS2F0ZSBhbmQgMiBvdGhlcnMgYXJlIHZpZXdpbmcgdGhpcyBkb2N1bWVudFwiLlxuICogVGhlIG9mZnNldCBhdHRyaWJ1dGUgYWxsb3dzIHlvdSB0byBvZmZzZXQgYSBudW1iZXIgYnkgYW55IGRlc2lyZWQgdmFsdWUuXG4gKiBMZXQncyB0YWtlIGEgbG9vayBhdCBhbiBleGFtcGxlOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxuZy1wbHVyYWxpemUgY291bnQ9XCJwZXJzb25Db3VudFwiIG9mZnNldD0yXG4gKiAgICAgICAgICAgICAgIHdoZW49XCJ7JzAnOiAnTm9ib2R5IGlzIHZpZXdpbmcuJyxcbiAqICAgICAgICAgICAgICAgICAgICAgICcxJzogJ3t7cGVyc29uMX19IGlzIHZpZXdpbmcuJyxcbiAqICAgICAgICAgICAgICAgICAgICAgICcyJzogJ3t7cGVyc29uMX19IGFuZCB7e3BlcnNvbjJ9fSBhcmUgdmlld2luZy4nLFxuICogICAgICAgICAgICAgICAgICAgICAgJ29uZSc6ICd7e3BlcnNvbjF9fSwge3twZXJzb24yfX0gYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmcuJyxcbiAqICAgICAgICAgICAgICAgICAgICAgICdvdGhlcic6ICd7e3BlcnNvbjF9fSwge3twZXJzb24yfX0gYW5kIHt9IG90aGVyIHBlb3BsZSBhcmUgdmlld2luZy4nfVwiPlxuICogPC9uZy1wbHVyYWxpemU+XG4gKiBgYGBcbiAqXG4gKiBOb3RpY2UgdGhhdCB3ZSBhcmUgc3RpbGwgdXNpbmcgdHdvIHBsdXJhbCBjYXRlZ29yaWVzKG9uZSwgb3RoZXIpLCBidXQgd2UgYWRkZWRcbiAqIHRocmVlIGV4cGxpY2l0IG51bWJlciBydWxlcyAwLCAxIGFuZCAyLlxuICogV2hlbiBvbmUgcGVyc29uLCBwZXJoYXBzIEpvaG4sIHZpZXdzIHRoZSBkb2N1bWVudCwgXCJKb2huIGlzIHZpZXdpbmdcIiB3aWxsIGJlIHNob3duLlxuICogV2hlbiB0aHJlZSBwZW9wbGUgdmlldyB0aGUgZG9jdW1lbnQsIG5vIGV4cGxpY2l0IG51bWJlciBydWxlIGlzIGZvdW5kLCBzb1xuICogYW4gb2Zmc2V0IG9mIDIgaXMgdGFrZW4gb2ZmIDMsIGFuZCBBbmd1bGFyIHVzZXMgMSB0byBkZWNpZGUgdGhlIHBsdXJhbCBjYXRlZ29yeS5cbiAqIEluIHRoaXMgY2FzZSwgcGx1cmFsIGNhdGVnb3J5ICdvbmUnIGlzIG1hdGNoZWQgYW5kIFwiSm9obiwgTWFyeSBhbmQgb25lIG90aGVyIHBlcnNvbiBhcmUgdmlld2luZ1wiXG4gKiBpcyBzaG93bi5cbiAqXG4gKiBOb3RlIHRoYXQgd2hlbiB5b3Ugc3BlY2lmeSBvZmZzZXRzLCB5b3UgbXVzdCBwcm92aWRlIGV4cGxpY2l0IG51bWJlciBydWxlcyBmb3JcbiAqIG51bWJlcnMgZnJvbSAwIHVwIHRvIGFuZCBpbmNsdWRpbmcgdGhlIG9mZnNldC4gSWYgeW91IHVzZSBhbiBvZmZzZXQgb2YgMywgZm9yIGV4YW1wbGUsXG4gKiB5b3UgbXVzdCBwcm92aWRlIGV4cGxpY2l0IG51bWJlciBydWxlcyBmb3IgMCwgMSwgMiBhbmQgMy4gWW91IG11c3QgYWxzbyBwcm92aWRlIHBsdXJhbCBzdHJpbmdzIGZvclxuICogcGx1cmFsIGNhdGVnb3JpZXMgXCJvbmVcIiBhbmQgXCJvdGhlclwiLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfGV4cHJlc3Npb259IGNvdW50IFRoZSB2YXJpYWJsZSB0byBiZSBib3VuZCB0by5cbiAqIEBwYXJhbSB7c3RyaW5nfSB3aGVuIFRoZSBtYXBwaW5nIGJldHdlZW4gcGx1cmFsIGNhdGVnb3J5IHRvIGl0cyBjb3JyZXNwb25kaW5nIHN0cmluZ3MuXG4gKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gZGVkdWN0IGZyb20gdGhlIHRvdGFsIG51bWJlci5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG1vZHVsZT1cInBsdXJhbGl6ZUV4YW1wbGVcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3BsdXJhbGl6ZUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICRzY29wZS5wZXJzb24xID0gJ0lnb3InO1xuICAgICAgICAgICAgICAkc2NvcGUucGVyc29uMiA9ICdNaXNrbyc7XG4gICAgICAgICAgICAgICRzY29wZS5wZXJzb25Db3VudCA9IDE7XG4gICAgICAgICAgICB9XSk7XG4gICAgICAgIDwvc2NyaXB0PlxuICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgIDxsYWJlbD5QZXJzb24gMTo8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInBlcnNvbjFcIiB2YWx1ZT1cIklnb3JcIiAvPjwvbGFiZWw+PGJyLz5cbiAgICAgICAgICA8bGFiZWw+UGVyc29uIDI6PGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJwZXJzb24yXCIgdmFsdWU9XCJNaXNrb1wiIC8+PC9sYWJlbD48YnIvPlxuICAgICAgICAgIDxsYWJlbD5OdW1iZXIgb2YgUGVvcGxlOjxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwicGVyc29uQ291bnRcIiB2YWx1ZT1cIjFcIiAvPjwvbGFiZWw+PGJyLz5cblxuICAgICAgICAgIDwhLS0tIEV4YW1wbGUgd2l0aCBzaW1wbGUgcGx1cmFsaXphdGlvbiBydWxlcyBmb3IgZW4gbG9jYWxlIC0tLT5cbiAgICAgICAgICBXaXRob3V0IE9mZnNldDpcbiAgICAgICAgICA8bmctcGx1cmFsaXplIGNvdW50PVwicGVyc29uQ291bnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgd2hlbj1cInsnMCc6ICdOb2JvZHkgaXMgdmlld2luZy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAnMSBwZXJzb24gaXMgdmlld2luZy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdGhlcic6ICd7fSBwZW9wbGUgYXJlIHZpZXdpbmcuJ31cIj5cbiAgICAgICAgICA8L25nLXBsdXJhbGl6ZT48YnI+XG5cbiAgICAgICAgICA8IS0tLSBFeGFtcGxlIHdpdGggb2Zmc2V0IC0tLT5cbiAgICAgICAgICBXaXRoIE9mZnNldCgyKTpcbiAgICAgICAgICA8bmctcGx1cmFsaXplIGNvdW50PVwicGVyc29uQ291bnRcIiBvZmZzZXQ9MlxuICAgICAgICAgICAgICAgICAgICAgICAgd2hlbj1cInsnMCc6ICdOb2JvZHkgaXMgdmlld2luZy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcxJzogJ3t7cGVyc29uMX19IGlzIHZpZXdpbmcuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMic6ICd7e3BlcnNvbjF9fSBhbmQge3twZXJzb24yfX0gYXJlIHZpZXdpbmcuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQgb25lIG90aGVyIHBlcnNvbiBhcmUgdmlld2luZy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdGhlcic6ICd7e3BlcnNvbjF9fSwge3twZXJzb24yfX0gYW5kIHt9IG90aGVyIHBlb3BsZSBhcmUgdmlld2luZy4nfVwiPlxuICAgICAgICAgIDwvbmctcGx1cmFsaXplPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgaXQoJ3Nob3VsZCBzaG93IGNvcnJlY3QgcGx1cmFsaXplZCBzdHJpbmcnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgd2l0aG91dE9mZnNldCA9IGVsZW1lbnQuYWxsKGJ5LmNzcygnbmctcGx1cmFsaXplJykpLmdldCgwKTtcbiAgICAgICAgICB2YXIgd2l0aE9mZnNldCA9IGVsZW1lbnQuYWxsKGJ5LmNzcygnbmctcGx1cmFsaXplJykpLmdldCgxKTtcbiAgICAgICAgICB2YXIgY291bnRJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3BlcnNvbkNvdW50JykpO1xuXG4gICAgICAgICAgZXhwZWN0KHdpdGhvdXRPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCcxIHBlcnNvbiBpcyB2aWV3aW5nLicpO1xuICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnSWdvciBpcyB2aWV3aW5nLicpO1xuXG4gICAgICAgICAgY291bnRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIGNvdW50SW5wdXQuc2VuZEtleXMoJzAnKTtcblxuICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnTm9ib2R5IGlzIHZpZXdpbmcuJyk7XG4gICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdOb2JvZHkgaXMgdmlld2luZy4nKTtcblxuICAgICAgICAgIGNvdW50SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICBjb3VudElucHV0LnNlbmRLZXlzKCcyJyk7XG5cbiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJzIgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xuICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnSWdvciBhbmQgTWlza28gYXJlIHZpZXdpbmcuJyk7XG5cbiAgICAgICAgICBjb3VudElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgY291bnRJbnB1dC5zZW5kS2V5cygnMycpO1xuXG4gICAgICAgICAgZXhwZWN0KHdpdGhvdXRPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCczIHBlb3BsZSBhcmUgdmlld2luZy4nKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0lnb3IsIE1pc2tvIGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nLicpO1xuXG4gICAgICAgICAgY291bnRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIGNvdW50SW5wdXQuc2VuZEtleXMoJzQnKTtcblxuICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnNCBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7XG4gICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdJZ29yLCBNaXNrbyBhbmQgMiBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHNob3cgZGF0YS1ib3VuZCBuYW1lcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB3aXRoT2Zmc2V0ID0gZWxlbWVudC5hbGwoYnkuY3NzKCduZy1wbHVyYWxpemUnKSkuZ2V0KDEpO1xuICAgICAgICAgIHZhciBwZXJzb25Db3VudCA9IGVsZW1lbnQoYnkubW9kZWwoJ3BlcnNvbkNvdW50JykpO1xuICAgICAgICAgIHZhciBwZXJzb24xID0gZWxlbWVudChieS5tb2RlbCgncGVyc29uMScpKTtcbiAgICAgICAgICB2YXIgcGVyc29uMiA9IGVsZW1lbnQoYnkubW9kZWwoJ3BlcnNvbjInKSk7XG4gICAgICAgICAgcGVyc29uQ291bnQuY2xlYXIoKTtcbiAgICAgICAgICBwZXJzb25Db3VudC5zZW5kS2V5cygnNCcpO1xuICAgICAgICAgIHBlcnNvbjEuY2xlYXIoKTtcbiAgICAgICAgICBwZXJzb24xLnNlbmRLZXlzKCdEaScpO1xuICAgICAgICAgIHBlcnNvbjIuY2xlYXIoKTtcbiAgICAgICAgICBwZXJzb24yLnNlbmRLZXlzKCdWb2p0YScpO1xuICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnRGksIFZvanRhIGFuZCAyIG90aGVyIHBlb3BsZSBhcmUgdmlld2luZy4nKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdQbHVyYWxpemVEaXJlY3RpdmUgPSBbJyRsb2NhbGUnLCAnJGludGVycG9sYXRlJywgJyRsb2cnLCBmdW5jdGlvbigkbG9jYWxlLCAkaW50ZXJwb2xhdGUsICRsb2cpIHtcbiAgdmFyIEJSQUNFID0gL3t9L2csXG4gICAgICBJU19XSEVOID0gL153aGVuKE1pbnVzKT8oLispJC87XG5cbiAgcmV0dXJuIHtcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgdmFyIG51bWJlckV4cCA9IGF0dHIuY291bnQsXG4gICAgICAgICAgd2hlbkV4cCA9IGF0dHIuJGF0dHIud2hlbiAmJiBlbGVtZW50LmF0dHIoYXR0ci4kYXR0ci53aGVuKSwgLy8gd2UgaGF2ZSB7e319IGluIGF0dHJzXG4gICAgICAgICAgb2Zmc2V0ID0gYXR0ci5vZmZzZXQgfHwgMCxcbiAgICAgICAgICB3aGVucyA9IHNjb3BlLiRldmFsKHdoZW5FeHApIHx8IHt9LFxuICAgICAgICAgIHdoZW5zRXhwRm5zID0ge30sXG4gICAgICAgICAgc3RhcnRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKSxcbiAgICAgICAgICBlbmRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sKCksXG4gICAgICAgICAgYnJhY2VSZXBsYWNlbWVudCA9IHN0YXJ0U3ltYm9sICsgbnVtYmVyRXhwICsgJy0nICsgb2Zmc2V0ICsgZW5kU3ltYm9sLFxuICAgICAgICAgIHdhdGNoUmVtb3ZlciA9IGFuZ3VsYXIubm9vcCxcbiAgICAgICAgICBsYXN0Q291bnQ7XG5cbiAgICAgIGZvckVhY2goYXR0ciwgZnVuY3Rpb24oZXhwcmVzc2lvbiwgYXR0cmlidXRlTmFtZSkge1xuICAgICAgICB2YXIgdG1wTWF0Y2ggPSBJU19XSEVOLmV4ZWMoYXR0cmlidXRlTmFtZSk7XG4gICAgICAgIGlmICh0bXBNYXRjaCkge1xuICAgICAgICAgIHZhciB3aGVuS2V5ID0gKHRtcE1hdGNoWzFdID8gJy0nIDogJycpICsgbG93ZXJjYXNlKHRtcE1hdGNoWzJdKTtcbiAgICAgICAgICB3aGVuc1t3aGVuS2V5XSA9IGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyW2F0dHJpYnV0ZU5hbWVdKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBmb3JFYWNoKHdoZW5zLCBmdW5jdGlvbihleHByZXNzaW9uLCBrZXkpIHtcbiAgICAgICAgd2hlbnNFeHBGbnNba2V5XSA9ICRpbnRlcnBvbGF0ZShleHByZXNzaW9uLnJlcGxhY2UoQlJBQ0UsIGJyYWNlUmVwbGFjZW1lbnQpKTtcblxuICAgICAgfSk7XG5cbiAgICAgIHNjb3BlLiR3YXRjaChudW1iZXJFeHAsIGZ1bmN0aW9uIG5nUGx1cmFsaXplV2F0Y2hBY3Rpb24obmV3VmFsKSB7XG4gICAgICAgIHZhciBjb3VudCA9IHBhcnNlRmxvYXQobmV3VmFsKTtcbiAgICAgICAgdmFyIGNvdW50SXNOYU4gPSBpc05hTihjb3VudCk7XG5cbiAgICAgICAgaWYgKCFjb3VudElzTmFOICYmICEoY291bnQgaW4gd2hlbnMpKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhwbGljaXQgbnVtYmVyIHJ1bGUgc3VjaCBhcyAxLCAyLCAzLi4uIGlzIGRlZmluZWQsIGp1c3QgdXNlIGl0LlxuICAgICAgICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgaXQgYWdhaW5zdCBwbHVyYWxpemF0aW9uIHJ1bGVzIGluICRsb2NhbGUgc2VydmljZS5cbiAgICAgICAgICBjb3VudCA9ICRsb2NhbGUucGx1cmFsQ2F0KGNvdW50IC0gb2Zmc2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGJvdGggYGNvdW50YCBhbmQgYGxhc3RDb3VudGAgYXJlIE5hTiwgd2UgZG9uJ3QgbmVlZCB0byByZS1yZWdpc3RlciBhIHdhdGNoLlxuICAgICAgICAvLyBJbiBKUyBgTmFOICE9PSBOYU5gLCBzbyB3ZSBoYXZlIHRvIGV4bGljaXRseSBjaGVjay5cbiAgICAgICAgaWYgKChjb3VudCAhPT0gbGFzdENvdW50KSAmJiAhKGNvdW50SXNOYU4gJiYgaXNOdW1iZXIobGFzdENvdW50KSAmJiBpc05hTihsYXN0Q291bnQpKSkge1xuICAgICAgICAgIHdhdGNoUmVtb3ZlcigpO1xuICAgICAgICAgIHZhciB3aGVuRXhwRm4gPSB3aGVuc0V4cEZuc1tjb3VudF07XG4gICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHdoZW5FeHBGbikpIHtcbiAgICAgICAgICAgIGlmIChuZXdWYWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAkbG9nLmRlYnVnKFwibmdQbHVyYWxpemU6IG5vIHJ1bGUgZGVmaW5lZCBmb3IgJ1wiICsgY291bnQgKyBcIicgaW4gXCIgKyB3aGVuRXhwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdhdGNoUmVtb3ZlciA9IG5vb3A7XG4gICAgICAgICAgICB1cGRhdGVFbGVtZW50VGV4dCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3YXRjaFJlbW92ZXIgPSBzY29wZS4kd2F0Y2god2hlbkV4cEZuLCB1cGRhdGVFbGVtZW50VGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxhc3RDb3VudCA9IGNvdW50O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgZnVuY3Rpb24gdXBkYXRlRWxlbWVudFRleHQobmV3VGV4dCkge1xuICAgICAgICBlbGVtZW50LnRleHQobmV3VGV4dCB8fCAnJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdSZXBlYXRcbiAqIEBtdWx0aUVsZW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdSZXBlYXRgIGRpcmVjdGl2ZSBpbnN0YW50aWF0ZXMgYSB0ZW1wbGF0ZSBvbmNlIHBlciBpdGVtIGZyb20gYSBjb2xsZWN0aW9uLiBFYWNoIHRlbXBsYXRlXG4gKiBpbnN0YW5jZSBnZXRzIGl0cyBvd24gc2NvcGUsIHdoZXJlIHRoZSBnaXZlbiBsb29wIHZhcmlhYmxlIGlzIHNldCB0byB0aGUgY3VycmVudCBjb2xsZWN0aW9uIGl0ZW0sXG4gKiBhbmQgYCRpbmRleGAgaXMgc2V0IHRvIHRoZSBpdGVtIGluZGV4IG9yIGtleS5cbiAqXG4gKiBTcGVjaWFsIHByb3BlcnRpZXMgYXJlIGV4cG9zZWQgb24gdGhlIGxvY2FsIHNjb3BlIG9mIGVhY2ggdGVtcGxhdGUgaW5zdGFuY2UsIGluY2x1ZGluZzpcbiAqXG4gKiB8IFZhcmlhYmxlICB8IFR5cGUgICAgICAgICAgICB8IERldGFpbHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IGAkaW5kZXhgICB8IHtAdHlwZSBudW1iZXJ9ICB8IGl0ZXJhdG9yIG9mZnNldCBvZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCAoMC4ubGVuZ3RoLTEpICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IGAkZmlyc3RgICB8IHtAdHlwZSBib29sZWFufSB8IHRydWUgaWYgdGhlIHJlcGVhdGVkIGVsZW1lbnQgaXMgZmlyc3QgaW4gdGhlIGl0ZXJhdG9yLiAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IGAkbWlkZGxlYCB8IHtAdHlwZSBib29sZWFufSB8IHRydWUgaWYgdGhlIHJlcGVhdGVkIGVsZW1lbnQgaXMgYmV0d2VlbiB0aGUgZmlyc3QgYW5kIGxhc3QgaW4gdGhlIGl0ZXJhdG9yLiB8XG4gKiB8IGAkbGFzdGAgICB8IHtAdHlwZSBib29sZWFufSB8IHRydWUgaWYgdGhlIHJlcGVhdGVkIGVsZW1lbnQgaXMgbGFzdCBpbiB0aGUgaXRlcmF0b3IuICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IGAkZXZlbmAgICB8IHtAdHlwZSBib29sZWFufSB8IHRydWUgaWYgdGhlIGl0ZXJhdG9yIHBvc2l0aW9uIGAkaW5kZXhgIGlzIGV2ZW4gKG90aGVyd2lzZSBmYWxzZSkuICAgICAgICAgICB8XG4gKiB8IGAkb2RkYCAgICB8IHtAdHlwZSBib29sZWFufSB8IHRydWUgaWYgdGhlIGl0ZXJhdG9yIHBvc2l0aW9uIGAkaW5kZXhgIGlzIG9kZCAob3RoZXJ3aXNlIGZhbHNlKS4gICAgICAgICAgICB8XG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqICAgQ3JlYXRpbmcgYWxpYXNlcyBmb3IgdGhlc2UgcHJvcGVydGllcyBpcyBwb3NzaWJsZSB3aXRoIHtAbGluayBuZy5kaXJlY3RpdmU6bmdJbml0IGBuZ0luaXRgfS5cbiAqICAgVGhpcyBtYXkgYmUgdXNlZnVsIHdoZW4sIGZvciBpbnN0YW5jZSwgbmVzdGluZyBuZ1JlcGVhdHMuXG4gKiA8L2Rpdj5cbiAqXG4gKlxuICogIyBJdGVyYXRpbmcgb3ZlciBvYmplY3QgcHJvcGVydGllc1xuICpcbiAqIEl0IGlzIHBvc3NpYmxlIHRvIGdldCBgbmdSZXBlYXRgIHRvIGl0ZXJhdGUgb3ZlciB0aGUgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgdXNpbmcgdGhlIGZvbGxvd2luZ1xuICogc3ludGF4OlxuICpcbiAqIGBgYGpzXG4gKiA8ZGl2IG5nLXJlcGVhdD1cIihrZXksIHZhbHVlKSBpbiBteU9ialwiPiAuLi4gPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBZb3UgbmVlZCB0byBiZSBhd2FyZSB0aGF0IHRoZSBKYXZhU2NyaXB0IHNwZWNpZmljYXRpb24gZG9lcyBub3QgZGVmaW5lIHRoZSBvcmRlciBvZiBrZXlzXG4gKiByZXR1cm5lZCBmb3IgYW4gb2JqZWN0LiAoVG8gbWl0aWdhdGUgdGhpcyBpbiBBbmd1bGFyIDEuMyB0aGUgYG5nUmVwZWF0YCBkaXJlY3RpdmVcbiAqIHVzZWQgdG8gc29ydCB0aGUga2V5cyBhbHBoYWJldGljYWxseS4pXG4gKlxuICogVmVyc2lvbiAxLjQgcmVtb3ZlZCB0aGUgYWxwaGFiZXRpYyBzb3J0aW5nLiBXZSBub3cgcmVseSBvbiB0aGUgb3JkZXIgcmV0dXJuZWQgYnkgdGhlIGJyb3dzZXJcbiAqIHdoZW4gcnVubmluZyBgZm9yIGtleSBpbiBteU9iamAuIEl0IHNlZW1zIHRoYXQgYnJvd3NlcnMgZ2VuZXJhbGx5IGZvbGxvdyB0aGUgc3RyYXRlZ3kgb2YgcHJvdmlkaW5nXG4gKiBrZXlzIGluIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IHdlcmUgZGVmaW5lZCwgYWx0aG91Z2ggdGhlcmUgYXJlIGV4Y2VwdGlvbnMgd2hlbiBrZXlzIGFyZSBkZWxldGVkXG4gKiBhbmQgcmVpbnN0YXRlZC4gU2VlIHRoZSBbTUROIHBhZ2Ugb24gYGRlbGV0ZWAgZm9yIG1vcmUgaW5mb10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL2RlbGV0ZSNDcm9zcy1icm93c2VyX25vdGVzKS5cbiAqXG4gKiBJZiB0aGlzIGlzIG5vdCBkZXNpcmVkLCB0aGUgcmVjb21tZW5kZWQgd29ya2Fyb3VuZCBpcyB0byBjb252ZXJ0IHlvdXIgb2JqZWN0IGludG8gYW4gYXJyYXlcbiAqIHRoYXQgaXMgc29ydGVkIGludG8gdGhlIG9yZGVyIHRoYXQgeW91IHByZWZlciBiZWZvcmUgcHJvdmlkaW5nIGl0IHRvIGBuZ1JlcGVhdGAuICBZb3UgY291bGRcbiAqIGRvIHRoaXMgd2l0aCBhIGZpbHRlciBzdWNoIGFzIFt0b0FycmF5RmlsdGVyXShodHRwOi8vbmdtb2R1bGVzLm9yZy9tb2R1bGVzL2FuZ3VsYXItdG9BcnJheUZpbHRlcilcbiAqIG9yIGltcGxlbWVudCBhIGAkd2F0Y2hgIG9uIHRoZSBvYmplY3QgeW91cnNlbGYuXG4gKlxuICpcbiAqICMgVHJhY2tpbmcgYW5kIER1cGxpY2F0ZXNcbiAqXG4gKiBgbmdSZXBlYXRgIHVzZXMge0BsaW5rICRyb290U2NvcGUuU2NvcGUjJHdhdGNoQ29sbGVjdGlvbiAkd2F0Y2hDb2xsZWN0aW9ufSB0byBkZXRlY3QgY2hhbmdlcyBpblxuICogdGhlIGNvbGxlY3Rpb24uIFdoZW4gYSBjaGFuZ2UgaGFwcGVucywgbmdSZXBlYXQgdGhlbiBtYWtlcyB0aGUgY29ycmVzcG9uZGluZyBjaGFuZ2VzIHRvIHRoZSBET006XG4gKlxuICogKiBXaGVuIGFuIGl0ZW0gaXMgYWRkZWQsIGEgbmV3IGluc3RhbmNlIG9mIHRoZSB0ZW1wbGF0ZSBpcyBhZGRlZCB0byB0aGUgRE9NLlxuICogKiBXaGVuIGFuIGl0ZW0gaXMgcmVtb3ZlZCwgaXRzIHRlbXBsYXRlIGluc3RhbmNlIGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NLlxuICogKiBXaGVuIGl0ZW1zIGFyZSByZW9yZGVyZWQsIHRoZWlyIHJlc3BlY3RpdmUgdGVtcGxhdGVzIGFyZSByZW9yZGVyZWQgaW4gdGhlIERPTS5cbiAqXG4gKiBUbyBtaW5pbWl6ZSBjcmVhdGlvbiBvZiBET00gZWxlbWVudHMsIGBuZ1JlcGVhdGAgdXNlcyBhIGZ1bmN0aW9uXG4gKiB0byBcImtlZXAgdHJhY2tcIiBvZiBhbGwgaXRlbXMgaW4gdGhlIGNvbGxlY3Rpb24gYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgRE9NIGVsZW1lbnRzLlxuICogRm9yIGV4YW1wbGUsIGlmIGFuIGl0ZW0gaXMgYWRkZWQgdG8gdGhlIGNvbGxlY3Rpb24sIG5nUmVwZWF0IHdpbGwga25vdyB0aGF0IGFsbCBvdGhlciBpdGVtc1xuICogYWxyZWFkeSBoYXZlIERPTSBlbGVtZW50cywgYW5kIHdpbGwgbm90IHJlLXJlbmRlciB0aGVtLlxuICpcbiAqIFRoZSBkZWZhdWx0IHRyYWNraW5nIGZ1bmN0aW9uICh3aGljaCB0cmFja3MgaXRlbXMgYnkgdGhlaXIgaWRlbnRpdHkpIGRvZXMgbm90IGFsbG93XG4gKiBkdXBsaWNhdGUgaXRlbXMgaW4gYXJyYXlzLiBUaGlzIGlzIGJlY2F1c2Ugd2hlbiB0aGVyZSBhcmUgZHVwbGljYXRlcywgaXQgaXMgbm90IHBvc3NpYmxlXG4gKiB0byBtYWludGFpbiBhIG9uZS10by1vbmUgbWFwcGluZyBiZXR3ZWVuIGNvbGxlY3Rpb24gaXRlbXMgYW5kIERPTSBlbGVtZW50cy5cbiAqXG4gKiBJZiB5b3UgZG8gbmVlZCB0byByZXBlYXQgZHVwbGljYXRlIGl0ZW1zLCB5b3UgY2FuIHN1YnN0aXR1dGUgdGhlIGRlZmF1bHQgdHJhY2tpbmcgYmVoYXZpb3JcbiAqIHdpdGggeW91ciBvd24gdXNpbmcgdGhlIGB0cmFjayBieWAgZXhwcmVzc2lvbi5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgeW91IG1heSB0cmFjayBpdGVtcyBieSB0aGUgaW5kZXggb2YgZWFjaCBpdGVtIGluIHRoZSBjb2xsZWN0aW9uLCB1c2luZyB0aGVcbiAqIHNwZWNpYWwgc2NvcGUgcHJvcGVydHkgYCRpbmRleGA6XG4gKiBgYGBodG1sXG4gKiAgICA8ZGl2IG5nLXJlcGVhdD1cIm4gaW4gWzQyLCA0MiwgNDMsIDQzXSB0cmFjayBieSAkaW5kZXhcIj5cbiAqICAgICAge3tufX1cbiAqICAgIDwvZGl2PlxuICogYGBgXG4gKlxuICogWW91IG1heSBhbHNvIHVzZSBhcmJpdHJhcnkgZXhwcmVzc2lvbnMgaW4gYHRyYWNrIGJ5YCwgaW5jbHVkaW5nIHJlZmVyZW5jZXMgdG8gY3VzdG9tIGZ1bmN0aW9uc1xuICogb24gdGhlIHNjb3BlOlxuICogYGBgaHRtbFxuICogICAgPGRpdiBuZy1yZXBlYXQ9XCJuIGluIFs0MiwgNDIsIDQzLCA0M10gdHJhY2sgYnkgbXlUcmFja2luZ0Z1bmN0aW9uKG4pXCI+XG4gKiAgICAgIHt7bn19XG4gKiAgICA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1zdWNjZXNzXCI+XG4gKiBJZiB5b3UgYXJlIHdvcmtpbmcgd2l0aCBvYmplY3RzIHRoYXQgaGF2ZSBhbiBpZGVudGlmaWVyIHByb3BlcnR5LCB5b3Ugc2hvdWxkIHRyYWNrXG4gKiBieSB0aGUgaWRlbnRpZmllciBpbnN0ZWFkIG9mIHRoZSB3aG9sZSBvYmplY3QuIFNob3VsZCB5b3UgcmVsb2FkIHlvdXIgZGF0YSBsYXRlciwgYG5nUmVwZWF0YFxuICogd2lsbCBub3QgaGF2ZSB0byByZWJ1aWxkIHRoZSBET00gZWxlbWVudHMgZm9yIGl0ZW1zIGl0IGhhcyBhbHJlYWR5IHJlbmRlcmVkLCBldmVuIGlmIHRoZVxuICogSmF2YVNjcmlwdCBvYmplY3RzIGluIHRoZSBjb2xsZWN0aW9uIGhhdmUgYmVlbiBzdWJzdGl0dXRlZCBmb3IgbmV3IG9uZXMuIEZvciBsYXJnZSBjb2xsZWN0aW9ucyxcbiAqIHRoaXMgc2lnbmlmaW5jYW50bHkgaW1wcm92ZXMgcmVuZGVyaW5nIHBlcmZvcm1hbmNlLiBJZiB5b3UgZG9uJ3QgaGF2ZSBhIHVuaXF1ZSBpZGVudGlmaWVyLFxuICogYHRyYWNrIGJ5ICRpbmRleGAgY2FuIGFsc28gcHJvdmlkZSBhIHBlcmZvcm1hbmNlIGJvb3N0LlxuICogPC9kaXY+XG4gKiBgYGBodG1sXG4gKiAgICA8ZGl2IG5nLXJlcGVhdD1cIm1vZGVsIGluIGNvbGxlY3Rpb24gdHJhY2sgYnkgbW9kZWwuaWRcIj5cbiAqICAgICAge3ttb2RlbC5uYW1lfX1cbiAqICAgIDwvZGl2PlxuICogYGBgXG4gKlxuICogV2hlbiBubyBgdHJhY2sgYnlgIGV4cHJlc3Npb24gaXMgcHJvdmlkZWQsIGl0IGlzIGVxdWl2YWxlbnQgdG8gdHJhY2tpbmcgYnkgdGhlIGJ1aWx0LWluXG4gKiBgJGlkYCBmdW5jdGlvbiwgd2hpY2ggdHJhY2tzIGl0ZW1zIGJ5IHRoZWlyIGlkZW50aXR5OlxuICogYGBgaHRtbFxuICogICAgPGRpdiBuZy1yZXBlYXQ9XCJvYmogaW4gY29sbGVjdGlvbiB0cmFjayBieSAkaWQob2JqKVwiPlxuICogICAgICB7e29iai5wcm9wfX1cbiAqICAgIDwvZGl2PlxuICogYGBgXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBgdHJhY2sgYnlgIG11c3QgYWx3YXlzIGJlIHRoZSBsYXN0IGV4cHJlc3Npb246XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICogPGRpdiBuZy1yZXBlYXQ9XCJtb2RlbCBpbiBjb2xsZWN0aW9uIHwgb3JkZXJCeTogJ2lkJyBhcyBmaWx0ZXJlZF9yZXN1bHQgdHJhY2sgYnkgbW9kZWwuaWRcIj5cbiAqICAgICB7e21vZGVsLm5hbWV9fVxuICogPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiAjIFNwZWNpYWwgcmVwZWF0IHN0YXJ0IGFuZCBlbmQgcG9pbnRzXG4gKiBUbyByZXBlYXQgYSBzZXJpZXMgb2YgZWxlbWVudHMgaW5zdGVhZCBvZiBqdXN0IG9uZSBwYXJlbnQgZWxlbWVudCwgbmdSZXBlYXQgKGFzIHdlbGwgYXMgb3RoZXIgbmcgZGlyZWN0aXZlcykgc3VwcG9ydHMgZXh0ZW5kaW5nXG4gKiB0aGUgcmFuZ2Ugb2YgdGhlIHJlcGVhdGVyIGJ5IGRlZmluaW5nIGV4cGxpY2l0IHN0YXJ0IGFuZCBlbmQgcG9pbnRzIGJ5IHVzaW5nICoqbmctcmVwZWF0LXN0YXJ0KiogYW5kICoqbmctcmVwZWF0LWVuZCoqIHJlc3BlY3RpdmVseS5cbiAqIFRoZSAqKm5nLXJlcGVhdC1zdGFydCoqIGRpcmVjdGl2ZSB3b3JrcyB0aGUgc2FtZSBhcyAqKm5nLXJlcGVhdCoqLCBidXQgd2lsbCByZXBlYXQgYWxsIHRoZSBIVE1MIGNvZGUgKGluY2x1ZGluZyB0aGUgdGFnIGl0J3MgZGVmaW5lZCBvbilcbiAqIHVwIHRvIGFuZCBpbmNsdWRpbmcgdGhlIGVuZGluZyBIVE1MIHRhZyB3aGVyZSAqKm5nLXJlcGVhdC1lbmQqKiBpcyBwbGFjZWQuXG4gKlxuICogVGhlIGV4YW1wbGUgYmVsb3cgbWFrZXMgdXNlIG9mIHRoaXMgZmVhdHVyZTpcbiAqIGBgYGh0bWxcbiAqICAgPGhlYWRlciBuZy1yZXBlYXQtc3RhcnQ9XCJpdGVtIGluIGl0ZW1zXCI+XG4gKiAgICAgSGVhZGVyIHt7IGl0ZW0gfX1cbiAqICAgPC9oZWFkZXI+XG4gKiAgIDxkaXYgY2xhc3M9XCJib2R5XCI+XG4gKiAgICAgQm9keSB7eyBpdGVtIH19XG4gKiAgIDwvZGl2PlxuICogICA8Zm9vdGVyIG5nLXJlcGVhdC1lbmQ+XG4gKiAgICAgRm9vdGVyIHt7IGl0ZW0gfX1cbiAqICAgPC9mb290ZXI+XG4gKiBgYGBcbiAqXG4gKiBBbmQgd2l0aCBhbiBpbnB1dCBvZiB7QHR5cGUgWydBJywnQiddfSBmb3IgdGhlIGl0ZW1zIHZhcmlhYmxlIGluIHRoZSBleGFtcGxlIGFib3ZlLCB0aGUgb3V0cHV0IHdpbGwgZXZhbHVhdGUgdG86XG4gKiBgYGBodG1sXG4gKiAgIDxoZWFkZXI+XG4gKiAgICAgSGVhZGVyIEFcbiAqICAgPC9oZWFkZXI+XG4gKiAgIDxkaXYgY2xhc3M9XCJib2R5XCI+XG4gKiAgICAgQm9keSBBXG4gKiAgIDwvZGl2PlxuICogICA8Zm9vdGVyPlxuICogICAgIEZvb3RlciBBXG4gKiAgIDwvZm9vdGVyPlxuICogICA8aGVhZGVyPlxuICogICAgIEhlYWRlciBCXG4gKiAgIDwvaGVhZGVyPlxuICogICA8ZGl2IGNsYXNzPVwiYm9keVwiPlxuICogICAgIEJvZHkgQlxuICogICA8L2Rpdj5cbiAqICAgPGZvb3Rlcj5cbiAqICAgICBGb290ZXIgQlxuICogICA8L2Zvb3Rlcj5cbiAqIGBgYFxuICpcbiAqIFRoZSBjdXN0b20gc3RhcnQgYW5kIGVuZCBwb2ludHMgZm9yIG5nUmVwZWF0IGFsc28gc3VwcG9ydCBhbGwgb3RoZXIgSFRNTCBkaXJlY3RpdmUgc3ludGF4IGZsYXZvcnMgcHJvdmlkZWQgaW4gQW5ndWxhckpTIChzdWNoXG4gKiBhcyAqKmRhdGEtbmctcmVwZWF0LXN0YXJ0KiosICoqeC1uZy1yZXBlYXQtc3RhcnQqKiBhbmQgKipuZzpyZXBlYXQtc3RhcnQqKikuXG4gKlxuICogQGFuaW1hdGlvbnNcbiAqICoqLmVudGVyKiogLSB3aGVuIGEgbmV3IGl0ZW0gaXMgYWRkZWQgdG8gdGhlIGxpc3Qgb3Igd2hlbiBhbiBpdGVtIGlzIHJldmVhbGVkIGFmdGVyIGEgZmlsdGVyXG4gKlxuICogKioubGVhdmUqKiAtIHdoZW4gYW4gaXRlbSBpcyByZW1vdmVkIGZyb20gdGhlIGxpc3Qgb3Igd2hlbiBhbiBpdGVtIGlzIGZpbHRlcmVkIG91dFxuICpcbiAqICoqLm1vdmUqKiAtIHdoZW4gYW4gYWRqYWNlbnQgaXRlbSBpcyBmaWx0ZXJlZCBvdXQgY2F1c2luZyBhIHJlb3JkZXIgb3Igd2hlbiB0aGUgaXRlbSBjb250ZW50cyBhcmUgcmVvcmRlcmVkXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAc2NvcGVcbiAqIEBwcmlvcml0eSAxMDAwXG4gKiBAcGFyYW0ge3JlcGVhdF9leHByZXNzaW9ufSBuZ1JlcGVhdCBUaGUgZXhwcmVzc2lvbiBpbmRpY2F0aW5nIGhvdyB0byBlbnVtZXJhdGUgYSBjb2xsZWN0aW9uLiBUaGVzZVxuICogICBmb3JtYXRzIGFyZSBjdXJyZW50bHkgc3VwcG9ydGVkOlxuICpcbiAqICAgKiBgdmFyaWFibGUgaW4gZXhwcmVzc2lvbmAg4oCTIHdoZXJlIHZhcmlhYmxlIGlzIHRoZSB1c2VyIGRlZmluZWQgbG9vcCB2YXJpYWJsZSBhbmQgYGV4cHJlc3Npb25gXG4gKiAgICAgaXMgYSBzY29wZSBleHByZXNzaW9uIGdpdmluZyB0aGUgY29sbGVjdGlvbiB0byBlbnVtZXJhdGUuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgYWxidW0gaW4gYXJ0aXN0LmFsYnVtc2AuXG4gKlxuICogICAqIGAoa2V5LCB2YWx1ZSkgaW4gZXhwcmVzc2lvbmAg4oCTIHdoZXJlIGBrZXlgIGFuZCBgdmFsdWVgIGNhbiBiZSBhbnkgdXNlciBkZWZpbmVkIGlkZW50aWZpZXJzLFxuICogICAgIGFuZCBgZXhwcmVzc2lvbmAgaXMgdGhlIHNjb3BlIGV4cHJlc3Npb24gZ2l2aW5nIHRoZSBjb2xsZWN0aW9uIHRvIGVudW1lcmF0ZS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGAobmFtZSwgYWdlKSBpbiB7J2FkYW0nOjEwLCAnYW1hbGllJzoxMn1gLlxuICpcbiAqICAgKiBgdmFyaWFibGUgaW4gZXhwcmVzc2lvbiB0cmFjayBieSB0cmFja2luZ19leHByZXNzaW9uYCDigJMgWW91IGNhbiBhbHNvIHByb3ZpZGUgYW4gb3B0aW9uYWwgdHJhY2tpbmcgZXhwcmVzc2lvblxuICogICAgIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGFzc29jaWF0ZSB0aGUgb2JqZWN0cyBpbiB0aGUgY29sbGVjdGlvbiB3aXRoIHRoZSBET00gZWxlbWVudHMuIElmIG5vIHRyYWNraW5nIGV4cHJlc3Npb25cbiAqICAgICBpcyBzcGVjaWZpZWQsIG5nLXJlcGVhdCBhc3NvY2lhdGVzIGVsZW1lbnRzIGJ5IGlkZW50aXR5LiBJdCBpcyBhbiBlcnJvciB0byBoYXZlXG4gKiAgICAgbW9yZSB0aGFuIG9uZSB0cmFja2luZyBleHByZXNzaW9uIHZhbHVlIHJlc29sdmUgdG8gdGhlIHNhbWUga2V5LiAoVGhpcyB3b3VsZCBtZWFuIHRoYXQgdHdvIGRpc3RpbmN0IG9iamVjdHMgYXJlXG4gKiAgICAgbWFwcGVkIHRvIHRoZSBzYW1lIERPTSBlbGVtZW50LCB3aGljaCBpcyBub3QgcG9zc2libGUuKVxuICpcbiAqICAgICBOb3RlIHRoYXQgdGhlIHRyYWNraW5nIGV4cHJlc3Npb24gbXVzdCBjb21lIGxhc3QsIGFmdGVyIGFueSBmaWx0ZXJzLCBhbmQgdGhlIGFsaWFzIGV4cHJlc3Npb24uXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtc2AgaXMgZXF1aXZhbGVudCB0byBgaXRlbSBpbiBpdGVtcyB0cmFjayBieSAkaWQoaXRlbSlgLiBUaGlzIGltcGxpZXMgdGhhdCB0aGUgRE9NIGVsZW1lbnRzXG4gKiAgICAgd2lsbCBiZSBhc3NvY2lhdGVkIGJ5IGl0ZW0gaWRlbnRpdHkgaW4gdGhlIGFycmF5LlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXMgdHJhY2sgYnkgJGlkKGl0ZW0pYC4gQSBidWlsdCBpbiBgJGlkKClgIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIGFzc2lnbiBhIHVuaXF1ZVxuICogICAgIGAkJGhhc2hLZXlgIHByb3BlcnR5IHRvIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkuIFRoaXMgcHJvcGVydHkgaXMgdGhlbiB1c2VkIGFzIGEga2V5IHRvIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnRzXG4gKiAgICAgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBpdGVtIGluIHRoZSBhcnJheSBieSBpZGVudGl0eS4gTW92aW5nIHRoZSBzYW1lIG9iamVjdCBpbiBhcnJheSB3b3VsZCBtb3ZlIHRoZSBET01cbiAqICAgICBlbGVtZW50IGluIHRoZSBzYW1lIHdheSBpbiB0aGUgRE9NLlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXMgdHJhY2sgYnkgaXRlbS5pZGAgaXMgYSB0eXBpY2FsIHBhdHRlcm4gd2hlbiB0aGUgaXRlbXMgY29tZSBmcm9tIHRoZSBkYXRhYmFzZS4gSW4gdGhpc1xuICogICAgIGNhc2UgdGhlIG9iamVjdCBpZGVudGl0eSBkb2VzIG5vdCBtYXR0ZXIuIFR3byBvYmplY3RzIGFyZSBjb25zaWRlcmVkIGVxdWl2YWxlbnQgYXMgbG9uZyBhcyB0aGVpciBgaWRgXG4gKiAgICAgcHJvcGVydHkgaXMgc2FtZS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zIHwgZmlsdGVyOnNlYXJjaFRleHQgdHJhY2sgYnkgaXRlbS5pZGAgaXMgYSBwYXR0ZXJuIHRoYXQgbWlnaHQgYmUgdXNlZCB0byBhcHBseSBhIGZpbHRlclxuICogICAgIHRvIGl0ZW1zIGluIGNvbmp1bmN0aW9uIHdpdGggYSB0cmFja2luZyBleHByZXNzaW9uLlxuICpcbiAqICAgKiBgdmFyaWFibGUgaW4gZXhwcmVzc2lvbiBhcyBhbGlhc19leHByZXNzaW9uYCDigJMgWW91IGNhbiBhbHNvIHByb3ZpZGUgYW4gb3B0aW9uYWwgYWxpYXMgZXhwcmVzc2lvbiB3aGljaCB3aWxsIHRoZW4gc3RvcmUgdGhlXG4gKiAgICAgaW50ZXJtZWRpYXRlIHJlc3VsdHMgb2YgdGhlIHJlcGVhdGVyIGFmdGVyIHRoZSBmaWx0ZXJzIGhhdmUgYmVlbiBhcHBsaWVkLiBUeXBpY2FsbHkgdGhpcyBpcyB1c2VkIHRvIHJlbmRlciBhIHNwZWNpYWwgbWVzc2FnZVxuICogICAgIHdoZW4gYSBmaWx0ZXIgaXMgYWN0aXZlIG9uIHRoZSByZXBlYXRlciwgYnV0IHRoZSBmaWx0ZXJlZCByZXN1bHQgc2V0IGlzIGVtcHR5LlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXMgfCBmaWx0ZXI6eCBhcyByZXN1bHRzYCB3aWxsIHN0b3JlIHRoZSBmcmFnbWVudCBvZiB0aGUgcmVwZWF0ZWQgaXRlbXMgYXMgYHJlc3VsdHNgLCBidXQgb25seSBhZnRlclxuICogICAgIHRoZSBpdGVtcyBoYXZlIGJlZW4gcHJvY2Vzc2VkIHRocm91Z2ggdGhlIGZpbHRlci5cbiAqXG4gKiAgICAgUGxlYXNlIG5vdGUgdGhhdCBgYXMgW3ZhcmlhYmxlIG5hbWVdIGlzIG5vdCBhbiBvcGVyYXRvciBidXQgcmF0aGVyIGEgcGFydCBvZiBuZ1JlcGVhdCBtaWNyby1zeW50YXggc28gaXQgY2FuIGJlIHVzZWQgb25seSBhdCB0aGUgZW5kXG4gKiAgICAgKGFuZCBub3QgYXMgb3BlcmF0b3IsIGluc2lkZSBhbiBleHByZXNzaW9uKS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zIHwgZmlsdGVyIDogeCB8IG9yZGVyQnkgOiBvcmRlciB8IGxpbWl0VG8gOiBsaW1pdCBhcyByZXN1bHRzYCAuXG4gKlxuICogQGV4YW1wbGVcbiAqIFRoaXMgZXhhbXBsZSBpbml0aWFsaXplcyB0aGUgc2NvcGUgdG8gYSBsaXN0IG9mIG5hbWVzIGFuZFxuICogdGhlbiB1c2VzIGBuZ1JlcGVhdGAgdG8gZGlzcGxheSBldmVyeSBwZXJzb246XG4gIDxleGFtcGxlIG1vZHVsZT1cIm5nQW5pbWF0ZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8ZGl2IG5nLWluaXQ9XCJmcmllbmRzID0gW1xuICAgICAgICB7bmFtZTonSm9obicsIGFnZToyNSwgZ2VuZGVyOidib3knfSxcbiAgICAgICAge25hbWU6J0plc3NpZScsIGFnZTozMCwgZ2VuZGVyOidnaXJsJ30sXG4gICAgICAgIHtuYW1lOidKb2hhbm5hJywgYWdlOjI4LCBnZW5kZXI6J2dpcmwnfSxcbiAgICAgICAge25hbWU6J0pveScsIGFnZToxNSwgZ2VuZGVyOidnaXJsJ30sXG4gICAgICAgIHtuYW1lOidNYXJ5JywgYWdlOjI4LCBnZW5kZXI6J2dpcmwnfSxcbiAgICAgICAge25hbWU6J1BldGVyJywgYWdlOjk1LCBnZW5kZXI6J2JveSd9LFxuICAgICAgICB7bmFtZTonU2ViYXN0aWFuJywgYWdlOjUwLCBnZW5kZXI6J2JveSd9LFxuICAgICAgICB7bmFtZTonRXJpa2EnLCBhZ2U6MjcsIGdlbmRlcjonZ2lybCd9LFxuICAgICAgICB7bmFtZTonUGF0cmljaycsIGFnZTo0MCwgZ2VuZGVyOidib3knfSxcbiAgICAgICAge25hbWU6J1NhbWFudGhhJywgYWdlOjYwLCBnZW5kZXI6J2dpcmwnfVxuICAgICAgXVwiPlxuICAgICAgICBJIGhhdmUge3tmcmllbmRzLmxlbmd0aH19IGZyaWVuZHMuIFRoZXkgYXJlOlxuICAgICAgICA8aW5wdXQgdHlwZT1cInNlYXJjaFwiIG5nLW1vZGVsPVwicVwiIHBsYWNlaG9sZGVyPVwiZmlsdGVyIGZyaWVuZHMuLi5cIiBhcmlhLWxhYmVsPVwiZmlsdGVyIGZyaWVuZHNcIiAvPlxuICAgICAgICA8dWwgY2xhc3M9XCJleGFtcGxlLWFuaW1hdGUtY29udGFpbmVyXCI+XG4gICAgICAgICAgPGxpIGNsYXNzPVwiYW5pbWF0ZS1yZXBlYXRcIiBuZy1yZXBlYXQ9XCJmcmllbmQgaW4gZnJpZW5kcyB8IGZpbHRlcjpxIGFzIHJlc3VsdHNcIj5cbiAgICAgICAgICAgIFt7eyRpbmRleCArIDF9fV0ge3tmcmllbmQubmFtZX19IHdobyBpcyB7e2ZyaWVuZC5hZ2V9fSB5ZWFycyBvbGQuXG4gICAgICAgICAgPC9saT5cbiAgICAgICAgICA8bGkgY2xhc3M9XCJhbmltYXRlLXJlcGVhdFwiIG5nLWlmPVwicmVzdWx0cy5sZW5ndGggPT0gMFwiPlxuICAgICAgICAgICAgPHN0cm9uZz5ObyByZXN1bHRzIGZvdW5kLi4uPC9zdHJvbmc+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgPC91bD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5leGFtcGxlLWFuaW1hdGUtY29udGFpbmVyIHtcbiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTtcbiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcbiAgICAgICAgbGlzdC1zdHlsZTpub25lO1xuICAgICAgICBtYXJnaW46MDtcbiAgICAgICAgcGFkZGluZzowIDEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXJlcGVhdCB7XG4gICAgICAgIGxpbmUtaGVpZ2h0OjQwcHg7XG4gICAgICAgIGxpc3Qtc3R5bGU6bm9uZTtcbiAgICAgICAgYm94LXNpemluZzpib3JkZXItYm94O1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbW92ZSxcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1lbnRlcixcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1sZWF2ZSB7XG4gICAgICAgIHRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbGVhdmUubmctbGVhdmUtYWN0aXZlLFxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLW1vdmUsXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctZW50ZXIge1xuICAgICAgICBvcGFjaXR5OjA7XG4gICAgICAgIG1heC1oZWlnaHQ6MDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWxlYXZlLFxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLW1vdmUubmctbW92ZS1hY3RpdmUsXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAgICAgICAgb3BhY2l0eToxO1xuICAgICAgICBtYXgtaGVpZ2h0OjQwcHg7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciBmcmllbmRzID0gZWxlbWVudC5hbGwoYnkucmVwZWF0ZXIoJ2ZyaWVuZCBpbiBmcmllbmRzJykpO1xuXG4gICAgICBpdCgnc2hvdWxkIHJlbmRlciBpbml0aWFsIGRhdGEgc2V0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdChmcmllbmRzLmNvdW50KCkpLnRvQmUoMTApO1xuICAgICAgICBleHBlY3QoZnJpZW5kcy5nZXQoMCkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMV0gSm9obiB3aG8gaXMgMjUgeWVhcnMgb2xkLicpO1xuICAgICAgICBleHBlY3QoZnJpZW5kcy5nZXQoMSkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMl0gSmVzc2llIHdobyBpcyAzMCB5ZWFycyBvbGQuJyk7XG4gICAgICAgIGV4cGVjdChmcmllbmRzLmxhc3QoKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1sxMF0gU2FtYW50aGEgd2hvIGlzIDYwIHllYXJzIG9sZC4nKTtcbiAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnZnJpZW5kcy5sZW5ndGgnKSkuZ2V0VGV4dCgpKVxuICAgICAgICAgICAgLnRvTWF0Y2goXCJJIGhhdmUgMTAgZnJpZW5kcy4gVGhleSBhcmU6XCIpO1xuICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHVwZGF0ZSByZXBlYXRlciB3aGVuIGZpbHRlciBwcmVkaWNhdGUgY2hhbmdlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGZyaWVuZHMuY291bnQoKSkudG9CZSgxMCk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3EnKSkuc2VuZEtleXMoJ21hJyk7XG5cbiAgICAgICAgIGV4cGVjdChmcmllbmRzLmNvdW50KCkpLnRvQmUoMik7XG4gICAgICAgICBleHBlY3QoZnJpZW5kcy5nZXQoMCkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMV0gTWFyeSB3aG8gaXMgMjggeWVhcnMgb2xkLicpO1xuICAgICAgICAgZXhwZWN0KGZyaWVuZHMubGFzdCgpLmdldFRleHQoKSkudG9FcXVhbCgnWzJdIFNhbWFudGhhIHdobyBpcyA2MCB5ZWFycyBvbGQuJyk7XG4gICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdSZXBlYXREaXJlY3RpdmUgPSBbJyRwYXJzZScsICckYW5pbWF0ZScsIGZ1bmN0aW9uKCRwYXJzZSwgJGFuaW1hdGUpIHtcbiAgdmFyIE5HX1JFTU9WRUQgPSAnJCROR19SRU1PVkVEJztcbiAgdmFyIG5nUmVwZWF0TWluRXJyID0gbWluRXJyKCduZ1JlcGVhdCcpO1xuXG4gIHZhciB1cGRhdGVTY29wZSA9IGZ1bmN0aW9uKHNjb3BlLCBpbmRleCwgdmFsdWVJZGVudGlmaWVyLCB2YWx1ZSwga2V5SWRlbnRpZmllciwga2V5LCBhcnJheUxlbmd0aCkge1xuICAgIC8vIFRPRE8ocGVyZik6IGdlbmVyYXRlIHNldHRlcnMgdG8gc2hhdmUgb2ZmIH40MG1zIG9yIDEtMS41JVxuICAgIHNjb3BlW3ZhbHVlSWRlbnRpZmllcl0gPSB2YWx1ZTtcbiAgICBpZiAoa2V5SWRlbnRpZmllcikgc2NvcGVba2V5SWRlbnRpZmllcl0gPSBrZXk7XG4gICAgc2NvcGUuJGluZGV4ID0gaW5kZXg7XG4gICAgc2NvcGUuJGZpcnN0ID0gKGluZGV4ID09PSAwKTtcbiAgICBzY29wZS4kbGFzdCA9IChpbmRleCA9PT0gKGFycmF5TGVuZ3RoIC0gMSkpO1xuICAgIHNjb3BlLiRtaWRkbGUgPSAhKHNjb3BlLiRmaXJzdCB8fCBzY29wZS4kbGFzdCk7XG4gICAgLy8ganNoaW50IGJpdHdpc2U6IGZhbHNlXG4gICAgc2NvcGUuJG9kZCA9ICEoc2NvcGUuJGV2ZW4gPSAoaW5kZXgmMSkgPT09IDApO1xuICAgIC8vIGpzaGludCBiaXR3aXNlOiB0cnVlXG4gIH07XG5cbiAgdmFyIGdldEJsb2NrU3RhcnQgPSBmdW5jdGlvbihibG9jaykge1xuICAgIHJldHVybiBibG9jay5jbG9uZVswXTtcbiAgfTtcblxuICB2YXIgZ2V0QmxvY2tFbmQgPSBmdW5jdGlvbihibG9jaykge1xuICAgIHJldHVybiBibG9jay5jbG9uZVtibG9jay5jbG9uZS5sZW5ndGggLSAxXTtcbiAgfTtcblxuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICAgIHByaW9yaXR5OiAxMDAwLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgICQkdGxiOiB0cnVlLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nUmVwZWF0Q29tcGlsZSgkZWxlbWVudCwgJGF0dHIpIHtcbiAgICAgIHZhciBleHByZXNzaW9uID0gJGF0dHIubmdSZXBlYXQ7XG4gICAgICB2YXIgbmdSZXBlYXRFbmRDb21tZW50ID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnIGVuZCBuZ1JlcGVhdDogJyArIGV4cHJlc3Npb24gKyAnICcpO1xuXG4gICAgICB2YXIgbWF0Y2ggPSBleHByZXNzaW9uLm1hdGNoKC9eXFxzKihbXFxzXFxTXSs/KVxccytpblxccysoW1xcc1xcU10rPykoPzpcXHMrYXNcXHMrKFtcXHNcXFNdKz8pKT8oPzpcXHMrdHJhY2tcXHMrYnlcXHMrKFtcXHNcXFNdKz8pKT9cXHMqJC8pO1xuXG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93IG5nUmVwZWF0TWluRXJyKCdpZXhwJywgXCJFeHBlY3RlZCBleHByZXNzaW9uIGluIGZvcm0gb2YgJ19pdGVtXyBpbiBfY29sbGVjdGlvbl9bIHRyYWNrIGJ5IF9pZF9dJyBidXQgZ290ICd7MH0nLlwiLFxuICAgICAgICAgICAgZXhwcmVzc2lvbik7XG4gICAgICB9XG5cbiAgICAgIHZhciBsaHMgPSBtYXRjaFsxXTtcbiAgICAgIHZhciByaHMgPSBtYXRjaFsyXTtcbiAgICAgIHZhciBhbGlhc0FzID0gbWF0Y2hbM107XG4gICAgICB2YXIgdHJhY2tCeUV4cCA9IG1hdGNoWzRdO1xuXG4gICAgICBtYXRjaCA9IGxocy5tYXRjaCgvXig/OihcXHMqW1xcJFxcd10rKXxcXChcXHMqKFtcXCRcXHddKylcXHMqLFxccyooW1xcJFxcd10rKVxccypcXCkpJC8pO1xuXG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93IG5nUmVwZWF0TWluRXJyKCdpaWRleHAnLCBcIidfaXRlbV8nIGluICdfaXRlbV8gaW4gX2NvbGxlY3Rpb25fJyBzaG91bGQgYmUgYW4gaWRlbnRpZmllciBvciAnKF9rZXlfLCBfdmFsdWVfKScgZXhwcmVzc2lvbiwgYnV0IGdvdCAnezB9Jy5cIixcbiAgICAgICAgICAgIGxocyk7XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWVJZGVudGlmaWVyID0gbWF0Y2hbM10gfHwgbWF0Y2hbMV07XG4gICAgICB2YXIga2V5SWRlbnRpZmllciA9IG1hdGNoWzJdO1xuXG4gICAgICBpZiAoYWxpYXNBcyAmJiAoIS9eWyRhLXpBLVpfXVskYS16QS1aMC05X10qJC8udGVzdChhbGlhc0FzKSB8fFxuICAgICAgICAgIC9eKG51bGx8dW5kZWZpbmVkfHRoaXN8XFwkaW5kZXh8XFwkZmlyc3R8XFwkbWlkZGxlfFxcJGxhc3R8XFwkZXZlbnxcXCRvZGR8XFwkcGFyZW50fFxcJHJvb3R8XFwkaWQpJC8udGVzdChhbGlhc0FzKSkpIHtcbiAgICAgICAgdGhyb3cgbmdSZXBlYXRNaW5FcnIoJ2JhZGlkZW50JywgXCJhbGlhcyAnezB9JyBpcyBpbnZhbGlkIC0tLSBtdXN0IGJlIGEgdmFsaWQgSlMgaWRlbnRpZmllciB3aGljaCBpcyBub3QgYSByZXNlcnZlZCBuYW1lLlwiLFxuICAgICAgICAgIGFsaWFzQXMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdHJhY2tCeUV4cEdldHRlciwgdHJhY2tCeUlkRXhwRm4sIHRyYWNrQnlJZEFycmF5Rm4sIHRyYWNrQnlJZE9iakZuO1xuICAgICAgdmFyIGhhc2hGbkxvY2FscyA9IHskaWQ6IGhhc2hLZXl9O1xuXG4gICAgICBpZiAodHJhY2tCeUV4cCkge1xuICAgICAgICB0cmFja0J5RXhwR2V0dGVyID0gJHBhcnNlKHRyYWNrQnlFeHApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhY2tCeUlkQXJyYXlGbiA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaGFzaEtleSh2YWx1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRyYWNrQnlJZE9iakZuID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nUmVwZWF0TGluaygkc2NvcGUsICRlbGVtZW50LCAkYXR0ciwgY3RybCwgJHRyYW5zY2x1ZGUpIHtcblxuICAgICAgICBpZiAodHJhY2tCeUV4cEdldHRlcikge1xuICAgICAgICAgIHRyYWNrQnlJZEV4cEZuID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgICAgIC8vIGFzc2lnbiBrZXksIHZhbHVlLCBhbmQgJGluZGV4IHRvIHRoZSBsb2NhbHMgc28gdGhhdCB0aGV5IGNhbiBiZSB1c2VkIGluIGhhc2ggZnVuY3Rpb25zXG4gICAgICAgICAgICBpZiAoa2V5SWRlbnRpZmllcikgaGFzaEZuTG9jYWxzW2tleUlkZW50aWZpZXJdID0ga2V5O1xuICAgICAgICAgICAgaGFzaEZuTG9jYWxzW3ZhbHVlSWRlbnRpZmllcl0gPSB2YWx1ZTtcbiAgICAgICAgICAgIGhhc2hGbkxvY2Fscy4kaW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgIHJldHVybiB0cmFja0J5RXhwR2V0dGVyKCRzY29wZSwgaGFzaEZuTG9jYWxzKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RvcmUgYSBsaXN0IG9mIGVsZW1lbnRzIGZyb20gcHJldmlvdXMgcnVuLiBUaGlzIGlzIGEgaGFzaCB3aGVyZSBrZXkgaXMgdGhlIGl0ZW0gZnJvbSB0aGVcbiAgICAgICAgLy8gaXRlcmF0b3IsIGFuZCB0aGUgdmFsdWUgaXMgb2JqZWN0cyB3aXRoIGZvbGxvd2luZyBwcm9wZXJ0aWVzLlxuICAgICAgICAvLyAgIC0gc2NvcGU6IGJvdW5kIHNjb3BlXG4gICAgICAgIC8vICAgLSBlbGVtZW50OiBwcmV2aW91cyBlbGVtZW50LlxuICAgICAgICAvLyAgIC0gaW5kZXg6IHBvc2l0aW9uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFdlIGFyZSB1c2luZyBuby1wcm90byBvYmplY3Qgc28gdGhhdCB3ZSBkb24ndCBuZWVkIHRvIGd1YXJkIGFnYWluc3QgaW5oZXJpdGVkIHByb3BzIHZpYVxuICAgICAgICAvLyBoYXNPd25Qcm9wZXJ0eS5cbiAgICAgICAgdmFyIGxhc3RCbG9ja01hcCA9IGNyZWF0ZU1hcCgpO1xuXG4gICAgICAgIC8vd2F0Y2ggcHJvcHNcbiAgICAgICAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24ocmhzLCBmdW5jdGlvbiBuZ1JlcGVhdEFjdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgdmFyIGluZGV4LCBsZW5ndGgsXG4gICAgICAgICAgICAgIHByZXZpb3VzTm9kZSA9ICRlbGVtZW50WzBdLCAgICAgLy8gbm9kZSB0aGF0IGNsb25lZCBub2RlcyBzaG91bGQgYmUgaW5zZXJ0ZWQgYWZ0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXplZCB0byB0aGUgY29tbWVudCBub2RlIGFuY2hvclxuICAgICAgICAgICAgICBuZXh0Tm9kZSxcbiAgICAgICAgICAgICAgLy8gU2FtZSBhcyBsYXN0QmxvY2tNYXAgYnV0IGl0IGhhcyB0aGUgY3VycmVudCBzdGF0ZS4gSXQgd2lsbCBiZWNvbWUgdGhlXG4gICAgICAgICAgICAgIC8vIGxhc3RCbG9ja01hcCBvbiB0aGUgbmV4dCBpdGVyYXRpb24uXG4gICAgICAgICAgICAgIG5leHRCbG9ja01hcCA9IGNyZWF0ZU1hcCgpLFxuICAgICAgICAgICAgICBjb2xsZWN0aW9uTGVuZ3RoLFxuICAgICAgICAgICAgICBrZXksIHZhbHVlLCAvLyBrZXkvdmFsdWUgb2YgaXRlcmF0aW9uXG4gICAgICAgICAgICAgIHRyYWNrQnlJZCxcbiAgICAgICAgICAgICAgdHJhY2tCeUlkRm4sXG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzLFxuICAgICAgICAgICAgICBibG9jaywgICAgICAgLy8gbGFzdCBvYmplY3QgaW5mb3JtYXRpb24ge3Njb3BlLCBlbGVtZW50LCBpZH1cbiAgICAgICAgICAgICAgbmV4dEJsb2NrT3JkZXIsXG4gICAgICAgICAgICAgIGVsZW1lbnRzVG9SZW1vdmU7XG5cbiAgICAgICAgICBpZiAoYWxpYXNBcykge1xuICAgICAgICAgICAgJHNjb3BlW2FsaWFzQXNdID0gY29sbGVjdGlvbjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzID0gY29sbGVjdGlvbjtcbiAgICAgICAgICAgIHRyYWNrQnlJZEZuID0gdHJhY2tCeUlkRXhwRm4gfHwgdHJhY2tCeUlkQXJyYXlGbjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJhY2tCeUlkRm4gPSB0cmFja0J5SWRFeHBGbiB8fCB0cmFja0J5SWRPYmpGbjtcbiAgICAgICAgICAgIC8vIGlmIG9iamVjdCwgZXh0cmFjdCBrZXlzLCBpbiBlbnVtZXJhdGlvbiBvcmRlciwgdW5zb3J0ZWRcbiAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpdGVtS2V5IGluIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY29sbGVjdGlvbiwgaXRlbUtleSkgJiYgaXRlbUtleS5jaGFyQXQoMCkgIT09ICckJykge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzLnB1c2goaXRlbUtleSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb2xsZWN0aW9uTGVuZ3RoID0gY29sbGVjdGlvbktleXMubGVuZ3RoO1xuICAgICAgICAgIG5leHRCbG9ja09yZGVyID0gbmV3IEFycmF5KGNvbGxlY3Rpb25MZW5ndGgpO1xuXG4gICAgICAgICAgLy8gbG9jYXRlIGV4aXN0aW5nIGl0ZW1zXG4gICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgY29sbGVjdGlvbkxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAga2V5ID0gKGNvbGxlY3Rpb24gPT09IGNvbGxlY3Rpb25LZXlzKSA/IGluZGV4IDogY29sbGVjdGlvbktleXNbaW5kZXhdO1xuICAgICAgICAgICAgdmFsdWUgPSBjb2xsZWN0aW9uW2tleV07XG4gICAgICAgICAgICB0cmFja0J5SWQgPSB0cmFja0J5SWRGbihrZXksIHZhbHVlLCBpbmRleCk7XG4gICAgICAgICAgICBpZiAobGFzdEJsb2NrTWFwW3RyYWNrQnlJZF0pIHtcbiAgICAgICAgICAgICAgLy8gZm91bmQgcHJldmlvdXNseSBzZWVuIGJsb2NrXG4gICAgICAgICAgICAgIGJsb2NrID0gbGFzdEJsb2NrTWFwW3RyYWNrQnlJZF07XG4gICAgICAgICAgICAgIGRlbGV0ZSBsYXN0QmxvY2tNYXBbdHJhY2tCeUlkXTtcbiAgICAgICAgICAgICAgbmV4dEJsb2NrTWFwW3RyYWNrQnlJZF0gPSBibG9jaztcbiAgICAgICAgICAgICAgbmV4dEJsb2NrT3JkZXJbaW5kZXhdID0gYmxvY2s7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5leHRCbG9ja01hcFt0cmFja0J5SWRdKSB7XG4gICAgICAgICAgICAgIC8vIGlmIGNvbGxpc2lvbiBkZXRlY3RlZC4gcmVzdG9yZSBsYXN0QmxvY2tNYXAgYW5kIHRocm93IGFuIGVycm9yXG4gICAgICAgICAgICAgIGZvckVhY2gobmV4dEJsb2NrT3JkZXIsIGZ1bmN0aW9uKGJsb2NrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrICYmIGJsb2NrLnNjb3BlKSBsYXN0QmxvY2tNYXBbYmxvY2suaWRdID0gYmxvY2s7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB0aHJvdyBuZ1JlcGVhdE1pbkVycignZHVwZXMnLFxuICAgICAgICAgICAgICAgICAgXCJEdXBsaWNhdGVzIGluIGEgcmVwZWF0ZXIgYXJlIG5vdCBhbGxvd2VkLiBVc2UgJ3RyYWNrIGJ5JyBleHByZXNzaW9uIHRvIHNwZWNpZnkgdW5pcXVlIGtleXMuIFJlcGVhdGVyOiB7MH0sIER1cGxpY2F0ZSBrZXk6IHsxfSwgRHVwbGljYXRlIHZhbHVlOiB7Mn1cIixcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb24sIHRyYWNrQnlJZCwgdmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gbmV3IG5ldmVyIGJlZm9yZSBzZWVuIGJsb2NrXG4gICAgICAgICAgICAgIG5leHRCbG9ja09yZGVyW2luZGV4XSA9IHtpZDogdHJhY2tCeUlkLCBzY29wZTogdW5kZWZpbmVkLCBjbG9uZTogdW5kZWZpbmVkfTtcbiAgICAgICAgICAgICAgbmV4dEJsb2NrTWFwW3RyYWNrQnlJZF0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHJlbW92ZSBsZWZ0b3ZlciBpdGVtc1xuICAgICAgICAgIGZvciAodmFyIGJsb2NrS2V5IGluIGxhc3RCbG9ja01hcCkge1xuICAgICAgICAgICAgYmxvY2sgPSBsYXN0QmxvY2tNYXBbYmxvY2tLZXldO1xuICAgICAgICAgICAgZWxlbWVudHNUb1JlbW92ZSA9IGdldEJsb2NrTm9kZXMoYmxvY2suY2xvbmUpO1xuICAgICAgICAgICAgJGFuaW1hdGUubGVhdmUoZWxlbWVudHNUb1JlbW92ZSk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudHNUb1JlbW92ZVswXS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgIC8vIGlmIHRoZSBlbGVtZW50IHdhcyBub3QgcmVtb3ZlZCB5ZXQgYmVjYXVzZSBvZiBwZW5kaW5nIGFuaW1hdGlvbiwgbWFyayBpdCBhcyBkZWxldGVkXG4gICAgICAgICAgICAgIC8vIHNvIHRoYXQgd2UgY2FuIGlnbm9yZSBpdCBsYXRlclxuICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gZWxlbWVudHNUb1JlbW92ZS5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudHNUb1JlbW92ZVtpbmRleF1bTkdfUkVNT1ZFRF0gPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBibG9jay5zY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHdlIGFyZSBub3QgdXNpbmcgZm9yRWFjaCBmb3IgcGVyZiByZWFzb25zICh0cnlpbmcgdG8gYXZvaWQgI2NhbGwpXG4gICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgY29sbGVjdGlvbkxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAga2V5ID0gKGNvbGxlY3Rpb24gPT09IGNvbGxlY3Rpb25LZXlzKSA/IGluZGV4IDogY29sbGVjdGlvbktleXNbaW5kZXhdO1xuICAgICAgICAgICAgdmFsdWUgPSBjb2xsZWN0aW9uW2tleV07XG4gICAgICAgICAgICBibG9jayA9IG5leHRCbG9ja09yZGVyW2luZGV4XTtcblxuICAgICAgICAgICAgaWYgKGJsb2NrLnNjb3BlKSB7XG4gICAgICAgICAgICAgIC8vIGlmIHdlIGhhdmUgYWxyZWFkeSBzZWVuIHRoaXMgb2JqZWN0LCB0aGVuIHdlIG5lZWQgdG8gcmV1c2UgdGhlXG4gICAgICAgICAgICAgIC8vIGFzc29jaWF0ZWQgc2NvcGUvZWxlbWVudFxuXG4gICAgICAgICAgICAgIG5leHROb2RlID0gcHJldmlvdXNOb2RlO1xuXG4gICAgICAgICAgICAgIC8vIHNraXAgbm9kZXMgdGhhdCBhcmUgYWxyZWFkeSBwZW5kaW5nIHJlbW92YWwgdmlhIGxlYXZlIGFuaW1hdGlvblxuICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBuZXh0Tm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgfSB3aGlsZSAobmV4dE5vZGUgJiYgbmV4dE5vZGVbTkdfUkVNT1ZFRF0pO1xuXG4gICAgICAgICAgICAgIGlmIChnZXRCbG9ja1N0YXJ0KGJsb2NrKSAhPSBuZXh0Tm9kZSkge1xuICAgICAgICAgICAgICAgIC8vIGV4aXN0aW5nIGl0ZW0gd2hpY2ggZ290IG1vdmVkXG4gICAgICAgICAgICAgICAgJGFuaW1hdGUubW92ZShnZXRCbG9ja05vZGVzKGJsb2NrLmNsb25lKSwgbnVsbCwganFMaXRlKHByZXZpb3VzTm9kZSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHByZXZpb3VzTm9kZSA9IGdldEJsb2NrRW5kKGJsb2NrKTtcbiAgICAgICAgICAgICAgdXBkYXRlU2NvcGUoYmxvY2suc2NvcGUsIGluZGV4LCB2YWx1ZUlkZW50aWZpZXIsIHZhbHVlLCBrZXlJZGVudGlmaWVyLCBrZXksIGNvbGxlY3Rpb25MZW5ndGgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gbmV3IGl0ZW0gd2hpY2ggd2UgZG9uJ3Qga25vdyBhYm91dFxuICAgICAgICAgICAgICAkdHJhbnNjbHVkZShmdW5jdGlvbiBuZ1JlcGVhdFRyYW5zY2x1ZGUoY2xvbmUsIHNjb3BlKSB7XG4gICAgICAgICAgICAgICAgYmxvY2suc2NvcGUgPSBzY29wZTtcbiAgICAgICAgICAgICAgICAvLyBodHRwOi8vanNwZXJmLmNvbS9jbG9uZS12cy1jcmVhdGVjb21tZW50XG4gICAgICAgICAgICAgICAgdmFyIGVuZE5vZGUgPSBuZ1JlcGVhdEVuZENvbW1lbnQuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBjbG9uZVtjbG9uZS5sZW5ndGgrK10gPSBlbmROb2RlO1xuXG4gICAgICAgICAgICAgICAgLy8gVE9ETyhwZXJmKTogc3VwcG9ydCBuYWtlZCBwcmV2aW91c05vZGUgaW4gYGVudGVyYCB0byBhdm9pZCBjcmVhdGlvbiBvZiBqcUxpdGUgd3JhcHBlcj9cbiAgICAgICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjbG9uZSwgbnVsbCwganFMaXRlKHByZXZpb3VzTm9kZSkpO1xuICAgICAgICAgICAgICAgIHByZXZpb3VzTm9kZSA9IGVuZE5vZGU7XG4gICAgICAgICAgICAgICAgLy8gTm90ZTogV2Ugb25seSBuZWVkIHRoZSBmaXJzdC9sYXN0IG5vZGUgb2YgdGhlIGNsb25lZCBub2Rlcy5cbiAgICAgICAgICAgICAgICAvLyBIb3dldmVyLCB3ZSBuZWVkIHRvIGtlZXAgdGhlIHJlZmVyZW5jZSB0byB0aGUganFsaXRlIHdyYXBwZXIgYXMgaXQgbWlnaHQgYmUgY2hhbmdlZCBsYXRlclxuICAgICAgICAgICAgICAgIC8vIGJ5IGEgZGlyZWN0aXZlIHdpdGggdGVtcGxhdGVVcmwgd2hlbiBpdHMgdGVtcGxhdGUgYXJyaXZlcy5cbiAgICAgICAgICAgICAgICBibG9jay5jbG9uZSA9IGNsb25lO1xuICAgICAgICAgICAgICAgIG5leHRCbG9ja01hcFtibG9jay5pZF0gPSBibG9jaztcbiAgICAgICAgICAgICAgICB1cGRhdGVTY29wZShibG9jay5zY29wZSwgaW5kZXgsIHZhbHVlSWRlbnRpZmllciwgdmFsdWUsIGtleUlkZW50aWZpZXIsIGtleSwgY29sbGVjdGlvbkxlbmd0aCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBsYXN0QmxvY2tNYXAgPSBuZXh0QmxvY2tNYXA7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxudmFyIE5HX0hJREVfQ0xBU1MgPSAnbmctaGlkZSc7XG52YXIgTkdfSElERV9JTl9QUk9HUkVTU19DTEFTUyA9ICduZy1oaWRlLWFuaW1hdGUnO1xuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1Nob3dcbiAqIEBtdWx0aUVsZW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdTaG93YCBkaXJlY3RpdmUgc2hvd3Mgb3IgaGlkZXMgdGhlIGdpdmVuIEhUTUwgZWxlbWVudCBiYXNlZCBvbiB0aGUgZXhwcmVzc2lvblxuICogcHJvdmlkZWQgdG8gdGhlIGBuZ1Nob3dgIGF0dHJpYnV0ZS4gVGhlIGVsZW1lbnQgaXMgc2hvd24gb3IgaGlkZGVuIGJ5IHJlbW92aW5nIG9yIGFkZGluZ1xuICogdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIG9udG8gdGhlIGVsZW1lbnQuIFRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBpcyBwcmVkZWZpbmVkXG4gKiBpbiBBbmd1bGFySlMgYW5kIHNldHMgdGhlIGRpc3BsYXkgc3R5bGUgdG8gbm9uZSAodXNpbmcgYW4gIWltcG9ydGFudCBmbGFnKS5cbiAqIEZvciBDU1AgbW9kZSBwbGVhc2UgYWRkIGBhbmd1bGFyLWNzcC5jc3NgIHRvIHlvdXIgaHRtbCBmaWxlIChzZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NzcCBuZ0NzcH0pLlxuICpcbiAqIGBgYGh0bWxcbiAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyB0cnV0aHkgKGVsZW1lbnQgaXMgdmlzaWJsZSkgLS0+XG4gKiA8ZGl2IG5nLXNob3c9XCJteVZhbHVlXCI+PC9kaXY+XG4gKlxuICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIGZhbHN5IChlbGVtZW50IGlzIGhpZGRlbikgLS0+XG4gKiA8ZGl2IG5nLXNob3c9XCJteVZhbHVlXCIgY2xhc3M9XCJuZy1oaWRlXCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBXaGVuIHRoZSBgbmdTaG93YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIGZhbHN5IHZhbHVlIHRoZW4gdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIGFkZGVkIHRvIHRoZSBjbGFzc1xuICogYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50IGNhdXNpbmcgaXQgdG8gYmVjb21lIGhpZGRlbi4gV2hlbiB0cnV0aHksIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBpcyByZW1vdmVkXG4gKiBmcm9tIHRoZSBlbGVtZW50IGNhdXNpbmcgdGhlIGVsZW1lbnQgbm90IHRvIGFwcGVhciBoaWRkZW4uXG4gKlxuICogIyMgV2h5IGlzICFpbXBvcnRhbnQgdXNlZD9cbiAqXG4gKiBZb3UgbWF5IGJlIHdvbmRlcmluZyB3aHkgIWltcG9ydGFudCBpcyB1c2VkIGZvciB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MuIFRoaXMgaXMgYmVjYXVzZSB0aGUgYC5uZy1oaWRlYCBzZWxlY3RvclxuICogY2FuIGJlIGVhc2lseSBvdmVycmlkZGVuIGJ5IGhlYXZpZXIgc2VsZWN0b3JzLiBGb3IgZXhhbXBsZSwgc29tZXRoaW5nIGFzIHNpbXBsZVxuICogYXMgY2hhbmdpbmcgdGhlIGRpc3BsYXkgc3R5bGUgb24gYSBIVE1MIGxpc3QgaXRlbSB3b3VsZCBtYWtlIGhpZGRlbiBlbGVtZW50cyBhcHBlYXIgdmlzaWJsZS5cbiAqIFRoaXMgYWxzbyBiZWNvbWVzIGEgYmlnZ2VyIGlzc3VlIHdoZW4gZGVhbGluZyB3aXRoIENTUyBmcmFtZXdvcmtzLlxuICpcbiAqIEJ5IHVzaW5nICFpbXBvcnRhbnQsIHRoZSBzaG93IGFuZCBoaWRlIGJlaGF2aW9yIHdpbGwgd29yayBhcyBleHBlY3RlZCBkZXNwaXRlIGFueSBjbGFzaCBiZXR3ZWVuIENTUyBzZWxlY3RvclxuICogc3BlY2lmaWNpdHkgKHdoZW4gIWltcG9ydGFudCBpc24ndCB1c2VkIHdpdGggYW55IGNvbmZsaWN0aW5nIHN0eWxlcykuIElmIGEgZGV2ZWxvcGVyIGNob29zZXMgdG8gb3ZlcnJpZGUgdGhlXG4gKiBzdHlsaW5nIHRvIGNoYW5nZSBob3cgdG8gaGlkZSBhbiBlbGVtZW50IHRoZW4gaXQgaXMganVzdCBhIG1hdHRlciBvZiB1c2luZyAhaW1wb3J0YW50IGluIHRoZWlyIG93biBDU1MgY29kZS5cbiAqXG4gKiAjIyMgT3ZlcnJpZGluZyBgLm5nLWhpZGVgXG4gKlxuICogQnkgZGVmYXVsdCwgdGhlIGAubmctaGlkZWAgY2xhc3Mgd2lsbCBzdHlsZSB0aGUgZWxlbWVudCB3aXRoIGBkaXNwbGF5OiBub25lIWltcG9ydGFudGAuIElmIHlvdSB3aXNoIHRvIGNoYW5nZVxuICogdGhlIGhpZGUgYmVoYXZpb3Igd2l0aCBuZ1Nob3cvbmdIaWRlIHRoZW4gdGhpcyBjYW4gYmUgYWNoaWV2ZWQgYnkgcmVzdGF0aW5nIHRoZSBzdHlsZXMgZm9yIHRoZSBgLm5nLWhpZGVgXG4gKiBjbGFzcyBDU1MuIE5vdGUgdGhhdCB0aGUgc2VsZWN0b3IgdGhhdCBuZWVkcyB0byBiZSB1c2VkIGlzIGFjdHVhbGx5IGAubmctaGlkZTpub3QoLm5nLWhpZGUtYW5pbWF0ZSlgIHRvIGNvcGVcbiAqIHdpdGggZXh0cmEgYW5pbWF0aW9uIGNsYXNzZXMgdGhhdCBjYW4gYmUgYWRkZWQuXG4gKlxuICogYGBgY3NzXG4gKiAubmctaGlkZTpub3QoLm5nLWhpZGUtYW5pbWF0ZSkge1xuICogICAvJiM0MjsgdGhpcyBpcyBqdXN0IGFub3RoZXIgZm9ybSBvZiBoaWRpbmcgYW4gZWxlbWVudCAmIzQyOy9cbiAqICAgZGlzcGxheTogYmxvY2shaW1wb3J0YW50O1xuICogICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gKiAgIHRvcDogLTk5OTlweDtcbiAqICAgbGVmdDogLTk5OTlweDtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEJ5IGRlZmF1bHQgeW91IGRvbid0IG5lZWQgdG8gb3ZlcnJpZGUgaW4gQ1NTIGFueXRoaW5nIGFuZCB0aGUgYW5pbWF0aW9ucyB3aWxsIHdvcmsgYXJvdW5kIHRoZSBkaXNwbGF5IHN0eWxlLlxuICpcbiAqICMjIEEgbm90ZSBhYm91dCBhbmltYXRpb25zIHdpdGggYG5nU2hvd2BcbiAqXG4gKiBBbmltYXRpb25zIGluIG5nU2hvdy9uZ0hpZGUgd29yayB3aXRoIHRoZSBzaG93IGFuZCBoaWRlIGV2ZW50cyB0aGF0IGFyZSB0cmlnZ2VyZWQgd2hlbiB0aGUgZGlyZWN0aXZlIGV4cHJlc3Npb25cbiAqIGlzIHRydWUgYW5kIGZhbHNlLiBUaGlzIHN5c3RlbSB3b3JrcyBsaWtlIHRoZSBhbmltYXRpb24gc3lzdGVtIHByZXNlbnQgd2l0aCBuZ0NsYXNzIGV4Y2VwdCB0aGF0XG4gKiB5b3UgbXVzdCBhbHNvIGluY2x1ZGUgdGhlICFpbXBvcnRhbnQgZmxhZyB0byBvdmVycmlkZSB0aGUgZGlzcGxheSBwcm9wZXJ0eVxuICogc28gdGhhdCB5b3UgY2FuIHBlcmZvcm0gYW4gYW5pbWF0aW9uIHdoZW4gdGhlIGVsZW1lbnQgaXMgaGlkZGVuIGR1cmluZyB0aGUgdGltZSBvZiB0aGUgYW5pbWF0aW9uLlxuICpcbiAqIGBgYGNzc1xuICogLy9cbiAqIC8vYSB3b3JraW5nIGV4YW1wbGUgY2FuIGJlIGZvdW5kIGF0IHRoZSBib3R0b20gb2YgdGhpcyBwYWdlXG4gKiAvL1xuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQsIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHtcbiAqICAgLyYjNDI7IHRoaXMgaXMgcmVxdWlyZWQgYXMgb2YgMS4zeCB0byBwcm9wZXJseVxuICogICAgICBhcHBseSBhbGwgc3R5bGluZyBpbiBhIHNob3cvaGlkZSBhbmltYXRpb24gJiM0MjsvXG4gKiAgIHRyYW5zaXRpb246IDBzIGxpbmVhciBhbGw7XG4gKiB9XG4gKlxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQtYWN0aXZlLFxuICogLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUtYWN0aXZlIHtcbiAqICAgLyYjNDI7IHRoZSB0cmFuc2l0aW9uIGlzIGRlZmluZWQgaW4gdGhlIGFjdGl2ZSBjbGFzcyAmIzQyOy9cbiAqICAgdHJhbnNpdGlvbjogMXMgbGluZWFyIGFsbDtcbiAqIH1cbiAqXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZCB7IC4uLiB9XG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZC5uZy1oaWRlLWFkZC1hY3RpdmUgeyAuLi4gfVxuICogLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUgeyAuLi4gfVxuICogLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUubmctaGlkZS1yZW1vdmUtYWN0aXZlIHsgLi4uIH1cbiAqIGBgYFxuICpcbiAqIEtlZXAgaW4gbWluZCB0aGF0LCBhcyBvZiBBbmd1bGFySlMgdmVyc2lvbiAxLjMuMC1iZXRhLjExLCB0aGVyZSBpcyBubyBuZWVkIHRvIGNoYW5nZSB0aGUgZGlzcGxheVxuICogcHJvcGVydHkgdG8gYmxvY2sgZHVyaW5nIGFuaW1hdGlvbiBzdGF0ZXMtLW5nQW5pbWF0ZSB3aWxsIGhhbmRsZSB0aGUgc3R5bGUgdG9nZ2xpbmcgYXV0b21hdGljYWxseSBmb3IgeW91LlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiBhZGRDbGFzczogYC5uZy1oaWRlYCAtIGhhcHBlbnMgYWZ0ZXIgdGhlIGBuZ1Nob3dgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgdHJ1dGh5IHZhbHVlIGFuZCB0aGUganVzdCBiZWZvcmUgY29udGVudHMgYXJlIHNldCB0byB2aXNpYmxlXG4gKiByZW1vdmVDbGFzczogYC5uZy1oaWRlYCAtIGhhcHBlbnMgYWZ0ZXIgdGhlIGBuZ1Nob3dgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgbm9uIHRydXRoeSB2YWx1ZSBhbmQganVzdCBiZWZvcmUgdGhlIGNvbnRlbnRzIGFyZSBzZXQgdG8gaGlkZGVuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU2hvdyBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5XG4gKiAgICAgdGhlbiB0aGUgZWxlbWVudCBpcyBzaG93biBvciBoaWRkZW4gcmVzcGVjdGl2ZWx5LlxuICpcbiAqIEBleGFtcGxlXG4gIDxleGFtcGxlIG1vZHVsZT1cIm5nQW5pbWF0ZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICBDbGljayBtZTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiIGFyaWEtbGFiZWw9XCJUb2dnbGUgbmdIaWRlXCI+PGJyLz5cbiAgICAgIDxkaXY+XG4gICAgICAgIFNob3c6XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjaGVjay1lbGVtZW50IGFuaW1hdGUtc2hvd1wiIG5nLXNob3c9XCJjaGVja2VkXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRodW1icy11cFwiPjwvc3Bhbj4gSSBzaG93IHVwIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgSGlkZTpcbiAgICAgICAgPGRpdiBjbGFzcz1cImNoZWNrLWVsZW1lbnQgYW5pbWF0ZS1zaG93XCIgbmctaGlkZT1cImNoZWNrZWRcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tdGh1bWJzLWRvd25cIj48L3NwYW4+IEkgaGlkZSB3aGVuIHlvdXIgY2hlY2tib3ggaXMgY2hlY2tlZC5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImdseXBoaWNvbnMuY3NzXCI+XG4gICAgICBAaW1wb3J0IHVybCguLi8uLi9jb21wb25lbnRzL2Jvb3RzdHJhcC0zLjEuMS9jc3MvYm9vdHN0cmFwLmNzcyk7XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLmFuaW1hdGUtc2hvdyB7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXNob3cubmctaGlkZS1hZGQsIC5hbmltYXRlLXNob3cubmctaGlkZS1yZW1vdmUge1xuICAgICAgICB0cmFuc2l0aW9uOiBhbGwgbGluZWFyIDAuNXM7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXNob3cubmctaGlkZSB7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAwO1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICBwYWRkaW5nOiAwIDEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5jaGVjay1lbGVtZW50IHtcbiAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgICAgfVxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgdGh1bWJzVXAgPSBlbGVtZW50KGJ5LmNzcygnc3Bhbi5nbHlwaGljb24tdGh1bWJzLXVwJykpO1xuICAgICAgdmFyIHRodW1ic0Rvd24gPSBlbGVtZW50KGJ5LmNzcygnc3Bhbi5nbHlwaGljb24tdGh1bWJzLWRvd24nKSk7XG5cbiAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctc2hvdyAvIG5nLWhpZGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KHRodW1ic1VwLmlzRGlzcGxheWVkKCkpLnRvQmVGYWxzeSgpO1xuICAgICAgICBleHBlY3QodGh1bWJzRG93bi5pc0Rpc3BsYXllZCgpKS50b0JlVHJ1dGh5KCk7XG5cbiAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tlZCcpKS5jbGljaygpO1xuXG4gICAgICAgIGV4cGVjdCh0aHVtYnNVcC5pc0Rpc3BsYXllZCgpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdCh0aHVtYnNEb3duLmlzRGlzcGxheWVkKCkpLnRvQmVGYWxzeSgpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ1Nob3dEaXJlY3RpdmUgPSBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIG11bHRpRWxlbWVudDogdHJ1ZSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgc2NvcGUuJHdhdGNoKGF0dHIubmdTaG93LCBmdW5jdGlvbiBuZ1Nob3dXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAvLyB3ZSdyZSBhZGRpbmcgYSB0ZW1wb3JhcnksIGFuaW1hdGlvbi1zcGVjaWZpYyBjbGFzcyBmb3IgbmctaGlkZSBzaW5jZSB0aGlzIHdheVxuICAgICAgICAvLyB3ZSBjYW4gY29udHJvbCB3aGVuIHRoZSBlbGVtZW50IGlzIGFjdHVhbGx5IGRpc3BsYXllZCBvbiBzY3JlZW4gd2l0aG91dCBoYXZpbmdcbiAgICAgICAgLy8gdG8gaGF2ZSBhIGdsb2JhbC9ncmVlZHkgQ1NTIHNlbGVjdG9yIHRoYXQgYnJlYWtzIHdoZW4gb3RoZXIgYW5pbWF0aW9ucyBhcmUgcnVuLlxuICAgICAgICAvLyBSZWFkOiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy85MTAzI2lzc3VlY29tbWVudC01ODMzNTg0NVxuICAgICAgICAkYW5pbWF0ZVt2YWx1ZSA/ICdyZW1vdmVDbGFzcycgOiAnYWRkQ2xhc3MnXShlbGVtZW50LCBOR19ISURFX0NMQVNTLCB7XG4gICAgICAgICAgdGVtcENsYXNzZXM6IE5HX0hJREVfSU5fUFJPR1JFU1NfQ0xBU1NcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XTtcblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nSGlkZVxuICogQG11bHRpRWxlbWVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0hpZGVgIGRpcmVjdGl2ZSBzaG93cyBvciBoaWRlcyB0aGUgZ2l2ZW4gSFRNTCBlbGVtZW50IGJhc2VkIG9uIHRoZSBleHByZXNzaW9uXG4gKiBwcm92aWRlZCB0byB0aGUgYG5nSGlkZWAgYXR0cmlidXRlLiBUaGUgZWxlbWVudCBpcyBzaG93biBvciBoaWRkZW4gYnkgcmVtb3Zpbmcgb3IgYWRkaW5nXG4gKiB0aGUgYG5nLWhpZGVgIENTUyBjbGFzcyBvbnRvIHRoZSBlbGVtZW50LiBUaGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgcHJlZGVmaW5lZFxuICogaW4gQW5ndWxhckpTIGFuZCBzZXRzIHRoZSBkaXNwbGF5IHN0eWxlIHRvIG5vbmUgKHVzaW5nIGFuICFpbXBvcnRhbnQgZmxhZykuXG4gKiBGb3IgQ1NQIG1vZGUgcGxlYXNlIGFkZCBgYW5ndWxhci1jc3AuY3NzYCB0byB5b3VyIGh0bWwgZmlsZSAoc2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDc3AgbmdDc3B9KS5cbiAqXG4gKiBgYGBodG1sXG4gKiA8IS0tIHdoZW4gJHNjb3BlLm15VmFsdWUgaXMgdHJ1dGh5IChlbGVtZW50IGlzIGhpZGRlbikgLS0+XG4gKiA8ZGl2IG5nLWhpZGU9XCJteVZhbHVlXCIgY2xhc3M9XCJuZy1oaWRlXCI+PC9kaXY+XG4gKlxuICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIGZhbHN5IChlbGVtZW50IGlzIHZpc2libGUpIC0tPlxuICogPGRpdiBuZy1oaWRlPVwibXlWYWx1ZVwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYG5nSGlkZWAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSB0cnV0aHkgdmFsdWUgdGhlbiB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgYWRkZWQgdG8gdGhlIGNsYXNzXG4gKiBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgY2F1c2luZyBpdCB0byBiZWNvbWUgaGlkZGVuLiBXaGVuIGZhbHN5LCB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgcmVtb3ZlZFxuICogZnJvbSB0aGUgZWxlbWVudCBjYXVzaW5nIHRoZSBlbGVtZW50IG5vdCB0byBhcHBlYXIgaGlkZGVuLlxuICpcbiAqICMjIFdoeSBpcyAhaW1wb3J0YW50IHVzZWQ/XG4gKlxuICogWW91IG1heSBiZSB3b25kZXJpbmcgd2h5ICFpbXBvcnRhbnQgaXMgdXNlZCBmb3IgdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzLiBUaGlzIGlzIGJlY2F1c2UgdGhlIGAubmctaGlkZWAgc2VsZWN0b3JcbiAqIGNhbiBiZSBlYXNpbHkgb3ZlcnJpZGRlbiBieSBoZWF2aWVyIHNlbGVjdG9ycy4gRm9yIGV4YW1wbGUsIHNvbWV0aGluZyBhcyBzaW1wbGVcbiAqIGFzIGNoYW5naW5nIHRoZSBkaXNwbGF5IHN0eWxlIG9uIGEgSFRNTCBsaXN0IGl0ZW0gd291bGQgbWFrZSBoaWRkZW4gZWxlbWVudHMgYXBwZWFyIHZpc2libGUuXG4gKiBUaGlzIGFsc28gYmVjb21lcyBhIGJpZ2dlciBpc3N1ZSB3aGVuIGRlYWxpbmcgd2l0aCBDU1MgZnJhbWV3b3Jrcy5cbiAqXG4gKiBCeSB1c2luZyAhaW1wb3J0YW50LCB0aGUgc2hvdyBhbmQgaGlkZSBiZWhhdmlvciB3aWxsIHdvcmsgYXMgZXhwZWN0ZWQgZGVzcGl0ZSBhbnkgY2xhc2ggYmV0d2VlbiBDU1Mgc2VsZWN0b3JcbiAqIHNwZWNpZmljaXR5ICh3aGVuICFpbXBvcnRhbnQgaXNuJ3QgdXNlZCB3aXRoIGFueSBjb25mbGljdGluZyBzdHlsZXMpLiBJZiBhIGRldmVsb3BlciBjaG9vc2VzIHRvIG92ZXJyaWRlIHRoZVxuICogc3R5bGluZyB0byBjaGFuZ2UgaG93IHRvIGhpZGUgYW4gZWxlbWVudCB0aGVuIGl0IGlzIGp1c3QgYSBtYXR0ZXIgb2YgdXNpbmcgIWltcG9ydGFudCBpbiB0aGVpciBvd24gQ1NTIGNvZGUuXG4gKlxuICogIyMjIE92ZXJyaWRpbmcgYC5uZy1oaWRlYFxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoZSBgLm5nLWhpZGVgIGNsYXNzIHdpbGwgc3R5bGUgdGhlIGVsZW1lbnQgd2l0aCBgZGlzcGxheTogbm9uZSFpbXBvcnRhbnRgLiBJZiB5b3Ugd2lzaCB0byBjaGFuZ2VcbiAqIHRoZSBoaWRlIGJlaGF2aW9yIHdpdGggbmdTaG93L25nSGlkZSB0aGVuIHRoaXMgY2FuIGJlIGFjaGlldmVkIGJ5IHJlc3RhdGluZyB0aGUgc3R5bGVzIGZvciB0aGUgYC5uZy1oaWRlYFxuICogY2xhc3MgaW4gQ1NTOlxuICpcbiAqIGBgYGNzc1xuICogLm5nLWhpZGUge1xuICogICAvJiM0MjsgdGhpcyBpcyBqdXN0IGFub3RoZXIgZm9ybSBvZiBoaWRpbmcgYW4gZWxlbWVudCAmIzQyOy9cbiAqICAgZGlzcGxheTogYmxvY2shaW1wb3J0YW50O1xuICogICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gKiAgIHRvcDogLTk5OTlweDtcbiAqICAgbGVmdDogLTk5OTlweDtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEJ5IGRlZmF1bHQgeW91IGRvbid0IG5lZWQgdG8gb3ZlcnJpZGUgaW4gQ1NTIGFueXRoaW5nIGFuZCB0aGUgYW5pbWF0aW9ucyB3aWxsIHdvcmsgYXJvdW5kIHRoZSBkaXNwbGF5IHN0eWxlLlxuICpcbiAqICMjIEEgbm90ZSBhYm91dCBhbmltYXRpb25zIHdpdGggYG5nSGlkZWBcbiAqXG4gKiBBbmltYXRpb25zIGluIG5nU2hvdy9uZ0hpZGUgd29yayB3aXRoIHRoZSBzaG93IGFuZCBoaWRlIGV2ZW50cyB0aGF0IGFyZSB0cmlnZ2VyZWQgd2hlbiB0aGUgZGlyZWN0aXZlIGV4cHJlc3Npb25cbiAqIGlzIHRydWUgYW5kIGZhbHNlLiBUaGlzIHN5c3RlbSB3b3JrcyBsaWtlIHRoZSBhbmltYXRpb24gc3lzdGVtIHByZXNlbnQgd2l0aCBuZ0NsYXNzLCBleGNlcHQgdGhhdCB0aGUgYC5uZy1oaWRlYFxuICogQ1NTIGNsYXNzIGlzIGFkZGVkIGFuZCByZW1vdmVkIGZvciB5b3UgaW5zdGVhZCBvZiB5b3VyIG93biBDU1MgY2xhc3MuXG4gKlxuICogYGBgY3NzXG4gKiAvL1xuICogLy9hIHdvcmtpbmcgZXhhbXBsZSBjYW4gYmUgZm91bmQgYXQgdGhlIGJvdHRvbSBvZiB0aGlzIHBhZ2VcbiAqIC8vXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZCwgLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUge1xuICogICB0cmFuc2l0aW9uOiAwLjVzIGxpbmVhciBhbGw7XG4gKiB9XG4gKlxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQgeyAuLi4gfVxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQubmctaGlkZS1hZGQtYWN0aXZlIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlLm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7IC4uLiB9XG4gKiBgYGBcbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCwgYXMgb2YgQW5ndWxhckpTIHZlcnNpb24gMS4zLjAtYmV0YS4xMSwgdGhlcmUgaXMgbm8gbmVlZCB0byBjaGFuZ2UgdGhlIGRpc3BsYXlcbiAqIHByb3BlcnR5IHRvIGJsb2NrIGR1cmluZyBhbmltYXRpb24gc3RhdGVzLS1uZ0FuaW1hdGUgd2lsbCBoYW5kbGUgdGhlIHN0eWxlIHRvZ2dsaW5nIGF1dG9tYXRpY2FsbHkgZm9yIHlvdS5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogcmVtb3ZlQ2xhc3M6IGAubmctaGlkZWAgLSBoYXBwZW5zIGFmdGVyIHRoZSBgbmdIaWRlYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHRydXRoeSB2YWx1ZSBhbmQganVzdCBiZWZvcmUgdGhlIGNvbnRlbnRzIGFyZSBzZXQgdG8gaGlkZGVuXG4gKiBhZGRDbGFzczogYC5uZy1oaWRlYCAtIGhhcHBlbnMgYWZ0ZXIgdGhlIGBuZ0hpZGVgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgbm9uIHRydXRoeSB2YWx1ZSBhbmQganVzdCBiZWZvcmUgdGhlIGNvbnRlbnRzIGFyZSBzZXQgdG8gdmlzaWJsZVxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0hpZGUgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSB0aGVuXG4gKiAgICAgdGhlIGVsZW1lbnQgaXMgc2hvd24gb3IgaGlkZGVuIHJlc3BlY3RpdmVseS5cbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FuaW1hdGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgQ2xpY2sgbWU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrZWRcIiBhcmlhLWxhYmVsPVwiVG9nZ2xlIG5nU2hvd1wiPjxici8+XG4gICAgICA8ZGl2PlxuICAgICAgICBTaG93OlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2hlY2stZWxlbWVudCBhbmltYXRlLWhpZGVcIiBuZy1zaG93PVwiY2hlY2tlZFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10aHVtYnMtdXBcIj48L3NwYW4+IEkgc2hvdyB1cCB3aGVuIHlvdXIgY2hlY2tib3ggaXMgY2hlY2tlZC5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIEhpZGU6XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjaGVjay1lbGVtZW50IGFuaW1hdGUtaGlkZVwiIG5nLWhpZGU9XCJjaGVja2VkXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRodW1icy1kb3duXCI+PC9zcGFuPiBJIGhpZGUgd2hlbiB5b3VyIGNoZWNrYm94IGlzIGNoZWNrZWQuXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJnbHlwaGljb25zLmNzc1wiPlxuICAgICAgQGltcG9ydCB1cmwoLi4vLi4vY29tcG9uZW50cy9ib290c3RyYXAtMy4xLjEvY3NzL2Jvb3RzdHJhcC5jc3MpO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5hbmltYXRlLWhpZGUge1xuICAgICAgICB0cmFuc2l0aW9uOiBhbGwgbGluZWFyIDAuNXM7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLWhpZGUubmctaGlkZSB7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAwO1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICBwYWRkaW5nOiAwIDEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5jaGVjay1lbGVtZW50IHtcbiAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgICAgfVxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgdGh1bWJzVXAgPSBlbGVtZW50KGJ5LmNzcygnc3Bhbi5nbHlwaGljb24tdGh1bWJzLXVwJykpO1xuICAgICAgdmFyIHRodW1ic0Rvd24gPSBlbGVtZW50KGJ5LmNzcygnc3Bhbi5nbHlwaGljb24tdGh1bWJzLWRvd24nKSk7XG5cbiAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctc2hvdyAvIG5nLWhpZGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KHRodW1ic1VwLmlzRGlzcGxheWVkKCkpLnRvQmVGYWxzeSgpO1xuICAgICAgICBleHBlY3QodGh1bWJzRG93bi5pc0Rpc3BsYXllZCgpKS50b0JlVHJ1dGh5KCk7XG5cbiAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tlZCcpKS5jbGljaygpO1xuXG4gICAgICAgIGV4cGVjdCh0aHVtYnNVcC5pc0Rpc3BsYXllZCgpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdCh0aHVtYnNEb3duLmlzRGlzcGxheWVkKCkpLnRvQmVGYWxzeSgpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0hpZGVEaXJlY3RpdmUgPSBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIG11bHRpRWxlbWVudDogdHJ1ZSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgc2NvcGUuJHdhdGNoKGF0dHIubmdIaWRlLCBmdW5jdGlvbiBuZ0hpZGVXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAvLyBUaGUgY29tbWVudCBpbnNpZGUgb2YgdGhlIG5nU2hvd0RpcmVjdGl2ZSBleHBsYWlucyB3aHkgd2UgYWRkIGFuZFxuICAgICAgICAvLyByZW1vdmUgYSB0ZW1wb3JhcnkgY2xhc3MgZm9yIHRoZSBzaG93L2hpZGUgYW5pbWF0aW9uXG4gICAgICAgICRhbmltYXRlW3ZhbHVlID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKGVsZW1lbnQsTkdfSElERV9DTEFTUywge1xuICAgICAgICAgIHRlbXBDbGFzc2VzOiBOR19ISURFX0lOX1BST0dSRVNTX0NMQVNTXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTdHlsZVxuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nU3R5bGVgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNldCBDU1Mgc3R5bGUgb24gYW4gSFRNTCBlbGVtZW50IGNvbmRpdGlvbmFsbHkuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU3R5bGVcbiAqXG4gKiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB3aGljaCBldmFscyB0byBhblxuICogb2JqZWN0IHdob3NlIGtleXMgYXJlIENTUyBzdHlsZSBuYW1lcyBhbmQgdmFsdWVzIGFyZSBjb3JyZXNwb25kaW5nIHZhbHVlcyBmb3IgdGhvc2UgQ1NTXG4gKiBrZXlzLlxuICpcbiAqIFNpbmNlIHNvbWUgQ1NTIHN0eWxlIG5hbWVzIGFyZSBub3QgdmFsaWQga2V5cyBmb3IgYW4gb2JqZWN0LCB0aGV5IG11c3QgYmUgcXVvdGVkLlxuICogU2VlIHRoZSAnYmFja2dyb3VuZC1jb2xvcicgc3R5bGUgaW4gdGhlIGV4YW1wbGUgYmVsb3cuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwic2V0IGNvbG9yXCIgbmctY2xpY2s9XCJteVN0eWxlPXtjb2xvcjoncmVkJ31cIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cInNldCBiYWNrZ3JvdW5kXCIgbmctY2xpY2s9XCJteVN0eWxlPXsnYmFja2dyb3VuZC1jb2xvcic6J2JsdWUnfVwiPlxuICAgICAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiY2xlYXJcIiBuZy1jbGljaz1cIm15U3R5bGU9e31cIj5cbiAgICAgICAgPGJyLz5cbiAgICAgICAgPHNwYW4gbmctc3R5bGU9XCJteVN0eWxlXCI+U2FtcGxlIFRleHQ8L3NwYW4+XG4gICAgICAgIDxwcmU+bXlTdHlsZT17e215U3R5bGV9fTwvcHJlPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICBzcGFuIHtcbiAgICAgICAgIGNvbG9yOiBibGFjaztcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciBjb2xvclNwYW4gPSBlbGVtZW50KGJ5LmNzcygnc3BhbicpKTtcblxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctc3R5bGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChjb2xvclNwYW4uZ2V0Q3NzVmFsdWUoJ2NvbG9yJykpLnRvQmUoJ3JnYmEoMCwgMCwgMCwgMSknKTtcbiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCdpbnB1dFt2YWx1ZT1cXCdzZXQgY29sb3JcXCddJykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoY29sb3JTcGFuLmdldENzc1ZhbHVlKCdjb2xvcicpKS50b0JlKCdyZ2JhKDI1NSwgMCwgMCwgMSknKTtcbiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCdpbnB1dFt2YWx1ZT1jbGVhcl0nKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChjb2xvclNwYW4uZ2V0Q3NzVmFsdWUoJ2NvbG9yJykpLnRvQmUoJ3JnYmEoMCwgMCwgMCwgMSknKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdTdHlsZURpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gIHNjb3BlLiR3YXRjaChhdHRyLm5nU3R5bGUsIGZ1bmN0aW9uIG5nU3R5bGVXYXRjaEFjdGlvbihuZXdTdHlsZXMsIG9sZFN0eWxlcykge1xuICAgIGlmIChvbGRTdHlsZXMgJiYgKG5ld1N0eWxlcyAhPT0gb2xkU3R5bGVzKSkge1xuICAgICAgZm9yRWFjaChvbGRTdHlsZXMsIGZ1bmN0aW9uKHZhbCwgc3R5bGUpIHsgZWxlbWVudC5jc3Moc3R5bGUsICcnKTt9KTtcbiAgICB9XG4gICAgaWYgKG5ld1N0eWxlcykgZWxlbWVudC5jc3MobmV3U3R5bGVzKTtcbiAgfSwgdHJ1ZSk7XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1N3aXRjaFxuICogQHJlc3RyaWN0IEVBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nU3dpdGNoYCBkaXJlY3RpdmUgaXMgdXNlZCB0byBjb25kaXRpb25hbGx5IHN3YXAgRE9NIHN0cnVjdHVyZSBvbiB5b3VyIHRlbXBsYXRlIGJhc2VkIG9uIGEgc2NvcGUgZXhwcmVzc2lvbi5cbiAqIEVsZW1lbnRzIHdpdGhpbiBgbmdTd2l0Y2hgIGJ1dCB3aXRob3V0IGBuZ1N3aXRjaFdoZW5gIG9yIGBuZ1N3aXRjaERlZmF1bHRgIGRpcmVjdGl2ZXMgd2lsbCBiZSBwcmVzZXJ2ZWQgYXQgdGhlIGxvY2F0aW9uXG4gKiBhcyBzcGVjaWZpZWQgaW4gdGhlIHRlbXBsYXRlLlxuICpcbiAqIFRoZSBkaXJlY3RpdmUgaXRzZWxmIHdvcmtzIHNpbWlsYXIgdG8gbmdJbmNsdWRlLCBob3dldmVyLCBpbnN0ZWFkIG9mIGRvd25sb2FkaW5nIHRlbXBsYXRlIGNvZGUgKG9yIGxvYWRpbmcgaXRcbiAqIGZyb20gdGhlIHRlbXBsYXRlIGNhY2hlKSwgYG5nU3dpdGNoYCBzaW1wbHkgY2hvb3NlcyBvbmUgb2YgdGhlIG5lc3RlZCBlbGVtZW50cyBhbmQgbWFrZXMgaXQgdmlzaWJsZSBiYXNlZCBvbiB3aGljaCBlbGVtZW50XG4gKiBtYXRjaGVzIHRoZSB2YWx1ZSBvYnRhaW5lZCBmcm9tIHRoZSBldmFsdWF0ZWQgZXhwcmVzc2lvbi4gSW4gb3RoZXIgd29yZHMsIHlvdSBkZWZpbmUgYSBjb250YWluZXIgZWxlbWVudFxuICogKHdoZXJlIHlvdSBwbGFjZSB0aGUgZGlyZWN0aXZlKSwgcGxhY2UgYW4gZXhwcmVzc2lvbiBvbiB0aGUgKipgb249XCIuLi5cImAgYXR0cmlidXRlKipcbiAqIChvciB0aGUgKipgbmctc3dpdGNoPVwiLi4uXCJgIGF0dHJpYnV0ZSoqKSwgZGVmaW5lIGFueSBpbm5lciBlbGVtZW50cyBpbnNpZGUgb2YgdGhlIGRpcmVjdGl2ZSBhbmQgcGxhY2VcbiAqIGEgd2hlbiBhdHRyaWJ1dGUgcGVyIGVsZW1lbnQuIFRoZSB3aGVuIGF0dHJpYnV0ZSBpcyB1c2VkIHRvIGluZm9ybSBuZ1N3aXRjaCB3aGljaCBlbGVtZW50IHRvIGRpc3BsYXkgd2hlbiB0aGUgb25cbiAqIGV4cHJlc3Npb24gaXMgZXZhbHVhdGVkLiBJZiBhIG1hdGNoaW5nIGV4cHJlc3Npb24gaXMgbm90IGZvdW5kIHZpYSBhIHdoZW4gYXR0cmlidXRlIHRoZW4gYW4gZWxlbWVudCB3aXRoIHRoZSBkZWZhdWx0XG4gKiBhdHRyaWJ1dGUgaXMgZGlzcGxheWVkLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiBCZSBhd2FyZSB0aGF0IHRoZSBhdHRyaWJ1dGUgdmFsdWVzIHRvIG1hdGNoIGFnYWluc3QgY2Fubm90IGJlIGV4cHJlc3Npb25zLiBUaGV5IGFyZSBpbnRlcnByZXRlZFxuICogYXMgbGl0ZXJhbCBzdHJpbmcgdmFsdWVzIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBGb3IgZXhhbXBsZSwgKipgbmctc3dpdGNoLXdoZW49XCJzb21lVmFsXCJgKiogd2lsbCBtYXRjaCBhZ2FpbnN0IHRoZSBzdHJpbmcgYFwic29tZVZhbFwiYCBub3QgYWdhaW5zdCB0aGVcbiAqIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uIGAkc2NvcGUuc29tZVZhbGAuXG4gKiA8L2Rpdj5cblxuICogQGFuaW1hdGlvbnNcbiAqIGVudGVyIC0gaGFwcGVucyBhZnRlciB0aGUgbmdTd2l0Y2ggY29udGVudHMgY2hhbmdlIGFuZCB0aGUgbWF0Y2hlZCBjaGlsZCBlbGVtZW50IGlzIHBsYWNlZCBpbnNpZGUgdGhlIGNvbnRhaW5lclxuICogbGVhdmUgLSBoYXBwZW5zIGp1c3QgYWZ0ZXIgdGhlIG5nU3dpdGNoIGNvbnRlbnRzIGNoYW5nZSBhbmQganVzdCBiZWZvcmUgdGhlIGZvcm1lciBjb250ZW50cyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBET01cbiAqXG4gKiBAdXNhZ2VcbiAqXG4gKiBgYGBcbiAqIDxBTlkgbmctc3dpdGNoPVwiZXhwcmVzc2lvblwiPlxuICogICA8QU5ZIG5nLXN3aXRjaC13aGVuPVwibWF0Y2hWYWx1ZTFcIj4uLi48L0FOWT5cbiAqICAgPEFOWSBuZy1zd2l0Y2gtd2hlbj1cIm1hdGNoVmFsdWUyXCI+Li4uPC9BTlk+XG4gKiAgIDxBTlkgbmctc3dpdGNoLWRlZmF1bHQ+Li4uPC9BTlk+XG4gKiA8L0FOWT5cbiAqIGBgYFxuICpcbiAqXG4gKiBAc2NvcGVcbiAqIEBwcmlvcml0eSAxMjAwXG4gKiBAcGFyYW0geyp9IG5nU3dpdGNofG9uIGV4cHJlc3Npb24gdG8gbWF0Y2ggYWdhaW5zdCA8Y29kZT5uZy1zd2l0Y2gtd2hlbjwvY29kZT4uXG4gKiBPbiBjaGlsZCBlbGVtZW50cyBhZGQ6XG4gKlxuICogKiBgbmdTd2l0Y2hXaGVuYDogdGhlIGNhc2Ugc3RhdGVtZW50IHRvIG1hdGNoIGFnYWluc3QuIElmIG1hdGNoIHRoZW4gdGhpc1xuICogICBjYXNlIHdpbGwgYmUgZGlzcGxheWVkLiBJZiB0aGUgc2FtZSBtYXRjaCBhcHBlYXJzIG11bHRpcGxlIHRpbWVzLCBhbGwgdGhlXG4gKiAgIGVsZW1lbnRzIHdpbGwgYmUgZGlzcGxheWVkLlxuICogKiBgbmdTd2l0Y2hEZWZhdWx0YDogdGhlIGRlZmF1bHQgY2FzZSB3aGVuIG5vIG90aGVyIGNhc2UgbWF0Y2guIElmIHRoZXJlXG4gKiAgIGFyZSBtdWx0aXBsZSBkZWZhdWx0IGNhc2VzLCBhbGwgb2YgdGhlbSB3aWxsIGJlIGRpc3BsYXllZCB3aGVuIG5vIG90aGVyXG4gKiAgIGNhc2UgbWF0Y2guXG4gKlxuICpcbiAqIEBleGFtcGxlXG4gIDxleGFtcGxlIG1vZHVsZT1cInN3aXRjaEV4YW1wbGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cInNlbGVjdGlvblwiIG5nLW9wdGlvbnM9XCJpdGVtIGZvciBpdGVtIGluIGl0ZW1zXCI+XG4gICAgICAgIDwvc2VsZWN0PlxuICAgICAgICA8Y29kZT5zZWxlY3Rpb249e3tzZWxlY3Rpb259fTwvY29kZT5cbiAgICAgICAgPGhyLz5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFuaW1hdGUtc3dpdGNoLWNvbnRhaW5lclwiXG4gICAgICAgICAgbmctc3dpdGNoIG9uPVwic2VsZWN0aW9uXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYW5pbWF0ZS1zd2l0Y2hcIiBuZy1zd2l0Y2gtd2hlbj1cInNldHRpbmdzXCI+U2V0dGluZ3MgRGl2PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYW5pbWF0ZS1zd2l0Y2hcIiBuZy1zd2l0Y2gtd2hlbj1cImhvbWVcIj5Ib21lIFNwYW48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhbmltYXRlLXN3aXRjaFwiIG5nLXN3aXRjaC1kZWZhdWx0PmRlZmF1bHQ8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ3N3aXRjaEV4YW1wbGUnLCBbJ25nQW5pbWF0ZSddKVxuICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICRzY29wZS5pdGVtcyA9IFsnc2V0dGluZ3MnLCAnaG9tZScsICdvdGhlciddO1xuICAgICAgICAgICRzY29wZS5zZWxlY3Rpb24gPSAkc2NvcGUuaXRlbXNbMF07XG4gICAgICAgIH1dKTtcbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gtY29udGFpbmVyIHtcbiAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7XG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGhlaWdodDo0MHB4O1xuICAgICAgICBvdmVyZmxvdzpoaWRkZW47XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXN3aXRjaCB7XG4gICAgICAgIHBhZGRpbmc6MTBweDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtc3dpdGNoLm5nLWFuaW1hdGUge1xuICAgICAgICB0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XG5cbiAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XG4gICAgICAgIHRvcDowO1xuICAgICAgICBsZWZ0OjA7XG4gICAgICAgIHJpZ2h0OjA7XG4gICAgICAgIGJvdHRvbTowO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctbGVhdmUubmctbGVhdmUtYWN0aXZlLFxuICAgICAgLmFuaW1hdGUtc3dpdGNoLm5nLWVudGVyIHtcbiAgICAgICAgdG9wOi01MHB4O1xuICAgICAgfVxuICAgICAgLmFuaW1hdGUtc3dpdGNoLm5nLWxlYXZlLFxuICAgICAgLmFuaW1hdGUtc3dpdGNoLm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7XG4gICAgICAgIHRvcDowO1xuICAgICAgfVxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgc3dpdGNoRWxlbSA9IGVsZW1lbnQoYnkuY3NzKCdbbmctc3dpdGNoXScpKTtcbiAgICAgIHZhciBzZWxlY3QgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzZWxlY3Rpb24nKSk7XG5cbiAgICAgIGl0KCdzaG91bGQgc3RhcnQgaW4gc2V0dGluZ3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KHN3aXRjaEVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9TZXR0aW5ncyBEaXYvKTtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2UgdG8gaG9tZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxlY3QuYWxsKGJ5LmNzcygnb3B0aW9uJykpLmdldCgxKS5jbGljaygpO1xuICAgICAgICBleHBlY3Qoc3dpdGNoRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL0hvbWUgU3Bhbi8pO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIHNlbGVjdCBkZWZhdWx0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGVjdC5hbGwoYnkuY3NzKCdvcHRpb24nKSkuZ2V0KDIpLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChzd2l0Y2hFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvZGVmYXVsdC8pO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ1N3aXRjaERpcmVjdGl2ZSA9IFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6ICduZ1N3aXRjaCcsXG5cbiAgICAvLyBhc2tzIGZvciAkc2NvcGUgdG8gZm9vbCB0aGUgQkMgY29udHJvbGxlciBtb2R1bGVcbiAgICBjb250cm9sbGVyOiBbJyRzY29wZScsIGZ1bmN0aW9uIG5nU3dpdGNoQ29udHJvbGxlcigpIHtcbiAgICAgdGhpcy5jYXNlcyA9IHt9O1xuICAgIH1dLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBuZ1N3aXRjaENvbnRyb2xsZXIpIHtcbiAgICAgIHZhciB3YXRjaEV4cHIgPSBhdHRyLm5nU3dpdGNoIHx8IGF0dHIub24sXG4gICAgICAgICAgc2VsZWN0ZWRUcmFuc2NsdWRlcyA9IFtdLFxuICAgICAgICAgIHNlbGVjdGVkRWxlbWVudHMgPSBbXSxcbiAgICAgICAgICBwcmV2aW91c0xlYXZlQW5pbWF0aW9ucyA9IFtdLFxuICAgICAgICAgIHNlbGVjdGVkU2NvcGVzID0gW107XG5cbiAgICAgIHZhciBzcGxpY2VGYWN0b3J5ID0gZnVuY3Rpb24oYXJyYXksIGluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgeyBhcnJheS5zcGxpY2UoaW5kZXgsIDEpOyB9O1xuICAgICAgfTtcblxuICAgICAgc2NvcGUuJHdhdGNoKHdhdGNoRXhwciwgZnVuY3Rpb24gbmdTd2l0Y2hXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgaSwgaWk7XG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gcHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgICRhbmltYXRlLmNhbmNlbChwcmV2aW91c0xlYXZlQW5pbWF0aW9uc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMubGVuZ3RoID0gMDtcblxuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHNlbGVjdGVkU2NvcGVzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICB2YXIgc2VsZWN0ZWQgPSBnZXRCbG9ja05vZGVzKHNlbGVjdGVkRWxlbWVudHNbaV0uY2xvbmUpO1xuICAgICAgICAgIHNlbGVjdGVkU2NvcGVzW2ldLiRkZXN0cm95KCk7XG4gICAgICAgICAgdmFyIHByb21pc2UgPSBwcmV2aW91c0xlYXZlQW5pbWF0aW9uc1tpXSA9ICRhbmltYXRlLmxlYXZlKHNlbGVjdGVkKTtcbiAgICAgICAgICBwcm9taXNlLnRoZW4oc3BsaWNlRmFjdG9yeShwcmV2aW91c0xlYXZlQW5pbWF0aW9ucywgaSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZWN0ZWRFbGVtZW50cy5sZW5ndGggPSAwO1xuICAgICAgICBzZWxlY3RlZFNjb3Blcy5sZW5ndGggPSAwO1xuXG4gICAgICAgIGlmICgoc2VsZWN0ZWRUcmFuc2NsdWRlcyA9IG5nU3dpdGNoQ29udHJvbGxlci5jYXNlc1snIScgKyB2YWx1ZV0gfHwgbmdTd2l0Y2hDb250cm9sbGVyLmNhc2VzWyc/J10pKSB7XG4gICAgICAgICAgZm9yRWFjaChzZWxlY3RlZFRyYW5zY2x1ZGVzLCBmdW5jdGlvbihzZWxlY3RlZFRyYW5zY2x1ZGUpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkVHJhbnNjbHVkZS50cmFuc2NsdWRlKGZ1bmN0aW9uKGNhc2VFbGVtZW50LCBzZWxlY3RlZFNjb3BlKSB7XG4gICAgICAgICAgICAgIHNlbGVjdGVkU2NvcGVzLnB1c2goc2VsZWN0ZWRTY29wZSk7XG4gICAgICAgICAgICAgIHZhciBhbmNob3IgPSBzZWxlY3RlZFRyYW5zY2x1ZGUuZWxlbWVudDtcbiAgICAgICAgICAgICAgY2FzZUVsZW1lbnRbY2FzZUVsZW1lbnQubGVuZ3RoKytdID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnIGVuZCBuZ1N3aXRjaFdoZW46ICcpO1xuICAgICAgICAgICAgICB2YXIgYmxvY2sgPSB7IGNsb25lOiBjYXNlRWxlbWVudCB9O1xuXG4gICAgICAgICAgICAgIHNlbGVjdGVkRWxlbWVudHMucHVzaChibG9jayk7XG4gICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNhc2VFbGVtZW50LCBhbmNob3IucGFyZW50KCksIGFuY2hvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xufV07XG5cbnZhciBuZ1N3aXRjaFdoZW5EaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7XG4gIHRyYW5zY2x1ZGU6ICdlbGVtZW50JyxcbiAgcHJpb3JpdHk6IDEyMDAsXG4gIHJlcXVpcmU6ICdebmdTd2l0Y2gnLFxuICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybCwgJHRyYW5zY2x1ZGUpIHtcbiAgICBjdHJsLmNhc2VzWychJyArIGF0dHJzLm5nU3dpdGNoV2hlbl0gPSAoY3RybC5jYXNlc1snIScgKyBhdHRycy5uZ1N3aXRjaFdoZW5dIHx8IFtdKTtcbiAgICBjdHJsLmNhc2VzWychJyArIGF0dHJzLm5nU3dpdGNoV2hlbl0ucHVzaCh7IHRyYW5zY2x1ZGU6ICR0cmFuc2NsdWRlLCBlbGVtZW50OiBlbGVtZW50IH0pO1xuICB9XG59KTtcblxudmFyIG5nU3dpdGNoRGVmYXVsdERpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHtcbiAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICBwcmlvcml0eTogMTIwMCxcbiAgcmVxdWlyZTogJ15uZ1N3aXRjaCcsXG4gIG11bHRpRWxlbWVudDogdHJ1ZSxcbiAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICR0cmFuc2NsdWRlKSB7XG4gICAgY3RybC5jYXNlc1snPyddID0gKGN0cmwuY2FzZXNbJz8nXSB8fCBbXSk7XG4gICAgY3RybC5jYXNlc1snPyddLnB1c2goeyB0cmFuc2NsdWRlOiAkdHJhbnNjbHVkZSwgZWxlbWVudDogZWxlbWVudCB9KTtcbiAgIH1cbn0pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nVHJhbnNjbHVkZVxuICogQHJlc3RyaWN0IEVBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGlyZWN0aXZlIHRoYXQgbWFya3MgdGhlIGluc2VydGlvbiBwb2ludCBmb3IgdGhlIHRyYW5zY2x1ZGVkIERPTSBvZiB0aGUgbmVhcmVzdCBwYXJlbnQgZGlyZWN0aXZlIHRoYXQgdXNlcyB0cmFuc2NsdXNpb24uXG4gKlxuICogQW55IGV4aXN0aW5nIGNvbnRlbnQgb2YgdGhlIGVsZW1lbnQgdGhhdCB0aGlzIGRpcmVjdGl2ZSBpcyBwbGFjZWQgb24gd2lsbCBiZSByZW1vdmVkIGJlZm9yZSB0aGUgdHJhbnNjbHVkZWQgY29udGVudCBpcyBpbnNlcnRlZC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwidHJhbnNjbHVkZUV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3RyYW5zY2x1ZGVFeGFtcGxlJywgW10pXG4gICAgICAgICAgLmRpcmVjdGl2ZSgncGFuZScsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgICAgICAgICAgc2NvcGU6IHsgdGl0bGU6J0AnIH0sXG4gICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgc3R5bGU9XCJib3JkZXI6IDFweCBzb2xpZCBibGFjaztcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjogZ3JheVwiPnt7dGl0bGV9fTwvZGl2PicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxuZy10cmFuc2NsdWRlPjwvbmctdHJhbnNjbHVkZT4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+J1xuICAgICAgICAgICAgIH07XG4gICAgICAgICB9KVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgJHNjb3BlLnRpdGxlID0gJ0xvcmVtIElwc3VtJztcbiAgICAgICAgICAgJHNjb3BlLnRleHQgPSAnTmVxdWUgcG9ycm8gcXVpc3F1YW0gZXN0IHF1aSBkb2xvcmVtIGlwc3VtIHF1aWEgZG9sb3IuLi4nO1xuICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJ0aXRsZVwiIGFyaWEtbGFiZWw9XCJ0aXRsZVwiPiA8YnIvPlxuICAgICAgICAgPHRleHRhcmVhIG5nLW1vZGVsPVwidGV4dFwiIGFyaWEtbGFiZWw9XCJ0ZXh0XCI+PC90ZXh0YXJlYT4gPGJyLz5cbiAgICAgICAgIDxwYW5lIHRpdGxlPVwie3t0aXRsZX19XCI+e3t0ZXh0fX08L3BhbmU+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIGhhdmUgdHJhbnNjbHVkZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdGl0bGVFbGVtZW50ID0gZWxlbWVudChieS5tb2RlbCgndGl0bGUnKSk7XG4gICAgICAgICAgdGl0bGVFbGVtZW50LmNsZWFyKCk7XG4gICAgICAgICAgdGl0bGVFbGVtZW50LnNlbmRLZXlzKCdUSVRMRScpO1xuICAgICAgICAgIHZhciB0ZXh0RWxlbWVudCA9IGVsZW1lbnQoYnkubW9kZWwoJ3RleHQnKSk7XG4gICAgICAgICAgdGV4dEVsZW1lbnQuY2xlYXIoKTtcbiAgICAgICAgICB0ZXh0RWxlbWVudC5zZW5kS2V5cygnVEVYVCcpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3RpdGxlJykpLmdldFRleHQoKSkudG9FcXVhbCgnVElUTEUnKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd0ZXh0JykpLmdldFRleHQoKSkudG9FcXVhbCgnVEVYVCcpO1xuICAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICpcbiAqL1xudmFyIG5nVHJhbnNjbHVkZURpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHtcbiAgcmVzdHJpY3Q6ICdFQUMnLFxuICBsaW5rOiBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsIGNvbnRyb2xsZXIsICR0cmFuc2NsdWRlKSB7XG4gICAgaWYgKCEkdHJhbnNjbHVkZSkge1xuICAgICAgdGhyb3cgbWluRXJyKCduZ1RyYW5zY2x1ZGUnKSgnb3JwaGFuJyxcbiAgICAgICAnSWxsZWdhbCB1c2Ugb2YgbmdUcmFuc2NsdWRlIGRpcmVjdGl2ZSBpbiB0aGUgdGVtcGxhdGUhICcgK1xuICAgICAgICdObyBwYXJlbnQgZGlyZWN0aXZlIHRoYXQgcmVxdWlyZXMgYSB0cmFuc2NsdXNpb24gZm91bmQuICcgK1xuICAgICAgICdFbGVtZW50OiB7MH0nLFxuICAgICAgIHN0YXJ0aW5nVGFnKCRlbGVtZW50KSk7XG4gICAgfVxuXG4gICAgJHRyYW5zY2x1ZGUoZnVuY3Rpb24oY2xvbmUpIHtcbiAgICAgICRlbGVtZW50LmVtcHR5KCk7XG4gICAgICAkZWxlbWVudC5hcHBlbmQoY2xvbmUpO1xuICAgIH0pO1xuICB9XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBzY3JpcHRcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBMb2FkIHRoZSBjb250ZW50IG9mIGEgYDxzY3JpcHQ+YCBlbGVtZW50IGludG8ge0BsaW5rIG5nLiR0ZW1wbGF0ZUNhY2hlIGAkdGVtcGxhdGVDYWNoZWB9LCBzbyB0aGF0IHRoZVxuICogdGVtcGxhdGUgY2FuIGJlIHVzZWQgYnkge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0luY2x1ZGUgYG5nSW5jbHVkZWB9LFxuICoge0BsaW5rIG5nUm91dGUuZGlyZWN0aXZlOm5nVmlldyBgbmdWaWV3YH0sIG9yIHtAbGluayBndWlkZS9kaXJlY3RpdmUgZGlyZWN0aXZlc30uIFRoZSB0eXBlIG9mIHRoZVxuICogYDxzY3JpcHQ+YCBlbGVtZW50IG11c3QgYmUgc3BlY2lmaWVkIGFzIGB0ZXh0L25nLXRlbXBsYXRlYCwgYW5kIGEgY2FjaGUgbmFtZSBmb3IgdGhlIHRlbXBsYXRlIG11c3QgYmVcbiAqIGFzc2lnbmVkIHRocm91Z2ggdGhlIGVsZW1lbnQncyBgaWRgLCB3aGljaCBjYW4gdGhlbiBiZSB1c2VkIGFzIGEgZGlyZWN0aXZlJ3MgYHRlbXBsYXRlVXJsYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBNdXN0IGJlIHNldCB0byBgJ3RleHQvbmctdGVtcGxhdGUnYC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBDYWNoZSBuYW1lIG9mIHRoZSB0ZW1wbGF0ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZT5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPHNjcmlwdCB0eXBlPVwidGV4dC9uZy10ZW1wbGF0ZVwiIGlkPVwiL3RwbC5odG1sXCI+XG4gICAgICAgIENvbnRlbnQgb2YgdGhlIHRlbXBsYXRlLlxuICAgICAgPC9zY3JpcHQ+XG5cbiAgICAgIDxhIG5nLWNsaWNrPVwiY3VycmVudFRwbD0nL3RwbC5odG1sJ1wiIGlkPVwidHBsLWxpbmtcIj5Mb2FkIGlubGluZWQgdGVtcGxhdGU8L2E+XG4gICAgICA8ZGl2IGlkPVwidHBsLWNvbnRlbnRcIiBuZy1pbmNsdWRlIHNyYz1cImN1cnJlbnRUcGxcIj48L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgaXQoJ3Nob3VsZCBsb2FkIHRlbXBsYXRlIGRlZmluZWQgaW5zaWRlIHNjcmlwdCB0YWcnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZWxlbWVudChieS5jc3MoJyN0cGwtbGluaycpKS5jbGljaygpO1xuICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJyN0cGwtY29udGVudCcpKS5nZXRUZXh0KCkpLnRvTWF0Y2goL0NvbnRlbnQgb2YgdGhlIHRlbXBsYXRlLyk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqL1xudmFyIHNjcmlwdERpcmVjdGl2ZSA9IFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikge1xuICAgICAgaWYgKGF0dHIudHlwZSA9PSAndGV4dC9uZy10ZW1wbGF0ZScpIHtcbiAgICAgICAgdmFyIHRlbXBsYXRlVXJsID0gYXR0ci5pZCxcbiAgICAgICAgICAgIHRleHQgPSBlbGVtZW50WzBdLnRleHQ7XG5cbiAgICAgICAgJHRlbXBsYXRlQ2FjaGUucHV0KHRlbXBsYXRlVXJsLCB0ZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XTtcblxudmFyIG5vb3BOZ01vZGVsQ29udHJvbGxlciA9IHsgJHNldFZpZXdWYWx1ZTogbm9vcCwgJHJlbmRlcjogbm9vcCB9O1xuXG5mdW5jdGlvbiBjaHJvbWVIYWNrKG9wdGlvbkVsZW1lbnQpIHtcbiAgLy8gV29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM4MTQ1OVxuICAvLyBBZGRpbmcgYW4gPG9wdGlvbiBzZWxlY3RlZD1cInNlbGVjdGVkXCI+IGVsZW1lbnQgdG8gYSA8c2VsZWN0IHJlcXVpcmVkPVwicmVxdWlyZWRcIj4gc2hvdWxkXG4gIC8vIGF1dG9tYXRpY2FsbHkgc2VsZWN0IHRoZSBuZXcgZWxlbWVudFxuICBpZiAob3B0aW9uRWxlbWVudFswXS5oYXNBdHRyaWJ1dGUoJ3NlbGVjdGVkJykpIHtcbiAgICBvcHRpb25FbGVtZW50WzBdLnNlbGVjdGVkID0gdHJ1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEBuZ2RvYyB0eXBlXG4gKiBAbmFtZSAgc2VsZWN0LlNlbGVjdENvbnRyb2xsZXJcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGNvbnRyb2xsZXIgZm9yIHRoZSBgPHNlbGVjdD5gIGRpcmVjdGl2ZS4gVGhpcyBwcm92aWRlcyBzdXBwb3J0IGZvciByZWFkaW5nXG4gKiBhbmQgd3JpdGluZyB0aGUgc2VsZWN0ZWQgdmFsdWUocykgb2YgdGhlIGNvbnRyb2wgYW5kIGFsc28gY29vcmRpbmF0ZXMgZHluYW1pY2FsbHlcbiAqIGFkZGVkIGA8b3B0aW9uPmAgZWxlbWVudHMsIHBlcmhhcHMgYnkgYW4gYG5nUmVwZWF0YCBkaXJlY3RpdmUuXG4gKi9cbnZhciBTZWxlY3RDb250cm9sbGVyID1cbiAgICAgICAgWyckZWxlbWVudCcsICckc2NvcGUnLCAnJGF0dHJzJywgZnVuY3Rpb24oJGVsZW1lbnQsICRzY29wZSwgJGF0dHJzKSB7XG5cbiAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgb3B0aW9uc01hcCA9IG5ldyBIYXNoTWFwKCk7XG5cbiAgLy8gSWYgdGhlIG5nTW9kZWwgZG9lc24ndCBnZXQgcHJvdmlkZWQgdGhlbiBwcm92aWRlIGEgZHVtbXkgbm9vcCB2ZXJzaW9uIHRvIHByZXZlbnQgZXJyb3JzXG4gIHNlbGYubmdNb2RlbEN0cmwgPSBub29wTmdNb2RlbENvbnRyb2xsZXI7XG5cbiAgLy8gVGhlIFwidW5rbm93blwiIG9wdGlvbiBpcyBvbmUgdGhhdCBpcyBwcmVwZW5kZWQgdG8gdGhlIGxpc3QgaWYgdGhlIHZpZXdWYWx1ZVxuICAvLyBkb2VzIG5vdCBtYXRjaCBhbnkgb2YgdGhlIG9wdGlvbnMuIFdoZW4gaXQgaXMgcmVuZGVyZWQgdGhlIHZhbHVlIG9mIHRoZSB1bmtub3duXG4gIC8vIG9wdGlvbiBpcyAnPyBYWFggPycgd2hlcmUgWFhYIGlzIHRoZSBoYXNoS2V5IG9mIHRoZSB2YWx1ZSB0aGF0IGlzIG5vdCBrbm93bi5cbiAgLy9cbiAgLy8gV2UgY2FuJ3QganVzdCBqcUxpdGUoJzxvcHRpb24+Jykgc2luY2UganFMaXRlIGlzIG5vdCBzbWFydCBlbm91Z2hcbiAgLy8gdG8gY3JlYXRlIGl0IGluIDxzZWxlY3Q+IGFuZCBJRSBiYXJmcyBvdGhlcndpc2UuXG4gIHNlbGYudW5rbm93bk9wdGlvbiA9IGpxTGl0ZShkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKSk7XG4gIHNlbGYucmVuZGVyVW5rbm93bk9wdGlvbiA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHZhciB1bmtub3duVmFsID0gJz8gJyArIGhhc2hLZXkodmFsKSArICcgPyc7XG4gICAgc2VsZi51bmtub3duT3B0aW9uLnZhbCh1bmtub3duVmFsKTtcbiAgICAkZWxlbWVudC5wcmVwZW5kKHNlbGYudW5rbm93bk9wdGlvbik7XG4gICAgJGVsZW1lbnQudmFsKHVua25vd25WYWwpO1xuICB9O1xuXG4gICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgLy8gZGlzYWJsZSB1bmtub3duIG9wdGlvbiBzbyB0aGF0IHdlIGRvbid0IGRvIHdvcmsgd2hlbiB0aGUgd2hvbGUgc2VsZWN0IGlzIGJlaW5nIGRlc3Ryb3llZFxuICAgIHNlbGYucmVuZGVyVW5rbm93bk9wdGlvbiA9IG5vb3A7XG4gIH0pO1xuXG4gIHNlbGYucmVtb3ZlVW5rbm93bk9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChzZWxmLnVua25vd25PcHRpb24ucGFyZW50KCkpIHNlbGYudW5rbm93bk9wdGlvbi5yZW1vdmUoKTtcbiAgfTtcblxuXG4gIC8vIFJlYWQgdGhlIHZhbHVlIG9mIHRoZSBzZWxlY3QgY29udHJvbCwgdGhlIGltcGxlbWVudGF0aW9uIG9mIHRoaXMgY2hhbmdlcyBkZXBlbmRpbmdcbiAgLy8gdXBvbiB3aGV0aGVyIHRoZSBzZWxlY3QgY2FuIGhhdmUgbXVsdGlwbGUgdmFsdWVzIGFuZCB3aGV0aGVyIG5nT3B0aW9ucyBpcyBhdCB3b3JrLlxuICBzZWxmLnJlYWRWYWx1ZSA9IGZ1bmN0aW9uIHJlYWRTaW5nbGVWYWx1ZSgpIHtcbiAgICBzZWxmLnJlbW92ZVVua25vd25PcHRpb24oKTtcbiAgICByZXR1cm4gJGVsZW1lbnQudmFsKCk7XG4gIH07XG5cblxuICAvLyBXcml0ZSB0aGUgdmFsdWUgdG8gdGhlIHNlbGVjdCBjb250cm9sLCB0aGUgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBjaGFuZ2VzIGRlcGVuZGluZ1xuICAvLyB1cG9uIHdoZXRoZXIgdGhlIHNlbGVjdCBjYW4gaGF2ZSBtdWx0aXBsZSB2YWx1ZXMgYW5kIHdoZXRoZXIgbmdPcHRpb25zIGlzIGF0IHdvcmsuXG4gIHNlbGYud3JpdGVWYWx1ZSA9IGZ1bmN0aW9uIHdyaXRlU2luZ2xlVmFsdWUodmFsdWUpIHtcbiAgICBpZiAoc2VsZi5oYXNPcHRpb24odmFsdWUpKSB7XG4gICAgICBzZWxmLnJlbW92ZVVua25vd25PcHRpb24oKTtcbiAgICAgICRlbGVtZW50LnZhbCh2YWx1ZSk7XG4gICAgICBpZiAodmFsdWUgPT09ICcnKSBzZWxmLmVtcHR5T3B0aW9uLnByb3AoJ3NlbGVjdGVkJywgdHJ1ZSk7IC8vIHRvIG1ha2UgSUU5IGhhcHB5XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsICYmIHNlbGYuZW1wdHlPcHRpb24pIHtcbiAgICAgICAgc2VsZi5yZW1vdmVVbmtub3duT3B0aW9uKCk7XG4gICAgICAgICRlbGVtZW50LnZhbCgnJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLnJlbmRlclVua25vd25PcHRpb24odmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuXG4gIC8vIFRlbGwgdGhlIHNlbGVjdCBjb250cm9sIHRoYXQgYW4gb3B0aW9uLCB3aXRoIHRoZSBnaXZlbiB2YWx1ZSwgaGFzIGJlZW4gYWRkZWRcbiAgc2VsZi5hZGRPcHRpb24gPSBmdW5jdGlvbih2YWx1ZSwgZWxlbWVudCkge1xuICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KHZhbHVlLCAnXCJvcHRpb24gdmFsdWVcIicpO1xuICAgIGlmICh2YWx1ZSA9PT0gJycpIHtcbiAgICAgIHNlbGYuZW1wdHlPcHRpb24gPSBlbGVtZW50O1xuICAgIH1cbiAgICB2YXIgY291bnQgPSBvcHRpb25zTWFwLmdldCh2YWx1ZSkgfHwgMDtcbiAgICBvcHRpb25zTWFwLnB1dCh2YWx1ZSwgY291bnQgKyAxKTtcbiAgICBzZWxmLm5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICBjaHJvbWVIYWNrKGVsZW1lbnQpO1xuICB9O1xuXG4gIC8vIFRlbGwgdGhlIHNlbGVjdCBjb250cm9sIHRoYXQgYW4gb3B0aW9uLCB3aXRoIHRoZSBnaXZlbiB2YWx1ZSwgaGFzIGJlZW4gcmVtb3ZlZFxuICBzZWxmLnJlbW92ZU9wdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIGNvdW50ID0gb3B0aW9uc01hcC5nZXQodmFsdWUpO1xuICAgIGlmIChjb3VudCkge1xuICAgICAgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgICAgIG9wdGlvbnNNYXAucmVtb3ZlKHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlID09PSAnJykge1xuICAgICAgICAgIHNlbGYuZW1wdHlPcHRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdGlvbnNNYXAucHV0KHZhbHVlLCBjb3VudCAtIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBDaGVjayB3aGV0aGVyIHRoZSBzZWxlY3QgY29udHJvbCBoYXMgYW4gb3B0aW9uIG1hdGNoaW5nIHRoZSBnaXZlbiB2YWx1ZVxuICBzZWxmLmhhc09wdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhb3B0aW9uc01hcC5nZXQodmFsdWUpO1xuICB9O1xuXG5cbiAgc2VsZi5yZWdpc3Rlck9wdGlvbiA9IGZ1bmN0aW9uKG9wdGlvblNjb3BlLCBvcHRpb25FbGVtZW50LCBvcHRpb25BdHRycywgaW50ZXJwb2xhdGVWYWx1ZUZuLCBpbnRlcnBvbGF0ZVRleHRGbikge1xuXG4gICAgaWYgKGludGVycG9sYXRlVmFsdWVGbikge1xuICAgICAgLy8gVGhlIHZhbHVlIGF0dHJpYnV0ZSBpcyBpbnRlcnBvbGF0ZWRcbiAgICAgIHZhciBvbGRWYWw7XG4gICAgICBvcHRpb25BdHRycy4kb2JzZXJ2ZSgndmFsdWUnLCBmdW5jdGlvbiB2YWx1ZUF0dHJpYnV0ZU9ic2VydmVBY3Rpb24obmV3VmFsKSB7XG4gICAgICAgIGlmIChpc0RlZmluZWQob2xkVmFsKSkge1xuICAgICAgICAgIHNlbGYucmVtb3ZlT3B0aW9uKG9sZFZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgb2xkVmFsID0gbmV3VmFsO1xuICAgICAgICBzZWxmLmFkZE9wdGlvbihuZXdWYWwsIG9wdGlvbkVsZW1lbnQpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChpbnRlcnBvbGF0ZVRleHRGbikge1xuICAgICAgLy8gVGhlIHRleHQgY29udGVudCBpcyBpbnRlcnBvbGF0ZWRcbiAgICAgIG9wdGlvblNjb3BlLiR3YXRjaChpbnRlcnBvbGF0ZVRleHRGbiwgZnVuY3Rpb24gaW50ZXJwb2xhdGVXYXRjaEFjdGlvbihuZXdWYWwsIG9sZFZhbCkge1xuICAgICAgICBvcHRpb25BdHRycy4kc2V0KCd2YWx1ZScsIG5ld1ZhbCk7XG4gICAgICAgIGlmIChvbGRWYWwgIT09IG5ld1ZhbCkge1xuICAgICAgICAgIHNlbGYucmVtb3ZlT3B0aW9uKG9sZFZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5hZGRPcHRpb24obmV3VmFsLCBvcHRpb25FbGVtZW50KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGUgdmFsdWUgYXR0cmlidXRlIGlzIHN0YXRpY1xuICAgICAgc2VsZi5hZGRPcHRpb24ob3B0aW9uQXR0cnMudmFsdWUsIG9wdGlvbkVsZW1lbnQpO1xuICAgIH1cblxuICAgIG9wdGlvbkVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLnJlbW92ZU9wdGlvbihvcHRpb25BdHRycy52YWx1ZSk7XG4gICAgICBzZWxmLm5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICB9KTtcbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIHNlbGVjdFxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhUTUwgYFNFTEVDVGAgZWxlbWVudCB3aXRoIGFuZ3VsYXIgZGF0YS1iaW5kaW5nLlxuICpcbiAqIFRoZSBgc2VsZWN0YCBkaXJlY3RpdmUgaXMgdXNlZCB0b2dldGhlciB3aXRoIHtAbGluayBuZ01vZGVsIGBuZ01vZGVsYH0gdG8gcHJvdmlkZSBkYXRhLWJpbmRpbmdcbiAqIGJldHdlZW4gdGhlIHNjb3BlIGFuZCB0aGUgYDxzZWxlY3Q+YCBjb250cm9sIChpbmNsdWRpbmcgc2V0dGluZyBkZWZhdWx0IHZhbHVlcykuXG4gKiDDjHQgYWxzbyBoYW5kbGVzIGR5bmFtaWMgYDxvcHRpb24+YCBlbGVtZW50cywgd2hpY2ggY2FuIGJlIGFkZGVkIHVzaW5nIHRoZSB7QGxpbmsgbmdSZXBlYXQgYG5nUmVwZWF0fWAgb3JcbiAqIHtAbGluayBuZ09wdGlvbnMgYG5nT3B0aW9uc2B9IGRpcmVjdGl2ZXMuXG4gKlxuICogV2hlbiBhbiBpdGVtIGluIHRoZSBgPHNlbGVjdD5gIG1lbnUgaXMgc2VsZWN0ZWQsIHRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHdpbGwgYmUgYm91bmRcbiAqIHRvIHRoZSBtb2RlbCBpZGVudGlmaWVkIGJ5IHRoZSBgbmdNb2RlbGAgZGlyZWN0aXZlLiBXaXRoIHN0YXRpYyBvciByZXBlYXRlZCBvcHRpb25zLCB0aGlzIGlzXG4gKiB0aGUgY29udGVudCBvZiB0aGUgYHZhbHVlYCBhdHRyaWJ1dGUgb3IgdGhlIHRleHRDb250ZW50IG9mIHRoZSBgPG9wdGlvbj5gLCBpZiB0aGUgdmFsdWUgYXR0cmlidXRlIGlzIG1pc3NpbmcuXG4gKiBJZiB5b3Ugd2FudCBkeW5hbWljIHZhbHVlIGF0dHJpYnV0ZXMsIHlvdSBjYW4gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoZSB2YWx1ZSBhdHRyaWJ1dGUuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqIE5vdGUgdGhhdCB0aGUgdmFsdWUgb2YgYSBgc2VsZWN0YCBkaXJlY3RpdmUgdXNlZCB3aXRob3V0IGBuZ09wdGlvbnNgIGlzIGFsd2F5cyBhIHN0cmluZy5cbiAqIFdoZW4gdGhlIG1vZGVsIG5lZWRzIHRvIGJlIGJvdW5kIHRvIGEgbm9uLXN0cmluZyB2YWx1ZSwgeW91IG11c3QgZWl0aGVyIGV4cGxpY3RseSBjb252ZXJ0IGl0XG4gKiB1c2luZyBhIGRpcmVjdGl2ZSAoc2VlIGV4YW1wbGUgYmVsb3cpIG9yIHVzZSBgbmdPcHRpb25zYCB0byBzcGVjaWZ5IHRoZSBzZXQgb2Ygb3B0aW9ucy5cbiAqIFRoaXMgaXMgYmVjYXVzZSBhbiBvcHRpb24gZWxlbWVudCBjYW4gb25seSBiZSBib3VuZCB0byBzdHJpbmcgdmFsdWVzIGF0IHByZXNlbnQuXG4gKiA8L2Rpdj5cbiAqXG4gKiBJZiB0aGUgdmlld1ZhbHVlIG9mIGBuZ01vZGVsYCBkb2VzIG5vdCBtYXRjaCBhbnkgb2YgdGhlIG9wdGlvbnMsIHRoZW4gdGhlIGNvbnRyb2xcbiAqIHdpbGwgYXV0b21hdGljYWxseSBhZGQgYW4gXCJ1bmtub3duXCIgb3B0aW9uLCB3aGljaCBpdCB0aGVuIHJlbW92ZXMgd2hlbiB0aGUgbWlzbWF0Y2ggaXMgcmVzb2x2ZWQuXG4gKlxuICogT3B0aW9uYWxseSwgYSBzaW5nbGUgaGFyZC1jb2RlZCBgPG9wdGlvbj5gIGVsZW1lbnQsIHdpdGggdGhlIHZhbHVlIHNldCB0byBhbiBlbXB0eSBzdHJpbmcsIGNhblxuICogYmUgbmVzdGVkIGludG8gdGhlIGA8c2VsZWN0PmAgZWxlbWVudC4gVGhpcyBlbGVtZW50IHdpbGwgdGhlbiByZXByZXNlbnQgdGhlIGBudWxsYCBvciBcIm5vdCBzZWxlY3RlZFwiXG4gKiBvcHRpb24uIFNlZSBleGFtcGxlIGJlbG93IGZvciBkZW1vbnN0cmF0aW9uLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiBJbiBtYW55IGNhc2VzLCBgbmdSZXBlYXRgIGNhbiBiZSB1c2VkIG9uIGA8b3B0aW9uPmAgZWxlbWVudHMgaW5zdGVhZCBvZiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nT3B0aW9uc1xuICogbmdPcHRpb25zfSB0byBhY2hpZXZlIGEgc2ltaWxhciByZXN1bHQuIEhvd2V2ZXIsIGBuZ09wdGlvbnNgIHByb3ZpZGVzIHNvbWUgYmVuZWZpdHMsIHN1Y2ggYXNcbiAqIG1vcmUgZmxleGliaWxpdHkgaW4gaG93IHRoZSBgPHNlbGVjdD5gJ3MgbW9kZWwgaXMgYXNzaWduZWQgdmlhIHRoZSBgc2VsZWN0YCAqKmBhc2AqKiBwYXJ0IG9mIHRoZVxuICogY29tcHJlaGVuc2lvbiBleHByZXNzaW9uLCBhbmQgYWRkaXRpb25hbGx5IGluIHJlZHVjaW5nIG1lbW9yeSBhbmQgaW5jcmVhc2luZyBzcGVlZCBieSBub3QgY3JlYXRpbmdcbiAqIGEgbmV3IHNjb3BlIGZvciBlYWNoIHJlcGVhdGVkIGluc3RhbmNlLlxuICogPC9kaXY+XG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbXVsdGlwbGUgQWxsb3dzIG11bHRpcGxlIG9wdGlvbnMgdG8gYmUgc2VsZWN0ZWQuIFRoZSBzZWxlY3RlZCB2YWx1ZXMgd2lsbCBiZVxuICogICAgIGJvdW5kIHRvIHRoZSBtb2RlbCBhcyBhbiBhcnJheS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIHJlcXVpcmVkIGF0dHJpYnV0ZSBhbmQgcmVxdWlyZWQgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gKiB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBuZ1JlcXVpcmVkIGluc3RlYWQgb2YgcmVxdWlyZWRcbiAqIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSByZXF1aXJlZCBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIHNlbGVjdGVkIG9wdGlvbihzKSBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBzZWxlY3QgZWxlbWVudC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdPcHRpb25zIHNldHMgdGhlIG9wdGlvbnMgdGhhdCB0aGUgc2VsZWN0IGlzIHBvcHVsYXRlZCB3aXRoIGFuZCBkZWZpbmVzIHdoYXQgaXNcbiAqIHNldCBvbiB0aGUgbW9kZWwgb24gc2VsZWN0aW9uLiBTZWUge0BsaW5rIG5nT3B0aW9ucyBgbmdPcHRpb25zYH0uXG4gKlxuICogQGV4YW1wbGVcbiAqICMjIyBTaW1wbGUgYHNlbGVjdGAgZWxlbWVudHMgd2l0aCBzdGF0aWMgb3B0aW9uc1xuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJzdGF0aWMtc2VsZWN0XCIgbW9kdWxlPVwic3RhdGljU2VsZWN0XCI+XG4gKiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiPlxuICogICAgIDxsYWJlbCBmb3I9XCJzaW5nbGVTZWxlY3RcIj4gU2luZ2xlIHNlbGVjdDogPC9sYWJlbD48YnI+XG4gKiAgICAgPHNlbGVjdCBuYW1lPVwic2luZ2xlU2VsZWN0XCIgbmctbW9kZWw9XCJkYXRhLnNpbmdsZVNlbGVjdFwiPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIm9wdGlvbi0xXCI+T3B0aW9uIDE8L29wdGlvbj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMlwiPk9wdGlvbiAyPC9vcHRpb24+XG4gKiAgICAgPC9zZWxlY3Q+PGJyPlxuICpcbiAqICAgICA8bGFiZWwgZm9yPVwic2luZ2xlU2VsZWN0XCI+IFNpbmdsZSBzZWxlY3Qgd2l0aCBcIm5vdCBzZWxlY3RlZFwiIG9wdGlvbiBhbmQgZHluYW1pYyBvcHRpb24gdmFsdWVzOiA8L2xhYmVsPjxicj5cbiAqICAgICA8c2VsZWN0IG5hbWU9XCJzaW5nbGVTZWxlY3RcIiBpZD1cInNpbmdsZVNlbGVjdFwiIG5nLW1vZGVsPVwiZGF0YS5zaW5nbGVTZWxlY3RcIj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj4tLS1QbGVhc2Ugc2VsZWN0LS0tPC9vcHRpb24+IDwhLS0gbm90IHNlbGVjdGVkIC8gYmxhbmsgb3B0aW9uIC0tPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cInt7ZGF0YS5vcHRpb24xfX1cIj5PcHRpb24gMTwvb3B0aW9uPiA8IS0tIGludGVycG9sYXRpb24gLS0+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwib3B0aW9uLTJcIj5PcHRpb24gMjwvb3B0aW9uPlxuICogICAgIDwvc2VsZWN0Pjxicj5cbiAqICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiZm9yY2VVbmtub3duT3B0aW9uKClcIj5Gb3JjZSB1bmtub3duIG9wdGlvbjwvYnV0dG9uPjxicj5cbiAqICAgICA8dHQ+c2luZ2xlU2VsZWN0ID0ge3tkYXRhLnNpbmdsZVNlbGVjdH19PC90dD5cbiAqXG4gKiAgICAgPGhyPlxuICogICAgIDxsYWJlbCBmb3I9XCJtdWx0aXBsZVNlbGVjdFwiPiBNdWx0aXBsZSBzZWxlY3Q6IDwvbGFiZWw+PGJyPlxuICogICAgIDxzZWxlY3QgbmFtZT1cIm11bHRpcGxlU2VsZWN0XCIgaWQ9XCJtdWx0aXBsZVNlbGVjdFwiIG5nLW1vZGVsPVwiZGF0YS5tdWx0aXBsZVNlbGVjdFwiIG11bHRpcGxlPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIm9wdGlvbi0xXCI+T3B0aW9uIDE8L29wdGlvbj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMlwiPk9wdGlvbiAyPC9vcHRpb24+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwib3B0aW9uLTNcIj5PcHRpb24gMzwvb3B0aW9uPlxuICogICAgIDwvc2VsZWN0Pjxicj5cbiAqICAgICA8dHQ+bXVsdGlwbGVTZWxlY3QgPSB7e2RhdGEubXVsdGlwbGVTZWxlY3R9fTwvdHQ+PGJyLz5cbiAqICAgPC9mb3JtPlxuICogPC9kaXY+XG4gKiA8L2ZpbGU+XG4gKiA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgYW5ndWxhci5tb2R1bGUoJ3N0YXRpY1NlbGVjdCcsIFtdKVxuICogICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgJHNjb3BlLmRhdGEgPSB7XG4gKiAgICAgICBzaW5nbGVTZWxlY3Q6IG51bGwsXG4gKiAgICAgICBtdWx0aXBsZVNlbGVjdDogW10sXG4gKiAgICAgICBvcHRpb24xOiAnb3B0aW9uLTEnLFxuICogICAgICB9O1xuICpcbiAqICAgICAgJHNjb3BlLmZvcmNlVW5rbm93bk9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgICRzY29wZS5kYXRhLnNpbmdsZVNlbGVjdCA9ICdub25zZW5zZSc7XG4gKiAgICAgIH07XG4gKiAgIH1dKTtcbiAqIDwvZmlsZT5cbiAqPC9leGFtcGxlPlxuICpcbiAqICMjIyBVc2luZyBgbmdSZXBlYXRgIHRvIGdlbmVyYXRlIGBzZWxlY3RgIG9wdGlvbnNcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ3JlcGVhdC1zZWxlY3RcIiBtb2R1bGU9XCJuZ3JlcGVhdFNlbGVjdFwiPlxuICogPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAqICAgICA8bGFiZWwgZm9yPVwicmVwZWF0U2VsZWN0XCI+IFJlcGVhdCBzZWxlY3Q6IDwvbGFiZWw+XG4gKiAgICAgPHNlbGVjdCBuYW1lPVwicmVwZWF0U2VsZWN0XCIgaWQ9XCJyZXBlYXRTZWxlY3RcIiBuZy1tb2RlbD1cImRhdGEucmVwZWF0U2VsZWN0XCI+XG4gKiAgICAgICA8b3B0aW9uIG5nLXJlcGVhdD1cIm9wdGlvbiBpbiBkYXRhLmF2YWlsYWJsZU9wdGlvbnNcIiB2YWx1ZT1cInt7b3B0aW9uLmlkfX1cIj57e29wdGlvbi5uYW1lfX08L29wdGlvbj5cbiAqICAgICA8L3NlbGVjdD5cbiAqICAgPC9mb3JtPlxuICogICA8aHI+XG4gKiAgIDx0dD5yZXBlYXRTZWxlY3QgPSB7e2RhdGEucmVwZWF0U2VsZWN0fX08L3R0Pjxici8+XG4gKiA8L2Rpdj5cbiAqIDwvZmlsZT5cbiAqIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICBhbmd1bGFyLm1vZHVsZSgnbmdyZXBlYXRTZWxlY3QnLCBbXSlcbiAqICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICRzY29wZS5kYXRhID0ge1xuICogICAgICAgcmVwZWF0U2VsZWN0OiBudWxsLFxuICogICAgICAgYXZhaWxhYmxlT3B0aW9uczogW1xuICogICAgICAgICB7aWQ6ICcxJywgbmFtZTogJ09wdGlvbiBBJ30sXG4gKiAgICAgICAgIHtpZDogJzInLCBuYW1lOiAnT3B0aW9uIEInfSxcbiAqICAgICAgICAge2lkOiAnMycsIG5hbWU6ICdPcHRpb24gQyd9XG4gKiAgICAgICBdLFxuICogICAgICB9O1xuICogICB9XSk7XG4gKiA8L2ZpbGU+XG4gKjwvZXhhbXBsZT5cbiAqXG4gKlxuICogIyMjIFVzaW5nIGBzZWxlY3RgIHdpdGggYG5nT3B0aW9uc2AgYW5kIHNldHRpbmcgYSBkZWZhdWx0IHZhbHVlXG4gKiBTZWUgdGhlIHtAbGluayBuZ09wdGlvbnMgbmdPcHRpb25zIGRvY3VtZW50YXRpb259IGZvciBtb3JlIGBuZ09wdGlvbnNgIHVzYWdlIGV4YW1wbGVzLlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJzZWxlY3Qtd2l0aC1kZWZhdWx0LXZhbHVlc1wiIG1vZHVsZT1cImRlZmF1bHRWYWx1ZVNlbGVjdFwiPlxuICogPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAqICAgICA8bGFiZWwgZm9yPVwibXlTZWxlY3RcIj5NYWtlIGEgY2hvaWNlOjwvbGFiZWw+XG4gKiAgICAgPHNlbGVjdCBuYW1lPVwibXlTZWxlY3RcIiBpZD1cIm15U2VsZWN0XCJcbiAqICAgICAgIG5nLW9wdGlvbnM9XCJvcHRpb24ubmFtZSBmb3Igb3B0aW9uIGluIGRhdGEuYXZhaWxhYmxlT3B0aW9ucyB0cmFjayBieSBvcHRpb24uaWRcIlxuICogICAgICAgbmctbW9kZWw9XCJkYXRhLnNlbGVjdGVkT3B0aW9uXCI+PC9zZWxlY3Q+XG4gKiAgIDwvZm9ybT5cbiAqICAgPGhyPlxuICogICA8dHQ+b3B0aW9uID0ge3tkYXRhLnNlbGVjdGVkT3B0aW9ufX08L3R0Pjxici8+XG4gKiA8L2Rpdj5cbiAqIDwvZmlsZT5cbiAqIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICBhbmd1bGFyLm1vZHVsZSgnZGVmYXVsdFZhbHVlU2VsZWN0JywgW10pXG4gKiAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAkc2NvcGUuZGF0YSA9IHtcbiAqICAgICAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcbiAqICAgICAgICAge2lkOiAnMScsIG5hbWU6ICdPcHRpb24gQSd9LFxuICogICAgICAgICB7aWQ6ICcyJywgbmFtZTogJ09wdGlvbiBCJ30sXG4gKiAgICAgICAgIHtpZDogJzMnLCBuYW1lOiAnT3B0aW9uIEMnfVxuICogICAgICAgXSxcbiAqICAgICAgIHNlbGVjdGVkT3B0aW9uOiB7aWQ6ICczJywgbmFtZTogJ09wdGlvbiBDJ30gLy9UaGlzIHNldHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHNlbGVjdCBpbiB0aGUgdWlcbiAqICAgICAgIH07XG4gKiAgIH1dKTtcbiAqIDwvZmlsZT5cbiAqPC9leGFtcGxlPlxuICpcbiAqXG4gKiAjIyMgQmluZGluZyBgc2VsZWN0YCB0byBhIG5vbi1zdHJpbmcgdmFsdWUgdmlhIGBuZ01vZGVsYCBwYXJzaW5nIC8gZm9ybWF0dGluZ1xuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJzZWxlY3Qtd2l0aC1ub24tc3RyaW5nLW9wdGlvbnNcIiBtb2R1bGU9XCJub25TdHJpbmdTZWxlY3RcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8c2VsZWN0IG5nLW1vZGVsPVwibW9kZWwuaWRcIiBjb252ZXJ0LXRvLW51bWJlcj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCIwXCI+WmVybzwvb3B0aW9uPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIjFcIj5PbmU8L29wdGlvbj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCIyXCI+VHdvPC9vcHRpb24+XG4gKiAgICAgPC9zZWxlY3Q+XG4gKiAgICAge3sgbW9kZWwgfX1cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgICAgYW5ndWxhci5tb2R1bGUoJ25vblN0cmluZ1NlbGVjdCcsIFtdKVxuICogICAgICAgLnJ1bihmdW5jdGlvbigkcm9vdFNjb3BlKSB7XG4gKiAgICAgICAgICRyb290U2NvcGUubW9kZWwgPSB7IGlkOiAyIH07XG4gKiAgICAgICB9KVxuICogICAgICAgLmRpcmVjdGl2ZSgnY29udmVydFRvTnVtYmVyJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgIHJldHVybiB7XG4gKiAgICAgICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICogICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xuICogICAgICAgICAgICAgbmdNb2RlbC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbCkge1xuICogICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQodmFsLCAxMCk7XG4gKiAgICAgICAgICAgICB9KTtcbiAqICAgICAgICAgICAgIG5nTW9kZWwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWwpIHtcbiAqICAgICAgICAgICAgICAgcmV0dXJuICcnICsgdmFsO1xuICogICAgICAgICAgICAgfSk7XG4gKiAgICAgICAgICAgfVxuICogICAgICAgICB9O1xuICogICAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICogICAgICAgdmFyIHNlbGVjdCA9IGVsZW1lbnQoYnkuY3NzKCdzZWxlY3QnKSk7XG4gKiAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgnbW9kZWwuaWQnKSkuJCgnb3B0aW9uOmNoZWNrZWQnKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1R3bycpO1xuICogICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICovXG52YXIgc2VsZWN0RGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcXVpcmU6IFsnc2VsZWN0JywgJz9uZ01vZGVsJ10sXG4gICAgY29udHJvbGxlcjogU2VsZWN0Q29udHJvbGxlcixcbiAgICBwcmlvcml0eTogMSxcbiAgICBsaW5rOiB7XG4gICAgICBwcmU6IHNlbGVjdFByZUxpbmtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gc2VsZWN0UHJlTGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHMpIHtcblxuICAgICAgLy8gaWYgbmdNb2RlbCBpcyBub3QgZGVmaW5lZCwgd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZ1xuICAgICAgdmFyIG5nTW9kZWxDdHJsID0gY3RybHNbMV07XG4gICAgICBpZiAoIW5nTW9kZWxDdHJsKSByZXR1cm47XG5cbiAgICAgIHZhciBzZWxlY3RDdHJsID0gY3RybHNbMF07XG5cbiAgICAgIHNlbGVjdEN0cmwubmdNb2RlbEN0cmwgPSBuZ01vZGVsQ3RybDtcblxuICAgICAgLy8gV2UgZGVsZWdhdGUgcmVuZGVyaW5nIHRvIHRoZSBgd3JpdGVWYWx1ZWAgbWV0aG9kLCB3aGljaCBjYW4gYmUgY2hhbmdlZFxuICAgICAgLy8gaWYgdGhlIHNlbGVjdCBjYW4gaGF2ZSBtdWx0aXBsZSBzZWxlY3RlZCB2YWx1ZXMgb3IgaWYgdGhlIG9wdGlvbnMgYXJlIGJlaW5nXG4gICAgICAvLyBnZW5lcmF0ZWQgYnkgYG5nT3B0aW9uc2BcbiAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZWN0Q3RybC53cml0ZVZhbHVlKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpO1xuICAgICAgfTtcblxuICAgICAgLy8gV2hlbiB0aGUgc2VsZWN0ZWQgaXRlbShzKSBjaGFuZ2VzIHdlIGRlbGVnYXRlIGdldHRpbmcgdGhlIHZhbHVlIG9mIHRoZSBzZWxlY3QgY29udHJvbFxuICAgICAgLy8gdG8gdGhlIGByZWFkVmFsdWVgIG1ldGhvZCwgd2hpY2ggY2FuIGJlIGNoYW5nZWQgaWYgdGhlIHNlbGVjdCBjYW4gaGF2ZSBtdWx0aXBsZVxuICAgICAgLy8gc2VsZWN0ZWQgdmFsdWVzIG9yIGlmIHRoZSBvcHRpb25zIGFyZSBiZWluZyBnZW5lcmF0ZWQgYnkgYG5nT3B0aW9uc2BcbiAgICAgIGVsZW1lbnQub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShzZWxlY3RDdHJsLnJlYWRWYWx1ZSgpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gSWYgdGhlIHNlbGVjdCBhbGxvd3MgbXVsdGlwbGUgdmFsdWVzIHRoZW4gd2UgbmVlZCB0byBtb2RpZnkgaG93IHdlIHJlYWQgYW5kIHdyaXRlXG4gICAgICAvLyB2YWx1ZXMgZnJvbSBhbmQgdG8gdGhlIGNvbnRyb2w7IGFsc28gd2hhdCBpdCBtZWFucyBmb3IgdGhlIHZhbHVlIHRvIGJlIGVtcHR5IGFuZFxuICAgICAgLy8gd2UgaGF2ZSB0byBhZGQgYW4gZXh0cmEgd2F0Y2ggc2luY2UgbmdNb2RlbCBkb2Vzbid0IHdvcmsgd2VsbCB3aXRoIGFycmF5cyAtIGl0XG4gICAgICAvLyBkb2Vzbid0IHRyaWdnZXIgcmVuZGVyaW5nIGlmIG9ubHkgYW4gaXRlbSBpbiB0aGUgYXJyYXkgY2hhbmdlcy5cbiAgICAgIGlmIChhdHRyLm11bHRpcGxlKSB7XG5cbiAgICAgICAgLy8gUmVhZCB2YWx1ZSBub3cgbmVlZHMgdG8gY2hlY2sgZWFjaCBvcHRpb24gdG8gc2VlIGlmIGl0IGlzIHNlbGVjdGVkXG4gICAgICAgIHNlbGVjdEN0cmwucmVhZFZhbHVlID0gZnVuY3Rpb24gcmVhZE11bHRpcGxlVmFsdWUoKSB7XG4gICAgICAgICAgdmFyIGFycmF5ID0gW107XG4gICAgICAgICAgZm9yRWFjaChlbGVtZW50LmZpbmQoJ29wdGlvbicpLCBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgYXJyYXkucHVzaChvcHRpb24udmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBXcml0ZSB2YWx1ZSBub3cgbmVlZHMgdG8gc2V0IHRoZSBzZWxlY3RlZCBwcm9wZXJ0eSBvZiBlYWNoIG1hdGNoaW5nIG9wdGlvblxuICAgICAgICBzZWxlY3RDdHJsLndyaXRlVmFsdWUgPSBmdW5jdGlvbiB3cml0ZU11bHRpcGxlVmFsdWUodmFsdWUpIHtcbiAgICAgICAgICB2YXIgaXRlbXMgPSBuZXcgSGFzaE1hcCh2YWx1ZSk7XG4gICAgICAgICAgZm9yRWFjaChlbGVtZW50LmZpbmQoJ29wdGlvbicpLCBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IGlzRGVmaW5lZChpdGVtcy5nZXQob3B0aW9uLnZhbHVlKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gd2UgaGF2ZSB0byBkbyBpdCBvbiBlYWNoIHdhdGNoIHNpbmNlIG5nTW9kZWwgd2F0Y2hlcyByZWZlcmVuY2UsIGJ1dFxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHdvcmsgb2YgYW4gYXJyYXksIHNvIHdlIG5lZWQgdG8gc2VlIGlmIGFueXRoaW5nIHdhcyBpbnNlcnRlZC9yZW1vdmVkXG4gICAgICAgIHZhciBsYXN0VmlldywgbGFzdFZpZXdSZWYgPSBOYU47XG4gICAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbiBzZWxlY3RNdWx0aXBsZVdhdGNoKCkge1xuICAgICAgICAgIGlmIChsYXN0Vmlld1JlZiA9PT0gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSAmJiAhZXF1YWxzKGxhc3RWaWV3LCBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKSkge1xuICAgICAgICAgICAgbGFzdFZpZXcgPSBzaGFsbG93Q29weShuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKTtcbiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGFzdFZpZXdSZWYgPSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBJZiB3ZSBhcmUgYSBtdWx0aXBsZSBzZWxlY3QgdGhlbiB2YWx1ZSBpcyBub3cgYSBjb2xsZWN0aW9uXG4gICAgICAgIC8vIHNvIHRoZSBtZWFuaW5nIG9mICRpc0VtcHR5IGNoYW5nZXNcbiAgICAgICAgbmdNb2RlbEN0cmwuJGlzRW1wdHkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiAhdmFsdWUgfHwgdmFsdWUubGVuZ3RoID09PSAwO1xuICAgICAgICB9O1xuXG4gICAgICB9XG4gICAgfVxufTtcblxuXG4vLyBUaGUgb3B0aW9uIGRpcmVjdGl2ZSBpcyBwdXJlbHkgZGVzaWduZWQgdG8gY29tbXVuaWNhdGUgdGhlIGV4aXN0ZW5jZSAob3IgbGFjayBvZilcbi8vIG9mIGR5bmFtaWNhbGx5IGNyZWF0ZWQgKGFuZCBkZXN0cm95ZWQpIG9wdGlvbiBlbGVtZW50cyB0byB0aGVpciBjb250YWluaW5nIHNlbGVjdFxuLy8gZGlyZWN0aXZlIHZpYSBpdHMgY29udHJvbGxlci5cbnZhciBvcHRpb25EaXJlY3RpdmUgPSBbJyRpbnRlcnBvbGF0ZScsIGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgcHJpb3JpdHk6IDEwMCxcbiAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7XG5cbiAgICAgIGlmIChpc0RlZmluZWQoYXR0ci52YWx1ZSkpIHtcbiAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGF0dHJpYnV0ZSBpcyBkZWZpbmVkLCBjaGVjayBpZiBpdCBjb250YWlucyBhbiBpbnRlcnBvbGF0aW9uXG4gICAgICAgIHZhciBpbnRlcnBvbGF0ZVZhbHVlRm4gPSAkaW50ZXJwb2xhdGUoYXR0ci52YWx1ZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiB0aGUgdmFsdWUgYXR0cmlidXRlIGlzIG5vdCBkZWZpbmVkIHRoZW4gd2UgZmFsbCBiYWNrIHRvIHRoZVxuICAgICAgICAvLyB0ZXh0IGNvbnRlbnQgb2YgdGhlIG9wdGlvbiBlbGVtZW50LCB3aGljaCBtYXkgYmUgaW50ZXJwb2xhdGVkXG4gICAgICAgIHZhciBpbnRlcnBvbGF0ZVRleHRGbiA9ICRpbnRlcnBvbGF0ZShlbGVtZW50LnRleHQoKSwgdHJ1ZSk7XG4gICAgICAgIGlmICghaW50ZXJwb2xhdGVUZXh0Rm4pIHtcbiAgICAgICAgICBhdHRyLiRzZXQoJ3ZhbHVlJywgZWxlbWVudC50ZXh0KCkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuXG4gICAgICAgIC8vIFRoaXMgaXMgYW4gb3B0aW1pemF0aW9uIG92ZXIgdXNpbmcgXl4gc2luY2Ugd2UgZG9uJ3Qgd2FudCB0byBoYXZlIHRvIHNlYXJjaFxuICAgICAgICAvLyBhbGwgdGhlIHdheSB0byB0aGUgcm9vdCBvZiB0aGUgRE9NIGZvciBldmVyeSBzaW5nbGUgb3B0aW9uIGVsZW1lbnRcbiAgICAgICAgdmFyIHNlbGVjdEN0cmxOYW1lID0gJyRzZWxlY3RDb250cm9sbGVyJyxcbiAgICAgICAgICAgIHBhcmVudCA9IGVsZW1lbnQucGFyZW50KCksXG4gICAgICAgICAgICBzZWxlY3RDdHJsID0gcGFyZW50LmRhdGEoc2VsZWN0Q3RybE5hbWUpIHx8XG4gICAgICAgICAgICAgIHBhcmVudC5wYXJlbnQoKS5kYXRhKHNlbGVjdEN0cmxOYW1lKTsgLy8gaW4gY2FzZSB3ZSBhcmUgaW4gb3B0Z3JvdXBcblxuICAgICAgICBpZiAoc2VsZWN0Q3RybCkge1xuICAgICAgICAgIHNlbGVjdEN0cmwucmVnaXN0ZXJPcHRpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGludGVycG9sYXRlVmFsdWVGbiwgaW50ZXJwb2xhdGVUZXh0Rm4pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dO1xuXG52YXIgc3R5bGVEaXJlY3RpdmUgPSB2YWx1ZUZuKHtcbiAgcmVzdHJpY3Q6ICdFJyxcbiAgdGVybWluYWw6IGZhbHNlXG59KTtcblxudmFyIHJlcXVpcmVkRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcbiAgICAgIGlmICghY3RybCkgcmV0dXJuO1xuICAgICAgYXR0ci5yZXF1aXJlZCA9IHRydWU7IC8vIGZvcmNlIHRydXRoeSBpbiBjYXNlIHdlIGFyZSBvbiBub24gaW5wdXQgZWxlbWVudFxuXG4gICAgICBjdHJsLiR2YWxpZGF0b3JzLnJlcXVpcmVkID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhYXR0ci5yZXF1aXJlZCB8fCAhY3RybC4kaXNFbXB0eSh2aWV3VmFsdWUpO1xuICAgICAgfTtcblxuICAgICAgYXR0ci4kb2JzZXJ2ZSgncmVxdWlyZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn07XG5cblxudmFyIHBhdHRlcm5EaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsbSwgYXR0ciwgY3RybCkge1xuICAgICAgaWYgKCFjdHJsKSByZXR1cm47XG5cbiAgICAgIHZhciByZWdleHAsIHBhdHRlcm5FeHAgPSBhdHRyLm5nUGF0dGVybiB8fCBhdHRyLnBhdHRlcm47XG4gICAgICBhdHRyLiRvYnNlcnZlKCdwYXR0ZXJuJywgZnVuY3Rpb24ocmVnZXgpIHtcbiAgICAgICAgaWYgKGlzU3RyaW5nKHJlZ2V4KSAmJiByZWdleC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmVnZXggPSBuZXcgUmVnRXhwKCdeJyArIHJlZ2V4ICsgJyQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZWdleCAmJiAhcmVnZXgudGVzdCkge1xuICAgICAgICAgIHRocm93IG1pbkVycignbmdQYXR0ZXJuJykoJ25vcmVnZXhwJyxcbiAgICAgICAgICAgICdFeHBlY3RlZCB7MH0gdG8gYmUgYSBSZWdFeHAgYnV0IHdhcyB7MX0uIEVsZW1lbnQ6IHsyfScsIHBhdHRlcm5FeHAsXG4gICAgICAgICAgICByZWdleCwgc3RhcnRpbmdUYWcoZWxtKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdleHAgPSByZWdleCB8fCB1bmRlZmluZWQ7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcblxuICAgICAgY3RybC4kdmFsaWRhdG9ycy5wYXR0ZXJuID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICAgIC8vIEhUTUw1IHBhdHRlcm4gY29uc3RyYWludCB2YWxpZGF0ZXMgdGhlIGlucHV0IHZhbHVlLCBzbyB3ZSB2YWxpZGF0ZSB0aGUgdmlld1ZhbHVlXG4gICAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZpZXdWYWx1ZSkgfHwgaXNVbmRlZmluZWQocmVnZXhwKSB8fCByZWdleHAudGVzdCh2aWV3VmFsdWUpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59O1xuXG5cbnZhciBtYXhsZW5ndGhEaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsbSwgYXR0ciwgY3RybCkge1xuICAgICAgaWYgKCFjdHJsKSByZXR1cm47XG5cbiAgICAgIHZhciBtYXhsZW5ndGggPSAtMTtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ21heGxlbmd0aCcsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciBpbnRWYWwgPSB0b0ludCh2YWx1ZSk7XG4gICAgICAgIG1heGxlbmd0aCA9IGlzTmFOKGludFZhbCkgPyAtMSA6IGludFZhbDtcbiAgICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICAgIH0pO1xuICAgICAgY3RybC4kdmFsaWRhdG9ycy5tYXhsZW5ndGggPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIChtYXhsZW5ndGggPCAwKSB8fCBjdHJsLiRpc0VtcHR5KHZpZXdWYWx1ZSkgfHwgKHZpZXdWYWx1ZS5sZW5ndGggPD0gbWF4bGVuZ3RoKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTtcblxudmFyIG1pbmxlbmd0aERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJz9uZ01vZGVsJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRyLCBjdHJsKSB7XG4gICAgICBpZiAoIWN0cmwpIHJldHVybjtcblxuICAgICAgdmFyIG1pbmxlbmd0aCA9IDA7XG4gICAgICBhdHRyLiRvYnNlcnZlKCdtaW5sZW5ndGgnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBtaW5sZW5ndGggPSB0b0ludCh2YWx1ZSkgfHwgMDtcbiAgICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICAgIH0pO1xuICAgICAgY3RybC4kdmFsaWRhdG9ycy5taW5sZW5ndGggPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKSB8fCB2aWV3VmFsdWUubGVuZ3RoID49IG1pbmxlbmd0aDtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTtcblxuaWYgKHdpbmRvdy5hbmd1bGFyLmJvb3RzdHJhcCkge1xuICAvL0FuZ3VsYXJKUyBpcyBhbHJlYWR5IGxvYWRlZCwgc28gd2UgY2FuIHJldHVybiBoZXJlLi4uXG4gIGNvbnNvbGUubG9nKCdXQVJOSU5HOiBUcmllZCB0byBsb2FkIGFuZ3VsYXIgbW9yZSB0aGFuIG9uY2UuJyk7XG4gIHJldHVybjtcbn1cblxuLy90cnkgdG8gYmluZCB0byBqcXVlcnkgbm93IHNvIHRoYXQgb25lIGNhbiB3cml0ZSBqcUxpdGUoZG9jdW1lbnQpLnJlYWR5KClcbi8vYnV0IHdlIHdpbGwgcmViaW5kIG9uIGJvb3RzdHJhcCBhZ2Fpbi5cbmJpbmRKUXVlcnkoKTtcblxucHVibGlzaEV4dGVybmFsQVBJKGFuZ3VsYXIpO1xuXG5hbmd1bGFyLm1vZHVsZShcIm5nTG9jYWxlXCIsIFtdLCBbXCIkcHJvdmlkZVwiLCBmdW5jdGlvbigkcHJvdmlkZSkge1xudmFyIFBMVVJBTF9DQVRFR09SWSA9IHtaRVJPOiBcInplcm9cIiwgT05FOiBcIm9uZVwiLCBUV086IFwidHdvXCIsIEZFVzogXCJmZXdcIiwgTUFOWTogXCJtYW55XCIsIE9USEVSOiBcIm90aGVyXCJ9O1xuZnVuY3Rpb24gZ2V0RGVjaW1hbHMobikge1xuICBuID0gbiArICcnO1xuICB2YXIgaSA9IG4uaW5kZXhPZignLicpO1xuICByZXR1cm4gKGkgPT0gLTEpID8gMCA6IG4ubGVuZ3RoIC0gaSAtIDE7XG59XG5cbmZ1bmN0aW9uIGdldFZGKG4sIG9wdF9wcmVjaXNpb24pIHtcbiAgdmFyIHYgPSBvcHRfcHJlY2lzaW9uO1xuXG4gIGlmICh1bmRlZmluZWQgPT09IHYpIHtcbiAgICB2ID0gTWF0aC5taW4oZ2V0RGVjaW1hbHMobiksIDMpO1xuICB9XG5cbiAgdmFyIGJhc2UgPSBNYXRoLnBvdygxMCwgdik7XG4gIHZhciBmID0gKChuICogYmFzZSkgfCAwKSAlIGJhc2U7XG4gIHJldHVybiB7djogdiwgZjogZn07XG59XG5cbiRwcm92aWRlLnZhbHVlKFwiJGxvY2FsZVwiLCB7XG4gIFwiREFURVRJTUVfRk9STUFUU1wiOiB7XG4gICAgXCJBTVBNU1wiOiBbXG4gICAgICBcIkFNXCIsXG4gICAgICBcIlBNXCJcbiAgICBdLFxuICAgIFwiREFZXCI6IFtcbiAgICAgIFwiU3VuZGF5XCIsXG4gICAgICBcIk1vbmRheVwiLFxuICAgICAgXCJUdWVzZGF5XCIsXG4gICAgICBcIldlZG5lc2RheVwiLFxuICAgICAgXCJUaHVyc2RheVwiLFxuICAgICAgXCJGcmlkYXlcIixcbiAgICAgIFwiU2F0dXJkYXlcIlxuICAgIF0sXG4gICAgXCJFUkFOQU1FU1wiOiBbXG4gICAgICBcIkJlZm9yZSBDaHJpc3RcIixcbiAgICAgIFwiQW5ubyBEb21pbmlcIlxuICAgIF0sXG4gICAgXCJFUkFTXCI6IFtcbiAgICAgIFwiQkNcIixcbiAgICAgIFwiQURcIlxuICAgIF0sXG4gICAgXCJGSVJTVERBWU9GV0VFS1wiOiA2LFxuICAgIFwiTU9OVEhcIjogW1xuICAgICAgXCJKYW51YXJ5XCIsXG4gICAgICBcIkZlYnJ1YXJ5XCIsXG4gICAgICBcIk1hcmNoXCIsXG4gICAgICBcIkFwcmlsXCIsXG4gICAgICBcIk1heVwiLFxuICAgICAgXCJKdW5lXCIsXG4gICAgICBcIkp1bHlcIixcbiAgICAgIFwiQXVndXN0XCIsXG4gICAgICBcIlNlcHRlbWJlclwiLFxuICAgICAgXCJPY3RvYmVyXCIsXG4gICAgICBcIk5vdmVtYmVyXCIsXG4gICAgICBcIkRlY2VtYmVyXCJcbiAgICBdLFxuICAgIFwiU0hPUlREQVlcIjogW1xuICAgICAgXCJTdW5cIixcbiAgICAgIFwiTW9uXCIsXG4gICAgICBcIlR1ZVwiLFxuICAgICAgXCJXZWRcIixcbiAgICAgIFwiVGh1XCIsXG4gICAgICBcIkZyaVwiLFxuICAgICAgXCJTYXRcIlxuICAgIF0sXG4gICAgXCJTSE9SVE1PTlRIXCI6IFtcbiAgICAgIFwiSmFuXCIsXG4gICAgICBcIkZlYlwiLFxuICAgICAgXCJNYXJcIixcbiAgICAgIFwiQXByXCIsXG4gICAgICBcIk1heVwiLFxuICAgICAgXCJKdW5cIixcbiAgICAgIFwiSnVsXCIsXG4gICAgICBcIkF1Z1wiLFxuICAgICAgXCJTZXBcIixcbiAgICAgIFwiT2N0XCIsXG4gICAgICBcIk5vdlwiLFxuICAgICAgXCJEZWNcIlxuICAgIF0sXG4gICAgXCJXRUVLRU5EUkFOR0VcIjogW1xuICAgICAgNSxcbiAgICAgIDZcbiAgICBdLFxuICAgIFwiZnVsbERhdGVcIjogXCJFRUVFLCBNTU1NIGQsIHlcIixcbiAgICBcImxvbmdEYXRlXCI6IFwiTU1NTSBkLCB5XCIsXG4gICAgXCJtZWRpdW1cIjogXCJNTU0gZCwgeSBoOm1tOnNzIGFcIixcbiAgICBcIm1lZGl1bURhdGVcIjogXCJNTU0gZCwgeVwiLFxuICAgIFwibWVkaXVtVGltZVwiOiBcImg6bW06c3MgYVwiLFxuICAgIFwic2hvcnRcIjogXCJNL2QveXkgaDptbSBhXCIsXG4gICAgXCJzaG9ydERhdGVcIjogXCJNL2QveXlcIixcbiAgICBcInNob3J0VGltZVwiOiBcImg6bW0gYVwiXG4gIH0sXG4gIFwiTlVNQkVSX0ZPUk1BVFNcIjoge1xuICAgIFwiQ1VSUkVOQ1lfU1lNXCI6IFwiJFwiLFxuICAgIFwiREVDSU1BTF9TRVBcIjogXCIuXCIsXG4gICAgXCJHUk9VUF9TRVBcIjogXCIsXCIsXG4gICAgXCJQQVRURVJOU1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwiZ1NpemVcIjogMyxcbiAgICAgICAgXCJsZ1NpemVcIjogMyxcbiAgICAgICAgXCJtYXhGcmFjXCI6IDMsXG4gICAgICAgIFwibWluRnJhY1wiOiAwLFxuICAgICAgICBcIm1pbkludFwiOiAxLFxuICAgICAgICBcIm5lZ1ByZVwiOiBcIi1cIixcbiAgICAgICAgXCJuZWdTdWZcIjogXCJcIixcbiAgICAgICAgXCJwb3NQcmVcIjogXCJcIixcbiAgICAgICAgXCJwb3NTdWZcIjogXCJcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJnU2l6ZVwiOiAzLFxuICAgICAgICBcImxnU2l6ZVwiOiAzLFxuICAgICAgICBcIm1heEZyYWNcIjogMixcbiAgICAgICAgXCJtaW5GcmFjXCI6IDIsXG4gICAgICAgIFwibWluSW50XCI6IDEsXG4gICAgICAgIFwibmVnUHJlXCI6IFwiLVxcdTAwYTRcIixcbiAgICAgICAgXCJuZWdTdWZcIjogXCJcIixcbiAgICAgICAgXCJwb3NQcmVcIjogXCJcXHUwMGE0XCIsXG4gICAgICAgIFwicG9zU3VmXCI6IFwiXCJcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIFwiaWRcIjogXCJlbi11c1wiLFxuICBcInBsdXJhbENhdFwiOiBmdW5jdGlvbihuLCBvcHRfcHJlY2lzaW9uKSB7ICB2YXIgaSA9IG4gfCAwOyAgdmFyIHZmID0gZ2V0VkYobiwgb3B0X3ByZWNpc2lvbik7ICBpZiAoaSA9PSAxICYmIHZmLnYgPT0gMCkgeyAgICByZXR1cm4gUExVUkFMX0NBVEVHT1JZLk9ORTsgIH0gIHJldHVybiBQTFVSQUxfQ0FURUdPUlkuT1RIRVI7fVxufSk7XG59XSk7XG5cbiAganFMaXRlKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICBhbmd1bGFySW5pdChkb2N1bWVudCwgYm9vdHN0cmFwKTtcbiAgfSk7XG5cbn0pKHdpbmRvdywgZG9jdW1lbnQpO1xuXG4hd2luZG93LmFuZ3VsYXIuJCRjc3AoKS5ub0lubGluZVN0eWxlICYmIHdpbmRvdy5hbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuaGVhZCkucHJlcGVuZCgnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPkBjaGFyc2V0IFwiVVRGLThcIjtbbmdcXFxcOmNsb2FrXSxbbmctY2xvYWtdLFtkYXRhLW5nLWNsb2FrXSxbeC1uZy1jbG9ha10sLm5nLWNsb2FrLC54LW5nLWNsb2FrLC5uZy1oaWRlOm5vdCgubmctaGlkZS1hbmltYXRlKXtkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9bmdcXFxcOmZvcm17ZGlzcGxheTpibG9jazt9Lm5nLWFuaW1hdGUtc2hpbXt2aXNpYmlsaXR5OmhpZGRlbjt9Lm5nLWFuY2hvcntwb3NpdGlvbjphYnNvbHV0ZTt9PC9zdHlsZT4nKTsiLCIvKipcbiAqIFN0YXRlLWJhc2VkIHJvdXRpbmcgZm9yIEFuZ3VsYXJKU1xuICogQHZlcnNpb24gdjAuMi4xNVxuICogQGxpbmsgaHR0cDovL2FuZ3VsYXItdWkuZ2l0aHViLmNvbS9cbiAqIEBsaWNlbnNlIE1JVCBMaWNlbnNlLCBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxuICovXG5cInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgZXhwb3J0cyYmbW9kdWxlLmV4cG9ydHM9PT1leHBvcnRzJiYobW9kdWxlLmV4cG9ydHM9XCJ1aS5yb3V0ZXJcIiksZnVuY3Rpb24oYSxiLGMpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGQoYSxiKXtyZXR1cm4gTihuZXcoTihmdW5jdGlvbigpe30se3Byb3RvdHlwZTphfSkpLGIpfWZ1bmN0aW9uIGUoYSl7cmV0dXJuIE0oYXJndW1lbnRzLGZ1bmN0aW9uKGIpe2IhPT1hJiZNKGIsZnVuY3Rpb24oYixjKXthLmhhc093blByb3BlcnR5KGMpfHwoYVtjXT1iKX0pfSksYX1mdW5jdGlvbiBmKGEsYil7dmFyIGM9W107Zm9yKHZhciBkIGluIGEucGF0aCl7aWYoYS5wYXRoW2RdIT09Yi5wYXRoW2RdKWJyZWFrO2MucHVzaChhLnBhdGhbZF0pfXJldHVybiBjfWZ1bmN0aW9uIGcoYSl7aWYoT2JqZWN0LmtleXMpcmV0dXJuIE9iamVjdC5rZXlzKGEpO3ZhciBiPVtdO3JldHVybiBNKGEsZnVuY3Rpb24oYSxjKXtiLnB1c2goYyl9KSxifWZ1bmN0aW9uIGgoYSxiKXtpZihBcnJheS5wcm90b3R5cGUuaW5kZXhPZilyZXR1cm4gYS5pbmRleE9mKGIsTnVtYmVyKGFyZ3VtZW50c1syXSl8fDApO3ZhciBjPWEubGVuZ3RoPj4+MCxkPU51bWJlcihhcmd1bWVudHNbMl0pfHwwO2ZvcihkPTA+ZD9NYXRoLmNlaWwoZCk6TWF0aC5mbG9vcihkKSwwPmQmJihkKz1jKTtjPmQ7ZCsrKWlmKGQgaW4gYSYmYVtkXT09PWIpcmV0dXJuIGQ7cmV0dXJuLTF9ZnVuY3Rpb24gaShhLGIsYyxkKXt2YXIgZSxpPWYoYyxkKSxqPXt9LGs9W107Zm9yKHZhciBsIGluIGkpaWYoaVtsXS5wYXJhbXMmJihlPWcoaVtsXS5wYXJhbXMpLGUubGVuZ3RoKSlmb3IodmFyIG0gaW4gZSloKGssZVttXSk+PTB8fChrLnB1c2goZVttXSksaltlW21dXT1hW2VbbV1dKTtyZXR1cm4gTih7fSxqLGIpfWZ1bmN0aW9uIGooYSxiLGMpe2lmKCFjKXtjPVtdO2Zvcih2YXIgZCBpbiBhKWMucHVzaChkKX1mb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyl7dmFyIGY9Y1tlXTtpZihhW2ZdIT1iW2ZdKXJldHVybiExfXJldHVybiEwfWZ1bmN0aW9uIGsoYSxiKXt2YXIgYz17fTtyZXR1cm4gTShhLGZ1bmN0aW9uKGEpe2NbYV09YlthXX0pLGN9ZnVuY3Rpb24gbChhKXt2YXIgYj17fSxjPUFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoQXJyYXkucHJvdG90eXBlLEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSk7cmV0dXJuIE0oYyxmdW5jdGlvbihjKXtjIGluIGEmJihiW2NdPWFbY10pfSksYn1mdW5jdGlvbiBtKGEpe3ZhciBiPXt9LGM9QXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShBcnJheS5wcm90b3R5cGUsQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpKTtmb3IodmFyIGQgaW4gYSktMT09aChjLGQpJiYoYltkXT1hW2RdKTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYil7dmFyIGM9TChhKSxkPWM/W106e307cmV0dXJuIE0oYSxmdW5jdGlvbihhLGUpe2IoYSxlKSYmKGRbYz9kLmxlbmd0aDplXT1hKX0pLGR9ZnVuY3Rpb24gbyhhLGIpe3ZhciBjPUwoYSk/W106e307cmV0dXJuIE0oYSxmdW5jdGlvbihhLGQpe2NbZF09YihhLGQpfSksY31mdW5jdGlvbiBwKGEsYil7dmFyIGQ9MSxmPTIsaT17fSxqPVtdLGs9aSxsPU4oYS53aGVuKGkpLHskJHByb21pc2VzOmksJCR2YWx1ZXM6aX0pO3RoaXMuc3R1ZHk9ZnVuY3Rpb24oaSl7ZnVuY3Rpb24gbihhLGMpe2lmKHNbY10hPT1mKXtpZihyLnB1c2goYyksc1tjXT09PWQpdGhyb3cgci5zcGxpY2UoMCxoKHIsYykpLG5ldyBFcnJvcihcIkN5Y2xpYyBkZXBlbmRlbmN5OiBcIityLmpvaW4oXCIgLT4gXCIpKTtpZihzW2NdPWQsSihhKSlxLnB1c2goYyxbZnVuY3Rpb24oKXtyZXR1cm4gYi5nZXQoYSl9XSxqKTtlbHNle3ZhciBlPWIuYW5ub3RhdGUoYSk7TShlLGZ1bmN0aW9uKGEpe2EhPT1jJiZpLmhhc093blByb3BlcnR5KGEpJiZuKGlbYV0sYSl9KSxxLnB1c2goYyxhLGUpfXIucG9wKCksc1tjXT1mfX1mdW5jdGlvbiBvKGEpe3JldHVybiBLKGEpJiZhLnRoZW4mJmEuJCRwcm9taXNlc31pZighSyhpKSl0aHJvdyBuZXcgRXJyb3IoXCInaW52b2NhYmxlcycgbXVzdCBiZSBhbiBvYmplY3RcIik7dmFyIHA9ZyhpfHx7fSkscT1bXSxyPVtdLHM9e307cmV0dXJuIE0oaSxuKSxpPXI9cz1udWxsLGZ1bmN0aW9uKGQsZixnKXtmdW5jdGlvbiBoKCl7LS11fHwodnx8ZSh0LGYuJCR2YWx1ZXMpLHIuJCR2YWx1ZXM9dCxyLiQkcHJvbWlzZXM9ci4kJHByb21pc2VzfHwhMCxkZWxldGUgci4kJGluaGVyaXRlZFZhbHVlcyxuLnJlc29sdmUodCkpfWZ1bmN0aW9uIGkoYSl7ci4kJGZhaWx1cmU9YSxuLnJlamVjdChhKX1mdW5jdGlvbiBqKGMsZSxmKXtmdW5jdGlvbiBqKGEpe2wucmVqZWN0KGEpLGkoYSl9ZnVuY3Rpb24gaygpe2lmKCFIKHIuJCRmYWlsdXJlKSl0cnl7bC5yZXNvbHZlKGIuaW52b2tlKGUsZyx0KSksbC5wcm9taXNlLnRoZW4oZnVuY3Rpb24oYSl7dFtjXT1hLGgoKX0sail9Y2F0Y2goYSl7aihhKX19dmFyIGw9YS5kZWZlcigpLG09MDtNKGYsZnVuY3Rpb24oYSl7cy5oYXNPd25Qcm9wZXJ0eShhKSYmIWQuaGFzT3duUHJvcGVydHkoYSkmJihtKyssc1thXS50aGVuKGZ1bmN0aW9uKGIpe3RbYV09YiwtLW18fGsoKX0saikpfSksbXx8aygpLHNbY109bC5wcm9taXNlfWlmKG8oZCkmJmc9PT1jJiYoZz1mLGY9ZCxkPW51bGwpLGQpe2lmKCFLKGQpKXRocm93IG5ldyBFcnJvcihcIidsb2NhbHMnIG11c3QgYmUgYW4gb2JqZWN0XCIpfWVsc2UgZD1rO2lmKGYpe2lmKCFvKGYpKXRocm93IG5ldyBFcnJvcihcIidwYXJlbnQnIG11c3QgYmUgYSBwcm9taXNlIHJldHVybmVkIGJ5ICRyZXNvbHZlLnJlc29sdmUoKVwiKX1lbHNlIGY9bDt2YXIgbj1hLmRlZmVyKCkscj1uLnByb21pc2Uscz1yLiQkcHJvbWlzZXM9e30sdD1OKHt9LGQpLHU9MStxLmxlbmd0aC8zLHY9ITE7aWYoSChmLiQkZmFpbHVyZSkpcmV0dXJuIGkoZi4kJGZhaWx1cmUpLHI7Zi4kJGluaGVyaXRlZFZhbHVlcyYmZSh0LG0oZi4kJGluaGVyaXRlZFZhbHVlcyxwKSksTihzLGYuJCRwcm9taXNlcyksZi4kJHZhbHVlcz8odj1lKHQsbShmLiQkdmFsdWVzLHApKSxyLiQkaW5oZXJpdGVkVmFsdWVzPW0oZi4kJHZhbHVlcyxwKSxoKCkpOihmLiQkaW5oZXJpdGVkVmFsdWVzJiYoci4kJGluaGVyaXRlZFZhbHVlcz1tKGYuJCRpbmhlcml0ZWRWYWx1ZXMscCkpLGYudGhlbihoLGkpKTtmb3IodmFyIHc9MCx4PXEubGVuZ3RoO3g+dzt3Kz0zKWQuaGFzT3duUHJvcGVydHkocVt3XSk/aCgpOmoocVt3XSxxW3crMV0scVt3KzJdKTtyZXR1cm4gcn19LHRoaXMucmVzb2x2ZT1mdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gdGhpcy5zdHVkeShhKShiLGMsZCl9fWZ1bmN0aW9uIHEoYSxiLGMpe3RoaXMuZnJvbUNvbmZpZz1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIEgoYS50ZW1wbGF0ZSk/dGhpcy5mcm9tU3RyaW5nKGEudGVtcGxhdGUsYik6SChhLnRlbXBsYXRlVXJsKT90aGlzLmZyb21VcmwoYS50ZW1wbGF0ZVVybCxiKTpIKGEudGVtcGxhdGVQcm92aWRlcik/dGhpcy5mcm9tUHJvdmlkZXIoYS50ZW1wbGF0ZVByb3ZpZGVyLGIsYyk6bnVsbH0sdGhpcy5mcm9tU3RyaW5nPWZ1bmN0aW9uKGEsYil7cmV0dXJuIEkoYSk/YShiKTphfSx0aGlzLmZyb21Vcmw9ZnVuY3Rpb24oYyxkKXtyZXR1cm4gSShjKSYmKGM9YyhkKSksbnVsbD09Yz9udWxsOmEuZ2V0KGMse2NhY2hlOmIsaGVhZGVyczp7QWNjZXB0OlwidGV4dC9odG1sXCJ9fSkudGhlbihmdW5jdGlvbihhKXtyZXR1cm4gYS5kYXRhfSl9LHRoaXMuZnJvbVByb3ZpZGVyPWZ1bmN0aW9uKGEsYixkKXtyZXR1cm4gYy5pbnZva2UoYSxudWxsLGR8fHtwYXJhbXM6Yn0pfX1mdW5jdGlvbiByKGEsYixlKXtmdW5jdGlvbiBmKGIsYyxkLGUpe2lmKHEucHVzaChiKSxvW2JdKXJldHVybiBvW2JdO2lmKCEvXlxcdysoLStcXHcrKSooPzpcXFtcXF0pPyQvLnRlc3QoYikpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwYXJhbWV0ZXIgbmFtZSAnXCIrYitcIicgaW4gcGF0dGVybiAnXCIrYStcIidcIik7aWYocFtiXSl0aHJvdyBuZXcgRXJyb3IoXCJEdXBsaWNhdGUgcGFyYW1ldGVyIG5hbWUgJ1wiK2IrXCInIGluIHBhdHRlcm4gJ1wiK2ErXCInXCIpO3JldHVybiBwW2JdPW5ldyBQLlBhcmFtKGIsYyxkLGUpLHBbYl19ZnVuY3Rpb24gZyhhLGIsYyxkKXt2YXIgZT1bXCJcIixcIlwiXSxmPWEucmVwbGFjZSgvW1xcXFxcXFtcXF1cXF4kKis/LigpfHt9XS9nLFwiXFxcXCQmXCIpO2lmKCFiKXJldHVybiBmO3N3aXRjaChjKXtjYXNlITE6ZT1bXCIoXCIsXCIpXCIrKGQ/XCI/XCI6XCJcIildO2JyZWFrO2Nhc2UhMDplPVtcIj8oXCIsXCIpP1wiXTticmVhaztkZWZhdWx0OmU9W1wiKFwiK2MrXCJ8XCIsXCIpP1wiXX1yZXR1cm4gZitlWzBdK2IrZVsxXX1mdW5jdGlvbiBoKGUsZil7dmFyIGcsaCxpLGosaztyZXR1cm4gZz1lWzJdfHxlWzNdLGs9Yi5wYXJhbXNbZ10saT1hLnN1YnN0cmluZyhtLGUuaW5kZXgpLGg9Zj9lWzRdOmVbNF18fChcIipcIj09ZVsxXT9cIi4qXCI6bnVsbCksaj1QLnR5cGUoaHx8XCJzdHJpbmdcIil8fGQoUC50eXBlKFwic3RyaW5nXCIpLHtwYXR0ZXJuOm5ldyBSZWdFeHAoaCxiLmNhc2VJbnNlbnNpdGl2ZT9cImlcIjpjKX0pLHtpZDpnLHJlZ2V4cDpoLHNlZ21lbnQ6aSx0eXBlOmosY2ZnOmt9fWI9Tih7cGFyYW1zOnt9fSxLKGIpP2I6e30pO3ZhciBpLGo9LyhbOipdKShbXFx3XFxbXFxdXSspfFxceyhbXFx3XFxbXFxdXSspKD86XFw6KCg/Oltee31cXFxcXSt8XFxcXC58XFx7KD86W157fVxcXFxdK3xcXFxcLikqXFx9KSspKT9cXH0vZyxrPS8oWzpdPykoW1xcd1xcW1xcXS1dKyl8XFx7KFtcXHdcXFtcXF0tXSspKD86XFw6KCg/Oltee31cXFxcXSt8XFxcXC58XFx7KD86W157fVxcXFxdK3xcXFxcLikqXFx9KSspKT9cXH0vZyxsPVwiXlwiLG09MCxuPXRoaXMuc2VnbWVudHM9W10sbz1lP2UucGFyYW1zOnt9LHA9dGhpcy5wYXJhbXM9ZT9lLnBhcmFtcy4kJG5ldygpOm5ldyBQLlBhcmFtU2V0LHE9W107dGhpcy5zb3VyY2U9YTtmb3IodmFyIHIscyx0OyhpPWouZXhlYyhhKSkmJihyPWgoaSwhMSksIShyLnNlZ21lbnQuaW5kZXhPZihcIj9cIik+PTApKTspcz1mKHIuaWQsci50eXBlLHIuY2ZnLFwicGF0aFwiKSxsKz1nKHIuc2VnbWVudCxzLnR5cGUucGF0dGVybi5zb3VyY2Uscy5zcXVhc2gscy5pc09wdGlvbmFsKSxuLnB1c2goci5zZWdtZW50KSxtPWoubGFzdEluZGV4O3Q9YS5zdWJzdHJpbmcobSk7dmFyIHU9dC5pbmRleE9mKFwiP1wiKTtpZih1Pj0wKXt2YXIgdj10aGlzLnNvdXJjZVNlYXJjaD10LnN1YnN0cmluZyh1KTtpZih0PXQuc3Vic3RyaW5nKDAsdSksdGhpcy5zb3VyY2VQYXRoPWEuc3Vic3RyaW5nKDAsbSt1KSx2Lmxlbmd0aD4wKWZvcihtPTA7aT1rLmV4ZWModik7KXI9aChpLCEwKSxzPWYoci5pZCxyLnR5cGUsci5jZmcsXCJzZWFyY2hcIiksbT1qLmxhc3RJbmRleH1lbHNlIHRoaXMuc291cmNlUGF0aD1hLHRoaXMuc291cmNlU2VhcmNoPVwiXCI7bCs9Zyh0KSsoYi5zdHJpY3Q9PT0hMT9cIi8/XCI6XCJcIikrXCIkXCIsbi5wdXNoKHQpLHRoaXMucmVnZXhwPW5ldyBSZWdFeHAobCxiLmNhc2VJbnNlbnNpdGl2ZT9cImlcIjpjKSx0aGlzLnByZWZpeD1uWzBdLHRoaXMuJCRwYXJhbU5hbWVzPXF9ZnVuY3Rpb24gcyhhKXtOKHRoaXMsYSl9ZnVuY3Rpb24gdCgpe2Z1bmN0aW9uIGEoYSl7cmV0dXJuIG51bGwhPWE/YS50b1N0cmluZygpLnJlcGxhY2UoL1xcLy9nLFwiJTJGXCIpOmF9ZnVuY3Rpb24gZShhKXtyZXR1cm4gbnVsbCE9YT9hLnRvU3RyaW5nKCkucmVwbGFjZSgvJTJGL2csXCIvXCIpOmF9ZnVuY3Rpb24gZigpe3JldHVybntzdHJpY3Q6cCxjYXNlSW5zZW5zaXRpdmU6bX19ZnVuY3Rpb24gaShhKXtyZXR1cm4gSShhKXx8TChhKSYmSShhW2EubGVuZ3RoLTFdKX1mdW5jdGlvbiBqKCl7Zm9yKDt3Lmxlbmd0aDspe3ZhciBhPXcuc2hpZnQoKTtpZihhLnBhdHRlcm4pdGhyb3cgbmV3IEVycm9yKFwiWW91IGNhbm5vdCBvdmVycmlkZSBhIHR5cGUncyAucGF0dGVybiBhdCBydW50aW1lLlwiKTtiLmV4dGVuZCh1W2EubmFtZV0sbC5pbnZva2UoYS5kZWYpKX19ZnVuY3Rpb24gayhhKXtOKHRoaXMsYXx8e30pfVA9dGhpczt2YXIgbCxtPSExLHA9ITAscT0hMSx1PXt9LHY9ITAsdz1bXSx4PXtzdHJpbmc6e2VuY29kZTphLGRlY29kZTplLGlzOmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hfHwhSChhKXx8XCJzdHJpbmdcIj09dHlwZW9mIGF9LHBhdHRlcm46L1teL10qL30sXCJpbnRcIjp7ZW5jb2RlOmEsZGVjb2RlOmZ1bmN0aW9uKGEpe3JldHVybiBwYXJzZUludChhLDEwKX0saXM6ZnVuY3Rpb24oYSl7cmV0dXJuIEgoYSkmJnRoaXMuZGVjb2RlKGEudG9TdHJpbmcoKSk9PT1hfSxwYXR0ZXJuOi9cXGQrL30sYm9vbDp7ZW5jb2RlOmZ1bmN0aW9uKGEpe3JldHVybiBhPzE6MH0sZGVjb2RlOmZ1bmN0aW9uKGEpe3JldHVybiAwIT09cGFyc2VJbnQoYSwxMCl9LGlzOmZ1bmN0aW9uKGEpe3JldHVybiBhPT09ITB8fGE9PT0hMX0scGF0dGVybjovMHwxL30sZGF0ZTp7ZW5jb2RlOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmlzKGEpP1thLmdldEZ1bGxZZWFyKCksKFwiMFwiKyhhLmdldE1vbnRoKCkrMSkpLnNsaWNlKC0yKSwoXCIwXCIrYS5nZXREYXRlKCkpLnNsaWNlKC0yKV0uam9pbihcIi1cIik6Y30sZGVjb2RlOmZ1bmN0aW9uKGEpe2lmKHRoaXMuaXMoYSkpcmV0dXJuIGE7dmFyIGI9dGhpcy5jYXB0dXJlLmV4ZWMoYSk7cmV0dXJuIGI/bmV3IERhdGUoYlsxXSxiWzJdLTEsYlszXSk6Y30saXM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEgaW5zdGFuY2VvZiBEYXRlJiYhaXNOYU4oYS52YWx1ZU9mKCkpfSxlcXVhbHM6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5pcyhhKSYmdGhpcy5pcyhiKSYmYS50b0lTT1N0cmluZygpPT09Yi50b0lTT1N0cmluZygpfSxwYXR0ZXJuOi9bMC05XXs0fS0oPzowWzEtOV18MVswLTJdKS0oPzowWzEtOV18WzEtMl1bMC05XXwzWzAtMV0pLyxjYXB0dXJlOi8oWzAtOV17NH0pLSgwWzEtOV18MVswLTJdKS0oMFsxLTldfFsxLTJdWzAtOV18M1swLTFdKS99LGpzb246e2VuY29kZTpiLnRvSnNvbixkZWNvZGU6Yi5mcm9tSnNvbixpczpiLmlzT2JqZWN0LGVxdWFsczpiLmVxdWFscyxwYXR0ZXJuOi9bXi9dKi99LGFueTp7ZW5jb2RlOmIuaWRlbnRpdHksZGVjb2RlOmIuaWRlbnRpdHksZXF1YWxzOmIuZXF1YWxzLHBhdHRlcm46Ly4qL319O3QuJCRnZXREZWZhdWx0VmFsdWU9ZnVuY3Rpb24oYSl7aWYoIWkoYS52YWx1ZSkpcmV0dXJuIGEudmFsdWU7aWYoIWwpdGhyb3cgbmV3IEVycm9yKFwiSW5qZWN0YWJsZSBmdW5jdGlvbnMgY2Fubm90IGJlIGNhbGxlZCBhdCBjb25maWd1cmF0aW9uIHRpbWVcIik7cmV0dXJuIGwuaW52b2tlKGEudmFsdWUpfSx0aGlzLmNhc2VJbnNlbnNpdGl2ZT1mdW5jdGlvbihhKXtyZXR1cm4gSChhKSYmKG09YSksbX0sdGhpcy5zdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiBIKGEpJiYocD1hKSxwfSx0aGlzLmRlZmF1bHRTcXVhc2hQb2xpY3k9ZnVuY3Rpb24oYSl7aWYoIUgoYSkpcmV0dXJuIHE7aWYoYSE9PSEwJiZhIT09ITEmJiFKKGEpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc3F1YXNoIHBvbGljeTogXCIrYStcIi4gVmFsaWQgcG9saWNpZXM6IGZhbHNlLCB0cnVlLCBhcmJpdHJhcnktc3RyaW5nXCIpO3JldHVybiBxPWEsYX0sdGhpcy5jb21waWxlPWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyByKGEsTihmKCksYikpfSx0aGlzLmlzTWF0Y2hlcj1mdW5jdGlvbihhKXtpZighSyhhKSlyZXR1cm4hMTt2YXIgYj0hMDtyZXR1cm4gTShyLnByb3RvdHlwZSxmdW5jdGlvbihjLGQpe0koYykmJihiPWImJkgoYVtkXSkmJkkoYVtkXSkpfSksYn0sdGhpcy50eXBlPWZ1bmN0aW9uKGEsYixjKXtpZighSChiKSlyZXR1cm4gdVthXTtpZih1Lmhhc093blByb3BlcnR5KGEpKXRocm93IG5ldyBFcnJvcihcIkEgdHlwZSBuYW1lZCAnXCIrYStcIicgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkLlwiKTtyZXR1cm4gdVthXT1uZXcgcyhOKHtuYW1lOmF9LGIpKSxjJiYody5wdXNoKHtuYW1lOmEsZGVmOmN9KSx2fHxqKCkpLHRoaXN9LE0oeCxmdW5jdGlvbihhLGIpe3VbYl09bmV3IHMoTih7bmFtZTpifSxhKSl9KSx1PWQodSx7fSksdGhpcy4kZ2V0PVtcIiRpbmplY3RvclwiLGZ1bmN0aW9uKGEpe3JldHVybiBsPWEsdj0hMSxqKCksTSh4LGZ1bmN0aW9uKGEsYil7dVtiXXx8KHVbYl09bmV3IHMoYSkpfSksdGhpc31dLHRoaXMuUGFyYW09ZnVuY3Rpb24oYSxiLGQsZSl7ZnVuY3Rpb24gZihhKXt2YXIgYj1LKGEpP2coYSk6W10sYz0tMT09PWgoYixcInZhbHVlXCIpJiYtMT09PWgoYixcInR5cGVcIikmJi0xPT09aChiLFwic3F1YXNoXCIpJiYtMT09PWgoYixcImFycmF5XCIpO3JldHVybiBjJiYoYT17dmFsdWU6YX0pLGEuJCRmbj1pKGEudmFsdWUpP2EudmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gYS52YWx1ZX0sYX1mdW5jdGlvbiBqKGIsYyxkKXtpZihiLnR5cGUmJmMpdGhyb3cgbmV3IEVycm9yKFwiUGFyYW0gJ1wiK2ErXCInIGhhcyB0d28gdHlwZSBjb25maWd1cmF0aW9ucy5cIik7cmV0dXJuIGM/YzpiLnR5cGU/Yi50eXBlIGluc3RhbmNlb2Ygcz9iLnR5cGU6bmV3IHMoYi50eXBlKTpcImNvbmZpZ1wiPT09ZD91LmFueTp1LnN0cmluZ31mdW5jdGlvbiBrKCl7dmFyIGI9e2FycmF5Olwic2VhcmNoXCI9PT1lP1wiYXV0b1wiOiExfSxjPWEubWF0Y2goL1xcW1xcXSQvKT97YXJyYXk6ITB9Ont9O3JldHVybiBOKGIsYyxkKS5hcnJheX1mdW5jdGlvbiBtKGEsYil7dmFyIGM9YS5zcXVhc2g7aWYoIWJ8fGM9PT0hMSlyZXR1cm4hMTtpZighSChjKXx8bnVsbD09YylyZXR1cm4gcTtpZihjPT09ITB8fEooYykpcmV0dXJuIGM7dGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzcXVhc2ggcG9saWN5OiAnXCIrYytcIicuIFZhbGlkIHBvbGljaWVzOiBmYWxzZSwgdHJ1ZSwgb3IgYXJiaXRyYXJ5IHN0cmluZ1wiKX1mdW5jdGlvbiBwKGEsYixkLGUpe3ZhciBmLGcsaT1be2Zyb206XCJcIix0bzpkfHxiP2M6XCJcIn0se2Zyb206bnVsbCx0bzpkfHxiP2M6XCJcIn1dO3JldHVybiBmPUwoYS5yZXBsYWNlKT9hLnJlcGxhY2U6W10sSihlKSYmZi5wdXNoKHtmcm9tOmUsdG86Y30pLGc9byhmLGZ1bmN0aW9uKGEpe3JldHVybiBhLmZyb219KSxuKGksZnVuY3Rpb24oYSl7cmV0dXJuLTE9PT1oKGcsYS5mcm9tKX0pLmNvbmNhdChmKX1mdW5jdGlvbiByKCl7aWYoIWwpdGhyb3cgbmV3IEVycm9yKFwiSW5qZWN0YWJsZSBmdW5jdGlvbnMgY2Fubm90IGJlIGNhbGxlZCBhdCBjb25maWd1cmF0aW9uIHRpbWVcIik7dmFyIGE9bC5pbnZva2UoZC4kJGZuKTtpZihudWxsIT09YSYmYSE9PWMmJiF3LnR5cGUuaXMoYSkpdGhyb3cgbmV3IEVycm9yKFwiRGVmYXVsdCB2YWx1ZSAoXCIrYStcIikgZm9yIHBhcmFtZXRlciAnXCIrdy5pZCtcIicgaXMgbm90IGFuIGluc3RhbmNlIG9mIFR5cGUgKFwiK3cudHlwZS5uYW1lK1wiKVwiKTtyZXR1cm4gYX1mdW5jdGlvbiB0KGEpe2Z1bmN0aW9uIGIoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiBiLmZyb209PT1hfX1mdW5jdGlvbiBjKGEpe3ZhciBjPW8obih3LnJlcGxhY2UsYihhKSksZnVuY3Rpb24oYSl7cmV0dXJuIGEudG99KTtyZXR1cm4gYy5sZW5ndGg/Y1swXTphfXJldHVybiBhPWMoYSksSChhKT93LnR5cGUuJG5vcm1hbGl6ZShhKTpyKCl9ZnVuY3Rpb24gdigpe3JldHVyblwie1BhcmFtOlwiK2ErXCIgXCIrYitcIiBzcXVhc2g6ICdcIit6K1wiJyBvcHRpb25hbDogXCIreStcIn1cIn12YXIgdz10aGlzO2Q9ZihkKSxiPWooZCxiLGUpO3ZhciB4PWsoKTtiPXg/Yi4kYXNBcnJheSh4LFwic2VhcmNoXCI9PT1lKTpiLFwic3RyaW5nXCIhPT1iLm5hbWV8fHh8fFwicGF0aFwiIT09ZXx8ZC52YWx1ZSE9PWN8fChkLnZhbHVlPVwiXCIpO3ZhciB5PWQudmFsdWUhPT1jLHo9bShkLHkpLEE9cChkLHgseSx6KTtOKHRoaXMse2lkOmEsdHlwZTpiLGxvY2F0aW9uOmUsYXJyYXk6eCxzcXVhc2g6eixyZXBsYWNlOkEsaXNPcHRpb25hbDp5LHZhbHVlOnQsZHluYW1pYzpjLGNvbmZpZzpkLHRvU3RyaW5nOnZ9KX0say5wcm90b3R5cGU9eyQkbmV3OmZ1bmN0aW9uKCl7cmV0dXJuIGQodGhpcyxOKG5ldyBrLHskJHBhcmVudDp0aGlzfSkpfSwkJGtleXM6ZnVuY3Rpb24oKXtmb3IodmFyIGE9W10sYj1bXSxjPXRoaXMsZD1nKGsucHJvdG90eXBlKTtjOyliLnB1c2goYyksYz1jLiQkcGFyZW50O3JldHVybiBiLnJldmVyc2UoKSxNKGIsZnVuY3Rpb24oYil7TShnKGIpLGZ1bmN0aW9uKGIpey0xPT09aChhLGIpJiYtMT09PWgoZCxiKSYmYS5wdXNoKGIpfSl9KSxhfSwkJHZhbHVlczpmdW5jdGlvbihhKXt2YXIgYj17fSxjPXRoaXM7cmV0dXJuIE0oYy4kJGtleXMoKSxmdW5jdGlvbihkKXtiW2RdPWNbZF0udmFsdWUoYSYmYVtkXSl9KSxifSwkJGVxdWFsczpmdW5jdGlvbihhLGIpe3ZhciBjPSEwLGQ9dGhpcztyZXR1cm4gTShkLiQka2V5cygpLGZ1bmN0aW9uKGUpe3ZhciBmPWEmJmFbZV0sZz1iJiZiW2VdO2RbZV0udHlwZS5lcXVhbHMoZixnKXx8KGM9ITEpfSksY30sJCR2YWxpZGF0ZXM6ZnVuY3Rpb24oYSl7dmFyIGQsZSxmLGcsaCxpPXRoaXMuJCRrZXlzKCk7Zm9yKGQ9MDtkPGkubGVuZ3RoJiYoZT10aGlzW2lbZF1dLGY9YVtpW2RdXSxmIT09YyYmbnVsbCE9PWZ8fCFlLmlzT3B0aW9uYWwpO2QrKyl7aWYoZz1lLnR5cGUuJG5vcm1hbGl6ZShmKSwhZS50eXBlLmlzKGcpKXJldHVybiExO2lmKGg9ZS50eXBlLmVuY29kZShnKSxiLmlzU3RyaW5nKGgpJiYhZS50eXBlLnBhdHRlcm4uZXhlYyhoKSlyZXR1cm4hMX1yZXR1cm4hMH0sJCRwYXJlbnQ6Y30sdGhpcy5QYXJhbVNldD1rfWZ1bmN0aW9uIHUoYSxkKXtmdW5jdGlvbiBlKGEpe3ZhciBiPS9eXFxeKCg/OlxcXFxbXmEtekEtWjAtOV18W15cXFxcXFxbXFxdXFxeJCorPy4oKXx7fV0rKSopLy5leGVjKGEuc291cmNlKTtyZXR1cm4gbnVsbCE9Yj9iWzFdLnJlcGxhY2UoL1xcXFwoLikvZyxcIiQxXCIpOlwiXCJ9ZnVuY3Rpb24gZihhLGIpe3JldHVybiBhLnJlcGxhY2UoL1xcJChcXCR8XFxkezEsMn0pLyxmdW5jdGlvbihhLGMpe3JldHVybiBiW1wiJFwiPT09Yz8wOk51bWJlcihjKV19KX1mdW5jdGlvbiBnKGEsYixjKXtpZighYylyZXR1cm4hMTt2YXIgZD1hLmludm9rZShiLGIseyRtYXRjaDpjfSk7cmV0dXJuIEgoZCk/ZDohMH1mdW5jdGlvbiBoKGQsZSxmLGcpe2Z1bmN0aW9uIGgoYSxiLGMpe3JldHVyblwiL1wiPT09cD9hOmI/cC5zbGljZSgwLC0xKSthOmM/cC5zbGljZSgxKSthOmF9ZnVuY3Rpb24gbShhKXtmdW5jdGlvbiBiKGEpe3ZhciBiPWEoZixkKTtyZXR1cm4gYj8oSihiKSYmZC5yZXBsYWNlKCkudXJsKGIpLCEwKTohMX1pZighYXx8IWEuZGVmYXVsdFByZXZlbnRlZCl7byYmZC51cmwoKT09PW87bz1jO3ZhciBlLGc9ai5sZW5ndGg7Zm9yKGU9MDtnPmU7ZSsrKWlmKGIoaltlXSkpcmV0dXJuO2smJmIoayl9fWZ1bmN0aW9uIG4oKXtyZXR1cm4gaT1pfHxlLiRvbihcIiRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3NcIixtKX12YXIgbyxwPWcuYmFzZUhyZWYoKSxxPWQudXJsKCk7cmV0dXJuIGx8fG4oKSx7c3luYzpmdW5jdGlvbigpe20oKX0sbGlzdGVuOmZ1bmN0aW9uKCl7cmV0dXJuIG4oKX0sdXBkYXRlOmZ1bmN0aW9uKGEpe3JldHVybiBhP3ZvaWQocT1kLnVybCgpKTp2b2lkKGQudXJsKCkhPT1xJiYoZC51cmwocSksZC5yZXBsYWNlKCkpKX0scHVzaDpmdW5jdGlvbihhLGIsZSl7dmFyIGY9YS5mb3JtYXQoYnx8e30pO251bGwhPT1mJiZiJiZiW1wiI1wiXSYmKGYrPVwiI1wiK2JbXCIjXCJdKSxkLnVybChmKSxvPWUmJmUuJCRhdm9pZFJlc3luYz9kLnVybCgpOmMsZSYmZS5yZXBsYWNlJiZkLnJlcGxhY2UoKX0saHJlZjpmdW5jdGlvbihjLGUsZil7aWYoIWMudmFsaWRhdGVzKGUpKXJldHVybiBudWxsO3ZhciBnPWEuaHRtbDVNb2RlKCk7Yi5pc09iamVjdChnKSYmKGc9Zy5lbmFibGVkKTt2YXIgaT1jLmZvcm1hdChlKTtpZihmPWZ8fHt9LGd8fG51bGw9PT1pfHwoaT1cIiNcIithLmhhc2hQcmVmaXgoKStpKSxudWxsIT09aSYmZSYmZVtcIiNcIl0mJihpKz1cIiNcIitlW1wiI1wiXSksaT1oKGksZyxmLmFic29sdXRlKSwhZi5hYnNvbHV0ZXx8IWkpcmV0dXJuIGk7dmFyIGo9IWcmJmk/XCIvXCI6XCJcIixrPWQucG9ydCgpO3JldHVybiBrPTgwPT09a3x8NDQzPT09az9cIlwiOlwiOlwiK2ssW2QucHJvdG9jb2woKSxcIjovL1wiLGQuaG9zdCgpLGssaixpXS5qb2luKFwiXCIpfX19dmFyIGksaj1bXSxrPW51bGwsbD0hMTt0aGlzLnJ1bGU9ZnVuY3Rpb24oYSl7aWYoIUkoYSkpdGhyb3cgbmV3IEVycm9yKFwiJ3J1bGUnIG11c3QgYmUgYSBmdW5jdGlvblwiKTtyZXR1cm4gai5wdXNoKGEpLHRoaXN9LHRoaXMub3RoZXJ3aXNlPWZ1bmN0aW9uKGEpe2lmKEooYSkpe3ZhciBiPWE7YT1mdW5jdGlvbigpe3JldHVybiBifX1lbHNlIGlmKCFJKGEpKXRocm93IG5ldyBFcnJvcihcIidydWxlJyBtdXN0IGJlIGEgZnVuY3Rpb25cIik7cmV0dXJuIGs9YSx0aGlzfSx0aGlzLndoZW49ZnVuY3Rpb24oYSxiKXt2YXIgYyxoPUooYik7aWYoSihhKSYmKGE9ZC5jb21waWxlKGEpKSwhaCYmIUkoYikmJiFMKGIpKXRocm93IG5ldyBFcnJvcihcImludmFsaWQgJ2hhbmRsZXInIGluIHdoZW4oKVwiKTt2YXIgaT17bWF0Y2hlcjpmdW5jdGlvbihhLGIpe3JldHVybiBoJiYoYz1kLmNvbXBpbGUoYiksYj1bXCIkbWF0Y2hcIixmdW5jdGlvbihhKXtyZXR1cm4gYy5mb3JtYXQoYSl9XSksTihmdW5jdGlvbihjLGQpe3JldHVybiBnKGMsYixhLmV4ZWMoZC5wYXRoKCksZC5zZWFyY2goKSkpfSx7cHJlZml4OkooYS5wcmVmaXgpP2EucHJlZml4OlwiXCJ9KX0scmVnZXg6ZnVuY3Rpb24oYSxiKXtpZihhLmdsb2JhbHx8YS5zdGlja3kpdGhyb3cgbmV3IEVycm9yKFwid2hlbigpIFJlZ0V4cCBtdXN0IG5vdCBiZSBnbG9iYWwgb3Igc3RpY2t5XCIpO3JldHVybiBoJiYoYz1iLGI9W1wiJG1hdGNoXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGYoYyxhKX1dKSxOKGZ1bmN0aW9uKGMsZCl7cmV0dXJuIGcoYyxiLGEuZXhlYyhkLnBhdGgoKSkpfSx7cHJlZml4OmUoYSl9KX19LGo9e21hdGNoZXI6ZC5pc01hdGNoZXIoYSkscmVnZXg6YSBpbnN0YW5jZW9mIFJlZ0V4cH07Zm9yKHZhciBrIGluIGopaWYoaltrXSlyZXR1cm4gdGhpcy5ydWxlKGlba10oYSxiKSk7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCAnd2hhdCcgaW4gd2hlbigpXCIpfSx0aGlzLmRlZmVySW50ZXJjZXB0PWZ1bmN0aW9uKGEpe2E9PT1jJiYoYT0hMCksbD1hfSx0aGlzLiRnZXQ9aCxoLiRpbmplY3Q9W1wiJGxvY2F0aW9uXCIsXCIkcm9vdFNjb3BlXCIsXCIkaW5qZWN0b3JcIixcIiRicm93c2VyXCJdfWZ1bmN0aW9uIHYoYSxlKXtmdW5jdGlvbiBmKGEpe3JldHVybiAwPT09YS5pbmRleE9mKFwiLlwiKXx8MD09PWEuaW5kZXhPZihcIl5cIil9ZnVuY3Rpb24gbShhLGIpe2lmKCFhKXJldHVybiBjO3ZhciBkPUooYSksZT1kP2E6YS5uYW1lLGc9ZihlKTtpZihnKXtpZighYil0aHJvdyBuZXcgRXJyb3IoXCJObyByZWZlcmVuY2UgcG9pbnQgZ2l2ZW4gZm9yIHBhdGggJ1wiK2UrXCInXCIpO2I9bShiKTtmb3IodmFyIGg9ZS5zcGxpdChcIi5cIiksaT0wLGo9aC5sZW5ndGgsaz1iO2o+aTtpKyspaWYoXCJcIiE9PWhbaV18fDAhPT1pKXtpZihcIl5cIiE9PWhbaV0pYnJlYWs7aWYoIWsucGFyZW50KXRocm93IG5ldyBFcnJvcihcIlBhdGggJ1wiK2UrXCInIG5vdCB2YWxpZCBmb3Igc3RhdGUgJ1wiK2IubmFtZStcIidcIik7az1rLnBhcmVudH1lbHNlIGs9YjtoPWguc2xpY2UoaSkuam9pbihcIi5cIiksZT1rLm5hbWUrKGsubmFtZSYmaD9cIi5cIjpcIlwiKStofXZhciBsPXpbZV07cmV0dXJuIWx8fCFkJiYoZHx8bCE9PWEmJmwuc2VsZiE9PWEpP2M6bH1mdW5jdGlvbiBuKGEsYil7QVthXXx8KEFbYV09W10pLEFbYV0ucHVzaChiKX1mdW5jdGlvbiBwKGEpe2Zvcih2YXIgYj1BW2FdfHxbXTtiLmxlbmd0aDspcShiLnNoaWZ0KCkpfWZ1bmN0aW9uIHEoYil7Yj1kKGIse3NlbGY6YixyZXNvbHZlOmIucmVzb2x2ZXx8e30sdG9TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5uYW1lfX0pO3ZhciBjPWIubmFtZTtpZighSihjKXx8Yy5pbmRleE9mKFwiQFwiKT49MCl0aHJvdyBuZXcgRXJyb3IoXCJTdGF0ZSBtdXN0IGhhdmUgYSB2YWxpZCBuYW1lXCIpO2lmKHouaGFzT3duUHJvcGVydHkoYykpdGhyb3cgbmV3IEVycm9yKFwiU3RhdGUgJ1wiK2MrXCInJyBpcyBhbHJlYWR5IGRlZmluZWRcIik7dmFyIGU9LTEhPT1jLmluZGV4T2YoXCIuXCIpP2Muc3Vic3RyaW5nKDAsYy5sYXN0SW5kZXhPZihcIi5cIikpOkooYi5wYXJlbnQpP2IucGFyZW50OksoYi5wYXJlbnQpJiZKKGIucGFyZW50Lm5hbWUpP2IucGFyZW50Lm5hbWU6XCJcIjtpZihlJiYheltlXSlyZXR1cm4gbihlLGIuc2VsZik7Zm9yKHZhciBmIGluIEMpSShDW2ZdKSYmKGJbZl09Q1tmXShiLEMuJGRlbGVnYXRlc1tmXSkpO3JldHVybiB6W2NdPWIsIWJbQl0mJmIudXJsJiZhLndoZW4oYi51cmwsW1wiJG1hdGNoXCIsXCIkc3RhdGVQYXJhbXNcIixmdW5jdGlvbihhLGMpe3kuJGN1cnJlbnQubmF2aWdhYmxlPT1iJiZqKGEsYyl8fHkudHJhbnNpdGlvblRvKGIsYSx7aW5oZXJpdDohMCxsb2NhdGlvbjohMX0pfV0pLHAoYyksYn1mdW5jdGlvbiByKGEpe3JldHVybiBhLmluZGV4T2YoXCIqXCIpPi0xfWZ1bmN0aW9uIHMoYSl7Zm9yKHZhciBiPWEuc3BsaXQoXCIuXCIpLGM9eS4kY3VycmVudC5uYW1lLnNwbGl0KFwiLlwiKSxkPTAsZT1iLmxlbmd0aDtlPmQ7ZCsrKVwiKlwiPT09YltkXSYmKGNbZF09XCIqXCIpO3JldHVyblwiKipcIj09PWJbMF0mJihjPWMuc2xpY2UoaChjLGJbMV0pKSxjLnVuc2hpZnQoXCIqKlwiKSksXCIqKlwiPT09YltiLmxlbmd0aC0xXSYmKGMuc3BsaWNlKGgoYyxiW2IubGVuZ3RoLTJdKSsxLE51bWJlci5NQVhfVkFMVUUpLGMucHVzaChcIioqXCIpKSxiLmxlbmd0aCE9Yy5sZW5ndGg/ITE6Yy5qb2luKFwiXCIpPT09Yi5qb2luKFwiXCIpfWZ1bmN0aW9uIHQoYSxiKXtyZXR1cm4gSihhKSYmIUgoYik/Q1thXTpJKGIpJiZKKGEpPyhDW2FdJiYhQy4kZGVsZWdhdGVzW2FdJiYoQy4kZGVsZWdhdGVzW2FdPUNbYV0pLENbYV09Yix0aGlzKTp0aGlzfWZ1bmN0aW9uIHUoYSxiKXtyZXR1cm4gSyhhKT9iPWE6Yi5uYW1lPWEscShiKSx0aGlzfWZ1bmN0aW9uIHYoYSxlLGYsaCxsLG4scCxxLHQpe2Z1bmN0aW9uIHUoYixjLGQsZil7dmFyIGc9YS4kYnJvYWRjYXN0KFwiJHN0YXRlTm90Rm91bmRcIixiLGMsZCk7aWYoZy5kZWZhdWx0UHJldmVudGVkKXJldHVybiBwLnVwZGF0ZSgpLEQ7aWYoIWcucmV0cnkpcmV0dXJuIG51bGw7aWYoZi4kcmV0cnkpcmV0dXJuIHAudXBkYXRlKCksRTt2YXIgaD15LnRyYW5zaXRpb249ZS53aGVuKGcucmV0cnkpO3JldHVybiBoLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gaCE9PXkudHJhbnNpdGlvbj9BOihiLm9wdGlvbnMuJHJldHJ5PSEwLHkudHJhbnNpdGlvblRvKGIudG8sYi50b1BhcmFtcyxiLm9wdGlvbnMpKX0sZnVuY3Rpb24oKXtyZXR1cm4gRH0pLHAudXBkYXRlKCksaH1mdW5jdGlvbiB2KGEsYyxkLGcsaSxqKXtmdW5jdGlvbiBtKCl7dmFyIGM9W107cmV0dXJuIE0oYS52aWV3cyxmdW5jdGlvbihkLGUpe3ZhciBnPWQucmVzb2x2ZSYmZC5yZXNvbHZlIT09YS5yZXNvbHZlP2QucmVzb2x2ZTp7fTtnLiR0ZW1wbGF0ZT1bZnVuY3Rpb24oKXtyZXR1cm4gZi5sb2FkKGUse3ZpZXc6ZCxsb2NhbHM6aS5nbG9iYWxzLHBhcmFtczpuLG5vdGlmeTpqLm5vdGlmeX0pfHxcIlwifV0sYy5wdXNoKGwucmVzb2x2ZShnLGkuZ2xvYmFscyxpLnJlc29sdmUsYSkudGhlbihmdW5jdGlvbihjKXtpZihJKGQuY29udHJvbGxlclByb3ZpZGVyKXx8TChkLmNvbnRyb2xsZXJQcm92aWRlcikpe3ZhciBmPWIuZXh0ZW5kKHt9LGcsaS5nbG9iYWxzKTtjLiQkY29udHJvbGxlcj1oLmludm9rZShkLmNvbnRyb2xsZXJQcm92aWRlcixudWxsLGYpfWVsc2UgYy4kJGNvbnRyb2xsZXI9ZC5jb250cm9sbGVyO2MuJCRzdGF0ZT1hLGMuJCRjb250cm9sbGVyQXM9ZC5jb250cm9sbGVyQXMsaVtlXT1jfSkpfSksZS5hbGwoYykudGhlbihmdW5jdGlvbigpe3JldHVybiBpLmdsb2JhbHN9KX12YXIgbj1kP2M6ayhhLnBhcmFtcy4kJGtleXMoKSxjKSxvPXskc3RhdGVQYXJhbXM6bn07aS5yZXNvbHZlPWwucmVzb2x2ZShhLnJlc29sdmUsbyxpLnJlc29sdmUsYSk7dmFyIHA9W2kucmVzb2x2ZS50aGVuKGZ1bmN0aW9uKGEpe2kuZ2xvYmFscz1hfSldO3JldHVybiBnJiZwLnB1c2goZyksZS5hbGwocCkudGhlbihtKS50aGVuKGZ1bmN0aW9uKGEpe3JldHVybiBpfSl9dmFyIEE9ZS5yZWplY3QobmV3IEVycm9yKFwidHJhbnNpdGlvbiBzdXBlcnNlZGVkXCIpKSxDPWUucmVqZWN0KG5ldyBFcnJvcihcInRyYW5zaXRpb24gcHJldmVudGVkXCIpKSxEPWUucmVqZWN0KG5ldyBFcnJvcihcInRyYW5zaXRpb24gYWJvcnRlZFwiKSksRT1lLnJlamVjdChuZXcgRXJyb3IoXCJ0cmFuc2l0aW9uIGZhaWxlZFwiKSk7cmV0dXJuIHgubG9jYWxzPXtyZXNvbHZlOm51bGwsZ2xvYmFsczp7JHN0YXRlUGFyYW1zOnt9fX0seT17cGFyYW1zOnt9LGN1cnJlbnQ6eC5zZWxmLCRjdXJyZW50OngsdHJhbnNpdGlvbjpudWxsfSx5LnJlbG9hZD1mdW5jdGlvbihhKXtyZXR1cm4geS50cmFuc2l0aW9uVG8oeS5jdXJyZW50LG4se3JlbG9hZDphfHwhMCxpbmhlcml0OiExLG5vdGlmeTohMH0pfSx5LmdvPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4geS50cmFuc2l0aW9uVG8oYSxiLE4oe2luaGVyaXQ6ITAscmVsYXRpdmU6eS4kY3VycmVudH0sYykpfSx5LnRyYW5zaXRpb25Ubz1mdW5jdGlvbihiLGMsZil7Yz1jfHx7fSxmPU4oe2xvY2F0aW9uOiEwLGluaGVyaXQ6ITEscmVsYXRpdmU6bnVsbCxub3RpZnk6ITAscmVsb2FkOiExLCRyZXRyeTohMX0sZnx8e30pO3ZhciBnLGo9eS4kY3VycmVudCxsPXkucGFyYW1zLG89ai5wYXRoLHE9bShiLGYucmVsYXRpdmUpLHI9Y1tcIiNcIl07aWYoIUgocSkpe3ZhciBzPXt0bzpiLHRvUGFyYW1zOmMsb3B0aW9uczpmfSx0PXUocyxqLnNlbGYsbCxmKTtpZih0KXJldHVybiB0O2lmKGI9cy50byxjPXMudG9QYXJhbXMsZj1zLm9wdGlvbnMscT1tKGIsZi5yZWxhdGl2ZSksIUgocSkpe2lmKCFmLnJlbGF0aXZlKXRocm93IG5ldyBFcnJvcihcIk5vIHN1Y2ggc3RhdGUgJ1wiK2IrXCInXCIpO3Rocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCByZXNvbHZlICdcIitiK1wiJyBmcm9tIHN0YXRlICdcIitmLnJlbGF0aXZlK1wiJ1wiKX19aWYocVtCXSl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgdHJhbnNpdGlvbiB0byBhYnN0cmFjdCBzdGF0ZSAnXCIrYitcIidcIik7aWYoZi5pbmhlcml0JiYoYz1pKG4sY3x8e30seS4kY3VycmVudCxxKSksIXEucGFyYW1zLiQkdmFsaWRhdGVzKGMpKXJldHVybiBFO2M9cS5wYXJhbXMuJCR2YWx1ZXMoYyksYj1xO3ZhciB6PWIucGF0aCxEPTAsRj16W0RdLEc9eC5sb2NhbHMsST1bXTtpZihmLnJlbG9hZCl7aWYoSihmLnJlbG9hZCl8fEsoZi5yZWxvYWQpKXtpZihLKGYucmVsb2FkKSYmIWYucmVsb2FkLm5hbWUpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCByZWxvYWQgc3RhdGUgb2JqZWN0XCIpO3ZhciBMPWYucmVsb2FkPT09ITA/b1swXTptKGYucmVsb2FkKTtpZihmLnJlbG9hZCYmIUwpdGhyb3cgbmV3IEVycm9yKFwiTm8gc3VjaCByZWxvYWQgc3RhdGUgJ1wiKyhKKGYucmVsb2FkKT9mLnJlbG9hZDpmLnJlbG9hZC5uYW1lKStcIidcIik7Zm9yKDtGJiZGPT09b1tEXSYmRiE9PUw7KUc9SVtEXT1GLmxvY2FscyxEKyssRj16W0RdfX1lbHNlIGZvcig7RiYmRj09PW9bRF0mJkYub3duUGFyYW1zLiQkZXF1YWxzKGMsbCk7KUc9SVtEXT1GLmxvY2FscyxEKyssRj16W0RdO2lmKHcoYixjLGosbCxHLGYpKXJldHVybiByJiYoY1tcIiNcIl09cikseS5wYXJhbXM9YyxPKHkucGFyYW1zLG4pLGYubG9jYXRpb24mJmIubmF2aWdhYmxlJiZiLm5hdmlnYWJsZS51cmwmJihwLnB1c2goYi5uYXZpZ2FibGUudXJsLGMseyQkYXZvaWRSZXN5bmM6ITAscmVwbGFjZTpcInJlcGxhY2VcIj09PWYubG9jYXRpb259KSxwLnVwZGF0ZSghMCkpLHkudHJhbnNpdGlvbj1udWxsLGUud2hlbih5LmN1cnJlbnQpO2lmKGM9ayhiLnBhcmFtcy4kJGtleXMoKSxjfHx7fSksZi5ub3RpZnkmJmEuJGJyb2FkY2FzdChcIiRzdGF0ZUNoYW5nZVN0YXJ0XCIsYi5zZWxmLGMsai5zZWxmLGwpLmRlZmF1bHRQcmV2ZW50ZWQpcmV0dXJuIGEuJGJyb2FkY2FzdChcIiRzdGF0ZUNoYW5nZUNhbmNlbFwiLGIuc2VsZixjLGouc2VsZixsKSxwLnVwZGF0ZSgpLEM7Zm9yKHZhciBNPWUud2hlbihHKSxQPUQ7UDx6Lmxlbmd0aDtQKyssRj16W1BdKUc9SVtQXT1kKEcpLE09dihGLGMsRj09PWIsTSxHLGYpO3ZhciBRPXkudHJhbnNpdGlvbj1NLnRoZW4oZnVuY3Rpb24oKXt2YXIgZCxlLGc7aWYoeS50cmFuc2l0aW9uIT09USlyZXR1cm4gQTtmb3IoZD1vLmxlbmd0aC0xO2Q+PUQ7ZC0tKWc9b1tkXSxnLnNlbGYub25FeGl0JiZoLmludm9rZShnLnNlbGYub25FeGl0LGcuc2VsZixnLmxvY2Fscy5nbG9iYWxzKSxnLmxvY2Fscz1udWxsO2ZvcihkPUQ7ZDx6Lmxlbmd0aDtkKyspZT16W2RdLGUubG9jYWxzPUlbZF0sZS5zZWxmLm9uRW50ZXImJmguaW52b2tlKGUuc2VsZi5vbkVudGVyLGUuc2VsZixlLmxvY2Fscy5nbG9iYWxzKTtyZXR1cm4gciYmKGNbXCIjXCJdPXIpLHkudHJhbnNpdGlvbiE9PVE/QTooeS4kY3VycmVudD1iLHkuY3VycmVudD1iLnNlbGYseS5wYXJhbXM9YyxPKHkucGFyYW1zLG4pLHkudHJhbnNpdGlvbj1udWxsLGYubG9jYXRpb24mJmIubmF2aWdhYmxlJiZwLnB1c2goYi5uYXZpZ2FibGUudXJsLGIubmF2aWdhYmxlLmxvY2Fscy5nbG9iYWxzLiRzdGF0ZVBhcmFtcyx7JCRhdm9pZFJlc3luYzohMCxyZXBsYWNlOlwicmVwbGFjZVwiPT09Zi5sb2NhdGlvbn0pLGYubm90aWZ5JiZhLiRicm9hZGNhc3QoXCIkc3RhdGVDaGFuZ2VTdWNjZXNzXCIsYi5zZWxmLGMsai5zZWxmLGwpLHAudXBkYXRlKCEwKSx5LmN1cnJlbnQpfSxmdW5jdGlvbihkKXtyZXR1cm4geS50cmFuc2l0aW9uIT09UT9BOih5LnRyYW5zaXRpb249bnVsbCxnPWEuJGJyb2FkY2FzdChcIiRzdGF0ZUNoYW5nZUVycm9yXCIsYi5zZWxmLGMsai5zZWxmLGwsZCksZy5kZWZhdWx0UHJldmVudGVkfHxwLnVwZGF0ZSgpLGUucmVqZWN0KGQpKX0pO3JldHVybiBRfSx5LmlzPWZ1bmN0aW9uKGEsYixkKXtkPU4oe3JlbGF0aXZlOnkuJGN1cnJlbnR9LGR8fHt9KTt2YXIgZT1tKGEsZC5yZWxhdGl2ZSk7cmV0dXJuIEgoZSk/eS4kY3VycmVudCE9PWU/ITE6Yj9qKGUucGFyYW1zLiQkdmFsdWVzKGIpLG4pOiEwOmN9LHkuaW5jbHVkZXM9ZnVuY3Rpb24oYSxiLGQpe2lmKGQ9Tih7cmVsYXRpdmU6eS4kY3VycmVudH0sZHx8e30pLEooYSkmJnIoYSkpe2lmKCFzKGEpKXJldHVybiExO2E9eS4kY3VycmVudC5uYW1lfXZhciBlPW0oYSxkLnJlbGF0aXZlKTtyZXR1cm4gSChlKT9IKHkuJGN1cnJlbnQuaW5jbHVkZXNbZS5uYW1lXSk/Yj9qKGUucGFyYW1zLiQkdmFsdWVzKGIpLG4sZyhiKSk6ITA6ITE6Y30seS5ocmVmPWZ1bmN0aW9uKGEsYixkKXtkPU4oe2xvc3N5OiEwLGluaGVyaXQ6ITAsYWJzb2x1dGU6ITEscmVsYXRpdmU6eS4kY3VycmVudH0sZHx8e30pO3ZhciBlPW0oYSxkLnJlbGF0aXZlKTtpZighSChlKSlyZXR1cm4gbnVsbDtkLmluaGVyaXQmJihiPWkobixifHx7fSx5LiRjdXJyZW50LGUpKTt2YXIgZj1lJiZkLmxvc3N5P2UubmF2aWdhYmxlOmU7cmV0dXJuIGYmJmYudXJsIT09YyYmbnVsbCE9PWYudXJsP3AuaHJlZihmLnVybCxrKGUucGFyYW1zLiQka2V5cygpLmNvbmNhdChcIiNcIiksYnx8e30pLHthYnNvbHV0ZTpkLmFic29sdXRlfSk6bnVsbH0seS5nZXQ9ZnVuY3Rpb24oYSxiKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gbyhnKHopLGZ1bmN0aW9uKGEpe3JldHVybiB6W2FdLnNlbGZ9KTt2YXIgYz1tKGEsYnx8eS4kY3VycmVudCk7cmV0dXJuIGMmJmMuc2VsZj9jLnNlbGY6bnVsbH0seX1mdW5jdGlvbiB3KGEsYixjLGQsZSxmKXtmdW5jdGlvbiBnKGEsYixjKXtmdW5jdGlvbiBkKGIpe3JldHVyblwic2VhcmNoXCIhPWEucGFyYW1zW2JdLmxvY2F0aW9ufXZhciBlPWEucGFyYW1zLiQka2V5cygpLmZpbHRlcihkKSxmPWwuYXBwbHkoe30sW2EucGFyYW1zXS5jb25jYXQoZSkpLGc9bmV3IFAuUGFyYW1TZXQoZik7cmV0dXJuIGcuJCRlcXVhbHMoYixjKX1yZXR1cm4hZi5yZWxvYWQmJmE9PT1jJiYoZT09PWMubG9jYWxzfHxhLnNlbGYucmVsb2FkT25TZWFyY2g9PT0hMSYmZyhjLGQsYikpPyEwOnZvaWQgMH12YXIgeCx5LHo9e30sQT17fSxCPVwiYWJzdHJhY3RcIixDPXtwYXJlbnQ6ZnVuY3Rpb24oYSl7aWYoSChhLnBhcmVudCkmJmEucGFyZW50KXJldHVybiBtKGEucGFyZW50KTt2YXIgYj0vXiguKylcXC5bXi5dKyQvLmV4ZWMoYS5uYW1lKTtyZXR1cm4gYj9tKGJbMV0pOnh9LGRhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucGFyZW50JiZhLnBhcmVudC5kYXRhJiYoYS5kYXRhPWEuc2VsZi5kYXRhPU4oe30sYS5wYXJlbnQuZGF0YSxhLmRhdGEpKSxhLmRhdGF9LHVybDpmdW5jdGlvbihhKXt2YXIgYj1hLnVybCxjPXtwYXJhbXM6YS5wYXJhbXN8fHt9fTtpZihKKGIpKXJldHVyblwiXlwiPT1iLmNoYXJBdCgwKT9lLmNvbXBpbGUoYi5zdWJzdHJpbmcoMSksYyk6KGEucGFyZW50Lm5hdmlnYWJsZXx8eCkudXJsLmNvbmNhdChiLGMpO2lmKCFifHxlLmlzTWF0Y2hlcihiKSlyZXR1cm4gYjt0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHVybCAnXCIrYitcIicgaW4gc3RhdGUgJ1wiK2ErXCInXCIpfSxuYXZpZ2FibGU6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudXJsP2E6YS5wYXJlbnQ/YS5wYXJlbnQubmF2aWdhYmxlOm51bGx9LG93blBhcmFtczpmdW5jdGlvbihhKXt2YXIgYj1hLnVybCYmYS51cmwucGFyYW1zfHxuZXcgUC5QYXJhbVNldDtyZXR1cm4gTShhLnBhcmFtc3x8e30sZnVuY3Rpb24oYSxjKXtiW2NdfHwoYltjXT1uZXcgUC5QYXJhbShjLG51bGwsYSxcImNvbmZpZ1wiKSl9KSxifSxwYXJhbXM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucGFyZW50JiZhLnBhcmVudC5wYXJhbXM/TihhLnBhcmVudC5wYXJhbXMuJCRuZXcoKSxhLm93blBhcmFtcyk6bmV3IFAuUGFyYW1TZXR9LHZpZXdzOmZ1bmN0aW9uKGEpe3ZhciBiPXt9O3JldHVybiBNKEgoYS52aWV3cyk/YS52aWV3czp7XCJcIjphfSxmdW5jdGlvbihjLGQpe2QuaW5kZXhPZihcIkBcIik8MCYmKGQrPVwiQFwiK2EucGFyZW50Lm5hbWUpLGJbZF09Y30pLGJ9LHBhdGg6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucGFyZW50P2EucGFyZW50LnBhdGguY29uY2F0KGEpOltdfSxpbmNsdWRlczpmdW5jdGlvbihhKXt2YXIgYj1hLnBhcmVudD9OKHt9LGEucGFyZW50LmluY2x1ZGVzKTp7fTtyZXR1cm4gYlthLm5hbWVdPSEwLGJ9LCRkZWxlZ2F0ZXM6e319O3g9cSh7bmFtZTpcIlwiLHVybDpcIl5cIix2aWV3czpudWxsLFwiYWJzdHJhY3RcIjohMH0pLHgubmF2aWdhYmxlPW51bGwsdGhpcy5kZWNvcmF0b3I9dCx0aGlzLnN0YXRlPXUsdGhpcy4kZ2V0PXYsdi4kaW5qZWN0PVtcIiRyb290U2NvcGVcIixcIiRxXCIsXCIkdmlld1wiLFwiJGluamVjdG9yXCIsXCIkcmVzb2x2ZVwiLFwiJHN0YXRlUGFyYW1zXCIsXCIkdXJsUm91dGVyXCIsXCIkbG9jYXRpb25cIixcIiR1cmxNYXRjaGVyRmFjdG9yeVwiXX1mdW5jdGlvbiB3KCl7ZnVuY3Rpb24gYShhLGIpe3JldHVybntsb2FkOmZ1bmN0aW9uKGMsZCl7dmFyIGUsZj17dGVtcGxhdGU6bnVsbCxjb250cm9sbGVyOm51bGwsdmlldzpudWxsLGxvY2FsczpudWxsLG5vdGlmeTohMCxhc3luYzohMCxwYXJhbXM6e319O3JldHVybiBkPU4oZixkKSxkLnZpZXcmJihlPWIuZnJvbUNvbmZpZyhkLnZpZXcsZC5wYXJhbXMsZC5sb2NhbHMpKSxlJiZkLm5vdGlmeSYmYS4kYnJvYWRjYXN0KFwiJHZpZXdDb250ZW50TG9hZGluZ1wiLGQpLGV9fX10aGlzLiRnZXQ9YSxhLiRpbmplY3Q9W1wiJHJvb3RTY29wZVwiLFwiJHRlbXBsYXRlRmFjdG9yeVwiXX1mdW5jdGlvbiB4KCl7dmFyIGE9ITE7dGhpcy51c2VBbmNob3JTY3JvbGw9ZnVuY3Rpb24oKXthPSEwfSx0aGlzLiRnZXQ9W1wiJGFuY2hvclNjcm9sbFwiLFwiJHRpbWVvdXRcIixmdW5jdGlvbihiLGMpe3JldHVybiBhP2I6ZnVuY3Rpb24oYSl7cmV0dXJuIGMoZnVuY3Rpb24oKXthWzBdLnNjcm9sbEludG9WaWV3KCl9LDAsITEpfX1dfWZ1bmN0aW9uIHkoYSxjLGQsZSl7ZnVuY3Rpb24gZigpe3JldHVybiBjLmhhcz9mdW5jdGlvbihhKXtyZXR1cm4gYy5oYXMoYSk/Yy5nZXQoYSk6bnVsbH06ZnVuY3Rpb24oYSl7dHJ5e3JldHVybiBjLmdldChhKX1jYXRjaChiKXtyZXR1cm4gbnVsbH19fWZ1bmN0aW9uIGcoYSxiKXt2YXIgYz1mdW5jdGlvbigpe3JldHVybntlbnRlcjpmdW5jdGlvbihhLGIsYyl7Yi5hZnRlcihhKSxjKCl9LGxlYXZlOmZ1bmN0aW9uKGEsYil7YS5yZW1vdmUoKSxiKCl9fX07aWYoailyZXR1cm57ZW50ZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWouZW50ZXIoYSxudWxsLGIsYyk7ZCYmZC50aGVuJiZkLnRoZW4oYyl9LGxlYXZlOmZ1bmN0aW9uKGEsYil7dmFyIGM9ai5sZWF2ZShhLGIpO2MmJmMudGhlbiYmYy50aGVuKGIpfX07aWYoaSl7dmFyIGQ9aSYmaShiLGEpO3JldHVybntlbnRlcjpmdW5jdGlvbihhLGIsYyl7ZC5lbnRlcihhLG51bGwsYiksYygpfSxsZWF2ZTpmdW5jdGlvbihhLGIpe2QubGVhdmUoYSksYigpfX19cmV0dXJuIGMoKX12YXIgaD1mKCksaT1oKFwiJGFuaW1hdG9yXCIpLGo9aChcIiRhbmltYXRlXCIpLGs9e3Jlc3RyaWN0OlwiRUNBXCIsdGVybWluYWw6ITAscHJpb3JpdHk6NDAwLHRyYW5zY2x1ZGU6XCJlbGVtZW50XCIsY29tcGlsZTpmdW5jdGlvbihjLGYsaCl7cmV0dXJuIGZ1bmN0aW9uKGMsZixpKXtmdW5jdGlvbiBqKCl7bCYmKGwucmVtb3ZlKCksbD1udWxsKSxuJiYobi4kZGVzdHJveSgpLG49bnVsbCksbSYmKHIubGVhdmUobSxmdW5jdGlvbigpe2w9bnVsbH0pLGw9bSxtPW51bGwpfWZ1bmN0aW9uIGsoZyl7dmFyIGssbD1BKGMsaSxmLGUpLHM9bCYmYS4kY3VycmVudCYmYS4kY3VycmVudC5sb2NhbHNbbF07aWYoZ3x8cyE9PW8pe2s9Yy4kbmV3KCksbz1hLiRjdXJyZW50LmxvY2Fsc1tsXTt2YXIgdD1oKGssZnVuY3Rpb24oYSl7ci5lbnRlcihhLGYsZnVuY3Rpb24oKXtuJiZuLiRlbWl0KFwiJHZpZXdDb250ZW50QW5pbWF0aW9uRW5kZWRcIiksKGIuaXNEZWZpbmVkKHEpJiYhcXx8Yy4kZXZhbChxKSkmJmQoYSl9KSxqKCl9KTttPXQsbj1rLG4uJGVtaXQoXCIkdmlld0NvbnRlbnRMb2FkZWRcIiksbi4kZXZhbChwKX19dmFyIGwsbSxuLG8scD1pLm9ubG9hZHx8XCJcIixxPWkuYXV0b3Njcm9sbCxyPWcoaSxjKTtjLiRvbihcIiRzdGF0ZUNoYW5nZVN1Y2Nlc3NcIixmdW5jdGlvbigpe2soITEpfSksYy4kb24oXCIkdmlld0NvbnRlbnRMb2FkaW5nXCIsZnVuY3Rpb24oKXtrKCExKX0pLGsoITApfX19O3JldHVybiBrfWZ1bmN0aW9uIHooYSxiLGMsZCl7cmV0dXJue3Jlc3RyaWN0OlwiRUNBXCIscHJpb3JpdHk6LTQwMCxjb21waWxlOmZ1bmN0aW9uKGUpe3ZhciBmPWUuaHRtbCgpO3JldHVybiBmdW5jdGlvbihlLGcsaCl7dmFyIGk9Yy4kY3VycmVudCxqPUEoZSxoLGcsZCksaz1pJiZpLmxvY2Fsc1tqXTtpZihrKXtnLmRhdGEoXCIkdWlWaWV3XCIse25hbWU6aixzdGF0ZTprLiQkc3RhdGV9KSxnLmh0bWwoay4kdGVtcGxhdGU/ay4kdGVtcGxhdGU6Zik7dmFyIGw9YShnLmNvbnRlbnRzKCkpO2lmKGsuJCRjb250cm9sbGVyKXtrLiRzY29wZT1lLGsuJGVsZW1lbnQ9Zzt2YXIgbT1iKGsuJCRjb250cm9sbGVyLGspO2suJCRjb250cm9sbGVyQXMmJihlW2suJCRjb250cm9sbGVyQXNdPW0pLGcuZGF0YShcIiRuZ0NvbnRyb2xsZXJDb250cm9sbGVyXCIsbSksZy5jaGlsZHJlbigpLmRhdGEoXCIkbmdDb250cm9sbGVyQ29udHJvbGxlclwiLG0pfWwoZSl9fX19fWZ1bmN0aW9uIEEoYSxiLGMsZCl7dmFyIGU9ZChiLnVpVmlld3x8Yi5uYW1lfHxcIlwiKShhKSxmPWMuaW5oZXJpdGVkRGF0YShcIiR1aVZpZXdcIik7cmV0dXJuIGUuaW5kZXhPZihcIkBcIik+PTA/ZTplK1wiQFwiKyhmP2Yuc3RhdGUubmFtZTpcIlwiKX1mdW5jdGlvbiBCKGEsYil7dmFyIGMsZD1hLm1hdGNoKC9eXFxzKih7W159XSp9KVxccyokLyk7aWYoZCYmKGE9YitcIihcIitkWzFdK1wiKVwiKSxjPWEucmVwbGFjZSgvXFxuL2csXCIgXCIpLm1hdGNoKC9eKFteKF0rPylcXHMqKFxcKCguKilcXCkpPyQvKSwhY3x8NCE9PWMubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc3RhdGUgcmVmICdcIithK1wiJ1wiKTtyZXR1cm57c3RhdGU6Y1sxXSxwYXJhbUV4cHI6Y1szXXx8bnVsbH19ZnVuY3Rpb24gQyhhKXt2YXIgYj1hLnBhcmVudCgpLmluaGVyaXRlZERhdGEoXCIkdWlWaWV3XCIpO3JldHVybiBiJiZiLnN0YXRlJiZiLnN0YXRlLm5hbWU/Yi5zdGF0ZTp2b2lkIDB9ZnVuY3Rpb24gRChhLGMpe3ZhciBkPVtcImxvY2F0aW9uXCIsXCJpbmhlcml0XCIsXCJyZWxvYWRcIixcImFic29sdXRlXCJdO3JldHVybntyZXN0cmljdDpcIkFcIixyZXF1aXJlOltcIj9edWlTcmVmQWN0aXZlXCIsXCI/XnVpU3JlZkFjdGl2ZUVxXCJdLGxpbms6ZnVuY3Rpb24oZSxmLGcsaCl7dmFyIGk9QihnLnVpU3JlZixhLmN1cnJlbnQubmFtZSksaj1udWxsLGs9QyhmKXx8YS4kY3VycmVudCxsPVwiW29iamVjdCBTVkdBbmltYXRlZFN0cmluZ11cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChmLnByb3AoXCJocmVmXCIpKT9cInhsaW5rOmhyZWZcIjpcImhyZWZcIixtPW51bGwsbj1cIkFcIj09PWYucHJvcChcInRhZ05hbWVcIikudG9VcHBlckNhc2UoKSxvPVwiRk9STVwiPT09ZlswXS5ub2RlTmFtZSxwPW8/XCJhY3Rpb25cIjpsLHE9ITAscj17cmVsYXRpdmU6ayxpbmhlcml0OiEwfSxzPWUuJGV2YWwoZy51aVNyZWZPcHRzKXx8e307Yi5mb3JFYWNoKGQsZnVuY3Rpb24oYSl7YSBpbiBzJiYoclthXT1zW2FdKX0pO3ZhciB0PWZ1bmN0aW9uKGMpe2lmKGMmJihqPWIuY29weShjKSkscSl7bT1hLmhyZWYoaS5zdGF0ZSxqLHIpO3ZhciBkPWhbMV18fGhbMF07cmV0dXJuIGQmJmQuJCRhZGRTdGF0ZUluZm8oaS5zdGF0ZSxqKSxudWxsPT09bT8ocT0hMSwhMSk6dm9pZCBnLiRzZXQocCxtKX19O2kucGFyYW1FeHByJiYoZS4kd2F0Y2goaS5wYXJhbUV4cHIsZnVuY3Rpb24oYSxiKXthIT09aiYmdChhKX0sITApLGo9Yi5jb3B5KGUuJGV2YWwoaS5wYXJhbUV4cHIpKSksdCgpLG98fGYuYmluZChcImNsaWNrXCIsZnVuY3Rpb24oYil7dmFyIGQ9Yi53aGljaHx8Yi5idXR0b247aWYoIShkPjF8fGIuY3RybEtleXx8Yi5tZXRhS2V5fHxiLnNoaWZ0S2V5fHxmLmF0dHIoXCJ0YXJnZXRcIikpKXt2YXIgZT1jKGZ1bmN0aW9uKCl7YS5nbyhpLnN0YXRlLGoscil9KTtiLnByZXZlbnREZWZhdWx0KCk7dmFyIGc9biYmIW0/MTowO2IucHJldmVudERlZmF1bHQ9ZnVuY3Rpb24oKXtnLS08PTAmJmMuY2FuY2VsKGUpfX19KX19fWZ1bmN0aW9uIEUoYSxiLGMpe3JldHVybntyZXN0cmljdDpcIkFcIixjb250cm9sbGVyOltcIiRzY29wZVwiLFwiJGVsZW1lbnRcIixcIiRhdHRyc1wiLGZ1bmN0aW9uKGIsZCxlKXtmdW5jdGlvbiBmKCl7ZygpP2QuYWRkQ2xhc3MoaSk6ZC5yZW1vdmVDbGFzcyhpKX1mdW5jdGlvbiBnKCl7Zm9yKHZhciBhPTA7YTxqLmxlbmd0aDthKyspaWYoaChqW2FdLnN0YXRlLGpbYV0ucGFyYW1zKSlyZXR1cm4hMDtyZXR1cm4hMX1mdW5jdGlvbiBoKGIsYyl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUudWlTcmVmQWN0aXZlRXE/YS5pcyhiLm5hbWUsYyk6YS5pbmNsdWRlcyhiLm5hbWUsYyl9dmFyIGksaj1bXTtpPWMoZS51aVNyZWZBY3RpdmVFcXx8ZS51aVNyZWZBY3RpdmV8fFwiXCIsITEpKGIpLHRoaXMuJCRhZGRTdGF0ZUluZm89ZnVuY3Rpb24oYixjKXt2YXIgZT1hLmdldChiLEMoZCkpO2oucHVzaCh7c3RhdGU6ZXx8e25hbWU6Yn0scGFyYW1zOmN9KSxmKCl9LGIuJG9uKFwiJHN0YXRlQ2hhbmdlU3VjY2Vzc1wiLGYpfV19fWZ1bmN0aW9uIEYoYSl7dmFyIGI9ZnVuY3Rpb24oYil7cmV0dXJuIGEuaXMoYil9O3JldHVybiBiLiRzdGF0ZWZ1bD0hMCxifWZ1bmN0aW9uIEcoYSl7dmFyIGI9ZnVuY3Rpb24oYil7cmV0dXJuIGEuaW5jbHVkZXMoYil9O3JldHVybiBiLiRzdGF0ZWZ1bD0hMCxifXZhciBIPWIuaXNEZWZpbmVkLEk9Yi5pc0Z1bmN0aW9uLEo9Yi5pc1N0cmluZyxLPWIuaXNPYmplY3QsTD1iLmlzQXJyYXksTT1iLmZvckVhY2gsTj1iLmV4dGVuZCxPPWIuY29weTtiLm1vZHVsZShcInVpLnJvdXRlci51dGlsXCIsW1wibmdcIl0pLGIubW9kdWxlKFwidWkucm91dGVyLnJvdXRlclwiLFtcInVpLnJvdXRlci51dGlsXCJdKSxiLm1vZHVsZShcInVpLnJvdXRlci5zdGF0ZVwiLFtcInVpLnJvdXRlci5yb3V0ZXJcIixcInVpLnJvdXRlci51dGlsXCJdKSxiLm1vZHVsZShcInVpLnJvdXRlclwiLFtcInVpLnJvdXRlci5zdGF0ZVwiXSksYi5tb2R1bGUoXCJ1aS5yb3V0ZXIuY29tcGF0XCIsW1widWkucm91dGVyXCJdKSxwLiRpbmplY3Q9W1wiJHFcIixcIiRpbmplY3RvclwiXSxiLm1vZHVsZShcInVpLnJvdXRlci51dGlsXCIpLnNlcnZpY2UoXCIkcmVzb2x2ZVwiLHApLHEuJGluamVjdD1bXCIkaHR0cFwiLFwiJHRlbXBsYXRlQ2FjaGVcIixcIiRpbmplY3RvclwiXSxiLm1vZHVsZShcInVpLnJvdXRlci51dGlsXCIpLnNlcnZpY2UoXCIkdGVtcGxhdGVGYWN0b3J5XCIscSk7dmFyIFA7ci5wcm90b3R5cGUuY29uY2F0PWZ1bmN0aW9uKGEsYil7dmFyIGM9e2Nhc2VJbnNlbnNpdGl2ZTpQLmNhc2VJbnNlbnNpdGl2ZSgpLHN0cmljdDpQLnN0cmljdE1vZGUoKSxzcXVhc2g6UC5kZWZhdWx0U3F1YXNoUG9saWN5KCl9O3JldHVybiBuZXcgcih0aGlzLnNvdXJjZVBhdGgrYSt0aGlzLnNvdXJjZVNlYXJjaCxOKGMsYiksdGhpcyl9LHIucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc291cmNlfSxyLnByb3RvdHlwZS5leGVjPWZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhhKXtmdW5jdGlvbiBiKGEpe3JldHVybiBhLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpfWZ1bmN0aW9uIGMoYSl7cmV0dXJuIGEucmVwbGFjZSgvXFxcXC0vZyxcIi1cIil9dmFyIGQ9YihhKS5zcGxpdCgvLSg/IVxcXFwpLyksZT1vKGQsYik7cmV0dXJuIG8oZSxjKS5yZXZlcnNlKCl9dmFyIGQ9dGhpcy5yZWdleHAuZXhlYyhhKTtpZighZClyZXR1cm4gbnVsbDtiPWJ8fHt9O3ZhciBlLGYsZyxoPXRoaXMucGFyYW1ldGVycygpLGk9aC5sZW5ndGgsaj10aGlzLnNlZ21lbnRzLmxlbmd0aC0xLGs9e307aWYoaiE9PWQubGVuZ3RoLTEpdGhyb3cgbmV3IEVycm9yKFwiVW5iYWxhbmNlZCBjYXB0dXJlIGdyb3VwIGluIHJvdXRlICdcIit0aGlzLnNvdXJjZStcIidcIik7Zm9yKGU9MDtqPmU7ZSsrKXtnPWhbZV07dmFyIGw9dGhpcy5wYXJhbXNbZ10sbT1kW2UrMV07Zm9yKGY9MDtmPGwucmVwbGFjZTtmKyspbC5yZXBsYWNlW2ZdLmZyb209PT1tJiYobT1sLnJlcGxhY2VbZl0udG8pO20mJmwuYXJyYXk9PT0hMCYmKG09YyhtKSksa1tnXT1sLnZhbHVlKG0pfWZvcig7aT5lO2UrKylnPWhbZV0sa1tnXT10aGlzLnBhcmFtc1tnXS52YWx1ZShiW2ddKTtyZXR1cm4ga30sci5wcm90b3R5cGUucGFyYW1ldGVycz1mdW5jdGlvbihhKXtyZXR1cm4gSChhKT90aGlzLnBhcmFtc1thXXx8bnVsbDp0aGlzLiQkcGFyYW1OYW1lc30sci5wcm90b3R5cGUudmFsaWRhdGVzPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnBhcmFtcy4kJHZhbGlkYXRlcyhhKX0sci5wcm90b3R5cGUuZm9ybWF0PWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYSl7cmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChhKS5yZXBsYWNlKC8tL2csZnVuY3Rpb24oYSl7cmV0dXJuXCIlNUMlXCIrYS5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpfSl9YT1hfHx7fTt2YXIgYz10aGlzLnNlZ21lbnRzLGQ9dGhpcy5wYXJhbWV0ZXJzKCksZT10aGlzLnBhcmFtcztpZighdGhpcy52YWxpZGF0ZXMoYSkpcmV0dXJuIG51bGw7dmFyIGYsZz0hMSxoPWMubGVuZ3RoLTEsaT1kLmxlbmd0aCxqPWNbMF07Zm9yKGY9MDtpPmY7ZisrKXt2YXIgaz1oPmYsbD1kW2ZdLG09ZVtsXSxuPW0udmFsdWUoYVtsXSkscD1tLmlzT3B0aW9uYWwmJm0udHlwZS5lcXVhbHMobS52YWx1ZSgpLG4pLHE9cD9tLnNxdWFzaDohMSxyPW0udHlwZS5lbmNvZGUobik7aWYoayl7dmFyIHM9Y1tmKzFdO2lmKHE9PT0hMSludWxsIT1yJiYoais9TChyKT9vKHIsYikuam9pbihcIi1cIik6ZW5jb2RlVVJJQ29tcG9uZW50KHIpKSxqKz1zO2Vsc2UgaWYocT09PSEwKXt2YXIgdD1qLm1hdGNoKC9cXC8kLyk/L1xcLz8oLiopLzovKC4qKS87ais9cy5tYXRjaCh0KVsxXX1lbHNlIEoocSkmJihqKz1xK3MpfWVsc2V7aWYobnVsbD09cnx8cCYmcSE9PSExKWNvbnRpbnVlO0wocil8fChyPVtyXSkscj1vKHIsZW5jb2RlVVJJQ29tcG9uZW50KS5qb2luKFwiJlwiK2wrXCI9XCIpLGorPShnP1wiJlwiOlwiP1wiKSsobCtcIj1cIityKSxnPSEwfX1yZXR1cm4gan0scy5wcm90b3R5cGUuaXM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4hMH0scy5wcm90b3R5cGUuZW5jb2RlPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGF9LHMucHJvdG90eXBlLmRlY29kZT1mdW5jdGlvbihhLGIpe3JldHVybiBhfSxzLnByb3RvdHlwZS5lcXVhbHM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT09Yn0scy5wcm90b3R5cGUuJHN1YlBhdHRlcm49ZnVuY3Rpb24oKXt2YXIgYT10aGlzLnBhdHRlcm4udG9TdHJpbmcoKTtyZXR1cm4gYS5zdWJzdHIoMSxhLmxlbmd0aC0yKX0scy5wcm90b3R5cGUucGF0dGVybj0vLiovLHMucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJ7VHlwZTpcIit0aGlzLm5hbWUrXCJ9XCJ9LHMucHJvdG90eXBlLiRub3JtYWxpemU9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuaXMoYSk/YTp0aGlzLmRlY29kZShhKX0scy5wcm90b3R5cGUuJGFzQXJyYXk9ZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBkKGEsYil7ZnVuY3Rpb24gZChhLGIpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBhW2JdLmFwcGx5KGEsYXJndW1lbnRzKX19ZnVuY3Rpb24gZShhKXtyZXR1cm4gTChhKT9hOkgoYSk/W2FdOltdfWZ1bmN0aW9uIGYoYSl7c3dpdGNoKGEubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIGM7Y2FzZSAxOnJldHVyblwiYXV0b1wiPT09Yj9hWzBdOmE7ZGVmYXVsdDpyZXR1cm4gYX19ZnVuY3Rpb24gZyhhKXtyZXR1cm4hYX1mdW5jdGlvbiBoKGEsYil7cmV0dXJuIGZ1bmN0aW9uKGMpe2M9ZShjKTt2YXIgZD1vKGMsYSk7cmV0dXJuIGI9PT0hMD8wPT09bihkLGcpLmxlbmd0aDpmKGQpfX1mdW5jdGlvbiBpKGEpe3JldHVybiBmdW5jdGlvbihiLGMpe3ZhciBkPWUoYiksZj1lKGMpO2lmKGQubGVuZ3RoIT09Zi5sZW5ndGgpcmV0dXJuITE7Zm9yKHZhciBnPTA7ZzxkLmxlbmd0aDtnKyspaWYoIWEoZFtnXSxmW2ddKSlyZXR1cm4hMTtyZXR1cm4hMH19dGhpcy5lbmNvZGU9aChkKGEsXCJlbmNvZGVcIikpLHRoaXMuZGVjb2RlPWgoZChhLFwiZGVjb2RlXCIpKSx0aGlzLmlzPWgoZChhLFwiaXNcIiksITApLHRoaXMuZXF1YWxzPWkoZChhLFwiZXF1YWxzXCIpKSx0aGlzLnBhdHRlcm49YS5wYXR0ZXJuLHRoaXMuJG5vcm1hbGl6ZT1oKGQoYSxcIiRub3JtYWxpemVcIikpLHRoaXMubmFtZT1hLm5hbWUsdGhpcy4kYXJyYXlNb2RlPWJ9aWYoIWEpcmV0dXJuIHRoaXM7aWYoXCJhdXRvXCI9PT1hJiYhYil0aHJvdyBuZXcgRXJyb3IoXCInYXV0bycgYXJyYXkgbW9kZSBpcyBmb3IgcXVlcnkgcGFyYW1ldGVycyBvbmx5XCIpO3JldHVybiBuZXcgZCh0aGlzLGEpfSxiLm1vZHVsZShcInVpLnJvdXRlci51dGlsXCIpLnByb3ZpZGVyKFwiJHVybE1hdGNoZXJGYWN0b3J5XCIsdCksYi5tb2R1bGUoXCJ1aS5yb3V0ZXIudXRpbFwiKS5ydW4oW1wiJHVybE1hdGNoZXJGYWN0b3J5XCIsZnVuY3Rpb24oYSl7fV0pLHUuJGluamVjdD1bXCIkbG9jYXRpb25Qcm92aWRlclwiLFwiJHVybE1hdGNoZXJGYWN0b3J5UHJvdmlkZXJcIl0sYi5tb2R1bGUoXCJ1aS5yb3V0ZXIucm91dGVyXCIpLnByb3ZpZGVyKFwiJHVybFJvdXRlclwiLHUpLHYuJGluamVjdD1bXCIkdXJsUm91dGVyUHJvdmlkZXJcIixcIiR1cmxNYXRjaGVyRmFjdG9yeVByb3ZpZGVyXCJdLGIubW9kdWxlKFwidWkucm91dGVyLnN0YXRlXCIpLnZhbHVlKFwiJHN0YXRlUGFyYW1zXCIse30pLnByb3ZpZGVyKFwiJHN0YXRlXCIsdiksdy4kaW5qZWN0PVtdLGIubW9kdWxlKFwidWkucm91dGVyLnN0YXRlXCIpLnByb3ZpZGVyKFwiJHZpZXdcIix3KSxiLm1vZHVsZShcInVpLnJvdXRlci5zdGF0ZVwiKS5wcm92aWRlcihcIiR1aVZpZXdTY3JvbGxcIix4KSx5LiRpbmplY3Q9W1wiJHN0YXRlXCIsXCIkaW5qZWN0b3JcIixcIiR1aVZpZXdTY3JvbGxcIixcIiRpbnRlcnBvbGF0ZVwiXSx6LiRpbmplY3Q9W1wiJGNvbXBpbGVcIixcIiRjb250cm9sbGVyXCIsXCIkc3RhdGVcIixcIiRpbnRlcnBvbGF0ZVwiXSxiLm1vZHVsZShcInVpLnJvdXRlci5zdGF0ZVwiKS5kaXJlY3RpdmUoXCJ1aVZpZXdcIix5KSxiLm1vZHVsZShcInVpLnJvdXRlci5zdGF0ZVwiKS5kaXJlY3RpdmUoXCJ1aVZpZXdcIix6KSxELiRpbmplY3Q9W1wiJHN0YXRlXCIsXCIkdGltZW91dFwiXSxFLiRpbmplY3Q9W1wiJHN0YXRlXCIsXCIkc3RhdGVQYXJhbXNcIixcIiRpbnRlcnBvbGF0ZVwiXSxiLm1vZHVsZShcInVpLnJvdXRlci5zdGF0ZVwiKS5kaXJlY3RpdmUoXCJ1aVNyZWZcIixEKS5kaXJlY3RpdmUoXCJ1aVNyZWZBY3RpdmVcIixFKS5kaXJlY3RpdmUoXCJ1aVNyZWZBY3RpdmVFcVwiLEUpLEYuJGluamVjdD1bXCIkc3RhdGVcIl0sRy4kaW5qZWN0PVtcIiRzdGF0ZVwiXSxiLm1vZHVsZShcInVpLnJvdXRlci5zdGF0ZVwiKS5maWx0ZXIoXCJpc1N0YXRlXCIsRikuZmlsdGVyKFwiaW5jbHVkZWRCeVN0YXRlXCIsRyl9KHdpbmRvdyx3aW5kb3cuYW5ndWxhcik7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
