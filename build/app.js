!function(){function e(e){}function t(e,t){function l(e,t){t.otherwise("/"),e.state("start",{url:"/",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/start.html",controller:"mainController"}}}).state("children",{url:"/children",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/children.html",controller:"mainController"}}}).state("childIncome",{url:"/childIncome",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/childIncome.html",controller:"mainController"}}}).state("household",{url:"/household",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/household.html",controller:"mainController"}}}).state("signature",{url:"/signature",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/signature.html",controller:"mainController"}}}).state("confirmation",{url:"/confirmation",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/confirmation.html",controller:"mainController"}}}).state("export",{url:"/export",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/export.html",controller:"exportController"}}}).state("styleguide",{url:"/styleguide",templateUrl:"../views/styleguide.html",controller:"mainController"}).state("signup",{url:"/signup",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/signup.html",controller:"mainController"}}}).state("login",{url:"/login",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/login.html",controller:"loginController"}}}).state("soFar",{url:"/so-far",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/soFar.html",controller:"mainController"}}})}l(e,t)}angular.module("eatChallengeApp",["ngCsv","ngMaterial","ngSanitize","ui.router"]).config(t).config(e),e.$inject=["$mdThemingProvider"],t.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e,t){e.get("/household/completed").then(function(e){t.completedApplications=e.data})}angular.module("eatChallengeApp").controller("exportController",e),e.$inject=["$http","$scope"]}(),function(){function e(e,t){}angular.module("eatChallengeApp").controller("loginController",[e]),e.$inject=["$location","$scope"]}(),function(){"use strict";function e(e,t,l,o,n,r,i,a){function s(t){t>n.household.children.length&&e.get("/child").then(function(e){var l=e.data;n.household.children.push(l),s(t)})}function c(e){for(;e>n.household.otherMembers.length;)n.household.incrementOtherMembersCount()}function u(){i.save();a.updateRequiredSections(n.household);a.navigateToNext(r.$current.self.name)}function h(){n.household.completed=!0,u()}var m=n;m.household=i.get(),m.schoolDistrict="Oakland Unified School District",m.navigateToNextSection=u,m.submitApplication=h,n.$watch("household.childCount",s),n.$watch("household.otherMembersCount",c)}angular.module("eatChallengeApp").controller("mainController",e),e.$inject=["$http","$interval","$mdDialog","$mdMedia","$scope","$state","Household","Sections"]}(),function(){function e(e,t,l){var o=e;o.currentState=t.$current.self.name,o.sections=l.sections}angular.module("eatChallengeApp").controller("sideNavController",e),e.$inject=["$scope","$state","Sections"]}(),function(){function e(){var e={scope:{member:"="},restrict:"A",replace:!0,templateUrl:"../views/income.html",link:t};return e}function t(e){e.incomeSources={work:{vaule:"work",label:"Earnings from work",frequency:["weekly","biweekly","2x month","monthly"],annotation:{child:"A child has a job where they earn salary or wages ",otherMember:""}},socialSecurity:{vaule:"socialSecurity",label:"Social Security Disability Payments or Survivorâ€™s Benefits ",frequency:["monthly"],annotation:{child:"A child is blind or disabled and receives Social Security benefits.",otherMember:""}},otherPerson:{vaule:"otherPerson",label:"Income from persons outside the household",frequency:["weekly","biweekly","2x month","monthly"],annotation:{child:"A friend or extended family member regularly gives a child spending money",otherMember:""}},otherSource:{vaule:"otherSource",label:"Income from any other source",frequency:["weekly","biweekly","2x month","monthly"],annotation:{child:"A child receives income from a private pension fund, annuity, or trust",otherMember:""}}},0===e.member.incomeSources.length&&(e.member.incomeSources=[],Object.keys(e.incomeSources).forEach(function(t){e.member.incomeSources.push({type:t,amount:null,frequency:null})}))}angular.module("eatChallengeApp").directive("incomeQuestions",e)}(),function(){function e(){return{scope:{model:"="},restrict:"A",replace:!0,templateUrl:"../views/yesno.html"}}angular.module("eatChallengeApp").directive("yesNoInput",e)}(),function(){function e(e){function t(){return n?n:n=Object.create(r)}function l(){return e.post("/household",n).then(function(e){n=e.data})}function o(){var e={};return e}this.get=t,this.save=l,this.clear=o;var n,r={childCount:0,children:[],otherMembersCount:0,otherMembers:[],completedApplication:!1};return this}angular.module("eatChallengeApp").service("Household",e),e.$inject=["$http"]}(),function(){"use strict";function e(e,t){function l(e){for(var t,l=!1,o=0,n=!1,a=0;a<e.children.length;a++){if(t=e.children[a],t.assistanceProgram&&t.assistanceProgram.participant){l=!0;break}(t.specialStatus&&t.specialStatus.fosterChild||t.specialStatus.homelessMigrantRunaway||t.specialStatus.headStartParticipant)&&o++}return(n=l||e.children.length>0&&e.children.length===o)?(i.childIncome.required=!1,void(i.household.required=!1)):void r.forEach(function(e){e.required=!0})}function o(e){for(var t=_.findIndex(r,function(t){return t.state===e}),l=t+1;l<r.length;l++)if(r[l].required)return r[l].state;return"confirmation"}function n(e){var l=o(e);t.go(l)}var r=[{label:"Children",state:"children",completed:!1,required:!0},{label:"Child Income",state:"childIncome",completed:!1,required:!0},{label:"Household",state:"household",completed:!1,required:!0},{label:"Sign and Confirm",state:"signature",completed:!1,required:!0}],i=_.indexBy(r,"state"),a={sections:r,indexedSections:i,navigateToNext:n,updateRequiredSections:l};return a}angular.module("eatChallengeApp").service("Sections",e),e.$inject=["$rootScope","$state"]}();
//# sourceMappingURL=data:application/json;base64,
