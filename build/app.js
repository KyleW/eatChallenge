!function(){function e(e){}function t(e,t){function n(e,t){t.otherwise("/"),e.state("start",{url:"/",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/start.html",controller:"mainController"}}}).state("children",{url:"/children",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/children.html",controller:"mainController"}}}).state("childIncome",{url:"/childIncome",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/childIncome.html",controller:"mainController"}}}).state("household",{url:"/household",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/household.html",controller:"mainController"}}}).state("signature",{url:"/signature",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/signature.html",controller:"mainController"}}}).state("confirmation",{url:"/confirmation",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/confirmation.html",controller:"mainController"}}}).state("export",{url:"/export",templateUrl:"../views/export.html",controller:"mainController"}).state("styleguide",{url:"/styleguide",templateUrl:"../views/styleguide.html",controller:"mainController"}).state("signup",{url:"/signup",templateUrl:"../views/signup.html"}).state("login",{url:"/login",templateUrl:"../views/login.html"})}n(e,t)}angular.module("eatChallengeApp",["ngMaterial","ui.router"]).config(t).config(e),e.$inject=["$mdThemingProvider"],t.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){function e(e,t,n,o,r,i,l,s){function c(){s.updateRequiredSections(o.household),s.navigateToNext(i.$current.self.name)}o.schoolDistrict="Oakland Unified School District",o.studentStatuses=["in school","home schooled","some other status"],o.household=l.get(),o.navigateToNextSection=c,o.$watch("household.childCount",function(e){for(;e>o.household.children.length;)o.household.incrementChildCount()}),o.$watch("household.otherMembersCount",function(e){for(;e>o.household.otherMembers.length;)o.household.incrementOtherMembersCount()}),r.$on("$stateChangeSuccess",function(){document.body.scrollTop=document.documentElement.scrollTop=0})}angular.module("eatChallengeApp").controller("mainController",e),e.$inject=["$interval","$mdDialog","$mdMedia","$rootScope","$scope","$state","Household","Sections"]}(),function(){function e(e,t){var n=e;n.sections=t.sections}angular.module("eatChallengeApp").controller("sideNavController",e),e.$inject=["$scope","Sections"]}(),function(){function e(){var e={scope:{member:"="},restrict:"A",replace:!0,templateUrl:"../views/income.html",link:t};return e}function t(e){e.incomeSources={work:{vaule:"work",label:"Earnings from work",frequency:["weekly","biweekly","2x month","monthly"],annotation:{child:"A child has a job where they earn salary or wages ",otherMember:""}},socialSecurity:{vaule:"socialSecurity",label:"Social Security Disability Payments or Survivorâ€™s Benefits ",frequency:["monthly"],annotation:{child:"A child is blind or disabled and receives Social Security benefits.",otherMember:""}},otherPerson:{vaule:"otherPerson",label:"Income from persons outside the household",frequency:["weekly","biweekly","2x month","monthly"],annotation:{child:"A friend or extended family member regularly gives a child spending money",otherMember:""}},otherSource:{vaule:"otherSource",label:"Income from any other source",frequency:["weekly","biweekly","2x month","monthly"],annotation:{child:"A child receives income from a private pension fund, annuity, or trust",otherMember:""}}},0===e.member.incomeSources.length&&(e.member.incomeSources=[],Object.keys(e.incomeSources).forEach(function(t){e.member.incomeSources.push({type:t,amount:null,frequency:null})}))}angular.module("eatChallengeApp").directive("incomeQuestions",e)}(),function(){function e(){return{scope:{model:"="},restrict:"A",replace:!0,templateUrl:"../views/yesno.html"}}angular.module("eatChallengeApp").directive("yesNoInput",e)}(),function(){function e(e){function t(){return r?r:(r=Object.create(l),r.init(),r)}function n(){return e.post("/household",r)}function o(){var e={};return e}this.get=t,this.save=n,this.clear=o;var r,i={init:function(){this.incomeSourceCount=0,this.incomeSources=[]},incrementIncomeSources:function(){for(this.incomeSourceCount++;this.incomeSourceCount>this.incomeSources.length;)this.incomeSources.push({})}},l={init:function(){this.children=[],this.childCount=0,this.incrementChildCount(),this.otherMembers=[],this.otherMembersCount=0,this.incrementOtherMembersCount()},incrementChildCount:function(){for(this.childCount++;this.childCount>this.children.length;){var e=Object.create(i);e.init(),e.isChild=!0,e.specialStatus={},e.assistanceProgram={},this.children.push(e)}},incrementOtherMembersCount:function(){for(this.otherMembersCount++;this.otherMembersCount>this.otherMembers.length;){var e=Object.create(i);e.init(),e.isChild=!1,this.otherMembers.push(e)}}};return this}angular.module("eatChallengeApp").service("Household",e),e.$inject=["$http"]}(),function(){function e(e){function t(e){for(var t,n=!1,o=0,l=!0,s=0;s<e.children.length;s++){if(t=e.children[s],t.assistanceProgram.participant){n=!0;break}t.specialStatus.fosterChild&&o++}(n||e.children.length===o)&&(l=!1),console.log({shouldMeansTest:l}),l?r.forEach(function(e){e.required=!0}):(i.childIncome.required=!1,i.household.required=!1)}function n(e){for(var t=_.findIndex(r,function(t){return t.state===e}),n=t+1;n<r.length;n++)if(r[n].required)return r[n].state;return"confirmation"}function o(t){var o=n(t);e.go(o)}var r=[{label:"Children",state:"children",completed:!1,required:!0},{label:"Child Income",state:"childIncome",completed:!1,required:!0},{label:"Household",state:"household",completed:!1,required:!0},{label:"Sign and Confirm",state:"signature",completed:!1,required:!0}],i=_.indexBy(r,"state"),l={sections:r,indexedSections:i,navigateToNext:o,updateRequiredSections:t};return l}angular.module("eatChallengeApp").service("Sections",e),e.$inject=["$state"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbnRyb2xsZXJzL21haW4uanMiLCJjb250cm9sbGVycy9zaWRlbmF2LmpzIiwiZGlyZWN0aXZlcy9pbmNvbWUuanMiLCJkaXJlY3RpdmVzL3llc25vLmpzIiwic2VydmljZXMvaG91c2Vob2xkLmpzIiwic2VydmljZXMvc2VjdGlvbnMuanMiXSwibmFtZXMiOlsibWF0ZXJpYWxEZXNpZ25UaGVtZXIiLCIkbWRUaGVtaW5nUHJvdmlkZXIiLCJyb3V0ZXJDb25maWciLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsInJvdXRlciIsIm90aGVyd2lzZSIsInN0YXRlIiwidXJsIiwidmlld3MiLCJzaWRlLW5hdiIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsIm1haW4iLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJGluamVjdCIsIm1haW5Db250cm9sbGVyIiwiJGludGVydmFsIiwiJG1kRGlhbG9nIiwiJG1kTWVkaWEiLCIkc2NvcGUiLCIkcm9vdFNjb3BlIiwiJHN0YXRlIiwiSG91c2Vob2xkIiwiU2VjdGlvbnMiLCJuYXZpZ2F0ZVRvTmV4dFNlY3Rpb24iLCJ1cGRhdGVSZXF1aXJlZFNlY3Rpb25zIiwiaG91c2Vob2xkIiwibmF2aWdhdGVUb05leHQiLCIkY3VycmVudCIsInNlbGYiLCJuYW1lIiwic2Nob29sRGlzdHJpY3QiLCJzdHVkZW50U3RhdHVzZXMiLCJnZXQiLCIkd2F0Y2giLCJuZXdWYWwiLCJjaGlsZHJlbiIsImxlbmd0aCIsImluY3JlbWVudENoaWxkQ291bnQiLCJvdGhlck1lbWJlcnMiLCJpbmNyZW1lbnRPdGhlck1lbWJlcnNDb3VudCIsIiRvbiIsImRvY3VtZW50IiwiYm9keSIsInNjcm9sbFRvcCIsImRvY3VtZW50RWxlbWVudCIsInNpZGVOYXZDb250cm9sbGVyIiwidm0iLCJzZWN0aW9ucyIsImluY29tZURpcmVjdGl2ZSIsImRpcmVjdGl2ZSIsInNjb3BlIiwibWVtYmVyIiwicmVzdHJpY3QiLCJyZXBsYWNlIiwibGluayIsImluY29tZVNvdXJjZXMiLCJ3b3JrIiwidmF1bGUiLCJsYWJlbCIsImZyZXF1ZW5jeSIsImFubm90YXRpb24iLCJjaGlsZCIsIm90aGVyTWVtYmVyIiwic29jaWFsU2VjdXJpdHkiLCJvdGhlclBlcnNvbiIsIm90aGVyU291cmNlIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJpbmNvbWVTb3VyY2UiLCJwdXNoIiwidHlwZSIsImFtb3VudCIsInllc05vSW5wdXQiLCJtb2RlbCIsImhvdXNlaG9sZFNlcnZpY2UiLCIkaHR0cCIsImNyZWF0ZSIsImluaXQiLCJzYXZlIiwicG9zdCIsImNsZWFyIiwidGhpcyIsIlBlcnNvbiIsImluY29tZVNvdXJjZUNvdW50IiwiaW5jcmVtZW50SW5jb21lU291cmNlcyIsImNoaWxkQ291bnQiLCJvdGhlck1lbWJlcnNDb3VudCIsIm5ld0NoaWxkIiwiaXNDaGlsZCIsInNwZWNpYWxTdGF0dXMiLCJhc3Npc3RhbmNlUHJvZ3JhbSIsIm5ld01lbWJlciIsInNlcnZpY2UiLCJzZWN0aW9uc1NlcnZpY2UiLCJjdXJyZW50Q2hpbGQiLCJhc3Npc3RhbmNlUHJvZ3JhbUhvdXNlaG9sZCIsImZvc3RlckNoaWxkQ291bnQiLCJzaG91bGRNZWFuc1Rlc3QiLCJpIiwicGFydGljaXBhbnQiLCJmb3N0ZXJDaGlsZCIsImNvbnNvbGUiLCJsb2ciLCJzZWN0aW9uIiwicmVxdWlyZWQiLCJpbmRleGVkU2VjdGlvbnMiLCJmaW5kTmV4dCIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRJbmRleCIsIl8iLCJmaW5kSW5kZXgiLCJuZXh0U2VjdGlvbiIsImdvIiwiY29tcGxldGVkIiwiaW5kZXhCeSJdLCJtYXBwaW5ncyI6IkNBQUEsV0FRQSxRQUFBQSxHQUFBQyxJQWlCQSxRQUFBQyxHQUFBQyxFQUFBQyxHQUtBLFFBQUFDLEdBQUFGLEVBQUFDLEdBQ0FBLEVBQUFFLFVBQUEsS0FFQUgsRUFDQUksTUFBQSxTQUNBQyxJQUFBLElBQ0FDLE9BQ0FDLFlBQ0FDLFlBQUEsd0JBQ0FDLFdBQUEscUJBRUFDLE1BQ0FGLFlBQUEsc0JBQ0FDLFdBQUEscUJBSUFMLE1BQUEsWUFDQUMsSUFBQSxZQUNBQyxPQUNBQyxZQUNBQyxZQUFBLHdCQUNBQyxXQUFBLHFCQUVBQyxNQUNBRixZQUFBLHlCQUNBQyxXQUFBLHFCQUlBTCxNQUFBLGVBQ0FDLElBQUEsZUFDQUMsT0FDQUMsWUFDQUMsWUFBQSx3QkFDQUMsV0FBQSxxQkFFQUMsTUFDQUYsWUFBQSw0QkFDQUMsV0FBQSxxQkFJQUwsTUFBQSxhQUNBQyxJQUFBLGFBQ0FDLE9BQ0FDLFlBQ0FDLFlBQUEsd0JBQ0FDLFdBQUEscUJBRUFDLE1BQ0FGLFlBQUEsMEJBQ0FDLFdBQUEscUJBSUFMLE1BQUEsYUFDQUMsSUFBQSxhQUNBQyxPQUNBQyxZQUNBQyxZQUFBLHdCQUNBQyxXQUFBLHFCQUVBQyxNQUNBRixZQUFBLDBCQUNBQyxXQUFBLHFCQUlBTCxNQUFBLGdCQUNBQyxJQUFBLGdCQUNBQyxPQUNBQyxZQUNBQyxZQUFBLHdCQUNBQyxXQUFBLHFCQUVBQyxNQUNBRixZQUFBLDZCQUNBQyxXQUFBLHFCQUlBTCxNQUFBLFVBQ0FDLElBQUEsVUFDQUcsWUFBQSx1QkFDQUMsV0FBQSxtQkFFQUwsTUFBQSxjQUNBQyxJQUFBLGNBQ0FHLFlBQUEsMkJBQ0FDLFdBQUEsbUJBRUFMLE1BQUEsVUFDQUMsSUFBQSxVQUNBRyxZQUFBLHlCQUVBSixNQUFBLFNBQ0FDLElBQUEsU0FDQUcsWUFBQSx3QkFyR0FOLEVBQUFGLEVBQUFDLEdBekJBVSxRQUNBQyxPQUFBLG1CQUFBLGFBQUEsY0FDQUMsT0FBQWQsR0FDQWMsT0FBQWhCLEdBRUFBLEVBQUFpQixTQUFBLHNCQWdCQWYsRUFBQWUsU0FBQSxpQkFBQSx5QkN2QkEsV0FRQSxRQUFBQyxHQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQTJCQSxRQUFBQyxLQUNBRCxFQUFBRSx1QkFBQU4sRUFBQU8sV0FDQUgsRUFBQUksZUFBQU4sRUFBQU8sU0FBQUMsS0FBQUMsTUEzQkFYLEVBQUFZLGVBQUEsa0NBQ0FaLEVBQUFhLGlCQUFBLFlBQUEsZ0JBQUEscUJBRUFiLEVBQUFPLFVBQUFKLEVBQUFXLE1BQ0FkLEVBQUFLLHNCQUFBQSxFQUlBTCxFQUFBZSxPQUFBLHVCQUFBLFNBQUFDLEdBQ0EsS0FBQUEsRUFBQWhCLEVBQUFPLFVBQUFVLFNBQUFDLFFBQ0FsQixFQUFBTyxVQUFBWSx3QkFJQW5CLEVBQUFlLE9BQUEsOEJBQUEsU0FBQUMsR0FDQSxLQUFBQSxFQUFBaEIsRUFBQU8sVUFBQWEsYUFBQUYsUUFDQWxCLEVBQUFPLFVBQUFjLCtCQUtBcEIsRUFBQXFCLElBQUEsc0JBQUEsV0FDQUMsU0FBQUMsS0FBQUMsVUFBQUYsU0FBQUcsZ0JBQUFELFVBQUEsSUE5QkFqQyxRQUNBQyxPQUFBLG1CQUNBSCxXQUFBLGlCQUFBTSxHQUVBQSxFQUFBRCxTQUFBLFlBQUEsWUFBQSxXQUFBLGFBQUEsU0FBQSxTQUFBLFlBQUEsZUNOQSxXQVFBLFFBQUFnQyxHQUFBM0IsRUFBQUksR0FFQSxHQUFBd0IsR0FBQTVCLENBRUE0QixHQUFBQyxTQUFBekIsRUFBQXlCLFNBVkFyQyxRQUNBQyxPQUFBLG1CQUNBSCxXQUFBLG9CQUFBcUMsR0FFQUEsRUFBQWhDLFNBQUEsU0FBQSxlQ05BLFdBTUEsUUFBQW1DLEtBQ0EsR0FBQUMsSUFDQUMsT0FDQUMsT0FBQSxLQUVBQyxTQUFBLElBQ0FDLFNBQUEsRUFDQTlDLFlBQUEsdUJBQ0ErQyxLQUFBQSxFQUdBLE9BQUFMLEdBS0EsUUFBQUssR0FBQUosR0FDQUEsRUFBQUssZUFDQUMsTUFDQUMsTUFBQSxPQUNBQyxNQUFBLHFCQUNBQyxXQUFBLFNBQUEsV0FBQSxXQUFBLFdBQ0FDLFlBQ0FDLE1BQUEscURBQ0FDLFlBQUEsS0FHQUMsZ0JBQ0FOLE1BQUEsaUJBQ0FDLE1BQUEsOERBQ0FDLFdBQUEsV0FDQUMsWUFDQUMsTUFBQSxzRUFFQUMsWUFBQSxLQUdBRSxhQUNBUCxNQUFBLGNBQ0FDLE1BQUEsNENBQ0FDLFdBQUEsU0FBQSxXQUFBLFdBQUEsV0FDQUMsWUFDQUMsTUFBQSw0RUFDQUMsWUFBQSxLQUdBRyxhQUNBUixNQUFBLGNBQ0FDLE1BQUEsK0JBQ0FDLFdBQUEsU0FBQSxXQUFBLFdBQUEsV0FDQUMsWUFDQUMsTUFBQSx5RUFDQUMsWUFBQSxNQUtBLElBQUFaLEVBQUFDLE9BQUFJLGNBQUFuQixTQUNBYyxFQUFBQyxPQUFBSSxpQkFDQVcsT0FBQUMsS0FBQWpCLEVBQUFLLGVBQUFhLFFBQUEsU0FBQUMsR0FDQW5CLEVBQUFDLE9BQUFJLGNBQUFlLE1BQ0FDLEtBQUFGLEVBQ0FHLE9BQUEsS0FDQWIsVUFBQSxVQW5FQWpELFFBQ0FDLE9BQUEsbUJBQ0FzQyxVQUFBLGtCQUFBRCxNQ0pBLFdBTUEsUUFBQXlCLEtBQ0EsT0FDQXZCLE9BQ0F3QixNQUFBLEtBRUF0QixTQUFBLElBQ0FDLFNBQUEsRUFDQTlDLFlBQUEsdUJBWEFHLFFBQ0FDLE9BQUEsbUJBQ0FzQyxVQUFBLGFBQUF3QixNQ0pBLFdBT0EsUUFBQUUsR0FBQUMsR0EyREEsUUFBQTVDLEtBQ0EsTUFBQVAsR0FDQUEsR0FXQUEsRUFBQXlDLE9BQUFXLE9BQUF4RCxHQUNBSSxFQUFBcUQsT0FHQXJELEdBR0EsUUFBQXNELEtBRUEsTUFBQUgsR0FBQUksS0FBQSxhQUFBdkQsR0FHQSxRQUFBd0QsS0FDQSxHQUFBeEQsS0FDQSxPQUFBQSxHQXJGQXlELEtBQUFsRCxJQUFBQSxFQUNBa0QsS0FBQUgsS0FBQUEsRUFDQUcsS0FBQUQsTUFBQUEsQ0FJQSxJQWtEQXhELEdBbERBMEQsR0FDQUwsS0FBQSxXQUNBSSxLQUFBRSxrQkFBQSxFQUNBRixLQUFBM0Isa0JBR0E4Qix1QkFBQSxXQUVBLElBREFILEtBQUFFLG9CQUNBRixLQUFBRSxrQkFBQUYsS0FBQTNCLGNBQUFuQixRQUNBOEMsS0FBQTNCLGNBQUFlLFdBS0FqRCxHQUNBeUQsS0FBQSxXQUNBSSxLQUFBL0MsWUFDQStDLEtBQUFJLFdBQUEsRUFDQUosS0FBQTdDLHNCQUVBNkMsS0FBQTVDLGdCQUNBNEMsS0FBQUssa0JBQUEsRUFDQUwsS0FBQTNDLDhCQUVBRixvQkFBQSxXQUVBLElBREE2QyxLQUFBSSxhQUNBSixLQUFBSSxXQUFBSixLQUFBL0MsU0FBQUMsUUFBQSxDQUNBLEdBQUFvRCxHQUFBdEIsT0FBQVcsT0FBQU0sRUFDQUssR0FBQVYsT0FHQVUsRUFBQUMsU0FBQSxFQUNBRCxFQUFBRSxpQkFDQUYsRUFBQUcscUJBRUFULEtBQUEvQyxTQUFBbUMsS0FBQWtCLEtBR0FqRCwyQkFBQSxXQUVBLElBREEyQyxLQUFBSyxvQkFDQUwsS0FBQUssa0JBQUFMLEtBQUE1QyxhQUFBRixRQUFBLENBQ0EsR0FBQXdELEdBQUExQixPQUFBVyxPQUFBTSxFQUNBUyxHQUFBZCxPQUNBYyxFQUFBSCxTQUFBLEVBQ0FQLEtBQUE1QyxhQUFBZ0MsS0FBQXNCLEtBc0NBLE9BQUFWLE1BL0ZBeEUsUUFDQUMsT0FBQSxtQkFDQWtGLFFBQUEsWUFBQWxCLEdBRUFBLEVBQUE5RCxTQUFBLFlDTEEsV0FPQSxRQUFBaUYsR0FBQTFFLEdBZ0NBLFFBQUFJLEdBQUFDLEdBTUEsSUFBQSxHQUxBc0UsR0FDQUMsR0FBQSxFQUNBQyxFQUFBLEVBQ0FDLEdBQUEsRUFFQUMsRUFBQSxFQUFBQSxFQUFBMUUsRUFBQVUsU0FBQUMsT0FBQStELElBQUEsQ0FHQSxHQUZBSixFQUFBdEUsRUFBQVUsU0FBQWdFLEdBRUFKLEVBQUFKLGtCQUFBUyxZQUFBLENBQ0FKLEdBQUEsQ0FDQSxPQUdBRCxFQUFBTCxjQUFBVyxhQUNBSixLQUlBRCxHQUNBdkUsRUFBQVUsU0FBQUMsU0FBQTZELEtBQ0FDLEdBQUEsR0FFQUksUUFBQUMsS0FBQUwsZ0JBQUFBLElBQ0FBLEVBQ0FuRCxFQUFBcUIsUUFBQSxTQUFBb0MsR0FDQUEsRUFBQUMsVUFBQSxLQUdBQyxFQUFBLFlBQUFELFVBQUEsRUFDQUMsRUFBQSxVQUFBRCxVQUFBLEdBS0EsUUFBQUUsR0FBQUMsR0FNQSxJQUFBLEdBTEFDLEdBQUFDLEVBQUFDLFVBQUFoRSxFQUFBLFNBQUF5RCxHQUNBLE1BQUFBLEdBQUFyRyxRQUFBeUcsSUFJQVQsRUFBQVUsRUFBQSxFQUFBVixFQUFBcEQsRUFBQVgsT0FBQStELElBQ0EsR0FBQXBELEVBQUFvRCxHQUFBTSxTQUNBLE1BQUExRCxHQUFBb0QsR0FBQWhHLEtBS0EsT0FBQSxlQUdBLFFBQUF1QixHQUFBa0YsR0FDQSxHQUFBSSxHQUFBTCxFQUFBQyxFQUNBeEYsR0FBQTZGLEdBQUFELEdBbkZBLEdBQUFqRSxLQUVBVyxNQUFBLFdBQ0F2RCxNQUFBLFdBQ0ErRyxXQUFBLEVBQ0FULFVBQUEsSUFHQS9DLE1BQUEsZUFDQXZELE1BQUEsY0FDQStHLFdBQUEsRUFDQVQsVUFBQSxJQUdBL0MsTUFBQSxZQUNBdkQsTUFBQSxZQUNBK0csV0FBQSxFQUNBVCxVQUFBLElBR0EvQyxNQUFBLG1CQUNBdkQsTUFBQSxZQUNBK0csV0FBQSxFQUNBVCxVQUFBLElBSUFDLEVBQUFJLEVBQUFLLFFBQUFwRSxFQUFBLFNBNERBOEMsR0FDQTlDLFNBQUFBLEVBQ0EyRCxnQkFBQUEsRUFDQWhGLGVBQUFBLEVBQ0FGLHVCQUFBQSxFQUdBLE9BQUFxRSxHQXRHQW5GLFFBQ0FDLE9BQUEsbUJBQ0FrRixRQUFBLFdBQUFDLEdBRUFBLEVBQUFqRixTQUFBIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpIHtcblxuICAgIGFuZ3VsYXJcbiAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcsWyduZ01hdGVyaWFsJywndWkucm91dGVyJ10pXG4gICAgICAuY29uZmlnKHJvdXRlckNvbmZpZylcbiAgICAgIC5jb25maWcobWF0ZXJpYWxEZXNpZ25UaGVtZXIpO1xuXG4gICAgbWF0ZXJpYWxEZXNpZ25UaGVtZXIuJGluamVjdCA9IFsnJG1kVGhlbWluZ1Byb3ZpZGVyJ107XG4gICAgZnVuY3Rpb24gbWF0ZXJpYWxEZXNpZ25UaGVtZXIoJG1kVGhlbWluZ1Byb3ZpZGVyKSB7XG4gICAgICAgIC8vICRtZFRoZW1pbmdQcm92aWRlci50aGVtZSgnbGlnaHQtYmx1ZScpO1xuICAgICAgICAvLyAucHJpbWFyeVBhbGV0dGUoJ3BpbmsnLCB7XG4gICAgICAgIC8vICAgJ2RlZmF1bHQnOiAnNDAwJywgLy8gYnkgZGVmYXVsdCB1c2Ugc2hhZGUgNDAwIGZyb20gdGhlIHBpbmsgcGFsZXR0ZSBmb3IgcHJpbWFyeSBpbnRlbnRpb25zXG4gICAgICAgIC8vICAgJ2h1ZS0xJzogJzEwMCcsIC8vIHVzZSBzaGFkZSAxMDAgZm9yIHRoZSA8Y29kZT5tZC1odWUtMTwvY29kZT4gY2xhc3NcbiAgICAgICAgLy8gICAnaHVlLTInOiAnNjAwJywgLy8gdXNlIHNoYWRlIDYwMCBmb3IgdGhlIDxjb2RlPm1kLWh1ZS0yPC9jb2RlPiBjbGFzc1xuICAgICAgICAvLyAgICdodWUtMyc6ICdBMTAwJyAvLyB1c2Ugc2hhZGUgQTEwMCBmb3IgdGhlIDxjb2RlPm1kLWh1ZS0zPC9jb2RlPiBjbGFzc1xuICAgICAgICAvLyB9KVxuICAgICAgICAvLyAvLyBJZiB5b3Ugc3BlY2lmeSBsZXNzIHRoYW4gYWxsIG9mIHRoZSBrZXlzLCBpdCB3aWxsIGluaGVyaXQgZnJvbSB0aGVcbiAgICAgICAgLy8gLy8gZGVmYXVsdCBzaGFkZXNcbiAgICAgICAgLy8gLmFjY2VudFBhbGV0dGUoJ3B1cnBsZScsIHtcbiAgICAgICAgLy8gICAnZGVmYXVsdCc6ICcyMDAnIC8vIHVzZSBzaGFkZSAyMDAgZm9yIGRlZmF1bHQsIGFuZCBrZWVwIGFsbCBvdGhlciBzaGFkZXMgdGhlIHNhbWVcbiAgICAgICAgLy8gfSk7XG4gICAgfVxuXG4gICAgcm91dGVyQ29uZmlnLiRpbmplY3QgPSBbJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlciddO1xuXG4gICAgZnVuY3Rpb24gcm91dGVyQ29uZmlnICgkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XG5cbiAgICAgICAgcm91dGVyKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpO1xuXG4gICAgICAgIC8vLy8vLy8vLy9cbiAgICAgICAgZnVuY3Rpb24gcm91dGVyKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcbiAgICAgICAgICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy8nKTtcblxuICAgICAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnc3RhcnQnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnLycsXG4gICAgICAgICAgICAgICAgdmlld3M6e1xuICAgICAgICAgICAgICAgICAgICAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZGVOYXYuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc2lkZU5hdkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zdGFydC5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdtYWluQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5zdGF0ZSgnY2hpbGRyZW4nLCB7XG4gICAgICAgICAgICAgICAgICB1cmw6ICcvY2hpbGRyZW4nLFxuICAgICAgICAgICAgICAgICAgdmlld3M6e1xuICAgICAgICAgICAgICAgICAgICAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZGVOYXYuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc2lkZU5hdkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9jaGlsZHJlbi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdtYWluQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLnN0YXRlKCdjaGlsZEluY29tZScsIHtcbiAgICAgICAgICAgICAgICAgIHVybDogJy9jaGlsZEluY29tZScsXG4gICAgICAgICAgICAgICAgICB2aWV3czp7XG4gICAgICAgICAgICAgICAgICAgICdzaWRlLW5hdic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lkZU5hdi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdzaWRlTmF2Q29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2NoaWxkSW5jb21lLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ21haW5Db250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5zdGF0ZSgnaG91c2Vob2xkJywge1xuICAgICAgICAgICAgICAgICAgdXJsOiAnL2hvdXNlaG9sZCcsXG4gICAgICAgICAgICAgICAgICB2aWV3czp7XG4gICAgICAgICAgICAgICAgICAgICdzaWRlLW5hdic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lkZU5hdi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdzaWRlTmF2Q29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2hvdXNlaG9sZC5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdtYWluQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAuc3RhdGUoJ3NpZ25hdHVyZScsIHtcbiAgICAgICAgICAgICAgICAgIHVybDogJy9zaWduYXR1cmUnLFxuICAgICAgICAgICAgICAgICAgdmlld3M6e1xuICAgICAgICAgICAgICAgICAgICAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZGVOYXYuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc2lkZU5hdkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zaWduYXR1cmUuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnbWFpbkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLnN0YXRlKCdjb25maXJtYXRpb24nLCB7XG4gICAgICAgICAgICAgICAgICB1cmw6ICcvY29uZmlybWF0aW9uJyxcbiAgICAgICAgICAgICAgICAgIHZpZXdzOntcbiAgICAgICAgICAgICAgICAgICAgJ3NpZGUtbmF2Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zaWRlTmF2Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NpZGVOYXZDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnbWFpbic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvY29uZmlybWF0aW9uLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ21haW5Db250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5zdGF0ZSgnZXhwb3J0Jywge1xuICAgICAgICAgICAgICAgICAgdXJsOiAnL2V4cG9ydCcsXG4gICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2V4cG9ydC5odG1sJyxcbiAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdtYWluQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLnN0YXRlKCdzdHlsZWd1aWRlJywge1xuICAgICAgICAgICAgICAgICAgdXJsOiAnL3N0eWxlZ3VpZGUnLFxuICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zdHlsZWd1aWRlLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ21haW5Db250cm9sbGVyJ1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAuc3RhdGUoJ3NpZ251cCcsIHtcbiAgICAgICAgICAgICAgICAgIHVybDogJy9zaWdudXAnLFxuICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zaWdudXAuaHRtbCcsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5zdGF0ZSgnbG9naW4nLCB7XG4gICAgICAgICAgICAgICAgICB1cmw6ICcvbG9naW4nLFxuICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9sb2dpbi5odG1sJyxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdtYWluQ29udHJvbGxlcicsIG1haW5Db250cm9sbGVyKTtcblxuICAgIG1haW5Db250cm9sbGVyLiRpbmplY3QgPSBbJyRpbnRlcnZhbCcsICckbWREaWFsb2cnLCAnJG1kTWVkaWEnLCAnJHJvb3RTY29wZScsICckc2NvcGUnLCAnJHN0YXRlJywgJ0hvdXNlaG9sZCcsICdTZWN0aW9ucyddO1xuXG4gICAgZnVuY3Rpb24gbWFpbkNvbnRyb2xsZXIgKCRpbnRlcnZhbCwgJG1kRGlhbG9nLCAkbWRNZWRpYSwgJHNjb3BlLCAkcm9vdFNjb3BlLCAkc3RhdGUsIEhvdXNlaG9sZCwgU2VjdGlvbnMpIHtcbiAgICAgICAgLy8gVE9ETzogcmVwbGFjZSBzY29wZSB3aXRoIHZtXG4gICAgICAgICRzY29wZS5zY2hvb2xEaXN0cmljdCA9ICdPYWtsYW5kIFVuaWZpZWQgU2Nob29sIERpc3RyaWN0JztcbiAgICAgICAgJHNjb3BlLnN0dWRlbnRTdGF0dXNlcyA9IFsnaW4gc2Nob29sJywgJ2hvbWUgc2Nob29sZWQnLCAnc29tZSBvdGhlciBzdGF0dXMnXTtcblxuICAgICAgICAkc2NvcGUuaG91c2Vob2xkID0gSG91c2Vob2xkLmdldCgpO1xuICAgICAgICAkc2NvcGUubmF2aWdhdGVUb05leHRTZWN0aW9uID0gbmF2aWdhdGVUb05leHRTZWN0aW9uO1xuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICAkc2NvcGUuJHdhdGNoKCdob3VzZWhvbGQuY2hpbGRDb3VudCcsIGZ1bmN0aW9uKG5ld1ZhbCkge1xuICAgICAgICAgICAgd2hpbGUgKG5ld1ZhbCA+ICRzY29wZS5ob3VzZWhvbGQuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmhvdXNlaG9sZC5pbmNyZW1lbnRDaGlsZENvdW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ2hvdXNlaG9sZC5vdGhlck1lbWJlcnNDb3VudCcsIGZ1bmN0aW9uKG5ld1ZhbCkge1xuICAgICAgICAgICAgd2hpbGUgKG5ld1ZhbCA+ICRzY29wZS5ob3VzZWhvbGQub3RoZXJNZW1iZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5ob3VzZWhvbGQuaW5jcmVtZW50T3RoZXJNZW1iZXJzQ291bnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVE9ETzogbW92ZSB0aGlzIHRvIGNvbmZpZyBvciBzb21ldGhpbmdcbiAgICAgICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA9IDA7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIG5hdmlnYXRlVG9OZXh0U2VjdGlvbigpIHtcbiAgICAgICAgICAgIFNlY3Rpb25zLnVwZGF0ZVJlcXVpcmVkU2VjdGlvbnMoJHNjb3BlLmhvdXNlaG9sZCk7XG4gICAgICAgICAgICBTZWN0aW9ucy5uYXZpZ2F0ZVRvTmV4dCgkc3RhdGUuJGN1cnJlbnQuc2VsZi5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyAvLyBUT0RPIC0gbWFrZSB0aGlzIHdvcmtcbiAgICAgICAgLy8gZnVuY3Rpb24gdXBkYXRlQ29tcGxldGVkKCkge1xuICAgICAgICAvLyAgICAgLy8gY29uc29sZS5sb2coJ3ZhbGlkJywgY2hpbGRyZW5Gb3JtLiR2YWxpZCk7XG4gICAgICAgIC8vICAgICBpZiAoY2hpbGRyZW5Gb3JtLiR2YWxpZCkge1xuICAgICAgICAvLyAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd0aGlzIHJhbi0gY29tcGxldGUnKTtcbiAgICAgICAgLy8gICAgICAgICBTZWN0aW9ucy5pbmRleGVkU2VjdGlvbnMuY2hpbGRyZW4uY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgLy8gICAgIH0gZWxzZSB7XG4gICAgICAgIC8vICAgICAgICAgLy8gY29uc29sZS5sb2coJ3RoaXMgcmFuLSBub3QgY29tcGxldGUnKTtcbiAgICAgICAgLy8gICAgICAgICBTZWN0aW9ucy5pbmRleGVkU2VjdGlvbnMuY2hpbGRyZW4uY29tcGxldGVkID0gZmFsc2U7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH1cblxuICAgICAgICAvLyAvLyAkaW50ZXJ2YWwodXBkYXRlQ29tcGxldGVkLCAxMDAwKTtcbiAgICAgICAgLy8gJHNjb3BlLiR3YXRjaCgnY2hpbGRyZW5Gb3JtLiRpbnZhbGlkJywgZnVuY3Rpb24obmV3VmFsKSB7XG4gICAgICAgIC8vICAgICBjb25zb2xlLmxvZygnbmV3IHZhbCAnLCBuZXdWYWwpO1xuICAgICAgICAvLyAgICAgLy8kc2NvcGUudmFsaWQgPSBuZXdWYWw7XG4gICAgICAgIC8vICAgICAvLyAkc2NvcGUuaW5mb3JtYXRpb25TdGF0dXMgPSB0cnVlO1xuICAgICAgICAvLyB9LCB0cnVlKTtcblxuICAgIH1cblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnZWF0Q2hhbGxlbmdlQXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ3NpZGVOYXZDb250cm9sbGVyJywgc2lkZU5hdkNvbnRyb2xsZXIpO1xuXG4gICAgc2lkZU5hdkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywnU2VjdGlvbnMnXTtcblxuICAgIGZ1bmN0aW9uIHNpZGVOYXZDb250cm9sbGVyICgkc2NvcGUsIFNlY3Rpb25zKSB7XG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgICAgdmFyIHZtID0gJHNjb3BlO1xuXG4gICAgICAgIHZtLnNlY3Rpb25zID0gU2VjdGlvbnMuc2VjdGlvbnM7XG5cbiAgICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAgIC5kaXJlY3RpdmUoJ2luY29tZVF1ZXN0aW9ucycsIGluY29tZURpcmVjdGl2ZSk7XG5cbiAgICBmdW5jdGlvbiBpbmNvbWVEaXJlY3RpdmUoKSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIG1lbWJlcjogJz0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2luY29tZS5odG1sJyxcbiAgICAgICAgICAgIGxpbms6IGxpbmtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZGlyZWN0aXZlO1xuICAgIH1cblxuICAgIC8vIGxpbmsuJGluamVjdCA9IFsnc2NvcGUnXTtcblxuICAgIGZ1bmN0aW9uIGxpbmsoc2NvcGUpIHtcbiAgICAgICAgc2NvcGUuaW5jb21lU291cmNlcyA9IHtcbiAgICAgICAgICAgIHdvcms6IHtcbiAgICAgICAgICAgICAgICB2YXVsZTond29yaycsXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdFYXJuaW5ncyBmcm9tIHdvcmsnLFxuICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnYml3ZWVrbHknLCAnMnggbW9udGgnLCAnbW9udGhseSddLFxuICAgICAgICAgICAgICAgIGFubm90YXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6ICdBIGNoaWxkIGhhcyBhIGpvYiB3aGVyZSB0aGV5IGVhcm4gc2FsYXJ5IG9yIHdhZ2VzICcsXG4gICAgICAgICAgICAgICAgICAgIG90aGVyTWVtYmVyOiAnJyxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc29jaWFsU2VjdXJpdHk6IHtcbiAgICAgICAgICAgICAgICB2YXVsZTonc29jaWFsU2VjdXJpdHknLFxuICAgICAgICAgICAgICAgIGxhYmVsOiAnU29jaWFsIFNlY3VyaXR5IERpc2FiaWxpdHkgUGF5bWVudHMgb3IgU3Vydml2b3LigJlzIEJlbmVmaXRzICcsXG4gICAgICAgICAgICAgICAgZnJlcXVlbmN5OiBbJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICBhbm5vdGF0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkOiAnQSBjaGlsZCBpcyBibGluZCBvciBkaXNhYmxlZCBhbmQgcmVjZWl2ZXMgU29jaWFsIFNlY3VyaXR5IGJlbmVmaXRzLicsXG4gICAgICAgICAgICAgICAgICAgIC8vICcgQSBwYXJlbnQgaXMgZGlzYWJsZWQsIHJldGlyZWQsIG9yIGRlY2Vhc2VkLCBhbmQgdGhlaXIgY2hpbGQgcmVjZWl2ZXMgc29jaWFsIHNlY3VyaXR5IGJlbmVmaXRzJyxcbiAgICAgICAgICAgICAgICAgICAgb3RoZXJNZW1iZXI6ICcnLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvdGhlclBlcnNvbjoge1xuICAgICAgICAgICAgICAgIHZhdWxlOidvdGhlclBlcnNvbicsXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdJbmNvbWUgZnJvbSBwZXJzb25zIG91dHNpZGUgdGhlIGhvdXNlaG9sZCcsXG4gICAgICAgICAgICAgICAgZnJlcXVlbmN5OiBbJ3dlZWtseScsICdiaXdlZWtseScsICcyeCBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgYW5ub3RhdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZDogJ0EgZnJpZW5kIG9yIGV4dGVuZGVkIGZhbWlseSBtZW1iZXIgcmVndWxhcmx5IGdpdmVzIGEgY2hpbGQgc3BlbmRpbmcgbW9uZXknLFxuICAgICAgICAgICAgICAgICAgICBvdGhlck1lbWJlcjogJycsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG90aGVyU291cmNlOiB7XG4gICAgICAgICAgICAgICAgdmF1bGU6J290aGVyU291cmNlJyxcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0luY29tZSBmcm9tIGFueSBvdGhlciBzb3VyY2UnLFxuICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnYml3ZWVrbHknLCAnMnggbW9udGgnLCAnbW9udGhseSddLFxuICAgICAgICAgICAgICAgIGFubm90YXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6ICdBIGNoaWxkIHJlY2VpdmVzIGluY29tZSBmcm9tIGEgcHJpdmF0ZSBwZW5zaW9uIGZ1bmQsIGFubnVpdHksIG9yIHRydXN0JyxcbiAgICAgICAgICAgICAgICAgICAgb3RoZXJNZW1iZXI6ICcnLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoc2NvcGUubWVtYmVyLmluY29tZVNvdXJjZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzY29wZS5tZW1iZXIuaW5jb21lU291cmNlcyA9IFtdO1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoc2NvcGUuaW5jb21lU291cmNlcykuZm9yRWFjaChmdW5jdGlvbihpbmNvbWVTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICBzY29wZS5tZW1iZXIuaW5jb21lU291cmNlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogaW5jb21lU291cmNlLFxuICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogbnVsbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAgIC5kaXJlY3RpdmUoJ3llc05vSW5wdXQnLCB5ZXNOb0lucHV0KTtcblxuICAgIGZ1bmN0aW9uIHllc05vSW5wdXQgKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBtb2RlbDogJz0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3llc25vLmh0bWwnLFxuICAgICAgICB9O1xuICAgIH1cblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAgIC5zZXJ2aWNlKCdIb3VzZWhvbGQnLCBob3VzZWhvbGRTZXJ2aWNlKTtcblxuICAgIGhvdXNlaG9sZFNlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnXTtcblxuICAgIGZ1bmN0aW9uIGhvdXNlaG9sZFNlcnZpY2UoJGh0dHApIHtcbiAgICAgICAgdGhpcy5nZXQgPSBnZXQ7XG4gICAgICAgIHRoaXMuc2F2ZSA9IHNhdmU7XG4gICAgICAgIHRoaXMuY2xlYXIgPSBjbGVhcjtcblxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgdmFyIFBlcnNvbiA9IHtcbiAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5jb21lU291cmNlQ291bnQgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5jb21lU291cmNlcyA9IFtdO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaW5jcmVtZW50SW5jb21lU291cmNlczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmNvbWVTb3VyY2VDb3VudCsrO1xuICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLmluY29tZVNvdXJjZUNvdW50ID4gdGhpcy5pbmNvbWVTb3VyY2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluY29tZVNvdXJjZXMucHVzaCh7fSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBIb3VzZWhvbGQgPSB7XG4gICAgICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmNyZW1lbnRDaGlsZENvdW50KCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm90aGVyTWVtYmVycyA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMub3RoZXJNZW1iZXJzQ291bnQgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5jcmVtZW50T3RoZXJNZW1iZXJzQ291bnQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmNyZW1lbnRDaGlsZENvdW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkQ291bnQrKztcbiAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5jaGlsZENvdW50ID4gdGhpcy5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0NoaWxkID0gT2JqZWN0LmNyZWF0ZShQZXJzb24pO1xuICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZC5pbml0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy9hZGQgY2hpbGQgc3BlY2lmaWMgZmllbGRzXG4gICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLmlzQ2hpbGQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZC5zcGVjaWFsU3RhdHVzID0ge307XG4gICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLmFzc2lzdGFuY2VQcm9ncmFtID0ge307XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKG5ld0NoaWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5jcmVtZW50T3RoZXJNZW1iZXJzQ291bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMub3RoZXJNZW1iZXJzQ291bnQrKztcbiAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5vdGhlck1lbWJlcnNDb3VudCA+IHRoaXMub3RoZXJNZW1iZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3TWVtYmVyID0gT2JqZWN0LmNyZWF0ZShQZXJzb24pO1xuICAgICAgICAgICAgICAgICAgICBuZXdNZW1iZXIuaW5pdCgpO1xuICAgICAgICAgICAgICAgICAgICBuZXdNZW1iZXIuaXNDaGlsZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm90aGVyTWVtYmVycy5wdXNoKG5ld01lbWJlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGhvdXNlaG9sZDtcblxuICAgICAgICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICBpZiAoaG91c2Vob2xkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXNlaG9sZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9UT0RPOiBpZiB0aGVyZSdzIGEgdXNlcmlkLCByZXR1cm4gdGhlIGhvdXNlaG9sZCBhc3NvY2lhdGVkIHdpdGggaXRcbiAgICAgICAgICAgIC8vIGlmICh1c2VyaWQpIHtcbiAgICAgICAgICAgIC8vICAgICAvLyBUT0RPOiBhZGQgZXJyb3IgaGFuZGxpbmdcbiAgICAgICAgICAgIC8vICAgICAkaHR0cC5nZXQoJy9ob3VzZWhvbGQnKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgcmV0dXJuIGhvdXNlaG9sZCA9IGRhdGE7XG4gICAgICAgICAgICAvLyAgICAgfSk7XG4gICAgICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gICAgIC8vIGNyZWF0ZSBhIG5ldyBob3VzZWhvbGQgaWYgb25lIGRvZXNuJ3QgZXhpc3RcbiAgICAgICAgICAgIGhvdXNlaG9sZCA9IE9iamVjdC5jcmVhdGUoSG91c2Vob2xkKTtcbiAgICAgICAgICAgIGhvdXNlaG9sZC5pbml0KCk7XG4gICAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICAgIHJldHVybiBob3VzZWhvbGQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzYXZlKCkge1xuICAgICAgICAgICAgLy8gVE9ETzogaGFuZGxlIGVycm9yc1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9ob3VzZWhvbGQnLCBob3VzZWhvbGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2xlYXIgKCkge1xuICAgICAgICAgICAgdmFyIGhvdXNlaG9sZCA9IHt9O1xuICAgICAgICAgICAgcmV0dXJuIGhvdXNlaG9sZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAgIC5zZXJ2aWNlKCdTZWN0aW9ucycsIHNlY3Rpb25zU2VydmljZSk7XG5cbiAgICBzZWN0aW9uc1NlcnZpY2UuJGluamVjdCA9IFsnJHN0YXRlJ107XG5cbiAgICBmdW5jdGlvbiBzZWN0aW9uc1NlcnZpY2UoJHN0YXRlKSB7XG5cbiAgICAgICAgdmFyIHNlY3Rpb25zID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnQ2hpbGRyZW4nLFxuICAgICAgICAgICAgICAgIHN0YXRlOiAnY2hpbGRyZW4nLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdDaGlsZCBJbmNvbWUnLFxuICAgICAgICAgICAgICAgIHN0YXRlOiAnY2hpbGRJbmNvbWUnLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdIb3VzZWhvbGQnLFxuICAgICAgICAgICAgICAgIHN0YXRlOiAnaG91c2Vob2xkJyxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnU2lnbiBhbmQgQ29uZmlybScsXG4gICAgICAgICAgICAgICAgc3RhdGU6ICdzaWduYXR1cmUnLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG5cbiAgICAgICAgdmFyIGluZGV4ZWRTZWN0aW9ucyA9IF8uaW5kZXhCeShzZWN0aW9ucywgJ3N0YXRlJyk7XG5cbiAgICAgICAgLy8gVE9ETzogUHV0IHNraXAgbG9naWMgaGVyZVxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVSZXF1aXJlZFNlY3Rpb25zKGhvdXNlaG9sZCkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRDaGlsZDtcbiAgICAgICAgICAgIHZhciBhc3Npc3RhbmNlUHJvZ3JhbUhvdXNlaG9sZCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGZvc3RlckNoaWxkQ291bnQgPSAwO1xuICAgICAgICAgICAgdmFyIHNob3VsZE1lYW5zVGVzdCA9IHRydWU7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwIDsgaSA8IGhvdXNlaG9sZC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRDaGlsZCA9IGhvdXNlaG9sZC5jaGlsZHJlbltpXTtcblxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q2hpbGQuYXNzaXN0YW5jZVByb2dyYW0ucGFydGljaXBhbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzaXN0YW5jZVByb2dyYW1Ib3VzZWhvbGQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudENoaWxkLnNwZWNpYWxTdGF0dXMuZm9zdGVyQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9zdGVyQ2hpbGRDb3VudCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFzc2lzdGFuY2VQcm9ncmFtSG91c2Vob2xkIHx8XG4gICAgICAgICAgICAgICAgaG91c2Vob2xkLmNoaWxkcmVuLmxlbmd0aCA9PT0gZm9zdGVyQ2hpbGRDb3VudCkge1xuICAgICAgICAgICAgICAgIHNob3VsZE1lYW5zVGVzdCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS5sb2coe3Nob3VsZE1lYW5zVGVzdDogc2hvdWxkTWVhbnNUZXN0fSk7XG4gICAgICAgICAgICBpZiAoc2hvdWxkTWVhbnNUZXN0KSB7XG4gICAgICAgICAgICAgICAgc2VjdGlvbnMuZm9yRWFjaChmdW5jdGlvbihzZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb24ucmVxdWlyZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkU2VjdGlvbnNbJ2NoaWxkSW5jb21lJ10ucmVxdWlyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpbmRleGVkU2VjdGlvbnNbJ2hvdXNlaG9sZCddLnJlcXVpcmVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGZpbmROZXh0KGN1cnJlbnRTdGF0ZSkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IF8uZmluZEluZGV4KHNlY3Rpb25zLCBmdW5jdGlvbihzZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlY3Rpb24uc3RhdGUgPT09IGN1cnJlbnRTdGF0ZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBMb29rIGZvciB0aGUgbmV4dCByZXF1aXJlZCBzZWN0aW9uXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gY3VycmVudEluZGV4ICsgMTsgaSA8IHNlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlY3Rpb25zW2ldLnJlcXVpcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWN0aW9uc1tpXS5zdGF0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGFyZSBubyBtb3JlIHJlcXVpcmVkIHNlY3Rpb25zLCB3ZSdyZSBkb25lLlxuICAgICAgICAgICAgcmV0dXJuICdjb25maXJtYXRpb24nO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbmF2aWdhdGVUb05leHQoY3VycmVudFN0YXRlKSB7XG4gICAgICAgICAgICB2YXIgbmV4dFNlY3Rpb24gID0gZmluZE5leHQoY3VycmVudFN0YXRlKTtcbiAgICAgICAgICAgICRzdGF0ZS5nbyhuZXh0U2VjdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgICAgICAgc2VjdGlvbnM6IHNlY3Rpb25zLFxuICAgICAgICAgICAgaW5kZXhlZFNlY3Rpb25zOiBpbmRleGVkU2VjdGlvbnMsXG4gICAgICAgICAgICBuYXZpZ2F0ZVRvTmV4dDogbmF2aWdhdGVUb05leHQsXG4gICAgICAgICAgICB1cGRhdGVSZXF1aXJlZFNlY3Rpb25zOiB1cGRhdGVSZXF1aXJlZFNlY3Rpb25zXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG5cbiAgICB9XG5cbn0pKCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
