!function(){function e(e){}function t(e,t){function o(e,t){t.otherwise("/"),e.state("start",{url:"/",templateUrl:"../views/start.html",controller:"mainController"}).state("children",{url:"/children",templateUrl:"../views/children.html",controller:"mainController"}).state("childIncome",{url:"/childIncome",templateUrl:"../views/childIncome.html",controller:"mainController"}).state("household",{url:"/household",templateUrl:"../views/household.html",controller:"mainController"}).state("signature",{url:"/signature",templateUrl:"../views/signature.html",controller:"mainController"}).state("confirmation",{url:"/confirmation",templateUrl:"../views/confirmation.html",controller:"mainController"}).state("export",{url:"/export",templateUrl:"../views/export.html",controller:"mainController"}).state("styleguide",{url:"/styleguide",templateUrl:"../views/styleguide.html",controller:"mainController"}).state("signup",{url:"/signup",templateUrl:"../views/signup.html"}).state("login",{url:"/login",templateUrl:"../views/login.html"})}o(e,t)}angular.module("eatChallengeApp",["ngMaterial","ui.router"]).config(t).config(e),e.$inject=["$mdThemingProvider"],t.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){function e(e,t,o,n){o.schoolDistrict="Oakland Unified School District",o.studentStatuses=["in school","home schooled","some other status"],o.household=n.get(),o.$watch("household.childCount",function(e){for(;e>o.household.children.length;)o.household.incrementChildCount()}),o.$watch("household.otherMembersCount",function(e){for(;e>o.household.otherMembers.length;)o.household.incrementOtherMembersCount()})}angular.module("eatChallengeApp").controller("mainController",e),e.$inject=["$mdDialog","$mdMedia","$scope","Household"]}(),function(){function e(){var e={scope:{member:"="},restrict:"A",replace:!0,templateUrl:"../views/income.html",link:t};return e}function t(e){e.incomeSources=[{vaule:"work",label:"Earnings from work",frequency:["weekly","biweekly","2x month","monthly"],annotation:{child:"A child has a job where they earn salary or wages ",otherMember:""}},{vaule:"socialSecurity",label:"Social Security Disability Payments or Survivorâ€™s Benefits ",frequency:["monthly"],annotation:{child:"A child is blind or disabled and receives Social Security benefits. A parent is disabled, retired, or deceased, and their child receives social security benefits",otherMember:""}},{vaule:"otherPerson",label:"Income from persons outside the household",frequency:["weekly","biweekly","2x month","monthly"],annotation:{child:"A friend or extended family member regularly gives a child spending money",otherMember:""}},{vaule:"otherSource",label:"Income from any other source",frequency:["weekly","biweekly","2x month","monthly"],annotation:{child:"A child receives income from a private pension fund, annuity, or trust",otherMember:""}}]}angular.module("eatChallengeApp").directive("incomeQuestions",e)}(),function(){function e(){return{scope:{model:"="},restrict:"A",replace:!0,templateUrl:"../views/yesno.html"}}angular.module("eatChallengeApp").directive("yesNoInput",e)}(),function(){function e(e){function t(){return r?r:(r=Object.create(l),r.init(),r)}function o(){return e.post("/household",r)}function n(){var e={};return e}this.get=t,this.save=o,this.clear=n;var r,i={init:function(){this.incomeSourceCount=0,this.incomeSources=[]},incrementIncomeSources:function(){for(this.incomeSourceCount++;this.incomeSourceCount>this.incomeSources.length;)this.incomeSources.push({})}},l={init:function(){this.children=[],this.childCount=0,this.incrementChildCount(),this.otherMembers=[],this.otherMembersCount=0,this.incrementOtherMembersCount()},incrementChildCount:function(){for(this.childCount++;this.childCount>this.children.length;){var e=Object.create(i);e.init(),e.isChild=!0,this.children.push(e)}},incrementOtherMembersCount:function(){for(this.otherMembersCount++;this.otherMembersCount>this.otherMembers.length;){var e=Object.create(i);e.init(),e.isChild=!1,this.otherMembers.push(e)}}};return this}angular.module("eatChallengeApp").service("Household",e),e.$inject=["$http"]}();
//# sourceMappingURL=data:application/json;base64,
