!function(){function e(e){}function t(e,t){function n(e,t){t.otherwise("/"),e.state("start",{url:"/",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/start.html",controller:"mainController"}}}).state("children",{url:"/children",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/children.html",controller:"mainController"}}}).state("childIncome",{url:"/childIncome",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/childIncome.html",controller:"mainController"}}}).state("household",{url:"/household",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/household.html",controller:"mainController"}}}).state("signature",{url:"/signature",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/signature.html",controller:"mainController"}}}).state("confirmation",{url:"/confirmation",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/confirmation.html",controller:"mainController"}}}).state("export",{url:"/export",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/export.html",controller:"exportController"}}}).state("signup",{url:"/signup",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/signup.html",controller:"mainController"}}}).state("login",{url:"/login",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/login.html",controller:"loginController"}}}).state("soFar",{url:"/so-far",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/soFar.html",controller:"mainController"}}})}n(e,t)}angular.module("eatChallengeApp",["ngCookies","ngCsv","ngMaterial","ngSanitize","ui.router"]).config(t).config(e),e.$inject=["$mdThemingProvider"],t.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e,t){e.get("/household/completed").then(function(e){t.completedApplications=e.data})}angular.module("eatChallengeApp").controller("exportController",e),e.$inject=["$http","$scope"]}(),function(){function e(e,t){}angular.module("eatChallengeApp").controller("loginController",[e]),e.$inject=["$location","$scope"]}(),function(){"use strict";function e(e,t,n,o,l,r,i,a,s){function c(t){t>l.household.children.length&&e.get("/child").then(function(e){var n=e.data;l.household.children.push(n),c(t)})}function u(e){for(;e>l.household.otherMembers.length;)l.household.incrementOtherMembersCount()}function h(){a.save();s.updateRequiredSections(l.household);s.navigateToNext(r.$current.self.name)}function m(){l.household.completed=!0,h()}var d=l;d.household=a.get(),d.schoolDistrict="Oakland Unified School District",d.navigateToNextSection=h,d.submitApplication=m,l.$watch("household.childCount",c),l.$watch("household.otherMembersCount",u)}angular.module("eatChallengeApp").controller("mainController",e),e.$inject=["$http","$interval","$mdDialog","$mdMedia","$scope","$state","Auth","Household","Sections"]}(),function(){function e(e,t,n){var o=e;o.currentState=t.$current.self.name,o.sections=n.sections}angular.module("eatChallengeApp").controller("sideNavController",e),e.$inject=["$scope","$state","Sections"]}(),function(){function e(){var e={scope:{member:"="},restrict:"A",replace:!0,templateUrl:"../views/income.html",link:t};return e}function t(e){e.incomeSources={work:{vaule:"work",label:"Earnings from work",frequency:["weekly","biweekly","2x month","monthly"],annotation:{child:"A child has a job where they earn salary or wages ",otherMember:""}},socialSecurity:{vaule:"socialSecurity",label:"Social Security Disability Payments or Survivorâ€™s Benefits ",frequency:["monthly"],annotation:{child:"A child is blind or disabled and receives Social Security benefits.",otherMember:""}},otherPerson:{vaule:"otherPerson",label:"Income from persons outside the household",frequency:["weekly","biweekly","2x month","monthly"],annotation:{child:"A friend or extended family member regularly gives a child spending money",otherMember:""}},otherSource:{vaule:"otherSource",label:"Income from any other source",frequency:["weekly","biweekly","2x month","monthly"],annotation:{child:"A child receives income from a private pension fund, annuity, or trust",otherMember:""}}},0===e.member.incomeSources.length&&(e.member.incomeSources=[],Object.keys(e.incomeSources).forEach(function(t){e.member.incomeSources.push({type:t,amount:null,frequency:null})}))}angular.module("eatChallengeApp").directive("incomeQuestions",e)}(),function(){function e(){return{scope:{model:"="},restrict:"A",replace:!0,templateUrl:"../views/yesno.html"}}angular.module("eatChallengeApp").directive("yesNoInput",e)}(),function(){"use strict";function e(e){function t(t,n){var l={email:t,password:n};e.post("/user/login",l).success(function(e){o=!0})}function n(){e.post("/user/logout").success(function(){o=fasle})}var o=!1,l={login:t,logout:n,user:o};return l}angular.module("eatChallengeApp").service("Auth",e),e.$inject=["$http"]}(),function(){function e(e){function t(){return l?l:l=Object.create(r)}function n(){return e.post("/household",l).then(function(e){l=e.data})}function o(){var e={};return e}this.get=t,this.save=n,this.clear=o;var l,r={childCount:0,children:[],otherMembersCount:0,otherMembers:[],completedApplication:!1};return this}angular.module("eatChallengeApp").service("Household",e),e.$inject=["$http"]}(),function(){"use strict";function e(e,t){function n(e){for(var t,n=!1,o=0,l=!1,a=0;a<e.children.length;a++){if(t=e.children[a],t.assistanceProgram&&t.assistanceProgram.participant){n=!0;break}(t.specialStatus&&t.specialStatus.fosterChild||t.specialStatus.homelessMigrantRunaway||t.specialStatus.headStartParticipant)&&o++}return(l=n||e.children.length>0&&e.children.length===o)?(i.childIncome.required=!1,void(i.household.required=!1)):void r.forEach(function(e){e.required=!0})}function o(e){for(var t=_.findIndex(r,function(t){return t.state===e}),n=t+1;n<r.length;n++)if(r[n].required)return r[n].state;return"confirmation"}function l(e){var n=o(e);t.go(n)}var r=[{label:"Children",state:"children",completed:!1,required:!0},{label:"Children's Income",state:"childIncome",completed:!1,required:!0},{label:"Household",state:"household",completed:!1,required:!0},{label:"Sign and Confirm",state:"signature",completed:!1,required:!0}],i=_.indexBy(r,"state"),a={sections:r,indexedSections:i,navigateToNext:l,updateRequiredSections:n};return a}angular.module("eatChallengeApp").service("Sections",e),e.$inject=["$rootScope","$state"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbnRyb2xsZXJzL2V4cG9ydC5qcyIsImNvbnRyb2xsZXJzL2xvZ2luLmpzIiwiY29udHJvbGxlcnMvbWFpbi5qcyIsImNvbnRyb2xsZXJzL3NpZGVuYXYuanMiLCJkaXJlY3RpdmVzL2luY29tZS5qcyIsImRpcmVjdGl2ZXMveWVzbm8uanMiLCJzZXJ2aWNlcy9hdXRoLmpzIiwic2VydmljZXMvaG91c2Vob2xkLmpzIiwic2VydmljZXMvc2VjdGlvbnMuanMiXSwibmFtZXMiOlsibWF0ZXJpYWxEZXNpZ25UaGVtZXIiLCIkbWRUaGVtaW5nUHJvdmlkZXIiLCJyb3V0ZXJDb25maWciLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsInJvdXRlciIsIm90aGVyd2lzZSIsInN0YXRlIiwidXJsIiwidmlld3MiLCJzaWRlLW5hdiIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsIm1haW4iLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJGluamVjdCIsImV4cG9ydENvbnRyb2xsZXIiLCIkaHR0cCIsIiRzY29wZSIsImdldCIsInRoZW4iLCJyZXNwb25zZSIsImNvbXBsZXRlZEFwcGxpY2F0aW9ucyIsImRhdGEiLCJsb2dpbkNvbnRyb2xsZXIiLCIkbG9jYXRpb24iLCJtYWluQ29udHJvbGxlciIsIiRpbnRlcnZhbCIsIiRtZERpYWxvZyIsIiRtZE1lZGlhIiwiJHN0YXRlIiwiQXV0aCIsIkhvdXNlaG9sZCIsIlNlY3Rpb25zIiwiYWRkQ2hpbGQiLCJuZXdWYWwiLCJob3VzZWhvbGQiLCJjaGlsZHJlbiIsImxlbmd0aCIsIm5ld0NoaWxkIiwicHVzaCIsImFkZE90aGVyTWVtYmVyIiwib3RoZXJNZW1iZXJzIiwiaW5jcmVtZW50T3RoZXJNZW1iZXJzQ291bnQiLCJuYXZpZ2F0ZVRvTmV4dFNlY3Rpb24iLCJzYXZlIiwidXBkYXRlUmVxdWlyZWRTZWN0aW9ucyIsIm5hdmlnYXRlVG9OZXh0IiwiJGN1cnJlbnQiLCJzZWxmIiwibmFtZSIsInN1Ym1pdEFwcGxpY2F0aW9uIiwiY29tcGxldGVkIiwidm0iLCJzY2hvb2xEaXN0cmljdCIsIiR3YXRjaCIsInNpZGVOYXZDb250cm9sbGVyIiwiY3VycmVudFN0YXRlIiwic2VjdGlvbnMiLCJpbmNvbWVEaXJlY3RpdmUiLCJkaXJlY3RpdmUiLCJzY29wZSIsIm1lbWJlciIsInJlc3RyaWN0IiwicmVwbGFjZSIsImxpbmsiLCJpbmNvbWVTb3VyY2VzIiwid29yayIsInZhdWxlIiwibGFiZWwiLCJmcmVxdWVuY3kiLCJhbm5vdGF0aW9uIiwiY2hpbGQiLCJvdGhlck1lbWJlciIsInNvY2lhbFNlY3VyaXR5Iiwib3RoZXJQZXJzb24iLCJvdGhlclNvdXJjZSIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiaW5jb21lU291cmNlIiwidHlwZSIsImFtb3VudCIsInllc05vSW5wdXQiLCJtb2RlbCIsImxvZ2luIiwiZW1haWwiLCJwYXNzd29yZCIsInBvc3QiLCJzdWNjZXNzIiwidXNlciIsImxvZ291dCIsImZhc2xlIiwic2VydmljZSIsImhvdXNlaG9sZFNlcnZpY2UiLCJjcmVhdGUiLCJjbGVhciIsInRoaXMiLCJjaGlsZENvdW50Iiwib3RoZXJNZW1iZXJzQ291bnQiLCJjb21wbGV0ZWRBcHBsaWNhdGlvbiIsInNlY3Rpb25zU2VydmljZSIsIiRyb290U2NvcGUiLCJjdXJyZW50Q2hpbGQiLCJhc3Npc3RhbmNlUHJvZ3JhbUhvdXNlaG9sZCIsInNwZWNpYWxTdGF0dXNDb3VudCIsInNraXBNZWFuc1Rlc3QiLCJpIiwiYXNzaXN0YW5jZVByb2dyYW0iLCJwYXJ0aWNpcGFudCIsInNwZWNpYWxTdGF0dXMiLCJmb3N0ZXJDaGlsZCIsImhvbWVsZXNzTWlncmFudFJ1bmF3YXkiLCJoZWFkU3RhcnRQYXJ0aWNpcGFudCIsImluZGV4ZWRTZWN0aW9ucyIsInJlcXVpcmVkIiwic2VjdGlvbiIsImZpbmROZXh0IiwiY3VycmVudEluZGV4IiwiXyIsImZpbmRJbmRleCIsIm5leHRTZWN0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V0FBQSxFQUNBK0QsVUFBQSxJQUdBOUMsTUFBQSxvQkFDQWhFLE1BQUEsY0FDQStDLFdBQUEsRUFDQStELFVBQUEsSUFHQTlDLE1BQUEsWUFDQWhFLE1BQUEsWUFDQStDLFdBQUEsRUFDQStELFVBQUEsSUFHQTlDLE1BQUEsbUJBQ0FoRSxNQUFBLFlBQ0ErQyxXQUFBLEVBQ0ErRCxVQUFBLElBSUFELEVBQUFLLEVBQUFJLFFBQUFqRSxFQUFBLFNBRUFtQyxHQUNBbkMsU0FBQUEsRUFDQXdELGdCQUFBQSxFQUNBbkUsZUFBQUEsRUFDQUQsdUJBQUFBLEVBR0EsT0FBQStDLEdBOUNBakYsUUFDQUMsT0FBQSxtQkFDQWdGLFFBQUEsV0FBQVEsR0FFQUEsRUFBQXRGLFNBQUEsYUFBQSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKSB7XG5cbiAgICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnZWF0Q2hhbGxlbmdlQXBwJyxbJ25nQ29va2llcycsICduZ0NzdicsJ25nTWF0ZXJpYWwnLCAnbmdTYW5pdGl6ZScsICd1aS5yb3V0ZXInXSlcbiAgICAuY29uZmlnKHJvdXRlckNvbmZpZylcbiAgICAuY29uZmlnKG1hdGVyaWFsRGVzaWduVGhlbWVyKTtcblxuICAgIG1hdGVyaWFsRGVzaWduVGhlbWVyLiRpbmplY3QgPSBbJyRtZFRoZW1pbmdQcm92aWRlciddO1xuICAgIGZ1bmN0aW9uIG1hdGVyaWFsRGVzaWduVGhlbWVyKCRtZFRoZW1pbmdQcm92aWRlcikge1xuICAgICAgICAvLyAkbWRUaGVtaW5nUHJvdmlkZXIudGhlbWUoJ2xpZ2h0LWJsdWUnKTtcbiAgICAgICAgLy8gLnByaW1hcnlQYWxldHRlKCdwaW5rJywge1xuICAgICAgICAvLyAgICdkZWZhdWx0JzogJzQwMCcsIC8vIGJ5IGRlZmF1bHQgdXNlIHNoYWRlIDQwMCBmcm9tIHRoZSBwaW5rIHBhbGV0dGUgZm9yIHByaW1hcnkgaW50ZW50aW9uc1xuICAgICAgICAvLyAgICdodWUtMSc6ICcxMDAnLCAvLyB1c2Ugc2hhZGUgMTAwIGZvciB0aGUgPGNvZGU+bWQtaHVlLTE8L2NvZGU+IGNsYXNzXG4gICAgICAgIC8vICAgJ2h1ZS0yJzogJzYwMCcsIC8vIHVzZSBzaGFkZSA2MDAgZm9yIHRoZSA8Y29kZT5tZC1odWUtMjwvY29kZT4gY2xhc3NcbiAgICAgICAgLy8gICAnaHVlLTMnOiAnQTEwMCcgLy8gdXNlIHNoYWRlIEExMDAgZm9yIHRoZSA8Y29kZT5tZC1odWUtMzwvY29kZT4gY2xhc3NcbiAgICAgICAgLy8gfSlcbiAgICAgICAgLy8gLy8gSWYgeW91IHNwZWNpZnkgbGVzcyB0aGFuIGFsbCBvZiB0aGUga2V5cywgaXQgd2lsbCBpbmhlcml0IGZyb20gdGhlXG4gICAgICAgIC8vIC8vIGRlZmF1bHQgc2hhZGVzXG4gICAgICAgIC8vIC5hY2NlbnRQYWxldHRlKCdwdXJwbGUnLCB7XG4gICAgICAgIC8vICAgJ2RlZmF1bHQnOiAnMjAwJyAvLyB1c2Ugc2hhZGUgMjAwIGZvciBkZWZhdWx0LCBhbmQga2VlcCBhbGwgb3RoZXIgc2hhZGVzIHRoZSBzYW1lXG4gICAgICAgIC8vIH0pO1xuICAgIH1cblxuICAgIHJvdXRlckNvbmZpZy4kaW5qZWN0ID0gWyckc3RhdGVQcm92aWRlcicsICckdXJsUm91dGVyUHJvdmlkZXInXTtcblxuICAgIGZ1bmN0aW9uIHJvdXRlckNvbmZpZyAoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xuXG4gICAgICAgIHJvdXRlcigkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKTtcblxuICAgICAgICAvLy8vLy8vLy8vXG4gICAgICAgIGZ1bmN0aW9uIHJvdXRlcigkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XG4gICAgICAgICAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvJyk7XG5cbiAgICAgICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ3N0YXJ0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy8nLFxuICAgICAgICAgICAgICAgIHZpZXdzOntcbiAgICAgICAgICAgICAgICAgICAgJ3NpZGUtbmF2Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zaWRlTmF2Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NpZGVOYXZDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnbWFpbic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc3RhcnQuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnbWFpbkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjaGlsZHJlbicsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvY2hpbGRyZW4nLFxuICAgICAgICAgICAgICAgIHZpZXdzOntcbiAgICAgICAgICAgICAgICAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lkZU5hdi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NpZGVOYXZDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvY2hpbGRyZW4uaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdtYWluQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjaGlsZEluY29tZScsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvY2hpbGRJbmNvbWUnLFxuICAgICAgICAgICAgICAgIHZpZXdzOntcbiAgICAgICAgICAgICAgICAgICAgJ3NpZGUtbmF2Jzoge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZGVOYXYuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdzaWRlTmF2Q29udHJvbGxlcidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnbWFpbic6IHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9jaGlsZEluY29tZS5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ21haW5Db250cm9sbGVyJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdob3VzZWhvbGQnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2hvdXNlaG9sZCcsXG4gICAgICAgICAgICAgICAgdmlld3M6e1xuICAgICAgICAgICAgICAgICAgICAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lkZU5hdi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NpZGVOYXZDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2hvdXNlaG9sZC5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ21haW5Db250cm9sbGVyJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdzaWduYXR1cmUnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL3NpZ25hdHVyZScsXG4gICAgICAgICAgICAgICAgdmlld3M6e1xuICAgICAgICAgICAgICAgICAgICAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lkZU5hdi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NpZGVOYXZDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZ25hdHVyZS5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ21haW5Db250cm9sbGVyJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb25maXJtYXRpb24nLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2NvbmZpcm1hdGlvbicsXG4gICAgICAgICAgICAgICAgdmlld3M6e1xuICAgICAgICAgICAgICAgICAgICAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lkZU5hdi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NpZGVOYXZDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2NvbmZpcm1hdGlvbi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ21haW5Db250cm9sbGVyJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdleHBvcnQnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2V4cG9ydCcsXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgJ3NpZGUtbmF2Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zaWRlTmF2Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NpZGVOYXZDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnbWFpbic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvZXhwb3J0Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2V4cG9ydENvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdzaWdudXAnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL3NpZ251cCcsXG4gICAgICAgICAgICAgICAgdmlld3M6e1xuICAgICAgICAgICAgICAgICAgICAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZGVOYXYuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc2lkZU5hdkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zaWdudXAuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnbWFpbkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2xvZ2luJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9sb2dpbicsXG4gICAgICAgICAgICAgICAgdmlld3M6e1xuICAgICAgICAgICAgICAgICAgICAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZGVOYXYuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc2lkZU5hdkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9sb2dpbi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdsb2dpbkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdzb0ZhcicsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvc28tZmFyJyxcbiAgICAgICAgICAgICAgICB2aWV3czp7XG4gICAgICAgICAgICAgICAgICAgICdzaWRlLW5hdic6IHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zaWRlTmF2Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc2lkZU5hdkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc29GYXIuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdtYWluQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnXG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdleHBvcnRDb250cm9sbGVyJywgZXhwb3J0Q29udHJvbGxlcik7XG5cbiAgICBleHBvcnRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRodHRwJywgJyRzY29wZSddO1xuXG4gICAgZnVuY3Rpb24gZXhwb3J0Q29udHJvbGxlcigkaHR0cCwgJHNjb3BlKSB7XG4gICAgICAgICRodHRwLmdldCgnL2hvdXNlaG9sZC9jb21wbGV0ZWQnKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAkc2NvcGUuY29tcGxldGVkQXBwbGljYXRpb25zID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuXG4gICAgYW5ndWxhclxuICAgICAgLm1vZHVsZSgnZWF0Q2hhbGxlbmdlQXBwJylcbiAgICAgIC5jb250cm9sbGVyKCdsb2dpbkNvbnRyb2xsZXInLCBbbG9naW5Db250cm9sbGVyXSk7XG4gICAgbG9naW5Db250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2NhdGlvbicsICckc2NvcGUnXTtcbiAgICBmdW5jdGlvbiBsb2dpbkNvbnRyb2xsZXIoJGxvY2F0aW9uLCAkc2NvcGUpIHtcbiAgICAgICAgdmFyIHZtID0gJHNjb3BlO1xuICAgICAgICAvLyBkZWJ1Z2dlcjtcbiAgICAgICAgLy8gdm0uZXJyb3IgPSAkbG9jYXRpb247XG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnZWF0Q2hhbGxlbmdlQXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ21haW5Db250cm9sbGVyJywgbWFpbkNvbnRyb2xsZXIpO1xuXG4gICAgbWFpbkNvbnRyb2xsZXIuJGluamVjdCA9IFtcbiAgICAgICAgJyRodHRwJyxcbiAgICAgICAgJyRpbnRlcnZhbCcsXG4gICAgICAgICckbWREaWFsb2cnLFxuICAgICAgICAnJG1kTWVkaWEnLFxuICAgICAgICAnJHNjb3BlJyxcbiAgICAgICAgJyRzdGF0ZScsXG4gICAgICAgICdBdXRoJyxcbiAgICAgICAgJ0hvdXNlaG9sZCcsXG4gICAgICAgICdTZWN0aW9ucydcbiAgICBdO1xuXG4gICAgZnVuY3Rpb24gbWFpbkNvbnRyb2xsZXIgKCRodHRwLCAkaW50ZXJ2YWwsICRtZERpYWxvZywgJG1kTWVkaWEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZSwgJHN0YXRlLCBBdXRoLCBIb3VzZWhvbGQsIFNlY3Rpb25zKSB7XG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgICAgdmFyIHZtID0gJHNjb3BlO1xuXG4gICAgICAgIHZtLmhvdXNlaG9sZCA9IEhvdXNlaG9sZC5nZXQoKTtcbiAgICAgICAgdm0uc2Nob29sRGlzdHJpY3QgPSAnT2FrbGFuZCBVbmlmaWVkIFNjaG9vbCBEaXN0cmljdCc7XG5cbiAgICAgICAgdm0ubmF2aWdhdGVUb05leHRTZWN0aW9uID0gbmF2aWdhdGVUb05leHRTZWN0aW9uO1xuICAgICAgICB2bS5zdWJtaXRBcHBsaWNhdGlvbiA9IHN1Ym1pdEFwcGxpY2F0aW9uO1xuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBhZGRDaGlsZChuZXdWYWwpIHtcbiAgICAgICAgICAgIGlmIChuZXdWYWwgPiAkc2NvcGUuaG91c2Vob2xkLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICRodHRwLmdldCgnL2NoaWxkJykudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3Q2hpbGQgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaG91c2Vob2xkLmNoaWxkcmVuLnB1c2gobmV3Q2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICBhZGRDaGlsZChuZXdWYWwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYWRkT3RoZXJNZW1iZXIobmV3VmFsKSB7XG4gICAgICAgICAgICB3aGlsZSAobmV3VmFsID4gJHNjb3BlLmhvdXNlaG9sZC5vdGhlck1lbWJlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmhvdXNlaG9sZC5pbmNyZW1lbnRPdGhlck1lbWJlcnNDb3VudCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbmF2aWdhdGVUb05leHRTZWN0aW9uKCkge1xuICAgICAgICAgICAgSG91c2Vob2xkLnNhdmUoKTtcbiAgICAgICAgICAgIHZhciB1cGRhdGVkID0gU2VjdGlvbnMudXBkYXRlUmVxdWlyZWRTZWN0aW9ucygkc2NvcGUuaG91c2Vob2xkKTtcbiAgICAgICAgICAgIFNlY3Rpb25zLm5hdmlnYXRlVG9OZXh0KCRzdGF0ZS4kY3VycmVudC5zZWxmLm5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc3VibWl0QXBwbGljYXRpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUuaG91c2Vob2xkLmNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgICBuYXZpZ2F0ZVRvTmV4dFNlY3Rpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdhdGNoZXJzXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ2hvdXNlaG9sZC5jaGlsZENvdW50JywgYWRkQ2hpbGQpO1xuICAgICAgICAkc2NvcGUuJHdhdGNoKCdob3VzZWhvbGQub3RoZXJNZW1iZXJzQ291bnQnLCBhZGRPdGhlck1lbWJlcik7XG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdlYXRDaGFsbGVuZ2VBcHAnKVxuICAgICAgICAuY29udHJvbGxlcignc2lkZU5hdkNvbnRyb2xsZXInLCBzaWRlTmF2Q29udHJvbGxlcik7XG5cbiAgICBzaWRlTmF2Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJHN0YXRlJywgJ1NlY3Rpb25zJ107XG5cbiAgICBmdW5jdGlvbiBzaWRlTmF2Q29udHJvbGxlciAoJHNjb3BlLCAkc3RhdGUsIFNlY3Rpb25zKSB7XG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgICAgdmFyIHZtID0gJHNjb3BlO1xuXG4gICAgICAgIHZtLmN1cnJlbnRTdGF0ZSA9ICRzdGF0ZS4kY3VycmVudC5zZWxmLm5hbWU7XG4gICAgICAgIHZtLnNlY3Rpb25zID0gU2VjdGlvbnMuc2VjdGlvbnM7XG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdlYXRDaGFsbGVuZ2VBcHAnKVxuICAgICAgICAuZGlyZWN0aXZlKCdpbmNvbWVRdWVzdGlvbnMnLCBpbmNvbWVEaXJlY3RpdmUpO1xuXG4gICAgZnVuY3Rpb24gaW5jb21lRGlyZWN0aXZlKCkge1xuICAgICAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBtZW1iZXI6ICc9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9pbmNvbWUuaHRtbCcsXG4gICAgICAgICAgICBsaW5rOiBsaW5rXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgICB9XG5cbiAgICAvLyBsaW5rLiRpbmplY3QgPSBbJ3Njb3BlJ107XG5cbiAgICBmdW5jdGlvbiBsaW5rKHNjb3BlKSB7XG4gICAgICAgIHNjb3BlLmluY29tZVNvdXJjZXMgPSB7XG4gICAgICAgICAgICB3b3JrOiB7XG4gICAgICAgICAgICAgICAgdmF1bGU6J3dvcmsnLFxuICAgICAgICAgICAgICAgIGxhYmVsOiAnRWFybmluZ3MgZnJvbSB3b3JrJyxcbiAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2Jpd2Vla2x5JywgJzJ4IG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICBhbm5vdGF0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkOiAnQSBjaGlsZCBoYXMgYSBqb2Igd2hlcmUgdGhleSBlYXJuIHNhbGFyeSBvciB3YWdlcyAnLFxuICAgICAgICAgICAgICAgICAgICBvdGhlck1lbWJlcjogJycsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNvY2lhbFNlY3VyaXR5OiB7XG4gICAgICAgICAgICAgICAgdmF1bGU6J3NvY2lhbFNlY3VyaXR5JyxcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1NvY2lhbCBTZWN1cml0eSBEaXNhYmlsaXR5IFBheW1lbnRzIG9yIFN1cnZpdm9y4oCZcyBCZW5lZml0cyAnLFxuICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWydtb250aGx5J10sXG4gICAgICAgICAgICAgICAgYW5ub3RhdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZDogJ0EgY2hpbGQgaXMgYmxpbmQgb3IgZGlzYWJsZWQgYW5kIHJlY2VpdmVzIFNvY2lhbCBTZWN1cml0eSBiZW5lZml0cy4nLFxuICAgICAgICAgICAgICAgICAgICAvLyAnIEEgcGFyZW50IGlzIGRpc2FibGVkLCByZXRpcmVkLCBvciBkZWNlYXNlZCwgYW5kIHRoZWlyIGNoaWxkIHJlY2VpdmVzIHNvY2lhbCBzZWN1cml0eSBiZW5lZml0cycsXG4gICAgICAgICAgICAgICAgICAgIG90aGVyTWVtYmVyOiAnJyxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3RoZXJQZXJzb246IHtcbiAgICAgICAgICAgICAgICB2YXVsZTonb3RoZXJQZXJzb24nLFxuICAgICAgICAgICAgICAgIGxhYmVsOiAnSW5jb21lIGZyb20gcGVyc29ucyBvdXRzaWRlIHRoZSBob3VzZWhvbGQnLFxuICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnYml3ZWVrbHknLCAnMnggbW9udGgnLCAnbW9udGhseSddLFxuICAgICAgICAgICAgICAgIGFubm90YXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6ICdBIGZyaWVuZCBvciBleHRlbmRlZCBmYW1pbHkgbWVtYmVyIHJlZ3VsYXJseSBnaXZlcyBhIGNoaWxkIHNwZW5kaW5nIG1vbmV5JyxcbiAgICAgICAgICAgICAgICAgICAgb3RoZXJNZW1iZXI6ICcnLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvdGhlclNvdXJjZToge1xuICAgICAgICAgICAgICAgIHZhdWxlOidvdGhlclNvdXJjZScsXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdJbmNvbWUgZnJvbSBhbnkgb3RoZXIgc291cmNlJyxcbiAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2Jpd2Vla2x5JywgJzJ4IG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICBhbm5vdGF0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkOiAnQSBjaGlsZCByZWNlaXZlcyBpbmNvbWUgZnJvbSBhIHByaXZhdGUgcGVuc2lvbiBmdW5kLCBhbm51aXR5LCBvciB0cnVzdCcsXG4gICAgICAgICAgICAgICAgICAgIG90aGVyTWVtYmVyOiAnJyxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHNjb3BlLm1lbWJlci5pbmNvbWVTb3VyY2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgc2NvcGUubWVtYmVyLmluY29tZVNvdXJjZXMgPSBbXTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNjb3BlLmluY29tZVNvdXJjZXMpLmZvckVhY2goZnVuY3Rpb24oaW5jb21lU291cmNlKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUubWVtYmVyLmluY29tZVNvdXJjZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGluY29tZVNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IG51bGxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdlYXRDaGFsbGVuZ2VBcHAnKVxuICAgICAgICAuZGlyZWN0aXZlKCd5ZXNOb0lucHV0JywgeWVzTm9JbnB1dCk7XG5cbiAgICBmdW5jdGlvbiB5ZXNOb0lucHV0ICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6ICc9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy95ZXNuby5odG1sJyxcbiAgICAgICAgfTtcbiAgICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdlYXRDaGFsbGVuZ2VBcHAnKVxuICAgICAgICAuc2VydmljZSgnQXV0aCcsIEF1dGgpO1xuXG4gICAgQXV0aC4kaW5qZWN0ID0gWyckaHR0cCddO1xuXG4gICAgZnVuY3Rpb24gQXV0aCgkaHR0cCkge1xuXG4gICAgICAgIHZhciB1c2VyID0gZmFsc2U7XG5cbiAgICAgICAgZnVuY3Rpb24gc2lnbnVwKGVtYWlsLCBwYXNzd29yZCkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgZW1haWw6IGVtYWlsLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICRodHRwLnBvc3QoJy91c2VyL3NpZ251cCcsIGRhdGEpXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHVzZXIgPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyAuZXJyb3IoZnVuY3Rpb24oZGF0YSkge30pO1xuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBsb2dpbihlbWFpbCwgcGFzc3dvcmQpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbCxcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICRodHRwLnBvc3QoJy91c2VyL2xvZ2luJywgZGF0YSlcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdXNlciA9IHRydWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIC5lcnJvcihmdW5jdGlvbihkYXRhKSB7fSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBsb2dvdXQoKSB7XG4gICAgICAgICAgICAkaHR0cC5wb3N0KCcvdXNlci9sb2dvdXQnKS5zdWNjZXNzKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHVzZXIgPSBmYXNsZTtcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8vLy8vLy8vXG4gICAgICAgIHZhciBzZXJ2aWNlICA9IHtcbiAgICAgICAgICAgIGxvZ2luOiBsb2dpbixcbiAgICAgICAgICAgIGxvZ291dDogbG9nb3V0LFxuICAgICAgICAgICAgdXNlcjogdXNlclxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xuICAgIH1cblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAgIC5zZXJ2aWNlKCdIb3VzZWhvbGQnLCBob3VzZWhvbGRTZXJ2aWNlKTtcblxuICAgIGhvdXNlaG9sZFNlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnXTtcblxuICAgIGZ1bmN0aW9uIGhvdXNlaG9sZFNlcnZpY2UoJGh0dHApIHtcbiAgICAgICAgdGhpcy5nZXQgPSBnZXQ7XG4gICAgICAgIHRoaXMuc2F2ZSA9IHNhdmU7XG4gICAgICAgIHRoaXMuY2xlYXIgPSBjbGVhcjtcblxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIHZhciBob3VzZWhvbGQ7XG5cbiAgICAgICAgdmFyIFBlcnNvbiA9IHtcbiAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5jb21lU291cmNlQ291bnQgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5jb21lU291cmNlcyA9IFtdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBNb2RlbFxuICAgICAgICAvLyBUb2RvOiBjb25zaWRlciBtb3ZpbmcgdG8gc2VydmVyPz9cbiAgICAgICAgdmFyIEhvdXNlaG9sZCA9IHtcbiAgICAgICAgICAgIGNoaWxkQ291bnQ6IDAsXG4gICAgICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgICAgICAgICBvdGhlck1lbWJlcnNDb3VudDogMCxcbiAgICAgICAgICAgIG90aGVyTWVtYmVyczogW10sXG4gICAgICAgICAgICBjb21wbGV0ZWRBcHBsaWNhdGlvbjogZmFsc2VcbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICBpZiAoaG91c2Vob2xkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXNlaG9sZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhvdXNlaG9sZCA9IE9iamVjdC5jcmVhdGUoSG91c2Vob2xkKTtcbiAgICAgICAgICAgIHJldHVybiBob3VzZWhvbGQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzYXZlKCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9ob3VzZWhvbGQnLCBob3VzZWhvbGQpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBob3VzZWhvbGQgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjbGVhciAoKSB7XG4gICAgICAgICAgICB2YXIgaG91c2Vob2xkID0ge307XG4gICAgICAgICAgICByZXR1cm4gaG91c2Vob2xkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0J1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdlYXRDaGFsbGVuZ2VBcHAnKVxuICAgICAgICAuc2VydmljZSgnU2VjdGlvbnMnLCBzZWN0aW9uc1NlcnZpY2UpO1xuXG4gICAgc2VjdGlvbnNTZXJ2aWNlLiRpbmplY3QgPSBbJyRyb290U2NvcGUnICwnJHN0YXRlJ107XG5cbiAgICBmdW5jdGlvbiBzZWN0aW9uc1NlcnZpY2UoJHJvb3RTY29wZSwgJHN0YXRlKSB7XG4gICAgICAgIHZhciBwcmV2aW91c1N0YXRlLFxuICAgICAgICAgICAgY3VycmVudFN0YXRlO1xuXG4gICAgICAgIHZhciBzZWN0aW9ucyA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0NoaWxkcmVuJyxcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2NoaWxkcmVuJyxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiBcIkNoaWxkcmVuJ3MgSW5jb21lXCIsXG4gICAgICAgICAgICAgICAgc3RhdGU6ICdjaGlsZEluY29tZScsXG4gICAgICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0hvdXNlaG9sZCcsXG4gICAgICAgICAgICAgICAgc3RhdGU6ICdob3VzZWhvbGQnLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdTaWduIGFuZCBDb25maXJtJyxcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ3NpZ25hdHVyZScsXG4gICAgICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXTtcblxuICAgICAgICB2YXIgaW5kZXhlZFNlY3Rpb25zID0gXy5pbmRleEJ5KHNlY3Rpb25zLCAnc3RhdGUnKTtcblxuICAgICAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgICAgICAgIHNlY3Rpb25zOiBzZWN0aW9ucyxcbiAgICAgICAgICAgIGluZGV4ZWRTZWN0aW9uczogaW5kZXhlZFNlY3Rpb25zLFxuICAgICAgICAgICAgbmF2aWdhdGVUb05leHQ6IG5hdmlnYXRlVG9OZXh0LFxuICAgICAgICAgICAgdXBkYXRlUmVxdWlyZWRTZWN0aW9uczogdXBkYXRlUmVxdWlyZWRTZWN0aW9uc1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlUmVxdWlyZWRTZWN0aW9ucyhob3VzZWhvbGQpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50Q2hpbGQ7XG4gICAgICAgICAgICB2YXIgYXNzaXN0YW5jZVByb2dyYW1Ib3VzZWhvbGQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBzcGVjaWFsU3RhdHVzQ291bnQgPSAwO1xuICAgICAgICAgICAgdmFyIHNraXBNZWFuc1Rlc3QgPSBmYWxzZTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAgOyBpIDwgaG91c2Vob2xkLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudENoaWxkID0gaG91c2Vob2xkLmNoaWxkcmVuW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDaGlsZC5hc3Npc3RhbmNlUHJvZ3JhbSAmJiBjdXJyZW50Q2hpbGQuYXNzaXN0YW5jZVByb2dyYW0ucGFydGljaXBhbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzaXN0YW5jZVByb2dyYW1Ib3VzZWhvbGQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudENoaWxkLnNwZWNpYWxTdGF0dXMgJiYgY3VycmVudENoaWxkLnNwZWNpYWxTdGF0dXMuZm9zdGVyQ2hpbGQgfHxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudENoaWxkLnNwZWNpYWxTdGF0dXMuaG9tZWxlc3NNaWdyYW50UnVuYXdheSB8fFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q2hpbGQuc3BlY2lhbFN0YXR1cy5oZWFkU3RhcnRQYXJ0aWNpcGFudFxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBzcGVjaWFsU3RhdHVzQ291bnQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNraXBNZWFuc1Rlc3QgPSBhc3Npc3RhbmNlUHJvZ3JhbUhvdXNlaG9sZCB8fFxuICAgICAgICAgICAgICAgIChob3VzZWhvbGQuY2hpbGRyZW4ubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgICBob3VzZWhvbGQuY2hpbGRyZW4ubGVuZ3RoID09PSBzcGVjaWFsU3RhdHVzQ291bnQpO1xuXG4gICAgICAgICAgICBpZiAoc2tpcE1lYW5zVGVzdCkge1xuICAgICAgICAgICAgICAgIGluZGV4ZWRTZWN0aW9uc1snY2hpbGRJbmNvbWUnXS5yZXF1aXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGluZGV4ZWRTZWN0aW9uc1snaG91c2Vob2xkJ10ucmVxdWlyZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VjdGlvbnMuZm9yRWFjaChmdW5jdGlvbihzZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgc2VjdGlvbi5yZXF1aXJlZCA9IHRydWU7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZmluZE5leHQoY3VycmVudFN0YXRlKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gXy5maW5kSW5kZXgoc2VjdGlvbnMsIGZ1bmN0aW9uKHNlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VjdGlvbi5zdGF0ZSA9PT0gY3VycmVudFN0YXRlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIExvb2sgZm9yIHRoZSBuZXh0IHJlcXVpcmVkIHNlY3Rpb25cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBjdXJyZW50SW5kZXggKyAxOyBpIDwgc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VjdGlvbnNbaV0ucmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlY3Rpb25zW2ldLnN0YXRlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgdGhlcmUgYXJlIG5vIG1vcmUgcmVxdWlyZWQgc2VjdGlvbnMsIHdlJ3JlIGRvbmUuXG4gICAgICAgICAgICByZXR1cm4gJ2NvbmZpcm1hdGlvbic7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBuYXZpZ2F0ZVRvTmV4dChjdXJyZW50U3RhdGUpIHtcbiAgICAgICAgICAgIHZhciBuZXh0U2VjdGlvbiAgPSBmaW5kTmV4dChjdXJyZW50U3RhdGUpO1xuICAgICAgICAgICAgJHN0YXRlLmdvKG5leHRTZWN0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPSAwO1xuICAgICAgICB9KTtcblxuICAgICAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3VjY2VzcycsIGZ1bmN0aW9uKGV2LCB0bywgdG9QYXJhbXMsIGZyb20sIGZyb21QYXJhbXMpIHtcbiAgICAgICAgICAgIHByZXZpb3VzU3RhdGUgPSBmcm9tLm5hbWU7XG4gICAgICAgICAgICBjdXJyZW50U3RhdGUgPSB0by5uYW1lO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1ByZXZpb3VzIHN0YXRlOicgKyBwcmV2aW91c1N0YXRlKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDdXJyZW50IHN0YXRlOicgKyBjdXJyZW50U3RhdGUpO1xuICAgICAgICB9KTtcblxuICAgIH1cblxufSkoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
