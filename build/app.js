!function(){function e(e){e.theme("default").primaryPalette("brown").accentPalette("red")}function t(e,t){function n(e,t){t.otherwise("/"),e.state("main",{url:"/",templateUrl:"../views/main.html",controller:"mainController"}).state("styleguide",{url:"/styleguide",templateUrl:"../views/styleguide.html",controller:"mainController"})}n(e,t)}angular.module("eatChallengeApp",["ngMaterial","ui.router"]).config(t).config(e),e.$inject=["$mdThemingProvider"],t.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){function e(e,t,n){n.studentStatuses=["in school","home schooled","some other status"];var o={init:function(){this.incomeSourceCount=0,this.incomeSources=[]},incrementIncomeSources:function(){for(this.incomeSourceCount++;this.incomeSourceCount>this.incomeSources.length;)this.incomeSources.push({})}},i={init:function(){this.children=[],this.childCount=0,this.incrementChildCount(),this.otherMembers=[],this.otherMembersCount=0,this.incrementOtherMembersCount()},incrementChildCount:function(){for(this.childCount++;this.childCount>this.children.length;){var e=Object.create(o);e.init(),this.children.push(e)}},incrementOtherMembersCount:function(){for(this.otherMembersCount++;this.otherMembersCount>this.otherMembers.length;){var e=Object.create(o);e.init(),this.otherMembers.push(e)}}},r=Object.create(i);r.init(),n.household=r,n.showConfirm=function(t){var o=e.confirm().title("Would you like to delete this entry?").textContent("The data you have entered about this child will be removed").ariaLabel("delete child").targetEvent(t).ok("Yes").cancel("No");e.show(o).then(function(){n.status="You decided to get rid of your debt."},function(){n.status="You decided to keep your debt."})}}angular.module("eatChallengeApp").controller("mainController",e),e.$inject=["$mdDialog","$mdMedia","$scope"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbnRyb2xsZXJzL21haW4uanMiXSwibmFtZXMiOlsibWF0ZXJpYWxEZXNpZ25Db25maWciLCIkbWRUaGVtaW5nUHJvdmlkZXIiLCJ0aGVtZSIsInByaW1hcnlQYWxldHRlIiwiYWNjZW50UGFsZXR0ZSIsInJvdXRlckNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwicm91dGVyIiwib3RoZXJ3aXNlIiwic3RhdGUiLCJ1cmwiLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJGluamVjdCIsIm1haW5Db250cm9sbGVyIiwiJG1kRGlhbG9nIiwiJG1kTWVkaWEiLCIkc2NvcGUiLCJzdHVkZW50U3RhdHVzZXMiLCJQZXJzb24iLCJpbml0IiwidGhpcyIsImluY29tZVNvdXJjZUNvdW50IiwiaW5jb21lU291cmNlcyIsImluY3JlbWVudEluY29tZVNvdXJjZXMiLCJsZW5ndGgiLCJwdXNoIiwiSG91c2Vob2xkIiwiY2hpbGRyZW4iLCJjaGlsZENvdW50IiwiaW5jcmVtZW50Q2hpbGRDb3VudCIsIm90aGVyTWVtYmVycyIsIm90aGVyTWVtYmVyc0NvdW50IiwiaW5jcmVtZW50T3RoZXJNZW1iZXJzQ291bnQiLCJuZXdDaGlsZCIsIk9iamVjdCIsImNyZWF0ZSIsIm5ld01lbWJlciIsImhvdXNlaG9sZCIsInNob3dDb25maXJtIiwiZXYiLCJjb25maXJtIiwidGl0bGUiLCJ0ZXh0Q29udGVudCIsImFyaWFMYWJlbCIsInRhcmdldEV2ZW50Iiwib2siLCJjYW5jZWwiLCJzaG93IiwidGhlbiIsInN0YXR1cyJdLCJtYXBwaW5ncyI6IkNBQUEsV0FTQSxRQUFBQSxHQUFBQyxHQUNBQSxFQUFBQyxNQUFBLFdBQ0FDLGVBQUEsU0FDQUMsY0FBQSxPQWNBLFFBQUFDLEdBQUFDLEVBQUFDLEdBS0EsUUFBQUMsR0FBQUYsRUFBQUMsR0FDQUEsRUFBQUUsVUFBQSxLQUVBSCxFQUNBSSxNQUFBLFFBQ0FDLElBQUEsSUFDQUMsWUFBQSxxQkFDQUMsV0FBQSxtQkFFQUgsTUFBQSxjQUNBQyxJQUFBLGNBQ0FDLFlBQUEsMkJBQ0FDLFdBQUEsbUJBZkFMLEVBQUFGLEVBQUFDLEdBMUJBTyxRQUNBQyxPQUFBLG1CQUFBLGFBQUEsY0FDQUMsT0FBQVgsR0FDQVcsT0FBQWhCLEdBRUFBLEVBQUFpQixTQUFBLHNCQWlCQVosRUFBQVksU0FBQSxpQkFBQSx5QkN4QkEsV0FRQSxRQUFBQyxHQUFBQyxFQUFBQyxFQUFBQyxHQUNBQSxFQUFBQyxpQkFBQSxZQUFBLGdCQUFBLG9CQUVBLElBQUFDLElBQ0FDLEtBQUEsV0FDQUMsS0FBQUMsa0JBQUEsRUFDQUQsS0FBQUUsa0JBR0FDLHVCQUFBLFdBRUEsSUFEQUgsS0FBQUMsb0JBQ0FELEtBQUFDLGtCQUFBRCxLQUFBRSxjQUFBRSxRQUNBSixLQUFBRSxjQUFBRyxXQU1BQyxHQUNBUCxLQUFBLFdBQ0FDLEtBQUFPLFlBQ0FQLEtBQUFRLFdBQUEsRUFDQVIsS0FBQVMsc0JBRUFULEtBQUFVLGdCQUNBVixLQUFBVyxrQkFBQSxFQUNBWCxLQUFBWSw4QkFHQUgsb0JBQUEsV0FFQSxJQURBVCxLQUFBUSxhQUNBUixLQUFBUSxXQUFBUixLQUFBTyxTQUFBSCxRQUFBLENBQ0EsR0FBQVMsR0FBQUMsT0FBQUMsT0FBQWpCLEVBQ0FlLEdBQUFkLE9BQ0FDLEtBQUFPLFNBQUFGLEtBQUFRLEtBSUFELDJCQUFBLFdBRUEsSUFEQVosS0FBQVcsb0JBQ0FYLEtBQUFXLGtCQUFBWCxLQUFBVSxhQUFBTixRQUFBLENBQ0EsR0FBQVksR0FBQUYsT0FBQUMsT0FBQWpCLEVBQ0FrQixHQUFBakIsT0FDQUMsS0FBQVUsYUFBQUwsS0FBQVcsTUFPQUMsRUFBQUgsT0FBQUMsT0FBQVQsRUFDQVcsR0FBQWxCLE9BRUFILEVBQUFxQixVQUFBQSxFQUVBckIsRUFBQXNCLFlBQUEsU0FBQUMsR0FFQSxHQUFBQyxHQUFBMUIsRUFBQTBCLFVBQ0FDLE1BQUEsd0NBQ0FDLFlBQUEsOERBQ0FDLFVBQUEsZ0JBQ0FDLFlBQUFMLEdBQ0FNLEdBQUEsT0FDQUMsT0FBQSxLQUNBaEMsR0FBQWlDLEtBQUFQLEdBQUFRLEtBQUEsV0FDQWhDLEVBQUFpQyxPQUFBLHdDQUNBLFdBQ0FqQyxFQUFBaUMsT0FBQSxvQ0F6RUF4QyxRQUNBQyxPQUFBLG1CQUNBRixXQUFBLGlCQUFBSyxHQUVBQSxFQUFBRCxTQUFBLFlBQUEsV0FBQSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtcbiAgXG4gIGFuZ3VsYXJcbiAgLm1vZHVsZShcImVhdENoYWxsZW5nZUFwcFwiLFsnbmdNYXRlcmlhbCcsJ3VpLnJvdXRlciddKVxuICAuY29uZmlnKHJvdXRlckNvbmZpZylcbiAgLmNvbmZpZyhtYXRlcmlhbERlc2lnbkNvbmZpZyk7XG5cbiAgbWF0ZXJpYWxEZXNpZ25Db25maWcuJGluamVjdCA9IFsnJG1kVGhlbWluZ1Byb3ZpZGVyJ107XG5cbiAgZnVuY3Rpb24gbWF0ZXJpYWxEZXNpZ25Db25maWcoJG1kVGhlbWluZ1Byb3ZpZGVyKSB7XG4gICAgICAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdkZWZhdWx0JylcbiAgICAgICAgICAgICAgLnByaW1hcnlQYWxldHRlKCdicm93bicpXG4gICAgICAgICAgICAgIC5hY2NlbnRQYWxldHRlKCdyZWQnKTtcbiAgICAvLyAkbWRUaGVtaW5nUHJvdmlkZXIudGhlbWUoJ2RlZmF1bHQnKVxuXG4gICAgLy8gLmJhY2tncm91bmRQYWxldHRlKCdibHVlLWdyZXknKTtcbiAgICAvLyAuZGFyaygpO1xuICAgICAgLy8gLnByaW1hcnlQYWxldHRlKCdwaW5rJylcbiAgICAgIC8vIC5hY2NlbnRQYWxldHRlKCdvcmFuZ2UnKTtcbiAgICAgIC8vIHRoZW1lLndhcm5QYWxldHRlXG4gICAgICAvLyAuYmFja2dyb3VuZFBhbGV0dGVcbiAgfVxuXG4gIFxuICByb3V0ZXJDb25maWcuJGluamVjdCA9IFsnJHN0YXRlUHJvdmlkZXInLCAnJHVybFJvdXRlclByb3ZpZGVyJ107XG4gIFxuICBmdW5jdGlvbiByb3V0ZXJDb25maWcgKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpe1xuXG4gICAgcm91dGVyKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpO1xuXG4gICAgLy8vLy8vLy8vL1xuICAgIGZ1bmN0aW9uIHJvdXRlcigkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XG4gICAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvJyk7XG4gICAgICBcbiAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAuc3RhdGUoJ21haW4nLCB7XG4gICAgICAgIHVybDogJy8nLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL21haW4uaHRtbCcsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdtYWluQ29udHJvbGxlcidcbiAgICAgIH0pXG4gICAgICAuc3RhdGUoJ3N0eWxlZ3VpZGUnLCB7XG4gICAgICAgIHVybDogJy9zdHlsZWd1aWRlJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zdHlsZWd1aWRlLmh0bWwnLFxuICAgICAgICBjb250cm9sbGVyOiAnbWFpbkNvbnRyb2xsZXInXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuXG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKXtcblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ21haW5Db250cm9sbGVyJywgbWFpbkNvbnRyb2xsZXIpO1xuXG4gICAgbWFpbkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJG1kRGlhbG9nJywgJyRtZE1lZGlhJywgJyRzY29wZSddO1xuXG4gICAgZnVuY3Rpb24gbWFpbkNvbnRyb2xsZXIgKCRtZERpYWxvZywgJG1kTWVkaWEsICRzY29wZSkgeyAgICAgICAgICAgIFxuICAgICAgJHNjb3BlLnN0dWRlbnRTdGF0dXNlcyA9IFsnaW4gc2Nob29sJywgJ2hvbWUgc2Nob29sZWQnLCAnc29tZSBvdGhlciBzdGF0dXMnXTtcbiAgICAgIC8vIENsYXNzZXNcbiAgICAgIHZhciBQZXJzb24gPSB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRoaXMuaW5jb21lU291cmNlQ291bnQ9IDA7XG4gICAgICAgICAgdGhpcy5pbmNvbWVTb3VyY2VzPSBbXTtcbiAgICAgICAgfSxcblxuICAgICAgICBpbmNyZW1lbnRJbmNvbWVTb3VyY2VzOiBmdW5jdGlvbigpe1xuICAgICAgICAgIHRoaXMuaW5jb21lU291cmNlQ291bnQrKztcbiAgICAgICAgICB3aGlsZSh0aGlzLmluY29tZVNvdXJjZUNvdW50ID4gdGhpcy5pbmNvbWVTb3VyY2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5pbmNvbWVTb3VyY2VzLnB1c2goe30pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuXG4gICAgICB2YXIgSG91c2Vob2xkID0ge1xuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgICAgICAgIHRoaXMuY2hpbGRDb3VudCA9IDA7XG4gICAgICAgICAgdGhpcy5pbmNyZW1lbnRDaGlsZENvdW50KCk7XG5cbiAgICAgICAgICB0aGlzLm90aGVyTWVtYmVycyA9IFtdO1xuICAgICAgICAgIHRoaXMub3RoZXJNZW1iZXJzQ291bnQgPSAwO1xuICAgICAgICAgIHRoaXMuaW5jcmVtZW50T3RoZXJNZW1iZXJzQ291bnQoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpbmNyZW1lbnRDaGlsZENvdW50OiBmdW5jdGlvbigpe1xuICAgICAgICAgIHRoaXMuY2hpbGRDb3VudCsrO1xuICAgICAgICAgIHdoaWxlICh0aGlzLmNoaWxkQ291bnQgPiB0aGlzLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIG5ld0NoaWxkID0gT2JqZWN0LmNyZWF0ZShQZXJzb24pXG4gICAgICAgICAgICBuZXdDaGlsZC5pbml0KCk7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobmV3Q2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBpbmNyZW1lbnRPdGhlck1lbWJlcnNDb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGhpcy5vdGhlck1lbWJlcnNDb3VudCsrO1xuICAgICAgICAgIHdoaWxlICh0aGlzLm90aGVyTWVtYmVyc0NvdW50ID4gdGhpcy5vdGhlck1lbWJlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgbmV3TWVtYmVyID0gT2JqZWN0LmNyZWF0ZShQZXJzb24pO1xuICAgICAgICAgICAgbmV3TWVtYmVyLmluaXQoKTtcbiAgICAgICAgICAgIHRoaXMub3RoZXJNZW1iZXJzLnB1c2gobmV3TWVtYmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgfVxuXG5cbiAgICAgIHZhciBob3VzZWhvbGQgPSBPYmplY3QuY3JlYXRlKEhvdXNlaG9sZClcbiAgICAgIGhvdXNlaG9sZC5pbml0KCk7XG4gICAgICAvLyBUT0RPOiByZXBsYWNlIHNjb3BlIHdpdGggdm1cbiAgICAgICRzY29wZS5ob3VzZWhvbGQgPSBob3VzZWhvbGRcblxuICAgICAgJHNjb3BlLnNob3dDb25maXJtID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgLy8gQXBwZW5kaW5nIGRpYWxvZyB0byBkb2N1bWVudC5ib2R5IHRvIGNvdmVyIHNpZGVuYXYgaW4gZG9jcyBhcHBcbiAgICAgICAgdmFyIGNvbmZpcm0gPSAkbWREaWFsb2cuY29uZmlybSgpXG4gICAgICAgICAgLnRpdGxlKCdXb3VsZCB5b3UgbGlrZSB0byBkZWxldGUgdGhpcyBlbnRyeT8nKVxuICAgICAgICAgIC50ZXh0Q29udGVudCgnVGhlIGRhdGEgeW91IGhhdmUgZW50ZXJlZCBhYm91dCB0aGlzIGNoaWxkIHdpbGwgYmUgcmVtb3ZlZCcpXG4gICAgICAgICAgLmFyaWFMYWJlbCgnZGVsZXRlIGNoaWxkJylcbiAgICAgICAgICAudGFyZ2V0RXZlbnQoZXYpXG4gICAgICAgICAgLm9rKCdZZXMnKVxuICAgICAgICAgIC5jYW5jZWwoJ05vJyk7XG4gICAgICAkbWREaWFsb2cuc2hvdyhjb25maXJtKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgJHNjb3BlLnN0YXR1cyA9ICdZb3UgZGVjaWRlZCB0byBnZXQgcmlkIG9mIHlvdXIgZGVidC4nO1xuICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgJHNjb3BlLnN0YXR1cyA9ICdZb3UgZGVjaWRlZCB0byBrZWVwIHlvdXIgZGVidC4nO1xuICAgIH0pO1xuICB9O1xuXG4gICAgfTtcblxufSkoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
