!function(){function e(e){}function t(e,t){function n(e,t){t.otherwise("/"),e.state("start",{url:"/",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/start.html",controller:"mainController"}}}).state("children",{url:"/children",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/children.html",controller:"mainController"}}}).state("childIncome",{url:"/childIncome",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/childIncome.html",controller:"mainController"}}}).state("household",{url:"/household",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/household.html",controller:"mainController"}}}).state("signature",{url:"/signature",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/signature.html",controller:"mainController"}}}).state("confirmation",{url:"/confirmation",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/confirmation.html",controller:"mainController"}}}).state("export",{url:"/export",templateUrl:"../views/export.html",controller:"mainController"}).state("styleguide",{url:"/styleguide",templateUrl:"../views/styleguide.html",controller:"mainController"}).state("signup",{url:"/signup",templateUrl:"../views/signup.html"}).state("login",{url:"/login",templateUrl:"../views/login.html"})}n(e,t)}angular.module("eatChallengeApp",["ngMaterial","ui.router"]).config(t).config(e),e.$inject=["$mdThemingProvider"],t.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){function e(e,t,n,o,r,i,l,s){function c(){s.updateRequiredSections(o.household),s.navigateToNext(i.$current.self.name)}o.schoolDistrict="Oakland Unified School District",o.studentStatuses=["in school","home schooled","some other status"],o.household=l.get(),o.navigateToNextSection=c,o.$watch("household.childCount",function(e){for(;e>o.household.children.length;)o.household.incrementChildCount()}),o.$watch("household.otherMembersCount",function(e){for(;e>o.household.otherMembers.length;)o.household.incrementOtherMembersCount()}),r.$on("$stateChangeSuccess",function(){document.body.scrollTop=document.documentElement.scrollTop=0})}angular.module("eatChallengeApp").controller("mainController",e),e.$inject=["$interval","$mdDialog","$mdMedia","$rootScope","$scope","$state","Household","Sections"]}(),function(){function e(e,t){var n=e;n.sections=t.sections}angular.module("eatChallengeApp").controller("sideNavController",e),e.$inject=["$scope","Sections"]}(),function(){function e(e){function t(){return r?r:(r=Object.create(l),r.init(),r)}function n(){return e.post("/household",r)}function o(){var e={};return e}this.get=t,this.save=n,this.clear=o;var r,i={init:function(){this.incomeSourceCount=0,this.incomeSources=[]},incrementIncomeSources:function(){for(this.incomeSourceCount++;this.incomeSourceCount>this.incomeSources.length;)this.incomeSources.push({})}},l={init:function(){this.children=[],this.childCount=0,this.incrementChildCount(),this.otherMembers=[],this.otherMembersCount=0,this.incrementOtherMembersCount()},incrementChildCount:function(){for(this.childCount++;this.childCount>this.children.length;){var e=Object.create(i);e.init(),e.isChild=!0,e.specialStatus={},e.assistanceProgram={},this.children.push(e)}},incrementOtherMembersCount:function(){for(this.otherMembersCount++;this.otherMembersCount>this.otherMembers.length;){var e=Object.create(i);e.init(),e.isChild=!1,this.otherMembers.push(e)}}};return this}angular.module("eatChallengeApp").service("Household",e),e.$inject=["$http"]}(),function(){function e(e){function t(e){for(var t,n=!1,o=0,l=!0,s=0;s<e.children.length;s++){if(t=e.children[s],t.assistanceProgram.participant){n=!0;break}t.specialStatus.fosterChild&&o++}(n||e.children.length===o)&&(l=!1),console.log({shouldMeansTest:l}),l?r.forEach(function(e){e.required=!0}):(i.childIncome.required=!1,i.household.required=!1)}function n(e){for(var t=_.findIndex(r,function(t){return t.state===e}),n=t+1;n<r.length;n++)if(r[n].required)return r[n].state;return"confirmation"}function o(t){var o=n(t);e.go(o)}var r=[{label:"Children",state:"children",completed:!1,required:!0},{label:"Child Income",state:"childIncome",completed:!1,required:!0},{label:"Household",state:"household",completed:!1,required:!0},{label:"Sign and Confirm",state:"signature",completed:!1,required:!0}],i=_.indexBy(r,"state"),l={sections:r,indexedSections:i,navigateToNext:o,updateRequiredSections:t};return l}angular.module("eatChallengeApp").service("Sections",e),e.$inject=["$state"]}(),function(){function e(){var e={scope:{member:"="},restrict:"A",replace:!0,templateUrl:"../views/income.html",link:t};return e}function t(e){e.incomeSources={work:{vaule:"work",label:"Earnings from work",frequency:["weekly","biweekly","2x month","monthly"],annotation:{child:"A child has a job where they earn salary or wages ",otherMember:""}},socialSecurity:{vaule:"socialSecurity",label:"Social Security Disability Payments or Survivorâ€™s Benefits ",frequency:["monthly"],annotation:{child:"A child is blind or disabled and receives Social Security benefits.",otherMember:""}},otherPerson:{vaule:"otherPerson",label:"Income from persons outside the household",frequency:["weekly","biweekly","2x month","monthly"],annotation:{child:"A friend or extended family member regularly gives a child spending money",otherMember:""}},otherSource:{vaule:"otherSource",label:"Income from any other source",frequency:["weekly","biweekly","2x month","monthly"],annotation:{child:"A child receives income from a private pension fund, annuity, or trust",otherMember:""}}},0===e.member.incomeSources.length&&(e.member.incomeSources=[],Object.keys(e.incomeSources).forEach(function(t){e.member.incomeSources.push({type:t,amount:null,frequency:null})}))}angular.module("eatChallengeApp").directive("incomeQuestions",e)}(),function(){function e(){return{scope:{model:"="},restrict:"A",replace:!0,templateUrl:"../views/yesno.html"}}angular.module("eatChallengeApp").directive("yesNoInput",e)}();
//# sourceMappingURL=data:application/json;base64,
