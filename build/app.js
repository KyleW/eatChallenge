!function(){function e(e){}function t(e,t){function l(e,t){t.otherwise("/"),e.state("start",{url:"/",templateUrl:"../views/start.html",controller:"mainController"}).state("children",{url:"/children",templateUrl:"../views/children.html",controller:"mainController"}).state("childIncome",{url:"/childIncome",templateUrl:"../views/childIncome.html",controller:"mainController"}).state("household",{url:"/household",templateUrl:"../views/household.html",controller:"mainController"}).state("signature",{url:"/signature",templateUrl:"../views/signature.html",controller:"mainController"}).state("confirmation",{url:"/confirmation",templateUrl:"../views/confirmation.html",controller:"mainController"}).state("export",{url:"/export",templateUrl:"../views/export.html",controller:"mainController"}).state("styleguide",{url:"/styleguide",templateUrl:"../views/styleguide.html",controller:"mainController"}).state("signup",{url:"/signup",templateUrl:"../views/signup.html"}).state("login",{url:"/login",templateUrl:"../views/login.html"})}l(e,t)}angular.module("eatChallengeApp",["ngMaterial","ui.router"]).config(t).config(e),e.$inject=["$mdThemingProvider"],t.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){function e(e,t,l,o){l.schoolDistrict="Oakland Unified School District",l.studentStatuses=["in school","home schooled","some other status"],l.household=o.get(),l.$watch("household.childCount",function(e){for(;e>l.household.children.length;)l.household.incrementChildCount()})}angular.module("eatChallengeApp").controller("mainController",e),e.$inject=["$mdDialog","$mdMedia","$scope","Household"]}(),function(){function e(){return{scope:{member:"="},restrict:"A",replace:!0,templateUrl:"../views/income.html"}}angular.module("eatChallengeApp").directive("incomeQuestions",e)}(),function(){function e(){return{scope:{model:"="},restrict:"A",replace:!0,templateUrl:"../views/yesno.html"}}angular.module("eatChallengeApp").directive("yesNoInput",e)}(),function(){function e(e){this.getHousehold=getHousehold,this.clearHousehold=clearHousehold;return this}angular.module("eatChallengeApp").service("Household",e),e.$inject=["$http"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbnRyb2xsZXJzL21haW4uanMiLCJkaXJlY3RpdmVzL2luY29tZS5qcyIsImRpcmVjdGl2ZXMveWVzbm8uanMiLCJzZXJ2aWNlcy9ob3VzZWhvbGQuanMiXSwibmFtZXMiOlsibWF0ZXJpYWxEZXNpZ25UaGVtZXIiLCIkbWRUaGVtaW5nUHJvdmlkZXIiLCJyb3V0ZXJDb25maWciLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsInJvdXRlciIsIm90aGVyd2lzZSIsInN0YXRlIiwidXJsIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRpbmplY3QiLCJtYWluQ29udHJvbGxlciIsIiRtZERpYWxvZyIsIiRtZE1lZGlhIiwiJHNjb3BlIiwiSG91c2Vob2xkIiwic2Nob29sRGlzdHJpY3QiLCJzdHVkZW50U3RhdHVzZXMiLCJob3VzZWhvbGQiLCJnZXQiLCIkd2F0Y2giLCJuZXdWYWwiLCJjaGlsZHJlbiIsImxlbmd0aCIsImluY3JlbWVudENoaWxkQ291bnQiLCJpbmNvbWVEaXJlY3RpdmUiLCJzY29wZSIsIm1lbWJlciIsInJlc3RyaWN0IiwicmVwbGFjZSIsImRpcmVjdGl2ZSIsInllc05vSW5wdXQiLCJtb2RlbCIsImhvdXNlaG9sZFNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXRIb3VzZWhvbGQiLCJjbGVhckhvdXNlaG9sZCIsInNlcnZpY2UiXSwibWFwcGluZ3MiOiJDQUFBLFdBUUEsUUFBQUEsR0FBQUMsSUFpQkEsUUFBQUMsR0FBQUMsRUFBQUMsR0FLQSxRQUFBQyxHQUFBRixFQUFBQyxHQUNBQSxFQUFBRSxVQUFBLEtBRUFILEVBQ0FJLE1BQUEsU0FDQUMsSUFBQSxJQUNBQyxZQUFBLHNCQUNBQyxXQUFBLG1CQU9BSCxNQUFBLFlBQ0FDLElBQUEsWUFFQUMsWUFBQSx5QkFDQUMsV0FBQSxtQkFFQUgsTUFBQSxlQUNBQyxJQUFBLGVBRUFDLFlBQUEsNEJBQ0FDLFdBQUEsbUJBRUFILE1BQUEsYUFDQUMsSUFBQSxhQUVBQyxZQUFBLDBCQUNBQyxXQUFBLG1CQUVBSCxNQUFBLGFBQ0FDLElBQUEsYUFFQUMsWUFBQSwwQkFDQUMsV0FBQSxtQkFFQUgsTUFBQSxnQkFDQUMsSUFBQSxnQkFDQUMsWUFBQSw2QkFDQUMsV0FBQSxtQkFFQUgsTUFBQSxVQUNBQyxJQUFBLFVBQ0FDLFlBQUEsdUJBQ0FDLFdBQUEsbUJBRUFILE1BQUEsY0FDQUMsSUFBQSxjQUNBQyxZQUFBLDJCQUNBQyxXQUFBLG1CQUVBSCxNQUFBLFVBQ0FDLElBQUEsVUFDQUMsWUFBQSx5QkFHQUYsTUFBQSxTQUNBQyxJQUFBLFNBQ0FDLFlBQUEsd0JBL0RBSixFQUFBRixFQUFBQyxHQXpCQU8sUUFDQUMsT0FBQSxtQkFBQSxhQUFBLGNBQ0FDLE9BQUFYLEdBQ0FXLE9BQUFiLEdBRUFBLEVBQUFjLFNBQUEsc0JBZ0JBWixFQUFBWSxTQUFBLGlCQUFBLHlCQ3ZCQSxXQVFBLFFBQUFDLEdBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBRUFELEVBQUFFLGVBQUEsa0NBQ0FGLEVBQUFHLGlCQUFBLFlBQUEsZ0JBQUEscUJBQ0FILEVBQUFJLFVBQUFILEVBQUFJLE1BQ0FMLEVBQUFNLE9BQUEsdUJBQUEsU0FBQUMsR0FDQSxLQUFBQSxFQUFBUCxFQUFBSSxVQUFBSSxTQUFBQyxRQUNBVCxFQUFBSSxVQUFBTSx3QkFiQWpCLFFBQ0FDLE9BQUEsbUJBQ0FGLFdBQUEsaUJBQUFLLEdBRUFBLEVBQUFELFNBQUEsWUFBQSxXQUFBLFNBQUEsZ0JDTkEsV0FNQSxRQUFBZSxLQUNBLE9BQ0FDLE9BQ0FDLE9BQUEsS0FFQUMsU0FBQSxJQUNBQyxTQUFBLEVBQ0F4QixZQUFBLHdCQVhBRSxRQUNBQyxPQUFBLG1CQUNBc0IsVUFBQSxrQkFBQUwsTUNKQSxXQU1BLFFBQUFNLEtBQ0EsT0FDQUwsT0FDQU0sTUFBQSxLQUVBSixTQUFBLElBQ0FDLFNBQUEsRUFDQXhCLFlBQUEsdUJBWEFFLFFBQ0FDLE9BQUEsbUJBQ0FzQixVQUFBLGFBQUFDLE1DSkEsV0FPQSxRQUFBRSxHQUFBQyxHQUNBQyxLQUFBQyxhQUFBQSxhQUNBRCxLQUFBRSxlQUFBQSxjQWdGQSxPQUFBRixNQXhGQTVCLFFBQ0FDLE9BQUEsbUJBQ0E4QixRQUFBLFlBQUFMLEdBRUFBLEVBQUF2QixTQUFBIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpIHtcblxuICAgIGFuZ3VsYXJcbiAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcsWyduZ01hdGVyaWFsJywndWkucm91dGVyJ10pXG4gICAgICAuY29uZmlnKHJvdXRlckNvbmZpZylcbiAgICAgIC5jb25maWcobWF0ZXJpYWxEZXNpZ25UaGVtZXIpO1xuXG4gICAgbWF0ZXJpYWxEZXNpZ25UaGVtZXIuJGluamVjdCA9IFsnJG1kVGhlbWluZ1Byb3ZpZGVyJ107XG4gICAgZnVuY3Rpb24gbWF0ZXJpYWxEZXNpZ25UaGVtZXIoJG1kVGhlbWluZ1Byb3ZpZGVyKSB7XG4gICAgICAgIC8vICRtZFRoZW1pbmdQcm92aWRlci50aGVtZSgnbGlnaHQtYmx1ZScpO1xuICAgICAgICAvLyAucHJpbWFyeVBhbGV0dGUoJ3BpbmsnLCB7XG4gICAgICAgIC8vICAgJ2RlZmF1bHQnOiAnNDAwJywgLy8gYnkgZGVmYXVsdCB1c2Ugc2hhZGUgNDAwIGZyb20gdGhlIHBpbmsgcGFsZXR0ZSBmb3IgcHJpbWFyeSBpbnRlbnRpb25zXG4gICAgICAgIC8vICAgJ2h1ZS0xJzogJzEwMCcsIC8vIHVzZSBzaGFkZSAxMDAgZm9yIHRoZSA8Y29kZT5tZC1odWUtMTwvY29kZT4gY2xhc3NcbiAgICAgICAgLy8gICAnaHVlLTInOiAnNjAwJywgLy8gdXNlIHNoYWRlIDYwMCBmb3IgdGhlIDxjb2RlPm1kLWh1ZS0yPC9jb2RlPiBjbGFzc1xuICAgICAgICAvLyAgICdodWUtMyc6ICdBMTAwJyAvLyB1c2Ugc2hhZGUgQTEwMCBmb3IgdGhlIDxjb2RlPm1kLWh1ZS0zPC9jb2RlPiBjbGFzc1xuICAgICAgICAvLyB9KVxuICAgICAgICAvLyAvLyBJZiB5b3Ugc3BlY2lmeSBsZXNzIHRoYW4gYWxsIG9mIHRoZSBrZXlzLCBpdCB3aWxsIGluaGVyaXQgZnJvbSB0aGVcbiAgICAgICAgLy8gLy8gZGVmYXVsdCBzaGFkZXNcbiAgICAgICAgLy8gLmFjY2VudFBhbGV0dGUoJ3B1cnBsZScsIHtcbiAgICAgICAgLy8gICAnZGVmYXVsdCc6ICcyMDAnIC8vIHVzZSBzaGFkZSAyMDAgZm9yIGRlZmF1bHQsIGFuZCBrZWVwIGFsbCBvdGhlciBzaGFkZXMgdGhlIHNhbWVcbiAgICAgICAgLy8gfSk7XG4gICAgfVxuXG4gICAgcm91dGVyQ29uZmlnLiRpbmplY3QgPSBbJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlciddO1xuXG4gICAgZnVuY3Rpb24gcm91dGVyQ29uZmlnICgkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XG5cbiAgICAgICAgcm91dGVyKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpO1xuXG4gICAgICAgIC8vLy8vLy8vLy9cbiAgICAgICAgZnVuY3Rpb24gcm91dGVyKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcbiAgICAgICAgICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy8nKTtcblxuICAgICAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgIC5zdGF0ZSgnc3RhcnQnLCB7XG4gICAgICAgICAgdXJsOiAnLycsXG4gICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zdGFydC5odG1sJyxcbiAgICAgICAgICBjb250cm9sbGVyOiAnbWFpbkNvbnRyb2xsZXInXG4gICAgICB9KVxuICAgICAgLy8gLnN0YXRlKCdhcHBsaWNhdGlvbicse1xuICAgICAgLy8gICAgIHJlc29sdmU6IHtcbiAgICAgIC8vICAgICAgICAgaG91c2Vob2xkOiB7fTtcbiAgICAgIC8vICAgICB9XG4gICAgICAvLyB9KVxuICAgICAgLnN0YXRlKCdjaGlsZHJlbicsIHtcbiAgICAgICAgICB1cmw6ICcvY2hpbGRyZW4nLFxuICAgICAgICAgIC8vIHBhcmVudDogJ2FwcGxpY2F0aW9uJyxcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2NoaWxkcmVuLmh0bWwnLFxuICAgICAgICAgIGNvbnRyb2xsZXI6ICdtYWluQ29udHJvbGxlcidcbiAgICAgIH0pXG4gICAgICAuc3RhdGUoJ2NoaWxkSW5jb21lJywge1xuICAgICAgICAgIHVybDogJy9jaGlsZEluY29tZScsXG4gICAgICAgICAgLy8gcGFyZW50OiAnYXBwbGljYXRpb24nLFxuICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvY2hpbGRJbmNvbWUuaHRtbCcsXG4gICAgICAgICAgY29udHJvbGxlcjogJ21haW5Db250cm9sbGVyJ1xuICAgICAgfSlcbiAgICAgIC5zdGF0ZSgnaG91c2Vob2xkJywge1xuICAgICAgICAgIHVybDogJy9ob3VzZWhvbGQnLFxuICAgICAgICAgIC8vIHBhcmVudDogJ2FwcGxpY2F0aW9uJyxcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2hvdXNlaG9sZC5odG1sJyxcbiAgICAgICAgICBjb250cm9sbGVyOiAnbWFpbkNvbnRyb2xsZXInXG4gICAgICB9KVxuICAgICAgLnN0YXRlKCdzaWduYXR1cmUnLCB7XG4gICAgICAgICAgdXJsOiAnL3NpZ25hdHVyZScsXG4gICAgICAgICAgLy8gcGFyZW50OiAnYXBwbGljYXRpb24nLFxuICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lnbmF0dXJlLmh0bWwnLFxuICAgICAgICAgIGNvbnRyb2xsZXI6ICdtYWluQ29udHJvbGxlcidcbiAgICAgIH0pXG4gICAgICAuc3RhdGUoJ2NvbmZpcm1hdGlvbicsIHtcbiAgICAgICAgICB1cmw6ICcvY29uZmlybWF0aW9uJyxcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2NvbmZpcm1hdGlvbi5odG1sJyxcbiAgICAgICAgICBjb250cm9sbGVyOiAnbWFpbkNvbnRyb2xsZXInXG4gICAgICB9KVxuICAgICAgLnN0YXRlKCdleHBvcnQnLCB7XG4gICAgICAgICAgdXJsOiAnL2V4cG9ydCcsXG4gICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9leHBvcnQuaHRtbCcsXG4gICAgICAgICAgY29udHJvbGxlcjogJ21haW5Db250cm9sbGVyJ1xuICAgICAgfSlcbiAgICAgIC5zdGF0ZSgnc3R5bGVndWlkZScsIHtcbiAgICAgICAgICB1cmw6ICcvc3R5bGVndWlkZScsXG4gICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zdHlsZWd1aWRlLmh0bWwnLFxuICAgICAgICAgIGNvbnRyb2xsZXI6ICdtYWluQ29udHJvbGxlcidcbiAgICAgIH0pXG4gICAgICAuc3RhdGUoJ3NpZ251cCcsIHtcbiAgICAgICAgICB1cmw6ICcvc2lnbnVwJyxcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZ251cC5odG1sJyxcbiAgICAgICAgICAvLyBjb250cm9sbGVyOiAnbWFpbkNvbnRyb2xsZXInXG4gICAgICB9KVxuICAgICAgLnN0YXRlKCdsb2dpbicsIHtcbiAgICAgICAgICB1cmw6ICcvbG9naW4nLFxuICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvbG9naW4uaHRtbCcsXG4gICAgICAgICAgLy8gY29udHJvbGxlcjogJ21haW5Db250cm9sbGVyJ1xuICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdlYXRDaGFsbGVuZ2VBcHAnKVxuICAgIC5jb250cm9sbGVyKCdtYWluQ29udHJvbGxlcicsIG1haW5Db250cm9sbGVyKTtcblxubWFpbkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJG1kRGlhbG9nJywgJyRtZE1lZGlhJywgJyRzY29wZScsICdIb3VzZWhvbGQnXTtcblxuZnVuY3Rpb24gbWFpbkNvbnRyb2xsZXIgKCRtZERpYWxvZywgJG1kTWVkaWEsICRzY29wZSwgSG91c2Vob2xkKSB7XG4gICAgLy8gVE9ETzogcmVwbGFjZSBzY29wZSB3aXRoIHZtXG4gICAgJHNjb3BlLnNjaG9vbERpc3RyaWN0ID0gJ09ha2xhbmQgVW5pZmllZCBTY2hvb2wgRGlzdHJpY3QnO1xuICAgICRzY29wZS5zdHVkZW50U3RhdHVzZXMgPSBbJ2luIHNjaG9vbCcsICdob21lIHNjaG9vbGVkJywgJ3NvbWUgb3RoZXIgc3RhdHVzJ107XG4gICAgJHNjb3BlLmhvdXNlaG9sZCA9IEhvdXNlaG9sZC5nZXQoKTtcbiAgICAkc2NvcGUuJHdhdGNoKCdob3VzZWhvbGQuY2hpbGRDb3VudCcsIGZ1bmN0aW9uKG5ld1ZhbCkge1xuICAgICAgICB3aGlsZSAobmV3VmFsID4gJHNjb3BlLmhvdXNlaG9sZC5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICRzY29wZS5ob3VzZWhvbGQuaW5jcmVtZW50Q2hpbGRDb3VudCgpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAgIC5kaXJlY3RpdmUoJ2luY29tZVF1ZXN0aW9ucycsIGluY29tZURpcmVjdGl2ZSk7XG5cbiAgICBmdW5jdGlvbiBpbmNvbWVEaXJlY3RpdmUgKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBtZW1iZXI6ICc9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9pbmNvbWUuaHRtbCcsXG4gICAgICAgIH07XG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdlYXRDaGFsbGVuZ2VBcHAnKVxuICAgICAgICAuZGlyZWN0aXZlKCd5ZXNOb0lucHV0JywgeWVzTm9JbnB1dCk7XG5cbiAgICBmdW5jdGlvbiB5ZXNOb0lucHV0ICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6ICc9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy95ZXNuby5odG1sJyxcbiAgICAgICAgfTtcbiAgICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdlYXRDaGFsbGVuZ2VBcHAnKVxuICAgICAgICAuc2VydmljZSgnSG91c2Vob2xkJywgaG91c2Vob2xkU2VydmljZSk7XG5cbiAgICBob3VzZWhvbGRTZXJ2aWNlLiRpbmplY3QgPSBbJyRodHRwJ107XG5cbiAgICBmdW5jdGlvbiBob3VzZWhvbGRTZXJ2aWNlKCRodHRwKSB7XG4gICAgICAgIHRoaXMuZ2V0SG91c2Vob2xkID0gZ2V0SG91c2Vob2xkO1xuICAgICAgICB0aGlzLmNsZWFySG91c2Vob2xkID0gY2xlYXJIb3VzZWhvbGQ7XG5cblxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgdmFyIFBlcnNvbiA9IHtcbiAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5jb21lU291cmNlQ291bnQgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5jb21lU291cmNlcyA9IFtdO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaW5jcmVtZW50SW5jb21lU291cmNlczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmNvbWVTb3VyY2VDb3VudCsrO1xuICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLmluY29tZVNvdXJjZUNvdW50ID4gdGhpcy5pbmNvbWVTb3VyY2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluY29tZVNvdXJjZXMucHVzaCh7fSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBIb3VzZWhvbGQgPSB7XG4gICAgICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmNyZW1lbnRDaGlsZENvdW50KCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm90aGVyTWVtYmVycyA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMub3RoZXJNZW1iZXJzQ291bnQgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5jcmVtZW50T3RoZXJNZW1iZXJzQ291bnQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmNyZW1lbnRDaGlsZENvdW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkQ291bnQrKztcbiAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5jaGlsZENvdW50ID4gdGhpcy5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0NoaWxkID0gT2JqZWN0LmNyZWF0ZShQZXJzb24pO1xuICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZC5pbml0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChuZXdDaGlsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluY3JlbWVudE90aGVyTWVtYmVyc0NvdW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm90aGVyTWVtYmVyc0NvdW50Kys7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMub3RoZXJNZW1iZXJzQ291bnQgPiB0aGlzLm90aGVyTWVtYmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld01lbWJlciA9IE9iamVjdC5jcmVhdGUoUGVyc29uKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3TWVtYmVyLmluaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdGhlck1lbWJlcnMucHVzaChuZXdNZW1iZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBob3VzZWhvbGQ7XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgaWYgKGhvdXNlaG9sZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VzZWhvbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgLy9UT0RPOiBpZiB0aGVyZSdzIGEgdXNlcmlkLCByZXR1cm4gdGhlIGhvdXNlaG9sZCBhc3NvY2lhdGVkIHdpdGggaXRcbiAgICAgICAgICAgIGlmICh1c2VyaWQpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBhZGQgZXJyb3IgaGFuZGxpbmdcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJy9ob3VzZWhvbGQnKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhvdXNlaG9sZCA9IGRhdGE7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIG5ldyBob3VzZWhvbGQgaWYgb25lIGRvZXNuJ3QgZXhpc3RcbiAgICAgICAgICAgICAgICBob3VzZWhvbGQgPSBPYmplY3QuY3JlYXRlKEhvdXNlaG9sZCk7XG4gICAgICAgICAgICAgICAgaG91c2Vob2xkLmluaXQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGhvdXNlaG9sZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNhdmUoKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBoYW5kbGUgZXJyb3JzXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2hvdXNlaG9sZCcsIGhvdXNlaG9sZCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjbGVhciAoKSB7XG4gICAgICAgICAgICB2YXIgaG91c2Vob2xkID0ge307XG4gICAgICAgICAgICByZXR1cm4gaG91c2Vob2xkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG59KSgpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
