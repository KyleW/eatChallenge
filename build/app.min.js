!function(){"use strict";function e(e){function t(e){return function(t,l){throw e(t,l),t}}e.decorator("$exceptionHandler",t),t.$inject=["$delegate"]}function t(e){e.$on("$stateChangeSuccess",function(){document.body.scrollTop=document.documentElement.scrollTop=0}),e.$on("$stateChangeSuccess",function(t,l,r,o,n){e.previousState=o.name,e.currentState=l.name})}function l(e){e.theme("default").primaryPalette("teal").backgroundPalette("brown",{"default":"50"}).foregroundPalette[3]="rgba(0,0,0,0.67)"}function r(e,t){function l(e,t){t.otherwise("/"),e.state("start",{url:"/",views:{main:{templateUrl:"../views/start.html",controller:"mainController"}}}).state("children",{url:"/children",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/children.html",controller:"mainController"}}}).state("childIncome",{url:"/childIncome",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/childIncome.html",controller:"mainController"}}}).state("household",{url:"/household",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/household.html",controller:"mainController"}}}).state("householdIncome",{url:"/household-income",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/householdIncome.html",controller:"householdIncome"}}}).state("disclosure",{url:"/disclosure",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/disclosure.html",controller:"mainController"}}}).state("signature",{url:"/signature",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/signature.html",controller:"mainController"}}}).state("confirmation",{url:"/confirmation",views:{main:{templateUrl:"../views/confirmation.html",controller:"mainController"}}}).state("export",{url:"/export",views:{main:{templateUrl:"../views/export.html",controller:"exportController"}}}).state("signup",{url:"/signup",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/signup.html",controller:"signupController"}}}).state("login",{url:"/login",views:{main:{templateUrl:"../views/login.html",controller:"loginController"}}}).state("soFar",{url:"/so-far",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/soFar.html",controller:"soFarController"}}}).state("saveAndExit",{url:"/save-and-exit",views:{main:{templateUrl:"../views/save-and-exit.html",controller:"mainController"}}})}l(e,t)}angular.module("eatChallengeApp",["ngCookies","ngCsv","ngMaterial","ngSanitize","ui.router"]).config(r).config(l).config(e).run(t),e.$inject=["$provide"],t.$inject=["$rootScope"],l.$inject=["$mdThemingProvider"],r.$inject=["$stateProvider","$urlRouterProvider"]}();
!function(){"use strict";function t(t,e){t.get("/household/completed").then(function(t){e.completedApplications=t.data})}angular.module("eatChallengeApp").controller("exportController",t),t.$inject=["$http","$scope"]}();
!function(){"use strict";function e(e,o,t,n,a,r){function s(){n.save(),a.updateRequiredSections(),a.navigateToNext()}var l=o;l.navigateToNextSection=s;var c={categoryName:"work",headline:"Work Income",question:"earn money through work",sources:[{vaule:"work",checkboxLabel:"Work outside the home in a non-military capacity ",shortLabel:"Earnings from work",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"Please report gross income. This is the amount of income earned before any money is taken out for taxes or deductions. Include salary, wages, and cash bonuses."},{vaule:"selfEmployed",shortLabel:"Earnings from self employment",checkboxLabel:"Self-employed",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"For household members that are self-employed, report income from that work as a net amount. This is calculated by subtracting the total operating expenses of the business from its gross receipts or revenue."},{vaule:"onStrike",checkboxLabel:"On strike",shortLabel:"Strike Benefits",frequency:["weekly","every 2 weeks","2x month","monthly"]},{vaule:"military",checkboxLabel:"In the U.S. military",shortLabel:"Basic pay and cash bonuses",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"Please do not include combat pay, FSSA, or private housing allowances."}]},i={categoryName:"publicAssistance",headline:"Public Assistance",question:"receive any public assistance benefits",sources:[{vaule:"unemployment",checkboxLabel:"Unemployment benefits",shortLabel:"Unemployment benefits",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{vaule:"workersComp",checkboxLabel:"Worker’s compensation",shortLabel:"Worker’s compensation",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{vaule:"ssi",checkboxLabel:"Supplemental Security Income (SSI)",shortLabel:"Supplemental Security Income (SSI)",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{vaule:"cashAssistance",checkboxLabel:"Cash assistance from State or local government",shortLabel:"Cash assistance",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"This could include TANF or General Assistance money."},{vaule:"veteransBenefits",checkboxLabel:"Veteran’s benefits",shortLabel:"Veteran’s benefits",frequency:["weekly","every 2 weeks","twice a month","monthly"]}]},h={categoryName:"alimony",headline:"Alimony",question:"receive alimony payments",sources:[{vaule:"alimony",checkboxLabel:"alimony payments",shortLabel:"Alimony payment",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"If income is received from alimony, only court-ordered payments should be reported here. Informal but regular payments should be reported later as “other” income."}]},m={categoryName:"childSupport",headline:"Child Support",question:"receive any child support",sources:[{vaule:"childSupport",checkboxLabel:"any child support",shortLabel:"Child support payment",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"If income is received from child support, only court-ordered payments should be reported here. Informal but regular payments should be reported later as “other” income."}]},y={categoryName:"retirement",headline:"Pension and Retirement",question:"receive any pension or retirement money",sources:[{vaule:"socialSecurity",checkboxLabel:"Social Security",shortLabel:"Social security",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"Please include railroad retirement and black lung benefits"},{vaule:"privatePension",checkboxLabel:"Private pensions or disability",shortLabel:"Private pensions or disability",frequency:["weekly","every 2 weeks","twice a month","monthly"]}]},u={categoryName:"otherIncome",headline:"Other Income",question:"recieve money through any other source",sources:[{vaule:"trusts",checkboxLabel:"Income from trusts or estates",shortLabel:"Income from trusts or estates",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{vaule:"annuities",checkboxLabel:"Annuities",shortLabel:"Income from annuities",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{vaule:"investment",checkboxLabel:"Investment income",shortLabel:"Investment income",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{vaule:"interest",checkboxLabel:"Earned interest",shortLabel:"Earned interest",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{vaule:"rentalIncome",checkboxLabel:"Rental income",shortLabel:"Rental income",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{vaule:"otherCash",checkboxLabel:"Regular cash payments from outside household",shortLabel:"Regular cash payments from outside household",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"Such cash payments should include regular child support or alimony payments received by the household that are not court-ordered."}]};l.incomeCategories=[c,i,h,m,y,u]}angular.module("eatChallengeApp").controller("householdIncome",e),e.$inject=["$rootScope","$scope","$state","Household","Sections"]}();
!function(){"use strict";function e(e,n,o,t,s){function l(){function e(e){i.loginForm={},i.message="successfully logged in",n.go("soFar")}function t(e){i.message="Something went wrong. Please try again"}o.login(a.email,a.password).then(e,t)}var i=e,a={};i.submit=l,i.user=a}angular.module("eatChallengeApp").controller("loginController",e),e.$inject=["$scope","$state","auth","Household","Sections"]}();
!function(){"use strict";function e(e,o,t,n,h,i,c,l,u){function r(o){o>h.household.children.length&&e.get("/child").then(function(e){var t=e.data;h.household.children.push(t),r(o)})}function s(o){o>h.household.otherMembers.length&&e.get("/household-member").then(function(e){var t=e.data;t={},h.household.otherMembers.push(t),s(o)})}function d(e){return e.children.length>e.childCount&&(e.children=e.children.slice(0,e.childCount)),e}function a(e){return e.otherMembers.length>e.otherMembersCount&&e.otherMembers.slice(0,e.otherMembersCount),e}function m(){l.save(),u.updateRequiredSections(),u.goBack()}function g(){l.save(),u.updateRequiredSections(),u.navigateToNext()}function f(){d(h.household),a(h.household),h.household.completed=!0,g()}var p=i;p.schoolDistrict="Oakland Unified School District",p.goBack=m,p.navigateToNextSection=g,p.submitApplication=f,i.$watch("household.childCount",r),i.$watch("household.otherMembersCount",s)}angular.module("eatChallengeApp").controller("mainController",e),e.$inject=["$http","$interval","$mdDialog","$mdMedia","$rootScope","$scope","$state","Household","Sections"]}();
!function(){"use strict";function e(e,t,n){var c=e;c.currentState=t.$current.self.name,c.sections=n.sections}angular.module("eatChallengeApp").controller("sideNavController",e),e.$inject=["$scope","$state","Sections"]}();
!function(){"use strict";function e(e,n,o){function s(){function e(){t.disabled=!1,t.signupForm={},t.message="successfully created an account",o.goBack()}function s(e){console.log(e),t.error=!0,t.message="Something went wrong. Please try again",t.disabled=!1}t.error=!1,t.disabled=!0,n.signup(a.email,a.password).then(e,s)}console.log(n.getUserStatus());var t=e,a={};t.submit=s,t.user=a}angular.module("eatChallengeApp").controller("signupController",e),e.$inject=["$scope","auth","Sections"]}();
!function(){"use strict";function e(e,o,n,t,a,c,r,i){function l(){1===$rootScope.household.children.length&&(m.childrenLabel="child"),1===$rootScope.household.otherMembers.length&&(m.adultsLabel="adult")}function u(e){var o=0;return e.children.forEach(function(e){e.earnsIncome&&e.incomeSources.forEach(function(e){if(e.amount>0){var n=e.amount*f[e.frequency];o+=n}})}),Math.round(o)}function s(e){var o=0;return e.children.forEach(function(e){e.earnsIncome&&o++}),o}function h(){r.save(),i.updateRequiredSections(),i.goBack()}function d(){r.save(),i.updateRequiredSections(),i.navigateToNext()}var m=a;m.meansTest=i.meansTest,m.childrenLabel="children",m.adultsLabel="adults",m.incomeEarnersCount=s($rootScope.household),m.incomeEstimate=u($rootScope.household),m.goBack=h,m.navigateToNextSection=d,l();var f={weekly:52,"every 2 weeks":26,"twice a month":24,monthly:12}}angular.module("eatChallengeApp").controller("soFarController",e),e.$inject=["$http","$interval","$mdDialog","$mdMedia","$scope","$state","Household","Sections"]}();
!function(){"use strict";function t(t,e,o,u){function n(){u.logout(),r.loggedIn=u.getUserStatus(),o.go("saveAndExit")}var r=e;r.loggedIn=u.getUserStatus(),r.logout=n,r.user=t.user,t.$watch("user",function(){r.loggedIn=u.getUserStatus(),r.user=t.user})}angular.module("eatChallengeApp").controller("userControlsController",t),t.$inject=["$rootScope","$scope","$state","auth"]}();
!function(){"use strict";function e(e,n,t,r,u,o){function s(){var e=p();e&&(r.user=e,o.retrieveForUser(e))}function i(){return r.user?!0:!1}function c(){return r.user}function a(e,t){function r(e){g(e.data.user),o.save()}function u(e){console.log(e)}return n.post("/user/signup",{username:e,password:t}).then(r,u)}function l(e,t){function r(e){g(e.data.user),o.retrieveForUser(e.data.user)}function u(e,n){console.log(n),d()}var s={username:e,password:t};return n.post("/user/login",s).then(r,u)}function f(){function e(){d(),o.clear()}function t(){d(),o.clear()}return n.get("user/logout").then(e,t)}function g(n){return r.user=n,e.putObject("user",n)}function p(){return e.getObject("user")}function d(){return r.user=null,e.remove("user")}r.user=null,s();var v={};return v.isLoggedIn=i,v.getUserStatus=c,v.signup=a,v.login=l,v.logout=f,v.init=s,v}angular.module("eatChallengeApp").service("auth",e),e.$inject=["$cookies","$http","$q","$rootScope","$state","Household"]}();
!function(){function e(e,o){function t(t){e.get("/household/"+t._id).then(function(e){o.household=e.data})}function u(){return o.user&&(o.household.userId=o.user._id),e.post("/household",household)}function h(){o.household=Object.create(n)}var n={childCount:null,children:[],otherMembersCount:null,otherMembers:[],completedApplication:!1};o.household=o.household||Object.create(n);var r={};return r.retrieveForUser=t,r.save=u,r.clear=h,r}angular.module("eatChallengeApp").service("Household",e),e.$inject=["$http","$rootScope"]}();
!function(){"use strict";function e(e,r){function t(){var r=e.household;c.meansTest=!0;var t=a(r),o=n(r);return t||o?(c.meansTest=!1,l.childIncome.required=!1,l.household.required=!1,void(l.householdIncome.required=!1)):void u.forEach(function(e){e.required=!0})}function a(e){for(var r,t=0;t<e.children.length;t++)if(r=e.children[t],r.assistanceProgram&&r.assistanceProgram.participant)return!0;return!1}function n(e){var r,t=_.filter(e.children,function(e){return e.enrolled===!0});if(0===t.length)return!1;for(var a=0;a<t.length;a++)if(r=e.children[a],!r.specialStatus.fosterChild&&!r.specialStatus.homelessMigrantRunaway&&!r.specialStatus.headStartParticipant)return!1;return!0}function o(e){for(var r=_.findIndex(u,function(r){return r.state===e}),t=r+1;t<u.length;t++)if(u[t].required)return u[t].state;return"confirmation"}function s(){var t,a=e.currentState||r.$current.self.name,n=e.previousState||"start";t="soFar"===a?n?o(n):"start":l[a].showSummaryAfter?"soFar":o(a),r.go(t)}function i(){var t=e.previousState||"start";r.go(t)}var u=[{label:"Let’s Get Started! ",state:"start",completed:!1,required:!0,showSummaryAfter:!1},{label:"Children",state:"children",completed:!1,required:!0,showSummaryAfter:!0},{label:"Household Members",state:"household",completed:!1,required:!0,showSummaryAfter:!0},{label:"Children's Income",state:"childIncome",completed:!1,required:!0,showSummaryAfter:!0},{label:"Household Income",state:"householdIncome",completed:!1,required:!0,showSummaryAfter:!0},{label:"Disclosure",state:"disclosure",completed:!1,required:!0,showSummaryAfter:!1},{label:"Sign and Confirm",state:"signature",completed:!1,required:!0,showSummaryAfter:!1}],l=_.indexBy(u,"state"),c={meansTest:!0,sections:u,indexedSections:l,navigateToNext:s,goBack:i,updateRequiredSections:t};return c}angular.module("eatChallengeApp").service("Sections",e),e.$inject=["$rootScope","$state"]}();
!function(){"use strict";function e(){var e={scope:{member:"="},restrict:"A",replace:!0,templateUrl:"../views/income.html",link:o};return e}function o(e){e.incomeSources={work:{vaule:"work",label:"Earnings from work:",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"A child has a job where they earn salary or wages. Please report gross income. This is the amount of income earned before any money is taken out for taxes or deductions. Include salary, wages, and cash bonuses."},socialSecurity:{vaule:"socialSecurity",label:"Social Security Disability Payments or Survivor’s Benefits:",frequency:["monthly"]},otherPerson:{vaule:"otherPerson",label:"Income from persons outside the household:",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"A friend or extended family member regularly gives a child spending money."},otherSource:{vaule:"otherSource",label:"Income from any other source:",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"A child receives income from a private pension fund, annuity, or trust."}},0===e.member.incomeSources.length&&(e.member.incomeSources=[],Object.keys(e.incomeSources).forEach(function(o){e.member.incomeSources.push({type:o,amount:null,frequency:null})}))}angular.module("eatChallengeApp").directive("incomeQuestions",e)}();
!function(){"use strict";function e(){return{scope:{model:"="},restrict:"A",replace:!0,templateUrl:"../views/yesno.html"}}angular.module("eatChallengeApp").directive("yesNoInput",e)}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbnRyb2xsZXJzL2V4cG9ydC5qcyIsImNvbnRyb2xsZXJzL2hvdXNlaG9sZEluY29tZS5qcyIsImNvbnRyb2xsZXJzL2xvZ2luLmpzIiwiY29udHJvbGxlcnMvbWFpbi5qcyIsImNvbnRyb2xsZXJzL3NpZGVuYXYuanMiLCJjb250cm9sbGVycy9zaWdudXAuanMiLCJjb250cm9sbGVycy9zb0Zhci5qcyIsImNvbnRyb2xsZXJzL3VzZXJDb250cm9scy5qcyIsInNlcnZpY2VzL2F1dGguanMiLCJzZXJ2aWNlcy9ob3VzZWhvbGQuanMiLCJzZXJ2aWNlcy9zZWN0aW9ucy5qcyIsImRpcmVjdGl2ZXMvaW5jb21lLmpzIiwiZGlyZWN0aXZlcy95ZXNuby5qcyJdLCJuYW1lcyI6WyJlcnJvckRlY29yYXRvciIsIiRwcm92aWRlIiwiZGVjb3JhdGVFcnJvciIsIiRkZWxlZ2F0ZSIsImV4Y2VwdGlvbiIsImNhdXNlIiwiZGVjb3JhdG9yIiwiJGluamVjdCIsInNjcm9sbGVyIiwiJHJvb3RTY29wZSIsIiRvbiIsImRvY3VtZW50IiwiYm9keSIsInNjcm9sbFRvcCIsImRvY3VtZW50RWxlbWVudCIsImV2IiwidG8iLCJ0b1BhcmFtcyIsImZyb20iLCJmcm9tUGFyYW1zIiwicHJldmlvdXNTdGF0ZSIsIm5hbWUiLCJjdXJyZW50U3RhdGUiLCJtYXRlcmlhbERlc2lnblRoZW1lciIsIiRtZFRoZW1pbmdQcm92aWRlciIsInRoZW1lIiwicHJpbWFyeVBhbGV0dGUiLCJiYWNrZ3JvdW5kUGFsZXR0ZSIsImRlZmF1bHQiLCJmb3JlZ3JvdW5kUGFsZXR0ZSIsInJvdXRlckNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwicm91dGVyIiwib3RoZXJ3aXNlIiwic3RhdGUiLCJ1cmwiLCJ2aWV3cyIsIm1haW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJ1c2VyLWNvbnRyb2xzIiwiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsInJ1biIsImV4cG9ydENvbnRyb2xsZXIiLCIkaHR0cCIsIiRzY29wZSIsImdldCIsInRoZW4iLCJyZXNwb25zZSIsImNvbXBsZXRlZEFwcGxpY2F0aW9ucyIsImRhdGEiLCJob3VzZWhvbGRJbmNvbWUiLCIkc3RhdGUiLCJIb3VzZWhvbGQiLCJTZWN0aW9ucyIsIkhvdXNlaG9sZEluY29tZSIsIm5hdmlnYXRlVG9OZXh0U2VjdGlvbiIsInNhdmUiLCJ1cGRhdGVSZXF1aXJlZFNlY3Rpb25zIiwibmF2aWdhdGVUb05leHQiLCJ2bSIsIndvcmsiLCJjYXRlZ29yeU5hbWUiLCJoZWFkbGluZSIsInF1ZXN0aW9uIiwic291cmNlcyIsInZhdWxlIiwiY2hlY2tib3hMYWJlbCIsInNob3J0TGFiZWwiLCJmcmVxdWVuY3kiLCJhbm5vdGF0aW9uIiwicHVibGljQXNzaXN0YW5jZSIsImFsaW1vbnkiLCJjaGlsZFN1cHBvcnQiLCJyZXRpcmVtZW50Iiwib3RoZXJJbmNvbWUiLCJpbmNvbWVDYXRlZ29yaWVzIiwibG9naW5Db250cm9sbGVyIiwiYXV0aCIsInN1Ym1pdCIsInN1Y2Nlc3NIYW5kbGVyIiwibG9naW5Gb3JtIiwibWVzc2FnZSIsImdvIiwiZXJyb3JIYW5kbGVyIiwibG9naW4iLCJ1c2VyIiwiZW1haWwiLCJwYXNzd29yZCIsIm1haW5Db250cm9sbGVyIiwiJGludGVydmFsIiwiJG1kRGlhbG9nIiwiJG1kTWVkaWEiLCJhZGRDaGlsZCIsIm5ld1ZhbCIsImhvdXNlaG9sZCIsImNoaWxkcmVuIiwibGVuZ3RoIiwibmV3Q2hpbGQiLCJwdXNoIiwiYWRkT3RoZXJNZW1iZXIiLCJvdGhlck1lbWJlcnMiLCJuZXdIb3VzZWhvbGRNZW1iZXIiLCJ0cmltQ2hpbGRyZW4iLCJjaGlsZENvdW50Iiwic2xpY2UiLCJ0cmltT3RoZXJNZW1iZXJzIiwib3RoZXJNZW1iZXJzQ291bnQiLCJnb0JhY2siLCJzdWJtaXRBcHBsaWNhdGlvbiIsImNvbXBsZXRlZCIsInNjaG9vbERpc3RyaWN0IiwiJHdhdGNoIiwic2lkZU5hdkNvbnRyb2xsZXIiLCIkY3VycmVudCIsInNlbGYiLCJzZWN0aW9ucyIsInNpZ251cENvbnRyb2xsZXIiLCJkaXNhYmxlZCIsInNpZ251cEZvcm0iLCJlcnIiLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJzaWdudXAiLCJnZXRVc2VyU3RhdHVzIiwic29GYXJDb250cm9sbGVyIiwiaW5pdCIsImNoaWxkcmVuTGFiZWwiLCJhZHVsdHNMYWJlbCIsImVzdGltYXRlSW5jb21lIiwiZXN0aW1hdGVkQW5udWFsSW5jb21lIiwiZm9yRWFjaCIsImNoaWxkIiwiZWFybnNJbmNvbWUiLCJpbmNvbWVTb3VyY2VzIiwiaW5jb21lU291cmNlIiwiYW1vdW50IiwibmV3SW5jb21lIiwiZnJlcXVlbmN5TXVsaXRwbGllciIsIk1hdGgiLCJyb3VuZCIsImNvdW50RWFybmVycyIsImVhcm5lcnNDb3VudCIsIm1lYW5zVGVzdCIsImluY29tZUVhcm5lcnNDb3VudCIsImluY29tZUVzdGltYXRlIiwid2Vla2x5IiwiZXZlcnkgMiB3ZWVrcyIsInR3aWNlIGEgbW9udGgiLCJtb250aGx5IiwidXNlckNvbnRyb2xzQ29udHJvbGxlciIsImxvZ291dCIsImxvZ2dlZEluIiwiQXV0aFNlcnZpY2UiLCIkY29va2llcyIsIiRxIiwiZ2V0Q3JlZGVudGlhbHMiLCJyZXRyaWV2ZUZvclVzZXIiLCJpc0xvZ2dlZEluIiwic2V0Q3JlZGVudGlhbHMiLCJwb3N0IiwidXNlcm5hbWUiLCJjbGVhckNyZWRlbnRpYWxzIiwiY2xlYXIiLCJwdXRPYmplY3QiLCJnZXRPYmplY3QiLCJyZW1vdmUiLCJzZXJ2aWNlIiwiaG91c2Vob2xkU2VydmljZSIsIl9pZCIsInVzZXJJZCIsIk9iamVjdCIsImNyZWF0ZSIsImNvbXBsZXRlZEFwcGxpY2F0aW9uIiwic2VjdGlvbnNTZXJ2aWNlIiwiYXNzaXN0YW5jZVByb2dyYW1Ib3VzZWhvbGQiLCJpc0Fzc2lzdGFuY2VIb3VzZWhvbGQiLCJjYXRlZ29yaWNhbGx5UXVhbGlmaWVkIiwiYWxsU3R1ZGVudHNDYXRlZ29yaWNhbGx5UXVhbGlmeSIsImluZGV4ZWRTZWN0aW9ucyIsInJlcXVpcmVkIiwic2VjdGlvbiIsImN1cnJlbnRDaGlsZCIsImkiLCJhc3Npc3RhbmNlUHJvZ3JhbSIsInBhcnRpY2lwYW50IiwiZW5yb2xsZWRDaGlsZHJlbiIsIl8iLCJmaWx0ZXIiLCJjIiwiZW5yb2xsZWQiLCJzcGVjaWFsU3RhdHVzIiwiZm9zdGVyQ2hpbGQiLCJob21lbGVzc01pZ3JhbnRSdW5hd2F5IiwiaGVhZFN0YXJ0UGFydGljaXBhbnQiLCJmaW5kTmV4dCIsImN1cnJlbnRJbmRleCIsImZpbmRJbmRleCIsIm5leHRTZWN0aW9uIiwic2hvd1N1bW1hcnlBZnRlciIsImxhYmVsIiwiaW5kZXhCeSIsImluY29tZURpcmVjdGl2ZSIsImRpcmVjdGl2ZSIsInNjb3BlIiwibWVtYmVyIiwicmVzdHJpY3QiLCJyZXBsYWNlIiwibGluayIsInNvY2lhbFNlY3VyaXR5Iiwib3RoZXJQZXJzb24iLCJvdGhlclNvdXJjZSIsImtleXMiLCJ0eXBlIiwieWVzTm9JbnB1dCIsIm1vZGVsIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUNJLFlBWUEsU0FBU0EsR0FBZUMsR0FHcEIsUUFBU0MsR0FBY0MsR0FDbkIsTUFBTyxVQUFTQyxFQUFXQyxHQUV2QixLQURBRixHQUFVQyxFQUFXQyxHQUNmRCxHQUxkSCxFQUFTSyxVQUFVLG9CQUFxQkosR0FDeENBLEVBQWNLLFNBQVcsYUFXN0IsUUFBU0MsR0FBU0MsR0FFZEEsRUFBV0MsSUFBSSxzQkFBdUIsV0FDbENDLFNBQVNDLEtBQUtDLFVBQVlGLFNBQVNHLGdCQUFnQkQsVUFBWSxJQUluRUosRUFBV0MsSUFBSSxzQkFBdUIsU0FBU0ssRUFBSUMsRUFBSUMsRUFBVUMsRUFBTUMsR0FDbkVWLEVBQVdXLGNBQWdCRixFQUFLRyxLQUNoQ1osRUFBV2EsYUFBZU4sRUFBR0ssT0FNckMsUUFBU0UsR0FBcUJDLEdBQzFCQSxFQUFtQkMsTUFBTSxXQUFXQyxlQUFlLFFBQ2hDQyxrQkFBa0IsU0FB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QVksc05BRWhCNEksZ0JBQ0loSixNQUFNLGlCQUNOdUksTUFBTyw4REFDUHBJLFdBQVksWUFLaEI4SSxhQUNJakosTUFBTSxjQUNOdUksTUFBTyw2Q0FDUHBJLFdBQVksU0FBVSxnQkFBaUIsZ0JBQWlCLFdBQ3hEQyxXQUFZLDhFQUVoQjhJLGFBQ0lsSixNQUFNLGNBQ051SSxNQUFPLGdDQUNQcEksV0FBWSxTQUFVLGdCQUFpQixnQkFBaUIsV0FDeERDLFdBQVksNEVBSXNCLElBQXRDdUksRUFBTUMsT0FBT3ZFLGNBQWN0QyxTQUMzQjRHLEVBQU1DLE9BQU92RSxpQkFDYnFDLE9BQU95QyxLQUFLUixFQUFNdEUsZUFBZUgsUUFBUSxTQUFTSSxHQUM5Q3FFLEVBQU1DLE9BQU92RSxjQUFjcEMsTUFDdkJtSCxLQUFNOUUsRUFDTkMsT0FBUSxLQUNScEUsVUFBVyxVQXhEM0I5QixRQUNLQyxPQUFPLG1CQUNQb0ssVUFBVSxrQkFBbUJEO0NDTHRDLFdBQ0ksWUFNQSxTQUFTWSxLQUNMLE9BQ0lWLE9BQ0lXLE1BQU8sS0FFWFQsU0FBVSxJQUNWQyxTQUFTLEVBQ1Q1SyxZQUFhLHVCQVhyQkcsUUFDS0MsT0FBTyxtQkFDUG9LLFVBQVUsYUFBY1ciLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnZWF0Q2hhbGxlbmdlQXBwJyxbJ25nQ29va2llcycsICduZ0NzdicsJ25nTWF0ZXJpYWwnLCAnbmdTYW5pdGl6ZScsICd1aS5yb3V0ZXInXSlcbiAgICAuY29uZmlnKHJvdXRlckNvbmZpZylcbiAgICAuY29uZmlnKG1hdGVyaWFsRGVzaWduVGhlbWVyKVxuICAgIC5jb25maWcoZXJyb3JEZWNvcmF0b3IpXG4gICAgLnJ1bihzY3JvbGxlcik7XG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIC8vU2hvdyBzb3VyY2UgbWFwcyBpbiBlcnJvcnNcbiAgICBlcnJvckRlY29yYXRvci4kaW5qZWN0ID0gWyckcHJvdmlkZSddO1xuICAgIGZ1bmN0aW9uIGVycm9yRGVjb3JhdG9yKCRwcm92aWRlKSB7XG4gICAgICAgICRwcm92aWRlLmRlY29yYXRvcignJGV4Y2VwdGlvbkhhbmRsZXInLCBkZWNvcmF0ZUVycm9yKTtcbiAgICAgICAgZGVjb3JhdGVFcnJvci4kaW5qZWN0ID0gWyckZGVsZWdhdGUnXTtcbiAgICAgICAgZnVuY3Rpb24gZGVjb3JhdGVFcnJvcigkZGVsZWdhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihleGNlcHRpb24sIGNhdXNlKSB7XG4gICAgICAgICAgICAgICAgJGRlbGVnYXRlKGV4Y2VwdGlvbiwgY2F1c2UpO1xuICAgICAgICAgICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL1JvdXRpbmcgZW5oYW5jZW1lbnRzXG4gICAgc2Nyb2xsZXIuJGluamVjdCA9IFsnJHJvb3RTY29wZSddO1xuICAgIGZ1bmN0aW9uIHNjcm9sbGVyKCRyb290U2NvcGUpIHtcbiAgICAgICAgLy8gc2Nyb2xsIHRvIHRoZSB0b3Agb24gcGFnZSB0cmFuc2l0aW9uXG4gICAgICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPSAwO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBLZWVwIHRyYWNrIG9mIGhpc3RvcnlcbiAgICAgICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbihldiwgdG8sIHRvUGFyYW1zLCBmcm9tLCBmcm9tUGFyYW1zKSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLnByZXZpb3VzU3RhdGUgPSBmcm9tLm5hbWU7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLmN1cnJlbnRTdGF0ZSA9IHRvLm5hbWU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vQ29sb3IgdGhlbWVzIGZvciBidXR0b25zXG4gICAgbWF0ZXJpYWxEZXNpZ25UaGVtZXIuJGluamVjdCA9IFsnJG1kVGhlbWluZ1Byb3ZpZGVyJ107XG4gICAgZnVuY3Rpb24gbWF0ZXJpYWxEZXNpZ25UaGVtZXIoJG1kVGhlbWluZ1Byb3ZpZGVyKSB7XG4gICAgICAgICRtZFRoZW1pbmdQcm92aWRlci50aGVtZSgnZGVmYXVsdCcpLnByaW1hcnlQYWxldHRlKCd0ZWFsJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLmJhY2tncm91bmRQYWxldHRlKCdicm93bicsIHsnZGVmYXVsdCc6ICc1MCd9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAuZm9yZWdyb3VuZFBhbGV0dGVbM10gPSAncmdiYSgwLDAsMCwwLjY3KSc7XG4gICAgfVxuXG4gICAgLy8gVUkgcm91dGVyXG4gICAgcm91dGVyQ29uZmlnLiRpbmplY3QgPSBbJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlciddO1xuICAgIGZ1bmN0aW9uIHJvdXRlckNvbmZpZyAoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xuXG4gICAgICAgIHJvdXRlcigkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKTtcbiAgICAgICAgLy8vLy8vLy8vL1xuXG4gICAgICAgIGZ1bmN0aW9uIHJvdXRlcigkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XG4gICAgICAgICAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvJyk7XG5cbiAgICAgICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ3N0YXJ0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy8nLFxuICAgICAgICAgICAgICAgIHZpZXdzOntcbiAgICAgICAgICAgICAgICAgICAgLy8gJ3VzZXItY29udHJvbHMnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3VzZXItY29udHJvbHMuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb250cm9sbGVyOiAndXNlckNvbnRyb2xzQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gJ3NpZGUtbmF2Jzoge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zaWRlTmF2Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29udHJvbGxlcjogJ3NpZGVOYXZDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgICAgICAgICAnbWFpbic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc3RhcnQuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnbWFpbkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjaGlsZHJlbicsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvY2hpbGRyZW4nLFxuICAgICAgICAgICAgICAgIHZpZXdzOntcbiAgICAgICAgICAgICAgICAgICAgJ3VzZXItY29udHJvbHMnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3VzZXItY29udHJvbHMuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAndXNlckNvbnRyb2xzQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICdzaWRlLW5hdic6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lkZU5hdi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnRyb2xsZXI6ICdzaWRlTmF2Q29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvY2hpbGRyZW4uaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdtYWluQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY2hpbGRJbmNvbWUnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2NoaWxkSW5jb21lJyxcbiAgICAgICAgICAgICAgICB2aWV3czp7XG4gICAgICAgICAgICAgICAgICAgICd1c2VyLWNvbnRyb2xzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy91c2VyLWNvbnRyb2xzLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3VzZXJDb250cm9sc0NvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZGVOYXYuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb250cm9sbGVyOiAnc2lkZU5hdkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2NoaWxkSW5jb21lLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnbWFpbkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2hvdXNlaG9sZCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvaG91c2Vob2xkJyxcbiAgICAgICAgICAgICAgICB2aWV3czp7XG4gICAgICAgICAgICAgICAgICAgICd1c2VyLWNvbnRyb2xzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy91c2VyLWNvbnRyb2xzLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3VzZXJDb250cm9sc0NvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICdzaWRlLW5hdic6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lkZU5hdi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnRyb2xsZXI6ICdzaWRlTmF2Q29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2hvdXNlaG9sZC5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdtYWluQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2hvdXNlaG9sZEluY29tZScsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvaG91c2Vob2xkLWluY29tZScsXG4gICAgICAgICAgICAgICAgdmlld3M6e1xuICAgICAgICAgICAgICAgICAgICAndXNlci1jb250cm9scyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvdXNlci1jb250cm9scy5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICd1c2VyQ29udHJvbHNDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAvLyAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZGVOYXYuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb250cm9sbGVyOiAnc2lkZU5hdkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9ob3VzZWhvbGRJbmNvbWUuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnaG91c2Vob2xkSW5jb21lJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnZGlzY2xvc3VyZScsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvZGlzY2xvc3VyZScsXG4gICAgICAgICAgICAgICAgdmlld3M6e1xuICAgICAgICAgICAgICAgICAgICAndXNlci1jb250cm9scyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvdXNlci1jb250cm9scy5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICd1c2VyQ29udHJvbHNDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAvLyAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZGVOYXYuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb250cm9sbGVyOiAnc2lkZU5hdkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9kaXNjbG9zdXJlLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ21haW5Db250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnc2lnbmF0dXJlJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9zaWduYXR1cmUnLFxuICAgICAgICAgICAgICAgIHZpZXdzOntcbiAgICAgICAgICAgICAgICAgICAgJ3VzZXItY29udHJvbHMnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3VzZXItY29udHJvbHMuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAndXNlckNvbnRyb2xzQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICdzaWRlLW5hdic6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lkZU5hdi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnRyb2xsZXI6ICdzaWRlTmF2Q29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lnbmF0dXJlLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnbWFpbkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbmZpcm1hdGlvbicsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvY29uZmlybWF0aW9uJyxcbiAgICAgICAgICAgICAgICB2aWV3czp7XG4gICAgICAgICAgICAgICAgICAgIC8vICd1c2VyLWNvbnRyb2xzJzoge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy91c2VyLWNvbnRyb2xzLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29udHJvbGxlcjogJ3VzZXJDb250cm9sc0NvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZGVOYXYuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb250cm9sbGVyOiAnc2lkZU5hdkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2NvbmZpcm1hdGlvbi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ21haW5Db250cm9sbGVyJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdleHBvcnQnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2V4cG9ydCcsXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gJ3VzZXItY29udHJvbHMnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3VzZXItY29udHJvbHMuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb250cm9sbGVyOiAndXNlckNvbnRyb2xzQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gJ3NpZGUtbmF2Jzoge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zaWRlTmF2Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29udHJvbGxlcjogJ3NpZGVOYXZDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgICAgICAgICAnbWFpbic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvZXhwb3J0Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2V4cG9ydENvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdzaWdudXAnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL3NpZ251cCcsXG4gICAgICAgICAgICAgICAgdmlld3M6e1xuICAgICAgICAgICAgICAgICAgICAndXNlci1jb250cm9scyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvdXNlci1jb250cm9scy5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICd1c2VyQ29udHJvbHNDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAvLyAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZGVOYXYuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb250cm9sbGVyOiAnc2lkZU5hdkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zaWdudXAuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc2lnbnVwQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnbG9naW4nLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2xvZ2luJyxcbiAgICAgICAgICAgICAgICB2aWV3czp7XG4gICAgICAgICAgICAgICAgICAgIC8vICd1c2VyLWNvbnRyb2xzJzoge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy91c2VyLWNvbnRyb2xzLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29udHJvbGxlcjogJ3VzZXJDb250cm9sc0NvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICdzaWRlLW5hdic6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lkZU5hdi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnRyb2xsZXI6ICdzaWRlTmF2Q29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2xvZ2luLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2xvZ2luQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ3NvRmFyJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9zby1mYXInLFxuICAgICAgICAgICAgICAgIHZpZXdzOntcbiAgICAgICAgICAgICAgICAgICAgJ3VzZXItY29udHJvbHMnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3VzZXItY29udHJvbHMuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAndXNlckNvbnRyb2xzQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICdzaWRlLW5hdic6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lkZU5hdi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnRyb2xsZXI6ICdzaWRlTmF2Q29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NvRmFyLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NvRmFyQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ3NhdmVBbmRFeGl0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9zYXZlLWFuZC1leGl0JyxcbiAgICAgICAgICAgICAgICB2aWV3czp7XG4gICAgICAgICAgICAgICAgICAgIC8vICd1c2VyLWNvbnRyb2xzJzoge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy91c2VyLWNvbnRyb2xzLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29udHJvbGxlcjogJ3VzZXJDb250cm9sc0NvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZGVOYXYuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb250cm9sbGVyOiAnc2lkZU5hdkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zYXZlLWFuZC1leGl0Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ21haW5Db250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdlYXRDaGFsbGVuZ2VBcHAnKVxuICAgICAgICAuY29udHJvbGxlcignZXhwb3J0Q29udHJvbGxlcicsIGV4cG9ydENvbnRyb2xsZXIpO1xuXG4gICAgZXhwb3J0Q29udHJvbGxlci4kaW5qZWN0ID0gWyckaHR0cCcsICckc2NvcGUnXTtcblxuICAgIGZ1bmN0aW9uIGV4cG9ydENvbnRyb2xsZXIoJGh0dHAsICRzY29wZSkge1xuICAgICAgICAkaHR0cC5nZXQoJy9ob3VzZWhvbGQvY29tcGxldGVkJykudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgJHNjb3BlLmNvbXBsZXRlZEFwcGxpY2F0aW9ucyA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgIH0pO1xuICAgIH1cblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdob3VzZWhvbGRJbmNvbWUnLCBob3VzZWhvbGRJbmNvbWUpO1xuXG4gICAgaG91c2Vob2xkSW5jb21lLiRpbmplY3QgPSBbXG4gICAgICAgICckcm9vdFNjb3BlJyxcbiAgICAgICAgJyRzY29wZScsXG4gICAgICAgICckc3RhdGUnLFxuICAgICAgICAnSG91c2Vob2xkJyxcbiAgICAgICAgJ1NlY3Rpb25zJ1xuICAgIF07XG5cbiAgICBmdW5jdGlvbiBob3VzZWhvbGRJbmNvbWUgKCRyb290U2NvcGUsICRzY29wZSwgJHN0YXRlLCBIb3VzZWhvbGQsIFNlY3Rpb25zLCBIb3VzZWhvbGRJbmNvbWUpIHtcbiAgICAgICAgdmFyIHZtID0gJHNjb3BlO1xuICAgICAgICB2bS5uYXZpZ2F0ZVRvTmV4dFNlY3Rpb24gPSBuYXZpZ2F0ZVRvTmV4dFNlY3Rpb247XG5cbiAgICAgICAgdmFyIHdvcmsgPSB7XG4gICAgICAgICAgICBjYXRlZ29yeU5hbWU6ICd3b3JrJyxcbiAgICAgICAgICAgIGhlYWRsaW5lOiAnV29yayBJbmNvbWUnLFxuICAgICAgICAgICAgcXVlc3Rpb246ICdlYXJuIG1vbmV5IHRocm91Z2ggd29yaycsXG4gICAgICAgICAgICBzb3VyY2VzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXVsZTond29yaycsXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94TGFiZWw6ICdXb3JrIG91dHNpZGUgdGhlIGhvbWUgaW4gYSBub24tbWlsaXRhcnkgY2FwYWNpdHkgJyxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRMYWJlbDogJ0Vhcm5pbmdzIGZyb20gd29yaycsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICAgICAgYW5ub3RhdGlvbjogJ1BsZWFzZSByZXBvcnQgZ3Jvc3MgaW5jb21lLiBUaGlzIGlzIHRoZSBhbW91bnQgb2YgaW5jb21lIGVhcm5lZCBiZWZvcmUgYW55IG1vbmV5IGlzIHRha2VuIG91dCBmb3IgdGF4ZXMgb3IgZGVkdWN0aW9ucy4gSW5jbHVkZSBzYWxhcnksIHdhZ2VzLCBhbmQgY2FzaCBib251c2VzLidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmF1bGU6J3NlbGZFbXBsb3llZCcsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0TGFiZWw6ICdFYXJuaW5ncyBmcm9tIHNlbGYgZW1wbG95bWVudCcsXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94TGFiZWw6ICdTZWxmLWVtcGxveWVkJyxcbiAgICAgICAgICAgICAgICAgICAgZnJlcXVlbmN5OiBbJ3dlZWtseScsICdldmVyeSAyIHdlZWtzJywgJ3R3aWNlIGEgbW9udGgnLCAnbW9udGhseSddLFxuICAgICAgICAgICAgICAgICAgICBhbm5vdGF0aW9uOiAnRm9yIGhvdXNlaG9sZCBtZW1iZXJzIHRoYXQgYXJlIHNlbGYtZW1wbG95ZWQsIHJlcG9ydCBpbmNvbWUgZnJvbSB0aGF0IHdvcmsgYXMgYSBuZXQgYW1vdW50LiBUaGlzIGlzIGNhbGN1bGF0ZWQgYnkgc3VidHJhY3RpbmcgdGhlIHRvdGFsIG9wZXJhdGluZyBleHBlbnNlcyBvZiB0aGUgYnVzaW5lc3MgZnJvbSBpdHMgZ3Jvc3MgcmVjZWlwdHMgb3IgcmV2ZW51ZS4nXG5cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmF1bGU6J29uU3RyaWtlJyxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ09uIHN0cmlrZScsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0TGFiZWw6ICdTdHJpa2UgQmVuZWZpdHMnLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAnMnggbW9udGgnLCAnbW9udGhseSddLFxuICAgICAgICAgICAgICAgICAgICAvLyBhbm5vdGF0aW9uOlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBhZGQgc3BhY2UgZm9yIGhvdXNpbmcgYWxsb3dhbmNlIHBlciBkb2NcbiAgICAgICAgICAgICAgICAgICAgdmF1bGU6J21pbGl0YXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ0luIHRoZSBVLlMuIG1pbGl0YXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRMYWJlbDogJ0Jhc2ljIHBheSBhbmQgY2FzaCBib251c2VzJyxcbiAgICAgICAgICAgICAgICAgICAgZnJlcXVlbmN5OiBbJ3dlZWtseScsICdldmVyeSAyIHdlZWtzJywgJ3R3aWNlIGEgbW9udGgnLCAnbW9udGhseSddLFxuICAgICAgICAgICAgICAgICAgICBhbm5vdGF0aW9uOiAnUGxlYXNlIGRvIG5vdCBpbmNsdWRlIGNvbWJhdCBwYXksIEZTU0EsIG9yIHByaXZhdGUgaG91c2luZyBhbGxvd2FuY2VzLidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHB1YmxpY0Fzc2lzdGFuY2UgPSB7XG4gICAgICAgICAgICBjYXRlZ29yeU5hbWU6ICdwdWJsaWNBc3Npc3RhbmNlJyxcbiAgICAgICAgICAgIGhlYWRsaW5lOiAnUHVibGljIEFzc2lzdGFuY2UnLFxuICAgICAgICAgICAgcXVlc3Rpb246ICdyZWNlaXZlIGFueSBwdWJsaWMgYXNzaXN0YW5jZSBiZW5lZml0cycsXG4gICAgICAgICAgICBzb3VyY2VzOltcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhdWxlOid1bmVtcGxveW1lbnQnLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnVW5lbXBsb3ltZW50IGJlbmVmaXRzJyxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRMYWJlbDogJ1VuZW1wbG95bWVudCBiZW5lZml0cycsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5ub3RhdGlvbjogJydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmF1bGU6J3dvcmtlcnNDb21wJyxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ1dvcmtlcuKAmXMgY29tcGVuc2F0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRMYWJlbDogJ1dvcmtlcuKAmXMgY29tcGVuc2F0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgZnJlcXVlbmN5OiBbJ3dlZWtseScsICdldmVyeSAyIHdlZWtzJywgJ3R3aWNlIGEgbW9udGgnLCAnbW9udGhseSddLFxuICAgICAgICAgICAgICAgICAgICAvLyBhbm5vdGF0aW9uOiAnJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXVsZTonc3NpJyxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ1N1cHBsZW1lbnRhbCBTZWN1cml0eSBJbmNvbWUgKFNTSSknLFxuICAgICAgICAgICAgICAgICAgICBzaG9ydExhYmVsOiAnU3VwcGxlbWVudGFsIFNlY3VyaXR5IEluY29tZSAoU1NJKScsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5ub3RhdGlvbjogJydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmF1bGU6J2Nhc2hBc3Npc3RhbmNlJyxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ0Nhc2ggYXNzaXN0YW5jZSBmcm9tIFN0YXRlIG9yIGxvY2FsIGdvdmVybm1lbnQnLFxuICAgICAgICAgICAgICAgICAgICBzaG9ydExhYmVsOiAnQ2FzaCBhc3Npc3RhbmNlJyxcbiAgICAgICAgICAgICAgICAgICAgZnJlcXVlbmN5OiBbJ3dlZWtseScsICdldmVyeSAyIHdlZWtzJywgJ3R3aWNlIGEgbW9udGgnLCAnbW9udGhseSddLFxuICAgICAgICAgICAgICAgICAgICBhbm5vdGF0aW9uOiAnVGhpcyBjb3VsZCBpbmNsdWRlIFRBTkYgb3IgR2VuZXJhbCBBc3Npc3RhbmNlIG1vbmV5LidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmF1bGU6J3ZldGVyYW5zQmVuZWZpdHMnLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnVmV0ZXJhbuKAmXMgYmVuZWZpdHMnLFxuICAgICAgICAgICAgICAgICAgICBzaG9ydExhYmVsOiAnVmV0ZXJhbuKAmXMgYmVuZWZpdHMnLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIC8vIGFubm90YXRpb246ICdUaGlzIGNvdWxkIGluY2x1ZGUgVEFORiBvciBHZW5lcmFsIEFzc2lzdGFuY2UgbW9uZXknXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBhbGltb255ID0ge1xuICAgICAgICAgICAgY2F0ZWdvcnlOYW1lOiAnYWxpbW9ueScsXG4gICAgICAgICAgICBoZWFkbGluZTogJ0FsaW1vbnknLFxuICAgICAgICAgICAgcXVlc3Rpb246ICdyZWNlaXZlIGFsaW1vbnkgcGF5bWVudHMnLFxuICAgICAgICAgICAgc291cmNlczpbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXVsZTogJ2FsaW1vbnknLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnYWxpbW9ueSBwYXltZW50cycsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0TGFiZWw6ICdBbGltb255IHBheW1lbnQnLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIGFubm90YXRpb246ICdJZiBpbmNvbWUgaXMgcmVjZWl2ZWQgZnJvbSBhbGltb255LCBvbmx5IGNvdXJ0LW9yZGVyZWQgcGF5bWVudHMgc2hvdWxkIGJlIHJlcG9ydGVkIGhlcmUuIEluZm9ybWFsIGJ1dCByZWd1bGFyIHBheW1lbnRzIHNob3VsZCBiZSByZXBvcnRlZCBsYXRlciBhcyDigJxvdGhlcuKAnSBpbmNvbWUuJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2hpbGRTdXBwb3J0ID0ge1xuICAgICAgICAgICAgY2F0ZWdvcnlOYW1lOiAnY2hpbGRTdXBwb3J0JyxcbiAgICAgICAgICAgIGhlYWRsaW5lOiAnQ2hpbGQgU3VwcG9ydCcsXG4gICAgICAgICAgICBxdWVzdGlvbjogJ3JlY2VpdmUgYW55IGNoaWxkIHN1cHBvcnQnLFxuICAgICAgICAgICAgc291cmNlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmF1bGU6ICdjaGlsZFN1cHBvcnQnLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnYW55IGNoaWxkIHN1cHBvcnQnLFxuICAgICAgICAgICAgICAgICAgICBzaG9ydExhYmVsOiAnQ2hpbGQgc3VwcG9ydCBwYXltZW50JyxcbiAgICAgICAgICAgICAgICAgICAgZnJlcXVlbmN5OiBbJ3dlZWtseScsICdldmVyeSAyIHdlZWtzJywgJ3R3aWNlIGEgbW9udGgnLCAnbW9udGhseSddLFxuICAgICAgICAgICAgICAgICAgICBhbm5vdGF0aW9uOiAnSWYgaW5jb21lIGlzIHJlY2VpdmVkIGZyb20gY2hpbGQgc3VwcG9ydCwgb25seSBjb3VydC1vcmRlcmVkIHBheW1lbnRzIHNob3VsZCBiZSByZXBvcnRlZCBoZXJlLiBJbmZvcm1hbCBidXQgcmVndWxhciBwYXltZW50cyBzaG91bGQgYmUgcmVwb3J0ZWQgbGF0ZXIgYXMg4oCcb3RoZXLigJ0gaW5jb21lLidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHJldGlyZW1lbnQgPSB7XG4gICAgICAgICAgICBjYXRlZ29yeU5hbWU6ICdyZXRpcmVtZW50JyxcbiAgICAgICAgICAgIGhlYWRsaW5lOiAnUGVuc2lvbiBhbmQgUmV0aXJlbWVudCcsXG4gICAgICAgICAgICBxdWVzdGlvbjogJ3JlY2VpdmUgYW55IHBlbnNpb24gb3IgcmV0aXJlbWVudCBtb25leScsXG4gICAgICAgICAgICBzb3VyY2VzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXVsZTogJ3NvY2lhbFNlY3VyaXR5JyxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ1NvY2lhbCBTZWN1cml0eScsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0TGFiZWw6ICdTb2NpYWwgc2VjdXJpdHknLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIGFubm90YXRpb246ICdQbGVhc2UgaW5jbHVkZSByYWlscm9hZCByZXRpcmVtZW50IGFuZCBibGFjayBsdW5nIGJlbmVmaXRzJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXVsZTogJ3ByaXZhdGVQZW5zaW9uJyxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ1ByaXZhdGUgcGVuc2lvbnMgb3IgZGlzYWJpbGl0eScsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0TGFiZWw6ICdQcml2YXRlIHBlbnNpb25zIG9yIGRpc2FiaWxpdHknLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIC8vIGFubm90YXRpb246ICcnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBvdGhlckluY29tZSA9IHtcbiAgICAgICAgICAgIGNhdGVnb3J5TmFtZTogJ290aGVySW5jb21lJyxcbiAgICAgICAgICAgIGhlYWRsaW5lOiAnT3RoZXIgSW5jb21lJyxcbiAgICAgICAgICAgIHF1ZXN0aW9uOiAncmVjaWV2ZSBtb25leSB0aHJvdWdoIGFueSBvdGhlciBzb3VyY2UnLFxuICAgICAgICAgICAgc291cmNlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmF1bGU6ICd0cnVzdHMnLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnSW5jb21lIGZyb20gdHJ1c3RzIG9yIGVzdGF0ZXMnLFxuICAgICAgICAgICAgICAgICAgICBzaG9ydExhYmVsOiAnSW5jb21lIGZyb20gdHJ1c3RzIG9yIGVzdGF0ZXMnLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIC8vIGFubm90YXRpb246ICcnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhdWxlOiAnYW5udWl0aWVzJyxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ0FubnVpdGllcycsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0TGFiZWw6ICdJbmNvbWUgZnJvbSBhbm51aXRpZXMnLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIC8vIGFubm90YXRpb246ICcnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhdWxlOiAnaW52ZXN0bWVudCcsXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94TGFiZWw6ICdJbnZlc3RtZW50IGluY29tZScsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0TGFiZWw6ICdJbnZlc3RtZW50IGluY29tZScsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5ub3RhdGlvbjogJydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmF1bGU6ICdpbnRlcmVzdCcsXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94TGFiZWw6ICdFYXJuZWQgaW50ZXJlc3QnLFxuICAgICAgICAgICAgICAgICAgICBzaG9ydExhYmVsOiAnRWFybmVkIGludGVyZXN0JyxcbiAgICAgICAgICAgICAgICAgICAgZnJlcXVlbmN5OiBbJ3dlZWtseScsICdldmVyeSAyIHdlZWtzJywgJ3R3aWNlIGEgbW9udGgnLCAnbW9udGhseSddLFxuICAgICAgICAgICAgICAgICAgICAvLyBhbm5vdGF0aW9uOiAnJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXVsZTogJ3JlbnRhbEluY29tZScsXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94TGFiZWw6ICdSZW50YWwgaW5jb21lJyxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRMYWJlbDogJ1JlbnRhbCBpbmNvbWUnLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIC8vIGFubm90YXRpb246ICcnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhdWxlOiAnb3RoZXJDYXNoJyxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ1JlZ3VsYXIgY2FzaCBwYXltZW50cyBmcm9tIG91dHNpZGUgaG91c2Vob2xkJyxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRMYWJlbDogJ1JlZ3VsYXIgY2FzaCBwYXltZW50cyBmcm9tIG91dHNpZGUgaG91c2Vob2xkJyxcbiAgICAgICAgICAgICAgICAgICAgZnJlcXVlbmN5OiBbJ3dlZWtseScsICdldmVyeSAyIHdlZWtzJywgJ3R3aWNlIGEgbW9udGgnLCAnbW9udGhseSddLFxuICAgICAgICAgICAgICAgICAgICBhbm5vdGF0aW9uOiAnU3VjaCBjYXNoIHBheW1lbnRzIHNob3VsZCBpbmNsdWRlIHJlZ3VsYXIgY2hpbGQgc3VwcG9ydCBvciBhbGltb255IHBheW1lbnRzIHJlY2VpdmVkIGJ5IHRoZSBob3VzZWhvbGQgdGhhdCBhcmUgbm90IGNvdXJ0LW9yZGVyZWQuJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gVE9ETzogZHVwbGljYXRlZCB3aXRoIG1haW4uanMuIFNoYXJlIGluIGEgYmV0dGVyIHdheVxuICAgICAgICBmdW5jdGlvbiBuYXZpZ2F0ZVRvTmV4dFNlY3Rpb24oKSB7XG4gICAgICAgICAgICBIb3VzZWhvbGQuc2F2ZSgpO1xuICAgICAgICAgICAgU2VjdGlvbnMudXBkYXRlUmVxdWlyZWRTZWN0aW9ucygpO1xuICAgICAgICAgICAgU2VjdGlvbnMubmF2aWdhdGVUb05leHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZtLmluY29tZUNhdGVnb3JpZXMgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1YmxpY0Fzc2lzdGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaW1vbnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkU3VwcG9ydCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0aXJlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJJbmNvbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG5cbiAgICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgLm1vZHVsZSgnZWF0Q2hhbGxlbmdlQXBwJylcbiAgICAgIC5jb250cm9sbGVyKCdsb2dpbkNvbnRyb2xsZXInLCBsb2dpbkNvbnRyb2xsZXIpO1xuICAgIGxvZ2luQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJHN0YXRlJywgJ2F1dGgnLCAnSG91c2Vob2xkJywgJ1NlY3Rpb25zJ107XG4gICAgZnVuY3Rpb24gbG9naW5Db250cm9sbGVyKCRzY29wZSwgJHN0YXRlLCBhdXRoLCBIb3VzZWhvbGQsIFNlY3Rpb25zKSB7XG4gICAgICAgIHZhciB2bSA9ICRzY29wZTtcbiAgICAgICAgdmFyIHVzZXIgPSB7fTtcbiAgICAgICAgdm0uc3VibWl0ID0gc3VibWl0O1xuICAgICAgICB2bS51c2VyID0gdXNlcjtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIGZ1bmN0aW9uIHN1Ym1pdCgpIHtcbiAgICAgICAgICAgIC8vIHZtLmRpc2FibGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgYXV0aFxuICAgICAgICAgICAgLmxvZ2luKHVzZXIuZW1haWwsIHVzZXIucGFzc3dvcmQpXG4gICAgICAgICAgICAudGhlbihzdWNjZXNzSGFuZGxlciwgZXJyb3JIYW5kbGVyKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gc3VjY2Vzc0hhbmRsZXIocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAvLyB2bS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZtLmxvZ2luRm9ybSA9IHt9O1xuICAgICAgICAgICAgICAgIHZtLm1lc3NhZ2UgPSAnc3VjY2Vzc2Z1bGx5IGxvZ2dlZCBpbic7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdzb0ZhcicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBlcnJvckhhbmRsZXIocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB2bS5tZXNzYWdlID0gJ1NvbWV0aGluZyB3ZW50IHdyb25nLiBQbGVhc2UgdHJ5IGFnYWluJztcbiAgICAgICAgICAgICAgICAvLyB2bS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdlYXRDaGFsbGVuZ2VBcHAnKVxuICAgICAgICAuY29udHJvbGxlcignbWFpbkNvbnRyb2xsZXInLCBtYWluQ29udHJvbGxlcik7XG5cbiAgICBtYWluQ29udHJvbGxlci4kaW5qZWN0ID0gW1xuICAgICAgICAnJGh0dHAnLFxuICAgICAgICAnJGludGVydmFsJyxcbiAgICAgICAgJyRtZERpYWxvZycsXG4gICAgICAgICckbWRNZWRpYScsXG4gICAgICAgICckcm9vdFNjb3BlJyxcbiAgICAgICAgJyRzY29wZScsXG4gICAgICAgICckc3RhdGUnLFxuICAgICAgICAnSG91c2Vob2xkJyxcbiAgICAgICAgJ1NlY3Rpb25zJ1xuICAgIF07XG5cbiAgICBmdW5jdGlvbiBtYWluQ29udHJvbGxlciAoJGh0dHAsICRpbnRlcnZhbCwgJG1kRGlhbG9nLCAkbWRNZWRpYSwgJHJvb3RTY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLCAkc3RhdGUsIEhvdXNlaG9sZCwgU2VjdGlvbnMpIHtcbiAgICAgICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICAgICAgICB2YXIgdm0gPSAkc2NvcGU7XG4gICAgICAgIHZtLnNjaG9vbERpc3RyaWN0ID0gJ09ha2xhbmQgVW5pZmllZCBTY2hvb2wgRGlzdHJpY3QnO1xuXG4gICAgICAgIC8vIG5hdmlnYXRpb25cbiAgICAgICAgdm0uZ29CYWNrID0gZ29CYWNrO1xuICAgICAgICB2bS5uYXZpZ2F0ZVRvTmV4dFNlY3Rpb24gPSBuYXZpZ2F0ZVRvTmV4dFNlY3Rpb247XG4gICAgICAgIHZtLnN1Ym1pdEFwcGxpY2F0aW9uID0gc3VibWl0QXBwbGljYXRpb247XG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICAvL05ldyBjaGlsZHJlbiBhbmQgaG91c2Vob2xkIG1lbWJlcnMgYXJlIGNyZWF0ZWRcbiAgICAgICAgLy9ieSBjYWxsaW5nIHRoZSBzZXJ2ZXIgdG8gbWFrZSB1c2Ugb2YgbW9uZ29vc2UgbW9kZWxzXG4gICAgICAgIGZ1bmN0aW9uIGFkZENoaWxkKG5ld1ZhbCkge1xuICAgICAgICAgICAgaWYgKG5ld1ZhbCA+ICRyb290U2NvcGUuaG91c2Vob2xkLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICRodHRwLmdldCgnL2NoaWxkJykudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3Q2hpbGQgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmhvdXNlaG9sZC5jaGlsZHJlbi5wdXNoKG5ld0NoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVjdXJzZSBpZiBuZWNlc3NhcnlcbiAgICAgICAgICAgICAgICAgICAgYWRkQ2hpbGQobmV3VmFsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFkZE90aGVyTWVtYmVyKG5ld1ZhbCkge1xuICAgICAgICAgICAgaWYgKG5ld1ZhbCA+ICRyb290U2NvcGUuaG91c2Vob2xkLm90aGVyTWVtYmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJy9ob3VzZWhvbGQtbWVtYmVyJykudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3SG91c2Vob2xkTWVtYmVyID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgbmV3SG91c2Vob2xkTWVtYmVyID0ge307XG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuaG91c2Vob2xkLm90aGVyTWVtYmVycy5wdXNoKG5ld0hvdXNlaG9sZE1lbWJlcik7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlY3Vyc2UgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICAgICAgICAgIGFkZE90aGVyTWVtYmVyKG5ld1ZhbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB0cmltQ2hpbGRyZW4oaG91c2Vob2xkKSB7XG4gICAgICAgICAgICAvLyBnZXQgcmlkIG9mIGV4dHJhIGVtcHR5IGNoaWxkIG9iZWpjZXRzIGNyZWF0ZWQgaW4gcHJvY2Vzc1xuICAgICAgICAgICAgaWYgKGhvdXNlaG9sZC5jaGlsZHJlbi5sZW5ndGggPiBob3VzZWhvbGQuY2hpbGRDb3VudCkge1xuICAgICAgICAgICAgICAgIGhvdXNlaG9sZC5jaGlsZHJlbiA9IGhvdXNlaG9sZC5jaGlsZHJlbi5zbGljZSgwLCBob3VzZWhvbGQuY2hpbGRDb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaG91c2Vob2xkO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdHJpbU90aGVyTWVtYmVycyhob3VzZWhvbGQpIHtcbiAgICAgICAgICAgIC8vIGdldCByaWQgb2YgZXh0cmEgZW1wdHkgb3RoZXJNZW1iZXIgb2JlamNldHMgY3JlYXRlZCBpbiBwcm9jZXNzXG4gICAgICAgICAgICBpZiAoaG91c2Vob2xkLm90aGVyTWVtYmVycy5sZW5ndGggPiBob3VzZWhvbGQub3RoZXJNZW1iZXJzQ291bnQpIHtcbiAgICAgICAgICAgICAgICBob3VzZWhvbGQub3RoZXJNZW1iZXJzLnNsaWNlKDAsIGhvdXNlaG9sZC5vdGhlck1lbWJlcnNDb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaG91c2Vob2xkO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgICAgICAgICAgSG91c2Vob2xkLnNhdmUoKTtcbiAgICAgICAgICAgIFNlY3Rpb25zLnVwZGF0ZVJlcXVpcmVkU2VjdGlvbnMoKTtcbiAgICAgICAgICAgIFNlY3Rpb25zLmdvQmFjaygpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbmF2aWdhdGVUb05leHRTZWN0aW9uKCkge1xuICAgICAgICAgICAgSG91c2Vob2xkLnNhdmUoKTtcbiAgICAgICAgICAgIFNlY3Rpb25zLnVwZGF0ZVJlcXVpcmVkU2VjdGlvbnMoKTtcbiAgICAgICAgICAgIFNlY3Rpb25zLm5hdmlnYXRlVG9OZXh0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzdWJtaXRBcHBsaWNhdGlvbigpIHtcbiAgICAgICAgICAgIHRyaW1DaGlsZHJlbigkcm9vdFNjb3BlLmhvdXNlaG9sZCk7XG4gICAgICAgICAgICB0cmltT3RoZXJNZW1iZXJzKCRyb290U2NvcGUuaG91c2Vob2xkKTtcblxuICAgICAgICAgICAgJHJvb3RTY29wZS5ob3VzZWhvbGQuY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIG5hdmlnYXRlVG9OZXh0U2VjdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2F0Y2hlcnNcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnaG91c2Vob2xkLmNoaWxkQ291bnQnLCBhZGRDaGlsZCk7XG4gICAgICAgICRzY29wZS4kd2F0Y2goJ2hvdXNlaG9sZC5vdGhlck1lbWJlcnNDb3VudCcsIGFkZE90aGVyTWVtYmVyKTtcbiAgICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdlYXRDaGFsbGVuZ2VBcHAnKVxuICAgICAgICAuY29udHJvbGxlcignc2lkZU5hdkNvbnRyb2xsZXInLCBzaWRlTmF2Q29udHJvbGxlcik7XG5cbiAgICBzaWRlTmF2Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJHN0YXRlJywgJ1NlY3Rpb25zJ107XG5cbiAgICBmdW5jdGlvbiBzaWRlTmF2Q29udHJvbGxlciAoJHNjb3BlLCAkc3RhdGUsIFNlY3Rpb25zKSB7XG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgICAgdmFyIHZtID0gJHNjb3BlO1xuXG4gICAgICAgIHZtLmN1cnJlbnRTdGF0ZSA9ICRzdGF0ZS4kY3VycmVudC5zZWxmLm5hbWU7XG4gICAgICAgIHZtLnNlY3Rpb25zID0gU2VjdGlvbnMuc2VjdGlvbnM7XG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAuY29udHJvbGxlcignc2lnbnVwQ29udHJvbGxlcicsIHNpZ251cENvbnRyb2xsZXIpO1xuICAgIHNpZ251cENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJ2F1dGgnLCAnU2VjdGlvbnMnXTtcblxuICAgIGZ1bmN0aW9uIHNpZ251cENvbnRyb2xsZXIoJHNjb3BlLCBhdXRoLCBTZWN0aW9ucykge1xuICAgICAgICBjb25zb2xlLmxvZyhhdXRoLmdldFVzZXJTdGF0dXMoKSk7XG4gICAgICAgIHZhciB2bSA9ICRzY29wZTtcbiAgICAgICAgdmFyIHVzZXIgPSB7fTtcbiAgICAgICAgdm0uc3VibWl0ID0gc3VibWl0O1xuICAgICAgICB2bS51c2VyID0gdXNlcjtcblxuICAgICAgICBmdW5jdGlvbiBzdWJtaXQoKSB7XG4gICAgICAgICAgICB2bS5lcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gVE9ETzogYWRkIGxvYWRpbmcgaWNvbiB0byBVSSB3aGVuIGRpc2FibGVkID09PSB0cnVlXG4gICAgICAgICAgICB2bS5kaXNhYmxlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIGF1dGguc2lnbnVwKHVzZXIuZW1haWwsIHVzZXIucGFzc3dvcmQpXG4gICAgICAgICAgICAudGhlbihzdWNjZXNzSGFuZGxlciwgZXJyb3JIYW5kbGVyKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gc3VjY2Vzc0hhbmRsZXIoKSB7XG4gICAgICAgICAgICAgICAgdm0uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2bS5zaWdudXBGb3JtID0ge307IC8vUmVzZXQgZm9ybVxuICAgICAgICAgICAgICAgIHZtLm1lc3NhZ2UgPSAnc3VjY2Vzc2Z1bGx5IGNyZWF0ZWQgYW4gYWNjb3VudCc7XG4gICAgICAgICAgICAgICAgU2VjdGlvbnMuZ29CYWNrKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGVycm9ySGFuZGxlcihlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgICAgIHZtLmVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2bS5tZXNzYWdlID0gJ1NvbWV0aGluZyB3ZW50IHdyb25nLiBQbGVhc2UgdHJ5IGFnYWluJztcbiAgICAgICAgICAgICAgICB2bS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIC8vIHZtLnNpZ251cEZvcm0gPSB7fVxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdlYXRDaGFsbGVuZ2VBcHAnKVxuICAgICAgICAuY29udHJvbGxlcignc29GYXJDb250cm9sbGVyJywgc29GYXJDb250cm9sbGVyKTtcblxuICAgIHNvRmFyQ29udHJvbGxlci4kaW5qZWN0ID0gW1xuICAgICAgICAnJGh0dHAnLFxuICAgICAgICAnJGludGVydmFsJyxcbiAgICAgICAgJyRtZERpYWxvZycsXG4gICAgICAgICckbWRNZWRpYScsXG4gICAgICAgICckc2NvcGUnLFxuICAgICAgICAnJHN0YXRlJyxcbiAgICAgICAgJ0hvdXNlaG9sZCcsXG4gICAgICAgICdTZWN0aW9ucydcbiAgICBdO1xuXG4gICAgZnVuY3Rpb24gc29GYXJDb250cm9sbGVyICgkaHR0cCwgJGludGVydmFsLCAkbWREaWFsb2csICRtZE1lZGlhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUsICRzdGF0ZSwgSG91c2Vob2xkLCBTZWN0aW9ucykge1xuICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgICAgIHZhciB2bSA9ICRzY29wZTtcbiAgICAgICAgdm0ubWVhbnNUZXN0ID0gU2VjdGlvbnMubWVhbnNUZXN0O1xuXG4gICAgICAgIHZtLmNoaWxkcmVuTGFiZWwgPSAnY2hpbGRyZW4nO1xuICAgICAgICB2bS5hZHVsdHNMYWJlbCA9ICdhZHVsdHMnO1xuXG4gICAgICAgIHZtLmluY29tZUVhcm5lcnNDb3VudCA9IGNvdW50RWFybmVycygkcm9vdFNjb3BlLmhvdXNlaG9sZCk7XG4gICAgICAgIHZtLmluY29tZUVzdGltYXRlID0gZXN0aW1hdGVJbmNvbWUoJHJvb3RTY29wZS5ob3VzZWhvbGQpO1xuXG4gICAgICAgIC8vIG5hdmlnYXRpb25cbiAgICAgICAgdm0uZ29CYWNrID0gZ29CYWNrO1xuICAgICAgICB2bS5uYXZpZ2F0ZVRvTmV4dFNlY3Rpb24gPSBuYXZpZ2F0ZVRvTmV4dFNlY3Rpb247XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgICAgICBpZiAoJHJvb3RTY29wZS5ob3VzZWhvbGQuY2hpbGRyZW4ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgdm0uY2hpbGRyZW5MYWJlbCA9ICdjaGlsZCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJHJvb3RTY29wZS5ob3VzZWhvbGQub3RoZXJNZW1iZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHZtLmFkdWx0c0xhYmVsID0gJ2FkdWx0JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGluaXQoKTtcblxuICAgICAgICB2YXIgZnJlcXVlbmN5TXVsaXRwbGllciA9IHtcbiAgICAgICAgICAgIHdlZWtseTogNTIsXG4gICAgICAgICAgICAnZXZlcnkgMiB3ZWVrcyc6IDI2LFxuICAgICAgICAgICAgJ3R3aWNlIGEgbW9udGgnOiAyNCxcbiAgICAgICAgICAgIG1vbnRobHk6IDEyXG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gZXN0aW1hdGVJbmNvbWUoaG91c2Vob2xkKSB7XG4gICAgICAgICAgICB2YXIgZXN0aW1hdGVkQW5udWFsSW5jb21lID0gMDtcbiAgICAgICAgICAgIGhvdXNlaG9sZC5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLmVhcm5zSW5jb21lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLmluY29tZVNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbihpbmNvbWVTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmNvbWVTb3VyY2UuYW1vdW50ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdJbmNvbWUgPSBpbmNvbWVTb3VyY2UuYW1vdW50ICogZnJlcXVlbmN5TXVsaXRwbGllcltpbmNvbWVTb3VyY2UuZnJlcXVlbmN5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc3RpbWF0ZWRBbm51YWxJbmNvbWUgKz0gbmV3SW5jb21lO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoZXN0aW1hdGVkQW5udWFsSW5jb21lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNvdW50RWFybmVycyhob3VzZWhvbGQpIHtcbiAgICAgICAgICAgIHZhciBlYXJuZXJzQ291bnQgPSAwO1xuICAgICAgICAgICAgaG91c2Vob2xkLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQuZWFybnNJbmNvbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZWFybmVyc0NvdW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBlYXJuZXJzQ291bnQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgICAgICAgICBIb3VzZWhvbGQuc2F2ZSgpO1xuICAgICAgICAgICAgU2VjdGlvbnMudXBkYXRlUmVxdWlyZWRTZWN0aW9ucygpO1xuICAgICAgICAgICAgU2VjdGlvbnMuZ29CYWNrKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBuYXZpZ2F0ZVRvTmV4dFNlY3Rpb24oKSB7XG4gICAgICAgICAgICBIb3VzZWhvbGQuc2F2ZSgpO1xuICAgICAgICAgICAgU2VjdGlvbnMudXBkYXRlUmVxdWlyZWRTZWN0aW9ucygpO1xuICAgICAgICAgICAgU2VjdGlvbnMubmF2aWdhdGVUb05leHQoKTtcbiAgICAgICAgfVxuICAgIH1cblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAubW9kdWxlKCdlYXRDaGFsbGVuZ2VBcHAnKVxuICAgICAgLmNvbnRyb2xsZXIoJ3VzZXJDb250cm9sc0NvbnRyb2xsZXInLCB1c2VyQ29udHJvbHNDb250cm9sbGVyKTtcbiAgICB1c2VyQ29udHJvbHNDb250cm9sbGVyLiRpbmplY3QgPSBbJyRyb290U2NvcGUnLCAnJHNjb3BlJywgJyRzdGF0ZScsICdhdXRoJ107XG4gICAgZnVuY3Rpb24gdXNlckNvbnRyb2xzQ29udHJvbGxlcigkcm9vdFNjb3BlLCAkc2NvcGUsICRzdGF0ZSwgYXV0aCkge1xuICAgICAgICB2YXIgdm0gPSAkc2NvcGU7XG4gICAgICAgIHZtLmxvZ2dlZEluID0gYXV0aC5nZXRVc2VyU3RhdHVzKCk7XG4gICAgICAgIHZtLmxvZ291dCA9IGxvZ291dDtcbiAgICAgICAgdm0udXNlciA9ICRyb290U2NvcGUudXNlcjtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICBmdW5jdGlvbiBsb2dvdXQoKSB7XG4gICAgICAgICAgICBhdXRoLmxvZ291dCgpO1xuICAgICAgICAgICAgdm0ubG9nZ2VkSW4gPSBhdXRoLmdldFVzZXJTdGF0dXMoKTtcbiAgICAgICAgICAgICRzdGF0ZS5nbygnc2F2ZUFuZEV4aXQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRyb290U2NvcGUuJHdhdGNoKCd1c2VyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2bS5sb2dnZWRJbiA9IGF1dGguZ2V0VXNlclN0YXR1cygpO1xuICAgICAgICAgICAgdm0udXNlciA9ICRyb290U2NvcGUudXNlcjtcbiAgICAgICAgfSk7XG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnZWF0Q2hhbGxlbmdlQXBwJylcbiAgICAgICAgLnNlcnZpY2UoJ2F1dGgnLCBBdXRoU2VydmljZSk7XG5cbiAgICBBdXRoU2VydmljZS4kaW5qZWN0ID0gWyckY29va2llcycsICckaHR0cCcsICckcScsICckcm9vdFNjb3BlJywgJyRzdGF0ZScsICdIb3VzZWhvbGQnXTtcblxuICAgIGZ1bmN0aW9uIEF1dGhTZXJ2aWNlKCRjb29raWVzLCAkaHR0cCwgJHEsICRyb290U2NvcGUsICRzdGF0ZSwgSG91c2Vob2xkKSB7XG4gICAgICAgICRyb290U2NvcGUudXNlciA9IG51bGw7XG4gICAgICAgIGluaXQoKTtcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7fTtcbiAgICAgICAgc2VydmljZS5pc0xvZ2dlZEluID0gaXNMb2dnZWRJbjtcbiAgICAgICAgc2VydmljZS5nZXRVc2VyU3RhdHVzID0gZ2V0VXNlclN0YXR1cztcbiAgICAgICAgc2VydmljZS5zaWdudXAgPSBzaWdudXA7XG4gICAgICAgIHNlcnZpY2UubG9naW4gPSBsb2dpbjtcbiAgICAgICAgc2VydmljZS5sb2dvdXQgPSBsb2dvdXQ7XG4gICAgICAgIHNlcnZpY2UuaW5pdCA9IGluaXQ7XG5cbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHVzZXIgb24gc3RhcnRcbiAgICAgICAgICAgIHZhciB1c2VyID0gZ2V0Q3JlZGVudGlhbHMoKTtcbiAgICAgICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS51c2VyID0gdXNlcjtcbiAgICAgICAgICAgICAgICBIb3VzZWhvbGQucmV0cmlldmVGb3JVc2VyKHVzZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc0xvZ2dlZEluKCkge1xuICAgICAgICAgICAgaWYgKCRyb290U2NvcGUudXNlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0VXNlclN0YXR1cygpIHtcbiAgICAgICAgICAgIHJldHVybiAkcm9vdFNjb3BlLnVzZXI7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzaWdudXAoZW1haWwsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHBcbiAgICAgICAgICAgICAgICAucG9zdCgnL3VzZXIvc2lnbnVwJywge3VzZXJuYW1lOiBlbWFpbCwgcGFzc3dvcmQ6IHBhc3N3b3JkfSlcbiAgICAgICAgICAgICAgICAudGhlbihzdWNjZXNzSGFuZGxlciwgZXJyb3JIYW5kbGVyKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gc3VjY2Vzc0hhbmRsZXIocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBzZXRDcmVkZW50aWFscyhyZXNwb25zZS5kYXRhLnVzZXIpO1xuICAgICAgICAgICAgICAgIEhvdXNlaG9sZC5zYXZlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGVycm9ySGFuZGxlcihlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbG9naW4oZW1haWwsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogZW1haWwsXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gJGh0dHBcbiAgICAgICAgICAgICAgICAucG9zdCgnL3VzZXIvbG9naW4nLCBkYXRhKVxuICAgICAgICAgICAgICAgIC50aGVuKHN1Y2Nlc3NIYW5kbGVyLCBlcnJvckhhbmRsZXIpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBzdWNjZXNzSGFuZGxlcihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHNldENyZWRlbnRpYWxzKHJlc3BvbnNlLmRhdGEudXNlcik7XG4gICAgICAgICAgICAgICAgSG91c2Vob2xkLnJldHJpZXZlRm9yVXNlcihyZXNwb25zZS5kYXRhLnVzZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBlcnJvckhhbmRsZXIocmVzcG9uc2UsIGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgY2xlYXJDcmVkZW50aWFscygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbG9nb3V0KCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwXG4gICAgICAgICAgICAgICAgLmdldCgndXNlci9sb2dvdXQnKVxuICAgICAgICAgICAgICAgIC50aGVuKHN1Y2Nlc3NIYW5kbGVyLCBlcnJvckhhbmRsZXIpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBzdWNjZXNzSGFuZGxlcigpIHtcbiAgICAgICAgICAgICAgICBjbGVhckNyZWRlbnRpYWxzKCk7XG4gICAgICAgICAgICAgICAgSG91c2Vob2xkLmNsZWFyKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGVycm9ySGFuZGxlcigpIHtcbiAgICAgICAgICAgICAgICBjbGVhckNyZWRlbnRpYWxzKCk7XG4gICAgICAgICAgICAgICAgSG91c2Vob2xkLmNsZWFyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRDcmVkZW50aWFscyh1c2VyKSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLnVzZXIgPSB1c2VyO1xuICAgICAgICAgICAgcmV0dXJuICRjb29raWVzLnB1dE9iamVjdCgndXNlcicsIHVzZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Q3JlZGVudGlhbHMoKSB7XG4gICAgICAgICAgICByZXR1cm4gJGNvb2tpZXMuZ2V0T2JqZWN0KCd1c2VyJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjbGVhckNyZWRlbnRpYWxzKCkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS51c2VyID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiAkY29va2llcy5yZW1vdmUoJ3VzZXInKTtcbiAgICAgICAgfVxuICAgIH1cblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAgIC5zZXJ2aWNlKCdIb3VzZWhvbGQnLCBob3VzZWhvbGRTZXJ2aWNlKTtcblxuICAgIGhvdXNlaG9sZFNlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnLCAnJHJvb3RTY29wZSddO1xuXG4gICAgZnVuY3Rpb24gaG91c2Vob2xkU2VydmljZSgkaHR0cCwgJHJvb3RTY29wZSkge1xuICAgICAgICAvLyBUb2RvOiBjb25zaWRlciBtb3ZpbmcgdG8gc2VydmVyPz9cbiAgICAgICAgdmFyIEhvdXNlaG9sZCA9ICB7XG4gICAgICAgICAgICBjaGlsZENvdW50OiBudWxsLFxuICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICAgICAgb3RoZXJNZW1iZXJzQ291bnQ6IG51bGwsXG4gICAgICAgICAgICBvdGhlck1lbWJlcnM6IFtdLFxuICAgICAgICAgICAgY29tcGxldGVkQXBwbGljYXRpb246IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAkcm9vdFNjb3BlLmhvdXNlaG9sZCA9ICRyb290U2NvcGUuaG91c2Vob2xkIHx8IE9iamVjdC5jcmVhdGUoSG91c2Vob2xkKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge307XG4gICAgICAgIHNlcnZpY2UucmV0cmlldmVGb3JVc2VyID0gcmV0cmlldmVGb3JVc2VyO1xuICAgICAgICBzZXJ2aWNlLnNhdmUgPSBzYXZlO1xuICAgICAgICBzZXJ2aWNlLmNsZWFyID0gY2xlYXI7XG5cbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiByZXRyaWV2ZUZvclVzZXIodXNlcikge1xuICAgICAgICAgICAgJGh0dHAuZ2V0KCcvaG91c2Vob2xkLycgKyB1c2VyLl9pZClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmhvdXNlaG9sZCA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzYXZlKCkge1xuICAgICAgICAgICAgaWYgKCRyb290U2NvcGUudXNlcikge1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUuaG91c2Vob2xkLnVzZXJJZCA9ICRyb290U2NvcGUudXNlci5faWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvaG91c2Vob2xkJywgaG91c2Vob2xkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuaG91c2Vob2xkID0gT2JqZWN0LmNyZWF0ZShIb3VzZWhvbGQpO1xuICAgICAgICB9XG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnZWF0Q2hhbGxlbmdlQXBwJylcbiAgICAgICAgLnNlcnZpY2UoJ1NlY3Rpb25zJywgc2VjdGlvbnNTZXJ2aWNlKTtcblxuICAgIHNlY3Rpb25zU2VydmljZS4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJyAsJyRzdGF0ZSddO1xuXG4gICAgZnVuY3Rpb24gc2VjdGlvbnNTZXJ2aWNlKCRyb290U2NvcGUsICRzdGF0ZSkge1xuICAgICAgICB2YXIgc2VjdGlvbnMgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdMZXRcXOKAmXMgR2V0IFN0YXJ0ZWQhICcsXG4gICAgICAgICAgICAgICAgc3RhdGU6ICdzdGFydCcsXG4gICAgICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93U3VtbWFyeUFmdGVyOiBmYWxzZVxuICAgICAgICAgICAgfSwgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdDaGlsZHJlbicsXG4gICAgICAgICAgICAgICAgc3RhdGU6ICdjaGlsZHJlbicsXG4gICAgICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93U3VtbWFyeUFmdGVyOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnSG91c2Vob2xkIE1lbWJlcnMnLFxuICAgICAgICAgICAgICAgIHN0YXRlOiAnaG91c2Vob2xkJyxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNob3dTdW1tYXJ5QWZ0ZXI6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdDaGlsZHJlblxcJ3MgSW5jb21lJyxcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2NoaWxkSW5jb21lJyxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNob3dTdW1tYXJ5QWZ0ZXI6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdIb3VzZWhvbGQgSW5jb21lJyxcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2hvdXNlaG9sZEluY29tZScsXG4gICAgICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93U3VtbWFyeUFmdGVyOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnRGlzY2xvc3VyZScsXG4gICAgICAgICAgICAgICAgc3RhdGU6ICdkaXNjbG9zdXJlJyxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNob3dTdW1tYXJ5QWZ0ZXI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnU2lnbiBhbmQgQ29uZmlybScsXG4gICAgICAgICAgICAgICAgc3RhdGU6ICdzaWduYXR1cmUnLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hvd1N1bW1hcnlBZnRlcjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG5cbiAgICAgICAgdmFyIGluZGV4ZWRTZWN0aW9ucyA9IF8uaW5kZXhCeShzZWN0aW9ucywgJ3N0YXRlJyk7XG5cbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICAgICAgICBtZWFuc1Rlc3Q6IHRydWUsXG4gICAgICAgICAgICBzZWN0aW9uczogc2VjdGlvbnMsXG4gICAgICAgICAgICBpbmRleGVkU2VjdGlvbnM6IGluZGV4ZWRTZWN0aW9ucyxcbiAgICAgICAgICAgIG5hdmlnYXRlVG9OZXh0OiBuYXZpZ2F0ZVRvTmV4dCxcbiAgICAgICAgICAgIGdvQmFjazogZ29CYWNrLFxuICAgICAgICAgICAgdXBkYXRlUmVxdWlyZWRTZWN0aW9uczogdXBkYXRlUmVxdWlyZWRTZWN0aW9uc1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlUmVxdWlyZWRTZWN0aW9ucygpIHtcbiAgICAgICAgICAgIHZhciBob3VzZWhvbGQgPSAkcm9vdFNjb3BlLmhvdXNlaG9sZDtcbiAgICAgICAgICAgIHNlcnZpY2UubWVhbnNUZXN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBhc3Npc3RhbmNlUHJvZ3JhbUhvdXNlaG9sZCA9IGlzQXNzaXN0YW5jZUhvdXNlaG9sZChob3VzZWhvbGQpO1xuICAgICAgICAgICAgdmFyIGNhdGVnb3JpY2FsbHlRdWFsaWZpZWQgPSBhbGxTdHVkZW50c0NhdGVnb3JpY2FsbHlRdWFsaWZ5KGhvdXNlaG9sZCk7XG5cbiAgICAgICAgICAgIGlmIChhc3Npc3RhbmNlUHJvZ3JhbUhvdXNlaG9sZCB8fCBjYXRlZ29yaWNhbGx5UXVhbGlmaWVkKSB7XG4gICAgICAgICAgICAgICAgc2VydmljZS5tZWFuc1Rlc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpbmRleGVkU2VjdGlvbnNbJ2NoaWxkSW5jb21lJ10ucmVxdWlyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpbmRleGVkU2VjdGlvbnNbJ2hvdXNlaG9sZCddLnJlcXVpcmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaW5kZXhlZFNlY3Rpb25zWydob3VzZWhvbGRJbmNvbWUnXS5yZXF1aXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VjdGlvbnMuZm9yRWFjaChmdW5jdGlvbihzZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgc2VjdGlvbi5yZXF1aXJlZCA9IHRydWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzQXNzaXN0YW5jZUhvdXNlaG9sZChob3VzZWhvbGQpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCA7IGkgPCBob3VzZWhvbGQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50Q2hpbGQgPSBob3VzZWhvbGQuY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDaGlsZC5hc3Npc3RhbmNlUHJvZ3JhbSAmJiBjdXJyZW50Q2hpbGQuYXNzaXN0YW5jZVByb2dyYW0ucGFydGljaXBhbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYWxsU3R1ZGVudHNDYXRlZ29yaWNhbGx5UXVhbGlmeShob3VzZWhvbGQpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50Q2hpbGQsIGNoaWxkUXVhbGlmaWVzO1xuXG4gICAgICAgICAgICB2YXIgZW5yb2xsZWRDaGlsZHJlbiA9IF8uZmlsdGVyKGhvdXNlaG9sZC5jaGlsZHJlbiwgZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjLmVucm9sbGVkID09PSB0cnVlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIG11c3QgaGF2ZSBraWRzIHRvIHF1YWxpZnlcbiAgICAgICAgICAgIGlmIChlbnJvbGxlZENoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9hbGwgY2hpbGRyZW4gYXJlIGNhdGVnb3JpY2FsbHkgcXVhbGlmaWVkXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCA7IGkgPCBlbnJvbGxlZENoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudENoaWxkID0gaG91c2Vob2xkLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgIGlmICghY3VycmVudENoaWxkLnNwZWNpYWxTdGF0dXMuZm9zdGVyQ2hpbGQgJiZcbiAgICAgICAgICAgICAgICAgICAgIWN1cnJlbnRDaGlsZC5zcGVjaWFsU3RhdHVzLmhvbWVsZXNzTWlncmFudFJ1bmF3YXkgJiZcbiAgICAgICAgICAgICAgICAgICAgIWN1cnJlbnRDaGlsZC5zcGVjaWFsU3RhdHVzLmhlYWRTdGFydFBhcnRpY2lwYW50XG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBmaW5kTmV4dChjdXJyZW50U3RhdGUpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50SW5kZXggPSBfLmZpbmRJbmRleChzZWN0aW9ucywgZnVuY3Rpb24oc2VjdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZWN0aW9uLnN0YXRlID09PSBjdXJyZW50U3RhdGU7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gTG9vayBmb3IgdGhlIG5leHQgcmVxdWlyZWQgc2VjdGlvblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IGN1cnJlbnRJbmRleCArIDE7IGkgPCBzZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChzZWN0aW9uc1tpXS5yZXF1aXJlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VjdGlvbnNbaV0uc3RhdGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBhcmUgbm8gbW9yZSByZXF1aXJlZCBzZWN0aW9ucywgd2UncmUgZG9uZS5cbiAgICAgICAgICAgIHJldHVybiAnY29uZmlybWF0aW9uJztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG5hdmlnYXRlVG9OZXh0KCkge1xuICAgICAgICAgICAgdmFyIG5leHRTZWN0aW9uO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRTdGF0ZSA9ICRyb290U2NvcGUuY3VycmVudFN0YXRlIHx8ICRzdGF0ZS4kY3VycmVudC5zZWxmLm5hbWU7XG4gICAgICAgICAgICB2YXIgcHJldmlvdXNTdGF0ZSA9ICRyb290U2NvcGUucHJldmlvdXNTdGF0ZSB8fCAnc3RhcnQnO1xuICAgICAgICAgICAgLy8gSWYgb24gdGhlIHN1bW1hcnkgcGFnZSBnbyB0byB0aGUgbmV4dCBmb3JtIHBhZ2VcbiAgICAgICAgICAgIGlmIChjdXJyZW50U3RhdGUgPT09ICdzb0ZhcicpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBuZXh0U2VjdGlvbiAgPSBmaW5kTmV4dChwcmV2aW91c1N0YXRlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGhhcHBlbnMgaWYgeW91IHJlZnJlc2ggdGhlIHBhZ2Ugb24gdGhlIHNvIGZhciBzY3JlZW4uXG4gICAgICAgICAgICAgICAgICAgIC8vIENvbWUgdXAgd2l0aCBzb21ldGhpbmcgYmV0dGVyPyBzdGFzaCBpbiB1cmw/XG4gICAgICAgICAgICAgICAgICAgIG5leHRTZWN0aW9uID0gJ3N0YXJ0JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGluZGV4ZWRTZWN0aW9uc1tjdXJyZW50U3RhdGVdLnNob3dTdW1tYXJ5QWZ0ZXIpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBvbiBhIGZvcm0gcGFnZSwgZ28gdG8gc3VtbWFyeSBwYWdlXG4gICAgICAgICAgICAgICAgbmV4dFNlY3Rpb24gPSAnc29GYXInO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB5b3UncmUgb24gc29tZSBvdGhlciBwYWdlIGxpa2Ugc3RhcnQgb3Igc2lnbmF0dXJlXG4gICAgICAgICAgICAgICAgLy8gTW92ZSBhaGVhZCBhcyBub3JtYWxcbiAgICAgICAgICAgICAgICBuZXh0U2VjdGlvbiAgPSBmaW5kTmV4dChjdXJyZW50U3RhdGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkc3RhdGUuZ28obmV4dFNlY3Rpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgICAgICAgICAgdmFyIHByZXZpb3VzU3RhdGUgPSAkcm9vdFNjb3BlLnByZXZpb3VzU3RhdGUgfHwgJ3N0YXJ0JztcbiAgICAgICAgICAgICRzdGF0ZS5nbyhwcmV2aW91c1N0YXRlKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnZWF0Q2hhbGxlbmdlQXBwJylcbiAgICAgICAgLmRpcmVjdGl2ZSgnaW5jb21lUXVlc3Rpb25zJywgaW5jb21lRGlyZWN0aXZlKTtcblxuICAgIGZ1bmN0aW9uIGluY29tZURpcmVjdGl2ZSgpIHtcbiAgICAgICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgbWVtYmVyOiAnPSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvaW5jb21lLmh0bWwnLFxuICAgICAgICAgICAgbGluazogbGlua1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBkaXJlY3RpdmU7XG4gICAgfVxuXG4gICAgLy8gbGluay4kaW5qZWN0ID0gWydzY29wZSddO1xuXG4gICAgZnVuY3Rpb24gbGluayhzY29wZSkge1xuICAgICAgICBzY29wZS5pbmNvbWVTb3VyY2VzID0ge1xuICAgICAgICAgICAgd29yazoge1xuICAgICAgICAgICAgICAgIHZhdWxlOid3b3JrJyxcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0Vhcm5pbmdzIGZyb20gd29yazonLFxuICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICBhbm5vdGF0aW9uOiAnQSBjaGlsZCBoYXMgYSBqb2Igd2hlcmUgdGhleSBlYXJuIHNhbGFyeSBvciB3YWdlcy4gUGxlYXNlIHJlcG9ydCBncm9zcyBpbmNvbWUuIFRoaXMgaXMgdGhlIGFtb3VudCBvZiBpbmNvbWUgZWFybmVkIGJlZm9yZSBhbnkgbW9uZXkgaXMgdGFrZW4gb3V0IGZvciB0YXhlcyBvciBkZWR1Y3Rpb25zLiBJbmNsdWRlIHNhbGFyeSwgd2FnZXMsIGFuZCBjYXNoIGJvbnVzZXMuJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzb2NpYWxTZWN1cml0eToge1xuICAgICAgICAgICAgICAgIHZhdWxlOidzb2NpYWxTZWN1cml0eScsXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdTb2NpYWwgU2VjdXJpdHkgRGlzYWJpbGl0eSBQYXltZW50cyBvciBTdXJ2aXZvcuKAmXMgQmVuZWZpdHM6JyxcbiAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnbW9udGhseSddLFxuICAgICAgICAgICAgICAgIC8vIGFubm90YXRpb246ICdBIGNoaWxkIGlzIGJsaW5kIG9yIGRpc2FibGVkIGFuZCByZWNlaXZlcyBTb2NpYWwgU2VjdXJpdHkgYmVuZWZpdHMuJyxcbiAgICAgICAgICAgICAgICAvLyAnIEEgcGFyZW50IGlzIGRpc2FibGVkLCByZXRpcmVkLCBvciBkZWNlYXNlZCwgYW5kIHRoZWlyIGNoaWxkIHJlY2VpdmVzIHNvY2lhbCBzZWN1cml0eSBiZW5lZml0cycsXG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvdGhlclBlcnNvbjoge1xuICAgICAgICAgICAgICAgIHZhdWxlOidvdGhlclBlcnNvbicsXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdJbmNvbWUgZnJvbSBwZXJzb25zIG91dHNpZGUgdGhlIGhvdXNlaG9sZDonLFxuICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICBhbm5vdGF0aW9uOiAnQSBmcmllbmQgb3IgZXh0ZW5kZWQgZmFtaWx5IG1lbWJlciByZWd1bGFybHkgZ2l2ZXMgYSBjaGlsZCBzcGVuZGluZyBtb25leS4nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG90aGVyU291cmNlOiB7XG4gICAgICAgICAgICAgICAgdmF1bGU6J290aGVyU291cmNlJyxcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0luY29tZSBmcm9tIGFueSBvdGhlciBzb3VyY2U6JyxcbiAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgYW5ub3RhdGlvbjogJ0EgY2hpbGQgcmVjZWl2ZXMgaW5jb21lIGZyb20gYSBwcml2YXRlIHBlbnNpb24gZnVuZCwgYW5udWl0eSwgb3IgdHJ1c3QuJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoc2NvcGUubWVtYmVyLmluY29tZVNvdXJjZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzY29wZS5tZW1iZXIuaW5jb21lU291cmNlcyA9IFtdO1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoc2NvcGUuaW5jb21lU291cmNlcykuZm9yRWFjaChmdW5jdGlvbihpbmNvbWVTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICBzY29wZS5tZW1iZXIuaW5jb21lU291cmNlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogaW5jb21lU291cmNlLFxuICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogbnVsbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdlYXRDaGFsbGVuZ2VBcHAnKVxuICAgICAgICAuZGlyZWN0aXZlKCd5ZXNOb0lucHV0JywgeWVzTm9JbnB1dCk7XG5cbiAgICBmdW5jdGlvbiB5ZXNOb0lucHV0ICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6ICc9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy95ZXNuby5odG1sJyxcbiAgICAgICAgfTtcbiAgICB9XG5cbn0pKCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
