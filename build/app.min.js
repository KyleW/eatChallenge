!function(){"use strict";function e(e){function l(e){return function(l,t){throw e(l,t),l}}e.decorator("$exceptionHandler",l),l.$inject=["$delegate"]}function l(e){e.$on("$stateChangeSuccess",function(){document.body.scrollTop=document.documentElement.scrollTop=0}),e.$on("$stateChangeSuccess",function(l,t,r,o,n){e.previousState=o.name,e.currentState=t.name})}function t(e){e.theme("default").primaryPalette("teal").backgroundPalette("brown",{"default":"50"})}function r(e,l){function t(e,l){l.otherwise("/"),e.state("start",{url:"/",views:{main:{templateUrl:"../views/start.html",controller:"mainController"}}}).state("children",{url:"/children",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/children.html",controller:"mainController"}}}).state("childIncome",{url:"/childIncome",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/childIncome.html",controller:"mainController"}}}).state("household",{url:"/household",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/household.html",controller:"mainController"}}}).state("householdIncome",{url:"/household-income",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/householdIncome.html",controller:"householdIncome"}}}).state("disclosure",{url:"/disclosure",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/disclosure.html",controller:"mainController"}}}).state("signature",{url:"/signature",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/signature.html",controller:"mainController"}}}).state("confirmation",{url:"/confirmation",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/confirmation.html",controller:"mainController"}}}).state("export",{url:"/export",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/export.html",controller:"exportController"}}}).state("signup",{url:"/signup",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/signup.html",controller:"mainController"}}}).state("login",{url:"/login",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/login.html",controller:"loginController"}}}).state("soFar",{url:"/so-far",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/soFar.html",controller:"mainController"}}})}t(e,l)}angular.module("eatChallengeApp",["ngCookies","ngCsv","ngMaterial","ngSanitize","ui.router"]).config(r).config(t).config(e).run(l),e.$inject=["$provide"],l.$inject=["$rootScope"],t.$inject=["$mdThemingProvider"],r.$inject=["$stateProvider","$urlRouterProvider"]}();
!function(){"use strict";function t(t,e){t.get("/household/completed").then(function(t){e.completedApplications=t.data})}angular.module("eatChallengeApp").controller("exportController",t),t.$inject=["$http","$scope"]}();
!function(){"use strict";function e(e,o,n,t,a,l){function r(){t.save(s.household).then(function(){a.updateRequiredSections(s.household),a.navigateToNext()})}var s=e;s.household=t.household,s.navigateToNextSection=r;var i={categoryName:"work",headline:"Work Income",question:"earn money through work",sources:[{vaule:"work",checkboxLabel:"Work outside the home in a non-military capacity ",shortLabel:"Earnings from work",frequency:["weekly","biweekly","2x month","monthly"],annotation:"Please report gross income. This is the amount of income earned before any money is taken out for taxes or deductions. Include salary, wages, and cash bonuses."},{vaule:"selfEmployed",shortLabel:"Earnings from self employment",checkboxLabel:"Self-employed",frequency:["weekly","biweekly","2x month","monthly"],annotation:"For household members that are self-employed, report income from that work as a net amount. This is calculated by subtracting the total operating expenses of the business from its gross receipts or revenue."},{vaule:"onStrike",checkboxLabel:"On strike",shortLabel:"Strike Benefits",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"military",checkboxLabel:"In the U.S. military",shortLabel:"Basic pay and cash bonuses",frequency:["weekly","biweekly","2x month","monthly"],annotation:"Please do not include combat pay, FSSA, or private housing allowances."}]},c={categoryName:"publicAssistance",headline:"Public Assistance",question:"receive any public assistance benefits",sources:[{vaule:"unemployment",checkboxLabel:"Unemployment benefits",shortLabel:"Unemployment benefits",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"workersComp",checkboxLabel:"Worker’s compensation",shortLabel:"Worker’s compensation",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"ssi",checkboxLabel:"Supplemental Security Income (SSI)",shortLabel:"Supplemental Security Income (SSI)",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"cashAssistance",checkboxLabel:"Cash assistance from State or local government",shortLabel:"Cash assistance",frequency:["weekly","biweekly","2x month","monthly"],annotation:"This could include TANF or General Assistance money."},{vaule:"veteransBenefits",checkboxLabel:"Veteran’s benefits",shortLabel:"Veteran’s benefits",frequency:["weekly","biweekly","2x month","monthly"]}]},h={categoryName:"alimony",headline:"Alimony",question:"receive alimony payments",sources:[{vaule:"alimony",checkboxLabel:"alimony payments",shortLabel:"Alimony payment",frequency:["weekly","biweekly","2x month","monthly"],annotation:"If income is received from child support or alimony, only court-ordered payments should be reported here. Informal but regular payments should be reported later as “other” income."}]},m={categoryName:"childSupport",headline:"Child Support",question:"receive any child support",sources:[{vaule:"childSupport",checkboxLabel:"any child support",shortLabel:"Child support payment",frequency:["weekly","biweekly","2x month","monthly"],annotation:"If income is received from child support or childSupport, only court-ordered payments should be reported here. Informal but regular payments should be reported later as “other” income."}]},u={categoryName:"retirement",headline:"Pension and Retirement",question:"receive any pension or retirement money",sources:[{vaule:"socialSecurity",checkboxLabel:"Social Security (including railroad retirement and black lung benefits)",shortLabel:"Social security",frequency:["weekly","biweekly","2x month","monthly"],annotation:"Please include railroad retirement and black lung benefits"},{vaule:"privatePension",checkboxLabel:"Private pensions or disability",shortLabel:"Private pensions or disability",frequency:["weekly","biweekly","2x month","monthly"]}]},y={categoryName:"otherIncome",headline:"Other Income",question:"recieve money through any other source",sources:[{vaule:"trusts",checkboxLabel:"Income from trusts or estates",shortLabel:"Income from trusts or estates",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"annuities",checkboxLabel:"Annuities",shortLabel:"Income from annuities",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"investment",checkboxLabel:"Investment income",shortLabel:"Investment income",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"interest",checkboxLabel:"Earned interest",shortLabel:"Earned interest",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"rentalIncome",checkboxLabel:"Rental income",shortLabel:"Rental income",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"otherCash",checkboxLabel:"Regular cash payments from outside household",shortLabel:"Regular cash payments from outside household",frequency:["weekly","biweekly","2x month","monthly"],annotation:"Such cash payments should include regular child support or alimony payments received by the household that are not court-ordered."}]};s.incomeCategories=[i,c,h,m,u,y]}angular.module("eatChallengeApp").controller("householdIncome",e),e.$inject=["$scope","$state","Auth","Household","Sections"]}();
!function(){"use strict";function n(n,o){}angular.module("eatChallengeApp").controller("loginController",[n]),n.$inject=["$location","$scope"]}();
!function(){"use strict";function e(e,o,t,h,n,l,u,i,s){function d(){1===p.household.children.length&&(p.childrenLabel="child"),1===p.household.otherMembers.length&&(p.adultsLabel="adult")}function c(o){o>p.household.children.length&&e.get("/child").then(function(e){var t=e.data;p.household.children.push(t),c(o)})}function r(o){o>p.household.otherMembers.length&&e.get("/household-member").then(function(e){var t=e.data;t={},p.household.otherMembers.push(t),r(o)})}function a(e){return e.children.length>e.childCount&&(e.children=e.children.slice(0,e.childCount)),e}function m(e){return e.otherMembers.length>e.otherMembersCount&&e.otherMembers.slice(0,e.otherMembersCount),e}function g(){i.save(),s.updateRequiredSections(p.household),s.goBack()}function b(){a(p.household),m(p.household),i.save(p.household).then(function(){s.updateRequiredSections(p.household),s.navigateToNext()})}function f(){n.household.completed=!0,b()}var p=n;p.schoolDistrict="Oakland Unified School District",p.household=i.household,p.meansTest=s.meansTest,p.childrenLabel="children",p.adultsLabel="adults",p.goBack=g,p.navigateToNextSection=b,p.submitApplication=f,d(),n.$watch("household.childCount",c),n.$watch("household.otherMembersCount",r)}angular.module("eatChallengeApp").controller("mainController",e),e.$inject=["$http","$interval","$mdDialog","$mdMedia","$scope","$state","Auth","Household","Sections"]}();
!function(){"use strict";function e(e,t,n){var c=e;c.currentState=t.$current.self.name,c.sections=n.sections}angular.module("eatChallengeApp").controller("sideNavController",e),e.$inject=["$scope","$state","Sections"]}();
!function(){"use strict";function e(){var e={scope:{member:"="},restrict:"A",replace:!0,templateUrl:"../views/income.html",link:o};return e}function o(e){e.incomeSources={work:{vaule:"work",label:"Earnings from work",frequency:["weekly","biweekly","2x month","monthly"],annotation:"A child has a job where they earn salary or wages. Please report gross income. This is the amount of income earned before any money is taken out for taxes or deductions. Include salary, wages, and cash bonuses."},socialSecurity:{vaule:"socialSecurity",label:"Social Security Disability Payments or Survivor’s Benefits ",frequency:["monthly"]},otherPerson:{vaule:"otherPerson",label:"Income from persons outside the household",frequency:["weekly","biweekly","2x month","monthly"],annotation:"A friend or extended family member regularly gives a child spending money."},otherSource:{vaule:"otherSource",label:"Income from any other source",frequency:["weekly","biweekly","2x month","monthly"],annotation:"A child receives income from a private pension fund, annuity, or trust."}},0===e.member.incomeSources.length&&(e.member.incomeSources=[],Object.keys(e.incomeSources).forEach(function(o){e.member.incomeSources.push({type:o,amount:null,frequency:null})}))}angular.module("eatChallengeApp").directive("incomeQuestions",e)}();
!function(){"use strict";function e(){return{scope:{model:"="},restrict:"A",replace:!0,templateUrl:"../views/yesno.html"}}angular.module("eatChallengeApp").directive("yesNoInput",e)}();
!function(){"use strict";function n(n){function t(t,u){var s={email:t,password:u};n.post("/user/login",s).success(function(n){o=!0})}function u(){n.post("/user/logout").success(function(){o=!1})}var o=!1,s={login:t,logout:u,user:o};return s}angular.module("eatChallengeApp").service("Auth",n),n.$inject=["$http"]}();
!function(){function e(e){function t(t){return e.post("/household",t)}function o(){this.household=Object.create(h)}var h={};return this.save=t,this.clear=o,this.household={childCount:0,children:[],otherMembersCount:0,otherMembers:[],completedApplication:!1},this}angular.module("eatChallengeApp").service("Household",e),e.$inject=["$http"]}();
!function(){"use strict";function e(e,t){function r(e){c.meansTest=!0;var t=a(e),r=n(e);return t||r?(c.meansTest=!1,l.childIncome.required=!1,l.household.required=!1,void(l.householdIncome.required=!1)):void u.forEach(function(e){e.required=!0})}function a(e){for(var t,r=0;r<e.children.length;r++)if(t=e.children[r],t.assistanceProgram&&t.assistanceProgram.participant)return!0;return!1}function n(e){var t,r=_.filter(e.children,function(e){return e.enrolled===!0});if(0===r.length)return!1;for(var a=0;a<r.length;a++)if(t=e.children[a],!t.specialStatus.fosterChild&&!t.specialStatus.homelessMigrantRunaway&&!t.specialStatus.headStartParticipant)return!1;return!0}function o(e){for(var t=_.findIndex(u,function(t){return t.state===e}),r=t+1;r<u.length;r++)if(u[r].required)return u[r].state;return"confirmation"}function i(){var r,a=e.currentState||t.$current.self.name,n=e.previousState||"start";r="soFar"===a?n?o(n):"start":l[a].showSummaryAfter?"soFar":o(a),t.go(r)}function s(){var r=e.previousState||"start";t.go(r)}var u=[{label:"Let’s Get Started! ",state:"start",completed:!1,required:!0,showSummaryAfter:!1},{label:"Children",state:"children",completed:!1,required:!0,showSummaryAfter:!0},{label:"Household Members",state:"household",completed:!1,required:!0,showSummaryAfter:!0},{label:"Children's Income",state:"childIncome",completed:!1,required:!0,showSummaryAfter:!0},{label:"Household Income",state:"householdIncome",completed:!1,required:!0,showSummaryAfter:!0},{label:"Disclosure",state:"disclosure",completed:!1,required:!0,showSummaryAfter:!1},{label:"Sign and Confirm",state:"signature",completed:!1,required:!0,showSummaryAfter:!1}],l=_.indexBy(u,"state"),c={meansTest:!0,sections:u,indexedSections:l,navigateToNext:i,goBack:s,updateRequiredSections:r};return c}angular.module("eatChallengeApp").service("Sections",e),e.$inject=["$rootScope","$state"]}();
//# sourceMappingURL=data:application/json;base64,
