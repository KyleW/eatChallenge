!function(){"use strict";function e(e){function t(e){return function(t,r){throw e(t,r),t}}e.decorator("$exceptionHandler",t),t.$inject=["$delegate"]}function t(e){e.$on("$stateChangeSuccess",function(){document.body.scrollTop=document.documentElement.scrollTop=0}),e.$on("$stateChangeSuccess",function(t,r,l,o,n){e.previousState=o.name,e.currentState=r.name})}function r(e){e.theme("default").primaryPalette("teal").backgroundPalette("brown",{"default":"50"}).foregroundPalette[3]="rgba(0,0,0,0.67)"}function l(e,t){function r(e,t){t.otherwise("/"),e.state("start",{url:"/",views:{main:{templateUrl:"../views/start.html",controller:"mainController"}}}).state("children",{url:"/children",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/children.html",controller:"mainController"}}}).state("childIncome",{url:"/childIncome",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/childIncome.html",controller:"mainController"}}}).state("household",{url:"/household",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/household.html",controller:"mainController"}}}).state("householdIncome",{url:"/household-income",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/householdIncome.html",controller:"householdIncome"}}}).state("disclosure",{url:"/disclosure",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/disclosure.html",controller:"mainController"}}}).state("signature",{url:"/signature",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/signature.html",controller:"mainController"}}}).state("confirmation",{url:"/confirmation",views:{main:{templateUrl:"../views/confirmation.html",controller:"mainController"}}}).state("export",{url:"/export",views:{main:{templateUrl:"../views/export.html",controller:"exportController"}}}).state("signup",{url:"/signup",views:{main:{templateUrl:"../views/signup.html",controller:"signupController"}}}).state("login",{url:"/login",views:{main:{templateUrl:"../views/login.html",controller:"loginController"}}}).state("soFar",{url:"/so-far",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/soFar.html",controller:"soFarController"}}}).state("soFar-2",{url:"/so-far-2",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/soFar.html",controller:"soFarController"}}}).state("saveAndExit",{url:"/save-and-exit",views:{main:{templateUrl:"../views/save-and-exit.html",controller:"mainController"}}})}r(e,t)}angular.module("eatChallengeApp",["ngCookies","ngCsv","ngMaterial","ngSanitize","ui.router"]).config(l).config(r).config(e).run(t),e.$inject=["$provide"],t.$inject=["$rootScope"],r.$inject=["$mdThemingProvider"],l.$inject=["$stateProvider","$urlRouterProvider"]}();
!function(){"use strict";function e(){return{scope:{model:"="},restrict:"A",replace:!0,templateUrl:"../views/yesno.html"}}angular.module("eatChallengeApp").directive("yesNoInput",e)}();
!function(){"use strict";function t(t,e){t.get("/household/completed").then(function(t){e.completedApplications=t.data})}angular.module("eatChallengeApp").controller("exportController",t),t.$inject=["$http","$scope"]}();
!function(){"use strict";function e(e,o,t,n,a,r,s,i){function l(o){var t=e.confirm().title("Ready to go on?").textContent("It looks like you have some errors or missing information in this section. Do you want to fix it now?").ariaLabel("Ready to go on?").targetEvent(o).ok("Move Ahead Anyway").cancel("Go Back and Fix It Now");return e.show(t)}function c(){var e;if(b.form&&!b.form.$valid)return!0;for(var o=0;o<t.household.otherMembers.length;o++){e=t.household.otherMembers[o];for(var n in e.incomeCategory)if(void 0===e.incomeCategory[n].showCheckboxes)return!0}return!1}function h(){b.showErrors=!0,document.body.scrollTop=document.documentElement.scrollTop=0}function m(){r.save(),s.updateRequiredSections(),s.navigateToNext()}function u(){c()?l().then(m,h):m()}function y(){r.save(),s.updateRequiredSections(),s.goBack()}var b=n;b.numberRegex="^[1-9][0-9]*$",b.navigateToNextSection=u;var d={categoryName:"work",headline:"Work Income",question:"earn money through work",sources:[{value:"work",checkboxLabel:"Work outside the home in a non-military capacity ",shortLabel:"Earnings from work",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"Please report gross income. This is the amount of income earned before any money is taken out for taxes or deductions. Include salary, wages, and cash bonuses."},{value:"selfEmployed",shortLabel:"Earnings from self employment",checkboxLabel:"Self-employed",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"For household members that are self-employed, report income from that work as a net amount. This is calculated by subtracting the total operating expenses of the business from its gross receipts or revenue."},{value:"onStrike",checkboxLabel:"On strike",shortLabel:"Strike Benefits",frequency:["weekly","every 2 weeks","2x month","monthly"]},{value:"military",checkboxLabel:"In the U.S. military",shortLabel:"Basic pay and cash bonuses",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"Please do not include combat pay, FSSA, or private housing allowances."}]},k={categoryName:"publicAssistance",headline:"Public Assistance",question:"receive any public assistance benefits",sources:[{value:"unemployment",checkboxLabel:"Unemployment benefits",shortLabel:"Unemployment benefits",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"workersComp",checkboxLabel:"Worker’s compensation",shortLabel:"Worker’s compensation",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"ssi",checkboxLabel:"Supplemental Security Income (SSI)",shortLabel:"Supplemental Security Income (SSI)",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"cashAssistance",checkboxLabel:"Cash assistance from State or local government",shortLabel:"Cash assistance",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"This could include TANF or General Assistance money."},{value:"veteransBenefits",checkboxLabel:"Veteran’s benefits",shortLabel:"Veteran’s benefits",frequency:["weekly","every 2 weeks","twice a month","monthly"]}]},v={categoryName:"alimony",headline:"Alimony",question:"receive alimony payments",sources:[{value:"alimony",checkboxLabel:"alimony payments",shortLabel:"Alimony payment",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"If income is received from alimony, only court-ordered payments should be reported here. Informal but regular payments should be reported later as “other” income."}]},w={categoryName:"childSupport",headline:"Child Support",question:"receive any child support",sources:[{value:"childSupport",checkboxLabel:"any child support",shortLabel:"Child support payment",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"If income is received from child support, only court-ordered payments should be reported here. Informal but regular payments should be reported later as “other” income."}]},p={categoryName:"retirement",headline:"Pension and Retirement",question:"receive any pension or retirement money",sources:[{value:"socialSecurity",checkboxLabel:"Social Security",shortLabel:"Social security",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"Please include railroad retirement and black lung benefits"},{value:"privatePension",checkboxLabel:"Private pensions or disability",shortLabel:"Private pensions or disability",frequency:["weekly","every 2 weeks","twice a month","monthly"]}]},f={categoryName:"otherIncome",headline:"Other Income",question:"recieve money through any other source",sources:[{value:"trusts",checkboxLabel:"Income from trusts or estates",shortLabel:"Income from trusts or estates",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"annuities",checkboxLabel:"Annuities",shortLabel:"Income from annuities",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"investment",checkboxLabel:"Investment income",shortLabel:"Investment income",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"interest",checkboxLabel:"Earned interest",shortLabel:"Earned interest",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"rentalIncome",checkboxLabel:"Rental income",shortLabel:"Rental income",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"otherCash",checkboxLabel:"Regular cash payments from outside household",shortLabel:"Regular cash payments from outside household",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"Such cash payments should include regular child support or alimony payments received by the household that are not court-ordered."}]};b.goBack=y,b.incomeCategories=[d,k,v,w,p,f]}angular.module("eatChallengeApp").controller("householdIncome",e),e.$inject=["$mdDialog","$mdMedia","$rootScope","$scope","$state","Household","Sections"]}();
!function(){"use strict";function e(e,s,n,o,a){function l(){function e(e){console.log("calls success"),n.setCredentials(e.data.user),o.retrieveForUser(e.data.user),r.loginForm={},r.message="successfully logged in",s.go("children")}function a(){n.clearCredentials(),r.message="Please check your username and password and try again."}n.login(t.email,t.password).then(e,a)}var r=e,t={};r.submit=l,r.user=t}angular.module("eatChallengeApp").controller("loginController",e),e.$inject=["$scope","$state","auth","Household","Sections"]}();
!function(){"use strict";function e(e,o,n,t,r,i,l,h,a){function c(o){o>t.household.children.length&&e.get("/child").then(function(e){var n=e.data;n.incomeSources=Object.keys(p.childIncomeSources).map(function(e){return{type:e,amount:null,frequency:null}}),t.household.children.push(n),c(o)})}function u(o){o>t.household.otherMembers.length&&e.get("/household-member").then(function(e){var n=e.data;n={},t.household.otherMembers.push(n),u(o)})}function s(e){return e.children.length>e.childCount&&(e.children=e.children.slice(0,e.childCount)),e}function d(e){return e.otherMembers.length>e.otherMembersCount&&e.otherMembers.slice(0,e.otherMembersCount),e}function m(e){var n=o.confirm().title("Ready to go on?").textContent("It looks like you have some errors or missing information in this section. Do you want to fix it now?").ariaLabel("Ready to go on?").targetEvent(e).ok("Move Ahead Anyway").cancel("Go Back and Fix It Now");return o.show(n)}function f(){s(t.household),d(t.household),h.save(),a.updateRequiredSections(),a.goBack()}function y(){var e;if("childIncome"===t.currentState){for(var o=0;o<t.household.children.length;o++){if(e=t.household.children[o],void 0===e.earnsIncome)return!0;if(e.earnsIncome===!0&&!p.form.$valid)return!0}return!1}if(p.form&&!p.form.$valid)return!0;if("children"===t.currentState)for(var n=0;n<t.household.children.length;n++)if(e=t.household.children[n],void 0===e.enrolled)return!0;return!1}function v(){p.showErrors=!0,document.body.scrollTop=document.documentElement.scrollTop=0}function g(){h.save(),a.updateRequiredSections(),a.navigateToNext()}function w(){s(t.household),d(t.household),y()?m().then(g,v):g()}function b(){s(t.household),d(t.household),t.household.completed=!0,y()?m().then(g,v):(h.submit(),a.updateRequiredSections(),a.navigateToNext())}var p=r;p.schoolDistrict="Oakland Unified School District",p.goBack=f,p.navigateToNextSection=w,p.submitApplication=b,p.showErrors=!1,p.numberRegex="^[1-9][0-9]*$",p.childIncomeSources={work:{vaule:"work",label:"Earnings from work:",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"A child has a job where they earn salary or wages. Please report gross income. This is the amount of income earned before any money is taken out for taxes or deductions. Include salary, wages, and cash bonuses."},socialSecurity:{vaule:"socialSecurity",label:"Social Security Disability Payments or Survivor’s Benefits:",frequency:["monthly"]},otherPerson:{vaule:"otherPerson",label:"Income from persons outside the household:",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"A friend or extended family member regularly gives a child spending money."},otherSource:{vaule:"otherSource",label:"Income from any other source:",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"A child receives income from a private pension fund, annuity, or trust."}},r.$watch("household.childCount",c),r.$watch("household.otherMembersCount",u)}angular.module("eatChallengeApp").controller("mainController",e),e.$inject=["$http","$mdDialog","$mdMedia","$rootScope","$scope","$state","$timeout","Household","Sections"]}();
!function(){"use strict";function e(e,t,n){var c=e;c.currentState=t.$current.self.name,c.sections=n.sections}angular.module("eatChallengeApp").controller("sideNavController",e),e.$inject=["$scope","$state","Sections"]}();
!function(){"use strict";function e(e,a,s,n){function t(){function e(e){a.setCredentials(e.data.user),s.save(),r.signupForm={},r.message="successfully created an account",n.goBack()}function t(e){r.error=!0,r.message="There's already an account associated with this email. Please log in or try again with a different address."}r.error=!1,a.signup(o.email,o.password).then(e,t)}var r=e,o={};r.submit=t,r.user=o}angular.module("eatChallengeApp").controller("signupController",e),e.$inject=["$scope","auth","Household","Sections"]}();
!function(){"use strict";function e(e,o,n,t,r,a,c,i,h){function u(){1===r.household.children.length&&(m.childrenLabel="child"),1===r.household.otherMembers.length&&(m.adultsLabel="adult")}function l(){function e(e){return e.amount*o[e.frequency]}var o={weekly:52,"every 2 weeks":26,"twice a month":24,monthly:12},n=0;return r.household.children.forEach(function(o){o.earnsIncome&&o.incomeSources.forEach(function(o){o.amount>0&&(n+=e(o))})}),r.household.otherMembers.forEach(function(o){if(o.incomeCategory){var t;for(var r in o.incomeCategory){t=o.incomeCategory[r];for(var a in t)if("showCheckboxes"!==a){var c=t[a];n+=e(c)}}}}),Math.round(n)}function s(e){var o=0;return r.household.children.forEach(function(e){e.earnsIncome&&o++}),r.household.otherMembers.forEach(function(e){e.incomeCategory&&Object.keys(e.incomeCategory).length>0&&o++}),o}function d(){i.save(),h.updateRequiredSections(),h.goBack()}function f(){i.save(),h.updateRequiredSections(),h.navigateToNext()}var m=a;m.meansTest=h.meansTest,m.childrenLabel="children",m.adultsLabel="adults",m.incomeEarnersCount=s(r.household),m.incomeEstimate=l(r.household),m.goBack=d,m.navigateToNextSection=f,u()}angular.module("eatChallengeApp").controller("soFarController",e),e.$inject=["$http","$interval","$mdDialog","$mdMedia","$rootScope","$scope","$state","Household","Sections"]}();
!function(){"use strict";function t(t,e,o,u){function n(){u.logout(),r.loggedIn=u.getUserStatus(),o.go("saveAndExit")}var r=e;r.loggedIn=u.getUserStatus(),r.logout=n,r.user=t.user,t.$watch("user",function(){r.loggedIn=u.getUserStatus(),r.user=t.user})}angular.module("eatChallengeApp").controller("userControlsController",t),t.$inject=["$rootScope","$scope","$state","auth"]}();
!function(){"use strict";function e(e,r,n,t,u,s){function o(){var e=p();e&&(t.user=e,s.retrieveForUser(e))}function i(){return t.user?!0:!1}function c(){return t.user}function a(e,n){return r.post("/user/signup",{username:e,password:n})}function l(e,n){var t={username:e,password:n};return r.post("/user/login",t)}function f(){function e(){d(),s.clear()}function n(){d(),s.clear()}return r.get("user/logout").then(e,n)}function g(r){return t.user=r,e.putObject("user",r)}function p(){return e.getObject("user")}function d(){return t.user=null,e.remove("user")}t.user=null,o();var v={};return v.isLoggedIn=i,v.getUserStatus=c,v.signup=a,v.login=l,v.logout=f,v.init=o,v.setCredentials=g,v.clearCredentials=d,v}angular.module("eatChallengeApp").service("auth",e),e.$inject=["$cookies","$http","$q","$rootScope","$state","Household"]}();
!function(){function e(e,o){function u(u){e.get("/household/"+u._id).then(function(e){o.household=e.data})}function t(){return o.user?(o.household.userId=o.user._id,e.post("/household",o.household).then(function(e){o.household=e.data})):void 0}function h(){return o.user&&(o.household.userId=o.user._id),e.post("/household",o.household)}function n(){o.household=Object.create(r)}var r={childCount:null,children:[],otherMembersCount:null,otherMembers:[],completedApplication:!1};o.household=angular.copy(r);var l={};return l.retrieveForUser=u,l.save=t,l.clear=n,l.submit=h,l}angular.module("eatChallengeApp").service("Household",e),e.$inject=["$http","$rootScope"]}();
!function(){"use strict";function e(e,r){function t(){var r=e.household;d.meansTest=!0;var t=a(r),o=n(r);return t||o?(d.meansTest=!1,l.childIncome.required=!1,l.household.required=!1,l.householdIncome.required=!1,void(l["soFar-2"].required=!1)):void u.forEach(function(e){e.required=!0})}function a(e){for(var r,t=0;t<e.children.length;t++)if(r=e.children[t],r.assistanceProgram&&r.assistanceProgram.participant)return!0;return!1}function n(e){var r,t=_.filter(e.children,function(e){return e.enrolled===!0});if(0===t.length)return!1;for(var a=0;a<t.length;a++)if(r=e.children[a],!r.specialStatus.fosterChild&&!r.specialStatus.homelessMigrantRunaway&&!r.specialStatus.headStartParticipant)return!1;return!0}function o(e){for(var r=_.findIndex(u,function(r){return r.state===e}),t=r+1;t<u.length;t++)if(u[t].required)return u[t].state;return"confirmation"}function i(){var t,a=e.currentState||r.$current.self.name;e.previousState||"start";t=o(a),r.go(t)}function s(){var t="start",a=e.currentState,n=["login","signup"];if(-1!==n.indexOf(a))t=e.previousState||"start";else{var o=_.findIndex(u,function(e){return e.state===a});for(t=u[o-1].state;l[t].required===!1;)o-=1,t=u[o-1].state}r.go(t)}var u=[{label:"Let’s Get Started! ",state:"start",completed:!1,required:!0,showSummaryAfter:!1},{label:"Children",state:"children",completed:!1,required:!0,showSummaryAfter:!1},{label:"Household Members",state:"household",completed:!1,required:!0,showSummaryAfter:!1},{label:"What You've Entered So Far",state:"soFar",completed:!1,required:!0,showSummaryAfter:!1},{label:"Children's Income",state:"childIncome",completed:!1,required:!0,showSummaryAfter:!1},{label:"Household Income",state:"householdIncome",completed:!1,required:!0,showSummaryAfter:!1},{label:"Summary",state:"soFar-2",completed:!1,required:!0,showSummaryAfter:!1},{label:"Disclosure",state:"disclosure",completed:!1,required:!0,showSummaryAfter:!1},{label:"Sign and Confirm",state:"signature",completed:!1,required:!0,showSummaryAfter:!1}],l=_.indexBy(u,"state"),d={meansTest:!0,sections:u,indexedSections:l,navigateToNext:i,goBack:s,updateRequiredSections:t};return d}angular.module("eatChallengeApp").service("Sections",e),e.$inject=["$rootScope","$state"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImRpcmVjdGl2ZXMveWVzbm8uanMiLCJjb250cm9sbGVycy9leHBvcnQuanMiLCJjb250cm9sbGVycy9ob3VzZWhvbGRJbmNvbWUuanMiLCJjb250cm9sbGVycy9sb2dpbi5qcyIsImNvbnRyb2xsZXJzL21haW4uanMiLCJjb250cm9sbGVycy9zaWRlbmF2LmpzIiwiY29udHJvbGxlcnMvc2lnbnVwLmpzIiwiY29udHJvbGxlcnMvc29GYXIuanMiLCJjb250cm9sbGVycy91c2VyQ29udHJvbHMuanMiLCJzZXJ2aWNlcy9hdXRoLmpzIiwic2VydmljZXMvaG91c2Vob2xkLmpzIiwic2VydmljZXMvc2VjdGlvbnMuanMiXSwibmFtZXMiOlsiZXJyb3JEZWNvcmF0b3IiLCIkcHJvdmlkZSIsImRlY29yYXRlRXJyb3IiLCIkZGVsZWdhdGUiLCJleGNlcHRpb24iLCJjYXVzZSIsImRlY29yYXRvciIsIiRpbmplY3QiLCJzY3JvbGxlciIsIiRyb290U2NvcGUiLCIkb24iLCJkb2N1bWVudCIsImJvZHkiLCJzY3JvbGxUb3AiLCJkb2N1bWVudEVsZW1lbnQiLCJldiIsInRvIiwidG9QYXJhbXMiLCJmcm9tIiwiZnJvbVBhcmFtcyIsInByZXZpb3VzU3RhdGUiLCJuYW1lIiwiY3VycmVudFN0YXRlIiwibWF0ZXJpYWxEZXNpZ25UaGVtZXIiLCIkbWRUaGVtaW5nUHJvdmlkZXIiLCJ0aGVtZSIsInByaW1hcnlQYWxldHRlIiwiYmFja2dyb3VuZFBhbGV0dGUiLCJkZWZhdWx0IiwiZm9yZWdyb3VuZFBhbGV0dGUiLCJyb3V0ZXJDb25maWciLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsInJvdXRlciIsIm90aGVyd2lzZSIsInN0YXRlIiwidXJsIiwidmlld3MiLCJtYWluIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwidXNlci1jb250cm9scyIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCJydW4iLCJ5ZXNOb0lucHV0Iiwic2NvcGUiLCJtb2RlbCIsInJlc3RyaWN0IiwicmVwbGFjZSIsImRpcmVjdGl2ZSIsImV4cG9ydENvbnRyb2xsZXIiLCIkaHR0cCIsIiRzY29wZSIsImdldCIsInRoZW4iLCJyZXNwb25zZSIsImNvbXBsZXRlZEFwcGxpY2F0aW9ucyIsImRhdGEiLCJob3VzZWhvbGRJbmNvbWUiLCIkbWREaWFsb2ciLCIkbWRNZWRpYSIsIiRzdGF0ZSIsIkhvdXNlaG9sZCIsIlNlY3Rpb25zIiwiSG91c2Vob2xkSW5jb21lIiwic2hvd0NvbmZpcm0iLCJjb25maXJtIiwidGl0bGUiLCJ0ZXh0Q29udGVudCIsImFyaWFMYWJlbCIsInRhcmdldEV2ZW50Iiwib2siLCJjYW5jZWwiLCJzaG93IiwiaXNJbnZhbGlkRm9ybSIsIm1lbWJlciIsInZtIiwiZm9ybSIsIiR2YWxpZCIsImkiLCJob3VzZWhvbGQiLCJvdGhlck1lbWJlcnMiLCJsZW5ndGgiLCJrZXkiLCJpbmNvbWVDYXRlZ29yeSIsInVuZGVmaW5lZCIsInNob3dDaGVja2JveGVzIiwiZml4SXRIYW5kbGVyIiwic2hvd0Vycm9ycyIsIm1vdmVBaGVhZEhhbmRsZXIiLCJzYXZlIiwidXBkYXRlUmVxdWlyZWRTZWN0aW9ucyIsIm5hdmlnYXRlVG9OZXh0IiwibmF2aWdhdGVUb05leHRTZWN0aW9uIiwiZ29CYWNrIiwibnVtYmVyUmVnZXgiLCJ3b3JrIiwiY2F0ZWdvcnlOYW1lIiwiaGVhZGxpbmUiLCJxdWVzdGlvbiIsInNvdXJjZXMiLCJ2YWx1ZSIsImNoZWNrYm94TGFiZWwiLCJzaG9ydExhYmVsIiwiZnJlcXVlbmN5IiwiYW5ub3RhdGlvbiIsInB1YmxpY0Fzc2lzdGFuY2UiLCJhbGltb255IiwiY2hpbGRTdXBwb3J0IiwicmV0aXJlbWVudCIsIm90aGVySW5jb21lIiwiaW5jb21lQ2F0ZWdvcmllcyIsImxvZ2luQ29udHJvbGxlciIsImF1dGgiLCJzdWJtaXQiLCJzdWNjZXNzSGFuZGxlciIsImNvbnNvbGUiLCJsb2ciLCJzZXRDcmVkZW50aWFscyIsInVzZXIiLCJyZXRyaWV2ZUZvclVzZXIiLCJsb2dpbkZvcm0iLCJtZXNzYWdlIiwiZ28iLCJlcnJvckhhbmRsZXIiLCJjbGVhckNyZWRlbnRpYWxzIiwibG9naW4iLCJlbWFpbCIsInBhc3N3b3JkIiwibWFpbkNvbnRyb2xsZXIiLCIkdGltZW91dCIsImFkZENoaWxkIiwibmV3VmFsIiwiY2hpbGRyZW4iLCJuZXdDaGlsZCIsImluY29tZVNvdXJjZXMiLCJPYmplY3QiLCJrZXlzIiwiY2hpbGRJbmNvbWVTb3VyY2VzIiwibWFwIiwiaW5jb21lU291cmNlIiwidHlwZSIsImFtb3VudCIsInB1c2giLCJhZGRPdGhlck1lbWJlciIsIm5ld0hvdXNlaG9sZE1lbWJlciIsInRyaW1DaGlsZHJlbiIsImNoaWxkQ291bnQiLCJzbGljZSIsInRyaW1PdGhlck1lbWJlcnMiLCJvdGhlck1lbWJlcnNDb3VudCIsImNoaWxkIiwiaiIsImVhcm5zSW5jb21lIiwiZW5yb2xsZWQiLCJzdWJtaXRBcHBsaWNhdGlvbiIsImNvbXBsZXRlZCIsInNjaG9vbERpc3RyaWN0IiwidmF1bGUiLCJsYWJlbCIsInNvY2lhbFNlY3VyaXR5Iiwib3RoZXJQZXJzb24iLCJvdGhlclNvdXJjZSIsIiR3YXRjaCIsInNpZGVOYXZDb250cm9sbGVyIiwiJGN1cnJlbnQiLCJzZWxmIiwic2VjdGlvbnMiLCJzaWdudXBDb250cm9sbGVyIiwic2lnbnVwRm9ybSIsImVyciIsImVycm9yIiwic2lnbnVwIiwic29GYXJDb250cm9sbGVyIiwiJGludGVydmFsIiwiaW5pdCIsImNoaWxkcmVuTGFiZWwiLCJhZHVsdHNMYWJlbCIsImVzdGltYXRlSW5jb21lIiwiZ2V0VG90YWxmb3JTb3VyY2UiLCJzb3VyY2UiLCJmcmVxdWVuY3lNdWxpdHBsaWVyIiwid2Vla2x5IiwiZXZlcnkgMiB3ZWVrcyIsInR3aWNlIGEgbW9udGgiLCJtb250aGx5IiwiZXN0aW1hdGVkQW5udWFsSW5jb21lIiwiZm9yRWFjaCIsImsiLCJNYXRoIiwicm91bmQiLCJjb3VudEVhcm5lcnMiLCJlYXJuZXJzQ291bnQiLCJtZWFuc1Rlc3QiLCJpbmNvbWVFYXJuZXJzQ291bnQiLCJpbmNvbWVFc3RpbWF0ZSIsInVzZXJDb250cm9sc0NvbnRyb2xsZXIiLCJsb2dvdXQiLCJsb2dnZWRJbiIsImdldFVzZXJTdGF0dXMiLCJBdXRoU2VydmljZSIsIiRjb29raWVzIiwiJHEiLCJnZXRDcmVkZW50aWFscyIsImlzTG9nZ2VkSW4iLCJwb3N0IiwidXNlcm5hbWUiLCJjbGVhciIsInB1dE9iamVjdCIsImdldE9iamVjdCIsInJlbW92ZSIsInNlcnZpY2UiLCJob3VzZWhvbGRTZXJ2aWNlIiwiX2lkIiwidXNlcklkIiwiY3JlYXRlIiwiY29tcGxldGVkQXBwbGljYXRpb24iLCJjb3B5Iiwic2VjdGlvbnNTZXJ2aWNlIiwiYXNzaXN0YW5jZVByb2dyYW1Ib3VzZWhvbGQiLCJpc0Fzc2lzdGFuY2VIb3VzZWhvbGQiLCJjYXRlZ29yaWNhbGx5UXVhbGlmaWVkIiwiYWxsU3R1ZGVudHNDYXRlZ29yaWNhbGx5UXVhbGlmeSIsImluZGV4ZWRTZWN0aW9ucyIsInJlcXVpcmVkIiwic2VjdGlvbiIsImN1cnJlbnRDaGlsZCIsImFzc2lzdGFuY2VQcm9ncmFtIiwicGFydGljaXBhbnQiLCJlbnJvbGxlZENoaWxkcmVuIiwiXyIsImZpbHRlciIsImMiLCJzcGVjaWFsU3RhdHVzIiwiZm9zdGVyQ2hpbGQiLCJob21lbGVzc01pZ3JhbnRSdW5hd2F5IiwiaGVhZFN0YXJ0UGFydGljaXBhbnQiLCJmaW5kTmV4dCIsImN1cnJlbnRJbmRleCIsImZpbmRJbmRleCIsIm5leHRTZWN0aW9uIiwib3V0T2ZGbG93U3RhdGVzIiwiaW5kZXhPZiIsInNob3dTdW1tYXJ5QWZ0ZXIiLCJpbmRleEJ5Il0sIm1hcHBpbmdzIjoiQ0FBQSxXQUNJLFlBWUEsU0FBU0EsR0FBZUMsR0FHcEIsUUFBU0MsR0FBY0MsR0FDbkIsTUFBTyxVQUFTQyxFQUFXQyxHQUV2QixLQURBRixHQUFVQyxFQUFXQyxHQUNmRCxHQUxkSCxFQUFTSyxVQUFV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QnBGLE1BQU8sYUFDUDlILE1BQU8sYUFDUDJILFdBQVcsRUFDWG9FLFVBQVUsRUFDVm1CLGtCQUFrQixJQUdsQnBGLE1BQU8sbUJBQ1A5SCxNQUFPLFlBQ1AySCxXQUFXLEVBQ1hvRSxVQUFVLEVBQ1ZtQixrQkFBa0IsSUFJdEJwQixFQUFrQk8sRUFBRWMsUUFBUTdFLEVBQVUsU0FFdEM0QyxHQUNBbEIsV0FBVyxFQUNYMUIsU0FBVUEsRUFDVndELGdCQUFpQkEsRUFDakJuSSxlQUFnQkEsRUFDaEJFLE9BQVFBLEVBQ1JILHVCQUF3QkEsRUFHNUIsT0FBT3dILEdBbkZYM0ssUUFDS0MsT0FBTyxtQkFDUDBLLFFBQVEsV0FBWU8sR0FFekJBLEVBQWdCck4sU0FBVyxhQUFjIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcsWyduZ0Nvb2tpZXMnLCAnbmdDc3YnLCduZ01hdGVyaWFsJywgJ25nU2FuaXRpemUnLCAndWkucm91dGVyJ10pXG4gICAgLmNvbmZpZyhyb3V0ZXJDb25maWcpXG4gICAgLmNvbmZpZyhtYXRlcmlhbERlc2lnblRoZW1lcilcbiAgICAuY29uZmlnKGVycm9yRGVjb3JhdG9yKVxuICAgIC5ydW4oc2Nyb2xsZXIpO1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAvL1Nob3cgc291cmNlIG1hcHMgaW4gZXJyb3JzXG4gICAgZXJyb3JEZWNvcmF0b3IuJGluamVjdCA9IFsnJHByb3ZpZGUnXTtcbiAgICBmdW5jdGlvbiBlcnJvckRlY29yYXRvcigkcHJvdmlkZSkge1xuICAgICAgICAkcHJvdmlkZS5kZWNvcmF0b3IoJyRleGNlcHRpb25IYW5kbGVyJywgZGVjb3JhdGVFcnJvcik7XG4gICAgICAgIGRlY29yYXRlRXJyb3IuJGluamVjdCA9IFsnJGRlbGVnYXRlJ107XG4gICAgICAgIGZ1bmN0aW9uIGRlY29yYXRlRXJyb3IoJGRlbGVnYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXhjZXB0aW9uLCBjYXVzZSkge1xuICAgICAgICAgICAgICAgICRkZWxlZ2F0ZShleGNlcHRpb24sIGNhdXNlKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy9Sb3V0aW5nIGVuaGFuY2VtZW50c1xuICAgIHNjcm9sbGVyLiRpbmplY3QgPSBbJyRyb290U2NvcGUnXTtcbiAgICBmdW5jdGlvbiBzY3JvbGxlcigkcm9vdFNjb3BlKSB7XG4gICAgICAgIC8vIHNjcm9sbCB0byB0aGUgdG9wIG9uIHBhZ2UgdHJhbnNpdGlvblxuICAgICAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3VjY2VzcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID0gMDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gS2VlcCB0cmFjayBvZiBoaXN0b3J5XG4gICAgICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24oZXYsIHRvLCB0b1BhcmFtcywgZnJvbSwgZnJvbVBhcmFtcykge1xuICAgICAgICAgICAgJHJvb3RTY29wZS5wcmV2aW91c1N0YXRlID0gZnJvbS5uYW1lO1xuICAgICAgICAgICAgJHJvb3RTY29wZS5jdXJyZW50U3RhdGUgPSB0by5uYW1lO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvL0NvbG9yIHRoZW1lcyBmb3IgYnV0dG9uc1xuICAgIG1hdGVyaWFsRGVzaWduVGhlbWVyLiRpbmplY3QgPSBbJyRtZFRoZW1pbmdQcm92aWRlciddO1xuICAgIGZ1bmN0aW9uIG1hdGVyaWFsRGVzaWduVGhlbWVyKCRtZFRoZW1pbmdQcm92aWRlcikge1xuICAgICAgICAkbWRUaGVtaW5nUHJvdmlkZXIudGhlbWUoJ2RlZmF1bHQnKS5wcmltYXJ5UGFsZXR0ZSgndGVhbCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5iYWNrZ3JvdW5kUGFsZXR0ZSgnYnJvd24nLCB7J2RlZmF1bHQnOiAnNTAnfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLmZvcmVncm91bmRQYWxldHRlWzNdID0gJ3JnYmEoMCwwLDAsMC42NyknO1xuICAgIH1cblxuICAgIC8vIFVJIHJvdXRlclxuICAgIHJvdXRlckNvbmZpZy4kaW5qZWN0ID0gWyckc3RhdGVQcm92aWRlcicsICckdXJsUm91dGVyUHJvdmlkZXInXTtcbiAgICBmdW5jdGlvbiByb3V0ZXJDb25maWcgKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcblxuICAgICAgICByb3V0ZXIoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcik7XG4gICAgICAgIC8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiByb3V0ZXIoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xuICAgICAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xuXG4gICAgICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdzdGFydCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvJyxcbiAgICAgICAgICAgICAgICB2aWV3czp7XG4gICAgICAgICAgICAgICAgICAgIC8vICd1c2VyLWNvbnRyb2xzJzoge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy91c2VyLWNvbnRyb2xzLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29udHJvbGxlcjogJ3VzZXJDb250cm9sc0NvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICdzaWRlLW5hdic6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lkZU5hdi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnRyb2xsZXI6ICdzaWRlTmF2Q29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3N0YXJ0Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ21haW5Db250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY2hpbGRyZW4nLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2NoaWxkcmVuJyxcbiAgICAgICAgICAgICAgICB2aWV3czp7XG4gICAgICAgICAgICAgICAgICAgICd1c2VyLWNvbnRyb2xzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy91c2VyLWNvbnRyb2xzLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3VzZXJDb250cm9sc0NvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZGVOYXYuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb250cm9sbGVyOiAnc2lkZU5hdkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2NoaWxkcmVuLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnbWFpbkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NoaWxkSW5jb21lJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9jaGlsZEluY29tZScsXG4gICAgICAgICAgICAgICAgdmlld3M6e1xuICAgICAgICAgICAgICAgICAgICAndXNlci1jb250cm9scyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvdXNlci1jb250cm9scy5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICd1c2VyQ29udHJvbHNDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgJ3NpZGUtbmF2Jzoge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zaWRlTmF2Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29udHJvbGxlcjogJ3NpZGVOYXZDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgICAgICAgICAnbWFpbic6IHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9jaGlsZEluY29tZS5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ21haW5Db250cm9sbGVyJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdob3VzZWhvbGQnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2hvdXNlaG9sZCcsXG4gICAgICAgICAgICAgICAgdmlld3M6e1xuICAgICAgICAgICAgICAgICAgICAndXNlci1jb250cm9scyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvdXNlci1jb250cm9scy5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICd1c2VyQ29udHJvbHNDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAvLyAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZGVOYXYuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb250cm9sbGVyOiAnc2lkZU5hdkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9ob3VzZWhvbGQuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnbWFpbkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdob3VzZWhvbGRJbmNvbWUnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2hvdXNlaG9sZC1pbmNvbWUnLFxuICAgICAgICAgICAgICAgIHZpZXdzOntcbiAgICAgICAgICAgICAgICAgICAgJ3VzZXItY29udHJvbHMnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3VzZXItY29udHJvbHMuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAndXNlckNvbnRyb2xzQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gJ3NpZGUtbmF2Jzoge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zaWRlTmF2Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29udHJvbGxlcjogJ3NpZGVOYXZDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgICAgICAgICAnbWFpbic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvaG91c2Vob2xkSW5jb21lLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2hvdXNlaG9sZEluY29tZSdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2Rpc2Nsb3N1cmUnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2Rpc2Nsb3N1cmUnLFxuICAgICAgICAgICAgICAgIHZpZXdzOntcbiAgICAgICAgICAgICAgICAgICAgJ3VzZXItY29udHJvbHMnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3VzZXItY29udHJvbHMuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAndXNlckNvbnRyb2xzQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gJ3NpZGUtbmF2Jzoge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zaWRlTmF2Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29udHJvbGxlcjogJ3NpZGVOYXZDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgICAgICAgICAnbWFpbic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvZGlzY2xvc3VyZS5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdtYWluQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ3NpZ25hdHVyZScsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvc2lnbmF0dXJlJyxcbiAgICAgICAgICAgICAgICB2aWV3czp7XG4gICAgICAgICAgICAgICAgICAgICd1c2VyLWNvbnRyb2xzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy91c2VyLWNvbnRyb2xzLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3VzZXJDb250cm9sc0NvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZGVOYXYuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb250cm9sbGVyOiAnc2lkZU5hdkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZ25hdHVyZS5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ21haW5Db250cm9sbGVyJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb25maXJtYXRpb24nLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2NvbmZpcm1hdGlvbicsXG4gICAgICAgICAgICAgICAgdmlld3M6e1xuICAgICAgICAgICAgICAgICAgICAvLyAndXNlci1jb250cm9scyc6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvdXNlci1jb250cm9scy5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnRyb2xsZXI6ICd1c2VyQ29udHJvbHNDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgJ3NpZGUtbmF2Jzoge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zaWRlTmF2Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29udHJvbGxlcjogJ3NpZGVOYXZDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgICAgICAgICAnbWFpbic6IHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9jb25maXJtYXRpb24uaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdtYWluQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnZXhwb3J0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9leHBvcnQnLFxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICd1c2VyLWNvbnRyb2xzJzoge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy91c2VyLWNvbnRyb2xzLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29udHJvbGxlcjogJ3VzZXJDb250cm9sc0NvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICdzaWRlLW5hdic6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lkZU5hdi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnRyb2xsZXI6ICdzaWRlTmF2Q29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2V4cG9ydC5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdleHBvcnRDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnc2lnbnVwJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9zaWdudXAnLFxuICAgICAgICAgICAgICAgIHZpZXdzOntcbiAgICAgICAgICAgICAgICAgICAgLy8gJ3VzZXItY29udHJvbHMnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3VzZXItY29udHJvbHMuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb250cm9sbGVyOiAndXNlckNvbnRyb2xzQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gJ3NpZGUtbmF2Jzoge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zaWRlTmF2Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29udHJvbGxlcjogJ3NpZGVOYXZDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgICAgICAgICAnbWFpbic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lnbnVwLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NpZ251cENvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2xvZ2luJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9sb2dpbicsXG4gICAgICAgICAgICAgICAgdmlld3M6e1xuICAgICAgICAgICAgICAgICAgICAvLyAndXNlci1jb250cm9scyc6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvdXNlci1jb250cm9scy5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnRyb2xsZXI6ICd1c2VyQ29udHJvbHNDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgICAgICAgICAvLyAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZGVOYXYuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb250cm9sbGVyOiAnc2lkZU5hdkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9sb2dpbi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdsb2dpbkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdzb0ZhcicsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvc28tZmFyJyxcbiAgICAgICAgICAgICAgICB2aWV3czp7XG4gICAgICAgICAgICAgICAgICAgICd1c2VyLWNvbnRyb2xzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy91c2VyLWNvbnRyb2xzLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3VzZXJDb250cm9sc0NvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICdzaWRlLW5hdic6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lkZU5hdi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnRyb2xsZXI6ICdzaWRlTmF2Q29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NvRmFyLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NvRmFyQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ3NvRmFyLTInLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL3NvLWZhci0yJyxcbiAgICAgICAgICAgICAgICB2aWV3czp7XG4gICAgICAgICAgICAgICAgICAgICd1c2VyLWNvbnRyb2xzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy91c2VyLWNvbnRyb2xzLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3VzZXJDb250cm9sc0NvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICdzaWRlLW5hdic6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lkZU5hdi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnRyb2xsZXI6ICdzaWRlTmF2Q29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NvRmFyLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NvRmFyQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIC5zdGF0ZSgnc2F2ZUFuZEV4aXQnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL3NhdmUtYW5kLWV4aXQnLFxuICAgICAgICAgICAgICAgIHZpZXdzOntcbiAgICAgICAgICAgICAgICAgICAgLy8gJ3VzZXItY29udHJvbHMnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3VzZXItY29udHJvbHMuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb250cm9sbGVyOiAndXNlckNvbnRyb2xzQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICdzaWRlLW5hdic6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lkZU5hdi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnRyb2xsZXI6ICdzaWRlTmF2Q29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NhdmUtYW5kLWV4aXQuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnbWFpbkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAgIC5kaXJlY3RpdmUoJ3llc05vSW5wdXQnLCB5ZXNOb0lucHV0KTtcblxuICAgIGZ1bmN0aW9uIHllc05vSW5wdXQgKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBtb2RlbDogJz0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3llc25vLmh0bWwnLFxuICAgICAgICB9O1xuICAgIH1cblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdleHBvcnRDb250cm9sbGVyJywgZXhwb3J0Q29udHJvbGxlcik7XG5cbiAgICBleHBvcnRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRodHRwJywgJyRzY29wZSddO1xuXG4gICAgZnVuY3Rpb24gZXhwb3J0Q29udHJvbGxlcigkaHR0cCwgJHNjb3BlKSB7XG4gICAgICAgICRodHRwLmdldCgnL2hvdXNlaG9sZC9jb21wbGV0ZWQnKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAkc2NvcGUuY29tcGxldGVkQXBwbGljYXRpb25zID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnZWF0Q2hhbGxlbmdlQXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ2hvdXNlaG9sZEluY29tZScsIGhvdXNlaG9sZEluY29tZSk7XG5cbiAgICBob3VzZWhvbGRJbmNvbWUuJGluamVjdCA9IFtcbiAgICAgICAgJyRtZERpYWxvZycsXG4gICAgICAgICckbWRNZWRpYScsXG4gICAgICAgICckcm9vdFNjb3BlJyxcbiAgICAgICAgJyRzY29wZScsXG4gICAgICAgICckc3RhdGUnLFxuICAgICAgICAnSG91c2Vob2xkJyxcbiAgICAgICAgJ1NlY3Rpb25zJ1xuICAgIF07XG5cbiAgICBmdW5jdGlvbiBob3VzZWhvbGRJbmNvbWUgKCRtZERpYWxvZywgJG1kTWVkaWEsICRyb290U2NvcGUsICRzY29wZSwgJHN0YXRlLCBIb3VzZWhvbGQsIFNlY3Rpb25zLCBIb3VzZWhvbGRJbmNvbWUpIHtcbiAgICAgICAgdmFyIHZtID0gJHNjb3BlO1xuICAgICAgICB2bS5udW1iZXJSZWdleCA9ICAnXlsxLTldWzAtOV0qJCc7XG4gICAgICAgIHZtLm5hdmlnYXRlVG9OZXh0U2VjdGlvbiA9IG5hdmlnYXRlVG9OZXh0U2VjdGlvbjtcblxuICAgICAgICB2YXIgd29yayA9IHtcbiAgICAgICAgICAgIGNhdGVnb3J5TmFtZTogJ3dvcmsnLFxuICAgICAgICAgICAgaGVhZGxpbmU6ICdXb3JrIEluY29tZScsXG4gICAgICAgICAgICBxdWVzdGlvbjogJ2Vhcm4gbW9uZXkgdGhyb3VnaCB3b3JrJyxcbiAgICAgICAgICAgIHNvdXJjZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOid3b3JrJyxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ1dvcmsgb3V0c2lkZSB0aGUgaG9tZSBpbiBhIG5vbi1taWxpdGFyeSBjYXBhY2l0eSAnLFxuICAgICAgICAgICAgICAgICAgICBzaG9ydExhYmVsOiAnRWFybmluZ3MgZnJvbSB3b3JrJyxcbiAgICAgICAgICAgICAgICAgICAgZnJlcXVlbmN5OiBbJ3dlZWtseScsICdldmVyeSAyIHdlZWtzJywgJ3R3aWNlIGEgbW9udGgnLCAnbW9udGhseSddLFxuICAgICAgICAgICAgICAgICAgICBhbm5vdGF0aW9uOiAnUGxlYXNlIHJlcG9ydCBncm9zcyBpbmNvbWUuIFRoaXMgaXMgdGhlIGFtb3VudCBvZiBpbmNvbWUgZWFybmVkIGJlZm9yZSBhbnkgbW9uZXkgaXMgdGFrZW4gb3V0IGZvciB0YXhlcyBvciBkZWR1Y3Rpb25zLiBJbmNsdWRlIHNhbGFyeSwgd2FnZXMsIGFuZCBjYXNoIGJvbnVzZXMuJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTonc2VsZkVtcGxveWVkJyxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRMYWJlbDogJ0Vhcm5pbmdzIGZyb20gc2VsZiBlbXBsb3ltZW50JyxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ1NlbGYtZW1wbG95ZWQnLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIGFubm90YXRpb246ICdGb3IgaG91c2Vob2xkIG1lbWJlcnMgdGhhdCBhcmUgc2VsZi1lbXBsb3llZCwgcmVwb3J0IGluY29tZSBmcm9tIHRoYXQgd29yayBhcyBhIG5ldCBhbW91bnQuIFRoaXMgaXMgY2FsY3VsYXRlZCBieSBzdWJ0cmFjdGluZyB0aGUgdG90YWwgb3BlcmF0aW5nIGV4cGVuc2VzIG9mIHRoZSBidXNpbmVzcyBmcm9tIGl0cyBncm9zcyByZWNlaXB0cyBvciByZXZlbnVlLidcblxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTonb25TdHJpa2UnLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnT24gc3RyaWtlJyxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRMYWJlbDogJ1N0cmlrZSBCZW5lZml0cycsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICcyeCBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIC8vIGFubm90YXRpb246XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IGFkZCBzcGFjZSBmb3IgaG91c2luZyBhbGxvd2FuY2UgcGVyIGRvY1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTonbWlsaXRhcnknLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnSW4gdGhlIFUuUy4gbWlsaXRhcnknLFxuICAgICAgICAgICAgICAgICAgICBzaG9ydExhYmVsOiAnQmFzaWMgcGF5IGFuZCBjYXNoIGJvbnVzZXMnLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIGFubm90YXRpb246ICdQbGVhc2UgZG8gbm90IGluY2x1ZGUgY29tYmF0IHBheSwgRlNTQSwgb3IgcHJpdmF0ZSBob3VzaW5nIGFsbG93YW5jZXMuJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcHVibGljQXNzaXN0YW5jZSA9IHtcbiAgICAgICAgICAgIGNhdGVnb3J5TmFtZTogJ3B1YmxpY0Fzc2lzdGFuY2UnLFxuICAgICAgICAgICAgaGVhZGxpbmU6ICdQdWJsaWMgQXNzaXN0YW5jZScsXG4gICAgICAgICAgICBxdWVzdGlvbjogJ3JlY2VpdmUgYW55IHB1YmxpYyBhc3Npc3RhbmNlIGJlbmVmaXRzJyxcbiAgICAgICAgICAgIHNvdXJjZXM6W1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6J3VuZW1wbG95bWVudCcsXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94TGFiZWw6ICdVbmVtcGxveW1lbnQgYmVuZWZpdHMnLFxuICAgICAgICAgICAgICAgICAgICBzaG9ydExhYmVsOiAnVW5lbXBsb3ltZW50IGJlbmVmaXRzJyxcbiAgICAgICAgICAgICAgICAgICAgZnJlcXVlbmN5OiBbJ3dlZWtseScsICdldmVyeSAyIHdlZWtzJywgJ3R3aWNlIGEgbW9udGgnLCAnbW9udGhseSddLFxuICAgICAgICAgICAgICAgICAgICAvLyBhbm5vdGF0aW9uOiAnJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTond29ya2Vyc0NvbXAnLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnV29ya2Vy4oCZcyBjb21wZW5zYXRpb24nLFxuICAgICAgICAgICAgICAgICAgICBzaG9ydExhYmVsOiAnV29ya2Vy4oCZcyBjb21wZW5zYXRpb24nLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIC8vIGFubm90YXRpb246ICcnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOidzc2knLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnU3VwcGxlbWVudGFsIFNlY3VyaXR5IEluY29tZSAoU1NJKScsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0TGFiZWw6ICdTdXBwbGVtZW50YWwgU2VjdXJpdHkgSW5jb21lIChTU0kpJyxcbiAgICAgICAgICAgICAgICAgICAgZnJlcXVlbmN5OiBbJ3dlZWtseScsICdldmVyeSAyIHdlZWtzJywgJ3R3aWNlIGEgbW9udGgnLCAnbW9udGhseSddLFxuICAgICAgICAgICAgICAgICAgICAvLyBhbm5vdGF0aW9uOiAnJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTonY2FzaEFzc2lzdGFuY2UnLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnQ2FzaCBhc3Npc3RhbmNlIGZyb20gU3RhdGUgb3IgbG9jYWwgZ292ZXJubWVudCcsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0TGFiZWw6ICdDYXNoIGFzc2lzdGFuY2UnLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIGFubm90YXRpb246ICdUaGlzIGNvdWxkIGluY2x1ZGUgVEFORiBvciBHZW5lcmFsIEFzc2lzdGFuY2UgbW9uZXkuJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTondmV0ZXJhbnNCZW5lZml0cycsXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94TGFiZWw6ICdWZXRlcmFu4oCZcyBiZW5lZml0cycsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0TGFiZWw6ICdWZXRlcmFu4oCZcyBiZW5lZml0cycsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5ub3RhdGlvbjogJ1RoaXMgY291bGQgaW5jbHVkZSBUQU5GIG9yIEdlbmVyYWwgQXNzaXN0YW5jZSBtb25leSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGFsaW1vbnkgPSB7XG4gICAgICAgICAgICBjYXRlZ29yeU5hbWU6ICdhbGltb255JyxcbiAgICAgICAgICAgIGhlYWRsaW5lOiAnQWxpbW9ueScsXG4gICAgICAgICAgICBxdWVzdGlvbjogJ3JlY2VpdmUgYWxpbW9ueSBwYXltZW50cycsXG4gICAgICAgICAgICBzb3VyY2VzOltcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnYWxpbW9ueScsXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94TGFiZWw6ICdhbGltb255IHBheW1lbnRzJyxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRMYWJlbDogJ0FsaW1vbnkgcGF5bWVudCcsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICAgICAgYW5ub3RhdGlvbjogJ0lmIGluY29tZSBpcyByZWNlaXZlZCBmcm9tIGFsaW1vbnksIG9ubHkgY291cnQtb3JkZXJlZCBwYXltZW50cyBzaG91bGQgYmUgcmVwb3J0ZWQgaGVyZS4gSW5mb3JtYWwgYnV0IHJlZ3VsYXIgcGF5bWVudHMgc2hvdWxkIGJlIHJlcG9ydGVkIGxhdGVyIGFzIOKAnG90aGVy4oCdIGluY29tZS4nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjaGlsZFN1cHBvcnQgPSB7XG4gICAgICAgICAgICBjYXRlZ29yeU5hbWU6ICdjaGlsZFN1cHBvcnQnLFxuICAgICAgICAgICAgaGVhZGxpbmU6ICdDaGlsZCBTdXBwb3J0JyxcbiAgICAgICAgICAgIHF1ZXN0aW9uOiAncmVjZWl2ZSBhbnkgY2hpbGQgc3VwcG9ydCcsXG4gICAgICAgICAgICBzb3VyY2VzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ2NoaWxkU3VwcG9ydCcsXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94TGFiZWw6ICdhbnkgY2hpbGQgc3VwcG9ydCcsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0TGFiZWw6ICdDaGlsZCBzdXBwb3J0IHBheW1lbnQnLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIGFubm90YXRpb246ICdJZiBpbmNvbWUgaXMgcmVjZWl2ZWQgZnJvbSBjaGlsZCBzdXBwb3J0LCBvbmx5IGNvdXJ0LW9yZGVyZWQgcGF5bWVudHMgc2hvdWxkIGJlIHJlcG9ydGVkIGhlcmUuIEluZm9ybWFsIGJ1dCByZWd1bGFyIHBheW1lbnRzIHNob3VsZCBiZSByZXBvcnRlZCBsYXRlciBhcyDigJxvdGhlcuKAnSBpbmNvbWUuJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcmV0aXJlbWVudCA9IHtcbiAgICAgICAgICAgIGNhdGVnb3J5TmFtZTogJ3JldGlyZW1lbnQnLFxuICAgICAgICAgICAgaGVhZGxpbmU6ICdQZW5zaW9uIGFuZCBSZXRpcmVtZW50JyxcbiAgICAgICAgICAgIHF1ZXN0aW9uOiAncmVjZWl2ZSBhbnkgcGVuc2lvbiBvciByZXRpcmVtZW50IG1vbmV5JyxcbiAgICAgICAgICAgIHNvdXJjZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnc29jaWFsU2VjdXJpdHknLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnU29jaWFsIFNlY3VyaXR5JyxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRMYWJlbDogJ1NvY2lhbCBzZWN1cml0eScsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICAgICAgYW5ub3RhdGlvbjogJ1BsZWFzZSBpbmNsdWRlIHJhaWxyb2FkIHJldGlyZW1lbnQgYW5kIGJsYWNrIGx1bmcgYmVuZWZpdHMnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAncHJpdmF0ZVBlbnNpb24nLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnUHJpdmF0ZSBwZW5zaW9ucyBvciBkaXNhYmlsaXR5JyxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRMYWJlbDogJ1ByaXZhdGUgcGVuc2lvbnMgb3IgZGlzYWJpbGl0eScsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5ub3RhdGlvbjogJydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIG90aGVySW5jb21lID0ge1xuICAgICAgICAgICAgY2F0ZWdvcnlOYW1lOiAnb3RoZXJJbmNvbWUnLFxuICAgICAgICAgICAgaGVhZGxpbmU6ICdPdGhlciBJbmNvbWUnLFxuICAgICAgICAgICAgcXVlc3Rpb246ICdyZWNpZXZlIG1vbmV5IHRocm91Z2ggYW55IG90aGVyIHNvdXJjZScsXG4gICAgICAgICAgICBzb3VyY2VzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ3RydXN0cycsXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94TGFiZWw6ICdJbmNvbWUgZnJvbSB0cnVzdHMgb3IgZXN0YXRlcycsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0TGFiZWw6ICdJbmNvbWUgZnJvbSB0cnVzdHMgb3IgZXN0YXRlcycsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5ub3RhdGlvbjogJydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdhbm51aXRpZXMnLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnQW5udWl0aWVzJyxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRMYWJlbDogJ0luY29tZSBmcm9tIGFubnVpdGllcycsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5ub3RhdGlvbjogJydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdpbnZlc3RtZW50JyxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ0ludmVzdG1lbnQgaW5jb21lJyxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRMYWJlbDogJ0ludmVzdG1lbnQgaW5jb21lJyxcbiAgICAgICAgICAgICAgICAgICAgZnJlcXVlbmN5OiBbJ3dlZWtseScsICdldmVyeSAyIHdlZWtzJywgJ3R3aWNlIGEgbW9udGgnLCAnbW9udGhseSddLFxuICAgICAgICAgICAgICAgICAgICAvLyBhbm5vdGF0aW9uOiAnJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ2ludGVyZXN0JyxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ0Vhcm5lZCBpbnRlcmVzdCcsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0TGFiZWw6ICdFYXJuZWQgaW50ZXJlc3QnLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIC8vIGFubm90YXRpb246ICcnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAncmVudGFsSW5jb21lJyxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ1JlbnRhbCBpbmNvbWUnLFxuICAgICAgICAgICAgICAgICAgICBzaG9ydExhYmVsOiAnUmVudGFsIGluY29tZScsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5ub3RhdGlvbjogJydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdvdGhlckNhc2gnLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnUmVndWxhciBjYXNoIHBheW1lbnRzIGZyb20gb3V0c2lkZSBob3VzZWhvbGQnLFxuICAgICAgICAgICAgICAgICAgICBzaG9ydExhYmVsOiAnUmVndWxhciBjYXNoIHBheW1lbnRzIGZyb20gb3V0c2lkZSBob3VzZWhvbGQnLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIGFubm90YXRpb246ICdTdWNoIGNhc2ggcGF5bWVudHMgc2hvdWxkIGluY2x1ZGUgcmVndWxhciBjaGlsZCBzdXBwb3J0IG9yIGFsaW1vbnkgcGF5bWVudHMgcmVjZWl2ZWQgYnkgdGhlIGhvdXNlaG9sZCB0aGF0IGFyZSBub3QgY291cnQtb3JkZXJlZC4nXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBzaG93Q29uZmlybShldikge1xuICAgICAgICAgICAgLy8gQXBwZW5kaW5nIGRpYWxvZyB0byBkb2N1bWVudC5ib2R5IHRvIGNvdmVyIHNpZGVuYXYgaW4gZG9jcyBhcHBcbiAgICAgICAgICAgIHZhciBjb25maXJtID0gJG1kRGlhbG9nLmNvbmZpcm0oKVxuICAgICAgICAgICAgICAgICAgLnRpdGxlKCdSZWFkeSB0byBnbyBvbj8nKVxuICAgICAgICAgICAgICAgICAgLnRleHRDb250ZW50KCdJdCBsb29rcyBsaWtlIHlvdSBoYXZlIHNvbWUgZXJyb3JzIG9yIG1pc3NpbmcgaW5mb3JtYXRpb24gaW4gdGhpcyBzZWN0aW9uLiBEbyB5b3Ugd2FudCB0byBmaXggaXQgbm93PycpXG4gICAgICAgICAgICAgICAgICAuYXJpYUxhYmVsKCdSZWFkeSB0byBnbyBvbj8nKVxuICAgICAgICAgICAgICAgICAgLnRhcmdldEV2ZW50KGV2KVxuICAgICAgICAgICAgICAgICAgLm9rKCdNb3ZlIEFoZWFkIEFueXdheScpXG4gICAgICAgICAgICAgICAgICAuY2FuY2VsKCdHbyBCYWNrIGFuZCBGaXggSXQgTm93Jyk7XG4gICAgICAgICAgICByZXR1cm4gJG1kRGlhbG9nLnNob3coY29uZmlybSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPOiBkdXBsaWNhdGVkIHdpdGggbWFpbi5qcy4gU2hhcmUgaW4gYSBiZXR0ZXIgd2F5XG4gICAgICAgIGZ1bmN0aW9uIGlzSW52YWxpZEZvcm0oKSB7XG4gICAgICAgICAgICB2YXIgbWVtYmVyO1xuXG4gICAgICAgICAgICBpZiAodm0uZm9ybSAmJiAoIXZtLmZvcm0uJHZhbGlkKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRyb290U2NvcGUuaG91c2Vob2xkLm90aGVyTWVtYmVycy5sZW5ndGggOyBpKyspIHtcbiAgICAgICAgICAgICAgICBtZW1iZXIgPSAkcm9vdFNjb3BlLmhvdXNlaG9sZC5vdGhlck1lbWJlcnNbaV07XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG1lbWJlci5pbmNvbWVDYXRlZ29yeSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWVtYmVyLmluY29tZUNhdGVnb3J5W2tleV0uc2hvd0NoZWNrYm94ZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGZpeEl0SGFuZGxlcigpIHtcbiAgICAgICAgICAgIHZtLnNob3dFcnJvcnMgPSB0cnVlO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG1vdmVBaGVhZEhhbmRsZXIoKSB7XG4gICAgICAgICAgICBIb3VzZWhvbGQuc2F2ZSgpXG4gICAgICAgICAgICBTZWN0aW9ucy51cGRhdGVSZXF1aXJlZFNlY3Rpb25zKCk7XG4gICAgICAgICAgICBTZWN0aW9ucy5uYXZpZ2F0ZVRvTmV4dCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbmF2aWdhdGVUb05leHRTZWN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGlzSW52YWxpZEZvcm0oKSkge1xuICAgICAgICAgICAgICAgIC8vIG9wZW4gY29uZmlybWF0aW9uIG1vZGFsXG4gICAgICAgICAgICAgICAgc2hvd0NvbmZpcm0oKS50aGVuKG1vdmVBaGVhZEhhbmRsZXIsZml4SXRIYW5kbGVyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbW92ZUFoZWFkSGFuZGxlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZtLmdvQmFjayA9IGdvQmFjaztcbiAgICAgICAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgICAgICAgICAgSG91c2Vob2xkLnNhdmUoKVxuICAgICAgICAgICAgU2VjdGlvbnMudXBkYXRlUmVxdWlyZWRTZWN0aW9ucygpO1xuICAgICAgICAgICAgU2VjdGlvbnMuZ29CYWNrKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2bS5pbmNvbWVDYXRlZ29yaWVzID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWNBc3Npc3RhbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGltb255LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZFN1cHBvcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldGlyZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVySW5jb21lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuXG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAuY29udHJvbGxlcignbG9naW5Db250cm9sbGVyJywgbG9naW5Db250cm9sbGVyKTtcbiAgICBsb2dpbkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRzdGF0ZScsICdhdXRoJywgJ0hvdXNlaG9sZCcsICdTZWN0aW9ucyddO1xuICAgIGZ1bmN0aW9uIGxvZ2luQ29udHJvbGxlcigkc2NvcGUsICRzdGF0ZSwgYXV0aCwgSG91c2Vob2xkLCBTZWN0aW9ucykge1xuICAgICAgICB2YXIgdm0gPSAkc2NvcGU7XG4gICAgICAgIHZhciB1c2VyID0ge307XG4gICAgICAgIHZtLnN1Ym1pdCA9IHN1Ym1pdDtcbiAgICAgICAgdm0udXNlciA9IHVzZXI7XG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBzdWJtaXQoKSB7XG5cbiAgICAgICAgICAgIGF1dGhcbiAgICAgICAgICAgIC5sb2dpbih1c2VyLmVtYWlsLCB1c2VyLnBhc3N3b3JkKVxuICAgICAgICAgICAgLnRoZW4oc3VjY2Vzc0hhbmRsZXIsIGVycm9ySGFuZGxlcik7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHN1Y2Nlc3NIYW5kbGVyKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NhbGxzIHN1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgICBhdXRoLnNldENyZWRlbnRpYWxzKHJlc3BvbnNlLmRhdGEudXNlcik7XG4gICAgICAgICAgICAgICAgSG91c2Vob2xkLnJldHJpZXZlRm9yVXNlcihyZXNwb25zZS5kYXRhLnVzZXIpO1xuICAgICAgICAgICAgICAgIHZtLmxvZ2luRm9ybSA9IHt9O1xuICAgICAgICAgICAgICAgIHZtLm1lc3NhZ2UgPSAnc3VjY2Vzc2Z1bGx5IGxvZ2dlZCBpbic7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdjaGlsZHJlbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBlcnJvckhhbmRsZXIoKSB7XG4gICAgICAgICAgICAgICAgYXV0aC5jbGVhckNyZWRlbnRpYWxzKCk7XG4gICAgICAgICAgICAgICAgdm0ubWVzc2FnZSA9ICdQbGVhc2UgY2hlY2sgeW91ciB1c2VybmFtZSBhbmQgcGFzc3dvcmQgYW5kIHRyeSBhZ2Fpbi4nO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdlYXRDaGFsbGVuZ2VBcHAnKVxuICAgICAgICAuY29udHJvbGxlcignbWFpbkNvbnRyb2xsZXInLCBtYWluQ29udHJvbGxlcik7XG5cbiAgICBtYWluQ29udHJvbGxlci4kaW5qZWN0ID0gW1xuICAgICAgICAnJGh0dHAnLFxuICAgICAgICAnJG1kRGlhbG9nJyxcbiAgICAgICAgJyRtZE1lZGlhJyxcbiAgICAgICAgJyRyb290U2NvcGUnLFxuICAgICAgICAnJHNjb3BlJyxcbiAgICAgICAgJyRzdGF0ZScsXG4gICAgICAgICckdGltZW91dCcsXG4gICAgICAgICdIb3VzZWhvbGQnLFxuICAgICAgICAnU2VjdGlvbnMnXG4gICAgXTtcblxuICAgIGZ1bmN0aW9uIG1haW5Db250cm9sbGVyICgkaHR0cCwgJG1kRGlhbG9nLCAkbWRNZWRpYSwgJHJvb3RTY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLCAkc3RhdGUsICR0aW1lb3V0LCBIb3VzZWhvbGQsIFNlY3Rpb25zKSB7XG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgICAgdmFyIHZtID0gJHNjb3BlO1xuICAgICAgICB2bS5zY2hvb2xEaXN0cmljdCA9ICdPYWtsYW5kIFVuaWZpZWQgU2Nob29sIERpc3RyaWN0JztcblxuICAgICAgICAvLyBuYXZpZ2F0aW9uXG4gICAgICAgIHZtLmdvQmFjayA9IGdvQmFjaztcbiAgICAgICAgdm0ubmF2aWdhdGVUb05leHRTZWN0aW9uID0gbmF2aWdhdGVUb05leHRTZWN0aW9uO1xuICAgICAgICB2bS5zdWJtaXRBcHBsaWNhdGlvbiA9IHN1Ym1pdEFwcGxpY2F0aW9uO1xuICAgICAgICB2bS5zaG93RXJyb3JzID0gZmFsc2U7XG4gICAgICAgIHZtLm51bWJlclJlZ2V4ID0gICdeWzEtOV1bMC05XSokJztcbiAgICAgICAgdm0uY2hpbGRJbmNvbWVTb3VyY2VzID0ge1xuICAgICAgICAgICAgd29yazoge1xuICAgICAgICAgICAgICAgIHZhdWxlOid3b3JrJyxcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0Vhcm5pbmdzIGZyb20gd29yazonLFxuICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICBhbm5vdGF0aW9uOiAnQSBjaGlsZCBoYXMgYSBqb2Igd2hlcmUgdGhleSBlYXJuIHNhbGFyeSBvciB3YWdlcy4gUGxlYXNlIHJlcG9ydCBncm9zcyBpbmNvbWUuIFRoaXMgaXMgdGhlIGFtb3VudCBvZiBpbmNvbWUgZWFybmVkIGJlZm9yZSBhbnkgbW9uZXkgaXMgdGFrZW4gb3V0IGZvciB0YXhlcyBvciBkZWR1Y3Rpb25zLiBJbmNsdWRlIHNhbGFyeSwgd2FnZXMsIGFuZCBjYXNoIGJvbnVzZXMuJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzb2NpYWxTZWN1cml0eToge1xuICAgICAgICAgICAgICAgIHZhdWxlOidzb2NpYWxTZWN1cml0eScsXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdTb2NpYWwgU2VjdXJpdHkgRGlzYWJpbGl0eSBQYXltZW50cyBvciBTdXJ2aXZvcuKAmXMgQmVuZWZpdHM6JyxcbiAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnbW9udGhseSddLFxuICAgICAgICAgICAgICAgIC8vIGFubm90YXRpb246ICdBIGNoaWxkIGlzIGJsaW5kIG9yIGRpc2FibGVkIGFuZCByZWNlaXZlcyBTb2NpYWwgU2VjdXJpdHkgYmVuZWZpdHMuJyxcbiAgICAgICAgICAgICAgICAvLyAnIEEgcGFyZW50IGlzIGRpc2FibGVkLCByZXRpcmVkLCBvciBkZWNlYXNlZCwgYW5kIHRoZWlyIGNoaWxkIHJlY2VpdmVzIHNvY2lhbCBzZWN1cml0eSBiZW5lZml0cycsXG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvdGhlclBlcnNvbjoge1xuICAgICAgICAgICAgICAgIHZhdWxlOidvdGhlclBlcnNvbicsXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdJbmNvbWUgZnJvbSBwZXJzb25zIG91dHNpZGUgdGhlIGhvdXNlaG9sZDonLFxuICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICBhbm5vdGF0aW9uOiAnQSBmcmllbmQgb3IgZXh0ZW5kZWQgZmFtaWx5IG1lbWJlciByZWd1bGFybHkgZ2l2ZXMgYSBjaGlsZCBzcGVuZGluZyBtb25leS4nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG90aGVyU291cmNlOiB7XG4gICAgICAgICAgICAgICAgdmF1bGU6J290aGVyU291cmNlJyxcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0luY29tZSBmcm9tIGFueSBvdGhlciBzb3VyY2U6JyxcbiAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgYW5ub3RhdGlvbjogJ0EgY2hpbGQgcmVjZWl2ZXMgaW5jb21lIGZyb20gYSBwcml2YXRlIHBlbnNpb24gZnVuZCwgYW5udWl0eSwgb3IgdHJ1c3QuJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIC8vTmV3IGNoaWxkcmVuIGFuZCBob3VzZWhvbGQgbWVtYmVycyBhcmUgY3JlYXRlZFxuICAgICAgICAvL2J5IGNhbGxpbmcgdGhlIHNlcnZlciB0byBtYWtlIHVzZSBvZiBtb25nb29zZSBtb2RlbHNcbiAgICAgICAgZnVuY3Rpb24gYWRkQ2hpbGQobmV3VmFsKSB7XG4gICAgICAgICAgICBpZiAobmV3VmFsID4gJHJvb3RTY29wZS5ob3VzZWhvbGQuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCcvY2hpbGQnKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdDaGlsZCA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLmluY29tZVNvdXJjZXMgPSAgT2JqZWN0LmtleXModm0uY2hpbGRJbmNvbWVTb3VyY2VzKS5tYXAoZnVuY3Rpb24oaW5jb21lU291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6IGluY29tZVNvdXJjZSwgYW1vdW50OiBudWxsLCBmcmVxdWVuY3k6IG51bGx9O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5ob3VzZWhvbGQuY2hpbGRyZW4ucHVzaChuZXdDaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlY3Vyc2UgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICAgICAgICAgIGFkZENoaWxkKG5ld1ZhbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhZGRPdGhlck1lbWJlcihuZXdWYWwpIHtcbiAgICAgICAgICAgIGlmIChuZXdWYWwgPiAkcm9vdFNjb3BlLmhvdXNlaG9sZC5vdGhlck1lbWJlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCcvaG91c2Vob2xkLW1lbWJlcicpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0hvdXNlaG9sZE1lbWJlciA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIG5ld0hvdXNlaG9sZE1lbWJlciA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmhvdXNlaG9sZC5vdGhlck1lbWJlcnMucHVzaChuZXdIb3VzZWhvbGRNZW1iZXIpO1xuICAgICAgICAgICAgICAgICAgICAvLyBSZWN1cnNlIGlmIG5lY2Vzc2FyeVxuICAgICAgICAgICAgICAgICAgICBhZGRPdGhlck1lbWJlcihuZXdWYWwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdHJpbUNoaWxkcmVuKGhvdXNlaG9sZCkge1xuICAgICAgICAgICAgLy8gZ2V0IHJpZCBvZiBleHRyYSBlbXB0eSBjaGlsZCBvYmVqY2V0cyBjcmVhdGVkIGluIHByb2Nlc3NcbiAgICAgICAgICAgIGlmIChob3VzZWhvbGQuY2hpbGRyZW4ubGVuZ3RoID4gaG91c2Vob2xkLmNoaWxkQ291bnQpIHtcbiAgICAgICAgICAgICAgICBob3VzZWhvbGQuY2hpbGRyZW4gPSBob3VzZWhvbGQuY2hpbGRyZW4uc2xpY2UoMCwgaG91c2Vob2xkLmNoaWxkQ291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhvdXNlaG9sZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHRyaW1PdGhlck1lbWJlcnMoaG91c2Vob2xkKSB7XG4gICAgICAgICAgICAvLyBnZXQgcmlkIG9mIGV4dHJhIGVtcHR5IG90aGVyTWVtYmVyIG9iZWpjZXRzIGNyZWF0ZWQgaW4gcHJvY2Vzc1xuICAgICAgICAgICAgaWYgKGhvdXNlaG9sZC5vdGhlck1lbWJlcnMubGVuZ3RoID4gaG91c2Vob2xkLm90aGVyTWVtYmVyc0NvdW50KSB7XG4gICAgICAgICAgICAgICAgaG91c2Vob2xkLm90aGVyTWVtYmVycy5zbGljZSgwLCBob3VzZWhvbGQub3RoZXJNZW1iZXJzQ291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhvdXNlaG9sZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNob3dDb25maXJtKGV2KSB7XG4gICAgICAgICAgICAvLyBBcHBlbmRpbmcgZGlhbG9nIHRvIGRvY3VtZW50LmJvZHkgdG8gY292ZXIgc2lkZW5hdiBpbiBkb2NzIGFwcFxuICAgICAgICAgICAgdmFyIGNvbmZpcm0gPSAkbWREaWFsb2cuY29uZmlybSgpXG4gICAgICAgICAgICAgICAgICAudGl0bGUoJ1JlYWR5IHRvIGdvIG9uPycpXG4gICAgICAgICAgICAgICAgICAudGV4dENvbnRlbnQoJ0l0IGxvb2tzIGxpa2UgeW91IGhhdmUgc29tZSBlcnJvcnMgb3IgbWlzc2luZyBpbmZvcm1hdGlvbiBpbiB0aGlzIHNlY3Rpb24uIERvIHlvdSB3YW50IHRvIGZpeCBpdCBub3c/JylcbiAgICAgICAgICAgICAgICAgIC5hcmlhTGFiZWwoJ1JlYWR5IHRvIGdvIG9uPycpXG4gICAgICAgICAgICAgICAgICAudGFyZ2V0RXZlbnQoZXYpXG4gICAgICAgICAgICAgICAgICAub2soJ01vdmUgQWhlYWQgQW55d2F5JylcbiAgICAgICAgICAgICAgICAgIC5jYW5jZWwoJ0dvIEJhY2sgYW5kIEZpeCBJdCBOb3cnKTtcbiAgICAgICAgICAgIHJldHVybiAkbWREaWFsb2cuc2hvdyhjb25maXJtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICAgICAgICAgIHRyaW1DaGlsZHJlbigkcm9vdFNjb3BlLmhvdXNlaG9sZCk7XG4gICAgICAgICAgICB0cmltT3RoZXJNZW1iZXJzKCRyb290U2NvcGUuaG91c2Vob2xkKTtcbiAgICAgICAgICAgIEhvdXNlaG9sZC5zYXZlKClcbiAgICAgICAgICAgIFNlY3Rpb25zLnVwZGF0ZVJlcXVpcmVkU2VjdGlvbnMoKTtcbiAgICAgICAgICAgIFNlY3Rpb25zLmdvQmFjaygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9Gb3JtIFZhbGlkYXRpb25cbiAgICAgICAgZnVuY3Rpb24gaXNJbnZhbGlkRm9ybSgpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZDtcblxuICAgICAgICAgICAgaWYgKCRyb290U2NvcGUuY3VycmVudFN0YXRlID09PSAnY2hpbGRJbmNvbWUnKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAkcm9vdFNjb3BlLmhvdXNlaG9sZC5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZCA9ICRyb290U2NvcGUuaG91c2Vob2xkLmNoaWxkcmVuW2pdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQuZWFybnNJbmNvbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLmVhcm5zSW5jb21lID09PSB0cnVlICYmICF2bS5mb3JtLiR2YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2bS5mb3JtICYmICghdm0uZm9ybS4kdmFsaWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgkcm9vdFNjb3BlLmN1cnJlbnRTdGF0ZSA9PT0gJ2NoaWxkcmVuJykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHJvb3RTY29wZS5ob3VzZWhvbGQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSAkcm9vdFNjb3BlLmhvdXNlaG9sZC5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLmVucm9sbGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBmaXhJdEhhbmRsZXIoKSB7XG4gICAgICAgICAgICB2bS5zaG93RXJyb3JzID0gdHJ1ZTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBtb3ZlQWhlYWRIYW5kbGVyKCkge1xuICAgICAgICAgICAgSG91c2Vob2xkLnNhdmUoKTtcbiAgICAgICAgICAgIFNlY3Rpb25zLnVwZGF0ZVJlcXVpcmVkU2VjdGlvbnMoKTtcbiAgICAgICAgICAgIFNlY3Rpb25zLm5hdmlnYXRlVG9OZXh0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBuYXZpZ2F0ZVRvTmV4dFNlY3Rpb24oKSB7XG4gICAgICAgICAgICB0cmltQ2hpbGRyZW4oJHJvb3RTY29wZS5ob3VzZWhvbGQpO1xuICAgICAgICAgICAgdHJpbU90aGVyTWVtYmVycygkcm9vdFNjb3BlLmhvdXNlaG9sZCk7XG4gICAgICAgICAgICBpZiAoaXNJbnZhbGlkRm9ybSgpKSB7XG4gICAgICAgICAgICAgICAgLy8gb3BlbiBjb25maXJtYXRpb24gbW9kYWxcbiAgICAgICAgICAgICAgICBzaG93Q29uZmlybSgpLnRoZW4obW92ZUFoZWFkSGFuZGxlcixmaXhJdEhhbmRsZXIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtb3ZlQWhlYWRIYW5kbGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzdWJtaXRBcHBsaWNhdGlvbigpIHtcbiAgICAgICAgICAgIHRyaW1DaGlsZHJlbigkcm9vdFNjb3BlLmhvdXNlaG9sZCk7XG4gICAgICAgICAgICB0cmltT3RoZXJNZW1iZXJzKCRyb290U2NvcGUuaG91c2Vob2xkKTtcbiAgICAgICAgICAgICRyb290U2NvcGUuaG91c2Vob2xkLmNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoaXNJbnZhbGlkRm9ybSgpKSB7XG4gICAgICAgICAgICAgICAgLy8gb3BlbiBjb25maXJtYXRpb24gbW9kYWxcbiAgICAgICAgICAgICAgICBzaG93Q29uZmlybSgpLnRoZW4obW92ZUFoZWFkSGFuZGxlcixmaXhJdEhhbmRsZXIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBIb3VzZWhvbGQuc3VibWl0KCk7XG4gICAgICAgICAgICAgICAgU2VjdGlvbnMudXBkYXRlUmVxdWlyZWRTZWN0aW9ucygpO1xuICAgICAgICAgICAgICAgIFNlY3Rpb25zLm5hdmlnYXRlVG9OZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXYXRjaGVyc1xuICAgICAgICAkc2NvcGUuJHdhdGNoKCdob3VzZWhvbGQuY2hpbGRDb3VudCcsIGFkZENoaWxkKTtcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnaG91c2Vob2xkLm90aGVyTWVtYmVyc0NvdW50JywgYWRkT3RoZXJNZW1iZXIpO1xuICAgIH1cblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdzaWRlTmF2Q29udHJvbGxlcicsIHNpZGVOYXZDb250cm9sbGVyKTtcblxuICAgIHNpZGVOYXZDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckc3RhdGUnLCAnU2VjdGlvbnMnXTtcblxuICAgIGZ1bmN0aW9uIHNpZGVOYXZDb250cm9sbGVyICgkc2NvcGUsICRzdGF0ZSwgU2VjdGlvbnMpIHtcbiAgICAgICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICAgICAgICB2YXIgdm0gPSAkc2NvcGU7XG5cbiAgICAgICAgdm0uY3VycmVudFN0YXRlID0gJHN0YXRlLiRjdXJyZW50LnNlbGYubmFtZTtcbiAgICAgICAgdm0uc2VjdGlvbnMgPSBTZWN0aW9ucy5zZWN0aW9ucztcbiAgICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgLm1vZHVsZSgnZWF0Q2hhbGxlbmdlQXBwJylcbiAgICAgIC5jb250cm9sbGVyKCdzaWdudXBDb250cm9sbGVyJywgc2lnbnVwQ29udHJvbGxlcik7XG4gICAgc2lnbnVwQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnYXV0aCcsICdIb3VzZWhvbGQnLCAnU2VjdGlvbnMnXTtcblxuICAgIGZ1bmN0aW9uIHNpZ251cENvbnRyb2xsZXIoJHNjb3BlLCBhdXRoLCBIb3VzZWhvbGQsIFNlY3Rpb25zKSB7XG4gICAgICAgIHZhciB2bSA9ICRzY29wZTtcbiAgICAgICAgdmFyIHVzZXIgPSB7fTtcbiAgICAgICAgdm0uc3VibWl0ID0gc3VibWl0O1xuICAgICAgICB2bS51c2VyID0gdXNlcjtcblxuICAgICAgICBmdW5jdGlvbiBzdWJtaXQoKSB7XG4gICAgICAgICAgICB2bS5lcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgYXV0aC5zaWdudXAodXNlci5lbWFpbCwgdXNlci5wYXNzd29yZClcbiAgICAgICAgICAgICAgICAudGhlbihzdWNjZXNzSGFuZGxlciwgZXJyb3JIYW5kbGVyKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gc3VjY2Vzc0hhbmRsZXIocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBhdXRoLnNldENyZWRlbnRpYWxzKHJlc3BvbnNlLmRhdGEudXNlcik7XG4gICAgICAgICAgICAgICAgSG91c2Vob2xkLnNhdmUoKTtcbiAgICAgICAgICAgICAgICB2bS5zaWdudXBGb3JtID0ge307IC8vUmVzZXQgZm9ybVxuICAgICAgICAgICAgICAgIHZtLm1lc3NhZ2UgPSAnc3VjY2Vzc2Z1bGx5IGNyZWF0ZWQgYW4gYWNjb3VudCc7XG4gICAgICAgICAgICAgICAgU2VjdGlvbnMuZ29CYWNrKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGVycm9ySGFuZGxlcihlcnIpIHtcbiAgICAgICAgICAgICAgICB2bS5lcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgdm0ubWVzc2FnZSA9ICdUaGVyZVxcJ3MgYWxyZWFkeSBhbiBhY2NvdW50IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGVtYWlsLiBQbGVhc2UgbG9nIGluIG9yIHRyeSBhZ2FpbiB3aXRoIGEgZGlmZmVyZW50IGFkZHJlc3MuJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdzb0ZhckNvbnRyb2xsZXInLCBzb0ZhckNvbnRyb2xsZXIpO1xuXG4gICAgc29GYXJDb250cm9sbGVyLiRpbmplY3QgPSBbXG4gICAgICAgICckaHR0cCcsXG4gICAgICAgICckaW50ZXJ2YWwnLFxuICAgICAgICAnJG1kRGlhbG9nJyxcbiAgICAgICAgJyRtZE1lZGlhJyxcbiAgICAgICAgJyRyb290U2NvcGUnLFxuICAgICAgICAnJHNjb3BlJyxcbiAgICAgICAgJyRzdGF0ZScsXG4gICAgICAgICdIb3VzZWhvbGQnLFxuICAgICAgICAnU2VjdGlvbnMnXG4gICAgXTtcblxuICAgIGZ1bmN0aW9uIHNvRmFyQ29udHJvbGxlciAoJGh0dHAsICRpbnRlcnZhbCwgJG1kRGlhbG9nLCAkbWRNZWRpYSwgJHJvb3RTY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLCAkc3RhdGUsIEhvdXNlaG9sZCwgU2VjdGlvbnMpIHtcbiAgICAgICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICAgICAgICB2YXIgdm0gPSAkc2NvcGU7XG4gICAgICAgIHZtLm1lYW5zVGVzdCA9IFNlY3Rpb25zLm1lYW5zVGVzdDtcblxuICAgICAgICB2bS5jaGlsZHJlbkxhYmVsID0gJ2NoaWxkcmVuJztcbiAgICAgICAgdm0uYWR1bHRzTGFiZWwgPSAnYWR1bHRzJztcblxuICAgICAgICB2bS5pbmNvbWVFYXJuZXJzQ291bnQgPSBjb3VudEVhcm5lcnMoJHJvb3RTY29wZS5ob3VzZWhvbGQpO1xuICAgICAgICB2bS5pbmNvbWVFc3RpbWF0ZSA9IGVzdGltYXRlSW5jb21lKCRyb290U2NvcGUuaG91c2Vob2xkKTtcblxuICAgICAgICAvLyBuYXZpZ2F0aW9uXG4gICAgICAgIHZtLmdvQmFjayA9IGdvQmFjaztcbiAgICAgICAgdm0ubmF2aWdhdGVUb05leHRTZWN0aW9uID0gbmF2aWdhdGVUb05leHRTZWN0aW9uO1xuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICAgICAgaWYgKCRyb290U2NvcGUuaG91c2Vob2xkLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHZtLmNoaWxkcmVuTGFiZWwgPSAnY2hpbGQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCRyb290U2NvcGUuaG91c2Vob2xkLm90aGVyTWVtYmVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICB2bS5hZHVsdHNMYWJlbCA9ICdhZHVsdCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpbml0KCk7XG5cbiAgICAgICAgZnVuY3Rpb24gZXN0aW1hdGVJbmNvbWUoKSB7XG4gICAgICAgICAgICB2YXIgZnJlcXVlbmN5TXVsaXRwbGllciA9IHtcbiAgICAgICAgICAgICAgICB3ZWVrbHk6IDUyLFxuICAgICAgICAgICAgICAgICdldmVyeSAyIHdlZWtzJzogMjYsXG4gICAgICAgICAgICAgICAgJ3R3aWNlIGEgbW9udGgnOiAyNCxcbiAgICAgICAgICAgICAgICBtb250aGx5OiAxMlxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0VG90YWxmb3JTb3VyY2Uoc291cmNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5hbW91bnQgKiBmcmVxdWVuY3lNdWxpdHBsaWVyW3NvdXJjZS5mcmVxdWVuY3ldO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZXN0aW1hdGVkQW5udWFsSW5jb21lID0gMDtcblxuICAgICAgICAgICAgJHJvb3RTY29wZS5ob3VzZWhvbGQuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZC5lYXJuc0luY29tZSkge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZC5pbmNvbWVTb3VyY2VzLmZvckVhY2goZnVuY3Rpb24oaW5jb21lU291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5jb21lU291cmNlLmFtb3VudCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc3RpbWF0ZWRBbm51YWxJbmNvbWUgKz0gZ2V0VG90YWxmb3JTb3VyY2UoaW5jb21lU291cmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICRyb290U2NvcGUuaG91c2Vob2xkLm90aGVyTWVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKG1lbWJlcikge1xuICAgICAgICAgICAgICAgIGlmICghbWVtYmVyLmluY29tZUNhdGVnb3J5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGluY29tZVNvdXJjZTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gbWVtYmVyLmluY29tZUNhdGVnb3J5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgdmFsdWUgZ2V0cyBzdGFzaGVkIGluIHRoZSBzYW1lIHBsYWNlXG4gICAgICAgICAgICAgICAgICAgIGluY29tZVNvdXJjZSA9IG1lbWJlci5pbmNvbWVDYXRlZ29yeVtrZXldO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrIGluIGluY29tZVNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGsgIT09ICdzaG93Q2hlY2tib3hlcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc291cmNlID0gaW5jb21lU291cmNlW2tdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXN0aW1hdGVkQW5udWFsSW5jb21lICs9IGdldFRvdGFsZm9yU291cmNlKHNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKGVzdGltYXRlZEFubnVhbEluY29tZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjb3VudEVhcm5lcnMoaG91c2Vob2xkKSB7XG4gICAgICAgICAgICB2YXIgZWFybmVyc0NvdW50ID0gMDtcbiAgICAgICAgICAgICRyb290U2NvcGUuaG91c2Vob2xkLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQuZWFybnNJbmNvbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZWFybmVyc0NvdW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICRyb290U2NvcGUuaG91c2Vob2xkLm90aGVyTWVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKG1lbWJlcikge1xuICAgICAgICAgICAgICAgIGlmIChtZW1iZXIuaW5jb21lQ2F0ZWdvcnkgJiYgT2JqZWN0LmtleXMobWVtYmVyLmluY29tZUNhdGVnb3J5KS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGVhcm5lcnNDb3VudCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gZWFybmVyc0NvdW50O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgICAgICAgICAgSG91c2Vob2xkLnNhdmUoKTtcbiAgICAgICAgICAgIFNlY3Rpb25zLnVwZGF0ZVJlcXVpcmVkU2VjdGlvbnMoKTtcbiAgICAgICAgICAgIFNlY3Rpb25zLmdvQmFjaygpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbmF2aWdhdGVUb05leHRTZWN0aW9uKCkge1xuICAgICAgICAgICAgSG91c2Vob2xkLnNhdmUoKTtcbiAgICAgICAgICAgIFNlY3Rpb25zLnVwZGF0ZVJlcXVpcmVkU2VjdGlvbnMoKTtcbiAgICAgICAgICAgIFNlY3Rpb25zLm5hdmlnYXRlVG9OZXh0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgLm1vZHVsZSgnZWF0Q2hhbGxlbmdlQXBwJylcbiAgICAgIC5jb250cm9sbGVyKCd1c2VyQ29udHJvbHNDb250cm9sbGVyJywgdXNlckNvbnRyb2xzQ29udHJvbGxlcik7XG4gICAgdXNlckNvbnRyb2xzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyRzY29wZScsICckc3RhdGUnLCAnYXV0aCddO1xuICAgIGZ1bmN0aW9uIHVzZXJDb250cm9sc0NvbnRyb2xsZXIoJHJvb3RTY29wZSwgJHNjb3BlLCAkc3RhdGUsIGF1dGgpIHtcbiAgICAgICAgdmFyIHZtID0gJHNjb3BlO1xuICAgICAgICB2bS5sb2dnZWRJbiA9IGF1dGguZ2V0VXNlclN0YXR1cygpO1xuICAgICAgICB2bS5sb2dvdXQgPSBsb2dvdXQ7XG4gICAgICAgIHZtLnVzZXIgPSAkcm9vdFNjb3BlLnVzZXI7XG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgZnVuY3Rpb24gbG9nb3V0KCkge1xuICAgICAgICAgICAgYXV0aC5sb2dvdXQoKTtcbiAgICAgICAgICAgIHZtLmxvZ2dlZEluID0gYXV0aC5nZXRVc2VyU3RhdHVzKCk7XG4gICAgICAgICAgICAkc3RhdGUuZ28oJ3NhdmVBbmRFeGl0Jyk7XG4gICAgICAgIH1cblxuICAgICAgICAkcm9vdFNjb3BlLiR3YXRjaCgndXNlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdm0ubG9nZ2VkSW4gPSBhdXRoLmdldFVzZXJTdGF0dXMoKTtcbiAgICAgICAgICAgIHZtLnVzZXIgPSAkcm9vdFNjb3BlLnVzZXI7XG4gICAgICAgIH0pO1xuICAgIH1cblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAgIC5zZXJ2aWNlKCdhdXRoJywgQXV0aFNlcnZpY2UpO1xuXG4gICAgQXV0aFNlcnZpY2UuJGluamVjdCA9IFsnJGNvb2tpZXMnLCAnJGh0dHAnLCAnJHEnLCAnJHJvb3RTY29wZScsICckc3RhdGUnLCAnSG91c2Vob2xkJ107XG5cbiAgICBmdW5jdGlvbiBBdXRoU2VydmljZSgkY29va2llcywgJGh0dHAsICRxLCAkcm9vdFNjb3BlLCAkc3RhdGUsIEhvdXNlaG9sZCkge1xuICAgICAgICAkcm9vdFNjb3BlLnVzZXIgPSBudWxsO1xuICAgICAgICBpbml0KCk7XG4gICAgICAgIHZhciBzZXJ2aWNlID0ge307XG4gICAgICAgIHNlcnZpY2UuaXNMb2dnZWRJbiA9IGlzTG9nZ2VkSW47XG4gICAgICAgIHNlcnZpY2UuZ2V0VXNlclN0YXR1cyA9IGdldFVzZXJTdGF0dXM7XG4gICAgICAgIHNlcnZpY2Uuc2lnbnVwID0gc2lnbnVwO1xuICAgICAgICBzZXJ2aWNlLmxvZ2luID0gbG9naW47XG4gICAgICAgIHNlcnZpY2UubG9nb3V0ID0gbG9nb3V0O1xuICAgICAgICBzZXJ2aWNlLmluaXQgPSBpbml0O1xuICAgICAgICBzZXJ2aWNlLnNldENyZWRlbnRpYWxzID0gc2V0Q3JlZGVudGlhbHM7XG4gICAgICAgIHNlcnZpY2UuY2xlYXJDcmVkZW50aWFscyA9IGNsZWFyQ3JlZGVudGlhbHM7XG5cbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHVzZXIgb24gc3RhcnRcbiAgICAgICAgICAgIHZhciB1c2VyID0gZ2V0Q3JlZGVudGlhbHMoKTtcbiAgICAgICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS51c2VyID0gdXNlcjtcbiAgICAgICAgICAgICAgICBIb3VzZWhvbGQucmV0cmlldmVGb3JVc2VyKHVzZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc0xvZ2dlZEluKCkge1xuICAgICAgICAgICAgaWYgKCRyb290U2NvcGUudXNlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0VXNlclN0YXR1cygpIHtcbiAgICAgICAgICAgIHJldHVybiAkcm9vdFNjb3BlLnVzZXI7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzaWdudXAoZW1haWwsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHBcbiAgICAgICAgICAgICAgICAucG9zdCgnL3VzZXIvc2lnbnVwJywge3VzZXJuYW1lOiBlbWFpbCwgcGFzc3dvcmQ6IHBhc3N3b3JkfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBsb2dpbihlbWFpbCwgcGFzc3dvcmQpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiBlbWFpbCxcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvdXNlci9sb2dpbicsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbG9nb3V0KCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwXG4gICAgICAgICAgICAgICAgLmdldCgndXNlci9sb2dvdXQnKVxuICAgICAgICAgICAgICAgIC50aGVuKHN1Y2Nlc3NIYW5kbGVyLCBlcnJvckhhbmRsZXIpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBzdWNjZXNzSGFuZGxlcigpIHtcbiAgICAgICAgICAgICAgICBjbGVhckNyZWRlbnRpYWxzKCk7XG4gICAgICAgICAgICAgICAgSG91c2Vob2xkLmNsZWFyKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGVycm9ySGFuZGxlcigpIHtcbiAgICAgICAgICAgICAgICBjbGVhckNyZWRlbnRpYWxzKCk7XG4gICAgICAgICAgICAgICAgSG91c2Vob2xkLmNsZWFyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRDcmVkZW50aWFscyh1c2VyKSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLnVzZXIgPSB1c2VyO1xuICAgICAgICAgICAgcmV0dXJuICRjb29raWVzLnB1dE9iamVjdCgndXNlcicsIHVzZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Q3JlZGVudGlhbHMoKSB7XG4gICAgICAgICAgICByZXR1cm4gJGNvb2tpZXMuZ2V0T2JqZWN0KCd1c2VyJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjbGVhckNyZWRlbnRpYWxzKCkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS51c2VyID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiAkY29va2llcy5yZW1vdmUoJ3VzZXInKTtcbiAgICAgICAgfVxuICAgIH1cblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAgIC5zZXJ2aWNlKCdIb3VzZWhvbGQnLCBob3VzZWhvbGRTZXJ2aWNlKTtcblxuICAgIGhvdXNlaG9sZFNlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnLCAnJHJvb3RTY29wZSddO1xuXG4gICAgZnVuY3Rpb24gaG91c2Vob2xkU2VydmljZSgkaHR0cCwgJHJvb3RTY29wZSkge1xuICAgICAgICAvLyBUb2RvOiBjb25zaWRlciBtb3ZpbmcgdG8gc2VydmVyPz9cbiAgICAgICAgdmFyIEhvdXNlaG9sZCA9ICB7XG4gICAgICAgICAgICBjaGlsZENvdW50OiBudWxsLFxuICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICAgICAgb3RoZXJNZW1iZXJzQ291bnQ6IG51bGwsXG4gICAgICAgICAgICBvdGhlck1lbWJlcnM6IFtdLFxuICAgICAgICAgICAgY29tcGxldGVkQXBwbGljYXRpb246IGZhbHNlXG4gICAgICAgIH07XG5cbiAgICAgICAgJHJvb3RTY29wZS5ob3VzZWhvbGQgPSBhbmd1bGFyLmNvcHkoSG91c2Vob2xkKTtcblxuICAgICAgICB2YXIgc2VydmljZSA9IHt9O1xuICAgICAgICBzZXJ2aWNlLnJldHJpZXZlRm9yVXNlciA9IHJldHJpZXZlRm9yVXNlcjtcbiAgICAgICAgc2VydmljZS5zYXZlID0gc2F2ZTtcbiAgICAgICAgc2VydmljZS5jbGVhciA9IGNsZWFyO1xuICAgICAgICBzZXJ2aWNlLnN1Ym1pdCA9IHN1Ym1pdDtcblxuICAgICAgICByZXR1cm4gc2VydmljZTtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIGZ1bmN0aW9uIHJldHJpZXZlRm9yVXNlcih1c2VyKSB7XG4gICAgICAgICAgICAkaHR0cC5nZXQoJy9ob3VzZWhvbGQvJyArIHVzZXIuX2lkKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuaG91c2Vob2xkID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNhdmUoKSB7XG4gICAgICAgICAgICAvLyBPbmx5IHNhdmUgb24gdGhlIGxhc3QgcGFnZSBvciB3aGVuIFxuICAgICAgICAgICAgLy8gdGhlcmUncyBhIHNpZ25lZCBpbiB1c2VyXG4gICAgICAgICAgICBpZiAoISRyb290U2NvcGUudXNlcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRyb290U2NvcGUuaG91c2Vob2xkLnVzZXJJZCA9ICRyb290U2NvcGUudXNlci5faWQ7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2hvdXNlaG9sZCcsICRyb290U2NvcGUuaG91c2Vob2xkKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5ob3VzZWhvbGQgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHN1Ym1pdCgpIHtcbiAgICAgICAgICAgIGlmICgkcm9vdFNjb3BlLnVzZXIpIHtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmhvdXNlaG9sZC51c2VySWQgPSAkcm9vdFNjb3BlLnVzZXIuX2lkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2hvdXNlaG9sZCcsICRyb290U2NvcGUuaG91c2Vob2xkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuaG91c2Vob2xkID0gT2JqZWN0LmNyZWF0ZShIb3VzZWhvbGQpO1xuICAgICAgICB9XG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnZWF0Q2hhbGxlbmdlQXBwJylcbiAgICAgICAgLnNlcnZpY2UoJ1NlY3Rpb25zJywgc2VjdGlvbnNTZXJ2aWNlKTtcblxuICAgIHNlY3Rpb25zU2VydmljZS4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJyAsJyRzdGF0ZSddO1xuXG4gICAgZnVuY3Rpb24gc2VjdGlvbnNTZXJ2aWNlKCRyb290U2NvcGUsICRzdGF0ZSkge1xuICAgICAgICB2YXIgc2VjdGlvbnMgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdMZXRcXOKAmXMgR2V0IFN0YXJ0ZWQhICcsXG4gICAgICAgICAgICAgICAgc3RhdGU6ICdzdGFydCcsXG4gICAgICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93U3VtbWFyeUFmdGVyOiBmYWxzZVxuICAgICAgICAgICAgfSwgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdDaGlsZHJlbicsXG4gICAgICAgICAgICAgICAgc3RhdGU6ICdjaGlsZHJlbicsXG4gICAgICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93U3VtbWFyeUFmdGVyOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0hvdXNlaG9sZCBNZW1iZXJzJyxcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2hvdXNlaG9sZCcsXG4gICAgICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93U3VtbWFyeUFmdGVyOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1doYXQgWW91XFwndmUgRW50ZXJlZCBTbyBGYXInLFxuICAgICAgICAgICAgICAgIHN0YXRlOiAnc29GYXInLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hvd1N1bW1hcnlBZnRlcjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdDaGlsZHJlblxcJ3MgSW5jb21lJyxcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2NoaWxkSW5jb21lJyxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNob3dTdW1tYXJ5QWZ0ZXI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnSG91c2Vob2xkIEluY29tZScsXG4gICAgICAgICAgICAgICAgc3RhdGU6ICdob3VzZWhvbGRJbmNvbWUnLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hvd1N1bW1hcnlBZnRlcjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdTdW1tYXJ5JyxcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ3NvRmFyLTInLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hvd1N1bW1hcnlBZnRlcjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdEaXNjbG9zdXJlJyxcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2Rpc2Nsb3N1cmUnLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hvd1N1bW1hcnlBZnRlcjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdTaWduIGFuZCBDb25maXJtJyxcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ3NpZ25hdHVyZScsXG4gICAgICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93U3VtbWFyeUFmdGVyOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXTtcblxuICAgICAgICB2YXIgaW5kZXhlZFNlY3Rpb25zID0gXy5pbmRleEJ5KHNlY3Rpb25zLCAnc3RhdGUnKTtcblxuICAgICAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgICAgICAgIG1lYW5zVGVzdDogdHJ1ZSxcbiAgICAgICAgICAgIHNlY3Rpb25zOiBzZWN0aW9ucyxcbiAgICAgICAgICAgIGluZGV4ZWRTZWN0aW9uczogaW5kZXhlZFNlY3Rpb25zLFxuICAgICAgICAgICAgbmF2aWdhdGVUb05leHQ6IG5hdmlnYXRlVG9OZXh0LFxuICAgICAgICAgICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgICAgICAgICB1cGRhdGVSZXF1aXJlZFNlY3Rpb25zOiB1cGRhdGVSZXF1aXJlZFNlY3Rpb25zXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVSZXF1aXJlZFNlY3Rpb25zKCkge1xuICAgICAgICAgICAgdmFyIGhvdXNlaG9sZCA9ICRyb290U2NvcGUuaG91c2Vob2xkO1xuICAgICAgICAgICAgc2VydmljZS5tZWFuc1Rlc3QgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIGFzc2lzdGFuY2VQcm9ncmFtSG91c2Vob2xkID0gaXNBc3Npc3RhbmNlSG91c2Vob2xkKGhvdXNlaG9sZCk7XG4gICAgICAgICAgICB2YXIgY2F0ZWdvcmljYWxseVF1YWxpZmllZCA9IGFsbFN0dWRlbnRzQ2F0ZWdvcmljYWxseVF1YWxpZnkoaG91c2Vob2xkKTtcblxuICAgICAgICAgICAgaWYgKGFzc2lzdGFuY2VQcm9ncmFtSG91c2Vob2xkIHx8IGNhdGVnb3JpY2FsbHlRdWFsaWZpZWQpIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlLm1lYW5zVGVzdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGluZGV4ZWRTZWN0aW9uc1snY2hpbGRJbmNvbWUnXS5yZXF1aXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGluZGV4ZWRTZWN0aW9uc1snaG91c2Vob2xkJ10ucmVxdWlyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpbmRleGVkU2VjdGlvbnNbJ2hvdXNlaG9sZEluY29tZSddLnJlcXVpcmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaW5kZXhlZFNlY3Rpb25zWydzb0Zhci0yJ10ucmVxdWlyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNlY3Rpb25zLmZvckVhY2goZnVuY3Rpb24oc2VjdGlvbikge1xuICAgICAgICAgICAgICAgIHNlY3Rpb24ucmVxdWlyZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc0Fzc2lzdGFuY2VIb3VzZWhvbGQoaG91c2Vob2xkKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudENoaWxkO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAgOyBpIDwgaG91c2Vob2xkLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudENoaWxkID0gaG91c2Vob2xkLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q2hpbGQuYXNzaXN0YW5jZVByb2dyYW0gJiYgY3VycmVudENoaWxkLmFzc2lzdGFuY2VQcm9ncmFtLnBhcnRpY2lwYW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFsbFN0dWRlbnRzQ2F0ZWdvcmljYWxseVF1YWxpZnkoaG91c2Vob2xkKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudENoaWxkLCBjaGlsZFF1YWxpZmllcztcblxuICAgICAgICAgICAgdmFyIGVucm9sbGVkQ2hpbGRyZW4gPSBfLmZpbHRlcihob3VzZWhvbGQuY2hpbGRyZW4sIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYy5lbnJvbGxlZCA9PT0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBtdXN0IGhhdmUga2lkcyB0byBxdWFsaWZ5XG4gICAgICAgICAgICBpZiAoZW5yb2xsZWRDaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vYWxsIGNoaWxkcmVuIGFyZSBjYXRlZ29yaWNhbGx5IHF1YWxpZmllZFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAgOyBpIDwgZW5yb2xsZWRDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRDaGlsZCA9IGhvdXNlaG9sZC5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRDaGlsZC5zcGVjaWFsU3RhdHVzLmZvc3RlckNoaWxkICYmXG4gICAgICAgICAgICAgICAgICAgICFjdXJyZW50Q2hpbGQuc3BlY2lhbFN0YXR1cy5ob21lbGVzc01pZ3JhbnRSdW5hd2F5ICYmXG4gICAgICAgICAgICAgICAgICAgICFjdXJyZW50Q2hpbGQuc3BlY2lhbFN0YXR1cy5oZWFkU3RhcnRQYXJ0aWNpcGFudFxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZmluZE5leHQoY3VycmVudFN0YXRlKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gXy5maW5kSW5kZXgoc2VjdGlvbnMsIGZ1bmN0aW9uKHNlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VjdGlvbi5zdGF0ZSA9PT0gY3VycmVudFN0YXRlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIExvb2sgZm9yIHRoZSBuZXh0IHJlcXVpcmVkIHNlY3Rpb25cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBjdXJyZW50SW5kZXggKyAxOyBpIDwgc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VjdGlvbnNbaV0ucmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlY3Rpb25zW2ldLnN0YXRlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgdGhlcmUgYXJlIG5vIG1vcmUgcmVxdWlyZWQgc2VjdGlvbnMsIHdlJ3JlIGRvbmUuXG4gICAgICAgICAgICByZXR1cm4gJ2NvbmZpcm1hdGlvbic7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBuYXZpZ2F0ZVRvTmV4dCgpIHtcbiAgICAgICAgICAgIHZhciBuZXh0U2VjdGlvbjtcbiAgICAgICAgICAgIHZhciBjdXJyZW50U3RhdGUgPSAkcm9vdFNjb3BlLmN1cnJlbnRTdGF0ZSB8fCAkc3RhdGUuJGN1cnJlbnQuc2VsZi5uYW1lO1xuICAgICAgICAgICAgdmFyIHByZXZpb3VzU3RhdGUgPSAkcm9vdFNjb3BlLnByZXZpb3VzU3RhdGUgfHwgJ3N0YXJ0JztcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBJZiB5b3UncmUgb24gc29tZSBvdGhlciBwYWdlIGxpa2Ugc3RhcnQgb3Igc2lnbmF0dXJlXG4gICAgICAgICAgICAvLyBNb3ZlIGFoZWFkIGFzIG5vcm1hbFxuICAgICAgICAgICAgbmV4dFNlY3Rpb24gID0gZmluZE5leHQoY3VycmVudFN0YXRlKTtcblxuXG4gICAgICAgICAgICAkc3RhdGUuZ28obmV4dFNlY3Rpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgICAgICAgICAgdmFyIHByZXZpb3VzU3RhdGUgPSAnc3RhcnQnO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRTdGF0ZSA9ICRyb290U2NvcGUuY3VycmVudFN0YXRlO1xuICAgICAgICAgICAgdmFyIG91dE9mRmxvd1N0YXRlcyA9IFsnbG9naW4nLCAnc2lnbnVwJ107XG5cbiAgICAgICAgICAgIGlmIChvdXRPZkZsb3dTdGF0ZXMuaW5kZXhPZihjdXJyZW50U3RhdGUpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHByZXZpb3VzU3RhdGUgPSAkcm9vdFNjb3BlLnByZXZpb3VzU3RhdGUgfHwgJ3N0YXJ0JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IF8uZmluZEluZGV4KHNlY3Rpb25zLCBmdW5jdGlvbihzZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWN0aW9uLnN0YXRlID09PSBjdXJyZW50U3RhdGU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNTdGF0ZSA9IHNlY3Rpb25zW2N1cnJlbnRJbmRleCAtIDFdLnN0YXRlO1xuICAgICAgICAgICAgICAgIHdoaWxlIChpbmRleGVkU2VjdGlvbnNbcHJldmlvdXNTdGF0ZV0ucmVxdWlyZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleCA9IGN1cnJlbnRJbmRleCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzU3RhdGUgPSBzZWN0aW9uc1tjdXJyZW50SW5kZXggLSAxXS5zdGF0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRzdGF0ZS5nbyhwcmV2aW91c1N0YXRlKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59KSgpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
