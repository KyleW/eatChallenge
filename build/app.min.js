!function(){"use strict";function e(e){function t(e){return function(t,l){throw e(t,l),t}}e.decorator("$exceptionHandler",t),t.$inject=["$delegate"]}function t(e){e.$on("$stateChangeSuccess",function(){document.body.scrollTop=document.documentElement.scrollTop=0}),e.$on("$stateChangeSuccess",function(t,l,r,o,n){e.previousState=o.name,e.currentState=l.name})}function l(e){e.theme("default").primaryPalette("teal").backgroundPalette("brown",{"default":"50"}).foregroundPalette[3]="rgba(0,0,0,0.67)"}function r(e,t){function l(e,t){t.otherwise("/"),e.state("start",{url:"/",views:{main:{templateUrl:"../views/start.html",controller:"mainController"}}}).state("children",{url:"/children",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/children.html",controller:"mainController"}}}).state("childIncome",{url:"/childIncome",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/childIncome.html",controller:"mainController"}}}).state("household",{url:"/household",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/household.html",controller:"mainController"}}}).state("householdIncome",{url:"/household-income",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/householdIncome.html",controller:"householdIncome"}}}).state("disclosure",{url:"/disclosure",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/disclosure.html",controller:"mainController"}}}).state("signature",{url:"/signature",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/signature.html",controller:"mainController"}}}).state("confirmation",{url:"/confirmation",views:{main:{templateUrl:"../views/confirmation.html",controller:"mainController"}}}).state("export",{url:"/export",views:{main:{templateUrl:"../views/export.html",controller:"exportController"}}}).state("signup",{url:"/signup",views:{main:{templateUrl:"../views/signup.html",controller:"signupController"}}}).state("login",{url:"/login",views:{main:{templateUrl:"../views/login.html",controller:"loginController"}}}).state("soFar",{url:"/so-far",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/soFar.html",controller:"soFarController"}}}).state("saveAndExit",{url:"/save-and-exit",views:{main:{templateUrl:"../views/save-and-exit.html",controller:"mainController"}}})}l(e,t)}angular.module("eatChallengeApp",["ngCookies","ngCsv","ngMaterial","ngSanitize","ui.router"]).config(r).config(l).config(e).run(t),e.$inject=["$provide"],t.$inject=["$rootScope"],l.$inject=["$mdThemingProvider"],r.$inject=["$stateProvider","$urlRouterProvider"]}();
!function(){"use strict";function t(t,e){t.get("/household/completed").then(function(t){e.completedApplications=t.data})}angular.module("eatChallengeApp").controller("exportController",t),t.$inject=["$http","$scope"]}();
!function(){"use strict";function e(e,o,t,n,a,r){function s(){n.save(),a.updateRequiredSections(),a.navigateToNext()}var l=o;l.navigateToNextSection=s;var c={categoryName:"work",headline:"Work Income",question:"earn money through work",sources:[{value:"work",checkboxLabel:"Work outside the home in a non-military capacity ",shortLabel:"Earnings from work",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"Please report gross income. This is the amount of income earned before any money is taken out for taxes or deductions. Include salary, wages, and cash bonuses."},{value:"selfEmployed",shortLabel:"Earnings from self employment",checkboxLabel:"Self-employed",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"For household members that are self-employed, report income from that work as a net amount. This is calculated by subtracting the total operating expenses of the business from its gross receipts or revenue."},{value:"onStrike",checkboxLabel:"On strike",shortLabel:"Strike Benefits",frequency:["weekly","every 2 weeks","2x month","monthly"]},{value:"military",checkboxLabel:"In the U.S. military",shortLabel:"Basic pay and cash bonuses",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"Please do not include combat pay, FSSA, or private housing allowances."}]},i={categoryName:"publicAssistance",headline:"Public Assistance",question:"receive any public assistance benefits",sources:[{value:"unemployment",checkboxLabel:"Unemployment benefits",shortLabel:"Unemployment benefits",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"workersComp",checkboxLabel:"Worker’s compensation",shortLabel:"Worker’s compensation",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"ssi",checkboxLabel:"Supplemental Security Income (SSI)",shortLabel:"Supplemental Security Income (SSI)",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"cashAssistance",checkboxLabel:"Cash assistance from State or local government",shortLabel:"Cash assistance",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"This could include TANF or General Assistance money."},{value:"veteransBenefits",checkboxLabel:"Veteran’s benefits",shortLabel:"Veteran’s benefits",frequency:["weekly","every 2 weeks","twice a month","monthly"]}]},h={categoryName:"alimony",headline:"Alimony",question:"receive alimony payments",sources:[{value:"alimony",checkboxLabel:"alimony payments",shortLabel:"Alimony payment",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"If income is received from alimony, only court-ordered payments should be reported here. Informal but regular payments should be reported later as “other” income."}]},m={categoryName:"childSupport",headline:"Child Support",question:"receive any child support",sources:[{value:"childSupport",checkboxLabel:"any child support",shortLabel:"Child support payment",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"If income is received from child support, only court-ordered payments should be reported here. Informal but regular payments should be reported later as “other” income."}]},y={categoryName:"retirement",headline:"Pension and Retirement",question:"receive any pension or retirement money",sources:[{value:"socialSecurity",checkboxLabel:"Social Security",shortLabel:"Social security",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"Please include railroad retirement and black lung benefits"},{value:"privatePension",checkboxLabel:"Private pensions or disability",shortLabel:"Private pensions or disability",frequency:["weekly","every 2 weeks","twice a month","monthly"]}]},u={categoryName:"otherIncome",headline:"Other Income",question:"recieve money through any other source",sources:[{value:"trusts",checkboxLabel:"Income from trusts or estates",shortLabel:"Income from trusts or estates",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"annuities",checkboxLabel:"Annuities",shortLabel:"Income from annuities",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"investment",checkboxLabel:"Investment income",shortLabel:"Investment income",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"interest",checkboxLabel:"Earned interest",shortLabel:"Earned interest",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"rentalIncome",checkboxLabel:"Rental income",shortLabel:"Rental income",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"otherCash",checkboxLabel:"Regular cash payments from outside household",shortLabel:"Regular cash payments from outside household",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"Such cash payments should include regular child support or alimony payments received by the household that are not court-ordered."}]};l.incomeCategories=[c,i,h,m,y,u]}angular.module("eatChallengeApp").controller("householdIncome",e),e.$inject=["$rootScope","$scope","$state","Household","Sections"]}();
!function(){"use strict";function e(e,n,o,t,s){function l(){function e(e){i.loginForm={},i.message="successfully logged in",n.go("soFar")}function t(e){i.message="Something went wrong. Please try again"}o.login(a.email,a.password).then(e,t)}var i=e,a={};i.submit=l,i.user=a}angular.module("eatChallengeApp").controller("loginController",e),e.$inject=["$scope","$state","auth","Household","Sections"]}();
!function(){"use strict";function e(e,o,t,n,i,r,h,c,u,l){function a(o){o>i.household.children.length&&e.get("/child").then(function(e){var t=e.data;i.household.children.push(t),a(o)})}function s(o){o>i.household.otherMembers.length&&e.get("/household-member").then(function(e){var t=e.data;t={},i.household.otherMembers.push(t),s(o)})}function d(e){return e.children.length>e.childCount&&(e.children=e.children.slice(0,e.childCount)),e}function m(e){return e.otherMembers.length>e.otherMembersCount&&e.otherMembers.slice(0,e.otherMembersCount),e}function f(){var e=t.confirm().title("Ready to go on?").textContent("It looks like you have some errors or missing information in this section. Do you want to fix it now?").ariaLabel("Lucky day").targetEvent(ev).ok("Move Ahead Anyway").cancel("Go Back and Fix It Now");return t.show(e)}function g(){u.save(),l.updateRequiredSections(),l.goBack()}function v(){return"children"!==i.currentState||C.childrenForm.$valid?!1:!0}function p(){C.showErrors=!0}function $(){u.save(),l.updateRequiredSections(),l.navigateToNext()}function b(){v()?f().then($,p):$()}function w(){d(i.household),m(i.household),i.household.completed=!0,b()}var C=r;C.schoolDistrict="Oakland Unified School District",C.goBack=g,C.navigateToNextSection=b,C.submitApplication=w,C.showErrors=!1,r.$watch("household.childCount",a),r.$watch("household.otherMembersCount",s)}angular.module("eatChallengeApp").controller("mainController",e),e.$inject=["$http","$interval","$mdDialog","$mdMedia","$rootScope","$scope","$state","$timeout","Household","Sections"]}();
!function(){"use strict";function e(e,t,n){var c=e;c.currentState=t.$current.self.name,c.sections=n.sections}angular.module("eatChallengeApp").controller("sideNavController",e),e.$inject=["$scope","$state","Sections"]}();
!function(){"use strict";function e(e,n,o){function s(){function e(){a.disabled=!1,a.signupForm={},a.message="successfully created an account",o.goBack()}function s(e){console.log(e),a.error=!0,a.message="Something went wrong. Please try again",a.disabled=!1}a.error=!1,a.disabled=!0,n.signup(t.email,t.password).then(e,s)}var a=e,t={};a.submit=s,a.user=t}angular.module("eatChallengeApp").controller("signupController",e),e.$inject=["$scope","auth","Sections"]}();
!function(){"use strict";function e(e,o,n,t,r,a,c,i,u){function h(){1===r.household.children.length&&(m.childrenLabel="child"),1===r.household.otherMembers.length&&(m.adultsLabel="adult")}function l(){function e(e){return e.amount*o[e.frequency]}var o={weekly:52,"every 2 weeks":26,"twice a month":24,monthly:12},n=0;return r.household.children.forEach(function(o){o.earnsIncome&&o.incomeSources.forEach(function(o){o.amount>0&&(n+=e(o))})}),r.household.otherMembers.forEach(function(o){if(o.incomeCategory){var t;for(var r in o.incomeCategory){t=o.incomeCategory[r];for(var a in t)if("showCheckboxes"!==a){var c=t[a];n+=e(c)}}}}),Math.round(n)}function s(e){var o=0;return r.household.children.forEach(function(e){e.earnsIncome&&o++}),r.household.otherMembers.forEach(function(e){e.incomeCategory&&Object.keys(e.incomeCategory)>0&&o++}),o}function d(){i.save(),u.updateRequiredSections(),u.goBack()}function f(){i.save(),u.updateRequiredSections(),u.navigateToNext()}var m=a;m.meansTest=u.meansTest,m.childrenLabel="children",m.adultsLabel="adults",m.incomeEarnersCount=s(r.household),m.incomeEstimate=l(r.household),m.goBack=d,m.navigateToNextSection=f,h()}angular.module("eatChallengeApp").controller("soFarController",e),e.$inject=["$http","$interval","$mdDialog","$mdMedia","$rootScope","$scope","$state","Household","Sections"]}();
!function(){"use strict";function t(t,e,o,u){function n(){u.logout(),r.loggedIn=u.getUserStatus(),o.go("saveAndExit")}var r=e;r.loggedIn=u.getUserStatus(),r.logout=n,r.user=t.user,t.$watch("user",function(){r.loggedIn=u.getUserStatus(),r.user=t.user})}angular.module("eatChallengeApp").controller("userControlsController",t),t.$inject=["$rootScope","$scope","$state","auth"]}();
!function(){"use strict";function e(){var e={scope:{member:"="},restrict:"A",replace:!0,templateUrl:"../views/income.html",link:o};return e}function o(e){e.incomeSources={work:{vaule:"work",label:"Earnings from work:",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"A child has a job where they earn salary or wages. Please report gross income. This is the amount of income earned before any money is taken out for taxes or deductions. Include salary, wages, and cash bonuses."},socialSecurity:{vaule:"socialSecurity",label:"Social Security Disability Payments or Survivor’s Benefits:",frequency:["monthly"]},otherPerson:{vaule:"otherPerson",label:"Income from persons outside the household:",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"A friend or extended family member regularly gives a child spending money."},otherSource:{vaule:"otherSource",label:"Income from any other source:",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"A child receives income from a private pension fund, annuity, or trust."}},0===e.member.incomeSources.length&&(e.member.incomeSources=[],Object.keys(e.incomeSources).forEach(function(o){e.member.incomeSources.push({type:o,amount:null,frequency:null})}))}angular.module("eatChallengeApp").directive("incomeQuestions",e)}();
!function(){"use strict";function e(){return{scope:{model:"="},restrict:"A",replace:!0,templateUrl:"../views/yesno.html"}}angular.module("eatChallengeApp").directive("yesNoInput",e)}();
!function(){"use strict";function e(e,n,t,r,u,o){function s(){var e=p();e&&(r.user=e,o.retrieveForUser(e))}function i(){return r.user?!0:!1}function c(){return r.user}function a(e,t){function r(e){g(e.data.user),o.save()}function u(e){console.log(e)}return n.post("/user/signup",{username:e,password:t}).then(r,u)}function l(e,t){function r(e){g(e.data.user),o.retrieveForUser(e.data.user)}function u(e,n){console.log(n),d()}var s={username:e,password:t};return n.post("/user/login",s).then(r,u)}function f(){function e(){d(),o.clear()}function t(){d(),o.clear()}return n.get("user/logout").then(e,t)}function g(n){return r.user=n,e.putObject("user",n)}function p(){return e.getObject("user")}function d(){return r.user=null,e.remove("user")}r.user=null,s();var v={};return v.isLoggedIn=i,v.getUserStatus=c,v.signup=a,v.login=l,v.logout=f,v.init=s,v}angular.module("eatChallengeApp").service("auth",e),e.$inject=["$cookies","$http","$q","$rootScope","$state","Household"]}();
!function(){function e(e,o){function u(u){e.get("/household/"+u._id).then(function(e){o.household=e.data})}function t(){return o.user?(o.household.userId=o.user._id,e.post("/household",o.household)):void 0}function r(){return o.user&&(o.household.userId=o.user._id),e.post("/household",o.household)}function h(){o.household=Object.create(n)}var n={childCount:null,children:[],otherMembersCount:null,otherMembers:[],completedApplication:!1};o.household=angular.copy(n);var l={};return l.retrieveForUser=u,l.save=t,l.clear=h,l.submit=r,l}angular.module("eatChallengeApp").service("Household",e),e.$inject=["$http","$rootScope"]}();
!function(){"use strict";function e(e,r){function t(){var r=e.household;c.meansTest=!0;var t=a(r),o=n(r);return t||o?(c.meansTest=!1,l.childIncome.required=!1,l.household.required=!1,void(l.householdIncome.required=!1)):void u.forEach(function(e){e.required=!0})}function a(e){for(var r,t=0;t<e.children.length;t++)if(r=e.children[t],r.assistanceProgram&&r.assistanceProgram.participant)return!0;return!1}function n(e){var r,t=_.filter(e.children,function(e){return e.enrolled===!0});if(0===t.length)return!1;for(var a=0;a<t.length;a++)if(r=e.children[a],!r.specialStatus.fosterChild&&!r.specialStatus.homelessMigrantRunaway&&!r.specialStatus.headStartParticipant)return!1;return!0}function o(e){for(var r=_.findIndex(u,function(r){return r.state===e}),t=r+1;t<u.length;t++)if(u[t].required)return u[t].state;return"confirmation"}function s(){var t,a=e.currentState||r.$current.self.name,n=e.previousState||"start";t="soFar"===a?n?o(n):"start":l[a].showSummaryAfter?"soFar":o(a),r.go(t)}function i(){var t=e.previousState||"start";r.go(t)}var u=[{label:"Let’s Get Started! ",state:"start",completed:!1,required:!0,showSummaryAfter:!1},{label:"Children",state:"children",completed:!1,required:!0,showSummaryAfter:!1},{label:"Household Members",state:"household",completed:!1,required:!0,showSummaryAfter:!0},{label:"Children's Income",state:"childIncome",completed:!1,required:!0,showSummaryAfter:!1},{label:"Household Income",state:"householdIncome",completed:!1,required:!0,showSummaryAfter:!0},{label:"Disclosure",state:"disclosure",completed:!1,required:!0,showSummaryAfter:!1},{label:"Sign and Confirm",state:"signature",completed:!1,required:!0,showSummaryAfter:!1}],l=_.indexBy(u,"state"),c={meansTest:!0,sections:u,indexedSections:l,navigateToNext:s,goBack:i,updateRequiredSections:t};return c}angular.module("eatChallengeApp").service("Sections",e),e.$inject=["$rootScope","$state"]}();
//# sourceMappingURL=data:application/json;base64,
