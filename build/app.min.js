!function(){"use strict";function e(e){function t(e){return function(t,r){throw e(t,r),t}}e.decorator("$exceptionHandler",t),t.$inject=["$delegate"]}function t(e){e.$on("$stateChangeSuccess",function(){document.body.scrollTop=document.documentElement.scrollTop=0}),e.$on("$stateChangeSuccess",function(t,r,l,o,n){e.previousState=o.name,e.currentState=r.name})}function r(e){e.theme("default").primaryPalette("teal").backgroundPalette("brown",{"default":"50"}).foregroundPalette[3]="rgba(0,0,0,0.67)"}function l(e,t){function r(e,t){t.otherwise("/"),e.state("start",{url:"/",views:{main:{templateUrl:"../views/start.html",controller:"mainController"}}}).state("children",{url:"/children",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/children.html",controller:"mainController"}}}).state("childIncome",{url:"/childIncome",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/childIncome.html",controller:"mainController"}}}).state("household",{url:"/household",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/household.html",controller:"mainController"}}}).state("householdIncome",{url:"/household-income",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/householdIncome.html",controller:"householdIncome"}}}).state("disclosure",{url:"/disclosure",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/disclosure.html",controller:"mainController"}}}).state("signature",{url:"/signature",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/signature.html",controller:"mainController"}}}).state("confirmation",{url:"/confirmation",views:{main:{templateUrl:"../views/confirmation.html",controller:"mainController"}}}).state("export",{url:"/export",views:{main:{templateUrl:"../views/export.html",controller:"exportController"}}}).state("signup",{url:"/signup",views:{main:{templateUrl:"../views/signup.html",controller:"signupController"}}}).state("login",{url:"/login",views:{main:{templateUrl:"../views/login.html",controller:"loginController"}}}).state("soFar",{url:"/so-far",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/soFar.html",controller:"soFarController"}}}).state("soFar-2",{url:"/so-far-2",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/soFar.html",controller:"soFarController"}}}).state("saveAndExit",{url:"/save-and-exit",views:{main:{templateUrl:"../views/save-and-exit.html",controller:"mainController"}}})}r(e,t)}angular.module("eatChallengeApp",["ngCookies","ngCsv","ngMaterial","ngSanitize","ui.router"]).config(l).config(r).config(e).run(t),e.$inject=["$provide"],t.$inject=["$rootScope"],r.$inject=["$mdThemingProvider"],l.$inject=["$stateProvider","$urlRouterProvider"]}();
!function(){"use strict";function t(t,e){t.get("/household/completed").then(function(t){e.completedApplications=t.data})}angular.module("eatChallengeApp").controller("exportController",t),t.$inject=["$http","$scope"]}();
!function(){"use strict";function e(e,o,t,n,a,r,s,i){function l(o){var t=e.confirm().title("Ready to go on?").textContent("It looks like you have some errors or missing information in this section. Do you want to fix it now?").ariaLabel("Ready to go on?").targetEvent(o).ok("Move Ahead Anyway").cancel("Go Back and Fix It Now");return e.show(t)}function c(){var e;if(b.form&&!b.form.$valid)return!0;for(var o=0;o<t.household.otherMembers.length;o++){e=t.household.otherMembers[o];for(var n in e.incomeCategory)if(void 0===e.incomeCategory[n].showCheckboxes)return!0}return!1}function h(){b.showErrors=!0,document.body.scrollTop=document.documentElement.scrollTop=0}function m(){r.save(),s.updateRequiredSections(),s.navigateToNext()}function u(){c()?l().then(m,h):m()}function y(){r.save(),s.updateRequiredSections(),s.goBack()}var b=n;b.numberRegex="^[1-9][0-9]*$",b.navigateToNextSection=u;var d={categoryName:"work",headline:"Work Income",question:"earn money through work",sources:[{value:"work",checkboxLabel:"Work outside the home in a non-military capacity ",shortLabel:"Earnings from work",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"Please report gross income. This is the amount of income earned before any money is taken out for taxes or deductions. Include salary, wages, and cash bonuses."},{value:"selfEmployed",shortLabel:"Earnings from self employment",checkboxLabel:"Self-employed",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"For household members that are self-employed, report income from that work as a net amount. This is calculated by subtracting the total operating expenses of the business from its gross receipts or revenue."},{value:"onStrike",checkboxLabel:"On strike",shortLabel:"Strike Benefits",frequency:["weekly","every 2 weeks","2x month","monthly"]},{value:"military",checkboxLabel:"In the U.S. military",shortLabel:"Basic pay and cash bonuses",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"Please do not include combat pay, FSSA, or private housing allowances."}]},k={categoryName:"publicAssistance",headline:"Public Assistance",question:"receive any public assistance benefits",sources:[{value:"unemployment",checkboxLabel:"Unemployment benefits",shortLabel:"Unemployment benefits",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"workersComp",checkboxLabel:"Worker’s compensation",shortLabel:"Worker’s compensation",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"ssi",checkboxLabel:"Supplemental Security Income (SSI)",shortLabel:"Supplemental Security Income (SSI)",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"cashAssistance",checkboxLabel:"Cash assistance from State or local government",shortLabel:"Cash assistance",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"This could include TANF or General Assistance money."},{value:"veteransBenefits",checkboxLabel:"Veteran’s benefits",shortLabel:"Veteran’s benefits",frequency:["weekly","every 2 weeks","twice a month","monthly"]}]},v={categoryName:"alimony",headline:"Alimony",question:"receive alimony payments",sources:[{value:"alimony",checkboxLabel:"alimony payments",shortLabel:"Alimony payment",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"If income is received from alimony, only court-ordered payments should be reported here. Informal but regular payments should be reported later as “other” income."}]},w={categoryName:"childSupport",headline:"Child Support",question:"receive any child support",sources:[{value:"childSupport",checkboxLabel:"any child support",shortLabel:"Child support payment",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"If income is received from child support, only court-ordered payments should be reported here. Informal but regular payments should be reported later as “other” income."}]},p={categoryName:"retirement",headline:"Pension and Retirement",question:"receive any pension or retirement money",sources:[{value:"socialSecurity",checkboxLabel:"Social Security",shortLabel:"Social security",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"Please include railroad retirement and black lung benefits"},{value:"privatePension",checkboxLabel:"Private pensions or disability",shortLabel:"Private pensions or disability",frequency:["weekly","every 2 weeks","twice a month","monthly"]}]},f={categoryName:"otherIncome",headline:"Other Income",question:"recieve money through any other source",sources:[{value:"trusts",checkboxLabel:"Income from trusts or estates",shortLabel:"Income from trusts or estates",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"annuities",checkboxLabel:"Annuities",shortLabel:"Income from annuities",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"investment",checkboxLabel:"Investment income",shortLabel:"Investment income",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"interest",checkboxLabel:"Earned interest",shortLabel:"Earned interest",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"rentalIncome",checkboxLabel:"Rental income",shortLabel:"Rental income",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"otherCash",checkboxLabel:"Regular cash payments from outside household",shortLabel:"Regular cash payments from outside household",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"Such cash payments should include regular child support or alimony payments received by the household that are not court-ordered."}]};b.goBack=y,b.incomeCategories=[d,k,v,w,p,f]}angular.module("eatChallengeApp").controller("householdIncome",e),e.$inject=["$mdDialog","$mdMedia","$rootScope","$scope","$state","Household","Sections"]}();
!function(){"use strict";function e(e,n,o,t,s){function l(){function e(e){i.loginForm={},i.message="successfully logged in",n.go("soFar")}function t(e){i.message="Something went wrong. Please try again"}o.login(a.email,a.password).then(e,t)}var i=e,a={};i.submit=l,i.user=a}angular.module("eatChallengeApp").controller("loginController",e),e.$inject=["$scope","$state","auth","Household","Sections"]}();
!function(){"use strict";function e(e,o,n,t,r,i,l,h,a){function c(o){o>t.household.children.length&&e.get("/child").then(function(e){var n=e.data;n.incomeSources=Object.keys(p.childIncomeSources).map(function(e){return{type:e,amount:null,frequency:null}}),t.household.children.push(n),c(o)})}function u(o){o>t.household.otherMembers.length&&e.get("/household-member").then(function(e){var n=e.data;n={},t.household.otherMembers.push(n),u(o)})}function s(e){return e.children.length>e.childCount&&(e.children=e.children.slice(0,e.childCount)),e}function d(e){return e.otherMembers.length>e.otherMembersCount&&e.otherMembers.slice(0,e.otherMembersCount),e}function m(e){var n=o.confirm().title("Ready to go on?").textContent("It looks like you have some errors or missing information in this section. Do you want to fix it now?").ariaLabel("Ready to go on?").targetEvent(e).ok("Move Ahead Anyway").cancel("Go Back and Fix It Now");return o.show(n)}function f(){s(t.household),d(t.household),h.save(),a.updateRequiredSections(),a.goBack()}function y(){var e;if("childIncome"===t.currentState){for(var o=0;o<t.household.children.length;o++){if(e=t.household.children[o],void 0===e.earnsIncome)return!0;if(e.earnsIncome===!0&&!p.form.$valid)return!0}return!1}if(p.form&&!p.form.$valid)return!0;if("children"===t.currentState)for(var n=0;n<t.household.children.length;n++)if(e=t.household.children[n],void 0===e.enrolled)return!0;return!1}function v(){p.showErrors=!0,document.body.scrollTop=document.documentElement.scrollTop=0}function g(){h.save(),a.updateRequiredSections(),a.navigateToNext()}function w(){s(t.household),d(t.household),y()?m().then(g,v):g()}function b(){s(t.household),d(t.household),t.household.completed=!0,y()?m().then(g,v):(h.submit(),a.updateRequiredSections(),a.navigateToNext())}var p=r;p.schoolDistrict="Oakland Unified School District",p.goBack=f,p.navigateToNextSection=w,p.submitApplication=b,p.showErrors=!1,p.numberRegex="^[1-9][0-9]*$",p.childIncomeSources={work:{vaule:"work",label:"Earnings from work:",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"A child has a job where they earn salary or wages. Please report gross income. This is the amount of income earned before any money is taken out for taxes or deductions. Include salary, wages, and cash bonuses."},socialSecurity:{vaule:"socialSecurity",label:"Social Security Disability Payments or Survivor’s Benefits:",frequency:["monthly"]},otherPerson:{vaule:"otherPerson",label:"Income from persons outside the household:",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"A friend or extended family member regularly gives a child spending money."},otherSource:{vaule:"otherSource",label:"Income from any other source:",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"A child receives income from a private pension fund, annuity, or trust."}},r.$watch("household.childCount",c),r.$watch("household.otherMembersCount",u)}angular.module("eatChallengeApp").controller("mainController",e),e.$inject=["$http","$mdDialog","$mdMedia","$rootScope","$scope","$state","$timeout","Household","Sections"]}();
!function(){"use strict";function e(e,t,n){var c=e;c.currentState=t.$current.self.name,c.sections=n.sections}angular.module("eatChallengeApp").controller("sideNavController",e),e.$inject=["$scope","$state","Sections"]}();
!function(){"use strict";function e(e,n,o){function s(){function e(){a.disabled=!1,a.signupForm={},a.message="successfully created an account",o.goBack()}function s(e){console.log(e),a.error=!0,a.message="Something went wrong. Please try again",a.disabled=!1}a.error=!1,a.disabled=!0,n.signup(t.email,t.password).then(e,s)}var a=e,t={};a.submit=s,a.user=t}angular.module("eatChallengeApp").controller("signupController",e),e.$inject=["$scope","auth","Sections"]}();
!function(){"use strict";function e(e,o,n,t,r,a,c,i,h){function u(){1===r.household.children.length&&(m.childrenLabel="child"),1===r.household.otherMembers.length&&(m.adultsLabel="adult")}function l(){function e(e){return e.amount*o[e.frequency]}var o={weekly:52,"every 2 weeks":26,"twice a month":24,monthly:12},n=0;return r.household.children.forEach(function(o){o.earnsIncome&&o.incomeSources.forEach(function(o){o.amount>0&&(n+=e(o))})}),r.household.otherMembers.forEach(function(o){if(o.incomeCategory){var t;for(var r in o.incomeCategory){t=o.incomeCategory[r];for(var a in t)if("showCheckboxes"!==a){var c=t[a];n+=e(c)}}}}),Math.round(n)}function s(e){var o=0;return r.household.children.forEach(function(e){e.earnsIncome&&o++}),r.household.otherMembers.forEach(function(e){e.incomeCategory&&Object.keys(e.incomeCategory).length>0&&o++}),o}function d(){i.save(),h.updateRequiredSections(),h.goBack()}function f(){i.save(),h.updateRequiredSections(),h.navigateToNext()}var m=a;m.meansTest=h.meansTest,m.childrenLabel="children",m.adultsLabel="adults",m.incomeEarnersCount=s(r.household),m.incomeEstimate=l(r.household),m.goBack=d,m.navigateToNextSection=f,u()}angular.module("eatChallengeApp").controller("soFarController",e),e.$inject=["$http","$interval","$mdDialog","$mdMedia","$rootScope","$scope","$state","Household","Sections"]}();
!function(){"use strict";function t(t,e,o,u){function n(){u.logout(),r.loggedIn=u.getUserStatus(),o.go("saveAndExit")}var r=e;r.loggedIn=u.getUserStatus(),r.logout=n,r.user=t.user,t.$watch("user",function(){r.loggedIn=u.getUserStatus(),r.user=t.user})}angular.module("eatChallengeApp").controller("userControlsController",t),t.$inject=["$rootScope","$scope","$state","auth"]}();
!function(){"use strict";function e(){return{scope:{model:"="},restrict:"A",replace:!0,templateUrl:"../views/yesno.html"}}angular.module("eatChallengeApp").directive("yesNoInput",e)}();
!function(){"use strict";function e(e,n,t,r,u,o){function s(){var e=p();e&&(r.user=e,o.retrieveForUser(e))}function i(){return r.user?!0:!1}function c(){return r.user}function a(e,t){function r(e){g(e.data.user),o.save()}function u(e){console.log(e)}return n.post("/user/signup",{username:e,password:t}).then(r,u)}function l(e,t){function r(e){g(e.data.user),o.retrieveForUser(e.data.user)}function u(e,n){console.log(n),d()}var s={username:e,password:t};return n.post("/user/login",s).then(r,u)}function f(){function e(){d(),o.clear()}function t(){d(),o.clear()}return n.get("user/logout").then(e,t)}function g(n){return r.user=n,e.putObject("user",n)}function p(){return e.getObject("user")}function d(){return r.user=null,e.remove("user")}r.user=null,s();var v={};return v.isLoggedIn=i,v.getUserStatus=c,v.signup=a,v.login=l,v.logout=f,v.init=s,v}angular.module("eatChallengeApp").service("auth",e),e.$inject=["$cookies","$http","$q","$rootScope","$state","Household"]}();
!function(){function e(e,o){function u(u){e.get("/household/"+u._id).then(function(e){o.household=e.data})}function t(){return o.user?(o.household.userId=o.user._id,e.post("/household",o.household).then(function(e){o.household=e.data})):void 0}function h(){return o.user&&(o.household.userId=o.user._id),e.post("/household",o.household)}function n(){o.household=Object.create(r)}var r={childCount:null,children:[],otherMembersCount:null,otherMembers:[],completedApplication:!1};o.household=angular.copy(r);var l={};return l.retrieveForUser=u,l.save=t,l.clear=n,l.submit=h,l}angular.module("eatChallengeApp").service("Household",e),e.$inject=["$http","$rootScope"]}();
!function(){"use strict";function e(e,r){function t(){var r=e.household;d.meansTest=!0;var t=a(r),o=n(r);return t||o?(d.meansTest=!1,l.childIncome.required=!1,l.household.required=!1,l.householdIncome.required=!1,void(l["soFar-2"].required=!1)):void u.forEach(function(e){e.required=!0})}function a(e){for(var r,t=0;t<e.children.length;t++)if(r=e.children[t],r.assistanceProgram&&r.assistanceProgram.participant)return!0;return!1}function n(e){var r,t=_.filter(e.children,function(e){return e.enrolled===!0});if(0===t.length)return!1;for(var a=0;a<t.length;a++)if(r=e.children[a],!r.specialStatus.fosterChild&&!r.specialStatus.homelessMigrantRunaway&&!r.specialStatus.headStartParticipant)return!1;return!0}function o(e){for(var r=_.findIndex(u,function(r){return r.state===e}),t=r+1;t<u.length;t++)if(u[t].required)return u[t].state;return"confirmation"}function i(){var t,a=e.currentState||r.$current.self.name;e.previousState||"start";t=o(a),r.go(t)}function s(){var t="start",a=e.currentState,n=["login","signup"];if(-1!==n.indexOf(a))t=e.previousState||"start";else{var o=_.findIndex(u,function(e){return e.state===a});for(t=u[o-1].state;l[t].required===!1;)o-=1,t=u[o-1].state}r.go(t)}var u=[{label:"Let’s Get Started! ",state:"start",completed:!1,required:!0,showSummaryAfter:!1},{label:"Children",state:"children",completed:!1,required:!0,showSummaryAfter:!1},{label:"Household Members",state:"household",completed:!1,required:!0,showSummaryAfter:!1},{label:"What You've Entered So Far",state:"soFar",completed:!1,required:!0,showSummaryAfter:!1},{label:"Children's Income",state:"childIncome",completed:!1,required:!0,showSummaryAfter:!1},{label:"Household Income",state:"householdIncome",completed:!1,required:!0,showSummaryAfter:!1},{label:"Summary",state:"soFar-2",completed:!1,required:!0,showSummaryAfter:!1},{label:"Disclosure",state:"disclosure",completed:!1,required:!0,showSummaryAfter:!1},{label:"Sign and Confirm",state:"signature",completed:!1,required:!0,showSummaryAfter:!1}],l=_.indexBy(u,"state"),d={meansTest:!0,sections:u,indexedSections:l,navigateToNext:i,goBack:s,updateRequiredSections:t};return d}angular.module("eatChallengeApp").service("Sections",e),e.$inject=["$rootScope","$state"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbnRyb2xsZXJzL2V4cG9ydC5qcyIsImNvbnRyb2xsZXJzL2hvdXNlaG9sZEluY29tZS5qcyIsImNvbnRyb2xsZXJzL2xvZ2luLmpzIiwiY29udHJvbGxlcnMvbWFpbi5qcyIsImNvbnRyb2xsZXJzL3NpZGVuYXYuanMiLCJjb250cm9sbGVycy9zaWdudXAuanMiLCJjb250cm9sbGVycy9zb0Zhci5qcyIsImNvbnRyb2xsZXJzL3VzZXJDb250cm9scy5qcyIsImRpcmVjdGl2ZXMveWVzbm8uanMiLCJzZXJ2aWNlcy9hdXRoLmpzIiwic2VydmljZXMvaG91c2Vob2xkLmpzIiwic2VydmljZXMvc2VjdGlvbnMuanMiXSwibmFtZXMiOlsiZXJyb3JEZWNvcmF0b3IiLCIkcHJvdmlkZSIsImRlY29yYXRlRXJyb3IiLCIkZGVsZWdhdGUiLCJleGNlcHRpb24iLCJjYXVzZSIsImRlY29yYXRvciIsIiRpbmplY3QiLCJzY3JvbGxlciIsIiRyb290U2NvcGUiLCIkb24iLCJkb2N1bWVudCIsImJvZHkiLCJzY3JvbGxUb3AiLCJkb2N1bWVudEVsZW1lbnQiLCJldiIsInRvIiwidG9QYXJhbXMiLCJmcm9tIiwiZnJvbVBhcmFtcyIsInByZXZpb3VzU3RhdGUiLCJuYW1lIiwiY3VycmVudFN0YXRlIiwibWF0ZXJpYWxEZXNpZ25UaGVtZXIiLCIkbWRUaGVtaW5nUHJvdmlkZXIiLCJ0aGVtZSIsInByaW1hcnlQYWxldHRlIiwiYmFja2dyb3VuZFBhbGV0dGUiLCJkZWZhdWx0IiwiZm9yZWdyb3VuZFBhbGV0dGUiLCJyb3V0ZXJDb25maWciLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsInJvdXRlciIsIm90aGVyd2lzZSIsInN0YXRlIiwidXJsIiwidmlld3MiLCJtYWluIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwidXNlci1jb250cm9scyIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCJydW4iLCJleHBvcnRDb250cm9sbGVyIiwiJGh0dHAiLCIkc2NvcGUiLCJnZXQiLCJ0aGVuIiwicmVzcG9uc2UiLCJjb21wbGV0ZWRBcHBsaWNhdGlvbnMiLCJkYXRhIiwiaG91c2Vob2xkSW5jb21lIiwiJG1kRGlhbG9nIiwiJG1kTWVkaWEiLCIkc3RhdGUiLCJIb3VzZWhvbGQiLCJTZWN0aW9ucyIsIkhvdXNlaG9sZEluY29tZSIsInNob3dDb25maXJtIiwiY29uZmlybSIsInRpdGxlIiwidGV4dENvbnRlbnQiLCJhcmlhTGFiZWwiLCJ0YXJnZXRFdmVudCIsIm9rIiwiY2FuY2VsIiwic2hvdyIsImlzSW52YWxpZEZvcm0iLCJtZW1iZXIiLCJ2bSIsImZvcm0iLCIkdmFsaWQiLCJpIiwiaG91c2Vob2xkIiwib3RoZXJNZW1iZXJzIiwibGVuZ3RoIiwia2V5IiwiaW5jb21lQ2F0ZWdvcnkiLCJ1bmRlZmluZWQiLCJzaG93Q2hlY2tib3hlcyIsImZpeEl0SGFuZGxlciIsInNob3dFcnJvcnMiLCJtb3ZlQWhlYWRIYW5kbGVyIiwic2F2ZSIsInVwZGF0ZVJlcXVpcmVkU2VjdGlvbnMiLCJuYXZpZ2F0ZVRvTmV4dCIsIm5hdmlnYXRlVG9OZXh0U2VjdGlvbiIsImdvQmFjayIsIm51bWJlclJlZ2V4Iiwid29yayIsImNhdGVnb3J5TmFtZSIsImhlYWRsaW5lIiwicXVlc3Rpb24iLCJzb3VyY2VzIiwidmFsdWUiLCJjaGVja2JveExhYmVsIiwic2hvcnRMYWJlbCIsImZyZXF1ZW5jeSIsImFubm90YXRpb24iLCJwdWJsaWNBc3Npc3RhbmNlIiwiYWxpbW9ueSIsImNoaWxkU3VwcG9ydCIsInJldGlyZW1lbnQiLCJvdGhlckluY29tZSIsImluY29tZUNhdGVnb3JpZXMiLCJsb2dpbkNvbnRyb2xsZXIiLCJhdXRoIiwic3VibWl0Iiwic3VjY2Vzc0hhbmRsZXIiLCJsb2dpbkZvcm0iLCJtZXNzYWdlIiwiZ28iLCJlcnJvckhhbmRsZXIiLCJsb2dpbiIsInVzZXIiLCJlbWFpbCIsInBhc3N3b3JkIiwibWFpbkNvbnRyb2xsZXIiLCIkdGltZW91dCIsImFkZENoaWxkIiwibmV3VmFsIiwiY2hpbGRyZW4iLCJuZXdDaGlsZCIsImluY29tZVNvdXJjZXMiLCJPYmplY3QiLCJrZXlzIiwiY2hpbGRJbmNvbWVTb3VyY2VzIiwibWFwIiwiaW5jb21lU291cmNlIiwidHlwZSIsImFtb3VudCIsInB1c2giLCJhZGRPdGhlck1lbWJlciIsIm5ld0hvdXNlaG9sZE1lbWJlciIsInRyaW1DaGlsZHJlbiIsImNoaWxkQ291bnQiLCJzbGljZSIsInRyaW1PdGhlck1lbWJlcnMiLCJvdGhlck1lbWJlcnNDb3VudCIsImNoaWxkIiwiaiIsImVhcm5zSW5jb21lIiwiZW5yb2xsZWQiLCJzdWJtaXRBcHBsaWNhdGlvbiIsImNvbXBsZXRlZCIsInNjaG9vbERpc3RyaWN0IiwidmF1bGUiLCJsYWJlbCIsInNvY2lhbFNlY3VyaXR5Iiwib3RoZXJQZXJzb24iLCJvdGhlclNvdXJjZSIsIiR3YXRjaCIsInNpZGVOYXZDb250cm9sbGVyIiwiJGN1cnJlbnQiLCJzZWxmIiwic2VjdGlvbnMiLCJzaWdudXBDb250cm9sbGVyIiwiZGlzYWJsZWQiLCJzaWdudXBGb3JtIiwiZXJyIiwiY29uc29sZSIsImxvZyIsImVycm9yIiwic2lnbnVwIiwic29GYXJDb250cm9sbGVyIiwiJGludGVydmFsIiwiaW5pdCIsImNoaWxkcmVuTGFiZWwiLCJhZHVsdHNMYWJlbCIsImVzdGltYXRlSW5jb21lIiwiZ2V0VG90YWxmb3JTb3VyY2UiLCJzb3VyY2UiLCJmcmVxdWVuY3lNdWxpdHBsaWVyIiwid2Vla2x5IiwiZXZlcnkgMiB3ZWVrcyIsInR3aWNlIGEgbW9udGgiLCJtb250aGx5IiwiZXN0aW1hdGVkQW5udWFsSW5jb21lIiwiZm9yRWFjaCIsImsiLCJNYXRoIiwicm91bmQiLCJjb3VudEVhcm5lcnMiLCJlYXJuZXJzQ291bnQiLCJtZWFuc1Rlc3QiLCJpbmNvbWVFYXJuZXJzQ291bnQiLCJpbmNvbWVFc3RpbWF0ZSIsInVzZXJDb250cm9sc0NvbnRyb2xsZXIiLCJsb2dvdXQiLCJsb2dnZWRJbiIsImdldFVzZXJTdGF0dXMiLCJ5ZXNOb0lucHV0Iiwic2NvcGUiLCJtb2RlbCIsInJlc3RyaWN0IiwicmVwbGFjZSIsImRpcmVjdGl2ZSIsIkF1dGhTZXJ2aWNlIiwiJGNvb2tpZXMiLCIkcSIsImdldENyZWRlbnRpYWxzIiwicmV0cmlldmVGb3JVc2VyIiwiaXNMb2dnZWRJbiIsInNldENyZWRlbnRpYWxzIiwicG9zdCIsInVzZXJuYW1lIiwiY2xlYXJDcmVkZW50aWFscyIsImNsZWFyIiwicHV0T2JqZWN0IiwiZ2V0T2JqZWN0IiwicmVtb3ZlIiwic2VydmljZSIsImhvdXNlaG9sZFNlcnZpY2UiLCJfaWQiLCJ1c2VySWQiLCJjcmVhdGUiLCJjb21wbGV0ZWRBcHBsaWNhdGlvbiIsImNvcHkiLCJzZWN0aW9uc1NlcnZpY2UiLCJhc3Npc3RhbmNlUHJvZ3JhbUhvdXNlaG9sZCIsImlzQXNzaXN0YW5jZUhvdXNlaG9sZCIsImNhdGVnb3JpY2FsbHlRdWFsaWZpZWQiLCJhbGxTdHVkZW50c0NhdGVnb3JpY2FsbHlRdWFsaWZ5IiwiaW5kZXhlZFNlY3Rpb25zIiwicmVxdWlyZWQiLCJzZWN0aW9uIiwiY3VycmVudENoaWxkIiwiYXNzaXN0YW5jZVByb2dyYW0iLCJwYXJ0aWNpcGFudCIsImVucm9sbGVkQ2hpbGRyZW4iLCJfIiwiZmlsdGVyIiwiYyIsInNwZWNpYWxTdGF0dXMiLCJmb3N0ZXJDaGlsZCIsImhvbWVsZXNzTWlncmFudFJ1bmF3YXkiLCJoZWFkU3RhcnRQYXJ0aWNpcGFudCIsImZpbmROZXh0IiwiY3VycmVudEluZGV4IiwiZmluZEluZGV4IiwibmV4dFNlY3Rpb24iLCJvdXRPZkZsb3dTdGF0ZXMiLCJpbmRleE9mIiwic2hvd1N1bW1hcnlBZnRlciIsImluZGV4QnkiXSwibWFwcGluZ3MiOiJDQUFBLFdBQ0ksWUFZQSxTQUFTQSxHQUFlQyxHQUdwQixRQUFTQyxHQUFjQyxHQUNuQixNQUFPLFVBQVNDLEVBQVdDLEdBRXZCLEtBREFGLEdBQVVDLEVBQVdDLEdBQ2ZELEdBTGRI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Q1BnSCxXQUFXLEVBQ1hnRixVQUFVLEVBQ1ZtQixrQkFBa0IsSUFHbEJoRyxNQUFPLG1CQUNQbkgsTUFBTyxrQkFDUGdILFdBQVcsRUFDWGdGLFVBQVUsRUFDVm1CLGtCQUFrQixJQUdsQmhHLE1BQU8sVUFDUG5ILE1BQU8sVUFDUGdILFdBQVcsRUFDWGdGLFVBQVUsRUFDVm1CLGtCQUFrQixJQUdsQmhHLE1BQU8sYUFDUG5ILE1BQU8sYUFDUGdILFdBQVcsRUFDWGdGLFVBQVUsRUFDVm1CLGtCQUFrQixJQUdsQmhHLE1BQU8sbUJBQ1BuSCxNQUFPLFlBQ1BnSCxXQUFXLEVBQ1hnRixVQUFVLEVBQ1ZtQixrQkFBa0IsSUFJdEJwQixFQUFrQk8sRUFBRWMsUUFBUXpGLEVBQVUsU0FFdEN3RCxHQUNBM0IsV0FBVyxFQUNYN0IsU0FBVUEsRUFDVm9FLGdCQUFpQkEsRUFDakIxSSxlQUFnQkEsRUFDaEJFLE9BQVFBLEVBQ1JILHVCQUF3QkEsRUFHNUIsT0FBTytILEdBbkZYNUssUUFDS0MsT0FBTyxtQkFDUDJLLFFBQVEsV0FBWU8sR0FFekJBLEVBQWdCdE4sU0FBVyxhQUFjIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcsWyduZ0Nvb2tpZXMnLCAnbmdDc3YnLCduZ01hdGVyaWFsJywgJ25nU2FuaXRpemUnLCAndWkucm91dGVyJ10pXG4gICAgLmNvbmZpZyhyb3V0ZXJDb25maWcpXG4gICAgLmNvbmZpZyhtYXRlcmlhbERlc2lnblRoZW1lcilcbiAgICAuY29uZmlnKGVycm9yRGVjb3JhdG9yKVxuICAgIC5ydW4oc2Nyb2xsZXIpO1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAvL1Nob3cgc291cmNlIG1hcHMgaW4gZXJyb3JzXG4gICAgZXJyb3JEZWNvcmF0b3IuJGluamVjdCA9IFsnJHByb3ZpZGUnXTtcbiAgICBmdW5jdGlvbiBlcnJvckRlY29yYXRvcigkcHJvdmlkZSkge1xuICAgICAgICAkcHJvdmlkZS5kZWNvcmF0b3IoJyRleGNlcHRpb25IYW5kbGVyJywgZGVjb3JhdGVFcnJvcik7XG4gICAgICAgIGRlY29yYXRlRXJyb3IuJGluamVjdCA9IFsnJGRlbGVnYXRlJ107XG4gICAgICAgIGZ1bmN0aW9uIGRlY29yYXRlRXJyb3IoJGRlbGVnYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXhjZXB0aW9uLCBjYXVzZSkge1xuICAgICAgICAgICAgICAgICRkZWxlZ2F0ZShleGNlcHRpb24sIGNhdXNlKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy9Sb3V0aW5nIGVuaGFuY2VtZW50c1xuICAgIHNjcm9sbGVyLiRpbmplY3QgPSBbJyRyb290U2NvcGUnXTtcbiAgICBmdW5jdGlvbiBzY3JvbGxlcigkcm9vdFNjb3BlKSB7XG4gICAgICAgIC8vIHNjcm9sbCB0byB0aGUgdG9wIG9uIHBhZ2UgdHJhbnNpdGlvblxuICAgICAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3VjY2VzcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID0gMDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gS2VlcCB0cmFjayBvZiBoaXN0b3J5XG4gICAgICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24oZXYsIHRvLCB0b1BhcmFtcywgZnJvbSwgZnJvbVBhcmFtcykge1xuICAgICAgICAgICAgJHJvb3RTY29wZS5wcmV2aW91c1N0YXRlID0gZnJvbS5uYW1lO1xuICAgICAgICAgICAgJHJvb3RTY29wZS5jdXJyZW50U3RhdGUgPSB0by5uYW1lO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvL0NvbG9yIHRoZW1lcyBmb3IgYnV0dG9uc1xuICAgIG1hdGVyaWFsRGVzaWduVGhlbWVyLiRpbmplY3QgPSBbJyRtZFRoZW1pbmdQcm92aWRlciddO1xuICAgIGZ1bmN0aW9uIG1hdGVyaWFsRGVzaWduVGhlbWVyKCRtZFRoZW1pbmdQcm92aWRlcikge1xuICAgICAgICAkbWRUaGVtaW5nUHJvdmlkZXIudGhlbWUoJ2RlZmF1bHQnKS5wcmltYXJ5UGFsZXR0ZSgndGVhbCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5iYWNrZ3JvdW5kUGFsZXR0ZSgnYnJvd24nLCB7J2RlZmF1bHQnOiAnNTAnfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLmZvcmVncm91bmRQYWxldHRlWzNdID0gJ3JnYmEoMCwwLDAsMC42NyknO1xuICAgIH1cblxuICAgIC8vIFVJIHJvdXRlclxuICAgIHJvdXRlckNvbmZpZy4kaW5qZWN0ID0gWyckc3RhdGVQcm92aWRlcicsICckdXJsUm91dGVyUHJvdmlkZXInXTtcbiAgICBmdW5jdGlvbiByb3V0ZXJDb25maWcgKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcblxuICAgICAgICByb3V0ZXIoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcik7XG4gICAgICAgIC8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiByb3V0ZXIoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xuICAgICAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xuXG4gICAgICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdzdGFydCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvJyxcbiAgICAgICAgICAgICAgICB2aWV3czp7XG4gICAgICAgICAgICAgICAgICAgIC8vICd1c2VyLWNvbnRyb2xzJzoge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy91c2VyLWNvbnRyb2xzLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29udHJvbGxlcjogJ3VzZXJDb250cm9sc0NvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICdzaWRlLW5hdic6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lkZU5hdi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnRyb2xsZXI6ICdzaWRlTmF2Q29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3N0YXJ0Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ21haW5Db250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnY2hpbGRyZW4nLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2NoaWxkcmVuJyxcbiAgICAgICAgICAgICAgICB2aWV3czp7XG4gICAgICAgICAgICAgICAgICAgICd1c2VyLWNvbnRyb2xzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy91c2VyLWNvbnRyb2xzLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3VzZXJDb250cm9sc0NvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZGVOYXYuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb250cm9sbGVyOiAnc2lkZU5hdkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2NoaWxkcmVuLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnbWFpbkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2NoaWxkSW5jb21lJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9jaGlsZEluY29tZScsXG4gICAgICAgICAgICAgICAgdmlld3M6e1xuICAgICAgICAgICAgICAgICAgICAndXNlci1jb250cm9scyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvdXNlci1jb250cm9scy5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICd1c2VyQ29udHJvbHNDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgJ3NpZGUtbmF2Jzoge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zaWRlTmF2Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29udHJvbGxlcjogJ3NpZGVOYXZDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgICAgICAgICAnbWFpbic6IHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9jaGlsZEluY29tZS5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ21haW5Db250cm9sbGVyJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdob3VzZWhvbGQnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2hvdXNlaG9sZCcsXG4gICAgICAgICAgICAgICAgdmlld3M6e1xuICAgICAgICAgICAgICAgICAgICAndXNlci1jb250cm9scyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvdXNlci1jb250cm9scy5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICd1c2VyQ29udHJvbHNDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAvLyAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZGVOYXYuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb250cm9sbGVyOiAnc2lkZU5hdkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9ob3VzZWhvbGQuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnbWFpbkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdob3VzZWhvbGRJbmNvbWUnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2hvdXNlaG9sZC1pbmNvbWUnLFxuICAgICAgICAgICAgICAgIHZpZXdzOntcbiAgICAgICAgICAgICAgICAgICAgJ3VzZXItY29udHJvbHMnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3VzZXItY29udHJvbHMuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAndXNlckNvbnRyb2xzQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gJ3NpZGUtbmF2Jzoge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zaWRlTmF2Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29udHJvbGxlcjogJ3NpZGVOYXZDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgICAgICAgICAnbWFpbic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvaG91c2Vob2xkSW5jb21lLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2hvdXNlaG9sZEluY29tZSdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2Rpc2Nsb3N1cmUnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2Rpc2Nsb3N1cmUnLFxuICAgICAgICAgICAgICAgIHZpZXdzOntcbiAgICAgICAgICAgICAgICAgICAgJ3VzZXItY29udHJvbHMnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3VzZXItY29udHJvbHMuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAndXNlckNvbnRyb2xzQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gJ3NpZGUtbmF2Jzoge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zaWRlTmF2Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29udHJvbGxlcjogJ3NpZGVOYXZDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgICAgICAgICAnbWFpbic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvZGlzY2xvc3VyZS5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdtYWluQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ3NpZ25hdHVyZScsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvc2lnbmF0dXJlJyxcbiAgICAgICAgICAgICAgICB2aWV3czp7XG4gICAgICAgICAgICAgICAgICAgICd1c2VyLWNvbnRyb2xzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy91c2VyLWNvbnRyb2xzLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3VzZXJDb250cm9sc0NvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZGVOYXYuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb250cm9sbGVyOiAnc2lkZU5hdkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZ25hdHVyZS5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ21haW5Db250cm9sbGVyJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb25maXJtYXRpb24nLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2NvbmZpcm1hdGlvbicsXG4gICAgICAgICAgICAgICAgdmlld3M6e1xuICAgICAgICAgICAgICAgICAgICAvLyAndXNlci1jb250cm9scyc6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvdXNlci1jb250cm9scy5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnRyb2xsZXI6ICd1c2VyQ29udHJvbHNDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgJ3NpZGUtbmF2Jzoge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zaWRlTmF2Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29udHJvbGxlcjogJ3NpZGVOYXZDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgICAgICAgICAnbWFpbic6IHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9jb25maXJtYXRpb24uaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdtYWluQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnZXhwb3J0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9leHBvcnQnLFxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICd1c2VyLWNvbnRyb2xzJzoge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy91c2VyLWNvbnRyb2xzLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29udHJvbGxlcjogJ3VzZXJDb250cm9sc0NvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICdzaWRlLW5hdic6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lkZU5hdi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnRyb2xsZXI6ICdzaWRlTmF2Q29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2V4cG9ydC5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdleHBvcnRDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnc2lnbnVwJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9zaWdudXAnLFxuICAgICAgICAgICAgICAgIHZpZXdzOntcbiAgICAgICAgICAgICAgICAgICAgLy8gJ3VzZXItY29udHJvbHMnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3VzZXItY29udHJvbHMuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb250cm9sbGVyOiAndXNlckNvbnRyb2xzQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gJ3NpZGUtbmF2Jzoge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9zaWRlTmF2Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29udHJvbGxlcjogJ3NpZGVOYXZDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgICAgICAgICAnbWFpbic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lnbnVwLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NpZ251cENvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2xvZ2luJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9sb2dpbicsXG4gICAgICAgICAgICAgICAgdmlld3M6e1xuICAgICAgICAgICAgICAgICAgICAvLyAndXNlci1jb250cm9scyc6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvdXNlci1jb250cm9scy5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnRyb2xsZXI6ICd1c2VyQ29udHJvbHNDb250cm9sbGVyJ1xuICAgICAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgICAgICAgICAvLyAnc2lkZS1uYXYnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NpZGVOYXYuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb250cm9sbGVyOiAnc2lkZU5hdkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9sb2dpbi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdsb2dpbkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdzb0ZhcicsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvc28tZmFyJyxcbiAgICAgICAgICAgICAgICB2aWV3czp7XG4gICAgICAgICAgICAgICAgICAgICd1c2VyLWNvbnRyb2xzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy91c2VyLWNvbnRyb2xzLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3VzZXJDb250cm9sc0NvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICdzaWRlLW5hdic6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lkZU5hdi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnRyb2xsZXI6ICdzaWRlTmF2Q29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NvRmFyLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NvRmFyQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ3NvRmFyLTInLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL3NvLWZhci0yJyxcbiAgICAgICAgICAgICAgICB2aWV3czp7XG4gICAgICAgICAgICAgICAgICAgICd1c2VyLWNvbnRyb2xzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy91c2VyLWNvbnRyb2xzLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3VzZXJDb250cm9sc0NvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICdzaWRlLW5hdic6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lkZU5hdi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnRyb2xsZXI6ICdzaWRlTmF2Q29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NvRmFyLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NvRmFyQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIC5zdGF0ZSgnc2F2ZUFuZEV4aXQnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL3NhdmUtYW5kLWV4aXQnLFxuICAgICAgICAgICAgICAgIHZpZXdzOntcbiAgICAgICAgICAgICAgICAgICAgLy8gJ3VzZXItY29udHJvbHMnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3VzZXItY29udHJvbHMuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb250cm9sbGVyOiAndXNlckNvbnRyb2xzQ29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICdzaWRlLW5hdic6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvc2lkZU5hdi5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnRyb2xsZXI6ICdzaWRlTmF2Q29udHJvbGxlcidcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL3NhdmUtYW5kLWV4aXQuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnbWFpbkNvbnRyb2xsZXInXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdleHBvcnRDb250cm9sbGVyJywgZXhwb3J0Q29udHJvbGxlcik7XG5cbiAgICBleHBvcnRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRodHRwJywgJyRzY29wZSddO1xuXG4gICAgZnVuY3Rpb24gZXhwb3J0Q29udHJvbGxlcigkaHR0cCwgJHNjb3BlKSB7XG4gICAgICAgICRodHRwLmdldCgnL2hvdXNlaG9sZC9jb21wbGV0ZWQnKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAkc2NvcGUuY29tcGxldGVkQXBwbGljYXRpb25zID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnZWF0Q2hhbGxlbmdlQXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ2hvdXNlaG9sZEluY29tZScsIGhvdXNlaG9sZEluY29tZSk7XG5cbiAgICBob3VzZWhvbGRJbmNvbWUuJGluamVjdCA9IFtcbiAgICAgICAgJyRtZERpYWxvZycsXG4gICAgICAgICckbWRNZWRpYScsXG4gICAgICAgICckcm9vdFNjb3BlJyxcbiAgICAgICAgJyRzY29wZScsXG4gICAgICAgICckc3RhdGUnLFxuICAgICAgICAnSG91c2Vob2xkJyxcbiAgICAgICAgJ1NlY3Rpb25zJ1xuICAgIF07XG5cbiAgICBmdW5jdGlvbiBob3VzZWhvbGRJbmNvbWUgKCRtZERpYWxvZywgJG1kTWVkaWEsICRyb290U2NvcGUsICRzY29wZSwgJHN0YXRlLCBIb3VzZWhvbGQsIFNlY3Rpb25zLCBIb3VzZWhvbGRJbmNvbWUpIHtcbiAgICAgICAgdmFyIHZtID0gJHNjb3BlO1xuICAgICAgICB2bS5udW1iZXJSZWdleCA9ICAnXlsxLTldWzAtOV0qJCc7XG4gICAgICAgIHZtLm5hdmlnYXRlVG9OZXh0U2VjdGlvbiA9IG5hdmlnYXRlVG9OZXh0U2VjdGlvbjtcblxuICAgICAgICB2YXIgd29yayA9IHtcbiAgICAgICAgICAgIGNhdGVnb3J5TmFtZTogJ3dvcmsnLFxuICAgICAgICAgICAgaGVhZGxpbmU6ICdXb3JrIEluY29tZScsXG4gICAgICAgICAgICBxdWVzdGlvbjogJ2Vhcm4gbW9uZXkgdGhyb3VnaCB3b3JrJyxcbiAgICAgICAgICAgIHNvdXJjZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOid3b3JrJyxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ1dvcmsgb3V0c2lkZSB0aGUgaG9tZSBpbiBhIG5vbi1taWxpdGFyeSBjYXBhY2l0eSAnLFxuICAgICAgICAgICAgICAgICAgICBzaG9ydExhYmVsOiAnRWFybmluZ3MgZnJvbSB3b3JrJyxcbiAgICAgICAgICAgICAgICAgICAgZnJlcXVlbmN5OiBbJ3dlZWtseScsICdldmVyeSAyIHdlZWtzJywgJ3R3aWNlIGEgbW9udGgnLCAnbW9udGhseSddLFxuICAgICAgICAgICAgICAgICAgICBhbm5vdGF0aW9uOiAnUGxlYXNlIHJlcG9ydCBncm9zcyBpbmNvbWUuIFRoaXMgaXMgdGhlIGFtb3VudCBvZiBpbmNvbWUgZWFybmVkIGJlZm9yZSBhbnkgbW9uZXkgaXMgdGFrZW4gb3V0IGZvciB0YXhlcyBvciBkZWR1Y3Rpb25zLiBJbmNsdWRlIHNhbGFyeSwgd2FnZXMsIGFuZCBjYXNoIGJvbnVzZXMuJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTonc2VsZkVtcGxveWVkJyxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRMYWJlbDogJ0Vhcm5pbmdzIGZyb20gc2VsZiBlbXBsb3ltZW50JyxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ1NlbGYtZW1wbG95ZWQnLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIGFubm90YXRpb246ICdGb3IgaG91c2Vob2xkIG1lbWJlcnMgdGhhdCBhcmUgc2VsZi1lbXBsb3llZCwgcmVwb3J0IGluY29tZSBmcm9tIHRoYXQgd29yayBhcyBhIG5ldCBhbW91bnQuIFRoaXMgaXMgY2FsY3VsYXRlZCBieSBzdWJ0cmFjdGluZyB0aGUgdG90YWwgb3BlcmF0aW5nIGV4cGVuc2VzIG9mIHRoZSBidXNpbmVzcyBmcm9tIGl0cyBncm9zcyByZWNlaXB0cyBvciByZXZlbnVlLidcblxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTonb25TdHJpa2UnLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnT24gc3RyaWtlJyxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRMYWJlbDogJ1N0cmlrZSBCZW5lZml0cycsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICcyeCBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIC8vIGFubm90YXRpb246XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IGFkZCBzcGFjZSBmb3IgaG91c2luZyBhbGxvd2FuY2UgcGVyIGRvY1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTonbWlsaXRhcnknLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnSW4gdGhlIFUuUy4gbWlsaXRhcnknLFxuICAgICAgICAgICAgICAgICAgICBzaG9ydExhYmVsOiAnQmFzaWMgcGF5IGFuZCBjYXNoIGJvbnVzZXMnLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIGFubm90YXRpb246ICdQbGVhc2UgZG8gbm90IGluY2x1ZGUgY29tYmF0IHBheSwgRlNTQSwgb3IgcHJpdmF0ZSBob3VzaW5nIGFsbG93YW5jZXMuJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcHVibGljQXNzaXN0YW5jZSA9IHtcbiAgICAgICAgICAgIGNhdGVnb3J5TmFtZTogJ3B1YmxpY0Fzc2lzdGFuY2UnLFxuICAgICAgICAgICAgaGVhZGxpbmU6ICdQdWJsaWMgQXNzaXN0YW5jZScsXG4gICAgICAgICAgICBxdWVzdGlvbjogJ3JlY2VpdmUgYW55IHB1YmxpYyBhc3Npc3RhbmNlIGJlbmVmaXRzJyxcbiAgICAgICAgICAgIHNvdXJjZXM6W1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6J3VuZW1wbG95bWVudCcsXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94TGFiZWw6ICdVbmVtcGxveW1lbnQgYmVuZWZpdHMnLFxuICAgICAgICAgICAgICAgICAgICBzaG9ydExhYmVsOiAnVW5lbXBsb3ltZW50IGJlbmVmaXRzJyxcbiAgICAgICAgICAgICAgICAgICAgZnJlcXVlbmN5OiBbJ3dlZWtseScsICdldmVyeSAyIHdlZWtzJywgJ3R3aWNlIGEgbW9udGgnLCAnbW9udGhseSddLFxuICAgICAgICAgICAgICAgICAgICAvLyBhbm5vdGF0aW9uOiAnJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTond29ya2Vyc0NvbXAnLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnV29ya2Vy4oCZcyBjb21wZW5zYXRpb24nLFxuICAgICAgICAgICAgICAgICAgICBzaG9ydExhYmVsOiAnV29ya2Vy4oCZcyBjb21wZW5zYXRpb24nLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIC8vIGFubm90YXRpb246ICcnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOidzc2knLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnU3VwcGxlbWVudGFsIFNlY3VyaXR5IEluY29tZSAoU1NJKScsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0TGFiZWw6ICdTdXBwbGVtZW50YWwgU2VjdXJpdHkgSW5jb21lIChTU0kpJyxcbiAgICAgICAgICAgICAgICAgICAgZnJlcXVlbmN5OiBbJ3dlZWtseScsICdldmVyeSAyIHdlZWtzJywgJ3R3aWNlIGEgbW9udGgnLCAnbW9udGhseSddLFxuICAgICAgICAgICAgICAgICAgICAvLyBhbm5vdGF0aW9uOiAnJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTonY2FzaEFzc2lzdGFuY2UnLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnQ2FzaCBhc3Npc3RhbmNlIGZyb20gU3RhdGUgb3IgbG9jYWwgZ292ZXJubWVudCcsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0TGFiZWw6ICdDYXNoIGFzc2lzdGFuY2UnLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIGFubm90YXRpb246ICdUaGlzIGNvdWxkIGluY2x1ZGUgVEFORiBvciBHZW5lcmFsIEFzc2lzdGFuY2UgbW9uZXkuJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTondmV0ZXJhbnNCZW5lZml0cycsXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94TGFiZWw6ICdWZXRlcmFu4oCZcyBiZW5lZml0cycsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0TGFiZWw6ICdWZXRlcmFu4oCZcyBiZW5lZml0cycsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5ub3RhdGlvbjogJ1RoaXMgY291bGQgaW5jbHVkZSBUQU5GIG9yIEdlbmVyYWwgQXNzaXN0YW5jZSBtb25leSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGFsaW1vbnkgPSB7XG4gICAgICAgICAgICBjYXRlZ29yeU5hbWU6ICdhbGltb255JyxcbiAgICAgICAgICAgIGhlYWRsaW5lOiAnQWxpbW9ueScsXG4gICAgICAgICAgICBxdWVzdGlvbjogJ3JlY2VpdmUgYWxpbW9ueSBwYXltZW50cycsXG4gICAgICAgICAgICBzb3VyY2VzOltcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnYWxpbW9ueScsXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94TGFiZWw6ICdhbGltb255IHBheW1lbnRzJyxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRMYWJlbDogJ0FsaW1vbnkgcGF5bWVudCcsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICAgICAgYW5ub3RhdGlvbjogJ0lmIGluY29tZSBpcyByZWNlaXZlZCBmcm9tIGFsaW1vbnksIG9ubHkgY291cnQtb3JkZXJlZCBwYXltZW50cyBzaG91bGQgYmUgcmVwb3J0ZWQgaGVyZS4gSW5mb3JtYWwgYnV0IHJlZ3VsYXIgcGF5bWVudHMgc2hvdWxkIGJlIHJlcG9ydGVkIGxhdGVyIGFzIOKAnG90aGVy4oCdIGluY29tZS4nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjaGlsZFN1cHBvcnQgPSB7XG4gICAgICAgICAgICBjYXRlZ29yeU5hbWU6ICdjaGlsZFN1cHBvcnQnLFxuICAgICAgICAgICAgaGVhZGxpbmU6ICdDaGlsZCBTdXBwb3J0JyxcbiAgICAgICAgICAgIHF1ZXN0aW9uOiAncmVjZWl2ZSBhbnkgY2hpbGQgc3VwcG9ydCcsXG4gICAgICAgICAgICBzb3VyY2VzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ2NoaWxkU3VwcG9ydCcsXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94TGFiZWw6ICdhbnkgY2hpbGQgc3VwcG9ydCcsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0TGFiZWw6ICdDaGlsZCBzdXBwb3J0IHBheW1lbnQnLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIGFubm90YXRpb246ICdJZiBpbmNvbWUgaXMgcmVjZWl2ZWQgZnJvbSBjaGlsZCBzdXBwb3J0LCBvbmx5IGNvdXJ0LW9yZGVyZWQgcGF5bWVudHMgc2hvdWxkIGJlIHJlcG9ydGVkIGhlcmUuIEluZm9ybWFsIGJ1dCByZWd1bGFyIHBheW1lbnRzIHNob3VsZCBiZSByZXBvcnRlZCBsYXRlciBhcyDigJxvdGhlcuKAnSBpbmNvbWUuJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcmV0aXJlbWVudCA9IHtcbiAgICAgICAgICAgIGNhdGVnb3J5TmFtZTogJ3JldGlyZW1lbnQnLFxuICAgICAgICAgICAgaGVhZGxpbmU6ICdQZW5zaW9uIGFuZCBSZXRpcmVtZW50JyxcbiAgICAgICAgICAgIHF1ZXN0aW9uOiAncmVjZWl2ZSBhbnkgcGVuc2lvbiBvciByZXRpcmVtZW50IG1vbmV5JyxcbiAgICAgICAgICAgIHNvdXJjZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnc29jaWFsU2VjdXJpdHknLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnU29jaWFsIFNlY3VyaXR5JyxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRMYWJlbDogJ1NvY2lhbCBzZWN1cml0eScsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICAgICAgYW5ub3RhdGlvbjogJ1BsZWFzZSBpbmNsdWRlIHJhaWxyb2FkIHJldGlyZW1lbnQgYW5kIGJsYWNrIGx1bmcgYmVuZWZpdHMnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAncHJpdmF0ZVBlbnNpb24nLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnUHJpdmF0ZSBwZW5zaW9ucyBvciBkaXNhYmlsaXR5JyxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRMYWJlbDogJ1ByaXZhdGUgcGVuc2lvbnMgb3IgZGlzYWJpbGl0eScsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5ub3RhdGlvbjogJydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIG90aGVySW5jb21lID0ge1xuICAgICAgICAgICAgY2F0ZWdvcnlOYW1lOiAnb3RoZXJJbmNvbWUnLFxuICAgICAgICAgICAgaGVhZGxpbmU6ICdPdGhlciBJbmNvbWUnLFxuICAgICAgICAgICAgcXVlc3Rpb246ICdyZWNpZXZlIG1vbmV5IHRocm91Z2ggYW55IG90aGVyIHNvdXJjZScsXG4gICAgICAgICAgICBzb3VyY2VzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ3RydXN0cycsXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrYm94TGFiZWw6ICdJbmNvbWUgZnJvbSB0cnVzdHMgb3IgZXN0YXRlcycsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0TGFiZWw6ICdJbmNvbWUgZnJvbSB0cnVzdHMgb3IgZXN0YXRlcycsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5ub3RhdGlvbjogJydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdhbm51aXRpZXMnLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnQW5udWl0aWVzJyxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRMYWJlbDogJ0luY29tZSBmcm9tIGFubnVpdGllcycsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5ub3RhdGlvbjogJydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdpbnZlc3RtZW50JyxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ0ludmVzdG1lbnQgaW5jb21lJyxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRMYWJlbDogJ0ludmVzdG1lbnQgaW5jb21lJyxcbiAgICAgICAgICAgICAgICAgICAgZnJlcXVlbmN5OiBbJ3dlZWtseScsICdldmVyeSAyIHdlZWtzJywgJ3R3aWNlIGEgbW9udGgnLCAnbW9udGhseSddLFxuICAgICAgICAgICAgICAgICAgICAvLyBhbm5vdGF0aW9uOiAnJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ2ludGVyZXN0JyxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ0Vhcm5lZCBpbnRlcmVzdCcsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0TGFiZWw6ICdFYXJuZWQgaW50ZXJlc3QnLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIC8vIGFubm90YXRpb246ICcnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAncmVudGFsSW5jb21lJyxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ1JlbnRhbCBpbmNvbWUnLFxuICAgICAgICAgICAgICAgICAgICBzaG9ydExhYmVsOiAnUmVudGFsIGluY29tZScsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogWyd3ZWVrbHknLCAnZXZlcnkgMiB3ZWVrcycsICd0d2ljZSBhIG1vbnRoJywgJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5ub3RhdGlvbjogJydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdvdGhlckNhc2gnLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveExhYmVsOiAnUmVndWxhciBjYXNoIHBheW1lbnRzIGZyb20gb3V0c2lkZSBob3VzZWhvbGQnLFxuICAgICAgICAgICAgICAgICAgICBzaG9ydExhYmVsOiAnUmVndWxhciBjYXNoIHBheW1lbnRzIGZyb20gb3V0c2lkZSBob3VzZWhvbGQnLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgICAgIGFubm90YXRpb246ICdTdWNoIGNhc2ggcGF5bWVudHMgc2hvdWxkIGluY2x1ZGUgcmVndWxhciBjaGlsZCBzdXBwb3J0IG9yIGFsaW1vbnkgcGF5bWVudHMgcmVjZWl2ZWQgYnkgdGhlIGhvdXNlaG9sZCB0aGF0IGFyZSBub3QgY291cnQtb3JkZXJlZC4nXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBzaG93Q29uZmlybShldikge1xuICAgICAgICAgICAgLy8gQXBwZW5kaW5nIGRpYWxvZyB0byBkb2N1bWVudC5ib2R5IHRvIGNvdmVyIHNpZGVuYXYgaW4gZG9jcyBhcHBcbiAgICAgICAgICAgIHZhciBjb25maXJtID0gJG1kRGlhbG9nLmNvbmZpcm0oKVxuICAgICAgICAgICAgICAgICAgLnRpdGxlKCdSZWFkeSB0byBnbyBvbj8nKVxuICAgICAgICAgICAgICAgICAgLnRleHRDb250ZW50KCdJdCBsb29rcyBsaWtlIHlvdSBoYXZlIHNvbWUgZXJyb3JzIG9yIG1pc3NpbmcgaW5mb3JtYXRpb24gaW4gdGhpcyBzZWN0aW9uLiBEbyB5b3Ugd2FudCB0byBmaXggaXQgbm93PycpXG4gICAgICAgICAgICAgICAgICAuYXJpYUxhYmVsKCdSZWFkeSB0byBnbyBvbj8nKVxuICAgICAgICAgICAgICAgICAgLnRhcmdldEV2ZW50KGV2KVxuICAgICAgICAgICAgICAgICAgLm9rKCdNb3ZlIEFoZWFkIEFueXdheScpXG4gICAgICAgICAgICAgICAgICAuY2FuY2VsKCdHbyBCYWNrIGFuZCBGaXggSXQgTm93Jyk7XG4gICAgICAgICAgICByZXR1cm4gJG1kRGlhbG9nLnNob3coY29uZmlybSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPOiBkdXBsaWNhdGVkIHdpdGggbWFpbi5qcy4gU2hhcmUgaW4gYSBiZXR0ZXIgd2F5XG4gICAgICAgIGZ1bmN0aW9uIGlzSW52YWxpZEZvcm0oKSB7XG4gICAgICAgICAgICB2YXIgbWVtYmVyO1xuXG4gICAgICAgICAgICBpZiAodm0uZm9ybSAmJiAoIXZtLmZvcm0uJHZhbGlkKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRyb290U2NvcGUuaG91c2Vob2xkLm90aGVyTWVtYmVycy5sZW5ndGggOyBpKyspIHtcbiAgICAgICAgICAgICAgICBtZW1iZXIgPSAkcm9vdFNjb3BlLmhvdXNlaG9sZC5vdGhlck1lbWJlcnNbaV07XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG1lbWJlci5pbmNvbWVDYXRlZ29yeSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWVtYmVyLmluY29tZUNhdGVnb3J5W2tleV0uc2hvd0NoZWNrYm94ZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGZpeEl0SGFuZGxlcigpIHtcbiAgICAgICAgICAgIHZtLnNob3dFcnJvcnMgPSB0cnVlO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG1vdmVBaGVhZEhhbmRsZXIoKSB7XG4gICAgICAgICAgICBIb3VzZWhvbGQuc2F2ZSgpXG4gICAgICAgICAgICBTZWN0aW9ucy51cGRhdGVSZXF1aXJlZFNlY3Rpb25zKCk7XG4gICAgICAgICAgICBTZWN0aW9ucy5uYXZpZ2F0ZVRvTmV4dCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbmF2aWdhdGVUb05leHRTZWN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGlzSW52YWxpZEZvcm0oKSkge1xuICAgICAgICAgICAgICAgIC8vIG9wZW4gY29uZmlybWF0aW9uIG1vZGFsXG4gICAgICAgICAgICAgICAgc2hvd0NvbmZpcm0oKS50aGVuKG1vdmVBaGVhZEhhbmRsZXIsZml4SXRIYW5kbGVyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbW92ZUFoZWFkSGFuZGxlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZtLmdvQmFjayA9IGdvQmFjaztcbiAgICAgICAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgICAgICAgICAgSG91c2Vob2xkLnNhdmUoKVxuICAgICAgICAgICAgU2VjdGlvbnMudXBkYXRlUmVxdWlyZWRTZWN0aW9ucygpO1xuICAgICAgICAgICAgU2VjdGlvbnMuZ29CYWNrKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2bS5pbmNvbWVDYXRlZ29yaWVzID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWNBc3Npc3RhbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGltb255LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZFN1cHBvcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldGlyZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVySW5jb21lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuXG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAuY29udHJvbGxlcignbG9naW5Db250cm9sbGVyJywgbG9naW5Db250cm9sbGVyKTtcbiAgICBsb2dpbkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRzdGF0ZScsICdhdXRoJywgJ0hvdXNlaG9sZCcsICdTZWN0aW9ucyddO1xuICAgIGZ1bmN0aW9uIGxvZ2luQ29udHJvbGxlcigkc2NvcGUsICRzdGF0ZSwgYXV0aCwgSG91c2Vob2xkLCBTZWN0aW9ucykge1xuICAgICAgICB2YXIgdm0gPSAkc2NvcGU7XG4gICAgICAgIHZhciB1c2VyID0ge307XG4gICAgICAgIHZtLnN1Ym1pdCA9IHN1Ym1pdDtcbiAgICAgICAgdm0udXNlciA9IHVzZXI7XG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBzdWJtaXQoKSB7XG4gICAgICAgICAgICAvLyB2bS5kaXNhYmxlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIGF1dGhcbiAgICAgICAgICAgIC5sb2dpbih1c2VyLmVtYWlsLCB1c2VyLnBhc3N3b3JkKVxuICAgICAgICAgICAgLnRoZW4oc3VjY2Vzc0hhbmRsZXIsIGVycm9ySGFuZGxlcik7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHN1Y2Nlc3NIYW5kbGVyKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgLy8gdm0uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2bS5sb2dpbkZvcm0gPSB7fTtcbiAgICAgICAgICAgICAgICB2bS5tZXNzYWdlID0gJ3N1Y2Nlc3NmdWxseSBsb2dnZWQgaW4nO1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnc29GYXInKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZXJyb3JIYW5kbGVyKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdm0ubWVzc2FnZSA9ICdTb21ldGhpbmcgd2VudCB3cm9uZy4gUGxlYXNlIHRyeSBhZ2Fpbic7XG4gICAgICAgICAgICAgICAgLy8gdm0uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnZWF0Q2hhbGxlbmdlQXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ21haW5Db250cm9sbGVyJywgbWFpbkNvbnRyb2xsZXIpO1xuXG4gICAgbWFpbkNvbnRyb2xsZXIuJGluamVjdCA9IFtcbiAgICAgICAgJyRodHRwJyxcbiAgICAgICAgJyRtZERpYWxvZycsXG4gICAgICAgICckbWRNZWRpYScsXG4gICAgICAgICckcm9vdFNjb3BlJyxcbiAgICAgICAgJyRzY29wZScsXG4gICAgICAgICckc3RhdGUnLFxuICAgICAgICAnJHRpbWVvdXQnLFxuICAgICAgICAnSG91c2Vob2xkJyxcbiAgICAgICAgJ1NlY3Rpb25zJ1xuICAgIF07XG5cbiAgICBmdW5jdGlvbiBtYWluQ29udHJvbGxlciAoJGh0dHAsICRtZERpYWxvZywgJG1kTWVkaWEsICRyb290U2NvcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZSwgJHN0YXRlLCAkdGltZW91dCwgSG91c2Vob2xkLCBTZWN0aW9ucykge1xuICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgICAgIHZhciB2bSA9ICRzY29wZTtcbiAgICAgICAgdm0uc2Nob29sRGlzdHJpY3QgPSAnT2FrbGFuZCBVbmlmaWVkIFNjaG9vbCBEaXN0cmljdCc7XG5cbiAgICAgICAgLy8gbmF2aWdhdGlvblxuICAgICAgICB2bS5nb0JhY2sgPSBnb0JhY2s7XG4gICAgICAgIHZtLm5hdmlnYXRlVG9OZXh0U2VjdGlvbiA9IG5hdmlnYXRlVG9OZXh0U2VjdGlvbjtcbiAgICAgICAgdm0uc3VibWl0QXBwbGljYXRpb24gPSBzdWJtaXRBcHBsaWNhdGlvbjtcbiAgICAgICAgdm0uc2hvd0Vycm9ycyA9IGZhbHNlO1xuICAgICAgICB2bS5udW1iZXJSZWdleCA9ICAnXlsxLTldWzAtOV0qJCc7XG4gICAgICAgIHZtLmNoaWxkSW5jb21lU291cmNlcyA9IHtcbiAgICAgICAgICAgIHdvcms6IHtcbiAgICAgICAgICAgICAgICB2YXVsZTond29yaycsXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdFYXJuaW5ncyBmcm9tIHdvcms6JyxcbiAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgYW5ub3RhdGlvbjogJ0EgY2hpbGQgaGFzIGEgam9iIHdoZXJlIHRoZXkgZWFybiBzYWxhcnkgb3Igd2FnZXMuIFBsZWFzZSByZXBvcnQgZ3Jvc3MgaW5jb21lLiBUaGlzIGlzIHRoZSBhbW91bnQgb2YgaW5jb21lIGVhcm5lZCBiZWZvcmUgYW55IG1vbmV5IGlzIHRha2VuIG91dCBmb3IgdGF4ZXMgb3IgZGVkdWN0aW9ucy4gSW5jbHVkZSBzYWxhcnksIHdhZ2VzLCBhbmQgY2FzaCBib251c2VzLicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc29jaWFsU2VjdXJpdHk6IHtcbiAgICAgICAgICAgICAgICB2YXVsZTonc29jaWFsU2VjdXJpdHknLFxuICAgICAgICAgICAgICAgIGxhYmVsOiAnU29jaWFsIFNlY3VyaXR5IERpc2FiaWxpdHkgUGF5bWVudHMgb3IgU3Vydml2b3LigJlzIEJlbmVmaXRzOicsXG4gICAgICAgICAgICAgICAgZnJlcXVlbmN5OiBbJ21vbnRobHknXSxcbiAgICAgICAgICAgICAgICAvLyBhbm5vdGF0aW9uOiAnQSBjaGlsZCBpcyBibGluZCBvciBkaXNhYmxlZCBhbmQgcmVjZWl2ZXMgU29jaWFsIFNlY3VyaXR5IGJlbmVmaXRzLicsXG4gICAgICAgICAgICAgICAgLy8gJyBBIHBhcmVudCBpcyBkaXNhYmxlZCwgcmV0aXJlZCwgb3IgZGVjZWFzZWQsIGFuZCB0aGVpciBjaGlsZCByZWNlaXZlcyBzb2NpYWwgc2VjdXJpdHkgYmVuZWZpdHMnLFxuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3RoZXJQZXJzb246IHtcbiAgICAgICAgICAgICAgICB2YXVsZTonb3RoZXJQZXJzb24nLFxuICAgICAgICAgICAgICAgIGxhYmVsOiAnSW5jb21lIGZyb20gcGVyc29ucyBvdXRzaWRlIHRoZSBob3VzZWhvbGQ6JyxcbiAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IFsnd2Vla2x5JywgJ2V2ZXJ5IDIgd2Vla3MnLCAndHdpY2UgYSBtb250aCcsICdtb250aGx5J10sXG4gICAgICAgICAgICAgICAgYW5ub3RhdGlvbjogJ0EgZnJpZW5kIG9yIGV4dGVuZGVkIGZhbWlseSBtZW1iZXIgcmVndWxhcmx5IGdpdmVzIGEgY2hpbGQgc3BlbmRpbmcgbW9uZXkuJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvdGhlclNvdXJjZToge1xuICAgICAgICAgICAgICAgIHZhdWxlOidvdGhlclNvdXJjZScsXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdJbmNvbWUgZnJvbSBhbnkgb3RoZXIgc291cmNlOicsXG4gICAgICAgICAgICAgICAgZnJlcXVlbmN5OiBbJ3dlZWtseScsICdldmVyeSAyIHdlZWtzJywgJ3R3aWNlIGEgbW9udGgnLCAnbW9udGhseSddLFxuICAgICAgICAgICAgICAgIGFubm90YXRpb246ICdBIGNoaWxkIHJlY2VpdmVzIGluY29tZSBmcm9tIGEgcHJpdmF0ZSBwZW5zaW9uIGZ1bmQsIGFubnVpdHksIG9yIHRydXN0LicsXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICAvL05ldyBjaGlsZHJlbiBhbmQgaG91c2Vob2xkIG1lbWJlcnMgYXJlIGNyZWF0ZWRcbiAgICAgICAgLy9ieSBjYWxsaW5nIHRoZSBzZXJ2ZXIgdG8gbWFrZSB1c2Ugb2YgbW9uZ29vc2UgbW9kZWxzXG4gICAgICAgIGZ1bmN0aW9uIGFkZENoaWxkKG5ld1ZhbCkge1xuICAgICAgICAgICAgaWYgKG5ld1ZhbCA+ICRyb290U2NvcGUuaG91c2Vob2xkLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICRodHRwLmdldCgnL2NoaWxkJykudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3Q2hpbGQgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZC5pbmNvbWVTb3VyY2VzID0gIE9iamVjdC5rZXlzKHZtLmNoaWxkSW5jb21lU291cmNlcykubWFwKGZ1bmN0aW9uKGluY29tZVNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBpbmNvbWVTb3VyY2UsIGFtb3VudDogbnVsbCwgZnJlcXVlbmN5OiBudWxsfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuaG91c2Vob2xkLmNoaWxkcmVuLnB1c2gobmV3Q2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICAvLyBSZWN1cnNlIGlmIG5lY2Vzc2FyeVxuICAgICAgICAgICAgICAgICAgICBhZGRDaGlsZChuZXdWYWwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYWRkT3RoZXJNZW1iZXIobmV3VmFsKSB7XG4gICAgICAgICAgICBpZiAobmV3VmFsID4gJHJvb3RTY29wZS5ob3VzZWhvbGQub3RoZXJNZW1iZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICRodHRwLmdldCgnL2hvdXNlaG9sZC1tZW1iZXInKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdIb3VzZWhvbGRNZW1iZXIgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICBuZXdIb3VzZWhvbGRNZW1iZXIgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5ob3VzZWhvbGQub3RoZXJNZW1iZXJzLnB1c2gobmV3SG91c2Vob2xkTWVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVjdXJzZSBpZiBuZWNlc3NhcnlcbiAgICAgICAgICAgICAgICAgICAgYWRkT3RoZXJNZW1iZXIobmV3VmFsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHRyaW1DaGlsZHJlbihob3VzZWhvbGQpIHtcbiAgICAgICAgICAgIC8vIGdldCByaWQgb2YgZXh0cmEgZW1wdHkgY2hpbGQgb2JlamNldHMgY3JlYXRlZCBpbiBwcm9jZXNzXG4gICAgICAgICAgICBpZiAoaG91c2Vob2xkLmNoaWxkcmVuLmxlbmd0aCA+IGhvdXNlaG9sZC5jaGlsZENvdW50KSB7XG4gICAgICAgICAgICAgICAgaG91c2Vob2xkLmNoaWxkcmVuID0gaG91c2Vob2xkLmNoaWxkcmVuLnNsaWNlKDAsIGhvdXNlaG9sZC5jaGlsZENvdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBob3VzZWhvbGQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB0cmltT3RoZXJNZW1iZXJzKGhvdXNlaG9sZCkge1xuICAgICAgICAgICAgLy8gZ2V0IHJpZCBvZiBleHRyYSBlbXB0eSBvdGhlck1lbWJlciBvYmVqY2V0cyBjcmVhdGVkIGluIHByb2Nlc3NcbiAgICAgICAgICAgIGlmIChob3VzZWhvbGQub3RoZXJNZW1iZXJzLmxlbmd0aCA+IGhvdXNlaG9sZC5vdGhlck1lbWJlcnNDb3VudCkge1xuICAgICAgICAgICAgICAgIGhvdXNlaG9sZC5vdGhlck1lbWJlcnMuc2xpY2UoMCwgaG91c2Vob2xkLm90aGVyTWVtYmVyc0NvdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBob3VzZWhvbGQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzaG93Q29uZmlybShldikge1xuICAgICAgICAgICAgLy8gQXBwZW5kaW5nIGRpYWxvZyB0byBkb2N1bWVudC5ib2R5IHRvIGNvdmVyIHNpZGVuYXYgaW4gZG9jcyBhcHBcbiAgICAgICAgICAgIHZhciBjb25maXJtID0gJG1kRGlhbG9nLmNvbmZpcm0oKVxuICAgICAgICAgICAgICAgICAgLnRpdGxlKCdSZWFkeSB0byBnbyBvbj8nKVxuICAgICAgICAgICAgICAgICAgLnRleHRDb250ZW50KCdJdCBsb29rcyBsaWtlIHlvdSBoYXZlIHNvbWUgZXJyb3JzIG9yIG1pc3NpbmcgaW5mb3JtYXRpb24gaW4gdGhpcyBzZWN0aW9uLiBEbyB5b3Ugd2FudCB0byBmaXggaXQgbm93PycpXG4gICAgICAgICAgICAgICAgICAuYXJpYUxhYmVsKCdSZWFkeSB0byBnbyBvbj8nKVxuICAgICAgICAgICAgICAgICAgLnRhcmdldEV2ZW50KGV2KVxuICAgICAgICAgICAgICAgICAgLm9rKCdNb3ZlIEFoZWFkIEFueXdheScpXG4gICAgICAgICAgICAgICAgICAuY2FuY2VsKCdHbyBCYWNrIGFuZCBGaXggSXQgTm93Jyk7XG4gICAgICAgICAgICByZXR1cm4gJG1kRGlhbG9nLnNob3coY29uZmlybSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgICAgICAgICB0cmltQ2hpbGRyZW4oJHJvb3RTY29wZS5ob3VzZWhvbGQpO1xuICAgICAgICAgICAgdHJpbU90aGVyTWVtYmVycygkcm9vdFNjb3BlLmhvdXNlaG9sZCk7XG4gICAgICAgICAgICBIb3VzZWhvbGQuc2F2ZSgpXG4gICAgICAgICAgICBTZWN0aW9ucy51cGRhdGVSZXF1aXJlZFNlY3Rpb25zKCk7XG4gICAgICAgICAgICBTZWN0aW9ucy5nb0JhY2soKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vRm9ybSBWYWxpZGF0aW9uXG4gICAgICAgIGZ1bmN0aW9uIGlzSW52YWxpZEZvcm0oKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGQ7XG5cbiAgICAgICAgICAgIGlmICgkcm9vdFNjb3BlLmN1cnJlbnRTdGF0ZSA9PT0gJ2NoaWxkSW5jb21lJykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgJHJvb3RTY29wZS5ob3VzZWhvbGQuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSAkcm9vdFNjb3BlLmhvdXNlaG9sZC5jaGlsZHJlbltqXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLmVhcm5zSW5jb21lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5lYXJuc0luY29tZSA9PT0gdHJ1ZSAmJiAhdm0uZm9ybS4kdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodm0uZm9ybSAmJiAoIXZtLmZvcm0uJHZhbGlkKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoJHJvb3RTY29wZS5jdXJyZW50U3RhdGUgPT09ICdjaGlsZHJlbicpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRyb290U2NvcGUuaG91c2Vob2xkLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkID0gJHJvb3RTY29wZS5ob3VzZWhvbGQuY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5lbnJvbGxlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZml4SXRIYW5kbGVyKCkge1xuICAgICAgICAgICAgdm0uc2hvd0Vycm9ycyA9IHRydWU7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbW92ZUFoZWFkSGFuZGxlcigpIHtcbiAgICAgICAgICAgIEhvdXNlaG9sZC5zYXZlKCk7XG4gICAgICAgICAgICBTZWN0aW9ucy51cGRhdGVSZXF1aXJlZFNlY3Rpb25zKCk7XG4gICAgICAgICAgICBTZWN0aW9ucy5uYXZpZ2F0ZVRvTmV4dCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbmF2aWdhdGVUb05leHRTZWN0aW9uKCkge1xuICAgICAgICAgICAgdHJpbUNoaWxkcmVuKCRyb290U2NvcGUuaG91c2Vob2xkKTtcbiAgICAgICAgICAgIHRyaW1PdGhlck1lbWJlcnMoJHJvb3RTY29wZS5ob3VzZWhvbGQpO1xuICAgICAgICAgICAgaWYgKGlzSW52YWxpZEZvcm0oKSkge1xuICAgICAgICAgICAgICAgIC8vIG9wZW4gY29uZmlybWF0aW9uIG1vZGFsXG4gICAgICAgICAgICAgICAgc2hvd0NvbmZpcm0oKS50aGVuKG1vdmVBaGVhZEhhbmRsZXIsZml4SXRIYW5kbGVyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbW92ZUFoZWFkSGFuZGxlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc3VibWl0QXBwbGljYXRpb24oKSB7XG4gICAgICAgICAgICB0cmltQ2hpbGRyZW4oJHJvb3RTY29wZS5ob3VzZWhvbGQpO1xuICAgICAgICAgICAgdHJpbU90aGVyTWVtYmVycygkcm9vdFNjb3BlLmhvdXNlaG9sZCk7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLmhvdXNlaG9sZC5jb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGlzSW52YWxpZEZvcm0oKSkge1xuICAgICAgICAgICAgICAgIC8vIG9wZW4gY29uZmlybWF0aW9uIG1vZGFsXG4gICAgICAgICAgICAgICAgc2hvd0NvbmZpcm0oKS50aGVuKG1vdmVBaGVhZEhhbmRsZXIsZml4SXRIYW5kbGVyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgSG91c2Vob2xkLnN1Ym1pdCgpO1xuICAgICAgICAgICAgICAgIFNlY3Rpb25zLnVwZGF0ZVJlcXVpcmVkU2VjdGlvbnMoKTtcbiAgICAgICAgICAgICAgICBTZWN0aW9ucy5uYXZpZ2F0ZVRvTmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2F0Y2hlcnNcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnaG91c2Vob2xkLmNoaWxkQ291bnQnLCBhZGRDaGlsZCk7XG4gICAgICAgICRzY29wZS4kd2F0Y2goJ2hvdXNlaG9sZC5vdGhlck1lbWJlcnNDb3VudCcsIGFkZE90aGVyTWVtYmVyKTtcbiAgICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdlYXRDaGFsbGVuZ2VBcHAnKVxuICAgICAgICAuY29udHJvbGxlcignc2lkZU5hdkNvbnRyb2xsZXInLCBzaWRlTmF2Q29udHJvbGxlcik7XG5cbiAgICBzaWRlTmF2Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJHN0YXRlJywgJ1NlY3Rpb25zJ107XG5cbiAgICBmdW5jdGlvbiBzaWRlTmF2Q29udHJvbGxlciAoJHNjb3BlLCAkc3RhdGUsIFNlY3Rpb25zKSB7XG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgICAgdmFyIHZtID0gJHNjb3BlO1xuXG4gICAgICAgIHZtLmN1cnJlbnRTdGF0ZSA9ICRzdGF0ZS4kY3VycmVudC5zZWxmLm5hbWU7XG4gICAgICAgIHZtLnNlY3Rpb25zID0gU2VjdGlvbnMuc2VjdGlvbnM7XG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAuY29udHJvbGxlcignc2lnbnVwQ29udHJvbGxlcicsIHNpZ251cENvbnRyb2xsZXIpO1xuICAgIHNpZ251cENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJ2F1dGgnLCAnU2VjdGlvbnMnXTtcblxuICAgIGZ1bmN0aW9uIHNpZ251cENvbnRyb2xsZXIoJHNjb3BlLCBhdXRoLCBTZWN0aW9ucykge1xuICAgICAgICB2YXIgdm0gPSAkc2NvcGU7XG4gICAgICAgIHZhciB1c2VyID0ge307XG4gICAgICAgIHZtLnN1Ym1pdCA9IHN1Ym1pdDtcbiAgICAgICAgdm0udXNlciA9IHVzZXI7XG5cbiAgICAgICAgZnVuY3Rpb24gc3VibWl0KCkge1xuICAgICAgICAgICAgdm0uZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIFRPRE86IGFkZCBsb2FkaW5nIGljb24gdG8gVUkgd2hlbiBkaXNhYmxlZCA9PT0gdHJ1ZVxuICAgICAgICAgICAgdm0uZGlzYWJsZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICBhdXRoLnNpZ251cCh1c2VyLmVtYWlsLCB1c2VyLnBhc3N3b3JkKVxuICAgICAgICAgICAgLnRoZW4oc3VjY2Vzc0hhbmRsZXIsIGVycm9ySGFuZGxlcik7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHN1Y2Nlc3NIYW5kbGVyKCkge1xuICAgICAgICAgICAgICAgIHZtLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdm0uc2lnbnVwRm9ybSA9IHt9OyAvL1Jlc2V0IGZvcm1cbiAgICAgICAgICAgICAgICB2bS5tZXNzYWdlID0gJ3N1Y2Nlc3NmdWxseSBjcmVhdGVkIGFuIGFjY291bnQnO1xuICAgICAgICAgICAgICAgIFNlY3Rpb25zLmdvQmFjaygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBlcnJvckhhbmRsZXIoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICB2bS5lcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgdm0ubWVzc2FnZSA9ICdTb21ldGhpbmcgd2VudCB3cm9uZy4gUGxlYXNlIHRyeSBhZ2Fpbic7XG4gICAgICAgICAgICAgICAgdm0uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAvLyB2bS5zaWdudXBGb3JtID0ge31cblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnZWF0Q2hhbGxlbmdlQXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ3NvRmFyQ29udHJvbGxlcicsIHNvRmFyQ29udHJvbGxlcik7XG5cbiAgICBzb0ZhckNvbnRyb2xsZXIuJGluamVjdCA9IFtcbiAgICAgICAgJyRodHRwJyxcbiAgICAgICAgJyRpbnRlcnZhbCcsXG4gICAgICAgICckbWREaWFsb2cnLFxuICAgICAgICAnJG1kTWVkaWEnLFxuICAgICAgICAnJHJvb3RTY29wZScsXG4gICAgICAgICckc2NvcGUnLFxuICAgICAgICAnJHN0YXRlJyxcbiAgICAgICAgJ0hvdXNlaG9sZCcsXG4gICAgICAgICdTZWN0aW9ucydcbiAgICBdO1xuXG4gICAgZnVuY3Rpb24gc29GYXJDb250cm9sbGVyICgkaHR0cCwgJGludGVydmFsLCAkbWREaWFsb2csICRtZE1lZGlhLCAkcm9vdFNjb3BlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUsICRzdGF0ZSwgSG91c2Vob2xkLCBTZWN0aW9ucykge1xuICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgICAgIHZhciB2bSA9ICRzY29wZTtcbiAgICAgICAgdm0ubWVhbnNUZXN0ID0gU2VjdGlvbnMubWVhbnNUZXN0O1xuXG4gICAgICAgIHZtLmNoaWxkcmVuTGFiZWwgPSAnY2hpbGRyZW4nO1xuICAgICAgICB2bS5hZHVsdHNMYWJlbCA9ICdhZHVsdHMnO1xuXG4gICAgICAgIHZtLmluY29tZUVhcm5lcnNDb3VudCA9IGNvdW50RWFybmVycygkcm9vdFNjb3BlLmhvdXNlaG9sZCk7XG4gICAgICAgIHZtLmluY29tZUVzdGltYXRlID0gZXN0aW1hdGVJbmNvbWUoJHJvb3RTY29wZS5ob3VzZWhvbGQpO1xuXG4gICAgICAgIC8vIG5hdmlnYXRpb25cbiAgICAgICAgdm0uZ29CYWNrID0gZ29CYWNrO1xuICAgICAgICB2bS5uYXZpZ2F0ZVRvTmV4dFNlY3Rpb24gPSBuYXZpZ2F0ZVRvTmV4dFNlY3Rpb247XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgICAgICBpZiAoJHJvb3RTY29wZS5ob3VzZWhvbGQuY2hpbGRyZW4ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgdm0uY2hpbGRyZW5MYWJlbCA9ICdjaGlsZCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJHJvb3RTY29wZS5ob3VzZWhvbGQub3RoZXJNZW1iZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHZtLmFkdWx0c0xhYmVsID0gJ2FkdWx0JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGluaXQoKTtcblxuICAgICAgICBmdW5jdGlvbiBlc3RpbWF0ZUluY29tZSgpIHtcbiAgICAgICAgICAgIHZhciBmcmVxdWVuY3lNdWxpdHBsaWVyID0ge1xuICAgICAgICAgICAgICAgIHdlZWtseTogNTIsXG4gICAgICAgICAgICAgICAgJ2V2ZXJ5IDIgd2Vla3MnOiAyNixcbiAgICAgICAgICAgICAgICAndHdpY2UgYSBtb250aCc6IDI0LFxuICAgICAgICAgICAgICAgIG1vbnRobHk6IDEyXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRUb3RhbGZvclNvdXJjZShzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlLmFtb3VudCAqIGZyZXF1ZW5jeU11bGl0cGxpZXJbc291cmNlLmZyZXF1ZW5jeV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBlc3RpbWF0ZWRBbm51YWxJbmNvbWUgPSAwO1xuXG4gICAgICAgICAgICAkcm9vdFNjb3BlLmhvdXNlaG9sZC5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLmVhcm5zSW5jb21lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLmluY29tZVNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbihpbmNvbWVTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmNvbWVTb3VyY2UuYW1vdW50ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzdGltYXRlZEFubnVhbEluY29tZSArPSBnZXRUb3RhbGZvclNvdXJjZShpbmNvbWVTb3VyY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJHJvb3RTY29wZS5ob3VzZWhvbGQub3RoZXJNZW1iZXJzLmZvckVhY2goZnVuY3Rpb24obWVtYmVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFtZW1iZXIuaW5jb21lQ2F0ZWdvcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgaW5jb21lU291cmNlO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBtZW1iZXIuaW5jb21lQ2F0ZWdvcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyB2YWx1ZSBnZXRzIHN0YXNoZWQgaW4gdGhlIHNhbWUgcGxhY2VcbiAgICAgICAgICAgICAgICAgICAgaW5jb21lU291cmNlID0gbWVtYmVyLmluY29tZUNhdGVnb3J5W2tleV07XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gaW5jb21lU291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoayAhPT0gJ3Nob3dDaGVja2JveGVzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgPSBpbmNvbWVTb3VyY2Vba107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc3RpbWF0ZWRBbm51YWxJbmNvbWUgKz0gZ2V0VG90YWxmb3JTb3VyY2Uoc291cmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoZXN0aW1hdGVkQW5udWFsSW5jb21lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNvdW50RWFybmVycyhob3VzZWhvbGQpIHtcbiAgICAgICAgICAgIHZhciBlYXJuZXJzQ291bnQgPSAwO1xuICAgICAgICAgICAgJHJvb3RTY29wZS5ob3VzZWhvbGQuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZC5lYXJuc0luY29tZSkge1xuICAgICAgICAgICAgICAgICAgICBlYXJuZXJzQ291bnQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJHJvb3RTY29wZS5ob3VzZWhvbGQub3RoZXJNZW1iZXJzLmZvckVhY2goZnVuY3Rpb24obWVtYmVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1lbWJlci5pbmNvbWVDYXRlZ29yeSAmJiBPYmplY3Qua2V5cyhtZW1iZXIuaW5jb21lQ2F0ZWdvcnkpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZWFybmVyc0NvdW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBlYXJuZXJzQ291bnQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgICAgICAgICBIb3VzZWhvbGQuc2F2ZSgpO1xuICAgICAgICAgICAgU2VjdGlvbnMudXBkYXRlUmVxdWlyZWRTZWN0aW9ucygpO1xuICAgICAgICAgICAgU2VjdGlvbnMuZ29CYWNrKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBuYXZpZ2F0ZVRvTmV4dFNlY3Rpb24oKSB7XG4gICAgICAgICAgICBIb3VzZWhvbGQuc2F2ZSgpO1xuICAgICAgICAgICAgU2VjdGlvbnMudXBkYXRlUmVxdWlyZWRTZWN0aW9ucygpO1xuICAgICAgICAgICAgU2VjdGlvbnMubmF2aWdhdGVUb05leHQoKTtcbiAgICAgICAgfVxuICAgIH1cblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAubW9kdWxlKCdlYXRDaGFsbGVuZ2VBcHAnKVxuICAgICAgLmNvbnRyb2xsZXIoJ3VzZXJDb250cm9sc0NvbnRyb2xsZXInLCB1c2VyQ29udHJvbHNDb250cm9sbGVyKTtcbiAgICB1c2VyQ29udHJvbHNDb250cm9sbGVyLiRpbmplY3QgPSBbJyRyb290U2NvcGUnLCAnJHNjb3BlJywgJyRzdGF0ZScsICdhdXRoJ107XG4gICAgZnVuY3Rpb24gdXNlckNvbnRyb2xzQ29udHJvbGxlcigkcm9vdFNjb3BlLCAkc2NvcGUsICRzdGF0ZSwgYXV0aCkge1xuICAgICAgICB2YXIgdm0gPSAkc2NvcGU7XG4gICAgICAgIHZtLmxvZ2dlZEluID0gYXV0aC5nZXRVc2VyU3RhdHVzKCk7XG4gICAgICAgIHZtLmxvZ291dCA9IGxvZ291dDtcbiAgICAgICAgdm0udXNlciA9ICRyb290U2NvcGUudXNlcjtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICBmdW5jdGlvbiBsb2dvdXQoKSB7XG4gICAgICAgICAgICBhdXRoLmxvZ291dCgpO1xuICAgICAgICAgICAgdm0ubG9nZ2VkSW4gPSBhdXRoLmdldFVzZXJTdGF0dXMoKTtcbiAgICAgICAgICAgICRzdGF0ZS5nbygnc2F2ZUFuZEV4aXQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRyb290U2NvcGUuJHdhdGNoKCd1c2VyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2bS5sb2dnZWRJbiA9IGF1dGguZ2V0VXNlclN0YXR1cygpO1xuICAgICAgICAgICAgdm0udXNlciA9ICRyb290U2NvcGUudXNlcjtcbiAgICAgICAgfSk7XG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnZWF0Q2hhbGxlbmdlQXBwJylcbiAgICAgICAgLmRpcmVjdGl2ZSgneWVzTm9JbnB1dCcsIHllc05vSW5wdXQpO1xuXG4gICAgZnVuY3Rpb24geWVzTm9JbnB1dCAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIG1vZGVsOiAnPSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3MveWVzbm8uaHRtbCcsXG4gICAgICAgIH07XG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnZWF0Q2hhbGxlbmdlQXBwJylcbiAgICAgICAgLnNlcnZpY2UoJ2F1dGgnLCBBdXRoU2VydmljZSk7XG5cbiAgICBBdXRoU2VydmljZS4kaW5qZWN0ID0gWyckY29va2llcycsICckaHR0cCcsICckcScsICckcm9vdFNjb3BlJywgJyRzdGF0ZScsICdIb3VzZWhvbGQnXTtcblxuICAgIGZ1bmN0aW9uIEF1dGhTZXJ2aWNlKCRjb29raWVzLCAkaHR0cCwgJHEsICRyb290U2NvcGUsICRzdGF0ZSwgSG91c2Vob2xkKSB7XG4gICAgICAgICRyb290U2NvcGUudXNlciA9IG51bGw7XG4gICAgICAgIGluaXQoKTtcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7fTtcbiAgICAgICAgc2VydmljZS5pc0xvZ2dlZEluID0gaXNMb2dnZWRJbjtcbiAgICAgICAgc2VydmljZS5nZXRVc2VyU3RhdHVzID0gZ2V0VXNlclN0YXR1cztcbiAgICAgICAgc2VydmljZS5zaWdudXAgPSBzaWdudXA7XG4gICAgICAgIHNlcnZpY2UubG9naW4gPSBsb2dpbjtcbiAgICAgICAgc2VydmljZS5sb2dvdXQgPSBsb2dvdXQ7XG4gICAgICAgIHNlcnZpY2UuaW5pdCA9IGluaXQ7XG5cbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHVzZXIgb24gc3RhcnRcbiAgICAgICAgICAgIHZhciB1c2VyID0gZ2V0Q3JlZGVudGlhbHMoKTtcbiAgICAgICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS51c2VyID0gdXNlcjtcbiAgICAgICAgICAgICAgICBIb3VzZWhvbGQucmV0cmlldmVGb3JVc2VyKHVzZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc0xvZ2dlZEluKCkge1xuICAgICAgICAgICAgaWYgKCRyb290U2NvcGUudXNlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0VXNlclN0YXR1cygpIHtcbiAgICAgICAgICAgIHJldHVybiAkcm9vdFNjb3BlLnVzZXI7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzaWdudXAoZW1haWwsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHBcbiAgICAgICAgICAgICAgICAucG9zdCgnL3VzZXIvc2lnbnVwJywge3VzZXJuYW1lOiBlbWFpbCwgcGFzc3dvcmQ6IHBhc3N3b3JkfSlcbiAgICAgICAgICAgICAgICAudGhlbihzdWNjZXNzSGFuZGxlciwgZXJyb3JIYW5kbGVyKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gc3VjY2Vzc0hhbmRsZXIocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBzZXRDcmVkZW50aWFscyhyZXNwb25zZS5kYXRhLnVzZXIpO1xuICAgICAgICAgICAgICAgIEhvdXNlaG9sZC5zYXZlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGVycm9ySGFuZGxlcihlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbG9naW4oZW1haWwsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogZW1haWwsXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gJGh0dHBcbiAgICAgICAgICAgICAgICAucG9zdCgnL3VzZXIvbG9naW4nLCBkYXRhKVxuICAgICAgICAgICAgICAgIC50aGVuKHN1Y2Nlc3NIYW5kbGVyLCBlcnJvckhhbmRsZXIpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBzdWNjZXNzSGFuZGxlcihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHNldENyZWRlbnRpYWxzKHJlc3BvbnNlLmRhdGEudXNlcik7XG4gICAgICAgICAgICAgICAgSG91c2Vob2xkLnJldHJpZXZlRm9yVXNlcihyZXNwb25zZS5kYXRhLnVzZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBlcnJvckhhbmRsZXIocmVzcG9uc2UsIGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgY2xlYXJDcmVkZW50aWFscygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbG9nb3V0KCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwXG4gICAgICAgICAgICAgICAgLmdldCgndXNlci9sb2dvdXQnKVxuICAgICAgICAgICAgICAgIC50aGVuKHN1Y2Nlc3NIYW5kbGVyLCBlcnJvckhhbmRsZXIpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBzdWNjZXNzSGFuZGxlcigpIHtcbiAgICAgICAgICAgICAgICBjbGVhckNyZWRlbnRpYWxzKCk7XG4gICAgICAgICAgICAgICAgSG91c2Vob2xkLmNsZWFyKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGVycm9ySGFuZGxlcigpIHtcbiAgICAgICAgICAgICAgICBjbGVhckNyZWRlbnRpYWxzKCk7XG4gICAgICAgICAgICAgICAgSG91c2Vob2xkLmNsZWFyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRDcmVkZW50aWFscyh1c2VyKSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLnVzZXIgPSB1c2VyO1xuICAgICAgICAgICAgcmV0dXJuICRjb29raWVzLnB1dE9iamVjdCgndXNlcicsIHVzZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Q3JlZGVudGlhbHMoKSB7XG4gICAgICAgICAgICByZXR1cm4gJGNvb2tpZXMuZ2V0T2JqZWN0KCd1c2VyJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjbGVhckNyZWRlbnRpYWxzKCkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS51c2VyID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiAkY29va2llcy5yZW1vdmUoJ3VzZXInKTtcbiAgICAgICAgfVxuICAgIH1cblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2VhdENoYWxsZW5nZUFwcCcpXG4gICAgICAgIC5zZXJ2aWNlKCdIb3VzZWhvbGQnLCBob3VzZWhvbGRTZXJ2aWNlKTtcblxuICAgIGhvdXNlaG9sZFNlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnLCAnJHJvb3RTY29wZSddO1xuXG4gICAgZnVuY3Rpb24gaG91c2Vob2xkU2VydmljZSgkaHR0cCwgJHJvb3RTY29wZSkge1xuICAgICAgICAvLyBUb2RvOiBjb25zaWRlciBtb3ZpbmcgdG8gc2VydmVyPz9cbiAgICAgICAgdmFyIEhvdXNlaG9sZCA9ICB7XG4gICAgICAgICAgICBjaGlsZENvdW50OiBudWxsLFxuICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICAgICAgb3RoZXJNZW1iZXJzQ291bnQ6IG51bGwsXG4gICAgICAgICAgICBvdGhlck1lbWJlcnM6IFtdLFxuICAgICAgICAgICAgY29tcGxldGVkQXBwbGljYXRpb246IGZhbHNlXG4gICAgICAgIH07XG5cbiAgICAgICAgJHJvb3RTY29wZS5ob3VzZWhvbGQgPSBhbmd1bGFyLmNvcHkoSG91c2Vob2xkKTtcblxuICAgICAgICB2YXIgc2VydmljZSA9IHt9O1xuICAgICAgICBzZXJ2aWNlLnJldHJpZXZlRm9yVXNlciA9IHJldHJpZXZlRm9yVXNlcjtcbiAgICAgICAgc2VydmljZS5zYXZlID0gc2F2ZTtcbiAgICAgICAgc2VydmljZS5jbGVhciA9IGNsZWFyO1xuICAgICAgICBzZXJ2aWNlLnN1Ym1pdCA9IHN1Ym1pdDtcblxuICAgICAgICByZXR1cm4gc2VydmljZTtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIGZ1bmN0aW9uIHJldHJpZXZlRm9yVXNlcih1c2VyKSB7XG4gICAgICAgICAgICAkaHR0cC5nZXQoJy9ob3VzZWhvbGQvJyArIHVzZXIuX2lkKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuaG91c2Vob2xkID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNhdmUoKSB7XG4gICAgICAgICAgICAvLyBPbmx5IHNhdmUgb24gdGhlIGxhc3QgcGFnZSBvciB3aGVuIFxuICAgICAgICAgICAgLy8gdGhlcmUncyBhIHNpZ25lZCBpbiB1c2VyXG4gICAgICAgICAgICBpZiAoISRyb290U2NvcGUudXNlcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRyb290U2NvcGUuaG91c2Vob2xkLnVzZXJJZCA9ICRyb290U2NvcGUudXNlci5faWQ7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2hvdXNlaG9sZCcsICRyb290U2NvcGUuaG91c2Vob2xkKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5ob3VzZWhvbGQgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHN1Ym1pdCgpIHtcbiAgICAgICAgICAgIGlmICgkcm9vdFNjb3BlLnVzZXIpIHtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmhvdXNlaG9sZC51c2VySWQgPSAkcm9vdFNjb3BlLnVzZXIuX2lkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2hvdXNlaG9sZCcsICRyb290U2NvcGUuaG91c2Vob2xkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuaG91c2Vob2xkID0gT2JqZWN0LmNyZWF0ZShIb3VzZWhvbGQpO1xuICAgICAgICB9XG4gICAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnZWF0Q2hhbGxlbmdlQXBwJylcbiAgICAgICAgLnNlcnZpY2UoJ1NlY3Rpb25zJywgc2VjdGlvbnNTZXJ2aWNlKTtcblxuICAgIHNlY3Rpb25zU2VydmljZS4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJyAsJyRzdGF0ZSddO1xuXG4gICAgZnVuY3Rpb24gc2VjdGlvbnNTZXJ2aWNlKCRyb290U2NvcGUsICRzdGF0ZSkge1xuICAgICAgICB2YXIgc2VjdGlvbnMgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdMZXRcXOKAmXMgR2V0IFN0YXJ0ZWQhICcsXG4gICAgICAgICAgICAgICAgc3RhdGU6ICdzdGFydCcsXG4gICAgICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93U3VtbWFyeUFmdGVyOiBmYWxzZVxuICAgICAgICAgICAgfSwgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdDaGlsZHJlbicsXG4gICAgICAgICAgICAgICAgc3RhdGU6ICdjaGlsZHJlbicsXG4gICAgICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93U3VtbWFyeUFmdGVyOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0hvdXNlaG9sZCBNZW1iZXJzJyxcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2hvdXNlaG9sZCcsXG4gICAgICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93U3VtbWFyeUFmdGVyOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1doYXQgWW91XFwndmUgRW50ZXJlZCBTbyBGYXInLFxuICAgICAgICAgICAgICAgIHN0YXRlOiAnc29GYXInLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hvd1N1bW1hcnlBZnRlcjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdDaGlsZHJlblxcJ3MgSW5jb21lJyxcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2NoaWxkSW5jb21lJyxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNob3dTdW1tYXJ5QWZ0ZXI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnSG91c2Vob2xkIEluY29tZScsXG4gICAgICAgICAgICAgICAgc3RhdGU6ICdob3VzZWhvbGRJbmNvbWUnLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hvd1N1bW1hcnlBZnRlcjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdTdW1tYXJ5JyxcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ3NvRmFyLTInLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hvd1N1bW1hcnlBZnRlcjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdEaXNjbG9zdXJlJyxcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2Rpc2Nsb3N1cmUnLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hvd1N1bW1hcnlBZnRlcjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdTaWduIGFuZCBDb25maXJtJyxcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ3NpZ25hdHVyZScsXG4gICAgICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93U3VtbWFyeUFmdGVyOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgXTtcblxuICAgICAgICB2YXIgaW5kZXhlZFNlY3Rpb25zID0gXy5pbmRleEJ5KHNlY3Rpb25zLCAnc3RhdGUnKTtcblxuICAgICAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgICAgICAgIG1lYW5zVGVzdDogdHJ1ZSxcbiAgICAgICAgICAgIHNlY3Rpb25zOiBzZWN0aW9ucyxcbiAgICAgICAgICAgIGluZGV4ZWRTZWN0aW9uczogaW5kZXhlZFNlY3Rpb25zLFxuICAgICAgICAgICAgbmF2aWdhdGVUb05leHQ6IG5hdmlnYXRlVG9OZXh0LFxuICAgICAgICAgICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgICAgICAgICB1cGRhdGVSZXF1aXJlZFNlY3Rpb25zOiB1cGRhdGVSZXF1aXJlZFNlY3Rpb25zXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVSZXF1aXJlZFNlY3Rpb25zKCkge1xuICAgICAgICAgICAgdmFyIGhvdXNlaG9sZCA9ICRyb290U2NvcGUuaG91c2Vob2xkO1xuICAgICAgICAgICAgc2VydmljZS5tZWFuc1Rlc3QgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIGFzc2lzdGFuY2VQcm9ncmFtSG91c2Vob2xkID0gaXNBc3Npc3RhbmNlSG91c2Vob2xkKGhvdXNlaG9sZCk7XG4gICAgICAgICAgICB2YXIgY2F0ZWdvcmljYWxseVF1YWxpZmllZCA9IGFsbFN0dWRlbnRzQ2F0ZWdvcmljYWxseVF1YWxpZnkoaG91c2Vob2xkKTtcblxuICAgICAgICAgICAgaWYgKGFzc2lzdGFuY2VQcm9ncmFtSG91c2Vob2xkIHx8IGNhdGVnb3JpY2FsbHlRdWFsaWZpZWQpIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlLm1lYW5zVGVzdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGluZGV4ZWRTZWN0aW9uc1snY2hpbGRJbmNvbWUnXS5yZXF1aXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGluZGV4ZWRTZWN0aW9uc1snaG91c2Vob2xkJ10ucmVxdWlyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpbmRleGVkU2VjdGlvbnNbJ2hvdXNlaG9sZEluY29tZSddLnJlcXVpcmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaW5kZXhlZFNlY3Rpb25zWydzb0Zhci0yJ10ucmVxdWlyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNlY3Rpb25zLmZvckVhY2goZnVuY3Rpb24oc2VjdGlvbikge1xuICAgICAgICAgICAgICAgIHNlY3Rpb24ucmVxdWlyZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc0Fzc2lzdGFuY2VIb3VzZWhvbGQoaG91c2Vob2xkKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudENoaWxkO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAgOyBpIDwgaG91c2Vob2xkLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudENoaWxkID0gaG91c2Vob2xkLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q2hpbGQuYXNzaXN0YW5jZVByb2dyYW0gJiYgY3VycmVudENoaWxkLmFzc2lzdGFuY2VQcm9ncmFtLnBhcnRpY2lwYW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFsbFN0dWRlbnRzQ2F0ZWdvcmljYWxseVF1YWxpZnkoaG91c2Vob2xkKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudENoaWxkLCBjaGlsZFF1YWxpZmllcztcblxuICAgICAgICAgICAgdmFyIGVucm9sbGVkQ2hpbGRyZW4gPSBfLmZpbHRlcihob3VzZWhvbGQuY2hpbGRyZW4sIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYy5lbnJvbGxlZCA9PT0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBtdXN0IGhhdmUga2lkcyB0byBxdWFsaWZ5XG4gICAgICAgICAgICBpZiAoZW5yb2xsZWRDaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vYWxsIGNoaWxkcmVuIGFyZSBjYXRlZ29yaWNhbGx5IHF1YWxpZmllZFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAgOyBpIDwgZW5yb2xsZWRDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRDaGlsZCA9IGhvdXNlaG9sZC5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRDaGlsZC5zcGVjaWFsU3RhdHVzLmZvc3RlckNoaWxkICYmXG4gICAgICAgICAgICAgICAgICAgICFjdXJyZW50Q2hpbGQuc3BlY2lhbFN0YXR1cy5ob21lbGVzc01pZ3JhbnRSdW5hd2F5ICYmXG4gICAgICAgICAgICAgICAgICAgICFjdXJyZW50Q2hpbGQuc3BlY2lhbFN0YXR1cy5oZWFkU3RhcnRQYXJ0aWNpcGFudFxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZmluZE5leHQoY3VycmVudFN0YXRlKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gXy5maW5kSW5kZXgoc2VjdGlvbnMsIGZ1bmN0aW9uKHNlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VjdGlvbi5zdGF0ZSA9PT0gY3VycmVudFN0YXRlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIExvb2sgZm9yIHRoZSBuZXh0IHJlcXVpcmVkIHNlY3Rpb25cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBjdXJyZW50SW5kZXggKyAxOyBpIDwgc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VjdGlvbnNbaV0ucmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlY3Rpb25zW2ldLnN0YXRlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgdGhlcmUgYXJlIG5vIG1vcmUgcmVxdWlyZWQgc2VjdGlvbnMsIHdlJ3JlIGRvbmUuXG4gICAgICAgICAgICByZXR1cm4gJ2NvbmZpcm1hdGlvbic7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBuYXZpZ2F0ZVRvTmV4dCgpIHtcbiAgICAgICAgICAgIHZhciBuZXh0U2VjdGlvbjtcbiAgICAgICAgICAgIHZhciBjdXJyZW50U3RhdGUgPSAkcm9vdFNjb3BlLmN1cnJlbnRTdGF0ZSB8fCAkc3RhdGUuJGN1cnJlbnQuc2VsZi5uYW1lO1xuICAgICAgICAgICAgdmFyIHByZXZpb3VzU3RhdGUgPSAkcm9vdFNjb3BlLnByZXZpb3VzU3RhdGUgfHwgJ3N0YXJ0JztcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBJZiB5b3UncmUgb24gc29tZSBvdGhlciBwYWdlIGxpa2Ugc3RhcnQgb3Igc2lnbmF0dXJlXG4gICAgICAgICAgICAvLyBNb3ZlIGFoZWFkIGFzIG5vcm1hbFxuICAgICAgICAgICAgbmV4dFNlY3Rpb24gID0gZmluZE5leHQoY3VycmVudFN0YXRlKTtcblxuXG4gICAgICAgICAgICAkc3RhdGUuZ28obmV4dFNlY3Rpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgICAgICAgICAgdmFyIHByZXZpb3VzU3RhdGUgPSAnc3RhcnQnO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRTdGF0ZSA9ICRyb290U2NvcGUuY3VycmVudFN0YXRlO1xuICAgICAgICAgICAgdmFyIG91dE9mRmxvd1N0YXRlcyA9IFsnbG9naW4nLCAnc2lnbnVwJ107XG5cbiAgICAgICAgICAgIGlmIChvdXRPZkZsb3dTdGF0ZXMuaW5kZXhPZihjdXJyZW50U3RhdGUpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHByZXZpb3VzU3RhdGUgPSAkcm9vdFNjb3BlLnByZXZpb3VzU3RhdGUgfHwgJ3N0YXJ0JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IF8uZmluZEluZGV4KHNlY3Rpb25zLCBmdW5jdGlvbihzZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWN0aW9uLnN0YXRlID09PSBjdXJyZW50U3RhdGU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNTdGF0ZSA9IHNlY3Rpb25zW2N1cnJlbnRJbmRleCAtIDFdLnN0YXRlO1xuICAgICAgICAgICAgICAgIHdoaWxlIChpbmRleGVkU2VjdGlvbnNbcHJldmlvdXNTdGF0ZV0ucmVxdWlyZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleCA9IGN1cnJlbnRJbmRleCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzU3RhdGUgPSBzZWN0aW9uc1tjdXJyZW50SW5kZXggLSAxXS5zdGF0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRzdGF0ZS5nbyhwcmV2aW91c1N0YXRlKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59KSgpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
