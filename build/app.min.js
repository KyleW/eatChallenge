!function(){"use strict";function e(e){function r(e){return function(r,l){throw e(r,l),r}}e.decorator("$exceptionHandler",r),r.$inject=["$delegate"]}function r(e){e.$on("$stateChangeSuccess",function(){document.body.scrollTop=document.documentElement.scrollTop=0}),e.$on("$stateChangeSuccess",function(r,l,o,t,n){e.previousState=t.name,e.currentState=l.name})}function l(e){e.theme("default").primaryPalette("teal").backgroundPalette("brown",{"default":"50"})}function o(e,r){function l(e,r){r.otherwise("/"),e.state("start",{url:"/",views:{main:{templateUrl:"../views/start.html",controller:"mainController"}}}).state("children",{url:"/children",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/children.html",controller:"mainController"}}}).state("childIncome",{url:"/childIncome",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/childIncome.html",controller:"mainController"}}}).state("household",{url:"/household",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/household.html",controller:"mainController"}}}).state("householdIncome",{url:"/household-income",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/householdIncome.html",controller:"householdIncome"}}}).state("disclosure",{url:"/disclosure",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/disclosure.html",controller:"mainController"}}}).state("signature",{url:"/signature",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/signature.html",controller:"mainController"}}}).state("confirmation",{url:"/confirmation",views:{main:{templateUrl:"../views/confirmation.html",controller:"mainController"}}}).state("export",{url:"/export",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/export.html",controller:"exportController"}}}).state("signup",{url:"/signup",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/signup.html",controller:"signupController"}}}).state("login",{url:"/login",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/login.html",controller:"loginController"}}}).state("soFar",{url:"/so-far",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/soFar.html",controller:"mainController"}}})}l(e,r)}angular.module("eatChallengeApp",["ngCookies","ngCsv","ngMaterial","ngSanitize","ui.router"]).config(o).config(l).config(e).run(r),e.$inject=["$provide"],r.$inject=["$rootScope"],l.$inject=["$mdThemingProvider"],o.$inject=["$stateProvider","$urlRouterProvider"]}();
!function(){"use strict";function t(t,e){t.get("/household/completed").then(function(t){e.completedApplications=t.data})}angular.module("eatChallengeApp").controller("exportController",t),t.$inject=["$http","$scope"]}();
!function(){"use strict";function e(e,o,n,t,a){function l(){n.save(r.household).then(function(){t.updateRequiredSections(r.household),t.navigateToNext()})}var r=e;r.household=n.household,e.$watch(function(){return n.household},function(){r.household=n.household}),r.navigateToNextSection=l;var s={categoryName:"work",headline:"Work Income",question:"earn money through work",sources:[{vaule:"work",checkboxLabel:"Work outside the home in a non-military capacity ",shortLabel:"Earnings from work",frequency:["weekly","biweekly","2x month","monthly"],annotation:"Please report gross income. This is the amount of income earned before any money is taken out for taxes or deductions. Include salary, wages, and cash bonuses."},{vaule:"selfEmployed",shortLabel:"Earnings from self employment",checkboxLabel:"Self-employed",frequency:["weekly","biweekly","2x month","monthly"],annotation:"For household members that are self-employed, report income from that work as a net amount. This is calculated by subtracting the total operating expenses of the business from its gross receipts or revenue."},{vaule:"onStrike",checkboxLabel:"On strike",shortLabel:"Strike Benefits",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"military",checkboxLabel:"In the U.S. military",shortLabel:"Basic pay and cash bonuses",frequency:["weekly","biweekly","2x month","monthly"],annotation:"Please do not include combat pay, FSSA, or private housing allowances."}]},i={categoryName:"publicAssistance",headline:"Public Assistance",question:"receive any public assistance benefits",sources:[{vaule:"unemployment",checkboxLabel:"Unemployment benefits",shortLabel:"Unemployment benefits",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"workersComp",checkboxLabel:"Worker’s compensation",shortLabel:"Worker’s compensation",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"ssi",checkboxLabel:"Supplemental Security Income (SSI)",shortLabel:"Supplemental Security Income (SSI)",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"cashAssistance",checkboxLabel:"Cash assistance from State or local government",shortLabel:"Cash assistance",frequency:["weekly","biweekly","2x month","monthly"],annotation:"This could include TANF or General Assistance money."},{vaule:"veteransBenefits",checkboxLabel:"Veteran’s benefits",shortLabel:"Veteran’s benefits",frequency:["weekly","biweekly","2x month","monthly"]}]},c={categoryName:"alimony",headline:"Alimony",question:"receive alimony payments",sources:[{vaule:"alimony",checkboxLabel:"alimony payments",shortLabel:"Alimony payment",frequency:["weekly","biweekly","2x month","monthly"],annotation:"If income is received from child support or alimony, only court-ordered payments should be reported here. Informal but regular payments should be reported later as “other” income."}]},h={categoryName:"childSupport",headline:"Child Support",question:"receive any child support",sources:[{vaule:"childSupport",checkboxLabel:"any child support",shortLabel:"Child support payment",frequency:["weekly","biweekly","2x month","monthly"],annotation:"If income is received from child support or childSupport, only court-ordered payments should be reported here. Informal but regular payments should be reported later as “other” income."}]},u={categoryName:"retirement",headline:"Pension and Retirement",question:"receive any pension or retirement money",sources:[{vaule:"socialSecurity",checkboxLabel:"Social Security (including railroad retirement and black lung benefits)",shortLabel:"Social security",frequency:["weekly","biweekly","2x month","monthly"],annotation:"Please include railroad retirement and black lung benefits"},{vaule:"privatePension",checkboxLabel:"Private pensions or disability",shortLabel:"Private pensions or disability",frequency:["weekly","biweekly","2x month","monthly"]}]},m={categoryName:"otherIncome",headline:"Other Income",question:"recieve money through any other source",sources:[{vaule:"trusts",checkboxLabel:"Income from trusts or estates",shortLabel:"Income from trusts or estates",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"annuities",checkboxLabel:"Annuities",shortLabel:"Income from annuities",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"investment",checkboxLabel:"Investment income",shortLabel:"Investment income",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"interest",checkboxLabel:"Earned interest",shortLabel:"Earned interest",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"rentalIncome",checkboxLabel:"Rental income",shortLabel:"Rental income",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"otherCash",checkboxLabel:"Regular cash payments from outside household",shortLabel:"Regular cash payments from outside household",frequency:["weekly","biweekly","2x month","monthly"],annotation:"Such cash payments should include regular child support or alimony payments received by the household that are not court-ordered."}]};r.incomeCategories=[s,i,c,h,u,m]}angular.module("eatChallengeApp").controller("householdIncome",e),e.$inject=["$scope","$state","Household","Sections"]}();
!function(){"use strict";function e(e,n){function o(){function e(e){r.disabled=!1,r.loginForm={},r.success="successfully logged in"}function o(e){r.error=!0,r.errorMessage="Something went wrong. Please try again",r.disabled=!1}r.error=!1,r.disabled=!0,n.login(l.email,l.password).then(e,o)}var r=e,l={};r.submit=o,r.user=l}angular.module("eatChallengeApp").controller("loginController",e),e.$inject=["$scope","auth"]}();
!function(){"use strict";function e(e,o,h,t,n,l,u,i){function s(){1===b.household.children.length&&(b.childrenLabel="child"),1===b.household.otherMembers.length&&(b.adultsLabel="adult")}function d(o){o>b.household.children.length&&e.get("/child").then(function(e){var h=e.data;b.household.children.push(h),d(o)})}function c(o){o>b.household.otherMembers.length&&e.get("/household-member").then(function(e){var h=e.data;h={},b.household.otherMembers.push(h),c(o)})}function r(e){return e.children.length>e.childCount&&(e.children=e.children.slice(0,e.childCount)),e}function a(e){return e.otherMembers.length>e.otherMembersCount&&e.otherMembers.slice(0,e.otherMembersCount),e}function m(){u.save(b.household),i.updateRequiredSections(b.household),i.goBack()}function f(){r(b.household),a(b.household),u.save(b.household).then(function(){i.updateRequiredSections(b.household),i.navigateToNext()})}function g(){n.household.completed=!0,f()}var b=n;b.schoolDistrict="Oakland Unified School District",b.household=u.household,n.$watch(function(){return u.household},function(){b.household=u.household}),b.meansTest=i.meansTest,b.childrenLabel="children",b.adultsLabel="adults",b.goBack=m,b.navigateToNextSection=f,b.submitApplication=g,s(),n.$watch("household.childCount",d),n.$watch("household.otherMembersCount",c)}angular.module("eatChallengeApp").controller("mainController",e),e.$inject=["$http","$interval","$mdDialog","$mdMedia","$scope","$state","Household","Sections"]}();
!function(){"use strict";function e(e,t,n){var c=e;c.currentState=t.$current.self.name,c.sections=n.sections}angular.module("eatChallengeApp").controller("sideNavController",e),e.$inject=["$scope","$state","Sections"]}();
!function(){"use strict";function e(e,s){function n(){function e(){o.disabled=!1,o.signupForm={},o.success="successfully created an account",console.log("signup success")}function n(e){console.log(e),o.error=!0,o.errorMessage="Something went wrong. Please try again",o.disabled=!1,console.log("signup fail")}o.error=!1,o.disabled=!0,s.signup(l.email,l.password).then(e,n)}console.log(s.getUserStatus());var o=e,l={};o.submit=n,o.user=l}angular.module("eatChallengeApp").controller("signupController",e),e.$inject=["$scope","auth"]}();
!function(){"use strict";function e(e,t,o){function u(){o.logout(),r.loggedIn=o.getUserStatus()}var r=t;r.loggedIn=o.getUserStatus(),r.logout=u,r.user=e.user,e.$watch("user",function(){r.loggedIn=o.getUserStatus(),r.user=e.user})}angular.module("eatChallengeApp").controller("userControlsController",e),e.$inject=["$rootScope","$scope","auth"]}();
!function(){"use strict";function e(){var e={scope:{member:"="},restrict:"A",replace:!0,templateUrl:"../views/income.html",link:o};return e}function o(e){e.incomeSources={work:{vaule:"work",label:"Earnings from work",frequency:["weekly","biweekly","2x month","monthly"],annotation:"A child has a job where they earn salary or wages. Please report gross income. This is the amount of income earned before any money is taken out for taxes or deductions. Include salary, wages, and cash bonuses."},socialSecurity:{vaule:"socialSecurity",label:"Social Security Disability Payments or Survivor’s Benefits ",frequency:["monthly"]},otherPerson:{vaule:"otherPerson",label:"Income from persons outside the household",frequency:["weekly","biweekly","2x month","monthly"],annotation:"A friend or extended family member regularly gives a child spending money."},otherSource:{vaule:"otherSource",label:"Income from any other source",frequency:["weekly","biweekly","2x month","monthly"],annotation:"A child receives income from a private pension fund, annuity, or trust."}},0===e.member.incomeSources.length&&(e.member.incomeSources=[],Object.keys(e.incomeSources).forEach(function(o){e.member.incomeSources.push({type:o,amount:null,frequency:null})}))}angular.module("eatChallengeApp").directive("incomeQuestions",e)}();
!function(){"use strict";function e(){return{scope:{model:"="},restrict:"A",replace:!0,templateUrl:"../views/yesno.html"}}angular.module("eatChallengeApp").directive("yesNoInput",e)}();
!function(){"use strict";function e(e,t,n,u,r,o){function s(){var e=d();e&&(u.user=e,o.retrieveForUser(e))}function i(){return u.user?!0:!1}function a(){return u.user}function c(e,n){function u(e){f(e.data.user),o.save()}function r(e){console.log(e)}return t.post("/user/signup",{username:e,password:n}).then(u,r)}function l(e,n){function u(e){f(e.data.user),e.data.household&&(o.set(e.data.household),r.go("soFar"))}function s(e){console.log(e),h()}var i={username:e,password:n};return t.post("/user/login",i).then(u,s)}function g(){function e(){h(),o.clear(),r.go("start")}function n(){h(),o.clear(),r.go("start")}return t.get("user/logout").then(e,n)}function f(t){return u.user=t,e.putObject("user",t)}function d(){return e.getObject("user")}function h(){return u.user=null,e.remove("user")}u.user=null,s();var p={};return p.isLoggedIn=i,p.getUserStatus=a,p.signup=c,p.login=l,p.logout=g,p.init=s,p}angular.module("eatChallengeApp").service("auth",e),e.$inject=["$cookies","$http","$q","$rootScope","$state","Household"]}();
!function(){function e(e,o){function t(){return c.household?c.household:void 0}function u(o){e.get("/household/"+o._id).then(function(e){c.household=e.data})}function n(t){return t=t||c.household,o.user&&(t.userId=o.user._id),e.post("/household",t)}function r(){c.household=Object.create(h)}var h={childCount:0,children:[],otherMembersCount:0,otherMembers:[],completedApplication:!1},c={};return c.get=t,c.retrieveForUser=u,c.save=n,c.clear=r,c.household=Object.create(h),c}angular.module("eatChallengeApp").service("Household",e),e.$inject=["$http","$rootScope"]}();
!function(){"use strict";function e(e,t){function r(e){c.meansTest=!0;var t=a(e),r=n(e);return t||r?(c.meansTest=!1,l.childIncome.required=!1,l.household.required=!1,void(l.householdIncome.required=!1)):void u.forEach(function(e){e.required=!0})}function a(e){for(var t,r=0;r<e.children.length;r++)if(t=e.children[r],t.assistanceProgram&&t.assistanceProgram.participant)return!0;return!1}function n(e){var t,r=_.filter(e.children,function(e){return e.enrolled===!0});if(0===r.length)return!1;for(var a=0;a<r.length;a++)if(t=e.children[a],!t.specialStatus.fosterChild&&!t.specialStatus.homelessMigrantRunaway&&!t.specialStatus.headStartParticipant)return!1;return!0}function o(e){for(var t=_.findIndex(u,function(t){return t.state===e}),r=t+1;r<u.length;r++)if(u[r].required)return u[r].state;return"confirmation"}function i(){var r,a=e.currentState||t.$current.self.name,n=e.previousState||"start";r="soFar"===a?n?o(n):"start":l[a].showSummaryAfter?"soFar":o(a),t.go(r)}function s(){var r=e.previousState||"start";t.go(r)}var u=[{label:"Let’s Get Started! ",state:"start",completed:!1,required:!0,showSummaryAfter:!1},{label:"Children",state:"children",completed:!1,required:!0,showSummaryAfter:!0},{label:"Household Members",state:"household",completed:!1,required:!0,showSummaryAfter:!0},{label:"Children's Income",state:"childIncome",completed:!1,required:!0,showSummaryAfter:!0},{label:"Household Income",state:"householdIncome",completed:!1,required:!0,showSummaryAfter:!0},{label:"Disclosure",state:"disclosure",completed:!1,required:!0,showSummaryAfter:!1},{label:"Sign and Confirm",state:"signature",completed:!1,required:!0,showSummaryAfter:!1}],l=_.indexBy(u,"state"),c={meansTest:!0,sections:u,indexedSections:l,navigateToNext:i,goBack:s,updateRequiredSections:r};return c}angular.module("eatChallengeApp").service("Sections",e),e.$inject=["$rootScope","$state"]}();
//# sourceMappingURL=data:application/json;base64,
