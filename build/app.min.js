!function(){"use strict";function e(e){e.$on("$stateChangeSuccess",function(){document.body.scrollTop=document.documentElement.scrollTop=0})}function l(e){e.theme("default").primaryPalette("teal").backgroundPalette("brown",{"default":"50"})}function t(e,l){function t(e,l){l.otherwise("/"),e.state("start",{url:"/",views:{main:{templateUrl:"../views/start.html",controller:"mainController"}}}).state("children",{url:"/children",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/children.html",controller:"mainController"}}}).state("childIncome",{url:"/childIncome",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/childIncome.html",controller:"mainController"}}}).state("household",{url:"/household",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/household.html",controller:"mainController"}}}).state("householdIncome",{url:"/household-income",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/householdIncome.html",controller:"householdIncome"}}}).state("disclosure",{url:"/disclosure",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/disclosure.html",controller:"mainController"}}}).state("signature",{url:"/signature",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/signature.html",controller:"mainController"}}}).state("confirmation",{url:"/confirmation",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/confirmation.html",controller:"mainController"}}}).state("export",{url:"/export",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/export.html",controller:"exportController"}}}).state("signup",{url:"/signup",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/signup.html",controller:"mainController"}}}).state("login",{url:"/login",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/login.html",controller:"loginController"}}}).state("soFar",{url:"/so-far",views:{"side-nav":{templateUrl:"../views/sideNav.html",controller:"sideNavController"},main:{templateUrl:"../views/soFar.html",controller:"mainController"}}})}t(e,l)}angular.module("eatChallengeApp",["ngCookies","ngCsv","ngMaterial","ngSanitize","ui.router"]).config(t).config(l).run(e),e.$inject=["$rootScope"],l.$inject=["$mdThemingProvider"],t.$inject=["$stateProvider","$urlRouterProvider"]}();
!function(){"use strict";function t(t,e){t.get("/household/completed").then(function(t){e.completedApplications=t.data})}angular.module("eatChallengeApp").controller("exportController",t),t.$inject=["$http","$scope"]}();
!function(){"use strict";function e(e,o,n,t,a,l){function r(){t.save(),a.updateRequiredSections(e.household),a.navigateToNext(o.$current.self.name)}var s=e,i=t.get(),c={categoryName:"work",headline:"Work Income",question:"earn money through work",sources:[{vaule:"work",checkboxLabel:"Work outside the home in a non-military capacity ",shortLabel:"Earnings from work",frequency:["weekly","biweekly","2x month","monthly"],annotation:"Please report gross income. This is the amount of income earned before any money is taken out for taxes or deductions. Include salary, wages, and cash bonuses."},{vaule:"selfEmployed",shortLabel:"Earnings from self employment",checkboxLabel:"Self-employed",frequency:["weekly","biweekly","2x month","monthly"],annotation:"For household members that are self-employed, report income from that work as a net amount. This is calculated by subtracting the total operating expenses of the business from its gross receipts or revenue."},{vaule:"onStrike",checkboxLabel:"On strike",shortLabel:"Strike Benefits",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"military",checkboxLabel:"In the U.S. military",shortLabel:"Basic pay and cash bonuses",frequency:["weekly","biweekly","2x month","monthly"],annotation:"Please do not include combat pay, FSSA, or private housing allowances."}]},h={categoryName:"publicAssistance",headline:"Public Assistance",question:"receive any public assistance benefits",sources:[{vaule:"unemployment",checkboxLabel:"Unemployment benefits",shortLabel:"Unemployment benefits",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"workersComp",checkboxLabel:"Worker’s compensation",shortLabel:"Worker’s compensation",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"ssi",checkboxLabel:"Supplemental Security Income (SSI)",shortLabel:"Supplemental Security Income (SSI)",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"cashAssistance",checkboxLabel:"Cash assistance from State or local government",shortLabel:"Cash assistance",frequency:["weekly","biweekly","2x month","monthly"],annotation:"This could include TANF or General Assistance money."},{vaule:"veteransBenefits",checkboxLabel:"Veteran’s benefits",shortLabel:"Veteran’s benefits",frequency:["weekly","biweekly","2x month","monthly"]}]},m={categoryName:"alimony",headline:"Alimony",question:"receive alimony payments",sources:[{vaule:"alimony",checkboxLabel:"alimony payments",shortLabel:"Alimony payment",frequency:["weekly","biweekly","2x month","monthly"],annotation:"If income is received from child support or alimony, only court-ordered payments should be reported here. Informal but regular payments should be reported later as “other” income."}]},y={categoryName:"childSupport",headline:"Child Support",question:"receive any child support",sources:[{vaule:"childSupport",checkboxLabel:"any child support",shortLabel:"Child support payment",frequency:["weekly","biweekly","2x month","monthly"],annotation:"If income is received from child support or childSupport, only court-ordered payments should be reported here. Informal but regular payments should be reported later as “other” income."}]},u={categoryName:"retirement",headline:"Pension and Retirement",question:"receive any pension or retirement money",sources:[{vaule:"socialSecurity",checkboxLabel:"Social Security (including railroad retirement and black lung benefits)",shortLabel:"Social security",frequency:["weekly","biweekly","2x month","monthly"],annotation:"Please include railroad retirement and black lung benefits"},{vaule:"privatePension",checkboxLabel:"Private pensions or disability",shortLabel:"Private pensions or disability",frequency:["weekly","biweekly","2x month","monthly"]}]},b={categoryName:"otherIncome",headline:"Other Income",question:"recieve money through any other source",sources:[{vaule:"trusts",checkboxLabel:"Income from trusts or estates",shortLabel:"Income from trusts or estates",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"annuities",checkboxLabel:"Annuities",shortLabel:"Income from annuities",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"investment",checkboxLabel:"Investment income",shortLabel:"Investment income",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"interest",checkboxLabel:"Earned interest",shortLabel:"Earned interest",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"rentalIncome",checkboxLabel:"Rental income",shortLabel:"Rental income",frequency:["weekly","biweekly","2x month","monthly"]},{vaule:"otherCash",checkboxLabel:"Regular cash payments from outside household",shortLabel:"Regular cash payments from outside household",frequency:["weekly","biweekly","2x month","monthly"],annotation:"Such cash payments should include regular child support or alimony payments received by the household that are not court-ordered."}]},d=[c,h,m,y,u,b];s.household=i,s.navigateToNextSection=r,s.incomeCategories=d}angular.module("eatChallengeApp").controller("householdIncome",e),e.$inject=["$scope","$state","Auth","Household","Sections"]}();
!function(){"use strict";function n(n,o){}angular.module("eatChallengeApp").controller("loginController",[n]),n.$inject=["$location","$scope"]}();
!function(){"use strict";function e(e,o,t,n,h,i,l,c,u){function a(o){o>h.household.children.length&&e.get("/child").then(function(e){var t=e.data;h.household.children.push(t),a(o)})}function s(e){for(;e>h.household.otherMembers.length;){var o=Object.create(f);h.household.otherMembers.push(o)}}function r(){c.save(),u.updateRequiredSections(h.household),u.navigateToNext(i.$current.self.name)}function d(){h.household.completed=!0,r()}var m=h;m.household=c.get(),m.schoolDistrict="Oakland Unified School District",m.navigateToNextSection=r,m.submitApplication=d;var f={income:{}};h.$watch("household.childCount",a),h.$watch("household.otherMembersCount",s)}angular.module("eatChallengeApp").controller("mainController",e),e.$inject=["$http","$interval","$mdDialog","$mdMedia","$scope","$state","Auth","Household","Sections"]}();
!function(){"use strict";function e(e,t,n){var c=e;c.currentState=t.$current.self.name,c.sections=n.sections}angular.module("eatChallengeApp").controller("sideNavController",e),e.$inject=["$scope","$state","Sections"]}();
!function(){"use strict";function n(n){function t(t,u){var s={email:t,password:u};n.post("/user/login",s).success(function(n){o=!0})}function u(){n.post("/user/logout").success(function(){o=!1})}var o=!1,s={login:t,logout:u,user:o};return s}angular.module("eatChallengeApp").service("Auth",n),n.$inject=["$http"]}();
!function(){function e(e){function t(){return o?o:o=Object.create(i)}function n(){return e.post("/household",o)}function r(){var e={};return e}this.get=t,this.save=n,this.clear=r;var o,i={childCount:0,children:[],otherMembersCount:0,otherMembers:[],completedApplication:!1};return this}angular.module("eatChallengeApp").service("Household",e),e.$inject=["$http"]}();
!function(){"use strict";function e(e,t){function r(e){for(var t,r,i=!1,n=0,l=!1,d=0;d<e.children.length;d++){if(t=e.children[d],t.assistanceProgram&&t.assistanceProgram.participant){i=!0;break}t.specialStatus&&t.enrolled&&(t.specialStatus.fosterChild||t.specialStatus.homelessMigrantRunaway||t.specialStatus.headStartParticipant)&&n++}return r=_.where(e.children,{enrolled:!0}).length,(l=i||e.children.length>0&&r===n)?(o.childIncome.required=!1,o.household.required=!1,void(o.householdIncome.required=!1)):void a.forEach(function(e){e.required=!0})}function i(e){for(var t=_.findIndex(a,function(t){return t.state===e}),r=t+1;r<a.length;r++)if(a[r].required)return a[r].state;return"confirmation"}function n(e){var r=i(e);t.go(r)}var a=[{label:"Let’s Get Started! ",state:"start",completed:!1,required:!0},{label:"Children",state:"children",completed:!1,required:!0},{label:"Children's Income",state:"childIncome",completed:!1,required:!0},{label:"Household Members",state:"household",completed:!1,required:!0},{label:"Household Income",state:"householdIncome",completed:!1,required:!0},{label:"Disclosure",state:"disclosure",completed:!1,required:!0},{label:"Sign and Confirm",state:"signature",completed:!1,required:!0}],o=_.indexBy(a,"state"),l={sections:a,indexedSections:o,navigateToNext:n,updateRequiredSections:r};return l}angular.module("eatChallengeApp").service("Sections",e),e.$inject=["$rootScope","$state"]}();
!function(){"use strict";function e(){var e={scope:{member:"="},restrict:"A",replace:!0,templateUrl:"../views/income.html",link:o};return e}function o(e){e.incomeSources={work:{vaule:"work",label:"Earnings from work",frequency:["weekly","biweekly","2x month","monthly"],annotation:"A child has a job where they earn salary or wages. Please report gross income. This is the amount of income earned before any money is taken out for taxes or deductions. Include salary, wages, and cash bonuses."},socialSecurity:{vaule:"socialSecurity",label:"Social Security Disability Payments or Survivor’s Benefits ",frequency:["monthly"]},otherPerson:{vaule:"otherPerson",label:"Income from persons outside the household",frequency:["weekly","biweekly","2x month","monthly"],annotation:"A friend or extended family member regularly gives a child spending money."},otherSource:{vaule:"otherSource",label:"Income from any other source",frequency:["weekly","biweekly","2x month","monthly"],annotation:"A child receives income from a private pension fund, annuity, or trust."}},0===e.member.incomeSources.length&&(e.member.incomeSources=[],Object.keys(e.incomeSources).forEach(function(o){e.member.incomeSources.push({type:o,amount:null,frequency:null})}))}angular.module("eatChallengeApp").directive("incomeQuestions",e)}();
!function(){"use strict";function e(){return{scope:{model:"="},restrict:"A",replace:!0,templateUrl:"../views/yesno.html"}}angular.module("eatChallengeApp").directive("yesNoInput",e)}();
//# sourceMappingURL=data:application/json;base64,
