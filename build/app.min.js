!function(){"use strict";function e(e){function t(e){return function(t,r){throw e(t,r),t}}e.decorator("$exceptionHandler",t),t.$inject=["$delegate"]}function t(e){e.$on("$stateChangeSuccess",function(){document.body.scrollTop=document.documentElement.scrollTop=0}),e.$on("$stateChangeSuccess",function(t,r,l,o,n){e.previousState=o.name,e.currentState=r.name})}function r(e){e.theme("default").primaryPalette("teal").backgroundPalette("brown",{"default":"50"}).foregroundPalette[3]="rgba(0,0,0,0.67)"}function l(e,t){function r(e,t){t.otherwise("/"),e.state("start",{url:"/",views:{main:{templateUrl:"../views/start.html",controller:"mainController"}}}).state("children",{url:"/children",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/children.html",controller:"mainController"}}}).state("childIncome",{url:"/childIncome",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/childIncome.html",controller:"mainController"}}}).state("household",{url:"/household",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/household.html",controller:"mainController"}}}).state("householdIncome",{url:"/household-income",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/householdIncome.html",controller:"householdIncome"}}}).state("disclosure",{url:"/disclosure",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/disclosure.html",controller:"mainController"}}}).state("signature",{url:"/signature",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/signature.html",controller:"mainController"}}}).state("confirmation",{url:"/confirmation",views:{main:{templateUrl:"../views/confirmation.html",controller:"mainController"}}}).state("export",{url:"/export",views:{main:{templateUrl:"../views/export.html",controller:"exportController"}}}).state("signup",{url:"/signup",views:{main:{templateUrl:"../views/signup.html",controller:"signupController"}}}).state("login",{url:"/login",views:{main:{templateUrl:"../views/login.html",controller:"loginController"}}}).state("soFar",{url:"/so-far",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/soFar.html",controller:"soFarController"}}}).state("soFar-2",{url:"/so-far-2",views:{"user-controls":{templateUrl:"../views/user-controls.html",controller:"userControlsController"},main:{templateUrl:"../views/soFar.html",controller:"soFarController"}}}).state("saveAndExit",{url:"/save-and-exit",views:{main:{templateUrl:"../views/save-and-exit.html",controller:"mainController"}}})}r(e,t)}angular.module("eatChallengeApp",["ngCookies","ngCsv","ngMaterial","ngSanitize","ui.router"]).config(l).config(r).config(e).run(t),e.$inject=["$provide"],t.$inject=["$rootScope"],r.$inject=["$mdThemingProvider"],l.$inject=["$stateProvider","$urlRouterProvider"]}();
!function(){"use strict";function e(){return{scope:{model:"="},restrict:"A",replace:!0,templateUrl:"../views/yesno.html"}}angular.module("eatChallengeApp").directive("yesNoInput",e)}();
!function(){"use strict";function e(e,r,n,t,u,s){function o(){var e=p();e&&(t.user=e,s.retrieveForUser(e))}function i(){return t.user?!0:!1}function c(){return t.user}function a(e,n){return r.post("/user/signup",{username:e,password:n})}function l(e,n){var t={username:e,password:n};return r.post("/user/login",t)}function f(){function e(){d(),s.clear()}function n(){d(),s.clear()}return r.get("user/logout").then(e,n)}function g(r){return t.user=r,e.putObject("user",r)}function p(){return e.getObject("user")}function d(){return t.user=null,e.remove("user")}t.user=null,o();var v={};return v.isLoggedIn=i,v.getUserStatus=c,v.signup=a,v.login=l,v.logout=f,v.init=o,v.setCredentials=g,v.clearCredentials=d,v}angular.module("eatChallengeApp").service("auth",e),e.$inject=["$cookies","$http","$q","$rootScope","$state","Household"]}();
!function(){function e(e,o){function u(u){e.get("/household/"+u._id).then(function(e){o.household=e.data})}function t(){return o.user?(o.household.userId=o.user._id,e.post("/household",o.household).then(function(e){o.household=e.data})):void 0}function h(){return o.user&&(o.household.userId=o.user._id),e.post("/household",o.household)}function n(){o.household=Object.create(r)}var r={childCount:null,children:[],otherMembersCount:null,otherMembers:[],completedApplication:!1};o.household=angular.copy(r);var l={};return l.retrieveForUser=u,l.save=t,l.clear=n,l.submit=h,l}angular.module("eatChallengeApp").service("Household",e),e.$inject=["$http","$rootScope"]}();
!function(){"use strict";function e(e,r){function t(){var r=e.household;d.meansTest=!0;var t=a(r),o=n(r);return t||o?(d.meansTest=!1,l.childIncome.required=!1,l.household.required=!1,l.householdIncome.required=!1,void(l["soFar-2"].required=!1)):void u.forEach(function(e){e.required=!0})}function a(e){for(var r,t=0;t<e.children.length;t++)if(r=e.children[t],r.assistanceProgram&&r.assistanceProgram.participant)return!0;return!1}function n(e){var r,t=_.filter(e.children,function(e){return e.enrolled===!0});if(0===t.length)return!1;for(var a=0;a<t.length;a++)if(r=e.children[a],!r.specialStatus.fosterChild&&!r.specialStatus.homelessMigrantRunaway&&!r.specialStatus.headStartParticipant)return!1;return!0}function o(e){for(var r=_.findIndex(u,function(r){return r.state===e}),t=r+1;t<u.length;t++)if(u[t].required)return u[t].state;return"confirmation"}function i(){var t,a=e.currentState||r.$current.self.name;e.previousState||"start";t=o(a),r.go(t)}function s(){var t="start",a=e.currentState,n=["login","signup"];if(-1!==n.indexOf(a))t=e.previousState||"start";else{var o=_.findIndex(u,function(e){return e.state===a});for(t=u[o-1].state;l[t].required===!1;)o-=1,t=u[o-1].state}r.go(t)}var u=[{label:"Let’s Get Started! ",state:"start",completed:!1,required:!0,showSummaryAfter:!1},{label:"Children",state:"children",completed:!1,required:!0,showSummaryAfter:!1},{label:"Household Members",state:"household",completed:!1,required:!0,showSummaryAfter:!1},{label:"What You've Entered So Far",state:"soFar",completed:!1,required:!0,showSummaryAfter:!1},{label:"Children's Income",state:"childIncome",completed:!1,required:!0,showSummaryAfter:!1},{label:"Household Income",state:"householdIncome",completed:!1,required:!0,showSummaryAfter:!1},{label:"Summary",state:"soFar-2",completed:!1,required:!0,showSummaryAfter:!1},{label:"Disclosure",state:"disclosure",completed:!1,required:!0,showSummaryAfter:!1},{label:"Sign and Confirm",state:"signature",completed:!1,required:!0,showSummaryAfter:!1}],l=_.indexBy(u,"state"),d={meansTest:!0,sections:u,indexedSections:l,navigateToNext:i,goBack:s,updateRequiredSections:t};return d}angular.module("eatChallengeApp").service("Sections",e),e.$inject=["$rootScope","$state"]}();
!function(){"use strict";function e(e,i){e.get("/household/completed").then(function(e){var r=e.data||[];i.completedApplications=t(r),i.csvHeaders=Object.keys(i.completedApplications[0])})}function t(e){for(var t,i,r=[],n=0;n<e.length;n++)t=e[n],i={},i.application_id=t._id,i.user_id=t.userId,i.child_count=t.childCount,i.child_1=JSON.stringify(t.children[0]),i.child_2=JSON.stringify(t.children[1]),i.child_3=JSON.stringify(t.children[2]),i.child_4=JSON.stringify(t.children[3]),i.child_5=JSON.stringify(t.children[4]),i.child_additional=JSON.stringify(t.children.slice(5)),i.other_household_member_count=t.otherMembersCount,i.adult_1=JSON.stringify(t.otherMembers[0]),i.adult_2=JSON.stringify(t.otherMembers[1]),i.adult_3=JSON.stringify(t.otherMembers[2]),i.adult_4=JSON.stringify(t.otherMembers[3]),i.adult_5=JSON.stringify(t.otherMembers[4]),i.adult_additional=JSON.stringify(t.otherMembers.slice(5)),i.completed=t.completed,i.signature=t.signature,i.signed_on_date=t.signedOn,i.street_address=t.streetAddress,i.city=t.city,i.state=t.state,i.zip=t.zip,i.phone=t.phone,i.email=t.email,i.last_4_ssn=t.last4ssn,r.push(i);return r}angular.module("eatChallengeApp").controller("exportController",e),e.$inject=["$http","$scope"]}();
!function(){"use strict";function e(e,o,t,n,a,r,s,i){function l(o){var t=e.confirm().title("Ready to go on?").textContent("It looks like you have some errors or missing information in this section. Do you want to fix it now?").ariaLabel("Ready to go on?").targetEvent(o).ok("Move Ahead Anyway").cancel("Go Back and Fix It Now");return e.show(t)}function c(){var e;if(b.form&&!b.form.$valid)return!0;for(var o=0;o<t.household.otherMembers.length;o++){e=t.household.otherMembers[o];for(var n in e.incomeCategory)if(void 0===e.incomeCategory[n].showCheckboxes)return!0}return!1}function h(){b.showErrors=!0,document.body.scrollTop=document.documentElement.scrollTop=0}function m(){r.save(),s.updateRequiredSections(),s.navigateToNext()}function u(){c()?l().then(m,h):m()}function y(){r.save(),s.updateRequiredSections(),s.goBack()}var b=n;b.numberRegex="^[1-9][0-9]*$",b.navigateToNextSection=u;var d={categoryName:"work",headline:"Work Income",question:"earn money through work",sources:[{value:"work",checkboxLabel:"Work outside the home in a non-military capacity ",shortLabel:"Earnings from work",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"Please report gross income. This is the amount of income earned before any money is taken out for taxes or deductions. Include salary, wages, and cash bonuses."},{value:"selfEmployed",shortLabel:"Earnings from self employment",checkboxLabel:"Self-employed",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"For household members that are self-employed, report income from that work as a net amount. This is calculated by subtracting the total operating expenses of the business from its gross receipts or revenue."},{value:"onStrike",checkboxLabel:"On strike",shortLabel:"Strike Benefits",frequency:["weekly","every 2 weeks","2x month","monthly"]},{value:"military",checkboxLabel:"In the U.S. military",shortLabel:"Basic pay and cash bonuses",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"Please do not include combat pay, FSSA, or private housing allowances."}]},k={categoryName:"publicAssistance",headline:"Public Assistance",question:"receive any public assistance benefits",sources:[{value:"unemployment",checkboxLabel:"Unemployment benefits",shortLabel:"Unemployment benefits",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"workersComp",checkboxLabel:"Worker’s compensation",shortLabel:"Worker’s compensation",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"ssi",checkboxLabel:"Supplemental Security Income (SSI)",shortLabel:"Supplemental Security Income (SSI)",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"cashAssistance",checkboxLabel:"Cash assistance from State or local government",shortLabel:"Cash assistance",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"This could include TANF or General Assistance money."},{value:"veteransBenefits",checkboxLabel:"Veteran’s benefits",shortLabel:"Veteran’s benefits",frequency:["weekly","every 2 weeks","twice a month","monthly"]}]},v={categoryName:"alimony",headline:"Alimony",question:"receive alimony payments",sources:[{value:"alimony",checkboxLabel:"alimony payments",shortLabel:"Alimony payment",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"If income is received from alimony, only court-ordered payments should be reported here. Informal but regular payments should be reported later as “other” income."}]},w={categoryName:"childSupport",headline:"Child Support",question:"receive any child support",sources:[{value:"childSupport",checkboxLabel:"any child support",shortLabel:"Child support payment",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"If income is received from child support, only court-ordered payments should be reported here. Informal but regular payments should be reported later as “other” income."}]},p={categoryName:"retirement",headline:"Pension and Retirement",question:"receive any pension or retirement money",sources:[{value:"socialSecurity",checkboxLabel:"Social Security",shortLabel:"Social security",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"Please include railroad retirement and black lung benefits"},{value:"privatePension",checkboxLabel:"Private pensions or disability",shortLabel:"Private pensions or disability",frequency:["weekly","every 2 weeks","twice a month","monthly"]}]},f={categoryName:"otherIncome",headline:"Other Income",question:"recieve money through any other source",sources:[{value:"trusts",checkboxLabel:"Income from trusts or estates",shortLabel:"Income from trusts or estates",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"annuities",checkboxLabel:"Annuities",shortLabel:"Income from annuities",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"investment",checkboxLabel:"Investment income",shortLabel:"Investment income",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"interest",checkboxLabel:"Earned interest",shortLabel:"Earned interest",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"rentalIncome",checkboxLabel:"Rental income",shortLabel:"Rental income",frequency:["weekly","every 2 weeks","twice a month","monthly"]},{value:"otherCash",checkboxLabel:"Regular cash payments from outside household",shortLabel:"Regular cash payments from outside household",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"Such cash payments should include regular child support or alimony payments received by the household that are not court-ordered."}]};b.goBack=y,b.incomeCategories=[d,k,v,w,p,f]}angular.module("eatChallengeApp").controller("householdIncome",e),e.$inject=["$mdDialog","$mdMedia","$rootScope","$scope","$state","Household","Sections"]}();
!function(){"use strict";function e(e,s,n,o,a){function l(){function e(e){console.log("calls success"),n.setCredentials(e.data.user),o.retrieveForUser(e.data.user),r.loginForm={},r.message="successfully logged in",s.go("children")}function a(){n.clearCredentials(),r.message="Please check your username and password and try again."}n.login(t.email,t.password).then(e,a)}var r=e,t={};r.submit=l,r.user=t}angular.module("eatChallengeApp").controller("loginController",e),e.$inject=["$scope","$state","auth","Household","Sections"]}();
!function(){"use strict";function e(e,o,n,t,r,i,l,h,a){function c(o){o>t.household.children.length&&e.get("/child").then(function(e){var n=e.data;n.incomeSources=Object.keys(p.childIncomeSources).map(function(e){return{type:e,amount:null,frequency:null}}),t.household.children.push(n),c(o)})}function u(o){o>t.household.otherMembers.length&&e.get("/household-member").then(function(e){var n=e.data;n={},t.household.otherMembers.push(n),u(o)})}function s(e){return e.children.length>e.childCount&&(e.children=e.children.slice(0,e.childCount)),e}function d(e){return e.otherMembers.length>e.otherMembersCount&&e.otherMembers.slice(0,e.otherMembersCount),e}function m(e){var n=o.confirm().title("Ready to go on?").textContent("It looks like you have some errors or missing information in this section. Do you want to fix it now?").ariaLabel("Ready to go on?").targetEvent(e).ok("Move Ahead Anyway").cancel("Go Back and Fix It Now");return o.show(n)}function f(){s(t.household),d(t.household),h.save(),a.updateRequiredSections(),a.goBack()}function y(){var e;if("childIncome"===t.currentState){for(var o=0;o<t.household.children.length;o++){if(e=t.household.children[o],void 0===e.earnsIncome)return!0;if(e.earnsIncome===!0&&!p.form.$valid)return!0}return!1}if(p.form&&!p.form.$valid)return!0;if("children"===t.currentState)for(var n=0;n<t.household.children.length;n++)if(e=t.household.children[n],void 0===e.enrolled)return!0;return!1}function v(){p.showErrors=!0,document.body.scrollTop=document.documentElement.scrollTop=0}function g(){h.save(),a.updateRequiredSections(),a.navigateToNext()}function w(){s(t.household),d(t.household),y()?m().then(g,v):g()}function b(){s(t.household),d(t.household),t.household.completed=!0,y()?m().then(g,v):(h.submit(),a.updateRequiredSections(),a.navigateToNext())}var p=r;p.schoolDistrict="Oakland Unified School District",p.goBack=f,p.navigateToNextSection=w,p.submitApplication=b,p.showErrors=!1,p.numberRegex="^[1-9][0-9]*$",p.childIncomeSources={work:{vaule:"work",label:"Earnings from work:",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"A child has a job where they earn salary or wages. Please report gross income. This is the amount of income earned before any money is taken out for taxes or deductions. Include salary, wages, and cash bonuses."},socialSecurity:{vaule:"socialSecurity",label:"Social Security Disability Payments or Survivor’s Benefits:",frequency:["monthly"]},otherPerson:{vaule:"otherPerson",label:"Income from persons outside the household:",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"A friend or extended family member regularly gives a child spending money."},otherSource:{vaule:"otherSource",label:"Income from any other source:",frequency:["weekly","every 2 weeks","twice a month","monthly"],annotation:"A child receives income from a private pension fund, annuity, or trust."}},r.$watch("household.childCount",c),r.$watch("household.otherMembersCount",u)}angular.module("eatChallengeApp").controller("mainController",e),e.$inject=["$http","$mdDialog","$mdMedia","$rootScope","$scope","$state","$timeout","Household","Sections"]}();
!function(){"use strict";function e(e,t,n){var c=e;c.currentState=t.$current.self.name,c.sections=n.sections}angular.module("eatChallengeApp").controller("sideNavController",e),e.$inject=["$scope","$state","Sections"]}();
!function(){"use strict";function e(e,a,s,n){function t(){function e(e){a.setCredentials(e.data.user),s.save(),r.signupForm={},r.message="successfully created an account",n.goBack()}function t(e){r.error=!0,r.message="There's already an account associated with this email. Please log in or try again with a different address."}r.error=!1,a.signup(o.email,o.password).then(e,t)}var r=e,o={};r.submit=t,r.user=o}angular.module("eatChallengeApp").controller("signupController",e),e.$inject=["$scope","auth","Household","Sections"]}();
!function(){"use strict";function e(e,o,n,t,r,a,c,i,h){function u(){1===r.household.children.length&&(m.childrenLabel="child"),1===r.household.otherMembers.length&&(m.adultsLabel="adult")}function l(){function e(e){return e.amount*o[e.frequency]}var o={weekly:52,"every 2 weeks":26,"twice a month":24,monthly:12},n=0;return r.household.children.forEach(function(o){o.earnsIncome&&o.incomeSources.forEach(function(o){o.amount>0&&(n+=e(o))})}),r.household.otherMembers.forEach(function(o){if(o.incomeCategory){var t;for(var r in o.incomeCategory){t=o.incomeCategory[r];for(var a in t)if("showCheckboxes"!==a){var c=t[a];n+=e(c)}}}}),Math.round(n)}function s(e){var o=0;return r.household.children.forEach(function(e){e.earnsIncome&&o++}),r.household.otherMembers.forEach(function(e){e.incomeCategory&&Object.keys(e.incomeCategory).length>0&&o++}),o}function d(){i.save(),h.updateRequiredSections(),h.goBack()}function f(){i.save(),h.updateRequiredSections(),h.navigateToNext()}var m=a;m.meansTest=h.meansTest,m.childrenLabel="children",m.adultsLabel="adults",m.incomeEarnersCount=s(r.household),m.incomeEstimate=l(r.household),m.goBack=d,m.navigateToNextSection=f,u()}angular.module("eatChallengeApp").controller("soFarController",e),e.$inject=["$http","$interval","$mdDialog","$mdMedia","$rootScope","$scope","$state","Household","Sections"]}();
!function(){"use strict";function t(t,e,o,u){function n(){u.logout(),r.loggedIn=u.getUserStatus(),o.go("saveAndExit")}var r=e;r.loggedIn=u.getUserStatus(),r.logout=n,r.user=t.user,t.$watch("user",function(){r.loggedIn=u.getUserStatus(),r.user=t.user})}angular.module("eatChallengeApp").controller("userControlsController",t),t.$inject=["$rootScope","$scope","$state","auth"]}();
//# sourceMappingURL=data:application/json;base64,
